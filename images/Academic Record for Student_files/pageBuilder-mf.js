var process = process || {env: {NODE_ENV: "development"}};

(function(A){'use strict';function xe(a){if(D(a))w(a.objectMaxDepth)&&(Xb.objectMaxDepth=Yb(a.objectMaxDepth)?a.objectMaxDepth:NaN),w(a.urlErrorParamsEnabled)&&Ga(a.urlErrorParamsEnabled)&&(Xb.urlErrorParamsEnabled=a.urlErrorParamsEnabled);else return Xb}function Yb(a){return W(a)&&0<a}function F(a,b){b=b||Error;return function(){var d=arguments[0],c;c="["+(a?a+":":"")+d+"] https://errors.angularjs.xlts.dev/1.9.6/"+(a?a+"/":"")+d;for(d=1;d<arguments.length;d++){c=c+(1==d?"?":"&")+"p"+(d-1)+"=";var e=
encodeURIComponent,f;f=arguments[d];f="function"==typeof f?f.toString().replace(/ \{[\s\S]*$/,""):"undefined"==typeof f?"undefined":"string"!=typeof f?JSON.stringify(f):f;c+=e(f)}return new b(c)}}function Aa(a){if(null==a||$a(a))return!1;if(H(a)||C(a)||x&&a instanceof x)return!0;var b="length"in Object(a)&&a.length;return W(b)&&(0<=b&&b-1 in a||"function"===typeof a.item)}function r(a,b,d){var c,e;if(a)if(B(a))for(c in a)"prototype"!==c&&"length"!==c&&"name"!==c&&a.hasOwnProperty(c)&&b.call(d,a[c],
c,a);else if(H(a)||Aa(a)){var f="object"!==typeof a;c=0;for(e=a.length;c<e;c++)(f||c in a)&&b.call(d,a[c],c,a)}else if(a.forEach&&a.forEach!==r)a.forEach(b,d,a);else if(Pc(a))for(c in a)b.call(d,a[c],c,a);else if("function"===typeof a.hasOwnProperty)for(c in a)a.hasOwnProperty(c)&&b.call(d,a[c],c,a);else for(c in a)va.call(a,c)&&b.call(d,a[c],c,a);return a}function Qc(a,b,d){for(var c=Object.keys(a).sort(),e=0;e<c.length;e++)b.call(d,a[c[e]],c[e]);return c}function Zb(a){return function(b,d){a(d,
b)}}function ye(){return++qb}function $b(a,b,d){for(var c=a.$$hashKey,e=0,f=b.length;e<f;++e){var g=b[e];if(D(g)||B(g))for(var k=Object.keys(g),h=0,l=k.length;h<l;h++){var m=k[h],p=g[m];d&&D(p)?ha(p)?a[m]=new Date(p.valueOf()):ab(p)?a[m]=new RegExp(p):p.nodeName?a[m]=p.cloneNode(!0):ac(p)?a[m]=p.clone():"__proto__"!==m&&(D(a[m])||(a[m]=H(p)?[]:{}),$b(a[m],[p],!0)):a[m]=p}}c?a.$$hashKey=c:delete a.$$hashKey;return a}function S(a){return $b(a,Ha.call(arguments,1),!1)}function ze(a){return $b(a,Ha.call(arguments,
1),!0)}function fa(a){return parseInt(a,10)}function bc(a,b){return S(Object.create(a),b)}function E(){}function Ta(a){return a}function ia(a){return function(){return a}}function cc(a){return B(a.toString)&&a.toString!==la}function z(a){return"undefined"===typeof a}function w(a){return"undefined"!==typeof a}function D(a){return null!==a&&"object"===typeof a}function Pc(a){return null!==a&&"object"===typeof a&&!Rc(a)}function C(a){return"string"===typeof a}function W(a){return"number"===typeof a}
function ha(a){return"[object Date]"===la.call(a)}function H(a){return Array.isArray(a)||a instanceof Array}function dc(a){switch(la.call(a)){case "[object Error]":return!0;case "[object Exception]":return!0;case "[object DOMException]":return!0;default:return a instanceof Error}}function B(a){return"function"===typeof a}function ab(a){return"[object RegExp]"===la.call(a)}function $a(a){return a&&a.window===a}function bb(a){return a&&a.$evalAsync&&a.$watch}function Ga(a){return"boolean"===typeof a}
function Ae(a){return a&&W(a.length)&&Be.test(la.call(a))}function ac(a){return!(!a||!(a.nodeName||a.prop&&a.attr&&a.find))}function Ce(a){var b={};a=a.split(",");var d;for(d=0;d<a.length;d++)b[a[d]]=!0;return b}function oa(a){return K(a.nodeName||a[0]&&a[0].nodeName)}function cb(a,b){var d=a.indexOf(b);0<=d&&a.splice(d,1);return d}function Ia(a,b,d){function c(a,b,c){c--;if(0>c)return"...";var d=b.$$hashKey,f;if(H(a)){f=0;for(var g=a.length;f<g;f++)b.push(e(a[f],c))}else if(Pc(a))for(f in a)b[f]=
e(a[f],c);else if(a&&"function"===typeof a.hasOwnProperty)for(f in a)a.hasOwnProperty(f)&&(b[f]=e(a[f],c));else for(f in a)va.call(a,f)&&(b[f]=e(a[f],c));d?b.$$hashKey=d:delete b.$$hashKey;return b}function e(a,b){if(!D(a))return a;var d=g.indexOf(a);if(-1!==d)return k[d];if($a(a)||bb(a))throw pa("cpws");var d=!1,e=f(a);void 0===e&&(e=H(a)?[]:Object.create(Rc(a)),d=!0);g.push(a);k.push(e);return d?c(a,e,b):e}function f(a){switch(la.call(a)){case "[object Int8Array]":case "[object Int16Array]":case "[object Int32Array]":case "[object Float32Array]":case "[object Float64Array]":case "[object Uint8Array]":case "[object Uint8ClampedArray]":case "[object Uint16Array]":case "[object Uint32Array]":return new a.constructor(e(a.buffer),
a.byteOffset,a.length);case "[object ArrayBuffer]":if(!a.slice){var b=new ArrayBuffer(a.byteLength);(new Uint8Array(b)).set(new Uint8Array(a));return b}return a.slice(0);case "[object Boolean]":case "[object Number]":case "[object String]":case "[object Date]":return new a.constructor(a.valueOf());case "[object RegExp]":return b=new RegExp(a.source,a.toString().match(/\/([^/]*)$/)[1]),b.lastIndex=a.lastIndex,b;case "[object Blob]":return new a.constructor([a],{type:a.type})}if(B(a.cloneNode))return a.cloneNode(!0)}
var g=[],k=[];d=Yb(d)?d:NaN;if(b){if(Ae(b)||"[object ArrayBuffer]"===la.call(b))throw pa("cpta");if(a===b)throw pa("cpi");H(b)?b.length=0:r(b,function(a,c){"$$hashKey"!==c&&delete b[c]});g.push(a);k.push(b);return c(a,b,d)}return e(a,d)}function ec(a,b){return a===b||a!==a&&b!==b}function wa(a,b){if(a===b)return!0;if(null===a||null===b)return!1;if(a!==a&&b!==b)return!0;var d=typeof a,c;if(d===typeof b&&"object"===d)if(H(a)){if(!H(b))return!1;if((d=a.length)===b.length){for(c=0;c<d;c++)if(!wa(a[c],
b[c]))return!1;return!0}}else{if(ha(a))return ha(b)?ec(a.getTime(),b.getTime()):!1;if(ab(a))return ab(b)?a.toString()===b.toString():!1;if(bb(a)||bb(b)||$a(a)||$a(b)||H(b)||ha(b)||ab(b))return!1;d=T();for(c in a)if("$"!==c.charAt(0)&&!B(a[c])){if(!wa(a[c],b[c]))return!1;d[c]=!0}for(c in b)if(!(c in d)&&"$"!==c.charAt(0)&&w(b[c])&&!B(b[c]))return!1;return!0}return!1}function db(a,b,d){return a.concat(Ha.call(b,d))}function Va(a,b){var d=2<arguments.length?Ha.call(arguments,2):[];return!B(b)||b instanceof
RegExp?b:d.length?function(){return arguments.length?b.apply(a,db(d,arguments,0)):b.apply(a,d)}:function(){return arguments.length?b.apply(a,arguments):b.call(a)}}function Sc(a,b){var d=b;"string"===typeof a&&"$"===a.charAt(0)&&"$"===a.charAt(1)?d=void 0:$a(b)?d="$WINDOW":b&&A.document===b?d="$DOCUMENT":bb(b)&&(d="$SCOPE");return d}function eb(a,b){if(!z(a))return W(b)||(b=b?2:null),JSON.stringify(a,Sc,b)}function Tc(a){return C(a)?JSON.parse(a):a}function fc(a,b){a=a.replace(De,"");var d=Date.parse("Jan 01, 1970 00:00:00 "+
a)/6E4;return X(d)?b:d}function Uc(a,b){a=new Date(a.getTime());a.setMinutes(a.getMinutes()+b);return a}function gc(a,b,d){d=d?-1:1;var c=a.getTimezoneOffset();b=fc(b,c);return Uc(a,d*(b-c))}function Ba(a){a=x(a).clone().empty();var b=x("<div></div>").append(a).html();try{return a[0].nodeType===Pa?K(b):b.match(/^(<[^>]+>)/)[1].replace(/^<([\w-]+)/,function(a,b){return"<"+K(b)})}catch(d){return K(b)}}function Vc(a){try{return decodeURIComponent(a)}catch(b){}}function hc(a){var b={};r((a||"").split("&"),
function(a){var c,e,f;a&&(e=a=a.replace(/\+/g,"%20"),c=a.indexOf("="),-1!==c&&(e=a.substring(0,c),f=a.substring(c+1)),e=Vc(e),w(e)&&(f=w(f)?Vc(f):!0,va.call(b,e)?H(b[e])?b[e].push(f):b[e]=[b[e],f]:b[e]=f))});return b}function Ee(a){var b=[];r(a,function(a,c){H(a)?r(a,function(a){b.push(ba(c,!0)+(!0===a?"":"="+ba(a,!0)))}):b.push(ba(c,!0)+(!0===a?"":"="+ba(a,!0)))});return b.length?b.join("&"):""}function ic(a){return ba(a,!0).replace(/%26/gi,"&").replace(/%3D/gi,"=").replace(/%2B/gi,"+")}function ba(a,
b){return encodeURIComponent(a).replace(/%40/gi,"@").replace(/%3A/gi,":").replace(/%24/g,"$").replace(/%2C/gi,",").replace(/%3B/gi,";").replace(/%20/g,b?"%20":"+")}function Fe(a,b){var d,c,e=Qa.length;for(c=0;c<e;++c)if(d=Qa[c]+b,C(d=a.getAttribute(d)))return d;return null}function Ge(a,b){var d,c,e={};r(Qa,function(b){b+="app";!d&&a.hasAttribute&&a.hasAttribute(b)&&(d=a,c=a.getAttribute(b))});r(Qa,function(b){b+="app";var e;!d&&(e=a.querySelector("["+b.replace(":","\\:")+"]"))&&(d=e,c=e.getAttribute(b))});
d&&(He?(e.strictDi=null!==Fe(d,"strict-di"),b(d,c?[c]:[],e)):A.console.error("AngularJS: disabling automatic bootstrap. <script> protocol indicates an extension, document.location.href does not match."))}function Wc(a,b,d){D(d)||(d={});d=S({strictDi:!1},d);var c=function(){a=x(a);if(a.injector()){var c=a[0]===A.document?"document":Ba(a);throw pa("btstrpd",c.replace(/</g,"&lt;").replace(/>/g,"&gt;"));}b=b||[];b.unshift(["$provide",function(b){b.value("$rootElement",a)}]);d.debugInfoEnabled&&b.push(["$compileProvider",
function(a){a.debugInfoEnabled(!0)}]);b.unshift("ng");c=fb(b,d.strictDi);c.invoke(["$rootScope","$rootElement","$compile","$injector",function(a,b,c,d){a.$apply(function(){b.data("$injector",d);c(b)(a)})}]);return c},e=/^NG_ENABLE_DEBUG_INFO!/,f=/^NG_DEFER_BOOTSTRAP!/;A&&e.test(A.name)&&(d.debugInfoEnabled=!0,A.name=A.name.replace(e,""));if(A&&!f.test(A.name))return c();A.name=A.name.replace(f,"");da.resumeBootstrap=function(a){r(a,function(a){b.push(a)});return c()};B(da.resumeDeferredBootstrap)&&
da.resumeDeferredBootstrap()}function Ie(){A.name="NG_ENABLE_DEBUG_INFO!"+A.name;A.location.reload()}function Je(a){a=da.element(a).injector();if(!a)throw pa("test");return a.get("$$testability")}function Xc(a,b){b=b||"_";return a.replace(Ke,function(a,c){return(c?b:"")+a.toLowerCase()})}function Le(){var a;if(!Yc){var b=rb();(sb=z(b)?A.jQuery:b?A[b]:void 0)&&sb.fn.on?(x=sb,S(sb.fn,{scope:Wa.scope,isolateScope:Wa.isolateScope,controller:Wa.controller,injector:Wa.injector,inheritedData:Wa.inheritedData})):
x=U;a=x.cleanData;x.cleanData=function(b){for(var c,e=0,f;null!=(f=b[e]);e++)(c=(x._data(f)||{}).events)&&c.$destroy&&x(f).triggerHandler("$destroy");a(b)};da.element=x;Yc=!0}}function Me(){U.htmlPrefilter=function(a){var b=a.replace(Ne,"<$1></$2>");A.console&&A.console.warn&&a!==b&&A.console.warn("JQLite changed the HTML string:\n\n"+a+"\n\nto remove self-closing tags, resulting in this HTML string:\n\n"+b+"\n\nJQLite no longer does this replacement when you stop calling UNSAFE_restoreLegacyJqLiteXHTMLReplacement; please update your code to avoid self-closing tags.");
return b}}function gb(a,b,d){if(!a)throw pa("areq",b||"?",d||"required");return a}function tb(a,b,d){d&&H(a)&&(a=a[a.length-1]);gb(B(a),b,"not a function, got "+(a&&"object"===typeof a?a.constructor.name||"Object":typeof a));return a}function Ja(a,b){if("hasOwnProperty"===a)throw pa("badname",b);}function Oe(a,b,d){if(!b)return a;b=b.split(".");for(var c,e=a,f=b.length,g=0;g<f;g++)c=b[g],a&&(a=(e=a)[c]);return!d&&B(a)?Va(e,a):a}function ub(a){for(var b=a[0],d=a[a.length-1],c,e=1;b!==d&&(b=b.nextSibling);e++)if(c||
a[e]!==b)c||(c=Ha.call(a,0,e)),c.push(b);return c?x(c):a}function T(){return Object.create(null)}function jc(a){if(null==a)return"";switch(typeof a){case "string":break;case "number":a=""+a;break;default:a=!cc(a)||H(a)||ha(a)?eb(a):a.toString()}return a}function Pe(a){function b(a,b,c){return a[b]||(a[b]=c())}var d=F("$injector"),c=F("ng");a=b(a,"angular",Object);a.$$minErr=a.$$minErr||F;return b(a,"module",function(){var a={};return function(f,g,k){var h={};if("hasOwnProperty"===f)throw c("badname",
"module");g&&a.hasOwnProperty(f)&&(a[f]=null);return b(a,f,function(){function a(b,c,d,f){f||(f=e);return function(){f[d||"push"]([b,c,arguments]);return t}}function b(a,c,d){d||(d=e);return function(b,e){e&&B(e)&&(e.$$moduleName=f);d.push([a,c,arguments]);return t}}if(!g)throw d("nomod",f);var e=[],n=[],s=[],G=a("$injector","invoke","push",n),t={_invokeQueue:e,_configBlocks:n,_runBlocks:s,info:function(a){if(w(a)){if(!D(a))throw c("aobj","value");h=a;return this}return h},requires:g,name:f,provider:b("$provide",
"provider"),factory:b("$provide","factory"),service:b("$provide","service"),value:a("$provide","value"),constant:a("$provide","constant","unshift"),decorator:b("$provide","decorator",n),animation:b("$animateProvider","register"),filter:b("$filterProvider","register"),controller:b("$controllerProvider","register"),directive:b("$compileProvider","directive"),component:b("$compileProvider","component"),config:G,run:function(a){s.push(a);return this}};k&&G(k);return t})}})}function ja(a,b){if(H(a)){b=
b||[];for(var d=0,c=a.length;d<c;d++)b[d]=a[d]}else if(D(a))for(d in b=b||{},a)if("$"!==d.charAt(0)||"$"!==d.charAt(1))b[d]=a[d];return b||a}function Qe(a,b){var d=[];Yb(b)&&(a=da.copy(a,null,b));return JSON.stringify(a,function(a,b){b=Sc(a,b);if(D(b)){if(0<=d.indexOf(b))return"...";d.push(b)}return b})}function Re(a){S(a,{errorHandlingConfig:xe,bootstrap:Wc,copy:Ia,extend:S,merge:ze,equals:wa,element:x,forEach:r,injector:fb,noop:E,bind:Va,toJson:eb,fromJson:Tc,identity:Ta,isUndefined:z,isDefined:w,
isString:C,isFunction:B,isObject:D,isNumber:W,isElement:ac,isArray:H,version:Se,isDate:ha,callbacks:{$$counter:0},getTestability:Je,reloadWithDebugInfo:Ie,UNSAFE_restoreLegacyJqLiteXHTMLReplacement:Me,$$minErr:F,$$csp:Ca,$$encodeUriSegment:ic,$$encodeUriQuery:ba,$$lowercase:K,$$stringify:jc,$$uppercase:vb});lc=Pe(A);lc("ng",["ngLocale"],["$provide",function(a){a.provider({$$sanitizeUri:Te});a.provider("$compile",Zc).directive({a:Ue,input:$c,textarea:$c,form:Ve,script:We,select:Xe,option:Ye,ngBind:Ze,
ngBindHtml:$e,ngBindTemplate:af,ngClass:bf,ngClassEven:cf,ngClassOdd:df,ngCloak:ef,ngController:ff,ngForm:gf,ngHide:hf,ngIf:jf,ngInclude:kf,ngInit:lf,ngNonBindable:mf,ngPluralize:nf,ngRef:of,ngRepeat:pf,ngShow:qf,ngStyle:rf,ngSwitch:sf,ngSwitchWhen:tf,ngSwitchDefault:uf,ngOptions:vf,ngTransclude:wf,ngModel:xf,ngList:yf,ngChange:zf,pattern:ad,ngPattern:ad,required:bd,ngRequired:bd,minlength:cd,ngMinlength:cd,maxlength:dd,ngMaxlength:dd,ngValue:Af,ngModelOptions:Bf}).directive({ngInclude:Cf,input:Df}).directive(wb).directive(ed);
a.provider({$anchorScroll:Ef,$animate:Ff,$animateCss:Gf,$$animateJs:Hf,$$animateQueue:If,$$AnimateRunner:Jf,$$animateAsyncRun:Kf,$browser:Lf,$cacheFactory:Mf,$controller:Nf,$document:Of,$$isDocumentHidden:Pf,$exceptionHandler:Qf,$filter:fd,$$forceReflow:Rf,$interpolate:Sf,$interval:Tf,$$intervalFactory:Uf,$http:Vf,$httpParamSerializer:Wf,$httpParamSerializerJQLike:Xf,$httpBackend:Yf,$xhrFactory:Zf,$jsonpCallbacks:$f,$location:ag,$log:bg,$parse:cg,$rootScope:dg,$q:eg,$$q:fg,$sce:gg,$sceDelegate:hg,
$sniffer:ig,$$taskTrackerFactory:jg,$templateCache:kg,$templateRequest:lg,$$testability:mg,$timeout:ng,$window:og,$$rAF:pg,$$jqLite:qg,$$Map:rg,$$cookieReader:sg})}]).info({angularVersion:"1.9.6"})}function xb(a,b){return b.toUpperCase()}function yb(a){return a.replace(tg,xb)}function mc(a){a=a.nodeType;return 1===a||!a||9===a}function gd(a,b){var d,c,e,f=b.createDocumentFragment(),g=[],k;if(nc.test(a)){d=f.appendChild(b.createElement("div"));c=(ug.exec(a)||["",""])[1].toLowerCase();e=U.htmlPrefilter(a);
if(10>ra)for(c=hb[c]||hb._default,d.innerHTML=c[1]+e+c[2],k=c[0];k--;)d=d.firstChild;else{c=sa[c]||[];for(k=c.length;-1<--k;)d.appendChild(A.document.createElement(c[k])),d=d.firstChild;d.innerHTML=e}g=db(g,d.childNodes);d=f.firstChild;d.textContent=""}else g.push(b.createTextNode(a));f.textContent="";f.innerHTML="";r(g,function(a){f.appendChild(a)});return f}function U(a){if(a instanceof U)return a;var b;C(a)&&(a=ca(a),b=!0);if(!(this instanceof U)){if(b&&"<"!==a.charAt(0))throw oc("nosel");return new U(a)}if(b){b=
A.document;var d;a=(d=vg.exec(a))?[b.createElement(d[1])]:(d=gd(a,b))?d.childNodes:[];pc(this,a)}else B(a)?hd(a):pc(this,a)}function qc(a){return a.cloneNode(!0)}function zb(a,b){!b&&mc(a)&&x.cleanData([a]);a.querySelectorAll&&x.cleanData(a.querySelectorAll("*"))}function id(a){for(var b in a)return!1;return!0}function jd(a){var b=a.ng339,d=b&&Ka[b],c=d&&d.events,d=d&&d.data;d&&!id(d)||c&&!id(c)||(delete Ka[b],a.ng339=void 0)}function kd(a,b,d,c){if(w(c))throw oc("offargs");var e=(c=Ab(a))&&c.events,
f=c&&c.handle;if(f){if(b){var g=function(b){var c=e[b];w(d)&&cb(c||[],d);w(d)&&c&&0<c.length||(a.removeEventListener(b,f),delete e[b])};r(b.split(" "),function(a){g(a);Bb[a]&&g(Bb[a])})}else for(b in e)"$destroy"!==b&&a.removeEventListener(b,f),delete e[b];jd(a)}}function rc(a,b){var d=a.ng339;if(d=d&&Ka[d])b?delete d.data[b]:d.data={},jd(a)}function Ab(a,b){var d=a.ng339,d=d&&Ka[d];b&&!d&&(a.ng339=d=++wg,d=Ka[d]={events:{},data:{},handle:void 0});return d}function sc(a,b,d){if(mc(a)){var c,e=w(d),
f=!e&&b&&!D(b),g=!b;a=(a=Ab(a,!f))&&a.data;if(e)a[yb(b)]=d;else{if(g)return a;if(f)return a&&a[yb(b)];for(c in b)a[yb(c)]=b[c]}}}function Cb(a,b){return a.getAttribute?-1<(" "+(a.getAttribute("class")||"")+" ").replace(/[\n\t]/g," ").indexOf(" "+b+" "):!1}function Db(a,b){if(b&&a.setAttribute){var d=(" "+(a.getAttribute("class")||"")+" ").replace(/[\n\t]/g," "),c=d;r(b.split(" "),function(a){a=ca(a);c=c.replace(" "+a+" "," ")});c!==d&&a.setAttribute("class",ca(c))}}function Eb(a,b){if(b&&a.setAttribute){var d=
(" "+(a.getAttribute("class")||"")+" ").replace(/[\n\t]/g," "),c=d;r(b.split(" "),function(a){a=ca(a);-1===c.indexOf(" "+a+" ")&&(c+=a+" ")});c!==d&&a.setAttribute("class",ca(c))}}function pc(a,b){if(b)if(b.nodeType)a[a.length++]=b;else{var d=b.length;if("number"===typeof d&&b.window!==b){if(d)for(var c=0;c<d;c++)a[a.length++]=b[c]}else a[a.length++]=b}}function ld(a,b){return Fb(a,"$"+(b||"ngController")+"Controller")}function Fb(a,b,d){9===a.nodeType&&(a=a.documentElement);for(b=H(b)?b:[b];a;){for(var c=
0,e=b.length;c<e;c++)if(w(d=x.data(a,b[c])))return d;a=a.parentNode||11===a.nodeType&&a.host}}function md(a){for(zb(a,!0);a.firstChild;)a.removeChild(a.firstChild)}function Gb(a,b){b||zb(a);var d=a.parentNode;d&&d.removeChild(a)}function xg(a,b){b=b||A;if("complete"===b.document.readyState)b.setTimeout(a);else x(b).on("load",a)}function hd(a){function b(){A.document.removeEventListener("DOMContentLoaded",b);A.removeEventListener("load",b);a()}"complete"===A.document.readyState?A.setTimeout(a):(A.document.addEventListener("DOMContentLoaded",
b),A.addEventListener("load",b))}function nd(a,b){var d=Hb[b.toLowerCase()];return d&&od[oa(a)]&&d}function yg(a,b){var d=function(c,d){c.isDefaultPrevented=function(){return c.defaultPrevented};var f=b[d||c.type],g=f?f.length:0;if(g){if(z(c.immediatePropagationStopped)){var k=c.stopImmediatePropagation;c.stopImmediatePropagation=function(){c.immediatePropagationStopped=!0;c.stopPropagation&&c.stopPropagation();k&&k.call(c)}}c.isImmediatePropagationStopped=function(){return!0===c.immediatePropagationStopped};
var h=f.specialHandlerWrapper||zg;1<g&&(f=ja(f));for(var l=0;l<g;l++)c.isImmediatePropagationStopped()||h(a,c,f[l])}};d.elem=a;return d}function zg(a,b,d){d.call(a,b)}function Ag(a,b,d){var c=b.relatedTarget;c&&(c===a||Bg.call(a,c))||d.call(a,b)}function qg(){this.$get=function(){return S(U,{hasClass:function(a,b){a.attr&&(a=a[0]);return Cb(a,b)},addClass:function(a,b){a.attr&&(a=a[0]);return Eb(a,b)},removeClass:function(a,b){a.attr&&(a=a[0]);return Db(a,b)}})}}function La(a,b){var d=a&&a.$$hashKey;
if(d)return"function"===typeof d&&(d=a.$$hashKey()),d;d=typeof a;return d="function"===d||"object"===d&&null!==a?a.$$hashKey=d+":"+(b||ye)():d+":"+a}function pd(){this._keys=[];this._values=[];this._lastKey=NaN;this._lastIndex=-1}function qd(a){a=Function.prototype.toString.call(a).replace(Cg,"");return a.match(Dg)||a.match(Eg)}function Fg(a){return(a=qd(a))?"function("+(a[1]||"").replace(/[\s\r\n]+/," ")+")":"fn"}function fb(a,b){function d(a){return function(b,c){if(D(b))r(b,Zb(a));else return a(b,
c)}}function c(a,b){Ja(a,"service");if(B(b)||H(b))b=n.instantiate(b);if(!b.$get)throw Da("pget",a);return p[a+"Provider"]=b}function e(a,b){return function(){var c=t.invoke(b,this);if(z(c))throw Da("undef",a);return c}}function f(a,b,d){return c(a,{$get:!1!==d?e(a,b):b})}function g(a){gb(z(a)||H(a),"modulesToLoad","not an array");var b=[],c;r(a,function(a){function d(a){var b,c;b=0;for(c=a.length;b<c;b++){var e=a[b],f=n.get(e[0]);f[e[1]].apply(f,e[2])}}if(!m.get(a)){m.set(a,!0);try{C(a)?(c=lc(a),
t.modules[a]=c,b=b.concat(g(c.requires)).concat(c._runBlocks),d(c._invokeQueue),d(c._configBlocks)):B(a)?b.push(n.invoke(a)):H(a)?b.push(n.invoke(a)):tb(a,"module")}catch(e){throw H(a)&&(a=a[a.length-1]),e.message&&e.stack&&-1===e.stack.indexOf(e.message)&&(e=e.message+"\n"+e.stack),Da("modulerr",a,e.stack||e.message||e);}}});return b}function k(a,c){function d(b,e){if(a.hasOwnProperty(b)){if(a[b]===h)throw Da("cdep",b+" <- "+l.join(" <- "));return a[b]}try{return l.unshift(b),a[b]=h,a[b]=c(b,e),
a[b]}catch(f){throw a[b]===h&&delete a[b],f;}finally{l.shift()}}function e(a,c,f){var g=[];a=fb.$$annotate(a,b,f);for(var h=0,k=a.length;h<k;h++){var l=a[h];if("string"!==typeof l)throw Da("itkn",l);g.push(c&&c.hasOwnProperty(l)?c[l]:d(l,f))}return g}return{invoke:function(a,b,c,d){"string"===typeof c&&(d=c,c=null);c=e(a,c,d);H(a)&&(a=a[a.length-1]);d=a;if(ra||"function"!==typeof d)d=!1;else{var f=d.$$ngIsClass;Ga(f)||(f=d.$$ngIsClass=/^class\b/.test(Function.prototype.toString.call(d)));d=f}return d?
(c.unshift(null),new (Function.prototype.bind.apply(a,c))):a.apply(b,c)},instantiate:function(a,b,c){var d=H(a)?a[a.length-1]:a;a=e(a,b,c);a.unshift(null);return new (Function.prototype.bind.apply(d,a))},get:d,annotate:fb.$$annotate,has:function(b){return p.hasOwnProperty(b+"Provider")||a.hasOwnProperty(b)}}}b=!0===b;var h={},l=[],m=new Ib,p={$provide:{provider:d(c),factory:d(f),service:d(function(a,b){return f(a,["$injector",function(a){return a.instantiate(b)}])}),value:d(function(a,b){return f(a,
ia(b),!1)}),constant:d(function(a,b){Ja(a,"constant");p[a]=b;s[a]=b}),decorator:function(a,b){var c=n.get(a+"Provider"),d=c.$get;c.$get=function(){var a=t.invoke(d,c);return t.invoke(b,null,{$delegate:a})}}}},n=p.$injector=k(p,function(a,b){da.isString(b)&&l.push(b);throw Da("unpr",l.join(" <- "));}),s={},G=k(s,function(a,b){var c=n.get(a+"Provider",b);return t.invoke(c.$get,c,void 0,a)}),t=G;p.$injectorProvider={$get:ia(G)};t.modules=n.modules=T();var N=g(a),t=G.get("$injector");t.strictDi=b;r(N,
function(a){a&&t.invoke(a)});t.loadNewModules=function(a){r(g(a),function(a){a&&t.invoke(a)})};return t}function Ef(){var a=!0;this.disableAutoScrolling=function(){a=!1};this.$get=["$window","$location","$rootScope",function(b,d,c){function e(a){var b=null;Array.prototype.some.call(a,function(a){if("a"===oa(a))return b=a,!0});return b}function f(a){if(a){a.scrollIntoView();var c;c=g.yOffset;B(c)?c=c():ac(c)?(c=c[0],c="fixed"!==b.getComputedStyle(c).position?0:c.getBoundingClientRect().bottom):W(c)||
(c=0);c&&(a=a.getBoundingClientRect().top,b.scrollBy(0,a-c))}else b.scrollTo(0,0)}function g(a){a=C(a)?a:W(a)?a.toString():d.hash();var b;a?(b=k.getElementById(a))?f(b):(b=e(k.getElementsByName(a)))?f(b):"top"===a&&f(null):f(null)}var k=b.document;a&&c.$watch(function(){return d.hash()},function(a,b){a===b&&""===a||xg(function(){c.$evalAsync(g)})});return g}]}function ib(a,b){if(!a&&!b)return"";if(!a)return b;if(!b)return a;H(a)&&(a=a.join(" "));H(b)&&(b=b.join(" "));return a+" "+b}function Gg(a){C(a)&&
(a=a.split(" "));var b=T();r(a,function(a){a.length&&(b[a]=!0)});return b}function ta(a){return D(a)?a:{}}function Hg(a,b,d,c,e){function f(){qa=null;k()}function g(){t=y();t=z(t)?null:t;wa(t,P)&&(t=P);N=P=t}function k(){var a=N;g();if(v!==h.url()||a!==t)v=h.url(),N=t,r(J,function(a){a(h.url(),t)})}var h=this,l=a.location,m=a.history,p=a.setTimeout,n=a.clearTimeout,s={},G=e(d);h.isMock=!1;h.$$completeOutstandingRequest=G.completeTask;h.$$incOutstandingRequestCount=G.incTaskCount;h.notifyWhenNoOutstandingRequests=
G.notifyWhenNoPendingTasks;var t,N,v=l.href,kc=b.find("base"),qa=null,y=c.history?function(){try{return m.state}catch(a){}}:E;g();h.url=function(b,d,e){z(e)&&(e=null);l!==a.location&&(l=a.location);m!==a.history&&(m=a.history);if(b){var f=N===e;b=ga(b).href;if(v===b&&(!c.history||f))return h;var k=v&&xa(v)===xa(b);v=b;N=e;!c.history||k&&f?(k||(qa=b),d?l.replace(b):k?(d=l,e=b,f=e.indexOf("#"),e=-1===f?"":e.substr(f),d.hash=e):l.href=b,l.href!==b&&(qa=b)):(m[d?"replaceState":"pushState"](e,"",b),g());
qa&&(qa=b);return h}return(qa||l.href).replace(/#$/,"")};h.state=function(){return t};var J=[],I=!1,P=null;h.onUrlChange=function(b){if(!I){if(c.history)x(a).on("popstate",f);x(a).on("hashchange",f);I=!0}J.push(b);return b};h.$$applicationDestroyed=function(){x(a).off("hashchange popstate",f)};h.$$checkUrlChange=k;h.baseHref=function(){var a=kc.attr("href");return a?a.replace(/^(https?:)?\/\/[^/]*/,""):""};h.defer=function(a,b,c){var d;b=b||0;c=c||G.DEFAULT_TASK_TYPE;G.incTaskCount(c);d=p(function(){delete s[d];
G.completeTask(a,c)},b);s[d]=c;return d};h.defer.cancel=function(a){if(s.hasOwnProperty(a)){var b=s[a];delete s[a];n(a);G.completeTask(E,b);return!0}return!1}}function Lf(){this.$get=["$window","$log","$sniffer","$document","$$taskTrackerFactory",function(a,b,d,c,e){return new Hg(a,c,b,d,e)}]}function Mf(){this.$get=function(){function a(a,c){function e(a){a!==p&&(n?n===a&&(n=a.n):n=a,f(a.n,a.p),f(a,p),p=a,p.n=null)}function f(a,b){a!==b&&(a&&(a.p=b),b&&(b.n=a))}if(a in b)throw F("$cacheFactory")("iid",
a);var g=0,k=S({},c,{id:a}),h=T(),l=c&&c.capacity||Number.MAX_VALUE,m=T(),p=null,n=null;return b[a]={put:function(a,b){if(!z(b)){if(l<Number.MAX_VALUE){var c=m[a]||(m[a]={key:a});e(c)}a in h||g++;h[a]=b;g>l&&this.remove(n.key);return b}},get:function(a){if(l<Number.MAX_VALUE){var b=m[a];if(!b)return;e(b)}return h[a]},remove:function(a){if(l<Number.MAX_VALUE){var b=m[a];if(!b)return;b===p&&(p=b.p);b===n&&(n=b.n);f(b.n,b.p);delete m[a]}a in h&&(delete h[a],g--)},removeAll:function(){h=T();g=0;m=T();
p=n=null},destroy:function(){m=k=h=null;delete b[a]},info:function(){return S({},k,{size:g})}}}var b={};a.info=function(){var a={};r(b,function(b,e){a[e]=b.info()});return a};a.get=function(a){return b[a]};return a}}function kg(){this.$get=["$cacheFactory",function(a){return a("templates")}]}function Zc(a,b){function d(a,b,c){var d=/^([@&]|[=<](\*?))(\??)\s*([\w$]*)$/,e=T();r(a,function(a,f){a=a.trim();if(a in p)e[f]=p[a];else{var g=a.match(d);if(!g)throw Z("iscp",b,f,a,c?"controller bindings definition":
"isolate scope definition");e[f]={mode:g[1][0],collection:"*"===g[2],optional:"?"===g[3],attrName:g[4]||f};g[4]&&(p[a]=e[f])}});return e}function c(a){var b=a.charAt(0);if(!b||b!==K(b))throw Z("baddir",a);if(a!==a.trim())throw Z("baddir",a);}function e(a){var b=a.require||a.controller&&a.name;!H(b)&&D(b)&&r(b,function(a,c){var d=a.match(l);a.substring(d[0].length)||(b[c]=d[0]+c)});return b}var f={},g=/^\s*directive:\s*([\w-]+)\s+(.*)$/,k=/(([\w-]+)(?::([^;]+))?;?)/,h=Ce("ngSrc,ngSrcset,src,srcset"),
l=/^(?:(\^\^?)?(\?)?(\^\^?)?)?/,m=/^(on[a-z]+|formaction)$/,p=T();this.directive=function qa(b,d){gb(b,"name");Ja(b,"directive");C(b)?(c(b),gb(d,"directiveFactory"),f.hasOwnProperty(b)||(f[b]=[],a.factory(b+"Directive",["$injector","$exceptionHandler",function(a,c){var d=[];r(f[b],function(f,g){try{var h=a.invoke(f);B(h)?h={compile:ia(h)}:!h.compile&&h.link&&(h.compile=ia(h.link));h.priority=h.priority||0;h.index=g;h.name=h.name||b;h.require=e(h);var k=h,l=h.restrict;if(l&&(!C(l)||!/[EACM]/.test(l)))throw Z("badrestrict",
l,b);k.restrict=l||"EA";h.$$moduleName=f.$$moduleName;d.push(h)}catch(m){c(m)}});return d}])),f[b].push(d)):r(b,Zb(qa));return this};this.component=function y(a,b){function c(a){function e(b){return B(b)||H(b)?function(c,d){return a.invoke(b,this,{$element:c,$attrs:d})}:b}var f=b.template||b.templateUrl?b.template:"",g={controller:d,controllerAs:Ig(b.controller)||b.controllerAs||"$ctrl",template:e(f),templateUrl:e(b.templateUrl),transclude:b.transclude,scope:{},bindToController:b.bindings||{},restrict:"E",
require:b.require};r(b,function(a,b){"$"===b.charAt(0)&&(g[b]=a)});return g}if(!C(a))return r(a,Zb(Va(this,y))),this;var d=b.controller||function(){};r(b,function(a,b){"$"===b.charAt(0)&&(c[b]=a,B(d)&&(d[b]=a))});c.$inject=["$injector"];return this.directive(a,c)};this.aHrefSanitizationTrustedUrlList=function(a){return w(a)?(b.aHrefSanitizationTrustedUrlList(a),this):b.aHrefSanitizationTrustedUrlList()};Object.defineProperty(this,"aHrefSanitizationWhitelist",{get:function(){return this.aHrefSanitizationTrustedUrlList},
set:function(a){this.aHrefSanitizationTrustedUrlList=a}});this.imgSrcSanitizationTrustedUrlList=function(a){return w(a)?(b.imgSrcSanitizationTrustedUrlList(a),this):b.imgSrcSanitizationTrustedUrlList()};Object.defineProperty(this,"imgSrcSanitizationWhitelist",{get:function(){return this.imgSrcSanitizationTrustedUrlList},set:function(a){this.imgSrcSanitizationTrustedUrlList=a}});var n=!0;this.debugInfoEnabled=function(a){return w(a)?(n=a,this):n};var s=!1;this.strictComponentBindingsEnabled=function(a){return w(a)?
(s=a,this):s};var G=10;this.onChangesTtl=function(a){return arguments.length?(G=a,this):G};var t=!0;this.commentDirectivesEnabled=function(a){return arguments.length?(t=a,this):t};var N=!0;this.cssClassDirectivesEnabled=function(a){return arguments.length?(N=a,this):N};var v=T();this.addPropertySecurityContext=function(a,b,c){var d=a.toLowerCase()+"|"+b.toLowerCase();if(d in v&&v[d]!==c)throw Z("ctxoverride",a,b,v[d],c);v[d]=c;return this};(function(){function a(b,c){r(c,function(a){v[a.toLowerCase()]=
b})}a(V.HTML,["iframe|srcdoc","*|innerHTML","*|outerHTML"]);a(V.CSS,["*|style"]);a(V.URL,"area|href area|ping a|href a|ping blockquote|cite body|background del|cite input|src ins|cite q|cite".split(" "));a(V.MEDIA_URL,"audio|src img|src img|srcset source|src source|srcset track|src video|src video|poster".split(" "));a(V.RESOURCE_URL,"*|formAction applet|code applet|codebase base|href embed|src frame|src form|action head|profile html|manifest iframe|src link|href media|src object|codebase object|data script|src".split(" "))})();
this.$get=["$injector","$interpolate","$exceptionHandler","$templateRequest","$parse","$controller","$rootScope","$sce","$animate",function(a,b,c,e,p,M,L,u,R){function q(){try{if(!--Ja)throw Ua=void 0,Z("infchng",G);L.$apply(function(){for(var a=0,b=Ua.length;a<b;++a)try{Ua[a]()}catch(d){c(d)}Ua=void 0})}finally{Ja++}}function ma(a,b){if(!a)return a;if(!C(a))throw Z("srcset",b,a.toString());for(var c="",d=/\s*(\S*[^\s,])(?:\s+([^\s,]+))?\s*(,|$)/g,e;null!==(e=d.exec(a));){var f=e[2],g=e[3],c=c+u.getTrustedMediaUrl(e[1]);
f&&(c+=" "+f);f||","!==g||(c+=" ");c+=g}return c}function w(a,b){if(b){var c=Object.keys(b),d,e,f;d=0;for(e=c.length;d<e;d++)f=c[d],this[f]=b[f]}else this.$attr={};this.$$element=a}function O(a,b,c){Fa.innerHTML="<span "+b+">";b=Fa.firstChild.attributes;var d=b[0];b.removeNamedItem(d.name);d.value=c;a.attributes.setNamedItem(d)}function ua(a,b){try{a.addClass(b)}catch(c){}}function aa(a,b,c,d,e){a instanceof x||(a=x(a));var f=Xa(a,b,a,c,d,e);aa.$$addScopeClass(a);var g=null;return function(b,c,d){if(!a)throw Z("multilink");
gb(b,"scope");e&&e.needsNewScope&&(b=b.$parent.$new());d=d||{};var h=d.parentBoundTranscludeFn,k=d.transcludeControllers;d=d.futureParentElement;h&&h.$$boundTransclude&&(h=h.$$boundTransclude);g||(g=(d=d&&d[0])?"foreignobject"!==oa(d)&&la.call(d).match(/SVG/)?"svg":"html":"html");d="html"!==g?x(ja(g,x("<div></div>").append(a).html())):c?Wa.clone.call(a):a;if(k)for(var l in k)d.data("$"+l+"Controller",k[l].instance);aa.$$addScopeInfo(d,b);c&&c(d,b);f&&f(b,d,d,h);c||(a=f=null);return d}}function Xa(a,
b,c,d,e,f){function g(a,c,d,e){var f,k,l,m,p,I,t;if(n)for(t=Array(c.length),m=0;m<h.length;m+=3)f=h[m],t[f]=c[f];else t=c;m=0;for(p=h.length;m<p;)k=t[h[m++]],c=h[m++],f=h[m++],c?(c.scope?(l=a.$new(),aa.$$addScopeInfo(x(k),l)):l=a,I=c.transcludeOnThisElement?ka(a,c.transclude,e):!c.templateOnThisElement&&e?e:!e&&b?ka(a,b):null,c(f,l,k,d,I)):f&&f(a,k.childNodes,void 0,e)}for(var h=[],k=H(a)||a instanceof x,l,m,p,I,n,t=0;t<a.length;t++){l=new w;11===ra&&jb(a,t,k);m=tc(a[t],[],l,0===t?d:void 0,e);(f=
m.length?$(m,a[t],l,b,c,null,[],[],f):null)&&f.scope&&aa.$$addScopeClass(l.$$element);l=f&&f.terminal||!(p=a[t].childNodes)||!p.length?null:Xa(p,f?(f.transcludeOnThisElement||!f.templateOnThisElement)&&f.transclude:b);if(f||l)h.push(t,f,l),I=!0,n=n||f;f=null}return I?g:null}function jb(a,b,c){var d=a[b],e=d.parentNode,f;if(d.nodeType===Pa)for(;;){f=e?d.nextSibling:a[b+1];if(!f||f.nodeType!==Pa)break;d.nodeValue+=f.nodeValue;f.parentNode&&f.parentNode.removeChild(f);c&&f===a[b+1]&&sd.call(a,b+1,1)}}
function ka(a,b,c){function d(e,f,g,h,k){e||(e=a.$new(!1,k),e.$$transcluded=!0);return b(e,f,{parentBoundTranscludeFn:c,transcludeControllers:g,futureParentElement:h})}var e=d.$$slots=T(),f;for(f in b.$$slots)e[f]=b.$$slots[f]?ka(a,b.$$slots[f],c):null;return d}function tc(a,b,d,e,f){var g=d.$attr,h;switch(a.nodeType){case 1:h=oa(a);X(b,ya(h),"E",e,f);for(var l,m,n,t,J,s=a.attributes,v=0,G=s&&s.length;v<G;v++){var P=!1,N=!1,r=!1,y=!1,u=!1,M;l=s[v];m=l.name;t=l.value;n=ya(m.toLowerCase());(J=n.match(Ra))?
(r="Attr"===J[1],y="Prop"===J[1],u="On"===J[1],m=m.replace(td,"").toLowerCase().substr(4+J[1].length).replace(/_(.)/g,function(a,b){return b.toUpperCase()})):(M=n.match(Sa))&&da(M[1])&&(P=m,N=m.substr(0,m.length-5)+"end",m=m.substr(0,m.length-6));if(y||u)d[n]=t,g[n]=l.name,y?Ea(a,b,n,m):b.push(ud(p,L,c,n,m,!1));else{n=ya(m.toLowerCase());g[n]=m;if(r||!d.hasOwnProperty(n))d[n]=t,nd(a,n)&&(d[n]=!0);Ia(a,b,t,n,r);X(b,n,"A",e,f,P,N)}}"input"===h&&"hidden"===a.getAttribute("type")&&a.setAttribute("autocomplete",
"off");if(!Qa)break;g=a.className;D(g)&&(g=g.animVal);if(C(g)&&""!==g)for(;a=k.exec(g);)n=ya(a[2]),X(b,n,"C",e,f)&&(d[n]=ca(a[3])),g=g.substr(a.index+a[0].length);break;case Pa:ra&&a.parentNode&&"textarea"===oa(a.parentNode)||na(b,a.nodeValue);break;case 8:if(!Oa)break;F(a,b,d,e,f)}b.sort(ia);return b}function F(a,b,c,d,e){try{var f=g.exec(a.nodeValue);if(f){var h=ya(f[1]);X(b,h,"M",d,e)&&(c[h]=ca(f[2]))}}catch(k){}}function U(a,b,c){var d=[],e=0;if(b&&a.hasAttribute&&a.hasAttribute(b)){do{if(!a)throw Z("uterdir",
b,c);1===a.nodeType&&(a.hasAttribute(b)&&e++,a.hasAttribute(c)&&e--);d.push(a);a=a.nextSibling}while(0<e)}else d.push(a);return x(d)}function V(a,b,c){return function(d,e,f,g,h){e=U(e[0],b,c);return a(d,e,f,g,h)}}function Y(a,b,c,d,e,f){var g;return a?aa(b,c,d,e,f):function(){g||(g=aa(b,c,d,e,f),b=c=f=null);return g.apply(this,arguments)}}function $(a,b,d,e,f,g,h,k,l){function m(a,b,c,d){if(a){c&&(a=V(a,c,d));a.require=u.require;a.directiveName=Q;if(s===u||u.$$isolateScope)a=Ca(a,{isolateScope:!0});
h.push(a)}if(b){c&&(b=V(b,c,d));b.require=u.require;b.directiveName=Q;if(s===u||u.$$isolateScope)b=Ca(b,{isolateScope:!0});k.push(b)}}function p(a,e,f,g,l){function m(a,b,c,d){var e;bb(a)||(d=c,c=b,b=a,a=void 0);N&&(e=P);c||(c=N?Q.parent():Q);if(d){var f=l.$$slots[d];if(f)return f(a,b,e,c,R);if(z(f))throw Z("noslot",d,Ba(Q));}else return l(a,b,e,c,R)}var n,u,L,y,G,P,M,Q;b===f?(g=d,Q=d.$$element):(Q=x(f),g=new w(Q,d));G=e;s?y=e.$new(!0):t&&(G=e.$parent);l&&(M=m,M.$$boundTransclude=l,M.isSlotFilled=
function(a){return!!l.$$slots[a]});J&&(P=ea(Q,g,M,J,y,e,s));s&&(aa.$$addScopeInfo(Q,y,!0,!(v&&(v===s||v===s.$$originalDirective))),aa.$$addScopeClass(Q,!0),y.$$isolateBindings=s.$$isolateBindings,u=xa(e,g,y,y.$$isolateBindings,s),u.removeWatches&&y.$on("$destroy",u.removeWatches));for(n in P){u=J[n];L=P[n];var rd=u.$$bindings.bindToController;B(aa.$$customAssignBindings)&&aa.$$customAssignBindings(rd,L,u,G,Q,g,xa)||(L.instance=L(),Q.data("$"+u.name+"Controller",L.instance),L.bindingInfo=xa(G,g,L.instance,
rd,u))}r(J,function(a,b){var c=a.require;a.bindToController&&!H(c)&&D(c)&&S(P[b].instance,W(b,c,Q,P))});r(P,function(a){var b=a.instance;if(B(b.$onChanges))try{b.$onChanges(a.bindingInfo.initialChanges)}catch(d){c(d)}if(B(b.$onInit))try{b.$onInit()}catch(e){c(e)}B(b.$doCheck)&&(G.$watch(function(){b.$doCheck()}),b.$doCheck());B(b.$onDestroy)&&G.$on("$destroy",function(){b.$onDestroy()})});n=0;for(u=h.length;n<u;n++)L=h[n],Da(L,L.isolateScope?y:e,Q,g,L.require&&W(L.directiveName,L.require,Q,P),M);
var R=e;s&&(s.template||null===s.templateUrl)&&(R=y);a&&a(R,f.childNodes,void 0,l);for(n=k.length-1;0<=n;n--)L=k[n],Da(L,L.isolateScope?y:e,Q,g,L.require&&W(L.directiveName,L.require,Q,P),M);r(P,function(a){a=a.instance;B(a.$postLink)&&a.$postLink()})}l=l||{};for(var n=-Number.MAX_VALUE,t=l.newScopeDirective,J=l.controllerDirectives,s=l.newIsolateScopeDirective,v=l.templateDirective,L=l.nonTlbTranscludeDirective,G=!1,P=!1,N=l.hasElementTranscludeDirective,y=d.$$element=x(b),u,Q,M,R=e,q,ma=!1,Jb=!1,
O,ua=0,C=a.length;ua<C;ua++){u=a[ua];var E=u.$$start,jb=u.$$end;E&&(y=U(b,E,jb));M=void 0;if(n>u.priority)break;if(O=u.scope)u.templateUrl||(D(O)?(ba("new/isolated scope",s||t,u,y),s=u):ba("new/isolated scope",s,u,y)),t=t||u;Q=u.name;if(!ma&&(u.replace&&(u.templateUrl||u.template)||u.transclude&&!u.$$tlb)){for(O=ua+1;ma=a[O++];)if(ma.transclude&&!ma.$$tlb||ma.replace&&(ma.templateUrl||ma.template)){Jb=!0;break}ma=!0}!u.templateUrl&&u.controller&&(J=J||T(),ba("'"+Q+"' controller",J[Q],u,y),J[Q]=u);
if(O=u.transclude)if(G=!0,u.$$tlb||(ba("transclusion",L,u,y),L=u),"element"===O)N=!0,n=u.priority,M=y,y=d.$$element=x(aa.$$createComment(Q,d[Q])),b=y[0],pa(f,Ha.call(M,0),b),R=Y(Jb,M,e,n,g&&g.name,{nonTlbTranscludeDirective:L});else{var ka=T();if(D(O)){M=A.document.createDocumentFragment();var Xa=T(),F=T();r(O,function(a,b){var c="?"===a.charAt(0);a=c?a.substring(1):a;Xa[a]=b;ka[b]=null;F[b]=c});r(y.contents(),function(a){var b=Xa[ya(oa(a))];b?(F[b]=!0,ka[b]=ka[b]||A.document.createDocumentFragment(),
ka[b].appendChild(a)):M.appendChild(a)});r(F,function(a,b){if(!a)throw Z("reqslot",b);});for(var K in ka)ka[K]&&(R=x(ka[K].childNodes),ka[K]=Y(Jb,R,e));M=x(M.childNodes)}else M=x(qc(b)).contents();y.empty();R=Y(Jb,M,e,void 0,void 0,{needsNewScope:u.$$isolateScope||u.$$newScope});R.$$slots=ka}if(u.template)if(P=!0,ba("template",v,u,y),v=u,O=B(u.template)?u.template(y,d):u.template,O=Na(O),u.replace){g=u;M=nc.test(O)?vd(ja(u.templateNamespace,ca(O))):[];b=M[0];if(1!==M.length||1!==b.nodeType)throw Z("tplrt",
Q,"");pa(f,y,b);C={$attr:{}};O=tc(b,[],C);var Jg=a.splice(ua+1,a.length-(ua+1));(s||t)&&fa(O,s,t);a=a.concat(O).concat(Jg);ga(d,C);C=a.length}else y.html(O);if(u.templateUrl)P=!0,ba("template",v,u,y),v=u,u.replace&&(g=u),p=ha(a.splice(ua,a.length-ua),y,d,f,G&&R,h,k,{controllerDirectives:J,newScopeDirective:t!==u&&t,newIsolateScopeDirective:s,templateDirective:v,nonTlbTranscludeDirective:L}),C=a.length;else if(u.compile)try{q=u.compile(y,d,R);var X=u.$$originalDirective||u;B(q)?m(null,Va(X,q),E,jb):
q&&m(Va(X,q.pre),Va(X,q.post),E,jb)}catch(da){c(da,Ba(y))}u.terminal&&(p.terminal=!0,n=Math.max(n,u.priority))}p.scope=t&&!0===t.scope;p.transcludeOnThisElement=G;p.templateOnThisElement=P;p.transclude=R;l.hasElementTranscludeDirective=N;return p}function W(a,b,c,d){var e;if(C(b)){var f=b.match(l);b=b.substring(f[0].length);var g=f[1]||f[3],f="?"===f[2];"^^"===g?c=c.parent():e=(e=d&&d[b])&&e.instance;if(!e){var h="$"+b+"Controller";e="^^"===g&&c[0]&&9===c[0].nodeType?null:g?c.inheritedData(h):c.data(h)}if(!e&&
!f)throw Z("ctreq",b,a);}else if(H(b))for(e=[],g=0,f=b.length;g<f;g++)e[g]=W(a,b[g],c,d);else D(b)&&(e={},r(b,function(b,f){e[f]=W(a,b,c,d)}));return e||null}function ea(a,b,c,d,e,f,g){var h=T(),k;for(k in d){var l=d[k],m={$scope:l===g||l.$$isolateScope?e:f,$element:a,$attrs:b,$transclude:c},p=l.controller;"@"===p&&(p=b[l.name]);m=M(p,m,!0,l.controllerAs);h[l.name]=m;a.data("$"+l.name+"Controller",m.instance)}return h}function fa(a,b,c){for(var d=0,e=a.length;d<e;d++)a[d]=bc(a[d],{$$isolateScope:b,
$$newScope:c})}function X(b,c,e,g,h,k,l){if(c===h)return null;var m=null;if(f.hasOwnProperty(c)){h=a.get(c+"Directive");for(var p=0,n=h.length;p<n;p++)if(c=h[p],(z(g)||g>c.priority)&&-1!==c.restrict.indexOf(e)){k&&(c=bc(c,{$$start:k,$$end:l}));if(!c.$$bindings){var I=m=c,t=c.name,u={isolateScope:null,bindToController:null};D(I.scope)&&(!0===I.bindToController?(u.bindToController=d(I.scope,t,!0),u.isolateScope={}):u.isolateScope=d(I.scope,t,!1));D(I.bindToController)&&(u.bindToController=d(I.bindToController,
t,!0));if(u.bindToController&&!I.controller)throw Z("noctrl",t);m=m.$$bindings=u;D(m.isolateScope)&&(c.$$isolateBindings=m.isolateScope)}b.push(c);m=c}}return m}function da(b){if(f.hasOwnProperty(b))for(var c=a.get(b+"Directive"),d=0,e=c.length;d<e;d++)if(b=c[d],b.multiElement)return!0;return!1}function ga(a,b){var c=b.$attr,d=a.$attr;r(a,function(d,e){"$"!==e.charAt(0)&&(b[e]&&b[e]!==d&&(d=d.length?d+(("style"===e?";":" ")+b[e]):b[e]),a.$set(e,d,!0,c[e]))});r(b,function(b,e){a.hasOwnProperty(e)||
"$"===e.charAt(0)||(a[e]=b,"class"!==e&&"style"!==e&&(d[e]=c[e]))})}function ha(a,b,d,f,g,h,k,l){var m=[],p,n,t=b[0],u=a.shift(),J=bc(u,{templateUrl:null,transclude:null,replace:null,$$originalDirective:u}),s=B(u.templateUrl)?u.templateUrl(b,d):u.templateUrl,L=u.templateNamespace;b.empty();e(s).then(function(c){var e,I;c=Na(c);if(u.replace){c=nc.test(c)?vd(ja(L,ca(c))):[];e=c[0];if(1!==c.length||1!==e.nodeType)throw Z("tplrt",u.name,s);c={$attr:{}};pa(f,b,e);var v=tc(e,[],c);D(u.scope)&&fa(v,!0);
a=v.concat(a);ga(d,c)}else e=t,b.html(c);a.unshift(J);p=$(a,e,d,g,b,u,h,k,l);r(f,function(a,c){a===e&&(f[c]=b[0])});for(n=Xa(b[0].childNodes,g);m.length;){c=m.shift();I=m.shift();var y=m.shift(),P=m.shift(),v=b[0];if(!c.$$destroyed){if(I!==t){var G=I.className;l.hasElementTranscludeDirective&&u.replace||(v=qc(e));pa(y,x(I),v);ua(x(v),G)}I=p.transcludeOnThisElement?ka(c,p.transclude,P):P;p(n,c,v,f,I)}}m=null}).catch(function(a){dc(a)&&c(a)});return function(a,b,c,d,e){a=e;b.$$destroyed||(m?m.push(b,
c,d,a):(p.transcludeOnThisElement&&(a=ka(b,p.transclude,e)),p(n,b,c,d,a)))}}function ia(a,b){var c=b.priority-a.priority;return 0!==c?c:a.name!==b.name?a.name<b.name?-1:1:a.index-b.index}function ba(a,b,c,d){function e(a){return a?" (module: "+a+")":""}if(b)throw Z("multidir",b.name,e(b.$$moduleName),c.name,e(c.$$moduleName),a,Ba(d));}function na(a,c){var d=b(c,!0);d&&a.push({priority:0,compile:function(a){a=a.parent();var b=!!a.length;b&&aa.$$addBindingClass(a);return function(a,c){var e=c.parent();
b||aa.$$addBindingClass(e);aa.$$addBindingInfo(e,d.expressions);a.$watch(d,function(a){c[0].nodeValue=a})}}})}function ja(a,b){a=K(a||"html");switch(a){case "svg":case "math":var c=A.document.createElement("div");c.innerHTML="<"+a+">"+b+"</"+a+">";return c.childNodes[0].childNodes;default:return b}}function sa(a,b){if("srcdoc"===b)return u.HTML;if("src"===b||"ngSrc"===b)return-1===["img","video","audio","source","track"].indexOf(a)?u.RESOURCE_URL:u.MEDIA_URL;if("xlinkHref"===b)return"image"===a?u.MEDIA_URL:
"a"===a?u.URL:u.RESOURCE_URL;if("form"===a&&"action"===b||"base"===a&&"href"===b||"link"===a&&"href"===b)return u.RESOURCE_URL;if("a"===a&&("href"===b||"ngHref"===b))return u.URL}function za(a,b){var c=b.toLowerCase();return v[a+"|"+c]||v["*|"+c]}function Aa(a){return ma(u.valueOf(a),"ng-prop-srcset")}function Ea(a,b,c,d){if(m.test(d))throw Z("nodomevents");a=oa(a);var e=za(a,d),f=Ta;"srcset"!==d||"img"!==a&&"source"!==a?e&&(f=u.getTrusted.bind(u,e)):f=Aa;b.push({priority:100,compile:function(a,b){var e=
p(b[c]),g=p(b[c],function(a){return u.valueOf(a)});return{pre:function(a,b){function c(){var g=e(a);b[0][d]=f(g)}c();a.$watch(g,c)}}}})}function Ia(a,c,d,e,f){var g=oa(a),k=sa(g,e),l=h[e]||f,p=b(d,!f,k,l);if(p){if("multiple"===e&&"select"===g)throw Z("selmulti",Ba(a));if(m.test(e))throw Z("nodomevents");c.push({priority:100,compile:function(){return{pre:function(a,c,f){c=f.$$observers||(f.$$observers=T());var g=f[e];g!==d&&(p=g&&b(g,!0,k,l),d=g);p&&(f[e]=p(a),(c[e]||(c[e]=[])).$$inter=!0,(f.$$observers&&
f.$$observers[e].$$scope||a).$watch(p,function(a,b){"class"===e&&a!==b?f.$updateClass(a,b):f.$set(e,a)}))}}}})}}function pa(a,b,c){var d=b[0],e=b.length,f=d.parentNode,g,h;if(a)for(g=0,h=a.length;g<h;g++)if(a[g]===d){a[g++]=c;h=g+e-1;for(var k=a.length;g<k;g++,h++)h<k?a[g]=a[h]:delete a[g];a.length-=e-1;a.context===d&&(a.context=c);break}f&&f.replaceChild(c,d);a=A.document.createDocumentFragment();for(g=0;g<e;g++)a.appendChild(b[g]);x.hasData(d)&&(x.data(c,x.data(d)),x(d).off("$destroy"));x.cleanData(a.querySelectorAll("*"));
for(g=1;g<e;g++)delete b[g];b[0]=c;b.length=1}function Ca(a,b){return S(function(){return a.apply(null,arguments)},a,b)}function Da(a,b,d,e,f,g){try{a(b,d,e,f,g)}catch(h){c(h,Ba(d))}}function ta(a,b){if(s)throw Z("missingattr",a,b);}function xa(a,c,d,e,f){function g(b,c,e){B(d.$onChanges)&&!ec(c,e)&&(Ua||(a.$$postDigest(q),Ua=[]),m||(m={},Ua.push(h)),m[b]&&(e=m[b].previousValue),m[b]=new Kb(e,c))}function h(){d.$onChanges(m);m=void 0}var k=[],l={},m;r(e,function(e,h){var m=e.attrName,n=e.optional,
I,t,u,s;switch(e.mode){case "@":n||va.call(c,m)||(ta(m,f.name),d[h]=c[m]=void 0);n=c.$observe(m,function(a){if(C(a)||Ga(a))g(h,a,d[h]),d[h]=a});c.$$observers[m].$$scope=a;I=c[m];C(I)?d[h]=b(I)(a):Ga(I)&&(d[h]=I);l[h]=new Kb(uc,d[h]);k.push(n);break;case "=":if(!va.call(c,m)){if(n)break;ta(m,f.name);c[m]=void 0}if(n&&!c[m])break;t=p(c[m]);s=t.literal?wa:ec;u=t.assign||function(){I=d[h]=t(a);throw Z("nonassign",c[m],m,f.name);};I=d[h]=t(a);n=function(b){s(b,d[h])||(s(b,I)?u(a,b=d[h]):d[h]=b);return I=
b};n.$stateful=!0;n=e.collection?a.$watchCollection(c[m],n):a.$watch(p(c[m],n),null,t.literal);k.push(n);break;case "<":if(!va.call(c,m)){if(n)break;ta(m,f.name);c[m]=void 0}if(n&&!c[m])break;t=p(c[m]);var v=t.literal,L=d[h]=t(a);l[h]=new Kb(uc,d[h]);n=a[e.collection?"$watchCollection":"$watch"](t,function(a,b){if(b===a){if(b===L||v&&wa(b,L))return;b=L}g(h,a,b);d[h]=a});k.push(n);break;case "&":n||va.call(c,m)||ta(m,f.name);t=c.hasOwnProperty(m)?p(c[m]):E;if(t===E&&n)break;d[h]=function(b){return t(a,
b)}}});return{initialChanges:l,removeWatches:k.length&&function(){for(var a=0,b=k.length;a<b;++a)k[a]()}}}var Ma=/^\w/,Fa=A.document.createElement("div"),Oa=t,Qa=N,Ja=G,Ua;w.prototype={$normalize:ya,$addClass:function(a){a&&0<a.length&&R.addClass(this.$$element,a)},$removeClass:function(a){a&&0<a.length&&R.removeClass(this.$$element,a)},$updateClass:function(a,b){var c=wd(a,b);c&&c.length&&R.addClass(this.$$element,c);(c=wd(b,a))&&c.length&&R.removeClass(this.$$element,c)},$set:function(a,b,d,e){var f=
nd(this.$$element[0],a),g=xd[a],h=a;f?(this.$$element.prop(a,b),e=f):g&&(this[g]=b,h=g);this[a]=b;e?this.$attr[a]=e:(e=this.$attr[a])||(this.$attr[a]=e=Xc(a,"-"));g=oa(this.$$element);"srcset"!==a||"img"!==g&&"source"!==g||(this[a]=b=ma(b,"$set('srcset', value)"));!1!==d&&(null===b||z(b)?this.$$element.removeAttr(e):Ma.test(e)?f&&!1===b?this.$$element.removeAttr(e):this.$$element.attr(e,b):O(this.$$element[0],e,b));(a=this.$$observers)&&r(a[h],function(a){try{a(b)}catch(d){c(d)}})},$observe:function(a,
b){var c=this,d=c.$$observers||(c.$$observers=T()),e=d[a]||(d[a]=[]);e.push(b);L.$evalAsync(function(){e.$$inter||!c.hasOwnProperty(a)||z(c[a])||b(c[a])});return function(){cb(e,b)}}};var Ka=b.startSymbol(),La=b.endSymbol(),Na="{{"===Ka&&"}}"===La?Ta:function(a){return a.replace(/\{\{/g,Ka).replace(/}}/g,La)},Ra=/^ng(Attr|Prop|On)([A-Z].*)$/,Sa=/^(.+)Start$/;aa.$$addBindingInfo=n?function(a,b){var c=a.data("$binding")||[];H(b)?c=c.concat(b):c.push(b);a.data("$binding",c)}:E;aa.$$addBindingClass=n?
function(a){ua(a,"ng-binding")}:E;aa.$$addScopeInfo=n?function(a,b,c,d){a.data(c?d?"$isolateScopeNoTemplate":"$isolateScope":"$scope",b)}:E;aa.$$addScopeClass=n?function(a,b){ua(a,b?"ng-isolate-scope":"ng-scope")}:E;aa.$$createComment=function(a,b){var c="";n&&(c=" "+(a||"")+": ",b&&(c+=b+" "));return A.document.createComment(c)};return aa}]}function Kb(a,b){this.previousValue=a;this.currentValue=b}function ya(a){return a.replace(td,"").replace(Kg,function(a,d,c){return c?d.toUpperCase():d})}function wd(a,
b){var d="",c=a.split(/\s+/),e=b.split(/\s+/),f=0;a:for(;f<c.length;f++){for(var g=c[f],k=0;k<e.length;k++)if(g===e[k])continue a;d+=(0<d.length?" ":"")+g}return d}function vd(a){a=x(a);var b=a.length;if(1>=b)return a;for(;b--;){var d=a[b];(8===d.nodeType||d.nodeType===Pa&&""===d.nodeValue.trim())&&sd.call(a,b,1)}return a}function Ig(a,b){if(b&&C(b))return b;if(C(a)){var d=yd.exec(a);if(d)return d[3]}}function Nf(){var a={};this.has=function(b){return a.hasOwnProperty(b)};this.register=function(b,
d){Ja(b,"controller");D(b)?S(a,b):a[b]=d};this.$get=["$injector",function(b){function d(a,b,d,g){if(!a||!D(a.$scope))throw F("$controller")("noscp",g,b);a.$scope[b]=d}return function(c,e,f,g){var k,h,l;f=!0===f;g&&C(g)&&(l=g);if(C(c)){g=c.match(yd);if(!g)throw zd("ctrlfmt",c);h=g[1];l=l||g[3];c=a.hasOwnProperty(h)?a[h]:Oe(e.$scope,h,!0);if(!c)throw zd("ctrlreg",h);tb(c,h,!0)}if(f)return f=(H(c)?c[c.length-1]:c).prototype,k=Object.create(f||null),l&&d(e,l,k,h||c.name),S(function(){var a=b.invoke(c,
k,e,h);a!==k&&(D(a)||B(a))&&(k=a,l&&d(e,l,k,h||c.name));return k},{instance:k,identifier:l});k=b.instantiate(c,e,h);l&&d(e,l,k,h||c.name);return k}}]}function Of(){this.$get=["$window",function(a){return x(a.document)}]}function Pf(){this.$get=["$document","$rootScope",function(a,b){function d(){e=c.hidden}var c=a[0],e=c&&c.hidden;a.on("visibilitychange",d);b.$on("$destroy",function(){a.off("visibilitychange",d)});return function(){return e}}]}function Qf(){this.$get=["$log",function(a){return function(b,
d){a.error.apply(a,arguments)}}]}function vc(a){return D(a)?ha(a)?a.toISOString():eb(a):a}function Wf(){this.$get=function(){return function(a){if(!a)return"";var b=[];Qc(a,function(a,c){null===a||z(a)||B(a)||(H(a)?r(a,function(a){b.push(ba(c)+"="+ba(vc(a)))}):b.push(ba(c)+"="+ba(vc(a))))});return b.join("&")}}}function Xf(){this.$get=function(){return function(a){function b(a,e,f){H(a)?r(a,function(a,c){b(a,e+"["+(D(a)?c:"")+"]")}):D(a)&&!ha(a)?Qc(a,function(a,c){b(a,e+(f?"":"[")+c+(f?"":"]"))}):
(B(a)&&(a=a()),d.push(ba(e)+"="+(null==a?"":ba(vc(a)))))}if(!a)return"";var d=[];b(a,"",!0);return d.join("&")}}}function wc(a,b){if(C(a)){var d=a.replace(Lg,"").trim();if(d){var c=b("Content-Type"),c=c&&0===c.indexOf(Ad),e;(e=c)||(e=(e=d.match(Mg))&&Ng[e[0]].test(d));if(e)try{a=Tc(d)}catch(f){if(!c)return a;throw Lb("baddata",a,f);}}}return a}function Bd(a){var b=T(),d;C(a)?r(a.split("\n"),function(a){d=a.indexOf(":");var e=K(ca(a.substr(0,d)));a=ca(a.substr(d+1));e&&(b[e]=b[e]?b[e]+", "+a:a)}):
D(a)&&r(a,function(a,d){var f=K(d),g=ca(a);f&&(b[f]=b[f]?b[f]+", "+g:g)});return b}function Cd(a){var b;return function(d){b||(b=Bd(a));return d?(d=b[K(d)],void 0===d&&(d=null),d):b}}function Dd(a,b,d,c){if(B(c))return c(a,b,d);r(c,function(c){a=c(a,b,d)});return a}function Vf(){var a=this.defaults={transformResponse:[wc],transformRequest:[function(a){return D(a)&&"[object File]"!==la.call(a)&&"[object Blob]"!==la.call(a)&&"[object FormData]"!==la.call(a)?eb(a):a}],headers:{common:{Accept:"application/json, text/plain, */*"},
post:ja(xc),put:ja(xc),patch:ja(xc)},xsrfCookieName:"XSRF-TOKEN",xsrfHeaderName:"X-XSRF-TOKEN",paramSerializer:"$httpParamSerializer",jsonpCallbackParam:"callback"},b=!1;this.useApplyAsync=function(a){return w(a)?(b=!!a,this):b};var d=this.interceptors=[],c=this.xsrfTrustedOrigins=[];Object.defineProperty(this,"xsrfWhitelistedOrigins",{get:function(){return this.xsrfTrustedOrigins},set:function(a){this.xsrfTrustedOrigins=a}});this.$get=["$browser","$httpBackend","$$cookieReader","$cacheFactory","$rootScope",
"$q","$injector","$sce",function(e,f,g,k,h,l,m,p){function n(b){function c(a,b){for(var d=0,e=b.length;d<e;){var f=b[d++],g=b[d++];a=a.then(f,g)}b.length=0;return a}function d(a,b){var c,e={};r(a,function(a,d){B(a)?(c=a(b),null!=c&&(e[d]=c)):e[d]=a});return e}function f(a){var b=S({},a);b.data=Dd(a.data,a.headers,a.status,g.transformResponse);a=a.status;return 200<=a&&300>a?b:l.reject(b)}if(!D(b))throw F("$http")("badreq",b);if(!C(p.valueOf(b.url)))throw F("$http")("badreq",b.url);var g=S({method:"get",
transformRequest:a.transformRequest,transformResponse:a.transformResponse,paramSerializer:a.paramSerializer,jsonpCallbackParam:a.jsonpCallbackParam},b);g.headers=function(b){var c=a.headers,e=S({},b.headers),f,g,h,c=S({},c.common,c[K(b.method)]);a:for(f in c){g=K(f);for(h in e)if(K(h)===g)continue a;e[f]=c[f]}return d(e,ja(b))}(b);g.method=vb(g.method);g.paramSerializer=C(g.paramSerializer)?m.get(g.paramSerializer):g.paramSerializer;e.$$incOutstandingRequestCount("$http");var h=[],k=[];b=l.resolve(g);
r(v,function(a){(a.request||a.requestError)&&h.unshift(a.request,a.requestError);(a.response||a.responseError)&&k.push(a.response,a.responseError)});b=c(b,h);b=b.then(function(b){var c=b.headers,d=Dd(b.data,Cd(c),void 0,b.transformRequest);z(d)&&r(c,function(a,b){"content-type"===K(b)&&delete c[b]});z(b.withCredentials)&&!z(a.withCredentials)&&(b.withCredentials=a.withCredentials);return s(b,d).then(f,f)});b=c(b,k);return b=b.finally(function(){e.$$completeOutstandingRequest(E,"$http")})}function s(c,
d){function e(a){if(a){var c={};r(a,function(a,d){c[d]=function(c){function d(){a(c)}b?h.$applyAsync(d):h.$$phase?d():h.$apply(d)}});return c}}function k(a,c,d,e,f){function g(){m(c,a,d,e,f)}R&&(200<=a&&300>a?R.put(O,[a,c,Bd(d),e,f]):R.remove(O));b?h.$applyAsync(g):(g(),h.$$phase||h.$apply())}function m(a,b,d,e,f){b=-1<=b?b:0;(200<=b&&300>b?L.resolve:L.reject)({data:a,status:b,headers:Cd(d),config:c,statusText:e,xhrStatus:f})}function s(a){m(a.data,a.status,ja(a.headers()),a.statusText,a.xhrStatus)}
function v(){var a=n.pendingRequests.indexOf(c);-1!==a&&n.pendingRequests.splice(a,1)}var L=l.defer(),u=L.promise,R,q,ma=c.headers,x="jsonp"===K(c.method),O=c.url;x?O=p.getTrustedResourceUrl(O):C(O)||(O=p.valueOf(O));O=G(O,c.paramSerializer(c.params));x&&(O=t(O,c.jsonpCallbackParam));n.pendingRequests.push(c);u.then(v,v);!c.cache&&!a.cache||!1===c.cache||"GET"!==c.method&&"JSONP"!==c.method||(R=D(c.cache)?c.cache:D(a.cache)?a.cache:N);R&&(q=R.get(O),w(q)?q&&B(q.then)?q.then(s,s):H(q)?m(q[1],q[0],
ja(q[2]),q[3],q[4]):m(q,200,{},"OK","complete"):R.put(O,u));z(q)&&((q=kc(c.url)?g()[c.xsrfCookieName||a.xsrfCookieName]:void 0)&&(ma[c.xsrfHeaderName||a.xsrfHeaderName]=q),f(c.method,O,d,k,ma,c.timeout,c.withCredentials,c.responseType,e(c.eventHandlers),e(c.uploadEventHandlers)));return u}function G(a,b){0<b.length&&(a+=(-1===a.indexOf("?")?"?":"&")+b);return a}function t(a,b){var c=a.split("?");if(2<c.length)throw Lb("badjsonp",a);c=hc(c[1]);r(c,function(c,d){if("JSON_CALLBACK"===c)throw Lb("badjsonp",
a);if(d===b)throw Lb("badjsonp",b,a);});return a+=(-1===a.indexOf("?")?"?":"&")+b+"=JSON_CALLBACK"}var N=k("$http");a.paramSerializer=C(a.paramSerializer)?m.get(a.paramSerializer):a.paramSerializer;var v=[];r(d,function(a){v.unshift(C(a)?m.get(a):m.invoke(a))});var kc=Og(c);n.pendingRequests=[];(function(a){r(arguments,function(a){n[a]=function(b,c){return n(S({},c||{},{method:a,url:b}))}})})("get","delete","head","jsonp");(function(a){r(arguments,function(a){n[a]=function(b,c,d){return n(S({},d||
{},{method:a,url:b,data:c}))}})})("post","put","patch");n.defaults=a;return n}]}function Zf(){this.$get=function(){return function(){return new A.XMLHttpRequest}}}function Yf(){this.$get=["$browser","$jsonpCallbacks","$document","$xhrFactory",function(a,b,d,c){return Pg(a,c,a.defer,b,d[0])}]}function Pg(a,b,d,c,e){function f(a,b,d){a=a.replace("JSON_CALLBACK",b);var f=e.createElement("script"),m=null;f.type="text/javascript";f.src=a;f.async=!0;m=function(a){f.removeEventListener("load",m);f.removeEventListener("error",
m);e.body.removeChild(f);f=null;var g=-1,s="unknown";a&&("load"!==a.type||c.wasCalled(b)||(a={type:"error"}),s=a.type,g="error"===a.type?404:200);d&&d(g,s)};f.addEventListener("load",m);f.addEventListener("error",m);e.body.appendChild(f);return m}return function(e,k,h,l,m,p,n,s,G,t){function N(a){J="timeout"===a;qa&&qa();y&&y.abort()}function v(a,b,c,e,f,g){w(P)&&d.cancel(P);qa=y=null;a(b,c,e,f,g)}k=k||a.url();if("jsonp"===K(e))var q=c.createCallback(k),qa=f(k,q,function(a,b){var d=200===a&&c.getResponse(q);
v(l,a,d,"",b,"complete");c.removeCallback(q)});else{var y=b(e,k),J=!1;y.open(e,k,!0);r(m,function(a,b){w(a)&&y.setRequestHeader(b,a)});y.onload=function(){var a=y.statusText||"",b="response"in y?y.response:y.responseText,c=1223===y.status?204:y.status;0===c&&(c=b?200:"file"===ga(k).protocol?404:0);v(l,c,b,y.getAllResponseHeaders(),a,"complete")};y.onerror=function(){v(l,-1,null,null,"","error")};y.ontimeout=function(){v(l,-1,null,null,"","timeout")};y.onabort=function(){v(l,-1,null,null,"",J?"timeout":
"abort")};r(G,function(a,b){y.addEventListener(b,a)});r(t,function(a,b){y.upload.addEventListener(b,a)});n&&(y.withCredentials=!0);if(s)try{y.responseType=s}catch(I){if("json"!==s)throw I;}y.send(z(h)?null:h)}if(0<p)var P=d(function(){N("timeout")},p);else p&&B(p.then)&&p.then(function(){N(w(p.$$timeoutId)?"timeout":"abort")})}}function Sf(){var a="{{",b="}}";this.startSymbol=function(b){return b?(a=b,this):a};this.endSymbol=function(a){return a?(b=a,this):b};this.$get=["$parse","$exceptionHandler",
"$sce",function(d,c,e){function f(a){return"\\\\\\"+a}function g(c){return c.replace(p,a).replace(n,b)}function k(a,b,c,d){var e=a.$watch(function(a){e();return d(a)},b,c);return e}function h(f,h,n,p){function v(a){try{return a=n&&!r?e.getTrusted(n,a):e.valueOf(a),p&&!w(a)?a:jc(a)}catch(b){c(Ma.interr(f,b))}}var r=n===e.URL||n===e.MEDIA_URL;if(!f.length||-1===f.indexOf(a)){if(h)return;h=g(f);r&&(h=e.getTrusted(n,h));h=ia(h);h.exp=f;h.expressions=[];h.$$watchDelegate=k;return h}p=!!p;for(var q,y,J=
0,I=[],P,Q=f.length,M=[],L=[],u;J<Q;)if(-1!==(q=f.indexOf(a,J))&&-1!==(y=f.indexOf(b,q+l)))J!==q&&M.push(g(f.substring(J,q))),J=f.substring(q+l,y),I.push(J),J=y+m,L.push(M.length),M.push("");else{J!==Q&&M.push(g(f.substring(J)));break}u=1===M.length&&1===L.length;var R=r&&u?void 0:v;P=I.map(function(a){return d(a,R)});if(!h||I.length){var x=function(a){for(var b=0,c=I.length;b<c;b++){if(p&&z(a[b]))return;M[L[b]]=a[b]}if(r)return e.getTrusted(n,u?M[0]:M.join(""));n&&1<M.length&&Ma.throwNoconcat(f);
return M.join("")};return S(function(a){var b=0,d=I.length,e=Array(d);try{for(;b<d;b++)e[b]=P[b](a);return x(e)}catch(g){c(Ma.interr(f,g))}},{exp:f,expressions:I,$$watchDelegate:function(a,b){var c;return a.$watchGroup(P,function(d,e){var f=x(d);b.call(this,f,d!==e?c:f,a);c=f})}})}}var l=a.length,m=b.length,p=new RegExp(a.replace(/./g,f),"g"),n=new RegExp(b.replace(/./g,f),"g");h.startSymbol=function(){return a};h.endSymbol=function(){return b};return h}]}function Tf(){this.$get=["$$intervalFactory",
"$window",function(a,b){var d={},c=function(a){b.clearInterval(a);delete d[a]},e=a(function(a,c,e){a=b.setInterval(a,c);d[a]=e;return a},c);e.cancel=function(a){if(!a)return!1;if(!a.hasOwnProperty("$$intervalId"))throw Qg("badprom");if(!d.hasOwnProperty(a.$$intervalId))return!1;a=a.$$intervalId;var b=d[a],e=b.promise;e.$$state&&(e.$$state.pur=!0);b.reject("canceled");c(a);return!0};return e}]}function Uf(){this.$get=["$browser","$q","$$q","$rootScope",function(a,b,d,c){return function(e,f){return function(g,
k,h,l){function m(){p?g.apply(null,n):g(s)}var p=4<arguments.length,n=p?Ha.call(arguments,4):[],s=0,G=w(l)&&!l,t=(G?d:b).defer(),r=t.promise;h=w(h)?h:0;r.$$intervalId=e(function(){G?a.defer(m):c.$evalAsync(m);t.notify(s++);0<h&&s>=h&&(t.resolve(s),f(r.$$intervalId));G||c.$apply()},k,t,G);return r}}}]}function Ed(a,b){var d=ga(a);b.$$protocol=d.protocol;b.$$host=d.hostname;b.$$port=fa(d.port)||Rg[d.protocol]||null}function Fd(a,b,d){if(Sg.test(a))throw kb("badpath",a);var c="/"!==a.charAt(0);c&&(a=
"/"+a);a=ga(a);for(var c=(c&&"/"===a.pathname.charAt(0)?a.pathname.substring(1):a.pathname).split("/"),e=c.length;e--;)c[e]=decodeURIComponent(c[e]),d&&(c[e]=c[e].replace(/\//g,"%2F"));d=c.join("/");b.$$path=d;b.$$search=hc(a.search);b.$$hash=decodeURIComponent(a.hash);b.$$path&&"/"!==b.$$path.charAt(0)&&(b.$$path="/"+b.$$path)}function yc(a,b){return a.slice(0,b.length)===b}function za(a,b){if(yc(b,a))return b.substr(a.length)}function xa(a){var b=a.indexOf("#");return-1===b?a:a.substr(0,b)}function zc(a,
b,d){this.$$html5=!0;d=d||"";Ed(a,this);this.$$parse=function(a){var d=za(b,a);if(!C(d))throw kb("ipthprfx",a,b);Fd(d,this,!0);this.$$path||(this.$$path="/");this.$$compose()};this.$$normalizeUrl=function(a){return b+a.substr(1)};this.$$parseLinkUrl=function(c,e){if(e&&"#"===e[0])return this.hash(e.slice(1)),!0;var f,g;w(f=za(a,c))?(g=f,g=d&&w(f=za(d,f))?b+(za("/",f)||f):a+g):w(f=za(b,c))?g=b+f:b===c+"/"&&(g=b);g&&this.$$parse(g);return!!g}}function Ac(a,b,d){Ed(a,this);this.$$parse=function(c){var e=
za(a,c)||za(b,c),f;z(e)||"#"!==e.charAt(0)?this.$$html5?f=e:(f="",z(e)&&(a=c,this.replace())):(f=za(d,e),z(f)&&(f=e));Fd(f,this,!1);c=this.$$path;var e=a,g=/^\/[A-Z]:(\/.*)/;yc(f,e)&&(f=f.replace(e,""));g.exec(f)||(c=(f=g.exec(c))?f[1]:c);this.$$path=c;this.$$compose()};this.$$normalizeUrl=function(b){return a+(b?d+b:"")};this.$$parseLinkUrl=function(b,d){return xa(a)===xa(b)?(this.$$parse(b),!0):!1}}function Gd(a,b,d){this.$$html5=!0;Ac.apply(this,arguments);this.$$parseLinkUrl=function(c,e){if(e&&
"#"===e[0])return this.hash(e.slice(1)),!0;var f,g;a===xa(c)?f=c:(g=za(b,c))?f=a+d+g:b===c+"/"&&(f=b);f&&this.$$parse(f);return!!f};this.$$normalizeUrl=function(b){return a+d+b}}function Mb(a){return function(){return this[a]}}function Hd(a,b){return function(d){if(z(d))return this[a];this[a]=b(d);this.$$compose();return this}}function ag(){var a="!",b={enabled:!1,requireBase:!0,rewriteLinks:!0};this.hashPrefix=function(b){return w(b)?(a=b,this):a};this.html5Mode=function(a){if(Ga(a))return b.enabled=
a,this;if(D(a)){Ga(a.enabled)&&(b.enabled=a.enabled);Ga(a.requireBase)&&(b.requireBase=a.requireBase);if(Ga(a.rewriteLinks)||C(a.rewriteLinks))b.rewriteLinks=a.rewriteLinks;return this}return b};this.$get=["$rootScope","$browser","$sniffer","$rootElement","$window",function(d,c,e,f,g){function k(a,b){return a===b||ga(a).href===ga(b).href}function h(a,b,d){var e=m.url(),f=m.$$state;try{c.url(a,b,d),m.$$state=c.state()}catch(g){throw m.url(e),m.$$state=f,g;}}function l(a,b){d.$broadcast("$locationChangeSuccess",
m.absUrl(),a,m.$$state,b)}var m,p;p=c.baseHref();var n=c.url(),s;if(b.enabled){if(!p&&b.requireBase)throw kb("nobase");s=n.substring(0,n.indexOf("/",n.indexOf("//")+2))+(p||"/");p=e.history?zc:Gd}else s=xa(n),p=Ac;var r=s.substr(0,xa(s).lastIndexOf("/")+1);m=new p(s,r,"#"+a);m.$$parseLinkUrl(n,n);m.$$state=c.state();var t=/^\s*(javascript|mailto):/i;f.on("click",function(a){var e=b.rewriteLinks;if(e&&!a.ctrlKey&&!a.metaKey&&!a.shiftKey&&2!==a.which&&2!==a.button){for(var g=x(a.target);"a"!==oa(g[0]);)if(g[0]===
f[0]||!(g=g.parent())[0])return;if(!C(e)||!z(g.attr(e))){var e=g.prop("href"),h=g.attr("href")||g.attr("xlink:href");D(e)&&"[object SVGAnimatedString]"===e.toString()&&(e=ga(e.animVal).href);t.test(e)||!e||g.attr("target")||a.isDefaultPrevented()||!m.$$parseLinkUrl(e,h)||(a.preventDefault(),m.absUrl()!==c.url()&&d.$apply())}}});m.absUrl()!==n&&c.url(m.absUrl(),!0);var N=!0;c.onUrlChange(function(a,b){yc(a,r)?(d.$evalAsync(function(){var c=m.absUrl(),e=m.$$state,f;m.$$parse(a);m.$$state=b;f=d.$broadcast("$locationChangeStart",
a,c,b,e).defaultPrevented;m.absUrl()===a&&(f?(m.$$parse(c),m.$$state=e,h(c,!1,e)):(N=!1,l(c,e)))}),d.$$phase||d.$digest()):g.location.href=a});d.$watch(function(){if(N||m.$$urlUpdatedByLocation){m.$$urlUpdatedByLocation=!1;var a=c.url(),b=m.absUrl(),f=c.state(),g=m.$$replace,n=!k(a,b)||m.$$html5&&e.history&&f!==m.$$state;if(N||n)N=!1,d.$evalAsync(function(){var b=m.absUrl(),c=d.$broadcast("$locationChangeStart",b,a,m.$$state,f).defaultPrevented;m.absUrl()===b&&(c?(m.$$parse(a),m.$$state=f):(n&&h(b,
g,f===m.$$state?null:m.$$state),l(a,f)))})}m.$$replace=!1});return m}]}function bg(){var a=!0,b=this;this.debugEnabled=function(b){return w(b)?(a=b,this):a};this.$get=["$window",function(d){function c(a){dc(a)&&(a.stack&&f?a=a.message&&-1===a.stack.indexOf(a.message)?"Error: "+a.message+"\n"+a.stack:a.stack:a.sourceURL&&(a=a.message+"\n"+a.sourceURL+":"+a.line));return a}function e(a){var b=d.console||{},e=b[a]||b.log||E;return function(){var a=[];r(arguments,function(b){a.push(c(b))});return Function.prototype.apply.call(e,
b,a)}}var f=ra||/\bEdge\//.test(d.navigator&&d.navigator.userAgent);return{log:e("log"),info:e("info"),warn:e("warn"),error:e("error"),debug:function(){var c=e("debug");return function(){a&&c.apply(b,arguments)}}()}}]}function Tg(a){return a+""}function Ug(a,b){return"undefined"!==typeof a?a:b}function Id(a,b){return"undefined"===typeof a?b:"undefined"===typeof b?a:a+b}function Vg(a,b){switch(a.type){case q.MemberExpression:if(a.computed)return!1;break;case q.UnaryExpression:return 1;case q.BinaryExpression:return"+"!==
a.operator?1:!1;case q.CallExpression:return!1}return void 0===b?Jd:b}function Y(a,b,d){var c,e,f=a.isPure=Vg(a,d);switch(a.type){case q.Program:c=!0;r(a.body,function(a){Y(a.expression,b,f);c=c&&a.expression.constant});a.constant=c;break;case q.Literal:a.constant=!0;a.toWatch=[];break;case q.UnaryExpression:Y(a.argument,b,f);a.constant=a.argument.constant;a.toWatch=a.argument.toWatch;break;case q.BinaryExpression:Y(a.left,b,f);Y(a.right,b,f);a.constant=a.left.constant&&a.right.constant;a.toWatch=
a.left.toWatch.concat(a.right.toWatch);break;case q.LogicalExpression:Y(a.left,b,f);Y(a.right,b,f);a.constant=a.left.constant&&a.right.constant;a.toWatch=a.constant?[]:[a];break;case q.ConditionalExpression:Y(a.test,b,f);Y(a.alternate,b,f);Y(a.consequent,b,f);a.constant=a.test.constant&&a.alternate.constant&&a.consequent.constant;a.toWatch=a.constant?[]:[a];break;case q.Identifier:a.constant=!1;a.toWatch=[a];break;case q.MemberExpression:Y(a.object,b,f);a.computed&&Y(a.property,b,f);a.constant=a.object.constant&&
(!a.computed||a.property.constant);a.toWatch=a.constant?[]:[a];break;case q.CallExpression:c=d=a.filter?!b(a.callee.name).$stateful:!1;e=[];r(a.arguments,function(a){Y(a,b,f);c=c&&a.constant;e.push.apply(e,a.toWatch)});a.constant=c;a.toWatch=d?e:[a];break;case q.AssignmentExpression:Y(a.left,b,f);Y(a.right,b,f);a.constant=a.left.constant&&a.right.constant;a.toWatch=[a];break;case q.ArrayExpression:c=!0;e=[];r(a.elements,function(a){Y(a,b,f);c=c&&a.constant;e.push.apply(e,a.toWatch)});a.constant=c;
a.toWatch=e;break;case q.ObjectExpression:c=!0;e=[];r(a.properties,function(a){Y(a.value,b,f);c=c&&a.value.constant;e.push.apply(e,a.value.toWatch);a.computed&&(Y(a.key,b,!1),c=c&&a.key.constant,e.push.apply(e,a.key.toWatch))});a.constant=c;a.toWatch=e;break;case q.ThisExpression:a.constant=!1;a.toWatch=[];break;case q.LocalsExpression:a.constant=!1,a.toWatch=[]}}function Kd(a){if(1===a.length){a=a[0].expression;var b=a.toWatch;return 1!==b.length?b:b[0]!==a?b:void 0}}function Ld(a){return a.type===
q.Identifier||a.type===q.MemberExpression}function Md(a){if(1===a.body.length&&Ld(a.body[0].expression))return{type:q.AssignmentExpression,left:a.body[0].expression,right:{type:q.NGValueParameter},operator:"="}}function Nd(a){this.$filter=a}function Od(a){this.$filter=a}function Nb(a,b,d){this.ast=new q(a,d);this.astCompiler=d.csp?new Od(b):new Nd(b)}function Bc(a){return B(a.valueOf)?a.valueOf():Wg.call(a)}function cg(){var a=T(),b={"true":!0,"false":!1,"null":null,undefined:void 0},d,c;this.addLiteral=
function(a,c){b[a]=c};this.setIdentifierFns=function(a,b){d=a;c=b;return this};this.$get=["$filter",function(e){function f(b,c){var d,f;switch(typeof b){case "string":return f=b=b.trim(),d=a[f],d||(d=new Ob(G),d=(new Nb(d,e,G)).parse(b),a[f]=p(d)),s(d,c);case "function":return s(b,c);default:return s(E,c)}}function g(a,b,c){return null==a||null==b?a===b:"object"!==typeof a||(a=Bc(a),"object"!==typeof a||c)?a===b||a!==a&&b!==b:!1}function k(a,b,c,d,e){var f=d.inputs,h;if(1===f.length){var k=g,f=f[0];
return a.$watch(function(a){var b=f(a);g(b,k,f.isPure)||(h=d(a,void 0,void 0,[b]),k=b&&Bc(b));return h},b,c,e)}for(var l=[],m=[],n=0,p=f.length;n<p;n++)l[n]=g,m[n]=null;return a.$watch(function(a){for(var b=!1,c=0,e=f.length;c<e;c++){var k=f[c](a);if(b||(b=!g(k,l[c],f[c].isPure)))m[c]=k,l[c]=k&&Bc(k)}b&&(h=d(a,void 0,void 0,m));return h},b,c,e)}function h(a,b,c,d,e){function f(){h(m)&&k()}function g(a,b,c,d){m=u&&d?d[0]:n(a,b,c,d);h(m)&&a.$$postDigest(f);return s(m)}var h=d.literal?l:w,k,m,n=d.$$intercepted||
d,s=d.$$interceptor||Ta,u=d.inputs&&!n.inputs;g.literal=d.literal;g.constant=d.constant;g.inputs=d.inputs;p(g);return k=a.$watch(g,b,c,e)}function l(a){var b=!0;r(a,function(a){w(a)||(b=!1)});return b}function m(a,b,c,d){var e=a.$watch(function(a){e();return d(a)},b,c);return e}function p(a){a.constant?a.$$watchDelegate=m:a.oneTime?a.$$watchDelegate=h:a.inputs&&(a.$$watchDelegate=k);return a}function n(a,b){function c(d){return b(a(d))}c.$stateful=a.$stateful||b.$stateful;c.$$pure=a.$$pure&&b.$$pure;
return c}function s(a,b){if(!b)return a;a.$$interceptor&&(b=n(a.$$interceptor,b),a=a.$$intercepted);var c=!1,d=function(d,e,f,g){d=c&&g?g[0]:a(d,e,f,g);return b(d)};d.$$intercepted=a;d.$$interceptor=b;d.literal=a.literal;d.oneTime=a.oneTime;d.constant=a.constant;b.$stateful||(c=!a.inputs,d.inputs=a.inputs?a.inputs:[a],b.$$pure||(d.inputs=d.inputs.map(function(a){return a.isPure===Jd?function(b){return a(b)}:a})));return p(d)}var G={csp:Ca().noUnsafeEval,literals:Ia(b),isIdentifierStart:B(d)&&d,isIdentifierContinue:B(c)&&
c};f.$$getAst=function(a){var b=new Ob(G);return(new Nb(b,e,G)).getAst(a).ast};return f}]}function eg(){var a=!0;this.$get=["$rootScope","$exceptionHandler",function(b,d){return Pd(function(a){b.$evalAsync(a)},d,a)}];this.errorOnUnhandledRejections=function(b){return w(b)?(a=b,this):a}}function fg(){var a=!0;this.$get=["$browser","$exceptionHandler",function(b,d){return Pd(function(a){b.defer(a)},d,a)}];this.errorOnUnhandledRejections=function(b){return w(b)?(a=b,this):a}}function Pd(a,b,d){function c(){return new e}
function e(){var a=this.promise=new f;this.resolve=function(b){h(a,b)};this.reject=function(b){m(a,b)};this.notify=function(b){n(a,b)}}function f(){this.$$state={status:0}}function g(){for(;!w&&x.length;){var a=x.shift();if(!a.pur){a.pur=!0;var c=a.value,c="Possibly unhandled rejection: "+("function"===typeof c?c.toString().replace(/ \{[\s\S]*$/,""):z(c)?"undefined":"string"!==typeof c?Qe(c,void 0):c);dc(a.value)?b(a.value,c):b(c)}}}function k(c){!d||c.pending||2!==c.status||c.pur||(0===w&&0===x.length&&
a(g),x.push(c));!c.processScheduled&&c.pending&&(c.processScheduled=!0,++w,a(function(){var e,f,k;k=c.pending;c.processScheduled=!1;c.pending=void 0;try{for(var l=0,n=k.length;l<n;++l){c.pur=!0;f=k[l][0];e=k[l][c.status];try{B(e)?h(f,e(c.value)):1===c.status?h(f,c.value):m(f,c.value)}catch(p){m(f,p),p&&!0===p.$$passToExceptionHandler&&b(p)}}}finally{--w,d&&0===w&&a(g)}}))}function h(a,b){a.$$state.status||(b===a?p(a,v("qcycle",b)):l(a,b))}function l(a,b){function c(b){g||(g=!0,l(a,b))}function d(b){g||
(g=!0,p(a,b))}function e(b){n(a,b)}var f,g=!1;try{if(D(b)||B(b))f=b.then;B(f)?(a.$$state.status=-1,f.call(b,c,d,e)):(a.$$state.value=b,a.$$state.status=1,k(a.$$state))}catch(h){d(h)}}function m(a,b){a.$$state.status||p(a,b)}function p(a,b){a.$$state.value=b;a.$$state.status=2;k(a.$$state)}function n(c,d){var e=c.$$state.pending;0>=c.$$state.status&&e&&e.length&&a(function(){for(var a,c,f=0,g=e.length;f<g;f++){c=e[f][0];a=e[f][3];try{n(c,B(a)?a(d):d)}catch(h){b(h)}}})}function s(a){var b=new f;m(b,
a);return b}function G(a,b,c){var d=null;try{B(c)&&(d=c())}catch(e){return s(e)}return d&&B(d.then)?d.then(function(){return b(a)},s):b(a)}function t(a,b,c,d){var e=new f;h(e,a);return e.then(b,c,d)}function q(a){if(!B(a))throw v("norslvr",a);var b=new f;a(function(a){h(b,a)},function(a){m(b,a)});return b}var v=F("$q",TypeError),w=0,x=[];S(f.prototype,{then:function(a,b,c){if(z(a)&&z(b)&&z(c))return this;var d=new f;this.$$state.pending=this.$$state.pending||[];this.$$state.pending.push([d,a,b,c]);
0<this.$$state.status&&k(this.$$state);return d},"catch":function(a){return this.then(null,a)},"finally":function(a,b){return this.then(function(b){return G(b,y,a)},function(b){return G(b,s,a)},b)}});var y=t;q.prototype=f.prototype;q.defer=c;q.reject=s;q.when=t;q.resolve=y;q.all=function(a){var b=new f,c=0,d=H(a)?[]:{};r(a,function(a,e){c++;t(a).then(function(a){d[e]=a;--c||h(b,d)},function(a){m(b,a)})});0===c&&h(b,d);return b};q.race=function(a){var b=c();r(a,function(a){t(a).then(b.resolve,b.reject)});
return b.promise};return q}function pg(){this.$get=["$window","$timeout",function(a,b){var d=a.requestAnimationFrame||a.webkitRequestAnimationFrame,c=a.cancelAnimationFrame||a.webkitCancelAnimationFrame||a.webkitCancelRequestAnimationFrame,e=!!d,f=e?function(a){var b=d(a);return function(){c(b)}}:function(a){var c=b(a,16.66,!1);return function(){b.cancel(c)}};f.supported=e;return f}]}function dg(){function a(a){function b(){this.$$watchers=this.$$nextSibling=this.$$childHead=this.$$childTail=null;
this.$$listeners={};this.$$listenerCount={};this.$$watchersCount=0;this.$id=++qb;this.$$ChildScope=null;this.$$suspended=!1}b.prototype=a;return b}var b=10,d=F("$rootScope"),c=null,e=null;this.digestTtl=function(a){arguments.length&&(b=a);return b};this.$get=["$exceptionHandler","$parse","$browser",function(f,g,k){function h(a){a.currentScope.$$destroyed=!0}function l(a){9===ra&&(a.$$childHead&&l(a.$$childHead),a.$$nextSibling&&l(a.$$nextSibling));a.$parent=a.$$nextSibling=a.$$prevSibling=a.$$childHead=
a.$$childTail=a.$root=a.$$watchers=null}function m(){this.$id=++qb;this.$$phase=this.$parent=this.$$watchers=this.$$nextSibling=this.$$prevSibling=this.$$childHead=this.$$childTail=null;this.$root=this;this.$$suspended=this.$$destroyed=!1;this.$$listeners={};this.$$listenerCount={};this.$$watchersCount=0;this.$$isolateBindings=null}function p(a){if(v.$$phase)throw d("inprog",v.$$phase);v.$$phase=a}function n(a,b){do a.$$watchersCount+=b;while(a=a.$parent)}function s(a,b,c){do a.$$listenerCount[c]-=
b,0===a.$$listenerCount[c]&&delete a.$$listenerCount[c];while(a=a.$parent)}function G(){}function t(){for(;y.length;)try{y.shift()()}catch(a){f(a)}e=null}function q(){null===e&&(e=k.defer(function(){v.$apply(t)},null,"$applyAsync"))}m.prototype={constructor:m,$new:function(b,c){var d;c=c||this;b?(d=new m,d.$root=this.$root):(this.$$ChildScope||(this.$$ChildScope=a(this)),d=new this.$$ChildScope);d.$parent=c;d.$$prevSibling=c.$$childTail;c.$$childHead?(c.$$childTail.$$nextSibling=d,c.$$childTail=d):
c.$$childHead=c.$$childTail=d;(b||c!==this)&&d.$on("$destroy",h);return d},$watch:function(a,b,d,e){var f=g(a);b=B(b)?b:E;if(f.$$watchDelegate)return f.$$watchDelegate(this,b,d,f,a);var h=this,k=h.$$watchers,l={fn:b,last:G,get:f,exp:e||a,eq:!!d};c=null;k||(k=h.$$watchers=[],k.$$digestWatchIndex=-1);k.unshift(l);k.$$digestWatchIndex++;n(this,1);return function(){var a=cb(k,l);0<=a&&(n(h,-1),a<k.$$digestWatchIndex&&k.$$digestWatchIndex--);c=null}},$watchGroup:function(a,b){function c(){h=!1;try{k?(k=
!1,b(e,e,g)):b(e,d,g)}finally{for(var f=0;f<a.length;f++)d[f]=e[f]}}var d=Array(a.length),e=Array(a.length),f=[],g=this,h=!1,k=!0;if(!a.length){var l=!0;g.$evalAsync(function(){l&&b(e,e,g)});return function(){l=!1}}if(1===a.length)return this.$watch(a[0],function(a,c,f){e[0]=a;d[0]=c;b(e,a===c?e:d,f)});r(a,function(a,b){var d=g.$watch(a,function(a){e[b]=a;h||(h=!0,g.$evalAsync(c))});f.push(d)});return function(){for(;f.length;)f.shift()()}},$watchCollection:function(a,b){function c(a){e=a;var b,d,
g,h;if(!z(e)){if(D(e))if(Aa(e))for(f!==n&&(f=n,t=f.length=0,l++),a=e.length,t!==a&&(l++,f.length=t=a),b=0;b<a;b++)h=f[b],g=e[b],d=h!==h&&g!==g,d||h===g||(l++,f[b]=g);else{f!==p&&(f=p={},t=0,l++);a=0;for(b in e)va.call(e,b)&&(a++,g=e[b],h=f[b],b in f?(d=h!==h&&g!==g,d||h===g||(l++,f[b]=g)):(t++,f[b]=g,l++));if(t>a)for(b in l++,f)va.call(e,b)||(t--,delete f[b])}else f!==e&&(f=e,l++);return l}}c.$$pure=g(a).literal;c.$stateful=!c.$$pure;var d=this,e,f,h,k=1<b.length,l=0,m=g(a,c),n=[],p={},s=!0,t=0;return this.$watch(m,
function(){s?(s=!1,b(e,e,d)):b(e,h,d);if(k)if(D(e))if(Aa(e)){h=Array(e.length);for(var a=0;a<e.length;a++)h[a]=e[a]}else for(a in h={},e)va.call(e,a)&&(h[a]=e[a]);else h=e})},$digest:function(){var a,g,h,l,m,n,s,r=b,q,y=w.length?v:this,N=[],z,A;p("$digest");k.$$checkUrlChange();this===v&&null!==e&&(k.defer.cancel(e),t());c=null;do{s=!1;q=y;for(n=0;n<w.length;n++){try{A=w[n],l=A.fn,l(A.scope,A.locals)}catch(C){f(C)}c=null}w.length=0;a:do{if(n=!q.$$suspended&&q.$$watchers)for(n.$$digestWatchIndex=n.length;n.$$digestWatchIndex--;)try{if(a=
n[n.$$digestWatchIndex])if(m=a.get,(g=m(q))!==(h=a.last)&&!(a.eq?wa(g,h):X(g)&&X(h)))s=!0,c=a,a.last=a.eq?Ia(g,null):g,l=a.fn,l(g,h===G?g:h,q),5>r&&(z=4-r,N[z]||(N[z]=[]),N[z].push({msg:B(a.exp)?"fn: "+(a.exp.name||a.exp.toString()):a.exp,newVal:g,oldVal:h}));else if(a===c){s=!1;break a}}catch(E){f(E)}if(!(n=!q.$$suspended&&q.$$watchersCount&&q.$$childHead||q!==y&&q.$$nextSibling))for(;q!==y&&!(n=q.$$nextSibling);)q=q.$parent}while(q=n);if((s||w.length)&&!r--)throw v.$$phase=null,d("infdig",b,N);
}while(s||w.length);for(v.$$phase=null;J<x.length;)try{x[J++]()}catch(D){f(D)}x.length=J=0;k.$$checkUrlChange()},$suspend:function(){this.$$suspended=!0},$isSuspended:function(){return this.$$suspended},$resume:function(){this.$$suspended=!1},$destroy:function(){if(!this.$$destroyed){var a=this.$parent;this.$broadcast("$destroy");this.$$destroyed=!0;this===v&&k.$$applicationDestroyed();n(this,-this.$$watchersCount);for(var b in this.$$listenerCount)s(this,this.$$listenerCount[b],b);a&&a.$$childHead===
this&&(a.$$childHead=this.$$nextSibling);a&&a.$$childTail===this&&(a.$$childTail=this.$$prevSibling);this.$$prevSibling&&(this.$$prevSibling.$$nextSibling=this.$$nextSibling);this.$$nextSibling&&(this.$$nextSibling.$$prevSibling=this.$$prevSibling);this.$destroy=this.$digest=this.$apply=this.$evalAsync=this.$applyAsync=E;this.$on=this.$watch=this.$watchGroup=function(){return E};this.$$listeners={};this.$$nextSibling=null;l(this)}},$eval:function(a,b){return g(a)(this,b)},$evalAsync:function(a,b){v.$$phase||
w.length||k.defer(function(){w.length&&v.$digest()},null,"$evalAsync");w.push({scope:this,fn:g(a),locals:b})},$$postDigest:function(a){x.push(a)},$apply:function(a){try{p("$apply");try{return this.$eval(a)}finally{v.$$phase=null}}catch(b){f(b)}finally{try{v.$digest()}catch(c){throw f(c),c;}}},$applyAsync:function(a){function b(){c.$eval(a)}var c=this;a&&y.push(b);a=g(a);q()},$on:function(a,b){var c=this.$$listeners[a];c||(this.$$listeners[a]=c=[]);c.push(b);var d=this;do d.$$listenerCount[a]||(d.$$listenerCount[a]=
0),d.$$listenerCount[a]++;while(d=d.$parent);var e=this;return function(){var d=c.indexOf(b);-1!==d&&(delete c[d],s(e,1,a))}},$emit:function(a,b){var c=[],d,e=this,g=!1,h={name:a,targetScope:e,stopPropagation:function(){g=!0},preventDefault:function(){h.defaultPrevented=!0},defaultPrevented:!1},k=db([h],arguments,1),l,m;do{d=e.$$listeners[a]||c;h.currentScope=e;l=0;for(m=d.length;l<m;l++)if(d[l])try{d[l].apply(null,k)}catch(n){f(n)}else d.splice(l,1),l--,m--;if(g)break;e=e.$parent}while(e);h.currentScope=
null;return h},$broadcast:function(a,b){var c=this,d=this,e={name:a,targetScope:this,preventDefault:function(){e.defaultPrevented=!0},defaultPrevented:!1};if(!this.$$listenerCount[a])return e;for(var g=db([e],arguments,1),h,k;c=d;){e.currentScope=c;d=c.$$listeners[a]||[];h=0;for(k=d.length;h<k;h++)if(d[h])try{d[h].apply(null,g)}catch(l){f(l)}else d.splice(h,1),h--,k--;if(!(d=c.$$listenerCount[a]&&c.$$childHead||c!==this&&c.$$nextSibling))for(;c!==this&&!(d=c.$$nextSibling);)c=c.$parent}e.currentScope=
null;return e}};var v=new m,w=v.$$asyncQueue=[],x=v.$$postDigestQueue=[],y=v.$$applyAsyncQueue=[],J=0;return v}]}function Te(){var a=/^\s*(https?|s?ftp|mailto|tel|file):/,b=/^\s*((https?|ftp|file|blob):|data:image\/)/;this.aHrefSanitizationTrustedUrlList=function(b){return w(b)?(a=b,this):a};this.imgSrcSanitizationTrustedUrlList=function(a){return w(a)?(b=a,this):b};this.$get=function(){return function(d,c){var e=c?b:a,f=ga(d&&d.trim()).href;return""===f||f.match(e)?d:"unsafe:"+f}}}function Xg(a){if("self"===
a)return a;if(C(a)){if(-1<a.indexOf("***"))throw Ea("iwcard",a);a=Qd(a).replace(/\\\*\\\*/g,".*").replace(/\\\*/g,"[^:/.?&;]*");return new RegExp("^"+a+"$")}if(ab(a))return new RegExp("^"+a.source+"$");throw Ea("imatcher");}function Rd(a){var b=[];w(a)&&r(a,function(a){b.push(Xg(a))});return b}function hg(){this.SCE_CONTEXTS=V;var a=["self"],b=[];this.trustedResourceUrlList=function(b){arguments.length&&(a=Rd(b));return a};Object.defineProperty(this,"resourceUrlWhitelist",{get:function(){return this.trustedResourceUrlList},
set:function(a){this.trustedResourceUrlList=a}});this.bannedResourceUrlList=function(a){arguments.length&&(b=Rd(a));return b};Object.defineProperty(this,"resourceUrlBlacklist",{get:function(){return this.bannedResourceUrlList},set:function(a){this.bannedResourceUrlList=a}});this.$get=["$injector","$$sanitizeUri",function(d,c){function e(a,b){var c;"self"===a?(c=Cc(b,Sd))||(A.document.baseURI?c=A.document.baseURI:(Na||(Na=A.document.createElement("a"),Na.href=".",Na=Na.cloneNode(!1)),c=Na.href),c=
Cc(b,c)):c=!!a.exec(b.href);return c}function f(a){var b=function(a){this.$$unwrapTrustedValue=function(){return a}};a&&(b.prototype=new a);b.prototype.valueOf=function(){return this.$$unwrapTrustedValue()};b.prototype.toString=function(){return this.$$unwrapTrustedValue().toString()};return b}var g=function(a){throw Ea("unsafe");};d.has("$sanitize")&&(g=d.get("$sanitize"));var k=f(),h={};h[V.HTML]=f(k);h[V.CSS]=f(k);h[V.MEDIA_URL]=f(k);h[V.URL]=f(h[V.MEDIA_URL]);h[V.JS]=f(k);h[V.RESOURCE_URL]=f(h[V.URL]);
return{trustAs:function(a,b){var c=h.hasOwnProperty(a)?h[a]:null;if(!c)throw Ea("icontext",a,b);if(null===b||z(b)||""===b)return b;if("string"!==typeof b)throw Ea("itype",a);return new c(b)},getTrusted:function(d,f){if(null===f||z(f)||""===f)return f;var k=h.hasOwnProperty(d)?h[d]:null;if(k&&f instanceof k)return f.$$unwrapTrustedValue();B(f.$$unwrapTrustedValue)&&(f=f.$$unwrapTrustedValue());if(d===V.MEDIA_URL||d===V.URL)return c(f.toString(),d===V.MEDIA_URL);if(d===V.RESOURCE_URL){var k=ga(f.toString()),
n,s,r=!1;n=0;for(s=a.length;n<s;n++)if(e(a[n],k)){r=!0;break}if(r)for(n=0,s=b.length;n<s;n++)if(e(b[n],k)){r=!1;break}if(r)return f;throw Ea("insecurl",f.toString());}if(d===V.HTML)return g(f);throw Ea("unsafe");},valueOf:function(a){return a instanceof k?a.$$unwrapTrustedValue():a}}}]}function gg(){var a=!0;this.enabled=function(b){arguments.length&&(a=!!b);return a};this.$get=["$parse","$sceDelegate",function(b,d){if(a&&8>ra)throw Ea("iequirks");var c=ja(V);c.isEnabled=function(){return a};c.trustAs=
d.trustAs;c.getTrusted=d.getTrusted;c.valueOf=d.valueOf;a||(c.trustAs=c.getTrusted=function(a,b){return b},c.valueOf=Ta);c.parseAs=function(a,d){var e=b(d);return e.literal&&e.constant?e:b(d,function(b){return c.getTrusted(a,b)})};var e=c.parseAs,f=c.getTrusted,g=c.trustAs;r(V,function(a,b){var d=K(b);c[("parse_as_"+d).replace(Dc,xb)]=function(b){return e(a,b)};c[("get_trusted_"+d).replace(Dc,xb)]=function(b){return f(a,b)};c[("trust_as_"+d).replace(Dc,xb)]=function(b){return g(a,b)}});return c}]}
function ig(){this.$get=["$window","$document",function(a,b){var d={},c=!((!a.nw||!a.nw.process)&&a.chrome&&(a.chrome.app&&a.chrome.app.runtime||!a.chrome.app&&a.chrome.runtime&&a.chrome.runtime.id))&&a.history&&a.history.pushState,e=fa((/android (\d+)/.exec(K((a.navigator||{}).userAgent))||[])[1]),f=/Boxee/i.test((a.navigator||{}).userAgent),g=b[0]||{},k=g.body&&g.body.style,h=!1,l=!1;k&&(h=!!("transition"in k||"webkitTransition"in k),l=!!("animation"in k||"webkitAnimation"in k));return{history:!(!c||
4>e||f),hasEvent:function(a){if("input"===a&&ra)return!1;if(z(d[a])){var b=g.createElement("div");d[a]="on"+a in b}return d[a]},csp:Ca(),transitions:h,animations:l,android:e}}]}function jg(){this.$get=ia(function(a){return new Yg(a)})}function Yg(a){function b(){var a=e.pop();return a&&a.cb}function d(a){for(var b=e.length-1;0<=b;--b){var c=e[b];if(c.type===a)return e.splice(b,1),c.cb}}var c={},e=[],f=this.ALL_TASKS_TYPE="$$all$$",g=this.DEFAULT_TASK_TYPE="$$default$$";this.completeTask=function(e,
h){h=h||g;try{e()}finally{var l;l=h||g;c[l]&&(c[l]--,c[f]--);l=c[h];var m=c[f];if(!m||!l)for(l=m?d:b;m=l(h);)try{m()}catch(p){a.error(p)}}};this.incTaskCount=function(a){a=a||g;c[a]=(c[a]||0)+1;c[f]=(c[f]||0)+1};this.notifyWhenNoPendingTasks=function(a,b){b=b||f;c[b]?e.push({type:b,cb:a}):a()}}function lg(){var a;this.httpOptions=function(b){return b?(a=b,this):a};this.$get=["$exceptionHandler","$templateCache","$http","$q","$sce",function(b,d,c,e,f){function g(k,h){g.totalPendingRequests++;if(!C(k)||
z(d.get(k)))k=f.getTrustedResourceUrl(k);var l=c.defaults&&c.defaults.transformResponse;H(l)?l=l.filter(function(a){return a!==wc}):l===wc&&(l=null);return c.get(k,S({cache:d,transformResponse:l},a)).finally(function(){g.totalPendingRequests--}).then(function(a){return d.put(k,a.data)},function(a){h||(a=Zg("tpload",k,a.status,a.statusText),b(a));return e.reject(a)})}g.totalPendingRequests=0;return g}]}function mg(){this.$get=["$rootScope","$browser","$location",function(a,b,d){return{findBindings:function(a,
b,d){a=a.getElementsByClassName("ng-binding");var g=[];r(a,function(a){var c=da.element(a).data("$binding");c&&r(c,function(c){d?(new RegExp("(^|\\s)"+Qd(b)+"(\\s|\\||$)")).test(c)&&g.push(a):-1!==c.indexOf(b)&&g.push(a)})});return g},findModels:function(a,b,d){for(var g=["ng-","data-ng-","ng\\:"],k=0;k<g.length;++k){var h=a.querySelectorAll("["+g[k]+"model"+(d?"=":"*=")+'"'+b+'"]');if(h.length)return h}},getLocation:function(){return d.url()},setLocation:function(b){b!==d.url()&&(d.url(b),a.$digest())},
whenStable:function(a){b.notifyWhenNoOutstandingRequests(a)}}}]}function ng(){this.$get=["$rootScope","$browser","$q","$$q","$exceptionHandler",function(a,b,d,c,e){function f(f,h,l){B(f)||(l=h,h=f,f=E);var m=Ha.call(arguments,3),p=w(l)&&!l,n=(p?c:d).defer(),s=n.promise,r;r=b.defer(function(){try{n.resolve(f.apply(null,m))}catch(b){n.reject(b),e(b)}finally{delete g[s.$$timeoutId]}p||a.$apply()},h,"$timeout");s.$$timeoutId=r;g[r]=n;return s}var g={};f.cancel=function(a){if(!a)return!1;if(!a.hasOwnProperty("$$timeoutId"))throw $g("badprom");
if(!g.hasOwnProperty(a.$$timeoutId))return!1;a=a.$$timeoutId;var c=g[a],d=c.promise;d.$$state&&(d.$$state.pur=!0);c.reject("canceled");delete g[a];return b.defer.cancel(a)};return f}]}function ga(a){if(!C(a))return a;ra&&($.setAttribute("href",a),a=$.href);$.setAttribute("href",a);a=$.hostname;!ah&&-1<a.indexOf(":")&&(a="["+a+"]");return{href:$.href,protocol:$.protocol?$.protocol.replace(/:$/,""):"",host:$.host,search:$.search?$.search.replace(/^\?/,""):"",hash:$.hash?$.hash.replace(/^#/,""):"",hostname:a,
port:$.port,pathname:"/"===$.pathname.charAt(0)?$.pathname:"/"+$.pathname}}function Og(a){var b=[Sd].concat(a.map(ga));return function(a){a=ga(a);return b.some(Cc.bind(null,a))}}function Cc(a,b){a=ga(a);b=ga(b);return a.protocol===b.protocol&&a.host===b.host}function og(){this.$get=ia(A)}function Td(a){function b(a){try{return decodeURIComponent(a)}catch(b){return a}}var d=a[0]||{},c={},e="";return function(){var a,g,k,h,l;try{a=d.cookie||""}catch(m){a=""}if(a!==e)for(e=a,a=e.split("; "),c={},k=0;k<
a.length;k++)g=a[k],h=g.indexOf("="),0<h&&(l=b(g.substring(0,h)),z(c[l])&&(c[l]=b(g.substring(h+1))));return c}}function sg(){this.$get=Td}function fd(a){function b(d,c){if(D(d)){var e={};r(d,function(a,c){e[c]=b(c,a)});return e}return a.factory(d+"Filter",c)}this.register=b;this.$get=["$injector",function(a){return function(b){return a.get(b+"Filter")}}];b("currency",Ud);b("date",Vd);b("filter",bh);b("json",ch);b("limitTo",dh);b("lowercase",eh);b("number",Wd);b("orderBy",Xd);b("uppercase",fh)}function bh(){return function(a,
b,d,c){if(!Aa(a)){if(null==a)return a;throw F("filter")("notarray",a);}c=c||"$";var e;switch(Ec(b)){case "function":break;case "boolean":case "null":case "number":case "string":e=!0;case "object":b=gh(b,d,c,e);break;default:return a}return Array.prototype.filter.call(a,b)}}function gh(a,b,d,c){var e=D(a)&&d in a;!0===b?b=wa:B(b)||(b=function(a,b){if(z(a))return!1;if(null===a||null===b)return a===b;if(D(b)||D(a)&&!cc(a))return!1;a=K(""+a);b=K(""+b);return-1!==a.indexOf(b)});return function(f){return e&&
!D(f)?Fa(f,a[d],b,d,!1):Fa(f,a,b,d,c)}}function Fa(a,b,d,c,e,f){var g=Ec(a),k=Ec(b);if("string"===k&&"!"===b.charAt(0))return!Fa(a,b.substring(1),d,c,e);if(H(a))return a.some(function(a){return Fa(a,b,d,c,e)});switch(g){case "object":var h;if(e){for(h in a)if(h.charAt&&"$"!==h.charAt(0)&&Fa(a[h],b,d,c,!0))return!0;return f?!1:Fa(a,b,d,c,!1)}if("object"===k){for(h in b)if(f=b[h],!B(f)&&!z(f)&&(g=h===c,!Fa(g?a:a[h],f,d,c,g,g)))return!1;return!0}return d(a,b);case "function":return!1;default:return d(a,
b)}}function Ec(a){return null===a?"null":typeof a}function Ud(a){var b=a.NUMBER_FORMATS;return function(a,c,e){if(null==a)return a;z(c)&&(c=b.CURRENCY_SYM);z(e)&&(e=b.PATTERNS[1].maxFrac);a=Yd(a,b.PATTERNS[1],b.GROUP_SEP,b.DECIMAL_SEP,e);return c?a.replace(/\u00A4/g,c):a.replace(/(^|\S)\s*\u00A4\s*(\S|$)/g,function(a,b,d){return b+c+d})}}function Wd(a){var b=a.NUMBER_FORMATS;return function(a,c){return null==a?a:Yd(a,b.PATTERNS[0],b.GROUP_SEP,b.DECIMAL_SEP,c)}}function hh(a){var b=0,d,c,e,f,g;-1<
(c=a.indexOf(Zd))&&(a=a.replace(Zd,""));0<(e=a.search(/e/i))?(0>c&&(c=e),c+=+a.slice(e+1),a=a.substring(0,e)):0>c&&(c=a.length);for(e=0;a.charAt(e)===Fc;e++);if(e===(g=a.length))d=[0],c=1;else{for(g--;a.charAt(g)===Fc;)g--;c-=e;d=[];for(f=0;e<=g;e++,f++)d[f]=+a.charAt(e)}c>$d&&(d=d.splice(0,$d-1),b=c-1,c=1);return{d:d,e:b,i:c}}function ih(a,b,d,c){var e=a.d,f=e.length-a.i;b=z(b)?Math.min(Math.max(d,f),c):+b;d=b+a.i;c=e[d];if(0<d){e.splice(Math.max(a.i,d));for(var g=d;g<e.length;g++)e[g]=0}else for(f=
Math.max(0,f),a.i=1,e.length=Math.max(1,d=b+1),e[0]=0,g=1;g<d;g++)e[g]=0;if(5<=c)if(0>d-1){for(c=0;c>d;c--)e.unshift(0),a.i++;e.unshift(1);a.i++}else e[d-1]++;for(;f<Math.max(0,b);f++)e.push(0);if(b=e.reduceRight(function(a,b,c,d){b+=a;d[c]=b%10;return Math.floor(b/10)},0))e.unshift(b),a.i++}function Yd(a,b,d,c,e){if(!C(a)&&!W(a)||isNaN(a))return"";var f=!isFinite(a),g=!1,k=Math.abs(a)+"",h="";if(f)h="\u221e";else{g=hh(k);ih(g,e,b.minFrac,b.maxFrac);h=g.d;k=g.i;e=g.e;f=[];for(g=h.reduce(function(a,
b){return a&&!b},!0);0>k;)h.unshift(0),k++;0<k?f=h.splice(k,h.length):(f=h,h=[0]);k=[];for(h.length>=b.lgSize&&k.unshift(h.splice(-b.lgSize,h.length).join(""));h.length>b.gSize;)k.unshift(h.splice(-b.gSize,h.length).join(""));h.length&&k.unshift(h.join(""));h=k.join(d);f.length&&(h+=c+f.join(""));e&&(h+="e+"+e)}return 0>a&&!g?b.negPre+h+b.negSuf:b.posPre+h+b.posSuf}function Pb(a,b,d,c){var e="";if(0>a||c&&0>=a)c?a=-a+1:(a=-a,e="-");for(a=""+a;a.length<b;)a=Fc+a;d&&(a=a.substr(a.length-b));return e+
a}function ea(a,b,d,c,e){d=d||0;return function(f){f=f["get"+a]();if(0<d||f>-d)f+=d;0===f&&-12===d&&(f=12);return Pb(f,b,c,e)}}function lb(a,b,d){return function(c,e){var f=c["get"+a](),g=vb((d?"STANDALONE":"")+(b?"SHORT":"")+a);return e[g][f]}}function ae(a){var b=(new Date(a,0,1)).getDay();return new Date(a,0,(4>=b?5:12)-b)}function be(a){return function(b){var d=ae(b.getFullYear());b=+new Date(b.getFullYear(),b.getMonth(),b.getDate()+(4-b.getDay()))-+d;b=1+Math.round(b/6048E5);return Pb(b,a)}}
function Gc(a,b){return 0>=a.getFullYear()?b.ERAS[0]:b.ERAS[1]}function Vd(a){function b(a){var b;if(b=a.match(d)){a=new Date(0);var f=0,g=0,k=b[8]?a.setUTCFullYear:a.setFullYear,h=b[8]?a.setUTCHours:a.setHours;b[9]&&(f=fa(b[9]+b[10]),g=fa(b[9]+b[11]));k.call(a,fa(b[1]),fa(b[2])-1,fa(b[3]));f=fa(b[4]||0)-f;g=fa(b[5]||0)-g;k=fa(b[6]||0);b=Math.round(1E3*parseFloat("0."+(b[7]||0)));h.call(a,f,g,k,b)}return a}var d=/^(\d{4})-?(\d\d)-?(\d\d)(?:T(\d\d)(?::?(\d\d)(?::?(\d\d)(?:\.(\d+))?)?)?(Z|([+-])(\d\d):?(\d\d))?)?$/;
return function(c,d,f){var g="",k=[],h,l;d=d||"mediumDate";d=a.DATETIME_FORMATS[d]||d;C(c)&&(c=jh.test(c)?fa(c):b(c));W(c)&&(c=new Date(c));if(!ha(c)||!isFinite(c.getTime()))return c;for(;d;)(l=kh.exec(d))?(k=db(k,l,1),d=k.pop()):(k.push(d),d=null);var m=c.getTimezoneOffset();f&&(m=fc(f,m),c=gc(c,f,!0));r(k,function(b){h=lh[b];g+=h?h(c,a.DATETIME_FORMATS,m):"''"===b?"'":b.replace(/(^'|'$)/g,"").replace(/''/g,"'")});return g}}function ch(){return function(a,b){z(b)&&(b=2);return eb(a,b)}}function dh(){return function(a,
b,d){b=Infinity===Math.abs(Number(b))?Number(b):fa(b);if(X(b))return a;W(a)&&(a=a.toString());if(!Aa(a))return a;d=!d||isNaN(d)?0:fa(d);d=0>d?Math.max(0,a.length+d):d;return 0<=b?Hc(a,d,d+b):0===d?Hc(a,b,a.length):Hc(a,Math.max(0,d+b),d)}}function Hc(a,b,d){return C(a)?a.slice(b,d):Ha.call(a,b,d)}function Xd(a){function b(b){return b.map(function(b){var c=1,d=Ta;if(B(b))d=b;else if(C(b)){if("+"===b.charAt(0)||"-"===b.charAt(0))c="-"===b.charAt(0)?-1:1,b=b.substring(1);if(""!==b&&(d=a(b),d.constant))var e=
d(),d=function(a){return a[e]}}return{get:d,descending:c}})}function d(a){switch(typeof a){case "number":case "boolean":case "string":return!0;default:return!1}}function c(a,b){var c=0,d=a.type,h=b.type;if(d===h){var h=a.value,l=b.value;"string"===d?(h=h.toLowerCase(),l=l.toLowerCase()):"object"===d&&(D(h)&&(h=a.index),D(l)&&(l=b.index));h!==l&&(c=h<l?-1:1)}else c="undefined"===d?1:"undefined"===h?-1:"null"===d?1:"null"===h?-1:d<h?-1:1;return c}return function(a,f,g,k){if(null==a)return a;if(!Aa(a))throw F("orderBy")("notarray",
a);H(f)||(f=[f]);0===f.length&&(f=["+"]);var h=b(f),l=g?-1:1,m=B(k)?k:c;a=Array.prototype.map.call(a,function(a,b){return{value:a,tieBreaker:{value:b,type:"number",index:b},predicateValues:h.map(function(c){var e=c.get(a);c=typeof e;if(null===e)c="null";else if("object"===c)a:{if(B(e.valueOf)&&(e=e.valueOf(),d(e)))break a;cc(e)&&(e=e.toString(),d(e))}return{value:e,type:c,index:b}})}});a.sort(function(a,b){for(var d=0,e=h.length;d<e;d++){var f=m(a.predicateValues[d],b.predicateValues[d]);if(f)return f*
h[d].descending*l}return(m(a.tieBreaker,b.tieBreaker)||c(a.tieBreaker,b.tieBreaker))*l});return a=a.map(function(a){return a.value})}}function Ra(a){B(a)&&(a={link:a});a.restrict=a.restrict||"AC";return ia(a)}function Qb(a,b,d,c,e){this.$$controls=[];this.$error={};this.$$success={};this.$pending=void 0;this.$name=e(b.name||b.ngForm||"")(d);this.$dirty=!1;this.$valid=this.$pristine=!0;this.$submitted=this.$invalid=!1;this.$$parentForm=mb;this.$$element=a;this.$$animate=c;ce(this)}function ce(a){a.$$classCache=
{};a.$$classCache[de]=!(a.$$classCache[nb]=a.$$element.hasClass(nb))}function ee(a){function b(a,b,c){c&&!a.$$classCache[b]?(a.$$animate.addClass(a.$$element,b),a.$$classCache[b]=!0):!c&&a.$$classCache[b]&&(a.$$animate.removeClass(a.$$element,b),a.$$classCache[b]=!1)}function d(a,c,d){c=c?"-"+Xc(c,"-"):"";b(a,nb+c,!0===d);b(a,de+c,!1===d)}var c=a.set,e=a.unset;a.clazz.prototype.$setValidity=function(a,g,k){z(g)?(this.$pending||(this.$pending={}),c(this.$pending,a,k)):(this.$pending&&e(this.$pending,
a,k),fe(this.$pending)&&(this.$pending=void 0));Ga(g)?g?(e(this.$error,a,k),c(this.$$success,a,k)):(c(this.$error,a,k),e(this.$$success,a,k)):(e(this.$error,a,k),e(this.$$success,a,k));this.$pending?(b(this,"ng-pending",!0),this.$valid=this.$invalid=void 0,d(this,"",null)):(b(this,"ng-pending",!1),this.$valid=fe(this.$error),this.$invalid=!this.$valid,d(this,"",this.$valid));g=this.$pending&&this.$pending[a]?void 0:this.$error[a]?!1:this.$$success[a]?!0:null;d(this,a,g);this.$$parentForm.$setValidity(a,
g,this)}}function fe(a){if(a)for(var b in a)if(a.hasOwnProperty(b))return!1;return!0}function Ic(a){a.$formatters.push(function(b){return a.$isEmpty(b)?b:b.toString()})}function Sa(a,b,d,c,e,f){var g=K(b[0].type);if(!e.android){var k=!1;b.on("compositionstart",function(){k=!0});b.on("compositionupdate",function(a){if(z(a.data)||""===a.data)k=!1});b.on("compositionend",function(){k=!1;l()})}var h,l=function(a){h&&(f.defer.cancel(h),h=null);if(!k){var e=b.val();a=a&&a.type;"password"===g||d.ngTrim&&
"false"===d.ngTrim||(e=ca(e));(c.$viewValue!==e||""===e&&c.$$hasNativeValidators)&&c.$setViewValue(e,a)}};if(e.hasEvent("input"))b.on("input",l);else{var m=function(a,b,c){h||(h=f.defer(function(){h=null;b&&b.value===c||l(a)}))};b.on("keydown",function(a){var b=a.keyCode;91===b||15<b&&19>b||37<=b&&40>=b||m(a,this,this.value)});if(e.hasEvent("paste"))b.on("paste cut drop",m)}b.on("change",l);if(ge[g]&&c.$$hasNativeValidators&&g===d.type)b.on("keydown wheel mousedown",function(a){if(!h){var b=this.validity,
c=b.badInput,d=b.typeMismatch;h=f.defer(function(){h=null;b.badInput===c&&b.typeMismatch===d||l(a)})}});c.$render=function(){var a=c.$isEmpty(c.$viewValue)?"":c.$viewValue;b.val()!==a&&b.val(a)}}function Rb(a,b){return function(d,c){var e,f;if(ha(d))return d;if(C(d)){'"'===d.charAt(0)&&'"'===d.charAt(d.length-1)&&(d=d.substring(1,d.length-1));if(mh.test(d))return new Date(d);a.lastIndex=0;if(e=a.exec(d))return e.shift(),f=c?{yyyy:c.getFullYear(),MM:c.getMonth()+1,dd:c.getDate(),HH:c.getHours(),mm:c.getMinutes(),
ss:c.getSeconds(),sss:c.getMilliseconds()/1E3}:{yyyy:1970,MM:1,dd:1,HH:0,mm:0,ss:0,sss:0},r(e,function(a,c){c<b.length&&(f[b[c]]=+a)}),e=new Date(f.yyyy,f.MM-1,f.dd,f.HH,f.mm,f.ss||0,1E3*f.sss||0),100>f.yyyy&&e.setFullYear(f.yyyy),e}return NaN}}function ob(a,b,d,c){return function(e,f,g,k,h,l,m,p){function n(a){return a&&!(a.getTime&&a.getTime()!==a.getTime())}function s(a){return w(a)&&!ha(a)?r(a)||void 0:a}function r(a,b){var c=k.$options.getOption("timezone");v&&v!==c&&(b=Uc(b,fc(v)));var e=d(a,
b);!isNaN(e)&&c&&(e=gc(e,c));return e}Jc(e,f,g,k,a);Sa(e,f,g,k,h,l);var t="time"===a||"datetimelocal"===a,q,v;k.$parsers.push(function(c){if(k.$isEmpty(c))return null;if(b.test(c))return r(c,q);k.$$parserName=a});k.$formatters.push(function(a){if(a&&!ha(a))throw pb("datefmt",a);if(n(a)){q=a;var b=k.$options.getOption("timezone");b&&(v=b,q=gc(q,b,!0));var d=c;t&&C(k.$options.getOption("timeSecondsFormat"))&&(d=c.replace("ss.sss",k.$options.getOption("timeSecondsFormat")).replace(/:$/,""));a=m("date")(a,
d,b);t&&k.$options.getOption("timeStripZeroSeconds")&&(a=a.replace(/(?::00)?(?:\.000)?$/,""));return a}v=q=null;return""});if(w(g.min)||g.ngMin){var x=g.min||p(g.ngMin)(e),A=s(x);k.$validators.min=function(a){return!n(a)||z(A)||d(a)>=A};g.$observe("min",function(a){a!==x&&(A=s(a),x=a,k.$validate())})}if(w(g.max)||g.ngMax){var y=g.max||p(g.ngMax)(e),J=s(y);k.$validators.max=function(a){return!n(a)||z(J)||d(a)<=J};g.$observe("max",function(a){a!==y&&(J=s(a),y=a,k.$validate())})}}}function Jc(a,b,d,
c,e){(c.$$hasNativeValidators=D(b[0].validity))&&c.$parsers.push(function(a){var d=b.prop("validity")||{};if(d.badInput||d.typeMismatch)c.$$parserName=e;else return a})}function he(a){a.$parsers.push(function(b){if(a.$isEmpty(b))return null;if(nh.test(b))return parseFloat(b);a.$$parserName="number"});a.$formatters.push(function(b){if(!a.$isEmpty(b)){if(!W(b))throw pb("numfmt",b);b=b.toString()}return b})}function na(a){w(a)&&!W(a)&&(a=parseFloat(a));return X(a)?void 0:a}function Kc(a){var b=a.toString(),
d=b.indexOf(".");return-1===d?-1<a&&1>a&&(a=/e-(\d+)$/.exec(b))?Number(a[1]):0:b.length-d-1}function ie(a,b,d){a=Number(a);var c=(a|0)!==a,e=(b|0)!==b,f=(d|0)!==d;if(c||e||f){var g=c?Kc(a):0,k=e?Kc(b):0,h=f?Kc(d):0,g=Math.max(g,k,h),g=Math.pow(10,g);a*=g;b*=g;d*=g;c&&(a=Math.round(a));e&&(b=Math.round(b));f&&(d=Math.round(d))}return 0===(a-b)%d}function je(a,b,d,c,e){if(w(c)){a=a(c);if(!a.constant)throw pb("constexpr",d,c);return a(b)}return e}function Lc(a,b){function d(a,b){if(!a||!a.length)return[];
if(!b||!b.length)return a;var c=[],d=0;a:for(;d<a.length;d++){for(var e=a[d],m=0;m<b.length;m++)if(e===b[m])continue a;c.push(e)}return c}function c(a){if(!a)return a;var b=a;H(a)?b=a.map(c).join(" "):D(a)?b=Object.keys(a).filter(function(b){return a[b]}).join(" "):C(a)||(b=a+"");return b}a="ngClass"+a;var e;return["$parse",function(f){return{restrict:"AC",link:function(g,k,h){function l(a,b){var c=[];r(a,function(a){if(0<b||p[a])p[a]=(p[a]||0)+b,p[a]===+(0<b)&&c.push(a)});return c.join(" ")}function m(a){if(a===
b){var c=s,c=l(c&&c.split(" "),1);h.$addClass(c)}else c=s,c=l(c&&c.split(" "),-1),h.$removeClass(c);n=a}var p=k.data("$classCounts"),n=!0,s;p||(p=T(),k.data("$classCounts",p));"ngClass"!==a&&(e||(e=f("$index",function(a){return a&1})),g.$watch(e,m));g.$watch(f(h[a],c),function(a){if(n===b){var c=s&&s.split(" "),e=a&&a.split(" "),f=d(c,e),c=d(e,c),f=l(f,-1),c=l(c,1);h.$addClass(c);h.$removeClass(f)}s=a})}}}]}function ud(a,b,d,c,e,f){return{restrict:"A",compile:function(g,k){var h=a(k[c]);return function(a,
c){c.on(e,function(c){var e=function(){h(a,{$event:c})};if(b.$$phase)if(f)a.$evalAsync(e);else try{e()}catch(g){d(g)}else a.$apply(e)})}}}}function Sb(a,b,d,c,e,f,g,k,h){this.$modelValue=this.$viewValue=Number.NaN;this.$$rawModelValue=void 0;this.$validators={};this.$asyncValidators={};this.$parsers=[];this.$formatters=[];this.$viewChangeListeners=[];this.$untouched=!0;this.$touched=!1;this.$pristine=!0;this.$dirty=!1;this.$valid=!0;this.$invalid=!1;this.$error={};this.$$success={};this.$pending=
void 0;this.$name=h(d.name||"",!1)(a);this.$$parentForm=mb;this.$options=Tb;this.$$updateEvents="";this.$$updateEventHandler=this.$$updateEventHandler.bind(this);this.$$parsedNgModel=e(d.ngModel);this.$$parsedNgModelAssign=this.$$parsedNgModel.assign;this.$$ngModelGet=this.$$parsedNgModel;this.$$ngModelSet=this.$$parsedNgModelAssign;this.$$pendingDebounce=null;this.$$parserValid=void 0;this.$$parserName="parse";this.$$currentValidationRunId=0;this.$$scope=a;this.$$rootScope=a.$root;this.$$attr=d;
this.$$element=c;this.$$animate=f;this.$$timeout=g;this.$$parse=e;this.$$q=k;this.$$exceptionHandler=b;ce(this);oh(this)}function oh(a){a.$$scope.$watch(function(b){b=a.$$ngModelGet(b);b===a.$modelValue||a.$modelValue!==a.$modelValue&&b!==b||a.$$setModelValue(b);return b})}function Mc(a){this.$$options=a}function ke(a,b){r(b,function(b,c){w(a[c])||(a[c]=b)})}function Oa(a,b){a.prop("selected",b);a.attr("selected",b)}function le(a,b,d){if(a){C(a)&&(a=new RegExp("^"+a+"$"));if(!a.test)throw F("ngPattern")("noregexp",
b,a,Ba(d));return a}}function Ub(a){a=fa(a);return X(a)?-1:a}var Xb={objectMaxDepth:5,urlErrorParamsEnabled:!0},me=/^\/(.+)\/([a-z]*)$/,va=Object.prototype.hasOwnProperty,K=function(a){return C(a)?a.toLowerCase():a},vb=function(a){return C(a)?a.toUpperCase():a},ra,x,sb,Ha=[].slice,sd=[].splice,ph=[].push,la=Object.prototype.toString,Rc=Object.getPrototypeOf,pa=F("ng"),da=A.angular||(A.angular={}),lc,qb=0;ra=A.document.documentMode;var X=Number.isNaN||function(a){return a!==a};E.$inject=[];Ta.$inject=
[];var Be=/^\[object (?:Uint8|Uint8Clamped|Uint16|Uint32|Int8|Int16|Int32|Float32|Float64)Array]$/,ca=function(a){return C(a)?a.trim():a},Qd=function(a){return a.replace(/([-()[\]{}+?*.$^|,:#<!\\])/g,"\\$1").replace(/\x08/g,"\\x08")},Ca=function(){if(!w(Ca.rules)){var a=A.document.querySelector("[ng-csp]")||A.document.querySelector("[data-ng-csp]");if(a){var b=a.getAttribute("ng-csp")||a.getAttribute("data-ng-csp");Ca.rules={noUnsafeEval:!b||-1!==b.indexOf("no-unsafe-eval"),noInlineStyle:!b||-1!==
b.indexOf("no-inline-style")}}else{a=Ca;try{new Function(""),b=!1}catch(d){b=!0}a.rules={noUnsafeEval:b,noInlineStyle:!1}}}return Ca.rules},rb=function(){if(w(rb.name_))return rb.name_;var a,b,d=Qa.length,c,e;for(b=0;b<d;++b)if(c=Qa[b],a=A.document.querySelector("["+c.replace(":","\\:")+"jq]")){e=a.getAttribute(c+"jq");break}return rb.name_=e},De=/:/g,Qa=["ng-","data-ng-","ng:","x-ng-"],He=function(a){var b=a.currentScript;if(!b)return!0;if(!(b instanceof A.HTMLScriptElement||b instanceof A.SVGScriptElement))return!1;
b=b.attributes;return[b.getNamedItem("src"),b.getNamedItem("href"),b.getNamedItem("xlink:href")].every(function(b){if(!b)return!0;if(!b.value)return!1;var c=a.createElement("a");c.href=b.value;if(a.location.origin===c.origin)return!0;switch(c.protocol){case "http:":case "https:":case "ftp:":case "blob:":case "file:":case "data:":return!0;default:return!1}})}(A.document),Ke=/[A-Z]/g,Yc=!1,Ne=/<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:-]+)(?:[^\w:>-][^>]*)?)\/>/gi,Pa=3,Se={vendor:"XLTS.dev",
full:"1.9.6",major:1,minor:9,dot:6,codeName:"angularjs-nes-2024-05-17"};U.expando="ng339";var Ka=U.cache={},wg=1;U._data=function(a){return this.cache[a[this.expando]]||{}};var tg=/-([a-z])/g,qh=/^-ms-/,Bb={mouseleave:"mouseout",mouseenter:"mouseover"},oc=F("jqLite"),vg=/^<([\w-]+)\s*\/?>(?:<\/\1>|)$/,nc=/<|&#?\w+;/,ug=/<([\w:-]+)/,sa={thead:["table"],col:["colgroup","table"],tr:["tbody","table"],td:["tr","tbody","table"]};sa.tbody=sa.tfoot=sa.colgroup=sa.caption=sa.thead;sa.th=sa.td;var hb={option:[1,
'<select multiple="multiple">',"</select>"],_default:[0,"",""]},Nc;for(Nc in sa){var ne=sa[Nc],oe=ne.slice().reverse();hb[Nc]=[oe.length,"<"+oe.join("><")+">","</"+ne.join("></")+">"]}hb.optgroup=hb.option;var Bg=A.Node.prototype.contains||function(a){return!!(this.compareDocumentPosition(a)&16)},Wa=U.prototype={ready:hd,toString:function(){var a=[];r(this,function(b){a.push(""+b)});return"["+a.join(", ")+"]"},eq:function(a){return 0<=a?x(this[a]):x(this[this.length+a])},length:0,push:ph,sort:[].sort,
splice:[].splice},Hb={};r("multiple selected checked disabled readOnly required open".split(" "),function(a){Hb[K(a)]=a});var od={};r("input select option textarea button form details".split(" "),function(a){od[a]=!0});var xd={ngMinlength:"minlength",ngMaxlength:"maxlength",ngMin:"min",ngMax:"max",ngPattern:"pattern",ngStep:"step"};r({data:sc,removeData:rc,hasData:function(a){for(var b in Ka[a.ng339])return!0;return!1},cleanData:function(a){for(var b=0,d=a.length;b<d;b++)rc(a[b]),kd(a[b])},htmlPrefilter:function(a){return a}},
function(a,b){U[b]=a});r({data:sc,inheritedData:Fb,scope:function(a){return x.data(a,"$scope")||Fb(a.parentNode||a,["$isolateScope","$scope"])},isolateScope:function(a){return x.data(a,"$isolateScope")||x.data(a,"$isolateScopeNoTemplate")},controller:ld,injector:function(a){return Fb(a,"$injector")},removeAttr:function(a,b){a.removeAttribute(b)},hasClass:Cb,css:function(a,b,d){b=yb(b.replace(qh,"ms-"));if(w(d))a.style[b]=d;else return a.style[b]},attr:function(a,b,d){var c=a.nodeType;if(c!==Pa&&2!==
c&&8!==c&&a.getAttribute){var c=K(b),e=Hb[c];if(w(d))null===d||!1===d&&e?a.removeAttribute(b):a.setAttribute(b,e?c:d);else return a=a.getAttribute(b),e&&null!==a&&(a=c),null===a?void 0:a}},prop:function(a,b,d){if(w(d))a[b]=d;else return a[b]},text:function(){function a(a,d){if(z(d)){var c=a.nodeType;return 1===c||c===Pa?a.textContent:""}a.textContent=d}a.$dv="";return a}(),val:function(a,b){if(z(b)){if(a.multiple&&"select"===oa(a)){var d=[];r(a.options,function(a){a.selected&&d.push(a.value||a.text)});
return d}return a.value}a.value=b},html:function(a,b){if(z(b))return a.innerHTML;zb(a,!0);a.innerHTML=b},empty:md},function(a,b){U.prototype[b]=function(b,c){var e,f,g=this.length;if(a!==md&&z(2===a.length&&a!==Cb&&a!==ld?b:c)){if(D(b)){for(e=0;e<g;e++)if(a===sc)a(this[e],b);else for(f in b)a(this[e],f,b[f]);return this}e=a.$dv;g=z(e)?Math.min(g,1):g;for(f=0;f<g;f++){var k=a(this[f],b,c);e=e?e+k:k}return e}for(e=0;e<g;e++)a(this[e],b,c);return this}});r({removeData:rc,on:function(a,b,d,c){if(w(c))throw oc("onargs");
if(mc(a)){c=Ab(a,!0);var e=c.events,f=c.handle;f||(f=c.handle=yg(a,e));c=0<=b.indexOf(" ")?b.split(" "):[b];for(var g=c.length,k=function(b,c,g){var k=e[b];k||(k=e[b]=[],k.specialHandlerWrapper=c,"$destroy"===b||g||a.addEventListener(b,f));k.push(d)};g--;)b=c[g],Bb[b]?(k(Bb[b],Ag),k(b,void 0,!0)):k(b)}},off:kd,one:function(a,b,d){a=x(a);a.on(b,function e(){a.off(b,d);a.off(b,e)});a.on(b,d)},replaceWith:function(a,b){var d,c=a.parentNode;zb(a);r(new U(b),function(b){d?c.insertBefore(b,d.nextSibling):
c.replaceChild(b,a);d=b})},children:function(a){var b=[];r(a.childNodes,function(a){1===a.nodeType&&b.push(a)});return b},contents:function(a){return a.contentDocument||a.childNodes||[]},append:function(a,b){var d=a.nodeType;if(1===d||11===d){b=new U(b);for(var d=0,c=b.length;d<c;d++)a.appendChild(b[d])}},prepend:function(a,b){if(1===a.nodeType){var d=a.firstChild;r(new U(b),function(b){a.insertBefore(b,d)})}},wrap:function(a,b){var d=x(b).eq(0).clone()[0],c=a.parentNode;c&&c.replaceChild(d,a);d.appendChild(a)},
remove:Gb,detach:function(a){Gb(a,!0)},after:function(a,b){var d=a,c=a.parentNode;if(c){b=new U(b);for(var e=0,f=b.length;e<f;e++){var g=b[e];c.insertBefore(g,d.nextSibling);d=g}}},addClass:Eb,removeClass:Db,toggleClass:function(a,b,d){b&&r(b.split(" "),function(b){var e=d;z(e)&&(e=!Cb(a,b));(e?Eb:Db)(a,b)})},parent:function(a){return(a=a.parentNode)&&11!==a.nodeType?a:null},next:function(a){return a.nextElementSibling},find:function(a,b){return a.getElementsByTagName?a.getElementsByTagName(b):[]},
clone:qc,triggerHandler:function(a,b,d){var c,e,f=b.type||b,g=Ab(a);if(g=(g=g&&g.events)&&g[f])c={preventDefault:function(){this.defaultPrevented=!0},isDefaultPrevented:function(){return!0===this.defaultPrevented},stopImmediatePropagation:function(){this.immediatePropagationStopped=!0},isImmediatePropagationStopped:function(){return!0===this.immediatePropagationStopped},stopPropagation:E,type:f,target:a},b.type&&(c=S(c,b)),b=ja(g),e=d?[c].concat(d):[c],r(b,function(b){c.isImmediatePropagationStopped()||
b.apply(a,e)})}},function(a,b){U.prototype[b]=function(b,c,e){for(var f,g=0,k=this.length;g<k;g++)z(f)?(f=a(this[g],b,c,e),w(f)&&(f=x(f))):pc(f,a(this[g],b,c,e));return w(f)?f:this}});U.prototype.bind=U.prototype.on;U.prototype.unbind=U.prototype.off;var rh=Object.create(null);pd.prototype={_idx:function(a){a!==this._lastKey&&(this._lastKey=a,this._lastIndex=this._keys.indexOf(a));return this._lastIndex},_transformKey:function(a){return X(a)?rh:a},get:function(a){a=this._transformKey(a);a=this._idx(a);
if(-1!==a)return this._values[a]},has:function(a){a=this._transformKey(a);return-1!==this._idx(a)},set:function(a,b){a=this._transformKey(a);var d=this._idx(a);-1===d&&(d=this._lastIndex=this._keys.length);this._keys[d]=a;this._values[d]=b},delete:function(a){a=this._transformKey(a);a=this._idx(a);if(-1===a)return!1;this._keys.splice(a,1);this._values.splice(a,1);this._lastKey=NaN;this._lastIndex=-1;return!0}};var Ib=pd,rg=[function(){this.$get=[function(){return Ib}]}],Dg=/^([^(]+?)=>/,Eg=/^[^(]*\(\s*([^)]*)\)/m,
sh=/,/,th=/^\s*(_?)(\S+?)\1\s*$/,Cg=/((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg,Da=F("$injector");fb.$$annotate=function(a,b,d){var c;if("function"===typeof a){if(!(c=a.$inject)){c=[];if(a.length){if(b)throw C(d)&&d||(d=a.name||Fg(a)),Da("strictdi",d);b=qd(a);r(b[1].split(sh),function(a){a.replace(th,function(a,b,d){c.push(d)})})}a.$inject=c}}else H(a)?(b=a.length-1,tb(a[b],"fn"),c=a.slice(0,b)):tb(a,"fn",!0);return c};var pe=F("$animate"),Hf=function(){this.$get=E},If=function(){var a=new Ib,b=[];this.$get=
["$$AnimateRunner","$rootScope",function(d,c){function e(a,b,c){var d=!1;b&&(b=C(b)?b.split(" "):H(b)?b:[],r(b,function(b){b&&(d=!0,a[b]=c)}));return d}function f(){r(b,function(b){var c=a.get(b);if(c){var d=Gg(b.attr("class")),e="",f="";r(c,function(a,b){a!==!!d[b]&&(a?e+=(e.length?" ":"")+b:f+=(f.length?" ":"")+b)});r(b,function(a){e&&Eb(a,e);f&&Db(a,f)});a.delete(b)}});b.length=0}return{enabled:E,on:E,off:E,pin:E,push:function(g,k,h,l){l&&l();h=h||{};h.from&&g.css(h.from);h.to&&g.css(h.to);if(h.addClass||
h.removeClass)if(k=h.addClass,l=h.removeClass,h=a.get(g)||{},k=e(h,k,!0),l=e(h,l,!1),k||l)a.set(g,h),b.push(g),1===b.length&&c.$$postDigest(f);g=new d;g.complete();return g}}}]},Ff=["$provide",function(a){var b=this,d=null,c=null;this.$$registeredAnimations=Object.create(null);this.register=function(c,d){if(c&&"."!==c.charAt(0))throw pe("notcsel",c);var g=c+"-animation";b.$$registeredAnimations[c.substr(1)]=g;a.factory(g,d)};this.customFilter=function(a){1===arguments.length&&(c=B(a)?a:null);return c};
this.classNameFilter=function(a){if(1===arguments.length&&(d=a instanceof RegExp?a:null)&&/[(\s|\/)]ng-animate[(\s|\/)]/.test(d.toString()))throw d=null,pe("nongcls","ng-animate");return d};this.$get=["$$animateQueue",function(a){function b(a,c,d){if(d){var e;a:{for(e=0;e<d.length;e++){var f=d[e];if(1===f.nodeType){e=f;break a}}e=void 0}!e||e.parentNode||e.previousElementSibling||(d=null)}d?d.after(a):c.prepend(a)}return{on:a.on,off:a.off,pin:a.pin,enabled:a.enabled,cancel:function(a){a.cancel&&a.cancel()},
enter:function(c,d,h,l){d=d&&x(d);h=h&&x(h);d=d||h.parent();b(c,d,h);return a.push(c,"enter",ta(l))},move:function(c,d,h,l){d=d&&x(d);h=h&&x(h);d=d||h.parent();b(c,d,h);return a.push(c,"move",ta(l))},leave:function(b,c){return a.push(b,"leave",ta(c),function(){b.remove()})},addClass:function(b,c,d){d=ta(d);d.addClass=ib(d.addclass,c);return a.push(b,"addClass",d)},removeClass:function(b,c,d){d=ta(d);d.removeClass=ib(d.removeClass,c);return a.push(b,"removeClass",d)},setClass:function(b,c,d,f){f=ta(f);
f.addClass=ib(f.addClass,c);f.removeClass=ib(f.removeClass,d);return a.push(b,"setClass",f)},animate:function(b,c,d,f,m){m=ta(m);m.from=m.from?S(m.from,c):c;m.to=m.to?S(m.to,d):d;m.tempClasses=ib(m.tempClasses,f||"ng-inline-animate");return a.push(b,"animate",m)}}}]}],Kf=function(){this.$get=["$$rAF",function(a){function b(b){d.push(b);1<d.length||a(function(){for(var a=0;a<d.length;a++)d[a]();d=[]})}var d=[];return function(){var a=!1;b(function(){a=!0});return function(d){a?d():b(d)}}}]},Jf=function(){this.$get=
["$q","$sniffer","$$animateAsyncRun","$$isDocumentHidden","$timeout",function(a,b,d,c,e){function f(a){this.setHost(a);var b=d();this._doneCallbacks=[];this._tick=function(a){c()?e(a,0,!1):b(a)};this._state=0}f.chain=function(a,b){function c(){if(d===a.length)b(!0);else a[d](function(a){!1===a?b(!1):(d++,c())})}var d=0;c()};f.all=function(a,b){function c(f){e=e&&f;++d===a.length&&b(e)}var d=0,e=!0;r(a,function(a){a.done(c)})};f.prototype={setHost:function(a){this.host=a||{}},done:function(a){2===
this._state?a():this._doneCallbacks.push(a)},progress:E,getPromise:function(){if(!this.promise){var b=this;this.promise=a(function(a,c){b.done(function(b){!1===b?c():a()})})}return this.promise},then:function(a,b){return this.getPromise().then(a,b)},"catch":function(a){return this.getPromise()["catch"](a)},"finally":function(a){return this.getPromise()["finally"](a)},pause:function(){this.host.pause&&this.host.pause()},resume:function(){this.host.resume&&this.host.resume()},end:function(){this.host.end&&
this.host.end();this._resolve(!0)},cancel:function(){this.host.cancel&&this.host.cancel();this._resolve(!1)},complete:function(a){var b=this;0===b._state&&(b._state=1,b._tick(function(){b._resolve(a)}))},_resolve:function(a){2!==this._state&&(r(this._doneCallbacks,function(b){b(a)}),this._doneCallbacks.length=0,this._state=2)}};return f}]},Gf=function(){this.$get=["$$rAF","$q","$$AnimateRunner",function(a,b,d){return function(b,e){function f(){a(function(){g.addClass&&(b.addClass(g.addClass),g.addClass=
null);g.removeClass&&(b.removeClass(g.removeClass),g.removeClass=null);g.to&&(b.css(g.to),g.to=null);k||h.complete();k=!0});return h}var g=e||{};g.$$prepared||(g=Ia(g));g.cleanupStyles&&(g.from=g.to=null);g.from&&(b.css(g.from),g.from=null);var k,h=new d;return{start:f,end:f}}}]},Z=F("$compile"),uc=new function(){};Zc.$inject=["$provide","$$sanitizeUriProvider"];Kb.prototype.isFirstChange=function(){return this.previousValue===uc};var td=/^((?:x|data)[:\-_])/i,Kg=/[:\-_]+(.)/g,zd=F("$controller"),
yd=/^(\S+)(\s+as\s+([\w$]+))?$/,Rf=function(){this.$get=["$document",function(a){return function(b){b?!b.nodeType&&b instanceof x&&(b=b[0]):b=a[0].body;return b.offsetWidth+1}}]},Ad="application/json",xc={"Content-Type":Ad+";charset=utf-8"},Mg=/^\[|^\{(?!\{)/,Ng={"[":/]$/,"{":/}$/},Lg=/^\)]\}',?\n/,Lb=F("$http"),Ma=da.$interpolateMinErr=F("$interpolate");Ma.throwNoconcat=function(a){throw Ma("noconcat",a);};Ma.interr=function(a,b){return Ma("interr",a,b.toString())};var Qg=F("$interval"),$f=function(){this.$get=
function(){function a(a){var b=function(a){b.data=a;b.called=!0};b.id=a;return b}var b=da.callbacks,d={};return{createCallback:function(c){c="_"+(b.$$counter++).toString(36);var e="angular.callbacks."+c,f=a(c);d[e]=b[c]=f;return e},wasCalled:function(a){return d[a].called},getResponse:function(a){return d[a].data},removeCallback:function(a){delete b[d[a].id];delete d[a]}}}},uh=/^([^?#]*)(\?([^#]*))?(#(.*))?$/,Rg={http:80,https:443,ftp:21},kb=F("$location"),Sg=/^\s*[\\/]{2,}/,vh={$$absUrl:"",$$html5:!1,
$$replace:!1,$$compose:function(){for(var a=this.$$path,b=this.$$hash,d=Ee(this.$$search),b=b?"#"+ic(b):"",a=a.split("/"),c=a.length;c--;)a[c]=ic(a[c].replace(/%2F/g,"/"));this.$$url=a.join("/")+(d?"?"+d:"")+b;this.$$absUrl=this.$$normalizeUrl(this.$$url);this.$$urlUpdatedByLocation=!0},absUrl:Mb("$$absUrl"),url:function(a){if(z(a))return this.$$url;var b=uh.exec(a);(b[1]||""===a)&&this.path(decodeURIComponent(b[1]));(b[2]||b[1]||""===a)&&this.search(b[3]||"");this.hash(b[5]||"");return this},protocol:Mb("$$protocol"),
host:Mb("$$host"),port:Mb("$$port"),path:Hd("$$path",function(a){a=null!==a?a.toString():"";return"/"===a.charAt(0)?a:"/"+a}),search:function(a,b){switch(arguments.length){case 0:return this.$$search;case 1:if(C(a)||W(a))a=a.toString(),this.$$search=hc(a);else if(D(a))a=Ia(a,{}),r(a,function(b,c){null==b&&delete a[c]}),this.$$search=a;else throw kb("isrcharg");break;default:z(b)||null===b?delete this.$$search[a]:this.$$search[a]=b}this.$$compose();return this},hash:Hd("$$hash",function(a){return null!==
a?a.toString():""}),replace:function(){this.$$replace=!0;return this}};r([Gd,Ac,zc],function(a){a.prototype=Object.create(vh);a.prototype.state=function(b){if(!arguments.length)return this.$$state;if(a!==zc||!this.$$html5)throw kb("nostate");this.$$state=z(b)?null:b;this.$$urlUpdatedByLocation=!0;return this}});var Ya=F("$parse"),Wg={}.constructor.prototype.valueOf,Vb=T();r("+ - * / % === !== == != < > <= >= && || ! = |".split(" "),function(a){Vb[a]=!0});var wh={n:"\n",f:"\f",r:"\r",t:"\t",v:"\v",
"'":"'",'"':'"'},Ob=function(a){this.options=a};Ob.prototype={constructor:Ob,lex:function(a){this.text=a;this.index=0;for(this.tokens=[];this.index<this.text.length;)if(a=this.text.charAt(this.index),'"'===a||"'"===a)this.readString(a);else if(this.isNumber(a)||"."===a&&this.isNumber(this.peek()))this.readNumber();else if(this.isIdentifierStart(this.peekMultichar()))this.readIdent();else if(this.is(a,"(){}[].,;:?"))this.tokens.push({index:this.index,text:a}),this.index++;else if(this.isWhitespace(a))this.index++;
else{var b=a+this.peek(),d=b+this.peek(2),c=Vb[b],e=Vb[d];Vb[a]||c||e?(a=e?d:c?b:a,this.tokens.push({index:this.index,text:a,operator:!0}),this.index+=a.length):this.throwError("Unexpected next character ",this.index,this.index+1)}return this.tokens},is:function(a,b){return-1!==b.indexOf(a)},peek:function(a){a=a||1;return this.index+a<this.text.length?this.text.charAt(this.index+a):!1},isNumber:function(a){return"0"<=a&&"9">=a&&"string"===typeof a},isWhitespace:function(a){return" "===a||"\r"===a||
"\t"===a||"\n"===a||"\v"===a||"\u00a0"===a},isIdentifierStart:function(a){return this.options.isIdentifierStart?this.options.isIdentifierStart(a,this.codePointAt(a)):this.isValidIdentifierStart(a)},isValidIdentifierStart:function(a){return"a"<=a&&"z">=a||"A"<=a&&"Z">=a||"_"===a||"$"===a},isIdentifierContinue:function(a){return this.options.isIdentifierContinue?this.options.isIdentifierContinue(a,this.codePointAt(a)):this.isValidIdentifierContinue(a)},isValidIdentifierContinue:function(a,b){return this.isValidIdentifierStart(a,
b)||this.isNumber(a)},codePointAt:function(a){return 1===a.length?a.charCodeAt(0):(a.charCodeAt(0)<<10)+a.charCodeAt(1)-56613888},peekMultichar:function(){var a=this.text.charAt(this.index),b=this.peek();if(!b)return a;var d=a.charCodeAt(0),c=b.charCodeAt(0);return 55296<=d&&56319>=d&&56320<=c&&57343>=c?a+b:a},isExpOperator:function(a){return"-"===a||"+"===a||this.isNumber(a)},throwError:function(a,b,d){d=d||this.index;b=w(b)?"s "+b+"-"+this.index+" ["+this.text.substring(b,d)+"]":" "+d;throw Ya("lexerr",
a,b,this.text);},readNumber:function(){for(var a="",b=this.index;this.index<this.text.length;){var d=K(this.text.charAt(this.index));if("."===d||this.isNumber(d))a+=d;else{var c=this.peek();if("e"===d&&this.isExpOperator(c))a+=d;else if(this.isExpOperator(d)&&c&&this.isNumber(c)&&"e"===a.charAt(a.length-1))a+=d;else if(!this.isExpOperator(d)||c&&this.isNumber(c)||"e"!==a.charAt(a.length-1))break;else this.throwError("Invalid exponent")}this.index++}this.tokens.push({index:b,text:a,constant:!0,value:Number(a)})},
readIdent:function(){var a=this.index;for(this.index+=this.peekMultichar().length;this.index<this.text.length;){var b=this.peekMultichar();if(!this.isIdentifierContinue(b))break;this.index+=b.length}this.tokens.push({index:a,text:this.text.slice(a,this.index),identifier:!0})},readString:function(a){var b=this.index;this.index++;for(var d="",c=a,e=!1;this.index<this.text.length;){var f=this.text.charAt(this.index),c=c+f;if(e)"u"===f?(e=this.text.substring(this.index+1,this.index+5),e.match(/[\da-f]{4}/i)||
this.throwError("Invalid unicode escape [\\u"+e+"]"),this.index+=4,d+=String.fromCharCode(parseInt(e,16))):d+=wh[f]||f,e=!1;else if("\\"===f)e=!0;else{if(f===a){this.index++;this.tokens.push({index:b,text:c,constant:!0,value:d});return}d+=f}this.index++}this.throwError("Unterminated quote",b)}};var q=function(a,b){this.lexer=a;this.options=b};q.Program="Program";q.ExpressionStatement="ExpressionStatement";q.AssignmentExpression="AssignmentExpression";q.ConditionalExpression="ConditionalExpression";
q.LogicalExpression="LogicalExpression";q.BinaryExpression="BinaryExpression";q.UnaryExpression="UnaryExpression";q.CallExpression="CallExpression";q.MemberExpression="MemberExpression";q.Identifier="Identifier";q.Literal="Literal";q.ArrayExpression="ArrayExpression";q.Property="Property";q.ObjectExpression="ObjectExpression";q.ThisExpression="ThisExpression";q.LocalsExpression="LocalsExpression";q.NGValueParameter="NGValueParameter";q.prototype={ast:function(a){this.text=a;this.tokens=this.lexer.lex(a);
a=this.program();0!==this.tokens.length&&this.throwError("is an unexpected token",this.tokens[0]);return a},program:function(){for(var a=[];;)if(0<this.tokens.length&&!this.peek("}",")",";","]")&&a.push(this.expressionStatement()),!this.expect(";"))return{type:q.Program,body:a}},expressionStatement:function(){return{type:q.ExpressionStatement,expression:this.filterChain()}},filterChain:function(){for(var a=this.expression();this.expect("|");)a=this.filter(a);return a},expression:function(){return this.assignment()},
assignment:function(){var a=this.ternary();if(this.expect("=")){if(!Ld(a))throw Ya("lval");a={type:q.AssignmentExpression,left:a,right:this.assignment(),operator:"="}}return a},ternary:function(){var a=this.logicalOR(),b,d;return this.expect("?")&&(b=this.expression(),this.consume(":"))?(d=this.expression(),{type:q.ConditionalExpression,test:a,alternate:b,consequent:d}):a},logicalOR:function(){for(var a=this.logicalAND();this.expect("||");)a={type:q.LogicalExpression,operator:"||",left:a,right:this.logicalAND()};
return a},logicalAND:function(){for(var a=this.equality();this.expect("&&");)a={type:q.LogicalExpression,operator:"&&",left:a,right:this.equality()};return a},equality:function(){for(var a=this.relational(),b;b=this.expect("==","!=","===","!==");)a={type:q.BinaryExpression,operator:b.text,left:a,right:this.relational()};return a},relational:function(){for(var a=this.additive(),b;b=this.expect("<",">","<=",">=");)a={type:q.BinaryExpression,operator:b.text,left:a,right:this.additive()};return a},additive:function(){for(var a=
this.multiplicative(),b;b=this.expect("+","-");)a={type:q.BinaryExpression,operator:b.text,left:a,right:this.multiplicative()};return a},multiplicative:function(){for(var a=this.unary(),b;b=this.expect("*","/","%");)a={type:q.BinaryExpression,operator:b.text,left:a,right:this.unary()};return a},unary:function(){var a;return(a=this.expect("+","-","!"))?{type:q.UnaryExpression,operator:a.text,prefix:!0,argument:this.unary()}:this.primary()},primary:function(){var a;this.expect("(")?(a=this.filterChain(),
this.consume(")")):this.expect("[")?a=this.arrayDeclaration():this.expect("{")?a=this.object():this.selfReferential.hasOwnProperty(this.peek().text)?a=Ia(this.selfReferential[this.consume().text]):this.options.literals.hasOwnProperty(this.peek().text)?a={type:q.Literal,value:this.options.literals[this.consume().text]}:this.peek().identifier?a=this.identifier():this.peek().constant?a=this.constant():this.throwError("not a primary expression",this.peek());for(var b;b=this.expect("(","[",".");)"("===
b.text?(a={type:q.CallExpression,callee:a,arguments:this.parseArguments()},this.consume(")")):"["===b.text?(a={type:q.MemberExpression,object:a,property:this.expression(),computed:!0},this.consume("]")):"."===b.text?a={type:q.MemberExpression,object:a,property:this.identifier(),computed:!1}:this.throwError("IMPOSSIBLE");return a},filter:function(a){a=[a];for(var b={type:q.CallExpression,callee:this.identifier(),arguments:a,filter:!0};this.expect(":");)a.push(this.expression());return b},parseArguments:function(){var a=
[];if(")"!==this.peekToken().text){do a.push(this.filterChain());while(this.expect(","))}return a},identifier:function(){var a=this.consume();a.identifier||this.throwError("is not a valid identifier",a);return{type:q.Identifier,name:a.text}},constant:function(){return{type:q.Literal,value:this.consume().value}},arrayDeclaration:function(){var a=[];if("]"!==this.peekToken().text){do{if(this.peek("]"))break;a.push(this.expression())}while(this.expect(","))}this.consume("]");return{type:q.ArrayExpression,
elements:a}},object:function(){var a=[],b;if("}"!==this.peekToken().text){do{if(this.peek("}"))break;b={type:q.Property,kind:"init"};this.peek().constant?(b.key=this.constant(),b.computed=!1,this.consume(":"),b.value=this.expression()):this.peek().identifier?(b.key=this.identifier(),b.computed=!1,this.peek(":")?(this.consume(":"),b.value=this.expression()):b.value=b.key):this.peek("[")?(this.consume("["),b.key=this.expression(),this.consume("]"),b.computed=!0,this.consume(":"),b.value=this.expression()):
this.throwError("invalid key",this.peek());a.push(b)}while(this.expect(","))}this.consume("}");return{type:q.ObjectExpression,properties:a}},throwError:function(a,b){throw Ya("syntax",b.text,a,b.index+1,this.text,this.text.substring(b.index));},consume:function(a){if(0===this.tokens.length)throw Ya("ueoe",this.text);var b=this.expect(a);b||this.throwError("is unexpected, expecting ["+a+"]",this.peek());return b},peekToken:function(){if(0===this.tokens.length)throw Ya("ueoe",this.text);return this.tokens[0]},
peek:function(a,b,d,c){return this.peekAhead(0,a,b,d,c)},peekAhead:function(a,b,d,c,e){if(this.tokens.length>a){a=this.tokens[a];var f=a.text;if(f===b||f===d||f===c||f===e||!(b||d||c||e))return a}return!1},expect:function(a,b,d,c){return(a=this.peek(a,b,d,c))?(this.tokens.shift(),a):!1},selfReferential:{"this":{type:q.ThisExpression},$locals:{type:q.LocalsExpression}}};var Jd=2;Nd.prototype={compile:function(a){var b=this;this.state={nextId:0,filters:{},fn:{vars:[],body:[],own:{}},assign:{vars:[],
body:[],own:{}},inputs:[]};Y(a,b.$filter);var d="",c;this.stage="assign";if(c=Md(a))this.state.computing="assign",d=this.nextId(),this.recurse(c,d),this.return_(d),d="fn.assign="+this.generateFunction("assign","s,v,l");c=Kd(a.body);b.stage="inputs";r(c,function(a,c){var d="fn"+c;b.state[d]={vars:[],body:[],own:{}};b.state.computing=d;var k=b.nextId();b.recurse(a,k);b.return_(k);b.state.inputs.push({name:d,isPure:a.isPure});a.watchId=c});this.state.computing="fn";this.stage="main";this.recurse(a);
a='"'+this.USE+" "+this.STRICT+'";\n'+this.filterPrefix()+"var fn="+this.generateFunction("fn","s,l,a,i")+d+this.watchFns()+"return fn;";a=(new Function("$filter","getStringValue","ifDefined","plus",a))(this.$filter,Tg,Ug,Id);this.state=this.stage=void 0;return a},USE:"use",STRICT:"strict",watchFns:function(){var a=[],b=this.state.inputs,d=this;r(b,function(b){a.push("var "+b.name+"="+d.generateFunction(b.name,"s"));b.isPure&&a.push(b.name,".isPure="+JSON.stringify(b.isPure)+";")});b.length&&a.push("fn.inputs=["+
b.map(function(a){return a.name}).join(",")+"];");return a.join("")},generateFunction:function(a,b){return"function("+b+"){"+this.varsPrefix(a)+this.body(a)+"};"},filterPrefix:function(){var a=[],b=this;r(this.state.filters,function(d,c){a.push(d+"=$filter("+b.escape(c)+")")});return a.length?"var "+a.join(",")+";":""},varsPrefix:function(a){return this.state[a].vars.length?"var "+this.state[a].vars.join(",")+";":""},body:function(a){return this.state[a].body.join("")},recurse:function(a,b,d,c,e,
f){var g,k,h=this,l,m,p;c=c||E;if(!f&&w(a.watchId))b=b||this.nextId(),this.if_("i",this.lazyAssign(b,this.computedMember("i",a.watchId)),this.lazyRecurse(a,b,d,c,e,!0));else switch(a.type){case q.Program:r(a.body,function(b,c){h.recurse(b.expression,void 0,void 0,function(a){k=a});c!==a.body.length-1?h.current().body.push(k,";"):h.return_(k)});break;case q.Literal:m=this.escape(a.value);this.assign(b,m);c(b||m);break;case q.UnaryExpression:this.recurse(a.argument,void 0,void 0,function(a){k=a});m=
a.operator+"("+this.ifDefined(k,0)+")";this.assign(b,m);c(m);break;case q.BinaryExpression:this.recurse(a.left,void 0,void 0,function(a){g=a});this.recurse(a.right,void 0,void 0,function(a){k=a});m="+"===a.operator?this.plus(g,k):"-"===a.operator?this.ifDefined(g,0)+a.operator+this.ifDefined(k,0):"("+g+")"+a.operator+"("+k+")";this.assign(b,m);c(m);break;case q.LogicalExpression:b=b||this.nextId();h.recurse(a.left,b);h.if_("&&"===a.operator?b:h.not(b),h.lazyRecurse(a.right,b));c(b);break;case q.ConditionalExpression:b=
b||this.nextId();h.recurse(a.test,b);h.if_(b,h.lazyRecurse(a.alternate,b),h.lazyRecurse(a.consequent,b));c(b);break;case q.Identifier:b=b||this.nextId();d&&(d.context="inputs"===h.stage?"s":this.assign(this.nextId(),this.getHasOwnProperty("l",a.name)+"?l:s"),d.computed=!1,d.name=a.name);h.if_("inputs"===h.stage||h.not(h.getHasOwnProperty("l",a.name)),function(){h.if_("inputs"===h.stage||"s",function(){e&&1!==e&&h.if_(h.isNull(h.nonComputedMember("s",a.name)),h.lazyAssign(h.nonComputedMember("s",a.name),
"{}"));h.assign(b,h.nonComputedMember("s",a.name))})},b&&h.lazyAssign(b,h.nonComputedMember("l",a.name)));c(b);break;case q.MemberExpression:g=d&&(d.context=this.nextId())||this.nextId();b=b||this.nextId();h.recurse(a.object,g,void 0,function(){h.if_(h.notNull(g),function(){a.computed?(k=h.nextId(),h.recurse(a.property,k),h.getStringValue(k),e&&1!==e&&h.if_(h.not(h.computedMember(g,k)),h.lazyAssign(h.computedMember(g,k),"{}")),m=h.computedMember(g,k),h.assign(b,m),d&&(d.computed=!0,d.name=k)):(e&&
1!==e&&h.if_(h.isNull(h.nonComputedMember(g,a.property.name)),h.lazyAssign(h.nonComputedMember(g,a.property.name),"{}")),m=h.nonComputedMember(g,a.property.name),h.assign(b,m),d&&(d.computed=!1,d.name=a.property.name))},function(){h.assign(b,"undefined")});c(b)},!!e);break;case q.CallExpression:b=b||this.nextId();a.filter?(k=h.filter(a.callee.name),l=[],r(a.arguments,function(a){var b=h.nextId();h.recurse(a,b);l.push(b)}),m=k+"("+l.join(",")+")",h.assign(b,m),c(b)):(k=h.nextId(),g={},l=[],h.recurse(a.callee,
k,g,function(){h.if_(h.notNull(k),function(){r(a.arguments,function(b){h.recurse(b,a.constant?void 0:h.nextId(),void 0,function(a){l.push(a)})});m=g.name?h.member(g.context,g.name,g.computed)+"("+l.join(",")+")":k+"("+l.join(",")+")";h.assign(b,m)},function(){h.assign(b,"undefined")});c(b)}));break;case q.AssignmentExpression:k=this.nextId();g={};this.recurse(a.left,void 0,g,function(){h.if_(h.notNull(g.context),function(){h.recurse(a.right,k);m=h.member(g.context,g.name,g.computed)+a.operator+k;
h.assign(b,m);c(b||m)})},1);break;case q.ArrayExpression:l=[];r(a.elements,function(b){h.recurse(b,a.constant?void 0:h.nextId(),void 0,function(a){l.push(a)})});m="["+l.join(",")+"]";this.assign(b,m);c(b||m);break;case q.ObjectExpression:l=[];p=!1;r(a.properties,function(a){a.computed&&(p=!0)});p?(b=b||this.nextId(),this.assign(b,"{}"),r(a.properties,function(a){a.computed?(g=h.nextId(),h.recurse(a.key,g)):g=a.key.type===q.Identifier?a.key.name:""+a.key.value;k=h.nextId();h.recurse(a.value,k);h.assign(h.member(b,
g,a.computed),k)})):(r(a.properties,function(b){h.recurse(b.value,a.constant?void 0:h.nextId(),void 0,function(a){l.push(h.escape(b.key.type===q.Identifier?b.key.name:""+b.key.value)+":"+a)})}),m="{"+l.join(",")+"}",this.assign(b,m));c(b||m);break;case q.ThisExpression:this.assign(b,"s");c(b||"s");break;case q.LocalsExpression:this.assign(b,"l");c(b||"l");break;case q.NGValueParameter:this.assign(b,"v"),c(b||"v")}},getHasOwnProperty:function(a,b){var d=a+"."+b,c=this.current().own;c.hasOwnProperty(d)||
(c[d]=this.nextId(!1,a+"&&("+this.escape(b)+" in "+a+")"));return c[d]},assign:function(a,b){if(a)return this.current().body.push(a,"=",b,";"),a},filter:function(a){this.state.filters.hasOwnProperty(a)||(this.state.filters[a]=this.nextId(!0));return this.state.filters[a]},ifDefined:function(a,b){return"ifDefined("+a+","+this.escape(b)+")"},plus:function(a,b){return"plus("+a+","+b+")"},return_:function(a){this.current().body.push("return ",a,";")},if_:function(a,b,d){if(!0===a)b();else{var c=this.current().body;
c.push("if(",a,"){");b();c.push("}");d&&(c.push("else{"),d(),c.push("}"))}},not:function(a){return"!("+a+")"},isNull:function(a){return a+"==null"},notNull:function(a){return a+"!=null"},nonComputedMember:function(a,b){var d=/[^$_a-zA-Z0-9]/g;return/^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(b)?a+"."+b:a+'["'+b.replace(d,this.stringEscapeFn)+'"]'},computedMember:function(a,b){return a+"["+b+"]"},member:function(a,b,d){return d?this.computedMember(a,b):this.nonComputedMember(a,b)},getStringValue:function(a){this.assign(a,
"getStringValue("+a+")")},lazyRecurse:function(a,b,d,c,e,f){var g=this;return function(){g.recurse(a,b,d,c,e,f)}},lazyAssign:function(a,b){var d=this;return function(){d.assign(a,b)}},stringEscapeRegex:/[^ a-zA-Z0-9]/g,stringEscapeFn:function(a){return"\\u"+("0000"+a.charCodeAt(0).toString(16)).slice(-4)},escape:function(a){if(C(a))return"'"+a.replace(this.stringEscapeRegex,this.stringEscapeFn)+"'";if(W(a))return a.toString();if(!0===a)return"true";if(!1===a)return"false";if(null===a)return"null";
if("undefined"===typeof a)return"undefined";throw Ya("esc");},nextId:function(a,b){var d="v"+this.state.nextId++;a||this.current().vars.push(d+(b?"="+b:""));return d},current:function(){return this.state[this.state.computing]}};Od.prototype={compile:function(a){var b=this;Y(a,b.$filter);var d,c;if(d=Md(a))c=this.recurse(d);d=Kd(a.body);var e;d&&(e=[],r(d,function(a,c){var d=b.recurse(a);d.isPure=a.isPure;a.input=d;e.push(d);a.watchId=c}));var f=[];r(a.body,function(a){f.push(b.recurse(a.expression))});
a=0===a.body.length?E:1===a.body.length?f[0]:function(a,b){var c;r(f,function(d){c=d(a,b)});return c};c&&(a.assign=function(a,b,d){return c(a,d,b)});e&&(a.inputs=e);return a},recurse:function(a,b,d){var c,e,f=this,g;if(a.input)return this.inputs(a.input,a.watchId);switch(a.type){case q.Literal:return this.value(a.value,b);case q.UnaryExpression:return e=this.recurse(a.argument),this["unary"+a.operator](e,b);case q.BinaryExpression:return c=this.recurse(a.left),e=this.recurse(a.right),this["binary"+
a.operator](c,e,b);case q.LogicalExpression:return c=this.recurse(a.left),e=this.recurse(a.right),this["binary"+a.operator](c,e,b);case q.ConditionalExpression:return this["ternary?:"](this.recurse(a.test),this.recurse(a.alternate),this.recurse(a.consequent),b);case q.Identifier:return f.identifier(a.name,b,d);case q.MemberExpression:return c=this.recurse(a.object,!1,!!d),a.computed||(e=a.property.name),a.computed&&(e=this.recurse(a.property)),a.computed?this.computedMember(c,e,b,d):this.nonComputedMember(c,
e,b,d);case q.CallExpression:return g=[],r(a.arguments,function(a){g.push(f.recurse(a))}),a.filter&&(e=this.$filter(a.callee.name)),a.filter||(e=this.recurse(a.callee,!0)),a.filter?function(a,c,d,f){for(var p=[],n=0;n<g.length;++n)p.push(g[n](a,c,d,f));a=e.apply(void 0,p,f);return b?{context:void 0,name:void 0,value:a}:a}:function(a,c,d,f){var p=e(a,c,d,f),n;if(null!=p.value){n=[];for(var s=0;s<g.length;++s)n.push(g[s](a,c,d,f));n=p.value.apply(p.context,n)}return b?{value:n}:n};case q.AssignmentExpression:return c=
this.recurse(a.left,!0,1),e=this.recurse(a.right),function(a,d,f,g){var p=c(a,d,f,g);a=e(a,d,f,g);p.context[p.name]=a;return b?{value:a}:a};case q.ArrayExpression:return g=[],r(a.elements,function(a){g.push(f.recurse(a))}),function(a,c,d,e){for(var f=[],n=0;n<g.length;++n)f.push(g[n](a,c,d,e));return b?{value:f}:f};case q.ObjectExpression:return g=[],r(a.properties,function(a){a.computed?g.push({key:f.recurse(a.key),computed:!0,value:f.recurse(a.value)}):g.push({key:a.key.type===q.Identifier?a.key.name:
""+a.key.value,computed:!1,value:f.recurse(a.value)})}),function(a,c,d,e){for(var f={},n=0;n<g.length;++n)g[n].computed?f[g[n].key(a,c,d,e)]=g[n].value(a,c,d,e):f[g[n].key]=g[n].value(a,c,d,e);return b?{value:f}:f};case q.ThisExpression:return function(a){return b?{value:a}:a};case q.LocalsExpression:return function(a,c){return b?{value:c}:c};case q.NGValueParameter:return function(a,c,d){return b?{value:d}:d}}},"unary+":function(a,b){return function(d,c,e,f){d=a(d,c,e,f);d=w(d)?+d:0;return b?{value:d}:
d}},"unary-":function(a,b){return function(d,c,e,f){d=a(d,c,e,f);d=w(d)?-d:-0;return b?{value:d}:d}},"unary!":function(a,b){return function(d,c,e,f){d=!a(d,c,e,f);return b?{value:d}:d}},"binary+":function(a,b,d){return function(c,e,f,g){var k=a(c,e,f,g);c=b(c,e,f,g);k=Id(k,c);return d?{value:k}:k}},"binary-":function(a,b,d){return function(c,e,f,g){var k=a(c,e,f,g);c=b(c,e,f,g);k=(w(k)?k:0)-(w(c)?c:0);return d?{value:k}:k}},"binary*":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)*b(c,e,f,g);
return d?{value:c}:c}},"binary/":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)/b(c,e,f,g);return d?{value:c}:c}},"binary%":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)%b(c,e,f,g);return d?{value:c}:c}},"binary===":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)===b(c,e,f,g);return d?{value:c}:c}},"binary!==":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)!==b(c,e,f,g);return d?{value:c}:c}},"binary==":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)==b(c,e,f,g);return d?
{value:c}:c}},"binary!=":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)!=b(c,e,f,g);return d?{value:c}:c}},"binary<":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)<b(c,e,f,g);return d?{value:c}:c}},"binary>":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)>b(c,e,f,g);return d?{value:c}:c}},"binary<=":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)<=b(c,e,f,g);return d?{value:c}:c}},"binary>=":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)>=b(c,e,f,g);return d?{value:c}:
c}},"binary&&":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)&&b(c,e,f,g);return d?{value:c}:c}},"binary||":function(a,b,d){return function(c,e,f,g){c=a(c,e,f,g)||b(c,e,f,g);return d?{value:c}:c}},"ternary?:":function(a,b,d,c){return function(e,f,g,k){e=a(e,f,g,k)?b(e,f,g,k):d(e,f,g,k);return c?{value:e}:e}},value:function(a,b){return function(){return b?{context:void 0,name:void 0,value:a}:a}},identifier:function(a,b,d){return function(c,e,f,g){c=e&&a in e?e:c;d&&1!==d&&c&&null==c[a]&&(c[a]=
{});e=c?c[a]:void 0;return b?{context:c,name:a,value:e}:e}},computedMember:function(a,b,d,c){return function(e,f,g,k){var h=a(e,f,g,k),l,m;null!=h&&(l=b(e,f,g,k),l+="",c&&1!==c&&h&&!h[l]&&(h[l]={}),m=h[l]);return d?{context:h,name:l,value:m}:m}},nonComputedMember:function(a,b,d,c){return function(e,f,g,k){e=a(e,f,g,k);c&&1!==c&&e&&null==e[b]&&(e[b]={});f=null!=e?e[b]:void 0;return d?{context:e,name:b,value:f}:f}},inputs:function(a,b){return function(d,c,e,f){return f?f[b]:a(d,c,e)}}};Nb.prototype=
{constructor:Nb,parse:function(a){a=this.getAst(a);var b=this.astCompiler.compile(a.ast),d=a.ast;b.literal=0===d.body.length||1===d.body.length&&(d.body[0].expression.type===q.Literal||d.body[0].expression.type===q.ArrayExpression||d.body[0].expression.type===q.ObjectExpression);b.constant=a.ast.constant;b.oneTime=a.oneTime;return b},getAst:function(a){var b=!1;a=a.trim();":"===a.charAt(0)&&":"===a.charAt(1)&&(b=!0,a=a.substring(2));return{ast:this.ast.ast(a),oneTime:b}}};var Ea=F("$sce"),V={HTML:"html",
CSS:"css",MEDIA_URL:"mediaUrl",URL:"url",RESOURCE_URL:"resourceUrl",JS:"js"},Dc=/_([a-z])/g,Zg=F("$templateRequest"),$g=F("$timeout"),$=A.document.createElement("a"),Sd=ga(A.location.href),Na;$.href="https://[::1]";var ah="[::1]"===$.hostname;Td.$inject=["$document"];fd.$inject=["$provide"];var $d=22,Zd=".",Fc="0";Ud.$inject=["$locale"];Wd.$inject=["$locale"];var lh={yyyy:ea("FullYear",4,0,!1,!0),yy:ea("FullYear",2,0,!0,!0),y:ea("FullYear",1,0,!1,!0),MMMM:lb("Month"),MMM:lb("Month",!0),MM:ea("Month",
2,1),M:ea("Month",1,1),LLLL:lb("Month",!1,!0),dd:ea("Date",2),d:ea("Date",1),HH:ea("Hours",2),H:ea("Hours",1),hh:ea("Hours",2,-12),h:ea("Hours",1,-12),mm:ea("Minutes",2),m:ea("Minutes",1),ss:ea("Seconds",2),s:ea("Seconds",1),sss:ea("Milliseconds",3),EEEE:lb("Day"),EEE:lb("Day",!0),a:function(a,b){return 12>a.getHours()?b.AMPMS[0]:b.AMPMS[1]},Z:function(a,b,d){a=-1*d;return a=(0<=a?"+":"")+(Pb(Math[0<a?"floor":"ceil"](a/60),2)+Pb(Math.abs(a%60),2))},ww:be(2),w:be(1),G:Gc,GG:Gc,GGG:Gc,GGGG:function(a,
b){return 0>=a.getFullYear()?b.ERANAMES[0]:b.ERANAMES[1]}},kh=/((?:[^yMLdHhmsaZEwG']+)|(?:'(?:[^']|'')*')|(?:E+|y+|M+|L+|d+|H+|h+|m+|s+|a|Z|G+|w+))([\s\S]*)/,jh=/^-?\d+$/;Vd.$inject=["$locale"];var eh=ia(K),fh=ia(vb);Xd.$inject=["$parse"];var Ue=ia({restrict:"E",compile:function(a,b){if(!b.href&&!b.xlinkHref)return function(a,b){if("a"===b[0].nodeName.toLowerCase()){var e="[object SVGAnimatedString]"===la.call(b.prop("href"))?"xlink:href":"href";b.on("click",function(a){b.attr(e)||a.preventDefault()})}}}}),
wb={};r(Hb,function(a,b){function d(a,d,e){a.$watch(e[c],function(a){e.$set(b,!!a)})}if("multiple"!==a){var c=ya("ng-"+b),e=d;"checked"===a&&(e=function(a,b,e){e.ngModel!==e[c]&&d(a,b,e)});wb[c]=function(){return{restrict:"A",priority:100,link:e}}}});r(xd,function(a,b){wb[b]=function(){return{priority:100,link:function(a,c,e){if("ngPattern"===b&&"/"===e.ngPattern.charAt(0)&&(c=e.ngPattern.match(me))){e.$set("ngPattern",new RegExp(c[1],c[2]));return}a.$watch(e[b],function(a){e.$set(b,a)})}}}});r(["src",
"srcset","href"],function(a){var b=ya("ng-"+a);wb[b]=["$sce",function(d){return{priority:99,link:function(c,e,f){var g=a,k=a;"href"===a&&"[object SVGAnimatedString]"===la.call(e.prop("href"))&&(k="xlinkHref",f.$attr[k]="xlink:href",g=null);f.$set(b,d.getTrustedMediaUrl(f[b]));f.$observe(b,function(b){b?(f.$set(k,b),ra&&g&&e.prop(g,f[k])):"href"===a&&f.$set(k,null)})}}}]});var mb={$addControl:E,$getControls:ia([]),$$renameControl:function(a,b){a.$name=b},$removeControl:E,$setValidity:E,$setDirty:E,
$setPristine:E,$setSubmitted:E,$$setSubmitted:E};Qb.$inject=["$element","$attrs","$scope","$animate","$interpolate"];Qb.prototype={$rollbackViewValue:function(){r(this.$$controls,function(a){a.$rollbackViewValue()})},$commitViewValue:function(){r(this.$$controls,function(a){a.$commitViewValue()})},$addControl:function(a){Ja(a.$name,"input");this.$$controls.push(a);a.$name&&(this[a.$name]=a);a.$$parentForm=this},$getControls:function(){return ja(this.$$controls)},$$renameControl:function(a,b){var d=
a.$name;this[d]===a&&delete this[d];this[b]=a;a.$name=b},$removeControl:function(a){a.$name&&this[a.$name]===a&&delete this[a.$name];r(this.$pending,function(b,d){this.$setValidity(d,null,a)},this);r(this.$error,function(b,d){this.$setValidity(d,null,a)},this);r(this.$$success,function(b,d){this.$setValidity(d,null,a)},this);cb(this.$$controls,a);a.$$parentForm=mb},$setDirty:function(){this.$$animate.removeClass(this.$$element,Za);this.$$animate.addClass(this.$$element,Wb);this.$dirty=!0;this.$pristine=
!1;this.$$parentForm.$setDirty()},$setPristine:function(){this.$$animate.setClass(this.$$element,Za,Wb+" ng-submitted");this.$dirty=!1;this.$pristine=!0;this.$submitted=!1;r(this.$$controls,function(a){a.$setPristine()})},$setUntouched:function(){r(this.$$controls,function(a){a.$setUntouched()})},$setSubmitted:function(){for(var a=this;a.$$parentForm&&a.$$parentForm!==mb;)a=a.$$parentForm;a.$$setSubmitted()},$$setSubmitted:function(){this.$$animate.addClass(this.$$element,"ng-submitted");this.$submitted=
!0;r(this.$$controls,function(a){a.$$setSubmitted&&a.$$setSubmitted()})}};ee({clazz:Qb,set:function(a,b,d){var c=a[b];c?-1===c.indexOf(d)&&c.push(d):a[b]=[d]},unset:function(a,b,d){var c=a[b];c&&(cb(c,d),0===c.length&&delete a[b])}});var qe=function(a){return["$timeout","$parse",function(b,d){function c(a){return""===a?d('this[""]').assign:d(a).assign||E}return{name:"form",restrict:a?"EAC":"E",require:["form","^^?form"],controller:Qb,compile:function(d,f){d.addClass(Za).addClass(nb);var g=f.name?
"name":a&&f.ngForm?"ngForm":!1;return{pre:function(a,d,e,f){var p=f[0];if(!("action"in e)){var n=function(b){a.$apply(function(){p.$commitViewValue();p.$setSubmitted()});b.preventDefault()};d[0].addEventListener("submit",n);d.on("$destroy",function(){b(function(){d[0].removeEventListener("submit",n)},0,!1)})}(f[1]||p.$$parentForm).$addControl(p);var s=g?c(p.$name):E;g&&(s(a,p),e.$observe(g,function(b){p.$name!==b&&(s(a,void 0),p.$$parentForm.$$renameControl(p,b),s=c(p.$name),s(a,p))}));d.on("$destroy",
function(){p.$$parentForm.$removeControl(p);s(a,void 0);S(p,mb)})}}}}}]},Ve=qe(),gf=qe(!0),mh=/^\d{4,}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+(?:[+-][0-2]\d:[0-5]\d|Z)$/,xh=/^[a-z][a-z\d.+-]*:\/*(?:[^:@/]*(?::[^@]+)?@)?(?:[^\s:/?#]+|\[[a-f\d:]+])(?::\d+)?(?:\/[^?#]*)?(?:\?[^#]*)?(?:#.*)?$/i,yh=/^(?=.{1,254}$)(?=.{1,64}@)[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+(\.[-!#$%&'*+/0-9=?A-Z^_`a-z{|}~]+)*@[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?(\.[A-Za-z0-9]([A-Za-z0-9-]{0,61}[A-Za-z0-9])?)*$/,nh=/^\s*(-|\+)?(\d+|(\d*(\.\d*)))([eE][+-]?\d+)?\s*$/,
re=/^(\d{4,})-(\d{2})-(\d{2})$/,se=/^(\d{4,})-(\d\d)-(\d\d)T(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,Oc=/^(\d{4,})-W(\d\d)$/,te=/^(\d{4,})-(\d\d)$/,ue=/^(\d\d):(\d\d)(?::(\d\d)(\.\d{1,3})?)?$/,ge=T();r(["date","datetime-local","month","time","week"],function(a){ge[a]=!0});var ve={text:function(a,b,d,c,e,f){Sa(a,b,d,c,e,f);Ic(c)},date:ob("date",re,Rb(re,["yyyy","MM","dd"]),"yyyy-MM-dd"),"datetime-local":ob("datetimelocal",se,Rb(se,"yyyy MM dd HH mm ss sss".split(" ")),"yyyy-MM-ddTHH:mm:ss.sss"),time:ob("time",
ue,Rb(ue,["HH","mm","ss","sss"]),"HH:mm:ss.sss"),week:ob("week",Oc,function(a,b){if(ha(a))return a;if(C(a)){Oc.lastIndex=0;var d=Oc.exec(a);if(d){var c=+d[1],e=+d[2],f=d=0,g=0,k=0,h=ae(c),e=7*(e-1);b&&(d=b.getHours(),f=b.getMinutes(),g=b.getSeconds(),k=b.getMilliseconds());return new Date(c,0,h.getDate()+e,d,f,g,k)}}return NaN},"yyyy-Www"),month:ob("month",te,Rb(te,["yyyy","MM"]),"yyyy-MM"),number:function(a,b,d,c,e,f,g,k){Jc(a,b,d,c,"number");he(c);Sa(a,b,d,c,e,f);var h;if(w(d.min)||d.ngMin){var l=
d.min||k(d.ngMin)(a);h=na(l);c.$validators.min=function(a,b){return c.$isEmpty(b)||z(h)||b>=h};d.$observe("min",function(a){a!==l&&(h=na(a),l=a,c.$validate())})}if(w(d.max)||d.ngMax){var m=d.max||k(d.ngMax)(a),p=na(m);c.$validators.max=function(a,b){return c.$isEmpty(b)||z(p)||b<=p};d.$observe("max",function(a){a!==m&&(p=na(a),m=a,c.$validate())})}if(w(d.step)||d.ngStep){var n=d.step||k(d.ngStep)(a),s=na(n);c.$validators.step=function(a,b){return c.$isEmpty(b)||z(s)||ie(b,h||0,s)};d.$observe("step",
function(a){a!==n&&(s=na(a),n=a,c.$validate())})}},url:function(a,b,d,c,e,f){Sa(a,b,d,c,e,f);Ic(c);c.$validators.url=function(a,b){var d=a||b;return c.$isEmpty(d)||xh.test(d)}},email:function(a,b,d,c,e,f){Sa(a,b,d,c,e,f);Ic(c);c.$validators.email=function(a,b){var d=a||b;return c.$isEmpty(d)||yh.test(d)}},radio:function(a,b,d,c){var e=!d.ngTrim||"false"!==ca(d.ngTrim);z(d.name)&&b.attr("name",++qb);b.on("change",function(a){var g;b[0].checked&&(g=d.value,e&&(g=ca(g)),c.$setViewValue(g,a&&a.type))});
c.$render=function(){var a=d.value;e&&(a=ca(a));b[0].checked=a===c.$viewValue};d.$observe("value",c.$render)},range:function(a,b,d,c,e,f){function g(a,c){b.attr(a,d[a]);var e=d[a];d.$observe(a,function(a){a!==e&&(e=a,c(a))})}function k(a){p=na(a);X(c.$modelValue)||(m?(a=b.val(),p>a&&(a=p,b.val(a)),c.$setViewValue(a)):c.$validate())}function h(a){n=na(a);X(c.$modelValue)||(m?(a=b.val(),n<a&&(b.val(n),a=n<p?p:n),c.$setViewValue(a)):c.$validate())}function l(a){s=na(a);X(c.$modelValue)||(m?c.$viewValue!==
b.val()&&c.$setViewValue(b.val()):c.$validate())}Jc(a,b,d,c,"range");he(c);Sa(a,b,d,c,e,f);var m=c.$$hasNativeValidators&&"range"===b[0].type,p=m?0:void 0,n=m?100:void 0,s=m?1:void 0,r=b[0].validity;a=w(d.min);e=w(d.max);f=w(d.step);var q=c.$render;c.$render=m&&w(r.rangeUnderflow)&&w(r.rangeOverflow)?function(){q();c.$setViewValue(b.val())}:q;a&&(p=na(d.min),c.$validators.min=m?function(){return!0}:function(a,b){return c.$isEmpty(b)||z(p)||b>=p},g("min",k));e&&(n=na(d.max),c.$validators.max=m?function(){return!0}:
function(a,b){return c.$isEmpty(b)||z(n)||b<=n},g("max",h));f&&(s=na(d.step),c.$validators.step=m?function(){return!r.stepMismatch}:function(a,b){return c.$isEmpty(b)||z(s)||ie(b,p||0,s)},g("step",l))},checkbox:function(a,b,d,c,e,f,g,k){var h=je(k,a,"ngTrueValue",d.ngTrueValue,!0),l=je(k,a,"ngFalseValue",d.ngFalseValue,!1);b.on("change",function(a){c.$setViewValue(b[0].checked,a&&a.type)});c.$render=function(){b[0].checked=c.$viewValue};c.$isEmpty=function(a){return!1===a};c.$formatters.push(function(a){return wa(a,
h)});c.$parsers.push(function(a){return a?h:l})},hidden:E,button:E,submit:E,reset:E,file:E},$c=["$browser","$sniffer","$filter","$parse",function(a,b,d,c){return{restrict:"E",require:["?ngModel"],link:{pre:function(e,f,g,k){k[0]&&(ve[K(g.type)]||ve.text)(e,f,g,k[0],b,a,d,c)}}}}],Df=function(){var a={configurable:!0,enumerable:!1,get:function(){return this.getAttribute("value")||""},set:function(a){this.setAttribute("value",a)}};return{restrict:"E",priority:200,compile:function(b,d){if("hidden"===
K(d.type))return{pre:function(b,d,f,g){b=d[0];b.parentNode&&b.parentNode.insertBefore(b,b.nextSibling);Object.defineProperty&&Object.defineProperty(b,"value",a)}}}}},zh=/^(true|false|\d+)$/,Af=function(){function a(a,d,c){var e=w(c)?c:9===ra?"":null;a.prop("value",e);d.$set("value",c)}return{restrict:"A",priority:100,compile:function(b,d){return zh.test(d.ngValue)?function(b,d,f){b=b.$eval(f.ngValue);a(d,f,b)}:function(b,d,f){b.$watch(f.ngValue,function(b){a(d,f,b)})}}}},Ze=["$compile",function(a){return{restrict:"AC",
compile:function(b){a.$$addBindingClass(b);return function(b,c,e){a.$$addBindingInfo(c,e.ngBind);c=c[0];b.$watch(e.ngBind,function(a){c.textContent=jc(a)})}}}}],af=["$interpolate","$compile",function(a,b){return{compile:function(d){b.$$addBindingClass(d);return function(c,d,f){c=a(d.attr(f.$attr.ngBindTemplate));b.$$addBindingInfo(d,c.expressions);d=d[0];f.$observe("ngBindTemplate",function(a){d.textContent=z(a)?"":a})}}}}],$e=["$sce","$parse","$compile",function(a,b,d){return{restrict:"A",compile:function(c,
e){var f=b(e.ngBindHtml),g=b(e.ngBindHtml,function(b){return a.valueOf(b)});d.$$addBindingClass(c);return function(b,c,e){d.$$addBindingInfo(c,e.ngBindHtml);b.$watch(g,function(){var d=f(b);c.html(a.getTrustedHtml(d)||"")})}}}}],zf=ia({restrict:"A",require:"ngModel",link:function(a,b,d,c){c.$viewChangeListeners.push(function(){a.$eval(d.ngChange)})}}),bf=Lc("",!0),df=Lc("Odd",0),cf=Lc("Even",1),ef=Ra({compile:function(a,b){b.$set("ngCloak",void 0);a.removeClass("ng-cloak")}}),ff=[function(){return{restrict:"A",
scope:!0,controller:"@",priority:500}}],ed={},Ah={blur:!0,focus:!0};r("click dblclick mousedown mouseup mouseover mouseout mousemove mouseenter mouseleave keydown keyup keypress submit focus blur copy cut paste".split(" "),function(a){var b=ya("ng-"+a);ed[b]=["$parse","$rootScope","$exceptionHandler",function(d,c,e){return ud(d,c,e,b,a,Ah[a])}]});var jf=["$animate","$compile",function(a,b){return{multiElement:!0,transclude:"element",priority:600,terminal:!0,restrict:"A",$$tlb:!0,link:function(d,c,
e,f,g){var k,h,l;d.$watch(e.ngIf,function(d){d?h||g(function(d,f){h=f;d[d.length++]=b.$$createComment("end ngIf",e.ngIf);k={clone:d};a.enter(d,c.parent(),c)}):(l&&(l.remove(),l=null),h&&(h.$destroy(),h=null),k&&(l=ub(k.clone),a.leave(l).done(function(a){!1!==a&&(l=null)}),k=null))})}}}],kf=["$templateRequest","$anchorScroll","$animate",function(a,b,d){return{restrict:"ECA",priority:400,terminal:!0,transclude:"element",controller:da.noop,compile:function(c,e){var f=e.ngInclude||e.src,g=e.onload||"",
k=e.autoscroll;return function(c,e,m,p,n){var r=0,q,t,x,v=function(){t&&(t.remove(),t=null);q&&(q.$destroy(),q=null);x&&(d.leave(x).done(function(a){!1!==a&&(t=null)}),t=x,x=null)};c.$watch(f,function(f){var m=function(a){!1===a||!w(k)||k&&!c.$eval(k)||b()},t=++r;f?(a(f,!0).then(function(a){if(!c.$$destroyed&&t===r){var b=c.$new();p.template=a;a=n(b,function(a){v();d.enter(a,null,e).done(m)});q=b;x=a;q.$emit("$includeContentLoaded",f);c.$eval(g)}},function(){c.$$destroyed||t!==r||(v(),c.$emit("$includeContentError",
f))}),c.$emit("$includeContentRequested",f)):(v(),p.template=null)})}}}}],Cf=["$compile",function(a){return{restrict:"ECA",priority:-400,require:"ngInclude",link:function(b,d,c,e){la.call(d[0]).match(/SVG/)?(d.empty(),a(gd(e.template,A.document).childNodes)(b,function(a){d.append(a)},{futureParentElement:d})):(d.html(e.template),a(d.contents())(b))}}}],lf=Ra({priority:450,compile:function(){return{pre:function(a,b,d){a.$eval(d.ngInit)}}}}),yf=function(){return{restrict:"A",priority:100,require:"ngModel",
link:function(a,b,d,c){var e=d.ngList||", ",f="false"!==d.ngTrim,g=f?ca(e):e;c.$parsers.push(function(a){if(!z(a)){var b=[];a&&r(a.split(g),function(a){a&&b.push(f?ca(a):a)});return b}});c.$formatters.push(function(a){if(H(a))return a.join(e)});c.$isEmpty=function(a){return!a||!a.length}}}},nb="ng-valid",de="ng-invalid",Za="ng-pristine",Wb="ng-dirty",pb=F("ngModel");Sb.$inject="$scope $exceptionHandler $attrs $element $parse $animate $timeout $q $interpolate".split(" ");Sb.prototype={$$initGetterSetters:function(){if(this.$options.getOption("getterSetter")){var a=
this.$$parse(this.$$attr.ngModel+"()"),b=this.$$parse(this.$$attr.ngModel+"($$$p)");this.$$ngModelGet=function(b){var c=this.$$parsedNgModel(b);B(c)&&(c=a(b));return c};this.$$ngModelSet=function(a,c){B(this.$$parsedNgModel(a))?b(a,{$$$p:c}):this.$$parsedNgModelAssign(a,c)}}else if(!this.$$parsedNgModel.assign)throw pb("nonassign",this.$$attr.ngModel,Ba(this.$$element));},$render:E,$isEmpty:function(a){return z(a)||""===a||null===a||a!==a},$$updateEmptyClasses:function(a){this.$isEmpty(a)?(this.$$animate.removeClass(this.$$element,
"ng-not-empty"),this.$$animate.addClass(this.$$element,"ng-empty")):(this.$$animate.removeClass(this.$$element,"ng-empty"),this.$$animate.addClass(this.$$element,"ng-not-empty"))},$setPristine:function(){this.$dirty=!1;this.$pristine=!0;this.$$animate.removeClass(this.$$element,Wb);this.$$animate.addClass(this.$$element,Za)},$setDirty:function(){this.$dirty=!0;this.$pristine=!1;this.$$animate.removeClass(this.$$element,Za);this.$$animate.addClass(this.$$element,Wb);this.$$parentForm.$setDirty()},
$setUntouched:function(){this.$touched=!1;this.$untouched=!0;this.$$animate.setClass(this.$$element,"ng-untouched","ng-touched")},$setTouched:function(){this.$touched=!0;this.$untouched=!1;this.$$animate.setClass(this.$$element,"ng-touched","ng-untouched")},$rollbackViewValue:function(){this.$$timeout.cancel(this.$$pendingDebounce);this.$viewValue=this.$$lastCommittedViewValue;this.$render()},$validate:function(){if(!X(this.$modelValue)){var a=this.$$lastCommittedViewValue,b=this.$$rawModelValue,
d=this.$valid,c=this.$modelValue,e=this.$options.getOption("allowInvalid"),f=this;this.$$runValidators(b,a,function(a){e||d===a||(f.$modelValue=a?b:void 0,f.$modelValue!==c&&f.$$writeModelToScope())})}},$$runValidators:function(a,b,d){function c(){var c=!0;r(h.$validators,function(d,e){var g=Boolean(d(a,b));c=c&&g;f(e,g)});return c?!0:(r(h.$asyncValidators,function(a,b){f(b,null)}),!1)}function e(){var c=[],d=!0;r(h.$asyncValidators,function(e,g){var h=e(a,b);if(!h||!B(h.then))throw pb("nopromise",
h);f(g,void 0);c.push(h.then(function(){f(g,!0)},function(){d=!1;f(g,!1)}))});c.length?h.$$q.all(c).then(function(){g(d)},E):g(!0)}function f(a,b){k===h.$$currentValidationRunId&&h.$setValidity(a,b)}function g(a){k===h.$$currentValidationRunId&&d(a)}this.$$currentValidationRunId++;var k=this.$$currentValidationRunId,h=this;(function(){var a=h.$$parserName;if(z(h.$$parserValid))f(a,null);else return h.$$parserValid||(r(h.$validators,function(a,b){f(b,null)}),r(h.$asyncValidators,function(a,b){f(b,
null)})),f(a,h.$$parserValid),h.$$parserValid;return!0})()?c()?e():g(!1):g(!1)},$commitViewValue:function(){var a=this.$viewValue;this.$$timeout.cancel(this.$$pendingDebounce);if(this.$$lastCommittedViewValue!==a||""===a&&this.$$hasNativeValidators)this.$$updateEmptyClasses(a),this.$$lastCommittedViewValue=a,this.$pristine&&this.$setDirty(),this.$$parseAndValidate()},$$parseAndValidate:function(){var a=this.$$lastCommittedViewValue,b=this;this.$$parserValid=z(a)?void 0:!0;this.$setValidity(this.$$parserName,
null);this.$$parserName="parse";if(this.$$parserValid)for(var d=0;d<this.$parsers.length;d++)if(a=this.$parsers[d](a),z(a)){this.$$parserValid=!1;break}X(this.$modelValue)&&(this.$modelValue=this.$$ngModelGet(this.$$scope));var c=this.$modelValue,e=this.$options.getOption("allowInvalid");this.$$rawModelValue=a;e&&(this.$modelValue=a,b.$modelValue!==c&&b.$$writeModelToScope());this.$$runValidators(a,this.$$lastCommittedViewValue,function(d){e||(b.$modelValue=d?a:void 0,b.$modelValue!==c&&b.$$writeModelToScope())})},
$$writeModelToScope:function(){this.$$ngModelSet(this.$$scope,this.$modelValue);r(this.$viewChangeListeners,function(a){try{a()}catch(b){this.$$exceptionHandler(b)}},this)},$setViewValue:function(a,b){this.$viewValue=a;this.$options.getOption("updateOnDefault")&&this.$$debounceViewValueCommit(b)},$$debounceViewValueCommit:function(a){var b=this.$options.getOption("debounce");W(b[a])?b=b[a]:W(b["default"])&&-1===this.$options.getOption("updateOn").indexOf(a)?b=b["default"]:W(b["*"])&&(b=b["*"]);this.$$timeout.cancel(this.$$pendingDebounce);
var d=this;0<b?this.$$pendingDebounce=this.$$timeout(function(){d.$commitViewValue()},b):this.$$rootScope.$$phase?this.$commitViewValue():this.$$scope.$apply(function(){d.$commitViewValue()})},$overrideModelOptions:function(a){this.$options=this.$options.createChild(a);this.$$setUpdateOnEvents()},$processModelValue:function(){var a=this.$$format();this.$viewValue!==a&&(this.$$updateEmptyClasses(a),this.$viewValue=this.$$lastCommittedViewValue=a,this.$render(),this.$$runValidators(this.$modelValue,
this.$viewValue,E))},$$format:function(){for(var a=this.$formatters,b=a.length,d=this.$modelValue;b--;)d=a[b](d);return d},$$setModelValue:function(a){this.$modelValue=this.$$rawModelValue=a;this.$$parserValid=void 0;this.$processModelValue()},$$setUpdateOnEvents:function(){this.$$updateEvents&&this.$$element.off(this.$$updateEvents,this.$$updateEventHandler);if(this.$$updateEvents=this.$options.getOption("updateOn"))this.$$element.on(this.$$updateEvents,this.$$updateEventHandler)},$$updateEventHandler:function(a){this.$$debounceViewValueCommit(a&&
a.type)}};ee({clazz:Sb,set:function(a,b){a[b]=!0},unset:function(a,b){delete a[b]}});var xf=["$rootScope",function(a){return{restrict:"A",require:["ngModel","^?form","^?ngModelOptions"],controller:Sb,priority:1,compile:function(b){b.addClass(Za).addClass("ng-untouched").addClass(nb);return{pre:function(a,b,e,f){var g=f[0];b=f[1]||g.$$parentForm;if(f=f[2])g.$options=f.$options;g.$$initGetterSetters();b.$addControl(g);e.$observe("name",function(a){g.$name!==a&&g.$$parentForm.$$renameControl(g,a)});
a.$on("$destroy",function(){g.$$parentForm.$removeControl(g)})},post:function(b,c,e,f){function g(){k.$setTouched()}var k=f[0];k.$$setUpdateOnEvents();c.on("blur",function(){k.$touched||(a.$$phase?b.$evalAsync(g):b.$apply(g))})}}}}}],Tb,Bh=/(\s+|^)default(\s+|$)/;Mc.prototype={getOption:function(a){return this.$$options[a]},createChild:function(a){var b=!1;a=S({},a);r(a,function(d,c){"$inherit"===d?"*"===c?b=!0:(a[c]=this.$$options[c],"updateOn"===c&&(a.updateOnDefault=this.$$options.updateOnDefault)):
"updateOn"===c&&(a.updateOnDefault=!1,a[c]=ca(d.replace(Bh,function(){a.updateOnDefault=!0;return" "})))},this);b&&(delete a["*"],ke(a,this.$$options));ke(a,Tb.$$options);return new Mc(a)}};Tb=new Mc({updateOn:"",updateOnDefault:!0,debounce:0,getterSetter:!1,allowInvalid:!1,timezone:null});var Bf=function(){function a(a,d){this.$$attrs=a;this.$$scope=d}a.$inject=["$attrs","$scope"];a.prototype={$onInit:function(){var a=this.parentCtrl?this.parentCtrl.$options:Tb,d=this.$$scope.$eval(this.$$attrs.ngModelOptions);
this.$options=a.createChild(d)}};return{restrict:"A",priority:10,require:{parentCtrl:"?^^ngModelOptions"},bindToController:!0,controller:a}},mf=Ra({terminal:!0,priority:1E3}),Ch=F("ngOptions"),Dh=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+group\s+by\s+([\s\S]+?))?(?:\s+disable\s+when\s+([\s\S]+?))?\s+for\s+(?:([$\w][$\w]*)|(?:\(\s*([$\w][$\w]*)\s*,\s*([$\w][$\w]*)\s*\)))\s+in\s+([\s\S]+?)(?:\s+track\s+by\s+([\s\S]+?))?$/,vf=["$compile","$document","$parse",function(a,b,d){function c(a,b,c){function e(a,
b,c,d,f){this.selectValue=a;this.viewValue=b;this.label=c;this.group=d;this.disabled=f}function f(a){var b;if(!r&&Aa(a))b=a;else{b=[];for(var c in a)a.hasOwnProperty(c)&&"$"!==c.charAt(0)&&b.push(c)}return b}var p=a.match(Dh);if(!p)throw Ch("iexp",a,Ba(b));var n=p[5]||p[7],r=p[6];a=/ as /.test(p[0])&&p[1];var q=p[9];b=d(p[2]?p[1]:n);var t=a&&d(a)||b,w=q&&d(q),v=q?function(a,b){return w(c,b)}:function(a){return La(a)},x=function(a,b){return v(a,B(a,b))},z=d(p[2]||p[1]),y=d(p[3]||""),J=d(p[4]||""),
I=d(p[8]),A={},B=r?function(a,b){A[r]=b;A[n]=a;return A}:function(a){A[n]=a;return A};return{trackBy:q,getTrackByValue:x,getWatchables:d(I,function(a){var b=[];a=a||[];for(var d=f(a),e=d.length,g=0;g<e;g++){var k=a===d?g:d[g],l=a[k],k=B(l,k),l=v(l,k);b.push(l);if(p[2]||p[1])l=z(c,k),b.push(l);p[4]&&(k=J(c,k),b.push(k))}return b}),getOptions:function(){for(var a=[],b={},d=I(c)||[],g=f(d),k=g.length,n=0;n<k;n++){var p=d===g?n:g[n],r=B(d[p],p),s=t(c,r),p=v(s,r),w=z(c,r),A=y(c,r),r=J(c,r),s=new e(p,s,
w,A,r);a.push(s);b[p]=s}return{items:a,selectValueMap:b,getOptionFromViewValue:function(a){return b[x(a)]},getViewValueFromOption:function(a){return q?Ia(a.viewValue):a.viewValue}}}}}var e=A.document.createElement("option"),f=A.document.createElement("optgroup");return{restrict:"A",terminal:!0,require:["select","ngModel"],link:{pre:function(a,b,c,d){d[0].registerOption=E},post:function(d,k,h,l){function m(a){var b=(a=v.getOptionFromViewValue(a))&&a.element;b&&!b.selected&&(b.selected=!0);return a}
function p(a,b){a.element=b;b.disabled=a.disabled;a.label!==b.label&&(b.label=a.label,b.textContent=a.label);b.value=a.selectValue}var n=l[0],q=l[1],z=h.multiple;l=0;for(var t=k.children(),A=t.length;l<A;l++)if(""===t[l].value){n.hasEmptyOption=!0;n.emptyOption=t.eq(l);break}k.empty();l=!!n.emptyOption;x(e.cloneNode(!1)).val("?");var v,B=c(h.ngOptions,k,d),C=b[0].createDocumentFragment();n.generateUnknownOptionValue=function(a){return"?"};z?(n.writeValue=function(a){if(v){var b=a&&a.map(m)||[];v.items.forEach(function(a){a.element.selected&&
-1===Array.prototype.indexOf.call(b,a)&&(a.element.selected=!1)})}},n.readValue=function(){var a=k.val()||[],b=[];r(a,function(a){(a=v.selectValueMap[a])&&!a.disabled&&b.push(v.getViewValueFromOption(a))});return b},B.trackBy&&d.$watchCollection(function(){if(H(q.$viewValue))return q.$viewValue.map(function(a){return B.getTrackByValue(a)})},function(){q.$render()})):(n.writeValue=function(a){if(v){var b=k[0].options[k[0].selectedIndex],c=v.getOptionFromViewValue(a);b&&b.removeAttribute("selected");
c?(k[0].value!==c.selectValue&&(n.removeUnknownOption(),k[0].value=c.selectValue,c.element.selected=!0),c.element.setAttribute("selected","selected")):n.selectUnknownOrEmptyOption(a)}},n.readValue=function(){var a=v.selectValueMap[k.val()];return a&&!a.disabled?(n.unselectEmptyOption(),n.removeUnknownOption(),v.getViewValueFromOption(a)):null},B.trackBy&&d.$watch(function(){return B.getTrackByValue(q.$viewValue)},function(){q.$render()}));l&&(a(n.emptyOption)(d),k.prepend(n.emptyOption),8===n.emptyOption[0].nodeType?
(n.hasEmptyOption=!1,n.registerOption=function(a,b){""===b.val()&&(n.hasEmptyOption=!0,n.emptyOption=b,n.emptyOption.removeClass("ng-scope"),q.$render(),b.on("$destroy",function(){var a=n.$isEmptyOptionSelected();n.hasEmptyOption=!1;n.emptyOption=void 0;a&&q.$render()}))}):n.emptyOption.removeClass("ng-scope"));d.$watchCollection(B.getWatchables,function(){var a=v&&n.readValue();if(v)for(var b=v.items.length-1;0<=b;b--){var c=v.items[b];w(c.group)?Gb(c.element.parentNode):Gb(c.element)}v=B.getOptions();
var d={};v.items.forEach(function(a){var b;if(w(a.group)){b=d[a.group];b||(b=f.cloneNode(!1),C.appendChild(b),b.label=null===a.group?"null":a.group,d[a.group]=b);var c=e.cloneNode(!1);b.appendChild(c);p(a,c)}else b=e.cloneNode(!1),C.appendChild(b),p(a,b)});k[0].appendChild(C);q.$render();q.$isEmpty(a)||(b=n.readValue(),(B.trackBy||z?wa(a,b):a===b)||(q.$setViewValue(b),q.$render()))})}}}}],nf=["$locale","$interpolate","$log",function(a,b,d){var c=/{}/g,e=/^when(Minus)?(.+)$/;return{link:function(f,
g,k){function h(a){g.text(a||"")}var l=k.count,m=k.$attr.when&&g.attr(k.$attr.when),p=k.offset||0,n=f.$eval(m)||{},q={},w=b.startSymbol(),t=b.endSymbol(),x=w+l+"-"+p+t,v=da.noop,A;r(k,function(a,b){var c=e.exec(b);c&&(c=(c[1]?"-":"")+K(c[2]),n[c]=g.attr(k.$attr[b]))});r(n,function(a,d){q[d]=b(a.replace(c,x))});f.$watch(l,function(b){var c=parseFloat(b),e=X(c);e||c in n||(c=a.pluralCat(c-p));c===A||e&&X(A)||(v(),e=q[c],z(e)?(null!=b&&d.debug("ngPluralize: no rule defined for '"+c+"' in "+m),v=E,h()):
v=f.$watch(e,h),A=c)})}}}],we=F("ngRef"),of=["$parse",function(a){return{priority:-1,restrict:"A",compile:function(b,d){var c=ya(oa(b)),e=a(d.ngRef),f=e.assign||function(){throw we("nonassign",d.ngRef);};return function(a,b,h){var l;if(h.hasOwnProperty("ngRefRead"))if("$element"===h.ngRefRead)l=b;else{if(l=b.data("$"+h.ngRefRead+"Controller"),!l)throw we("noctrl",h.ngRefRead,d.ngRef);}else l=b.data("$"+c+"Controller");l=l||b;f(a,l);b.on("$destroy",function(){e(a)===l&&f(a,null)})}}}}],pf=["$parse",
"$animate","$compile",function(a,b,d){var c=F("ngRepeat"),e=function(a,b,c,d,e,f,g){a[c]=d;e&&(a[e]=f);a.$index=b;a.$first=0===b;a.$last=b===g-1;a.$middle=!(a.$first||a.$last);a.$odd=!(a.$even=0===(b&1))},f=function(a,b,c){return La(c)},g=function(a,b){return b};return{restrict:"A",multiElement:!0,transclude:"element",priority:1E3,terminal:!0,$$tlb:!0,compile:function(k,h){var l=h.ngRepeat,m=d.$$createComment("end ngRepeat",l),p=l.match(/^\s*([\s\S]+?)\s+in\s+([\s\S]+?)(?:\s+as\s+([\s\S]+?))?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);
if(!p)throw c("iexp",l);var n=p[1],q=p[2],w=p[3],t=p[4],p=n.match(/^(?:(\s*[$\w]+)|\(\s*([$\w]+)\s*,\s*([$\w]+)\s*\))$/);if(!p)throw c("iidexp",n);var x=p[3]||p[1],v=p[2];if(w&&(!/^[$a-zA-Z_][$a-zA-Z0-9_]*$/.test(w)||/^(null|undefined|this|\$index|\$first|\$middle|\$last|\$even|\$odd|\$parent|\$root|\$id)$/.test(w)))throw c("badident",w);var A;if(t){var z={$id:La},y=a(t);A=function(a,b,c,d){v&&(z[v]=b);z[x]=c;z.$index=d;return y(a,z)}}return function(a,d,h,k,n){var p=T();a.$watchCollection(q,function(h){var k,
q,t=d[0],s,y=T(),B,C,E,D,H,F,K;w&&(a[w]=h);if(Aa(h))H=h,q=A||f;else for(K in q=A||g,H=[],h)va.call(h,K)&&"$"!==K.charAt(0)&&H.push(K);B=H.length;K=Array(B);for(k=0;k<B;k++)if(C=h===H?k:H[k],E=h[C],D=q(a,C,E,k),p[D])F=p[D],delete p[D],y[D]=F,K[k]=F;else{if(y[D])throw r(K,function(a){a&&a.scope&&(p[a.id]=a)}),c("dupes",l,D,E);K[k]={id:D,scope:void 0,clone:void 0};y[D]=!0}z&&(z[x]=void 0);for(s in p){F=p[s];D=ub(F.clone);b.leave(D);if(D[0].parentNode)for(k=0,q=D.length;k<q;k++)D[k].$$NG_REMOVED=!0;F.scope.$destroy()}for(k=
0;k<B;k++)if(C=h===H?k:H[k],E=h[C],F=K[k],F.scope){s=t;do s=s.nextSibling;while(s&&s.$$NG_REMOVED);F.clone[0]!==s&&b.move(ub(F.clone),null,t);t=F.clone[F.clone.length-1];e(F.scope,k,x,E,v,C,B)}else n(function(a,c){F.scope=c;var d=m.cloneNode(!1);a[a.length++]=d;b.enter(a,null,t);t=d;F.clone=a;y[F.id]=F;e(F.scope,k,x,E,v,C,B)});p=y})}}}}],qf=["$animate",function(a){return{restrict:"A",multiElement:!0,link:function(b,d,c){b.$watch(c.ngShow,function(b){a[b?"removeClass":"addClass"](d,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],
hf=["$animate",function(a){return{restrict:"A",multiElement:!0,link:function(b,d,c){b.$watch(c.ngHide,function(b){a[b?"addClass":"removeClass"](d,"ng-hide",{tempClasses:"ng-hide-animate"})})}}}],rf=Ra(function(a,b,d){a.$watchCollection(d.ngStyle,function(a,d){d&&a!==d&&r(d,function(a,c){b.css(c,"")});a&&b.css(a)})}),sf=["$animate","$compile",function(a,b){return{require:"ngSwitch",controller:["$scope",function(){this.cases={}}],link:function(d,c,e,f){var g=[],k=[],h=[],l=[],m=function(a,b){return function(c){!1!==
c&&a.splice(b,1)}};d.$watch(e.ngSwitch||e.on,function(c){for(var d,e;h.length;)a.cancel(h.pop());d=0;for(e=l.length;d<e;++d){var q=ub(k[d].clone);l[d].$destroy();(h[d]=a.leave(q)).done(m(h,d))}k.length=0;l.length=0;(g=f.cases["!"+c]||f.cases["?"])&&r(g,function(c){c.transclude(function(d,e){l.push(e);var f=c.element;d[d.length++]=b.$$createComment("end ngSwitchWhen");k.push({clone:d});a.enter(d,f.parent(),f)})})})}}}],tf=Ra({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(a,
b,d,c,e){a=d.ngSwitchWhen.split(d.ngSwitchWhenSeparator).sort().filter(function(a,b,c){return c[b-1]!==a});r(a,function(a){c.cases["!"+a]=c.cases["!"+a]||[];c.cases["!"+a].push({transclude:e,element:b})})}}),uf=Ra({transclude:"element",priority:1200,require:"^ngSwitch",multiElement:!0,link:function(a,b,d,c,e){c.cases["?"]=c.cases["?"]||[];c.cases["?"].push({transclude:e,element:b})}}),Eh=F("ngTransclude"),wf=["$compile",function(a){return{restrict:"EAC",compile:function(b){var d=a(b.contents());b.empty();
return function(a,b,f,g,k){function h(){d(a,function(a){b.append(a)})}if(!k)throw Eh("orphan",Ba(b));f.ngTransclude===f.$attr.ngTransclude&&(f.ngTransclude="");f=f.ngTransclude||f.ngTranscludeSlot;k(function(a,c){var d;if(d=a.length)a:{d=0;for(var f=a.length;d<f;d++){var g=a[d];if(g.nodeType!==Pa||g.nodeValue.trim()){d=!0;break a}}d=void 0}d?b.append(a):(h(),c.$destroy())},null,f);f&&!k.isSlotFilled(f)&&h()}}}}],We=["$templateCache",function(a){return{restrict:"E",terminal:!0,compile:function(b,d){"text/ng-template"===
d.type&&a.put(d.id,b[0].text)}}}],Fh={$setViewValue:E,$render:E},Gh=["$element","$scope",function(a,b){function d(){g||(g=!0,b.$$postDigest(function(){g=!1;e.ngModelCtrl.$render()}))}function c(a){k||(k=!0,b.$$postDigest(function(){b.$$destroyed||(k=!1,e.ngModelCtrl.$setViewValue(e.readValue()),a&&e.ngModelCtrl.$render())}))}var e=this,f=new Ib;e.selectValueMap={};e.ngModelCtrl=Fh;e.multiple=!1;e.unknownOption=x(A.document.createElement("option"));e.hasEmptyOption=!1;e.emptyOption=void 0;e.renderUnknownOption=
function(b){b=e.generateUnknownOptionValue(b);e.unknownOption.val(b);a.prepend(e.unknownOption);Oa(e.unknownOption,!0);a.val(b)};e.updateUnknownOption=function(b){b=e.generateUnknownOptionValue(b);e.unknownOption.val(b);Oa(e.unknownOption,!0);a.val(b)};e.generateUnknownOptionValue=function(a){return"? "+La(a)+" ?"};e.removeUnknownOption=function(){e.unknownOption.parent()&&e.unknownOption.remove()};e.selectEmptyOption=function(){e.emptyOption&&(a.val(""),Oa(e.emptyOption,!0))};e.unselectEmptyOption=
function(){e.hasEmptyOption&&Oa(e.emptyOption,!1)};b.$on("$destroy",function(){e.renderUnknownOption=E});e.readValue=function(){var b=a.val(),b=b in e.selectValueMap?e.selectValueMap[b]:b;return e.hasOption(b)?b:null};e.writeValue=function(b){var c=a[0].options[a[0].selectedIndex];c&&Oa(x(c),!1);e.hasOption(b)?(e.removeUnknownOption(),c=La(b),a.val(c in e.selectValueMap?c:b),Oa(x(a[0].options[a[0].selectedIndex]),!0)):e.selectUnknownOrEmptyOption(b)};e.addOption=function(a,b){if(8!==b[0].nodeType){Ja(a,
'"option value"');""===a&&(e.hasEmptyOption=!0,e.emptyOption=b);var c=f.get(a)||0;f.set(a,c+1);d()}};e.removeOption=function(a){var b=f.get(a);b&&(1===b?(f.delete(a),""===a&&(e.hasEmptyOption=!1,e.emptyOption=void 0)):f.set(a,b-1))};e.hasOption=function(a){return!!f.get(a)};e.$hasEmptyOption=function(){return e.hasEmptyOption};e.$isUnknownOptionSelected=function(){return a[0].options[0]===e.unknownOption[0]};e.$isEmptyOptionSelected=function(){return e.hasEmptyOption&&a[0].options[a[0].selectedIndex]===
e.emptyOption[0]};e.selectUnknownOrEmptyOption=function(a){null==a&&e.emptyOption?(e.removeUnknownOption(),e.selectEmptyOption()):e.unknownOption.parent().length?e.updateUnknownOption(a):e.renderUnknownOption(a)};var g=!1,k=!1;e.registerOption=function(a,b,f,g,k){if(f.$attr.ngValue){var q,r;f.$observe("value",function(a){var d,f=b.prop("selected");w(r)&&(e.removeOption(q),delete e.selectValueMap[r],d=!0);r=La(a);q=a;e.selectValueMap[r]=a;e.addOption(a,b);b.attr("value",r);d&&f&&c()})}else g?f.$observe("value",
function(a){e.readValue();var d,f=b.prop("selected");w(q)&&(e.removeOption(q),d=!0);q=a;e.addOption(a,b);d&&f&&c()}):k?a.$watch(k,function(a,d){f.$set("value",a);var g=b.prop("selected");d!==a&&e.removeOption(d);e.addOption(a,b);d&&g&&c()}):e.addOption(f.value,b);f.$observe("disabled",function(a){if("true"===a||a&&b.prop("selected"))e.multiple?c(!0):(e.ngModelCtrl.$setViewValue(null),e.ngModelCtrl.$render())});b.on("$destroy",function(){var a=e.readValue(),b=f.value;e.removeOption(b);d();(e.multiple&&
a&&-1!==a.indexOf(b)||a===b)&&c(!0)})}}],Xe=function(){return{restrict:"E",require:["select","?ngModel"],controller:Gh,priority:1,link:{pre:function(a,b,d,c){var e=c[0],f=c[1];if(f){if(e.ngModelCtrl=f,b.on("change",function(){e.removeUnknownOption();a.$apply(function(){f.$setViewValue(e.readValue())})}),d.multiple){e.multiple=!0;e.readValue=function(){var a=[];r(b.find("option"),function(b){b.selected&&!b.disabled&&(b=b.value,a.push(b in e.selectValueMap?e.selectValueMap[b]:b))});return a};e.writeValue=
function(a){r(b.find("option"),function(b){var c=!!a&&(-1!==Array.prototype.indexOf.call(a,b.value)||-1!==Array.prototype.indexOf.call(a,e.selectValueMap[b.value]));c!==b.selected&&Oa(x(b),c)})};var g,k=NaN;a.$watch(function(){k!==f.$viewValue||wa(g,f.$viewValue)||(g=ja(f.$viewValue),f.$render());k=f.$viewValue});f.$isEmpty=function(a){return!a||0===a.length}}}else e.registerOption=E},post:function(a,b,d,c){var e=c[1];if(e){var f=c[0];e.$render=function(){f.writeValue(e.$viewValue)}}}}}},Ye=["$interpolate",
function(a){return{restrict:"E",priority:100,compile:function(b,d){var c,e;w(d.ngValue)||(w(d.value)?c=a(d.value,!0):(e=a(b.text(),!0))||d.$set("value",b.text()));return function(a,b,d){var h=b.parent();(h=h.data("$selectController")||h.parent().data("$selectController"))&&h.registerOption(a,b,d,c,e)}}}}],bd=["$parse",function(a){return{restrict:"A",require:"?ngModel",link:function(b,d,c,e){if(e){var f=c.hasOwnProperty("required")||a(c.ngRequired)(b);c.ngRequired||(c.required=!0);e.$validators.required=
function(a,b){return!f||!e.$isEmpty(b)};c.$observe("required",function(a){f!==a&&(f=a,e.$validate())})}}}}],ad=["$parse",function(a){return{restrict:"A",require:"?ngModel",compile:function(b,d){var c,e;d.ngPattern&&(c=d.ngPattern,e="/"===d.ngPattern.charAt(0)&&me.test(d.ngPattern)?function(){return d.ngPattern}:a(d.ngPattern));return function(a,b,d,h){if(h){var l=d.pattern;d.ngPattern?l=e(a):c=d.pattern;var m=le(l,c,b);d.$observe("pattern",function(a){var d=m;m=le(a,c,b);(d&&d.toString())!==(m&&m.toString())&&
h.$validate()});h.$validators.pattern=function(a,b){return h.$isEmpty(b)||z(m)||m.test(b)}}}}}}],dd=["$parse",function(a){return{restrict:"A",require:"?ngModel",link:function(b,d,c,e){if(e){var f=c.maxlength||a(c.ngMaxlength)(b),g=Ub(f);c.$observe("maxlength",function(a){f!==a&&(g=Ub(a),f=a,e.$validate())});e.$validators.maxlength=function(a,b){return 0>g||e.$isEmpty(b)||b.length<=g}}}}}],cd=["$parse",function(a){return{restrict:"A",require:"?ngModel",link:function(b,d,c,e){if(e){var f=c.minlength||
a(c.ngMinlength)(b),g=Ub(f)||-1;c.$observe("minlength",function(a){f!==a&&(g=Ub(a)||-1,f=a,e.$validate())});e.$validators.minlength=function(a,b){return e.$isEmpty(b)||b.length>=g}}}}}];A.angular.bootstrap?A.console&&console.log("WARNING: Tried to load AngularJS more than once."):(Le(),Re(da),da.module("ngLocale",[],["$provide",function(a){function b(a){a+="";var b=a.indexOf(".");return-1==b?0:a.length-b-1}a.value("$locale",{DATETIME_FORMATS:{AMPMS:["AM","PM"],DAY:"Sunday Monday Tuesday Wednesday Thursday Friday Saturday".split(" "),
ERANAMES:["Before Christ","Anno Domini"],ERAS:["BC","AD"],FIRSTDAYOFWEEK:6,MONTH:"January February March April May June July August September October November December".split(" "),SHORTDAY:"Sun Mon Tue Wed Thu Fri Sat".split(" "),SHORTMONTH:"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec".split(" "),STANDALONEMONTH:"January February March April May June July August September October November December".split(" "),WEEKENDRANGE:[5,6],fullDate:"EEEE, MMMM d, y",longDate:"MMMM d, y",medium:"MMM d, y h:mm:ss a",
mediumDate:"MMM d, y",mediumTime:"h:mm:ss a","short":"M/d/yy h:mm a",shortDate:"M/d/yy",shortTime:"h:mm a"},NUMBER_FORMATS:{CURRENCY_SYM:"$",DECIMAL_SEP:".",GROUP_SEP:",",PATTERNS:[{gSize:3,lgSize:3,maxFrac:3,minFrac:0,minInt:1,negPre:"-",negSuf:"",posPre:"",posSuf:""},{gSize:3,lgSize:3,maxFrac:2,minFrac:2,minInt:1,negPre:"-\u00a4",negSuf:"",posPre:"\u00a4",posSuf:""}]},id:"en-us",localeID:"en_US",pluralCat:function(a,c){var e=a|0,f=c;void 0===f&&(f=Math.min(b(a),3));Math.pow(10,f);return 1==e&&0==
f?"one":"other"}})}]),x(function(){Ge(A.document,Wc)}))})(window);!window.angular.$$csp().noInlineStyle&&window.angular.element(document.head).prepend(window.angular.element("<style>").text('@charset "UTF-8";[ng\\:cloak],[ng-cloak],[data-ng-cloak],[x-ng-cloak],.ng-cloak,.x-ng-cloak,.ng-hide:not(.ng-hide-animate){display:none !important;}ng\\:form{display:block;}.ng-animate-shim{visibility:hidden;}.ng-anchor{position:absolute;}'));
//# sourceMappingURL=angular.min.js.map

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2017-2024 Ellucian Company L.P. and its affiliates.
 ******************************************************************************/
 /*currency-directive, decimal directive and percentage-directive does the number formatting through $filter.
 $filter uses the locale specific angular locale files for formatting the number. This file loads the angular locale
 logics as per the browser locale that would be used by $filter. Also, this would do a fall back logic.
 say if we selectthe locale which we don't support fr-fr and it has to fallback to fr.
 */
var locale = $('meta[name=userLocale]').attr("content");
 locale = locale.replace('_','-');
 locale = locale.toLowerCase();
 if(!(locale=="en-us"|| locale=="en-au"|| locale=="en-gb"|| locale=="en-ie"|| locale=="en-in"|| locale=="en" || locale=="fr" || locale=="fr-ca" || locale=="pt" || locale=="pt-br" || locale=="es" || locale=="es-mx" || locale=="es-co" || locale=="es-pr" || locale=="es-cl" || locale=="es-cr" || locale=="es-do" || locale=="es-ec" || locale=="es-pe" || locale=="es-ve" || locale=="es-gt" || locale=="es-ar" || locale=="es-pa")){
    var countryLocale=locale.split("-");
    if(countryLocale[0]=="ar"){
        locale="en-us";
    } else
        locale=countryLocale[0];
 }
switch(locale)  {
    case "en-us" :
        angular.module("ngLocale", [], ["$provide", function($provide) {
            var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
            function getDecimals(n) {
                n = n + '';
                var i = n.indexOf('.');
                return (i == -1) ? 0 : n.length - i - 1;
            }

            function getVF(n, opt_precision) {
                var v = opt_precision;

                if (undefined === v) {
                    v = Math.min(getDecimals(n), 3);
                }

                var base = Math.pow(10, v);
                var f = ((n * base) | 0) % base;
                return {v: v, f: f};
            }

            $provide.value("$locale", {
                "DATETIME_FORMATS": {
                    "AMPMS": [
                        "AM",
                        "PM"
                    ],
                    "DAY": [
                        "Sunday",
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday"
                    ],
                    "ERANAMES": [
                        "Before Christ",
                        "Anno Domini"
                    ],
                    "ERAS": [
                        "BC",
                        "AD"
                    ],
                    "MONTH": [
                        "January",
                        "February",
                        "March",
                        "April",
                        "May",
                        "June",
                        "July",
                        "August",
                        "September",
                        "October",
                        "November",
                        "December"
                    ],
                    "SHORTDAY": [
                        "Sun",
                        "Mon",
                        "Tue",
                        "Wed",
                        "Thu",
                        "Fri",
                        "Sat"
                    ],
                    "SHORTMONTH": [
                        "Jan",
                        "Feb",
                        "Mar",
                        "Apr",
                        "May",
                        "Jun",
                        "Jul",
                        "Aug",
                        "Sep",
                        "Oct",
                        "Nov",
                        "Dec"
                    ],
                    "fullDate": "EEEE, MMMM d, y",
                    "longDate": "MMMM d, y",
                    "medium": "MMM d, y h:mm:ss a",
                    "mediumDate": "MMM d, y",
                    "mediumTime": "h:mm:ss a",
                    "short": "M/d/yy h:mm a",
                    "shortDate": "M/d/yy",
                    "shortTime": "h:mm a"
                },
                "NUMBER_FORMATS": {
                    "CURRENCY_SYM": "$",
                    "DECIMAL_SEP": ".",
                    "GROUP_SEP": ",",
                    "PATTERNS": [
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 3,
                            "minFrac": 0,
                            "minInt": 1,
                            "negPre": "-",
                            "negSuf": "",
                            "posPre": "",
                            "posSuf": ""
                        },
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 2,
                            "minFrac": 2,
                            "minInt": 1,
                            "negPre": "\u00a4-",
                            "negSuf": "",
                            "posPre": "\u00a4",
                            "posSuf": ""
                        }
                    ]
                },
                "id": "en-us",
                "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
            });
        }]);
    break;
    case "en-au" :
        angular.module("ngLocale", [], ["$provide", function($provide) {
            var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
            function getDecimals(n) {
                n = n + '';
                var i = n.indexOf('.');
                return (i == -1) ? 0 : n.length - i - 1;
            }

            function getVF(n, opt_precision) {
                var v = opt_precision;

                if (undefined === v) {
                    v = Math.min(getDecimals(n), 3);
                }

                var base = Math.pow(10, v);
                var f = ((n * base) | 0) % base;
                return {v: v, f: f};
            }

            $provide.value("$locale", {
                "DATETIME_FORMATS": {
                    "AMPMS": [
                        "am",
                        "pm"
                    ],
                    "DAY": [
                        "Sunday",
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday"
                    ],
                    "ERANAMES": [
                        "Before Christ",
                        "Anno Domini"
                    ],
                    "ERAS": [
                        "BC",
                        "AD"
                    ],
                    "MONTH": [
                        "January",
                        "February",
                        "March",
                        "April",
                        "May",
                        "June",
                        "July",
                        "August",
                        "September",
                        "October",
                        "November",
                        "December"
                    ],
                    "SHORTDAY": [
                        "Sun",
                        "Mon",
                        "Tue",
                        "Wed",
                        "Thu",
                        "Fri",
                        "Sat"
                    ],
                    "SHORTMONTH": [
                        "Jan",
                        "Feb",
                        "Mar",
                        "Apr",
                        "May",
                        "Jun",
                        "Jul",
                        "Aug",
                        "Sep",
                        "Oct",
                        "Nov",
                        "Dec"
                    ],
                    "fullDate": "EEEE, d MMMM y",
                    "longDate": "d MMMM y",
                    "medium": "d MMM y h:mm:ss a",
                    "mediumDate": "d MMM y",
                    "mediumTime": "h:mm:ss a",
                    "short": "d/MM/y h:mm a",
                    "shortDate": "d/MM/y",
                    "shortTime": "h:mm a"
                },
                "NUMBER_FORMATS": {
                    "CURRENCY_SYM": "$",
                    "DECIMAL_SEP": ".",
                    "GROUP_SEP": ",",
                    "PATTERNS": [
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 3,
                            "minFrac": 0,
                            "minInt": 1,
                            "negPre": "-",
                            "negSuf": "",
                            "posPre": "",
                            "posSuf": ""
                        },
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 2,
                            "minFrac": 2,
                            "minInt": 1,
                            "negPre": "\u00a4-",
                            "negSuf": "",
                            "posPre": "\u00a4",
                            "posSuf": ""
                        }
                    ]
                },
                "id": "en-au",
                "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
            });
        }]);
    break;
    case "en-gb" :
        angular.module("ngLocale", [], ["$provide", function($provide) {
            var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
            function getDecimals(n) {
                n = n + '';
                var i = n.indexOf('.');
                return (i == -1) ? 0 : n.length - i - 1;
            }

            function getVF(n, opt_precision) {
                var v = opt_precision;

                if (undefined === v) {
                    v = Math.min(getDecimals(n), 3);
                }

                var base = Math.pow(10, v);
                var f = ((n * base) | 0) % base;
                return {v: v, f: f};
            }

            $provide.value("$locale", {
                "DATETIME_FORMATS": {
                    "AMPMS": [
                        "am",
                        "pm"
                    ],
                    "DAY": [
                        "Sunday",
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday"
                    ],
                    "ERANAMES": [
                        "Before Christ",
                        "Anno Domini"
                    ],
                    "ERAS": [
                        "BC",
                        "AD"
                    ],
                    "MONTH": [
                        "January",
                        "February",
                        "March",
                        "April",
                        "May",
                        "June",
                        "July",
                        "August",
                        "September",
                        "October",
                        "November",
                        "December"
                    ],
                    "SHORTDAY": [
                        "Sun",
                        "Mon",
                        "Tue",
                        "Wed",
                        "Thu",
                        "Fri",
                        "Sat"
                    ],
                    "SHORTMONTH": [
                        "Jan",
                        "Feb",
                        "Mar",
                        "Apr",
                        "May",
                        "Jun",
                        "Jul",
                        "Aug",
                        "Sep",
                        "Oct",
                        "Nov",
                        "Dec"
                    ],
                    "fullDate": "EEEE, d MMMM y",
                    "longDate": "d MMMM y",
                    "medium": "d MMM y HH:mm:ss",
                    "mediumDate": "d MMM y",
                    "mediumTime": "HH:mm:ss",
                    "short": "dd/MM/y HH:mm",
                    "shortDate": "dd/MM/y",
                    "shortTime": "HH:mm"
                },
                "NUMBER_FORMATS": {
                    "CURRENCY_SYM": "\u00a3",
                    "DECIMAL_SEP": ".",
                    "GROUP_SEP": ",",
                    "PATTERNS": [
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 3,
                            "minFrac": 0,
                            "minInt": 1,
                            "negPre": "-",
                            "negSuf": "",
                            "posPre": "",
                            "posSuf": ""
                        },
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 2,
                            "minFrac": 2,
                            "minInt": 1,
                            "negPre": "\u00a4-",
                            "negSuf": "",
                            "posPre": "\u00a4",
                            "posSuf": ""
                        }
                    ]
                },
                "id": "en-gb",
                "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
            });
        }]);
        break;
    case "en-ie" :
        angular.module("ngLocale", [], ["$provide", function($provide) {
            var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
            function getDecimals(n) {
                n = n + '';
                var i = n.indexOf('.');
                return (i == -1) ? 0 : n.length - i - 1;
            }

            function getVF(n, opt_precision) {
                var v = opt_precision;

                if (undefined === v) {
                    v = Math.min(getDecimals(n), 3);
                }

                var base = Math.pow(10, v);
                var f = ((n * base) | 0) % base;
                return {v: v, f: f};
            }

            $provide.value("$locale", {
                "DATETIME_FORMATS": {
                    "AMPMS": [
                        "a.m.",
                        "p.m."
                    ],
                    "DAY": [
                        "Sunday",
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday"
                    ],
                    "ERANAMES": [
                        "Before Christ",
                        "Anno Domini"
                    ],
                    "ERAS": [
                        "BC",
                        "AD"
                    ],
                    "MONTH": [
                        "January",
                        "February",
                        "March",
                        "April",
                        "May",
                        "June",
                        "July",
                        "August",
                        "September",
                        "October",
                        "November",
                        "December"
                    ],
                    "SHORTDAY": [
                        "Sun",
                        "Mon",
                        "Tue",
                        "Wed",
                        "Thu",
                        "Fri",
                        "Sat"
                    ],
                    "SHORTMONTH": [
                        "Jan",
                        "Feb",
                        "Mar",
                        "Apr",
                        "May",
                        "Jun",
                        "Jul",
                        "Aug",
                        "Sep",
                        "Oct",
                        "Nov",
                        "Dec"
                    ],
                    "fullDate": "EEEE d MMMM y",
                    "longDate": "d MMMM y",
                    "medium": "d MMM y HH:mm:ss",
                    "mediumDate": "d MMM y",
                    "mediumTime": "HH:mm:ss",
                    "short": "dd/MM/y HH:mm",
                    "shortDate": "dd/MM/y",
                    "shortTime": "HH:mm"
                },
                "NUMBER_FORMATS": {
                    "CURRENCY_SYM": "\u20ac",
                    "DECIMAL_SEP": ".",
                    "GROUP_SEP": ",",
                    "PATTERNS": [
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 3,
                            "minFrac": 0,
                            "minInt": 1,
                            "negPre": "-",
                            "negSuf": "",
                            "posPre": "",
                            "posSuf": ""
                        },
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 2,
                            "minFrac": 2,
                            "minInt": 1,
                            "negPre": "\u00a4-",
                            "negSuf": "",
                            "posPre": "\u00a4",
                            "posSuf": ""
                        }
                    ]
                },
                "id": "en-ie",
                "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
            });
        }]);
        break;
    case "en-in" :
        angular.module("ngLocale", [], ["$provide", function($provide) {
            var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
            function getDecimals(n) {
                n = n + '';
                var i = n.indexOf('.');
                return (i == -1) ? 0 : n.length - i - 1;
            }

            function getVF(n, opt_precision) {
                var v = opt_precision;

                if (undefined === v) {
                    v = Math.min(getDecimals(n), 3);
                }

                var base = Math.pow(10, v);
                var f = ((n * base) | 0) % base;
                return {v: v, f: f};
            }

            $provide.value("$locale", {
                "DATETIME_FORMATS": {
                    "AMPMS": [
                        "am",
                        "pm"
                    ],
                    "DAY": [
                        "Sunday",
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday"
                    ],
                    "ERANAMES": [
                        "Before Christ",
                        "Anno Domini"
                    ],
                    "ERAS": [
                        "BC",
                        "AD"
                    ],
                    "MONTH": [
                        "January",
                        "February",
                        "March",
                        "April",
                        "May",
                        "June",
                        "July",
                        "August",
                        "September",
                        "October",
                        "November",
                        "December"
                    ],
                    "SHORTDAY": [
                        "Sun",
                        "Mon",
                        "Tue",
                        "Wed",
                        "Thu",
                        "Fri",
                        "Sat"
                    ],
                    "SHORTMONTH": [
                        "Jan",
                        "Feb",
                        "Mar",
                        "Apr",
                        "May",
                        "Jun",
                        "Jul",
                        "Aug",
                        "Sep",
                        "Oct",
                        "Nov",
                        "Dec"
                    ],
                    "fullDate": "EEEE d MMMM y",
                    "longDate": "d MMMM y",
                    "medium": "dd-MMM-y h:mm:ss a",
                    "mediumDate": "dd-MMM-y",
                    "mediumTime": "h:mm:ss a",
                    "short": "dd/MM/yy h:mm a",
                    "shortDate": "dd/MM/yy",
                    "shortTime": "h:mm a"
                },
                "NUMBER_FORMATS": {
                    "CURRENCY_SYM": "\u20b9",
                    "DECIMAL_SEP": ".",
                    "GROUP_SEP": ",",
                    "PATTERNS": [
                        {
                            "gSize": 2,
                            "lgSize": 3,
                            "maxFrac": 3,
                            "minFrac": 0,
                            "minInt": 1,
                            "negPre": "-",
                            "negSuf": "",
                            "posPre": "",
                            "posSuf": ""
                        },
                        {
                            "gSize": 2,
                            "lgSize": 3,
                            "maxFrac": 2,
                            "minFrac": 2,
                            "minInt": 1,
                            "negPre": "\u00a4\u00a0-",
                            "negSuf": "",
                            "posPre": "\u00a4\u00a0",
                            "posSuf": ""
                        }
                    ]
                },
                "id": "en-in",
                "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
            });
        }]);
        break;
    case "en" :
        angular.module("ngLocale", [], ["$provide", function($provide) {
            var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
            function getDecimals(n) {
                n = n + '';
                var i = n.indexOf('.');
                return (i == -1) ? 0 : n.length - i - 1;
            }

            function getVF(n, opt_precision) {
                var v = opt_precision;

                if (undefined === v) {
                    v = Math.min(getDecimals(n), 3);
                }

                var base = Math.pow(10, v);
                var f = ((n * base) | 0) % base;
                return {v: v, f: f};
            }

            $provide.value("$locale", {
                "DATETIME_FORMATS": {
                    "AMPMS": [
                        "AM",
                        "PM"
                    ],
                    "DAY": [
                        "Sunday",
                        "Monday",
                        "Tuesday",
                        "Wednesday",
                        "Thursday",
                        "Friday",
                        "Saturday"
                    ],
                    "ERANAMES": [
                        "Before Christ",
                        "Anno Domini"
                    ],
                    "ERAS": [
                        "BC",
                        "AD"
                    ],
                    "MONTH": [
                        "January",
                        "February",
                        "March",
                        "April",
                        "May",
                        "June",
                        "July",
                        "August",
                        "September",
                        "October",
                        "November",
                        "December"
                    ],
                    "SHORTDAY": [
                        "Sun",
                        "Mon",
                        "Tue",
                        "Wed",
                        "Thu",
                        "Fri",
                        "Sat"
                    ],
                    "SHORTMONTH": [
                        "Jan",
                        "Feb",
                        "Mar",
                        "Apr",
                        "May",
                        "Jun",
                        "Jul",
                        "Aug",
                        "Sep",
                        "Oct",
                        "Nov",
                        "Dec"
                    ],
                    "fullDate": "EEEE, MMMM d, y",
                    "longDate": "MMMM d, y",
                    "medium": "MMM d, y h:mm:ss a",
                    "mediumDate": "MMM d, y",
                    "mediumTime": "h:mm:ss a",
                    "short": "M/d/yy h:mm a",
                    "shortDate": "M/d/yy",
                    "shortTime": "h:mm a"
                },
                "NUMBER_FORMATS": {
                    "CURRENCY_SYM": "$",
                    "DECIMAL_SEP": ".",
                    "GROUP_SEP": ",",
                    "PATTERNS": [
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 3,
                            "minFrac": 0,
                            "minInt": 1,
                            "negPre": "-",
                            "negSuf": "",
                            "posPre": "",
                            "posSuf": ""
                        },
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 2,
                            "minFrac": 2,
                            "minInt": 1,
                            "negPre": "\u00a4-",
                            "negSuf": "",
                            "posPre": "\u00a4",
                            "posSuf": ""
                        }
                    ]
                },
                "id": "en",
                "pluralCat": function(n, opt_precision) {  var i = n | 0;  var vf = getVF(n, opt_precision);  if (i == 1 && vf.v == 0) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
            });
        }]);
        break;
    case "fr" :
        angular.module("ngLocale", [], ["$provide", function($provide) {
            var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
            $provide.value("$locale", {
                "DATETIME_FORMATS": {
                    "AMPMS": [
                        "AM",
                        "PM"
                    ],
                    "DAY": [
                        "dimanche",
                        "lundi",
                        "mardi",
                        "mercredi",
                        "jeudi",
                        "vendredi",
                        "samedi"
                    ],
                    "ERANAMES": [
                        "avant J\u00e9sus-Christ",
                        "apr\u00e8s J\u00e9sus-Christ"
                    ],
                    "ERAS": [
                        "av. J.-C.",
                        "ap. J.-C."
                    ],
                    "MONTH": [
                        "janvier",
                        "f\u00e9vrier",
                        "mars",
                        "avril",
                        "mai",
                        "juin",
                        "juillet",
                        "ao\u00fbt",
                        "septembre",
                        "octobre",
                        "novembre",
                        "d\u00e9cembre"
                    ],
                    "SHORTDAY": [
                        "dim.",
                        "lun.",
                        "mar.",
                        "mer.",
                        "jeu.",
                        "ven.",
                        "sam."
                    ],
                    "SHORTMONTH": [
                        "janv.",
                        "f\u00e9vr.",
                        "mars",
                        "avr.",
                        "mai",
                        "juin",
                        "juil.",
                        "ao\u00fbt",
                        "sept.",
                        "oct.",
                        "nov.",
                        "d\u00e9c."
                    ],
                    "fullDate": "EEEE d MMMM y",
                    "longDate": "d MMMM y",
                    "medium": "d MMM y HH:mm:ss",
                    "mediumDate": "d MMM y",
                    "mediumTime": "HH:mm:ss",
                    "short": "dd/MM/y HH:mm",
                    "shortDate": "DD/MM/YYYY",
                    "shortTime": "HH:mm"
                },
                "NUMBER_FORMATS": {
                    "CURRENCY_SYM": "\u20ac",
                    "DECIMAL_SEP": ",",
                    "GROUP_SEP": "\u00a0",
                    "PATTERNS": [
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 3,
                            "minFrac": 0,
                            "minInt": 1,
                            "negPre": "-",
                            "negSuf": "",
                            "posPre": "",
                            "posSuf": ""
                        },
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 2,
                            "minFrac": 2,
                            "minInt": 1,
                            "negPre": "-",
                            "negSuf": "\u00a0\u00a4",
                            "posPre": "",
                            "posSuf": "\u00a0\u00a4"
                        }
                    ]
                },
                "id": "fr",
                "pluralCat": function(n, opt_precision) {  var i = n | 0;  if (i == 0 || i == 1) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
            });
        }]);
        break;
    case "fr-ca" :
        angular.module("ngLocale", [], ["$provide", function($provide) {
            var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
            $provide.value("$locale", {
                "DATETIME_FORMATS": {
                    "AMPMS": [
                        "AM",
                        "PM"
                    ],
                    "DAY": [
                        "dimanche",
                        "lundi",
                        "mardi",
                        "mercredi",
                        "jeudi",
                        "vendredi",
                        "samedi"
                    ],
                    "ERANAMES": [
                        "avant J\u00e9sus-Christ",
                        "apr\u00e8s J\u00e9sus-Christ"
                    ],
                    "ERAS": [
                        "av. J.-C.",
                        "ap. J.-C."
                    ],
                    "MONTH": [
                        "janvier",
                        "f\u00e9vrier",
                        "mars",
                        "avril",
                        "mai",
                        "juin",
                        "juillet",
                        "ao\u00fbt",
                        "septembre",
                        "octobre",
                        "novembre",
                        "d\u00e9cembre"
                    ],
                    "SHORTDAY": [
                        "dim.",
                        "lun.",
                        "mar.",
                        "mer.",
                        "jeu.",
                        "ven.",
                        "sam."
                    ],
                    "SHORTMONTH": [
                        "janv.",
                        "f\u00e9vr.",
                        "mars",
                        "avr.",
                        "mai",
                        "juin",
                        "juil.",
                        "ao\u00fbt",
                        "sept.",
                        "oct.",
                        "nov.",
                        "d\u00e9c."
                    ],
                    "fullDate": "EEEE d MMMM y",
                    "longDate": "d MMMM y",
                    "medium": "y-MM-dd HH:mm:ss",
                    "mediumDate": "d MMM y",
                    "mediumTime": "HH:mm:ss",
                    "short": "yy-MM-dd HH:mm",
                    "shortDate": "YYYY/MM/DD",
                    "shortTime": "HH:mm"
                },
                "NUMBER_FORMATS": {
                    "CURRENCY_SYM": "$",
                    "DECIMAL_SEP": ",",
                    "GROUP_SEP": "\u00a0",
                    "PATTERNS": [
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 3,
                            "minFrac": 0,
                            "minInt": 1,
                            "negPre": "-",
                            "negSuf": "",
                            "posPre": "",
                            "posSuf": ""
                        },
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 2,
                            "minFrac": 2,
                            "minInt": 1,
                            "negPre": "-",
                            "negSuf": "\u00a0\u00a4",
                            "posPre": "",
                            "posSuf": "\u00a0\u00a4"
                        }
                    ]
                },
                "id": "fr-ca",
                "pluralCat": function(n, opt_precision) {  var i = n | 0;  if (i == 0 || i == 1) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
            });
        }]);
        break;
    case "pt" :
        angular.module("ngLocale", [], ["$provide", function($provide) {
            var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
            $provide.value("$locale", {
                "DATETIME_FORMATS": {
                    "AMPMS": [
                        "AM",
                        "PM"
                    ],
                    "DAY": [
                        "domingo",
                        "segunda-feira",
                        "ter\u00e7a-feira",
                        "quarta-feira",
                        "quinta-feira",
                        "sexta-feira",
                        "s\u00e1bado"
                    ],
                    "ERANAMES": [
                        "Antes de Cristo",
                        "Ano do Senhor"
                    ],
                    "ERAS": [
                        "a.C.",
                        "d.C."
                    ],
                    "MONTH": [
                        "janeiro",
                        "fevereiro",
                        "mar\u00e7o",
                        "abril",
                        "maio",
                        "junho",
                        "julho",
                        "agosto",
                        "setembro",
                        "outubro",
                        "novembro",
                        "dezembro"
                    ],
                    "SHORTDAY": [
                        "dom",
                        "seg",
                        "ter",
                        "qua",
                        "qui",
                        "sex",
                        "s\u00e1b"
                    ],
                    "SHORTMONTH": [
                        "jan",
                        "fev",
                        "mar",
                        "abr",
                        "mai",
                        "jun",
                        "jul",
                        "ago",
                        "set",
                        "out",
                        "nov",
                        "dez"
                    ],
                    "fullDate": "EEEE, d 'de' MMMM 'de' y",
                    "longDate": "d 'de' MMMM 'de' y",
                    "medium": "d 'de' MMM 'de' y HH:mm:ss",
                    "mediumDate": "d 'de' MMM 'de' y",
                    "mediumTime": "HH:mm:ss",
                    "short": "dd/MM/yy HH:mm",
                    "shortDate": "dd/MM/yy",
                    "shortTime": "HH:mm"
                },
                "NUMBER_FORMATS": {
                    "CURRENCY_SYM": "\u20ac",
                    "DECIMAL_SEP": ",",
                    "GROUP_SEP": ".",
                    "PATTERNS": [
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 3,
                            "minFrac": 0,
                            "minInt": 1,
                            "negPre": "-",
                            "negSuf": "",
                            "posPre": "",
                            "posSuf": ""
                        },
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 2,
                            "minFrac": 2,
                            "minInt": 1,
                            "negPre": "\u00a4-",
                            "negSuf": "",
                            "posPre": "\u00a4",
                            "posSuf": ""
                        }
                    ]
                },
                "id": "pt",
                "pluralCat": function(n, opt_precision) {  if (n >= 0 && n <= 2 && n != 2) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
            });
        }]);
        break;
    case "pt-br" :
        angular.module("ngLocale", [], ["$provide", function($provide) {
            var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
            $provide.value("$locale", {
                "DATETIME_FORMATS": {
                    "AMPMS": [
                        "AM",
                        "PM"
                    ],
                    "DAY": [
                        "domingo",
                        "segunda-feira",
                        "ter\u00e7a-feira",
                        "quarta-feira",
                        "quinta-feira",
                        "sexta-feira",
                        "s\u00e1bado"
                    ],
                    "ERANAMES": [
                        "Antes de Cristo",
                        "Ano do Senhor"
                    ],
                    "ERAS": [
                        "a.C.",
                        "d.C."
                    ],
                    "MONTH": [
                        "janeiro",
                        "fevereiro",
                        "mar\u00e7o",
                        "abril",
                        "maio",
                        "junho",
                        "julho",
                        "agosto",
                        "setembro",
                        "outubro",
                        "novembro",
                        "dezembro"
                    ],
                    "SHORTDAY": [
                        "dom",
                        "seg",
                        "ter",
                        "qua",
                        "qui",
                        "sex",
                        "s\u00e1b"
                    ],
                    "SHORTMONTH": [
                        "jan",
                        "fev",
                        "mar",
                        "abr",
                        "mai",
                        "jun",
                        "jul",
                        "ago",
                        "set",
                        "out",
                        "nov",
                        "dez"
                    ],
                    "fullDate": "EEEE, d 'de' MMMM 'de' y",
                    "longDate": "d 'de' MMMM 'de' y",
                    "medium": "d 'de' MMM 'de' y HH:mm:ss",
                    "mediumDate": "d 'de' MMM 'de' y",
                    "mediumTime": "HH:mm:ss",
                    "short": "dd/MM/yy HH:mm",
                    "shortDate": "dd/MM/yy",
                    "shortTime": "HH:mm"
                },
                "NUMBER_FORMATS": {
                    "CURRENCY_SYM": "R$",
                    "DECIMAL_SEP": ",",
                    "GROUP_SEP": ".",
                    "PATTERNS": [
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 3,
                            "minFrac": 0,
                            "minInt": 1,
                            "negPre": "-",
                            "negSuf": "",
                            "posPre": "",
                            "posSuf": ""
                        },
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 2,
                            "minFrac": 2,
                            "minInt": 1,
                            "negPre": "\u00a4-",
                            "negSuf": "",
                            "posPre": "\u00a4",
                            "posSuf": ""
                        }
                    ]
                },
                "id": "pt-br",
                "pluralCat": function(n, opt_precision) {  if (n >= 0 && n <= 2 && n != 2) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
            });
        }]);
        break;
    case "es" :
        angular.module("ngLocale", [], ["$provide", function($provide) {
            var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
            $provide.value("$locale", {
                "DATETIME_FORMATS": {
                    "AMPMS": [
                        "a.m.",
                        "p.m."
                    ],
                    "DAY": [
                        "domingo",
                        "lunes",
                        "martes",
                        "mi\u00e9rcoles",
                        "jueves",
                        "viernes",
                        "s\u00e1bado"
                    ],
                    "ERANAMES": [
                        "antes de Cristo",
                        "anno D\u00f3mini"
                    ],
                    "ERAS": [
                        "a. C.",
                        "d. C."
                    ],
                    "MONTH": [
                        "enero",
                        "febrero",
                        "marzo",
                        "abril",
                        "mayo",
                        "junio",
                        "julio",
                        "agosto",
                        "septiembre",
                        "octubre",
                        "noviembre",
                        "diciembre"
                    ],
                    "SHORTDAY": [
                        "dom.",
                        "lun.",
                        "mar.",
                        "mi\u00e9.",
                        "jue.",
                        "vie.",
                        "s\u00e1b."
                    ],
                    "SHORTMONTH": [
                        "ene.",
                        "feb.",
                        "mar.",
                        "abr.",
                        "may.",
                        "jun.",
                        "jul.",
                        "ago.",
                        "sep.",
                        "oct.",
                        "nov.",
                        "dic."
                    ],
                    "fullDate": "EEEE, d 'de' MMMM 'de' y",
                    "longDate": "d 'de' MMMM 'de' y",
                    "medium": "d 'de' MMM 'de' y HH:mm:ss",
                    "mediumDate": "d 'de' MMM 'de' y",
                    "mediumTime": "HH:mm:ss",
                    "short": "dd-MMM-y HH:mm",
                    "shortDate": "dd-MMM-y",
                    "shortTime": "HH:mm"
                },
                "NUMBER_FORMATS": {
                    "CURRENCY_SYM": "$",
                    "DECIMAL_SEP": ",",
                    "GROUP_SEP": ".",
                    "PATTERNS": [
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 3,
                            "minFrac": 0,
                            "minInt": 1,
                            "negPre": "-",
                            "negSuf": "",
                            "posPre": "",
                            "posSuf": ""
                        },
                        {
                            "gSize": 3,
                            "lgSize": 3,
                            "maxFrac": 2,
                            "minFrac": 2,
                            "minInt": 1,
                            "negPre": "-",
                            "negSuf": "\u00a0\u00a4",
                            "posPre": "",
                            "posSuf": "\u00a0\u00a4"
                        }
                    ]
                },
                "id": "es",
                "pluralCat": function(n, opt_precision) {  if (n == 1) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
            });
        }]);
        break;
    case "es-co":
        angular.module("ngLocale", [], ["$provide", function($provide) {
        var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
        $provide.value("$locale", {
          "DATETIME_FORMATS": {
            "AMPMS": [
              "a.m.",
              "p.m."
            ],
            "DAY": [
              "domingo",
              "lunes",
              "martes",
              "mi\u00e9rcoles",
              "jueves",
              "viernes",
              "s\u00e1bado"
            ],
            "ERANAMES": [
              "antes de Cristo",
              "despu\u00e9s de Cristo"
            ],
            "ERAS": [
              "a. C.",
              "d. C."
            ],
            "FIRSTDAYOFWEEK": 0,
            "MONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "SHORTDAY": [
              "dom.",
              "lun.",
              "mar.",
              "mi\u00e9.",
              "jue.",
              "vie.",
              "s\u00e1b."
            ],
            "SHORTMONTH": [
              "ene.",
              "feb.",
              "mar.",
              "abr.",
              "may.",
              "jun.",
              "jul.",
              "ago.",
              "sep.",
              "oct.",
              "nov.",
              "dic."
            ],
            "STANDALONEMONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "WEEKENDRANGE": [
              5,
              6
            ],
            "fullDate": "EEEE, d 'de' MMMM 'de' y",
            "longDate": "d 'de' MMMM 'de' y",
            "medium": "d 'de' MMM 'de' y HH:mm:ss",
            "mediumDate": "d 'de' MMM 'de' y",
            "mediumTime": "HH:mm:ss",
            "short": "dd-MMM-yyyy HH:mm",
            "shortDate": "dd-MMM-yyyy",
            "shortTime": "HH:mm"
          },
          "NUMBER_FORMATS": {
            "CURRENCY_SYM": "$",
            "DECIMAL_SEP": ",",
            "GROUP_SEP": ".",
            "PATTERNS": [
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 3,
                "minFrac": 0,
                "minInt": 1,
                "negPre": "-",
                "negSuf": "",
                "posPre": "",
                "posSuf": ""
              },
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 2,
                "minFrac": 2,
                "minInt": 1,
                "negPre": "-\u00a4",
                "negSuf": "",
                "posPre": "\u00a4",
                "posSuf": ""
              }
            ]
          },
          "id": "es-co",
          "pluralCat": function(n, opt_precision) {  if (n == 1) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
        });
        }]);
        break;

    case "es-mx":
        angular.module("ngLocale", [], ["$provide", function($provide) {
        var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
        $provide.value("$locale", {
          "DATETIME_FORMATS": {
            "AMPMS": [
              "a.m.",
              "p.m."
            ],
            "DAY": [
              "domingo",
              "lunes",
              "martes",
              "mi\u00e9rcoles",
              "jueves",
              "viernes",
              "s\u00e1bado"
            ],
            "ERANAMES": [
              "antes de Cristo",
              "despu\u00e9s de Cristo"
            ],
            "ERAS": [
              "a. C.",
              "d. C."
            ],
            "FIRSTDAYOFWEEK": 6,
            "MONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "SHORTDAY": [
              "dom.",
              "lun.",
              "mar.",
              "mi\u00e9.",
              "jue.",
              "vie.",
              "s\u00e1b."
            ],
            "SHORTMONTH": [
              "ene.",
              "feb.",
              "mar.",
              "abr.",
              "may.",
              "jun.",
              "jul.",
              "ago.",
              "sep.",
              "oct.",
              "nov.",
              "dic."
            ],
            "STANDALONEMONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "WEEKENDRANGE": [
              5,
              6
            ],
            "fullDate": "EEEE, d 'de' MMMM 'de' y",
            "longDate": "d 'de' MMMM 'de' y",
            "medium": "d 'de' MMM 'de' y hh:mm:ss a",
            "mediumDate": "d 'de' MMM 'de' y",
            "mediumTime": "hh:mm:ss a",
            "short": "dd-MMM-yyyy hh:mm a",
            "shortDate": "dd-MMM-yyyy",
            "shortTime": "hh:mm a"
          },
          "NUMBER_FORMATS": {
            "CURRENCY_SYM": "$",
            "DECIMAL_SEP": ".",
            "GROUP_SEP": ",",
            "PATTERNS": [
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 3,
                "minFrac": 0,
                "minInt": 1,
                "negPre": "-",
                "negSuf": "",
                "posPre": "",
                "posSuf": ""
              },
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 2,
                "minFrac": 2,
                "minInt": 1,
                "negPre": "-\u00a4",
                "negSuf": "",
                "posPre": "\u00a4",
                "posSuf": ""
              }
            ]
          },
          "id": "es-mx",
          "pluralCat": function(n, opt_precision) {  if (n == 1) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
        });
        }]);
        break;

    case "es-pr":
        angular.module("ngLocale", [], ["$provide", function($provide) {
        var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
        $provide.value("$locale", {
          "DATETIME_FORMATS": {
            "AMPMS": [
              "a.m.",
              "p.m."
            ],
            "DAY": [
              "domingo",
              "lunes",
              "martes",
              "mi\u00e9rcoles",
              "jueves",
              "viernes",
              "s\u00e1bado"
            ],
            "ERANAMES": [
              "antes de Cristo",
              "despu\u00e9s de Cristo"
            ],
            "ERAS": [
              "a. C.",
              "d. C."
            ],
            "FIRSTDAYOFWEEK": 0,
            "MONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "SHORTDAY": [
              "dom.",
              "lun.",
              "mar.",
              "mi\u00e9.",
              "jue.",
              "vie.",
              "s\u00e1b."
            ],
            "SHORTMONTH": [
              "ene.",
              "feb.",
              "mar.",
              "abr.",
              "may.",
              "jun.",
              "jul.",
              "ago.",
              "sep.",
              "oct.",
              "nov.",
              "dic."
            ],
            "STANDALONEMONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "WEEKENDRANGE": [
              5,
              6
            ],
            "fullDate": "EEEE, d 'de' MMMM 'de' y",
            "longDate": "d 'de' MMMM 'de' y",
            "medium": "d 'de' MMM 'de' y HH:mm:ss",
            "mediumDate": "d 'de' MMM 'de' y",
            "mediumTime": "HH:mm:ss",
            "short": "dd/MM/yyyy HH:mm",
            "shortDate": "dd/MM/yyyy",
            "shortTime": "HH:mm"
          },
          "NUMBER_FORMATS": {
            "CURRENCY_SYM": "$",
            "DECIMAL_SEP": ".",
            "GROUP_SEP": ",",
            "PATTERNS": [
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 3,
                "minFrac": 0,
                "minInt": 1,
                "negPre": "-",
                "negSuf": "",
                "posPre": "",
                "posSuf": ""
              },
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 2,
                "minFrac": 2,
                "minInt": 1,
                "negPre": "-\u00a4",
                "negSuf": "",
                "posPre": "\u00a4",
                "posSuf": ""
              }
            ]
          },
          "id": "es-pr",
          "pluralCat": function(n, opt_precision) {  if (n == 1) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
        });
        }]);
        break;
    case "es-cl":
        'use strict';
        angular.module("ngLocale", [], ["$provide", function($provide) {
        var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
        $provide.value("$locale", {
          "DATETIME_FORMATS": {
            "AMPMS": [
              "a.m.",
              "p.m."
            ],
            "DAY": [
              "domingo",
              "lunes",
              "martes",
              "mi\u00e9rcoles",
              "jueves",
              "viernes",
              "s\u00e1bado"
            ],
            "ERANAMES": [
              "antes de Cristo",
              "despu\u00e9s de Cristo"
            ],
            "ERAS": [
              "a. C.",
              "d. C."
            ],
            "FIRSTDAYOFWEEK": 0,
            "MONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "SHORTDAY": [
              "dom.",
              "lun.",
              "mar.",
              "mi\u00e9.",
              "jue.",
              "vie.",
              "s\u00e1b."
            ],
             "SHORTMONTH": [
              "ene.",
              "feb.",
              "mar.",
              "abr.",
              "may.",
              "jun.",
              "jul.",
              "ago.",
              "sep.",
              "oct.",
              "nov.",
              "dic."
            ],
            "STANDALONEMONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "WEEKENDRANGE": [
              5,
              6
            ],
            "fullDate": "EEEE, d 'de' MMMM 'de' y",
            "longDate": "d 'de' MMMM 'de' y",
            "medium": "d 'de' MMM 'de' y HH:mm:ss",
            "mediumDate": "d 'de' MMM 'de' y",
            "mediumTime": "HH:mm:ss",
            "short": "dd-MMM-yyyy HH:mm",
            "shortDate": "dd-MMM-yyyy",
            "shortTime": "HH:mm"
          },
          "NUMBER_FORMATS": {
            "CURRENCY_SYM": "$",
            "DECIMAL_SEP": ",",
            "GROUP_SEP": ".",
            "PATTERNS": [
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 3,
                "minFrac": 0,
                "minInt": 1,
                "negPre": "-",
                "negSuf": "",
                "posPre": "",
                "posSuf": ""
              },
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 2,
                "minFrac": 2,
                "minInt": 1,
                "negPre": "\u00a4-",
                "negSuf": "",
                "posPre": "\u00a4",
                "posSuf": ""
              }
            ]
          },
          "id": "es-cl",
          "pluralCat": function(n, opt_precision) {  if (n == 1) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
        });
        }]);
        break;

    case "es-cr":
        'use strict';
        angular.module("ngLocale", [], ["$provide", function($provide) {
        var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
        $provide.value("$locale", {
          "DATETIME_FORMATS": {
            "AMPMS": [
              "a.m.",
              "p.m."
            ],
            "DAY": [
              "domingo",
              "lunes",
              "martes",
              "mi\u00e9rcoles",
              "jueves",
              "viernes",
              "s\u00e1bado"
            ],
            "ERANAMES": [
              "antes de Cristo",
              "despu\u00e9s de Cristo"
            ],
            "ERAS": [
              "a. C.",
              "d. C."
            ],
            "FIRSTDAYOFWEEK": 0,
            "MONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "SHORTDAY": [
              "dom.",
              "lun.",
              "mar.",
              "mi\u00e9.",
              "jue.",
              "vie.",
              "s\u00e1b."
            ],
            "SHORTMONTH": [
              "ene.",
              "feb.",
              "mar.",
              "abr.",
              "may.",
              "jun.",
              "jul.",
              "ago.",
              "sep.",
              "oct.",
              "nov.",
              "dic."
            ],
            "STANDALONEMONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "WEEKENDRANGE": [
              5,
              6
            ],
            "fullDate": "EEEE, d 'de' MMMM 'de' y",
            "longDate": "d 'de' MMMM 'de' y",
            "medium": "d 'de' MMM 'de' y HH:mm:ss",
            "mediumDate": "d 'de' MMM 'de' y",
            "mediumTime": "HH:mm:ss",
            "short": "dd-MMM-yyyy HH:mm",
            "shortDate": "dd-MMM-yyyy",
            "shortTime": "HH:mm"
          },
          "NUMBER_FORMATS": {
            "CURRENCY_SYM": "\u20a1",
            "DECIMAL_SEP": ",",
            "GROUP_SEP": ".",
            "PATTERNS": [
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 3,
                "minFrac": 0,
                "minInt": 1,
                "negPre": "-",
                "negSuf": "",
                "posPre": "",
                "posSuf": ""
              },
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 2,
                "minFrac": 2,
                "minInt": 1,
                "negPre": "-\u00a4",
                "negSuf": "",
                "posPre": "\u00a4",
                "posSuf": ""
              }
            ]
          },
          "id": "es-cr",
          "pluralCat": function(n, opt_precision) {  if (n == 1) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
        });
        }]);
        break;

    case "es-do":
        'use strict';
        angular.module("ngLocale", [], ["$provide", function($provide) {
        var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
        $provide.value("$locale", {
          "DATETIME_FORMATS": {
            "AMPMS": [
              "a.m.",
              "p.m."
            ],
            "DAY": [
              "domingo",
              "lunes",
              "martes",
              "mi\u00e9rcoles",
              "jueves",
              "viernes",
              "s\u00e1bado"
            ],
            "ERANAMES": [
              "antes de Cristo",
              "despu\u00e9s de Cristo"
            ],
            "ERAS": [
              "a. C.",
              "d. C."
            ],
            "FIRSTDAYOFWEEK": 0,
            "MONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "SHORTDAY": [
              "dom.",
              "lun.",
              "mar.",
              "mi\u00e9.",
              "jue.",
              "vie.",
              "s\u00e1b."
            ],
            "SHORTMONTH": [
              "ene.",
              "feb.",
              "mar.",
              "abr.",
              "may.",
              "jun.",
              "jul.",
              "ago.",
              "sep.",
              "oct.",
              "nov.",
              "dic."
            ],
            "STANDALONEMONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "WEEKENDRANGE": [
              5,
              6
            ],
            "fullDate": "EEEE, d 'de' MMMM 'de' y",
            "longDate": "d 'de' MMMM 'de' y",
            "medium": "d 'de' MMM 'de' y HH:mm:ss",
            "mediumDate": "d 'de' MMM 'de' y",
            "mediumTime": "HH:mm:ss",
            "short": "dd-MMM-yyyy HH:mm",
            "shortDate": "dd-MMM-yyyy",
            "shortTime": "HH:mm"
          },
          "NUMBER_FORMATS": {
            "CURRENCY_SYM": "RD$",
            "DECIMAL_SEP": ".",
            "GROUP_SEP": ",",
            "PATTERNS": [
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 3,
                "minFrac": 0,
                "minInt": 1,
                "negPre": "-",
                "negSuf": "",
                "posPre": "",
                "posSuf": ""
              },
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 2,
                "minFrac": 2,
                "minInt": 1,
                "negPre": "-\u00a4",
                "negSuf": "",
                "posPre": "\u00a4",
                "posSuf": ""
              }
            ]
          },
          "id": "es-do",
          "pluralCat": function(n, opt_precision) {  if (n == 1) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
        });
        }]);
        break;

    case "es-ec":
        'use strict';
        angular.module("ngLocale", [], ["$provide", function($provide) {
        var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
        $provide.value("$locale", {
          "DATETIME_FORMATS": {
            "AMPMS": [
              "a.m.",
              "p.m."
            ],
            "DAY": [
              "domingo",
              "lunes",
              "martes",
              "mi\u00e9rcoles",
              "jueves",
              "viernes",
              "s\u00e1bado"
            ],
            "ERANAMES": [
              "antes de Cristo",
              "despu\u00e9s de Cristo"
            ],
            "ERAS": [
              "a. C.",
              "d. C."
            ],
            "FIRSTDAYOFWEEK": 0,
            "MONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "SHORTDAY": [
              "dom.",
              "lun.",
              "mar.",
              "mi\u00e9.",
              "jue.",
              "vie.",
              "s\u00e1b."
            ],
            "SHORTMONTH": [
              "ene.",
              "feb.",
              "mar.",
              "abr.",
              "may.",
              "jun.",
              "jul.",
              "ago.",
              "sep.",
              "oct.",
              "nov.",
              "dic."
            ],
            "STANDALONEMONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "WEEKENDRANGE": [
              5,
              6
            ],
            "fullDate": "EEEE, d 'de' MMMM 'de' y",
            "longDate": "d 'de' MMMM 'de' y",
            "medium": "d 'de' MMM 'de' y HH:mm:ss",
            "mediumDate": "d 'de' MMM 'de' y",
            "mediumTime": "HH:mm:ss",
            "short": "dd-MMM-yyyy HH:mm",
            "shortDate": "dd-MMM-yyyy",
            "shortTime": "HH:mm"
          },
          "NUMBER_FORMATS": {
            "CURRENCY_SYM": "$",
            "DECIMAL_SEP": ",",
            "GROUP_SEP": ".",
            "PATTERNS": [
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 3,
                "minFrac": 0,
                "minInt": 1,
                "negPre": "-",
                "negSuf": "",
                "posPre": "",
                "posSuf": ""
              },
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 2,
                "minFrac": 2,
                "minInt": 1,
                "negPre": "-\u00a4",
                "negSuf": "",
                "posPre": "\u00a4",
                "posSuf": ""
              }
            ]
          },
          "id": "es-ec",
          "pluralCat": function(n, opt_precision) {  if (n == 1) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
        });
        }]);
        break;

    case "es-pe":
        'use strict';
        angular.module("ngLocale", [], ["$provide", function($provide) {
        var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
        $provide.value("$locale", {
          "DATETIME_FORMATS": {
            "AMPMS": [
              "a.m.",
              "p.m."
            ],
            "DAY": [
              "domingo",
              "lunes",
              "martes",
              "mi\u00e9rcoles",
              "jueves",
              "viernes",
              "s\u00e1bado"
            ],
            "ERANAMES": [
              "antes de Cristo",
              "despu\u00e9s de Cristo"
            ],
            "ERAS": [
              "a. C.",
              "d. C."
            ],
            "FIRSTDAYOFWEEK": 0,
            "MONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "SHORTDAY": [
              "dom.",
              "lun.",
              "mar.",
              "mi\u00e9.",
              "jue.",
              "vie.",
              "s\u00e1b."
            ],
            "SHORTMONTH": [
              "ene.",
              "feb.",
              "mar.",
              "abr.",
              "may.",
              "jun.",
              "jul.",
              "ago.",
              "sep.",
              "oct.",
              "nov.",
              "dic."
            ],
            "STANDALONEMONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "WEEKENDRANGE": [
              5,
              6
            ],
            "fullDate": "EEEE, d 'de' MMMM 'de' y",
            "longDate": "d 'de' MMMM 'de' y",
            "medium": "d 'de' MMM 'de' y HH:mm:ss",
            "mediumDate": "d 'de' MMM 'de' y",
            "mediumTime": "HH:mm:ss",
            "short": "dd-MMM-yyyy HH:mm",
            "shortDate": "dd-MMM-yyyy",
            "shortTime": "HH:mm"
          },
          "NUMBER_FORMATS": {
            "CURRENCY_SYM": "S/.",
            "DECIMAL_SEP": ".",
            "GROUP_SEP": ",",
            "PATTERNS": [
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 3,
                "minFrac": 0,
                "minInt": 1,
                "negPre": "-",
                "negSuf": "",
                "posPre": "",
                "posSuf": ""
              },
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 2,
                "minFrac": 2,
                "minInt": 1,
                "negPre": "-\u00a4",
                "negSuf": "",
                "posPre": "\u00a4",
                "posSuf": ""
              }
            ]
          },
          "id": "es-pe",
          "pluralCat": function(n, opt_precision) {  if (n == 1) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
        });
        }]);
        break;

    case "es-ve":
        'use strict';
        angular.module("ngLocale", [], ["$provide", function($provide) {
        var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
        $provide.value("$locale", {
          "DATETIME_FORMATS": {
            "AMPMS": [
              "a.m.",
              "p.m."
            ],
            "DAY": [
              "domingo",
              "lunes",
              "martes",
              "mi\u00e9rcoles",
              "jueves",
              "viernes",
              "s\u00e1bado"
            ],
            "ERANAMES": [
              "antes de Cristo",
              "despu\u00e9s de Cristo"
            ],
            "ERAS": [
              "a. C.",
              "d. C."
            ],
            "FIRSTDAYOFWEEK": 0,
            "MONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "SHORTDAY": [
              "dom.",
              "lun.",
              "mar.",
              "mi\u00e9.",
              "jue.",
              "vie.",
              "s\u00e1b."
            ],
            "SHORTMONTH": [
              "ene.",
              "feb.",
              "mar.",
              "abr.",
              "may.",
              "jun.",
              "jul.",
              "ago.",
              "sep.",
              "oct.",
              "nov.",
              "dic."
            ],
            "STANDALONEMONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "WEEKENDRANGE": [
              5,
              6
            ],
            "fullDate": "EEEE, d 'de' MMMM 'de' y",
            "longDate": "d 'de' MMMM 'de' y",
            "medium": "d 'de' MMMM 'de' y HH:mm:ss",
            "mediumDate": "d 'de' MMMM 'de' y",
            "mediumTime": "HH:mm:ss",
            "short": "dd-MMM-yyyy HH:mm",
            "shortDate": "dd-MMM-yyyy",
            "shortTime": "HH:mm"
          },
          "NUMBER_FORMATS": {
            "CURRENCY_SYM": "Bs.",
            "DECIMAL_SEP": ",",
            "GROUP_SEP": ".",
            "PATTERNS": [
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 3,
                "minFrac": 0,
                "minInt": 1,
                "negPre": "-",
                "negSuf": "",
                "posPre": "",
                "posSuf": ""
              },
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 2,
                "minFrac": 2,
                "minInt": 1,
                "negPre": "-\u00a4",
                "negSuf": "",
                "posPre": "\u00a4",
                "posSuf": ""
              }
            ]
          },
          "id": "es-ve",
          "pluralCat": function(n, opt_precision) {  if (n == 1) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
        });
        }]);
        break;
    case "es-ar":
        'use strict';
        angular.module("ngLocale", [], ["$provide", function($provide) {
        var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
        $provide.value("$locale", {
          "DATETIME_FORMATS": {
            "AMPMS": [
              "a.m.",
              "p.m."
            ],
            "DAY": [
              "domingo",
              "lunes",
              "martes",
              "mi\u00e9rcoles",
              "jueves",
              "viernes",
              "s\u00e1bado"
            ],
            "ERANAMES": [
              "antes de Cristo",
              "despu\u00e9s de Cristo"
            ],
            "ERAS": [
              "a. C.",
              "d. C."
            ],
            "FIRSTDAYOFWEEK": 6,
            "MONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "SHORTDAY": [
              "dom.",
              "lun.",
              "mar.",
              "mi\u00e9.",
              "jue.",
              "vie.",
              "s\u00e1b."
            ],
            "SHORTMONTH": [
              "ene.",
              "feb.",
              "mar.",
              "abr.",
              "may.",
              "jun.",
              "jul.",
              "ago.",
              "sep.",
              "oct.",
              "nov.",
              "dic."
            ],
            "STANDALONEMONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "WEEKENDRANGE": [
              5,
              6
            ],
            "fullDate": "EEEE, d 'de' MMMM 'de' y",
            "longDate": "d 'de' MMMM 'de' y",
            "medium": "d 'de' MMM 'de' y HH:mm:ss",
            "mediumDate": "d 'de' MMM 'de' y",
            "mediumTime": "HH:mm:ss",
            "short": "dd-MMM-yyyy HH:mm",
            "shortDate": "dd-MMM-yyyy",
            "shortTime": "HH:mm"
          },
          "NUMBER_FORMATS": {
            "CURRENCY_SYM": "$",
            "DECIMAL_SEP": ",",
            "GROUP_SEP": ".",
            "PATTERNS": [
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 3,
                "minFrac": 0,
                "minInt": 1,
                "negPre": "-",
                "negSuf": "",
                "posPre": "",
                "posSuf": ""
              },
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 2,
                "minFrac": 2,
                "minInt": 1,
                "negPre": "-\u00a4",
                "negSuf": "",
                "posPre": "\u00a4",
                "posSuf": ""
              }
            ]
          },
          "id": "es-ar",
          "pluralCat": function(n, opt_precision) {  if (n == 1) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
        });
        }]);
        break;
    case "es-gt":
        'use strict';
        angular.module("ngLocale", [], ["$provide", function($provide) {
        var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
        $provide.value("$locale", {
          "DATETIME_FORMATS": {
            "AMPMS": [
              "a.m.",
              "p.m."
            ],
            "DAY": [
              "domingo",
              "lunes",
              "martes",
              "mi\u00e9rcoles",
              "jueves",
              "viernes",
              "s\u00e1bado"
            ],
            "ERANAMES": [
              "antes de Cristo",
              "despu\u00e9s de Cristo"
            ],
            "ERAS": [
              "a. C.",
              "d. C."
            ],
            "FIRSTDAYOFWEEK": 6,
            "MONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "SHORTDAY": [
              "dom.",
              "lun.",
              "mar.",
              "mi\u00e9.",
              "jue.",
              "vie.",
              "s\u00e1b."
            ],
            "SHORTMONTH": [
              "ene.",
              "feb.",
              "mar.",
              "abr.",
              "may.",
              "jun.",
              "jul.",
              "ago.",
              "sep.",
              "oct.",
              "nov.",
              "dic."
            ],
            "STANDALONEMONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "WEEKENDRANGE": [
              5,
              6
            ],
            "fullDate": "EEEE, d 'de' MMMM 'de' y",
            "longDate": "d 'de' MMMM 'de' y",
            "medium": "d 'de' MMM 'de' y HH:mm:ss",
            "mediumDate": "d 'de' MMM 'de' y",
            "mediumTime": "HH:mm:ss",
            "short": "dd-MMM-yyyy HH:mm",
            "shortDate": "dd-MMM-yyyy",
            "shortTime": "HH:mm"
          },
          "NUMBER_FORMATS": {
            "CURRENCY_SYM": "Q",
            "DECIMAL_SEP": ".",
            "GROUP_SEP": ",",
            "PATTERNS": [
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 3,
                "minFrac": 0,
                "minInt": 1,
                "negPre": "-",
                "negSuf": "",
                "posPre": "",
                "posSuf": ""
              },
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 2,
                "minFrac": 2,
                "minInt": 1,
                "negPre": "-\u00a4",
                "negSuf": "",
                "posPre": "\u00a4",
                "posSuf": ""
              }
            ]
          },
          "id": "es-gt",
          "pluralCat": function(n, opt_precision) {  if (n == 1) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
        });
        }]);
        break;
    case "es-pa":
        'use strict';
        angular.module("ngLocale", [], ["$provide", function($provide) {
        var PLURAL_CATEGORY = {ZERO: "zero", ONE: "one", TWO: "two", FEW: "few", MANY: "many", OTHER: "other"};
        $provide.value("$locale", {
          "DATETIME_FORMATS": {
            "AMPMS": [
              "a.m.",
              "p.m."
            ],
            "DAY": [
              "domingo",
              "lunes",
              "martes",
              "mi\u00e9rcoles",
              "jueves",
              "viernes",
              "s\u00e1bado"
            ],
            "ERANAMES": [
              "antes de Cristo",
              "despu\u00e9s de Cristo"
            ],
            "ERAS": [
              "a. C.",
              "d. C."
            ],
            "FIRSTDAYOFWEEK": 6,
            "MONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "SHORTDAY": [
              "dom.",
              "lun.",
              "mar.",
              "mi\u00e9.",
              "jue.",
              "vie.",
              "s\u00e1b."
            ],
            "SHORTMONTH": [
              "ene.",
              "feb.",
              "mar.",
              "abr.",
              "may.",
              "jun.",
              "jul.",
              "ago.",
              "sep.",
              "oct.",
              "nov.",
              "dic."
            ],
            "STANDALONEMONTH": [
              "enero",
              "febrero",
              "marzo",
              "abril",
              "mayo",
              "junio",
              "julio",
              "agosto",
              "septiembre",
              "octubre",
              "noviembre",
              "diciembre"
            ],
            "WEEKENDRANGE": [
              5,
              6
            ],
            "fullDate": "EEEE, d 'de' MMMM 'de' y",
            "longDate": "d 'de' MMMM 'de' y",
            "medium": "d 'de' MMM 'de' y hh:mm:ss a",
            "mediumDate": "d 'de' MMM 'de' y",
            "mediumTime": "hh:mm:ss a",
            "short": "dd-MMM-yyyy hh:mm a",
            "shortDate": "dd-MMM-yyyy",
            "shortTime": "hh:mm a"
          },
          "NUMBER_FORMATS": {
            "CURRENCY_SYM": "B/.",
            "DECIMAL_SEP": ".",
            "GROUP_SEP": ",",
            "PATTERNS": [
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 3,
                "minFrac": 0,
                "minInt": 1,
                "negPre": "-",
                "negSuf": "",
                "posPre": "",
                "posSuf": ""
              },
              {
                "gSize": 3,
                "lgSize": 3,
                "maxFrac": 2,
                "minFrac": 2,
                "minInt": 1,
                "negPre": "-\u00a4",
                "negSuf": "",
                "posPre": "\u00a4",
                "posSuf": ""
              }
            ]
          },
          "id": "es-pa",
          "pluralCat": function(n, opt_precision) {  if (n == 1) {    return PLURAL_CATEGORY.ONE;  }  return PLURAL_CATEGORY.OTHER;}
        });
        }]);
        break;
}

var process = process || {env: {NODE_ENV: "development"}};
/*
 AngularJS
 (c) 2010-2020 Google LLC. http://angularjs.org
 License: MIT
 XLTS for AngularJS v1.9.6
 (c) 2022 XLTS.dev All Rights Reserved. https://xlts.dev/angularjs
 License: Obtain a commercial license from XLTS.dev before using this software.
*/
(function(T,a){'use strict';function M(m,f){f=f||{};a.forEach(f,function(a,d){delete f[d]});for(var d in m)!m.hasOwnProperty(d)||"$"===d.charAt(0)&&"$"===d.charAt(1)||(f[d]=m[d]);return f}var B=a.$$minErr("$resource"),H=/^(\.[a-zA-Z_$@][0-9a-zA-Z_$@]*)+$/;a.module("ngResource",["ng"]).info({angularVersion:"1.9.6"}).provider("$resource",function(){var m=/^https?:\/\/\[[^\]]*][^/]*/,f=this;this.defaults={stripTrailingSlashes:!0,cancellable:!1,actions:{get:{method:"GET"},save:{method:"POST"},query:{method:"GET",
isArray:!0},remove:{method:"DELETE"},"delete":{method:"DELETE"}}};this.$get=["$http","$log","$q","$timeout",function(d,F,G,N){function C(a,d){this.template=a;this.defaults=n({},f.defaults,d);this.urlParams={}}var O=a.noop,r=a.forEach,n=a.extend,R=a.copy,P=a.isArray,D=a.isDefined,x=a.isFunction,I=a.isNumber,y=a.$$encodeUriQuery,S=a.$$encodeUriSegment;C.prototype={setUrlParams:function(a,d,f){var g=this,c=f||g.template,s,h,n="",b=g.urlParams=Object.create(null);r(c.split(/\W/),function(a){if("hasOwnProperty"===
a)throw B("badname");!/^\d+$/.test(a)&&a&&(new RegExp("(^|[^\\\\]):"+a+"(\\W|$)")).test(c)&&(b[a]={isQueryParamValue:(new RegExp("\\?.*=:"+a+"(?:\\W|$)")).test(c)})});c=c.replace(/\\:/g,":");c=c.replace(m,function(b){n=b;return""});d=d||{};r(g.urlParams,function(b,a){s=d.hasOwnProperty(a)?d[a]:g.defaults[a];D(s)&&null!==s?(h=b.isQueryParamValue?y(s,!0):S(s),c=c.replace(new RegExp(":"+a+"(\\W|$)","g"),function(b,a){return h+a})):c=c.replace(new RegExp("(/?):"+a+"(\\W|$)","g"),function(b,a,e){return"/"===
e.charAt(0)?e:a+e})});g.defaults.stripTrailingSlashes&&(c=c.replace(/(^|[^/])\/+$/,"$1")||"/");c=c.replace(/\/\.(?=\w+($|\?))/,".");a.url=n+c.replace(/\/(\\|%5C)\./,"/.");r(d,function(b,c){g.urlParams[c]||(a.params=a.params||{},a.params[c]=b)})}};return function(m,y,z,g){function c(b,c){var d={};c=n({},y,c);r(c,function(c,f){x(c)&&(c=c(b));var e;if(c&&c.charAt&&"@"===c.charAt(0)){e=b;var k=c.substr(1);if(null==k||""===k||"hasOwnProperty"===k||!H.test("."+k))throw B("badmember",k);for(var k=k.split("."),
h=0,n=k.length;h<n&&a.isDefined(e);h++){var g=k[h];e=null!==e?e[g]:void 0}}else e=c;d[f]=e});return d}function s(b){return b.resource}function h(b){M(b||{},this)}var Q=new C(m,g);z=n({},f.defaults.actions,z);h.prototype.toJSON=function(){var b=n({},this);delete b.$promise;delete b.$resolved;delete b.$cancelRequest;return b};r(z,function(b,a){var f=!0===b.hasBody||!1!==b.hasBody&&/^(POST|PUT|PATCH)$/i.test(b.method),g=b.timeout,m=D(b.cancellable)?b.cancellable:Q.defaults.cancellable;g&&!I(g)&&(F.debug("ngResource:\n  Only numeric values are allowed as `timeout`.\n  Promises are not supported in $resource, because the same value would be used for multiple requests. If you are looking for a way to cancel requests, you should use the `cancellable` option."),
delete b.timeout,g=null);h[a]=function(e,k,J,y){function z(a){p.catch(O);null!==u&&u.resolve(a)}var K={},v,t,w;switch(arguments.length){case 4:w=y,t=J;case 3:case 2:if(x(k)){if(x(e)){t=e;w=k;break}t=k;w=J}else{K=e;v=k;t=J;break}case 1:x(e)?t=e:f?v=e:K=e;break;case 0:break;default:throw B("badargs",arguments.length);}var E=this instanceof h,l=E?v:b.isArray?[]:new h(v),q={},C=b.interceptor&&b.interceptor.request||void 0,D=b.interceptor&&b.interceptor.requestError||void 0,F=b.interceptor&&b.interceptor.response||
s,H=b.interceptor&&b.interceptor.responseError||G.reject,I=t?function(a){t(a,A.headers,A.status,A.statusText)}:void 0;w=w||void 0;var u,L,A;r(b,function(a,b){switch(b){default:q[b]=R(a);case "params":case "isArray":case "interceptor":case "cancellable":}});!E&&m&&(u=G.defer(),q.timeout=u.promise,g&&(L=N(u.resolve,g)));f&&(q.data=v);Q.setUrlParams(q,n({},c(v,b.params||{}),K),b.url);var p=G.resolve(q).then(C).catch(D).then(d),p=p.then(function(c){var e=c.data;if(e){if(P(e)!==!!b.isArray)throw B("badcfg",
a,b.isArray?"array":"object",P(e)?"array":"object",q.method,q.url);if(b.isArray)l.length=0,r(e,function(a){"object"===typeof a?l.push(new h(a)):l.push(a)});else{var d=l.$promise;M(e,l);l.$promise=d}}c.resource=l;A=c;return F(c)},function(a){a.resource=l;A=a;return H(a)}),p=p["finally"](function(){l.$resolved=!0;!E&&m&&(l.$cancelRequest=O,N.cancel(L),u=L=q.timeout=null)});p.then(I,w);return E?p:(l.$promise=p,l.$resolved=!1,m&&(l.$cancelRequest=z),l)};h.prototype["$"+a]=function(b,c,d){x(b)&&(d=c,c=
b,b={});b=h[a].call(this,b,this,c,d);return b.$promise||b}});return h}}]})})(window,window.angular);
//# sourceMappingURL=angular-resource.min.js.map

var process = process || {env: {NODE_ENV: "development"}};
/*
 AngularJS
 (c) 2010-2020 Google LLC. http://angularjs.org
 License: MIT
 XLTS for AngularJS v1.9.6
 (c) 2022 XLTS.dev All Rights Reserved. https://xlts.dev/angularjs
 License: Obtain a commercial license from XLTS.dev before using this software.
*/
(function(I,b){'use strict';function z(b,h){var d=[],e=b.replace(/([().])/g,function(d,b){return"\\"+b}).replace(/(\/)?:(\w+)(\*\?|[?*])?/g,function(b,c,e,h){b="?"===h||"*?"===h;h="*"===h||"*?"===h;d.push({name:e,optional:b});c=c||"";return(b?"(?:"+c:c+"(?:")+(h?"(.+?)":"([^/]+)")+(b?"?)?":")")}).replace(/([/$*])/g,function(b,d){return"\\"+d});h.ignoreTrailingSlashes&&(e=e.replace(/\/+$/,"")+"/*");return{keys:d,regexp:new RegExp("^"+e+"(?:[?#]|$)",h.caseInsensitiveMatch?"i":"")}}function A(b){m&&
b.get("$route")}function u(t,h,d){return{restrict:"ECA",terminal:!0,priority:400,transclude:"element",link:function(e,f,c,k,G){function n(){p&&(d.cancel(p),p=null);l&&(l.$destroy(),l=null);r&&(p=d.leave(r),p.done(function(b){!1!==b&&(p=null)}),r=null)}function v(){var c=t.current&&t.current.locals;if(b.isDefined(c&&c.$template)){var c=e.$new(),k=t.current;r=G(c,function(c){d.enter(c,null,r||f).done(function(d){!1===d||!b.isDefined(w)||w&&!e.$eval(w)||h()});n()});l=k.scope=c;l.$emit("$viewContentLoaded");
l.$eval(m)}else n()}var l,r,p,w=c.autoscroll,m=c.onload||"";e.$on("$routeChangeSuccess",v);v()}}}function x(b,h,d){return{restrict:"ECA",priority:-400,link:function(e,f){var c=d.current,k=c.locals;f.html(k.$template);var m=b(f.contents());if(c.controller){k.$scope=e;var n=h(c.controller,k);c.controllerAs&&(e[c.controllerAs]=n);f.data("$ngControllerController",n);f.children().data("$ngControllerController",n)}e[c.resolveAs||"$resolve"]=k;m(e)}}}var C,D,E,F,y=b.module("ngRoute",[]).info({angularVersion:"1.9.6"}).provider("$route",
function(){function t(d,e){return b.extend(Object.create(d),e)}C=b.isArray;D=b.isObject;E=b.isDefined;F=b.noop;var h={};this.when=function(d,e){var f;f=void 0;if(C(e)){f=f||[];for(var c=0,k=e.length;c<k;c++)f[c]=e[c]}else if(D(e))for(c in f=f||{},e)if("$"!==c.charAt(0)||"$"!==c.charAt(1))f[c]=e[c];f=f||e;b.isUndefined(f.reloadOnUrl)&&(f.reloadOnUrl=!0);b.isUndefined(f.reloadOnSearch)&&(f.reloadOnSearch=!0);b.isUndefined(f.caseInsensitiveMatch)&&(f.caseInsensitiveMatch=this.caseInsensitiveMatch);h[d]=
b.extend(f,{originalPath:d},d&&z(d,f));d&&(c="/"===d[d.length-1]?d.substr(0,d.length-1):d+"/",h[c]=b.extend({originalPath:d,redirectTo:d},z(c,f)));return this};this.caseInsensitiveMatch=!1;this.otherwise=function(b){"string"===typeof b&&(b={redirectTo:b});this.when(null,b);return this};m=!0;this.eagerInstantiationEnabled=function(b){return E(b)?(m=b,this):m};this.$get=["$rootScope","$location","$routeParams","$q","$injector","$templateRequest","$sce","$browser",function(d,e,f,c,k,m,n,v){function l(a){var g=
s.current;q=A();(x=!B&&q&&g&&q.$$route===g.$$route&&(!q.reloadOnUrl||!q.reloadOnSearch&&b.equals(q.pathParams,g.pathParams)))||!g&&!q||d.$broadcast("$routeChangeStart",q,g).defaultPrevented&&a&&a.preventDefault()}function r(){var a=s.current,g=q;if(x)a.params=g.params,b.copy(a.params,f),d.$broadcast("$routeUpdate",a);else if(g||a){B=!1;s.current=g;var e=c.resolve(g);v.$$incOutstandingRequestCount("$route");e.then(p).then(w).then(function(c){return c&&e.then(y).then(function(c){g===s.current&&(g&&
(g.locals=c,b.copy(g.params,f)),d.$broadcast("$routeChangeSuccess",g,a))})}).catch(function(b){g===s.current&&d.$broadcast("$routeChangeError",g,a,b)}).finally(function(){v.$$completeOutstandingRequest(F,"$route")})}}function p(a){var g={route:a,hasRedirection:!1};if(a)if(a.redirectTo)if(b.isString(a.redirectTo))g.path=u(a.redirectTo,a.params),g.search=a.params,g.hasRedirection=!0;else{var d=e.path(),f=e.search();a=a.redirectTo(a.pathParams,d,f);b.isDefined(a)&&(g.url=a,g.hasRedirection=!0)}else if(a.resolveRedirectTo)return c.resolve(k.invoke(a.resolveRedirectTo)).then(function(a){b.isDefined(a)&&
(g.url=a,g.hasRedirection=!0);return g});return g}function w(a){var b=!0;if(a.route!==s.current)b=!1;else if(a.hasRedirection){var c=e.url(),d=a.url;d?e.url(d).replace():d=e.path(a.path).search(a.search).replace().url();d!==c&&(b=!1)}return b}function y(a){if(a){var g=b.extend({},a.resolve);b.forEach(g,function(a,c){g[c]=b.isString(a)?k.get(a):k.invoke(a,null,null,c)});a=z(a);b.isDefined(a)&&(g.$template=a);return c.all(g)}}function z(a){var c,d;b.isDefined(c=a.template)?b.isFunction(c)&&(c=c(a.params)):
b.isDefined(d=a.templateUrl)&&(b.isFunction(d)&&(d=d(a.params)),b.isDefined(d)&&(a.loadedTemplateUrl=n.valueOf(d),c=m(d)));return c}function A(){var a,c;b.forEach(h,function(d,f){var h;if(h=!c){var k=e.path();h=d.keys;var m={};if(d.regexp)if(k=d.regexp.exec(k)){for(var l=1,q=k.length;l<q;++l){var n=h[l-1],p=k[l];n&&p&&(m[n.name]=p)}h=m}else h=null;else h=null;h=a=h}h&&(c=t(d,{params:b.extend({},e.search(),a),pathParams:a}),c.$$route=d)});return c||h[null]&&t(h[null],{params:{},pathParams:{}})}function u(a,
c){var d=[];b.forEach((a||"").split(":"),function(a,b){if(0===b)d.push(a);else{var e=a.match(/(\w+)(?:[?*])?(.*)/),f=e[1];d.push(c[f]);d.push(e[2]||"");delete c[f]}});return d.join("")}var B=!1,q,x,s={routes:h,reload:function(){B=!0;var a={defaultPrevented:!1,preventDefault:function(){this.defaultPrevented=!0;B=!1}};d.$evalAsync(function(){l(a);a.defaultPrevented||r()})},updateParams:function(a){if(this.current&&this.current.$$route)a=b.extend({},this.current.params,a),e.path(u(this.current.$$route.originalPath,
a)),e.search(a);else throw H("norout");}};d.$on("$locationChangeStart",l);d.$on("$locationChangeSuccess",r);return s}]}).run(A),H=b.$$minErr("ngRoute"),m;A.$inject=["$injector"];y.provider("$routeParams",function(){this.$get=function(){return{}}});y.directive("ngView",u);y.directive("ngView",x);u.$inject=["$route","$anchorScroll","$animate"];x.$inject=["$compile","$controller","$route"]})(window,window.angular);
//# sourceMappingURL=angular-route.min.js.map

var process = process || {env: {NODE_ENV: "development"}};
/*
 AngularJS
 (c) 2010-2020 Google LLC. http://angularjs.org
 License: MIT
 XLTS for AngularJS v1.9.6
 (c) 2022 XLTS.dev All Rights Reserved. https://xlts.dev/angularjs
 License: Obtain a commercial license from XLTS.dev before using this software.
*/
(function(s,e){'use strict';function O(e){var g=[];B(g,D).chars(e);return g.join("")}var C=e.$$minErr("$sanitize"),E,g,F,G,H,q,D,I,J,B;e.module("ngSanitize",[]).provider("$sanitize",function(){function h(a,d){return A(a.split(","),d)}function A(a,d){var c={},b;for(b=0;b<a.length;b++)c[d?q(a[b]):a[b]]=!0;return c}function t(a,d){d&&d.length&&g(a,A(d))}function P(a){for(var d={},c=0,b=a.length;c<b;c++){var k=a[c];d[k.name]=k.value}return d}function K(a){return a.replace(/&/g,"&amp;").replace(Q,function(a){var c=
a.charCodeAt(0);a=a.charCodeAt(1);return"&#"+(1024*(c-55296)+(a-56320)+65536)+";"}).replace(u,function(a){return"&#"+a.charCodeAt(0)+";"}).replace(/</g,"&lt;").replace(/>/g,"&gt;")}function z(a){for(;a;){if(a.nodeType===s.Node.ELEMENT_NODE)for(var d=a.attributes,c=0,b=d.length;c<b;c++){var k=d[c],f=k.name.toLowerCase();if("xmlns:ns1"===f||0===f.lastIndexOf("ns1:",0))a.removeAttributeNode(k),c--,b--}(d=a.firstChild)&&z(d);a=v("nextSibling",a)}}function v(a,d){var c=d[a];if(c&&I.call(d,c))throw C("elclob",
d.outerHTML||d.outerText);return c}var y=!1,f=!1;this.$get=["$$sanitizeUri",function(a){y=!0;f&&g(m,l);return function(d){var c=[];J(d,B(c,function(b,c){return!/^unsafe:/.test(a(b,c))}));return c.join("")}}];this.enableSvg=function(a){return H(a)?(f=a,this):f};this.addValidElements=function(a){y||(G(a)&&(a={htmlElements:a}),t(l,a.svgElements),t(r,a.htmlVoidElements),t(m,a.htmlVoidElements),t(m,a.htmlElements));return this};this.addValidAttrs=function(a){y||g(L,A(a,!0));return this};E=e.bind;g=e.extend;
F=e.forEach;G=e.isArray;H=e.isDefined;q=e.$$lowercase;D=e.noop;J=function(a,d){null===a||void 0===a?a="":"string"!==typeof a&&(a=""+a);var c=M(a);if(!c)return"";var b=5;do{if(0===b)throw C("uinput");b--;a=c.innerHTML;c=M(a)}while(a!==c.innerHTML);for(b=c.firstChild;b;){switch(b.nodeType){case 1:d.start(b.nodeName.toLowerCase(),P(b.attributes));break;case 3:d.chars(b.textContent)}var k;if(!(k=b.firstChild)&&(1===b.nodeType&&d.end(b.nodeName.toLowerCase()),k=v("nextSibling",b),!k))for(;null==k;){b=
v("parentNode",b);if(b===c)break;k=v("nextSibling",b);1===b.nodeType&&d.end(b.nodeName.toLowerCase())}b=k}for(;b=c.firstChild;)c.removeChild(b)};B=function(a,d){var c=!1,b=E(a,a.push);return{start:function(a,f){a=q(a);!c&&w[a]&&(c=a);c||!0!==m[a]||(b("<"),b(a),F(f,function(c,f){var e=q(f),h="img"===a&&"src"===e||"background"===e;!0!==L[e]||!0===N[e]&&!d(c,h)||(b(" "),b(f),b('="'),b(K(c)),b('"'))}),b(">"))},end:function(a){a=q(a);c||!0!==m[a]||!0===r[a]||(b("</"),b(a),b(">"));a==c&&(c=!1)},chars:function(a){c||
b(K(a))}}};I=s.Node.prototype.contains||function(a){return!!(this.compareDocumentPosition(a)&16)};var Q=/[\uD800-\uDBFF][\uDC00-\uDFFF]/g,u=/([^#-~ |!])/g,r=h("area,br,col,hr,img,wbr"),x=h("colgroup,dd,dt,li,p,tbody,td,tfoot,th,thead,tr"),p=h("rp,rt"),n=g({},p,x),x=g({},x,h("address,article,aside,blockquote,caption,center,del,dir,div,dl,figure,figcaption,footer,h1,h2,h3,h4,h5,h6,header,hgroup,hr,ins,map,menu,nav,ol,pre,section,table,ul")),p=g({},p,h("a,abbr,acronym,b,bdi,bdo,big,br,cite,code,del,dfn,em,font,i,img,ins,kbd,label,map,mark,q,ruby,rp,rt,s,samp,small,span,strike,strong,sub,sup,time,tt,u,var")),
l=h("circle,defs,desc,ellipse,font-face,font-face-name,font-face-src,g,glyph,hkern,image,linearGradient,line,marker,metadata,missing-glyph,mpath,path,polygon,polyline,radialGradient,rect,stop,svg,switch,text,title,tspan"),w=h("script,style"),m=g({},r,x,p,n),N=h("background,cite,href,longdesc,src,xlink:href,xml:base"),n=h("abbr,align,alt,axis,bgcolor,border,cellpadding,cellspacing,class,clear,color,cols,colspan,compact,coords,dir,face,headers,height,hreflang,hspace,ismap,lang,language,nohref,nowrap,rel,rev,rows,rowspan,rules,scope,scrolling,shape,size,span,start,summary,tabindex,target,title,type,valign,value,vspace,width"),
p=h("accent-height,accumulate,additive,alphabetic,arabic-form,ascent,baseProfile,bbox,begin,by,calcMode,cap-height,class,color,color-rendering,content,cx,cy,d,dx,dy,descent,display,dur,end,fill,fill-rule,font-family,font-size,font-stretch,font-style,font-variant,font-weight,from,fx,fy,g1,g2,glyph-name,gradientUnits,hanging,height,horiz-adv-x,horiz-origin-x,ideographic,k,keyPoints,keySplines,keyTimes,lang,marker-end,marker-mid,marker-start,markerHeight,markerUnits,markerWidth,mathematical,max,min,offset,opacity,orient,origin,overline-position,overline-thickness,panose-1,path,pathLength,points,preserveAspectRatio,r,refX,refY,repeatCount,repeatDur,requiredExtensions,requiredFeatures,restart,rotate,rx,ry,slope,stemh,stemv,stop-color,stop-opacity,strikethrough-position,strikethrough-thickness,stroke,stroke-dasharray,stroke-dashoffset,stroke-linecap,stroke-linejoin,stroke-miterlimit,stroke-opacity,stroke-width,systemLanguage,target,text-anchor,to,transform,type,u1,u2,underline-position,underline-thickness,unicode,unicode-range,units-per-em,values,version,viewBox,visibility,width,widths,x,x-height,x1,x2,xlink:actuate,xlink:arcrole,xlink:role,xlink:show,xlink:title,xlink:type,xml:base,xml:lang,xml:space,xmlns,xmlns:xlink,y,y1,y2,zoomAndPan",
!0),L=g({},N,p,n),M=function(a,d){function c(b){b="<remove></remove>"+b;try{var c=(new a.DOMParser).parseFromString(b,"text/html").body;c.firstChild.remove();return c}catch(d){}}var b;try{b=!!c("")}catch(f){b=!1}if(b)return c;if(!d||!d.implementation)throw C("noinert");b=d.implementation.createHTMLDocument("inert");var e=(b.documentElement||b.getDocumentElement()).querySelector("body");return function(a){e.innerHTML=a;d.documentMode&&z(e);return e}}(s,s.document)}).info({angularVersion:"1.9.6"});
e.module("ngSanitize").filter("linky",["$sanitize",function(h){var g=/((s?ftp|https?):\/\/|(www\.)|(mailto:)?[A-Za-z0-9._%+-]+@)\S*[^\s.;,(){}<>"\u201d\u2019]/i,t=/^mailto:/i,q=e.$$minErr("linky"),s=e.isDefined,z=e.isFunction,v=e.isObject,y=e.isString;return function(f,e,u){function r(e){e&&l.push(O(e))}function x(f,h){var g,a=p(f);l.push("<a ");for(g in a)l.push(g+'="'+a[g]+'" ');!s(e)||"target"in a||l.push('target="',e,'" ');l.push('href="',f.replace(/"/g,"&quot;"),'">');r(h);l.push("</a>")}if(null==
f||""===f)return f;if(!y(f))throw q("notstring",f);for(var p=z(u)?u:v(u)?function(){return u}:function(){return{}},n=f,l=[],w,m;f=n.match(g);)w=f[0],f[2]||f[4]||(w=(f[3]?"http://":"mailto:")+w),m=f.index,r(n.substr(0,m)),x(w,f[0].replace(t,"")),n=n.substring(m+f[0].length);r(n);return h(l.join(""))}}])})(window,window.angular);
//# sourceMappingURL=angular-sanitize.min.js.map

var process = process || {env: {NODE_ENV: "development"}};
/*
 AngularJS
 (c) 2010-2020 Google LLC. http://angularjs.org
 License: MIT
 XLTS for AngularJS v1.9.6
 (c) 2022 XLTS.dev All Rights Reserved. https://xlts.dev/angularjs
 License: Obtain a commercial license from XLTS.dev before using this software.
*/
(function(Y,A){'use strict';function Fa(a,b,c){if(!a)throw Pa("areq",b||"?",c||"required");return a}function Ga(a,b){if(!a&&!b)return"";if(!a)return b;if(!b)return a;Z(a)&&(a=a.join(" "));Z(b)&&(b=b.join(" "));return a+" "+b}function Qa(a){var b={};a&&(a.to||a.from)&&(b.to=a.to,b.from=a.from);return b}function $(a,b,c){var d="";a=Z(a)?a:a&&H(a)&&a.length?a.split(/\s+/):[];r(a,function(a,h){a&&0<a.length&&(d+=0<h?" ":"",d+=c?b+a:a+b)});return d}function Ha(a){if(a instanceof B)switch(a.length){case 0:return a;
case 1:if(1===a[0].nodeType)return a;break;default:return B(va(a))}if(1===a.nodeType)return B(a)}function va(a){if(!a[0])return a;for(var b=0;b<a.length;b++){var c=a[b];if(1===c.nodeType)return c}}function Ra(a,b,c){r(b,function(b){a.addClass(b,c)})}function Sa(a,b,c){r(b,function(b){a.removeClass(b,c)})}function aa(a){return function(b,c){c.addClass&&(Ra(a,b,c.addClass),c.addClass=null);c.removeClass&&(Sa(a,b,c.removeClass),c.removeClass=null)}}function pa(a){a=a||{};if(!a.$$prepared){var b=a.domOperation||
N;a.domOperation=function(){a.$$domOperationFired=!0;b();b=N};a.$$prepared=!0}return a}function ha(a,b){Ia(a,b);Ja(a,b)}function Ia(a,b){b.from&&(a.css(b.from),b.from=null)}function Ja(a,b){b.to&&(a.css(b.to),b.to=null)}function T(a,b,c){var d=b.options||{};c=c.options||{};var e=(d.addClass||"")+" "+(c.addClass||""),h=(d.removeClass||"")+" "+(c.removeClass||"");a=Ta(a.attr("class"),e,h);c.preparationClasses&&(d.preparationClasses=ba(c.preparationClasses,d.preparationClasses),delete c.preparationClasses);
e=d.domOperation!==N?d.domOperation:null;wa(d,c);e&&(d.domOperation=e);d.addClass=a.addClass?a.addClass:null;d.removeClass=a.removeClass?a.removeClass:null;b.addClass=d.addClass;b.removeClass=d.removeClass;return d}function Ta(a,b,c){function d(a){H(a)&&(a=a.split(" "));var c={};r(a,function(a){a.length&&(c[a]=!0)});return c}var e={};a=d(a);b=d(b);r(b,function(a,c){e[c]=1});c=d(c);r(c,function(a,c){e[c]=1===e[c]?null:-1});var h={addClass:"",removeClass:""};r(e,function(c,b){var d,e;1===c?(d="addClass",
e=!a[b]||a[b+"-remove"]):-1===c&&(d="removeClass",e=a[b]||a[b+"-add"]);e&&(h[d].length&&(h[d]+=" "),h[d]+=b)});return h}function K(a){return a instanceof B?a[0]:a}function Ua(a,b,c,d){a="";c&&(a=$(c,"ng-",!0));d.addClass&&(a=ba(a,$(d.addClass,"-add")));d.removeClass&&(a=ba(a,$(d.removeClass,"-remove")));a.length&&(d.preparationClasses=a,b.addClass(a))}function xa(a,b){var c=b?"paused":"",d=ca+"PlayState";ma(a,[d,c]);return[d,c]}function ma(a,b){a.style[b[0]]=b[1]}function ba(a,b){return a?b?a+" "+
b:a:b}function Ka(a,b,c){var d=Object.create(null),e=a.getComputedStyle(b)||{};r(c,function(a,c){var b=e[a];"animationDuration"===a&&"auto"===b&&(b="0s");"animationIterationCount"===a&&"infinite"===b&&(b="1");if(b){var L=b.charAt(0);if("-"===L||"+"===L||0<=L)b=Va(b);0===b&&(b=null);d[c]=b}});return d}function Va(a){var b=0;a=a.split(/\s*,\s*/);r(a,function(a){"s"===a.charAt(a.length-1)&&(a=a.substring(0,a.length-1));a=parseFloat(a)||0;b=b?Math.max(a,b):a});return b}function ya(a){return 0===a||null!=
a}function La(a,b){var c=M,d=a+"s";b?c+="Duration":d+=" linear all";return[c,d]}function Ma(a,b,c){r(c,function(c){a[c]=za(a[c])?a[c]:b.style.getPropertyValue(c)})}var M,Aa,ca,Ba;void 0===Y.ontransitionend&&void 0!==Y.onwebkittransitionend?(M="WebkitTransition",Aa="webkitTransitionEnd transitionend"):(M="transition",Aa="transitionend");void 0===Y.onanimationend&&void 0!==Y.onwebkitanimationend?(ca="WebkitAnimation",Ba="webkitAnimationEnd animationend"):(ca="animation",Ba="animationend");var qa=ca+
"Delay",Ca=ca+"Duration",na=M+"Delay",Na=M+"Duration",Pa=A.$$minErr("ng"),ra={blockTransitions:function(a,b){var c=b?"-"+b+"s":"";ma(a,[na,c]);return[na,c]}},Wa={transitionDuration:Na,transitionDelay:na,transitionProperty:M+"Property",animationDuration:Ca,animationDelay:qa,animationIterationCount:ca+"IterationCount"},Xa={transitionDuration:Na,transitionDelay:na,animationDuration:Ca,animationDelay:qa},Da,wa,r,Z,za,sa,Ea,ta,H,R,B,N;A.module("ngAnimate",[],function(){N=A.noop;Da=A.copy;wa=A.extend;B=
A.element;r=A.forEach;Z=A.isArray;H=A.isString;ta=A.isObject;R=A.isUndefined;za=A.isDefined;Ea=A.isFunction;sa=A.isElement}).info({angularVersion:"1.9.6"}).directive("ngAnimateSwap",["$animate",function(a){return{restrict:"A",transclude:"element",terminal:!0,priority:550,link:function(b,c,d,e,h){var f,Q;b.$watchCollection(d.ngAnimateSwap||d["for"],function(b){f&&a.leave(f);Q&&(Q.$destroy(),Q=null);(b||0===b)&&h(function(b,d){f=b;Q=d;a.enter(b,null,c)})})}}}]).directive("ngAnimateChildren",["$interpolate",
function(a){return{link:function(b,c,d){function e(a){c.data("$$ngAnimateChildren","on"===a||"true"===a)}var h=d.ngAnimateChildren;H(h)&&0===h.length?c.data("$$ngAnimateChildren",!0):(e(a(h)(b)),d.$observe("ngAnimateChildren",e))}}}]).factory("$$rAFScheduler",["$$rAF",function(a){function b(a){d=d.concat(a);c()}function c(){if(d.length){for(var b=d.shift(),f=0;f<b.length;f++)b[f]();e||a(function(){e||c()})}}var d,e;d=b.queue=[];b.waitUntilQuiet=function(b){e&&e();e=a(function(){e=null;b();c()})};
return b}]).provider("$$animateQueue",["$animateProvider",function(a){function b(a){return{addClass:a.addClass,removeClass:a.removeClass,from:a.from,to:a.to}}function c(a){if(!a)return null;a=a.split(" ");var b=Object.create(null);r(a,function(a){b[a]=!0});return b}function d(a,b){if(a&&b){var d=c(b);return a.split(" ").some(function(a){return d[a]})}}function e(a,b,c){return f[a].some(function(a){return a(b,c)})}function h(a,b){var c=0<(a.addClass||"").length,d=0<(a.removeClass||"").length;return b?
c&&d:c||d}var f=this.rules={skip:[],cancel:[],join:[]};f.join.push(function(a,b){return!a.structural&&h(a)});f.skip.push(function(a,b){return!a.structural&&!h(a)});f.skip.push(function(a,b){return"leave"===b.event&&a.structural});f.skip.push(function(a,b){return b.structural&&2===b.state&&!a.structural});f.cancel.push(function(a,b){return b.structural&&a.structural});f.cancel.push(function(a,b){return 2===b.state&&a.structural});f.cancel.push(function(a,b){if(b.structural)return!1;var c=a.addClass,
e=a.removeClass,h=b.addClass,f=b.removeClass;return R(c)&&R(e)||R(h)&&R(f)?!1:d(c,f)||d(e,h)});this.$get=["$$rAF","$rootScope","$rootElement","$document","$$Map","$$animation","$$AnimateRunner","$templateRequest","$$jqLite","$$forceReflow","$$isDocumentHidden",function(c,d,f,D,U,oa,I,v,u,l,da){function ia(a){O.delete(a.target)}function w(){var a=!1;return function(b){a?b():d.$$postDigest(function(){a=!0;b()})}}function ua(a,b,c){var g=[],k=m[c];k&&r(k,function(k){Oa.call(k.node,b)?g.push(k.callback):
"leave"===c&&Oa.call(k.node,a)&&g.push(k.callback)});return g}function x(a,b,c){var k=va(b);return a.filter(function(a){return!(a.node===k&&(!c||a.callback===c))})}function t(a,J,y){function f(a,b,k,g){v(function(){var a=ua(ia,m,b);a.length?c(function(){r(a,function(a){a(l,k,g)});"close"!==k||m.parentNode||G.off(m)}):"close"!==k||m.parentNode||G.off(m)});a.progress(b,k,g)}function x(a){var b=l,c=n;c.preparationClasses&&(b.removeClass(c.preparationClasses),c.preparationClasses=null);c.activeClasses&&
(b.removeClass(c.activeClasses),c.activeClasses=null);W(l,n);ha(l,n);n.domOperation();t.complete(!a)}var n=Da(y),l=Ha(a),m=K(l),ia=m&&m.parentNode,n=pa(n),t=new I,v=w();Z(n.addClass)&&(n.addClass=n.addClass.join(" "));n.addClass&&!H(n.addClass)&&(n.addClass=null);Z(n.removeClass)&&(n.removeClass=n.removeClass.join(" "));n.removeClass&&!H(n.removeClass)&&(n.removeClass=null);n.from&&!ta(n.from)&&(n.from=null);n.to&&!ta(n.to)&&(n.to=null);if(!(C&&m&&fa(m,J,y)&&Ya(m,n)))return x(),t;var s=0<=["enter",
"move","leave"].indexOf(J),q=da(),P=q||O.get(m);y=!P&&z.get(m)||{};var p=!!y.state;P||p&&1===y.state||(P=!E(m,ia,J));if(P)return q&&f(t,J,"start",b(n)),x(),q&&f(t,J,"close",b(n)),t;s&&F(m);q={structural:s,element:l,event:J,addClass:n.addClass,removeClass:n.removeClass,close:x,options:n,runner:t};if(p){if(e("skip",q,y)){if(2===y.state)return x(),t;T(l,y,q);return y.runner}if(e("cancel",q,y))if(2===y.state)y.runner.end();else if(y.structural)y.close();else return T(l,y,q),y.runner;else if(e("join",
q,y))if(2===y.state)T(l,q,{});else return Ua(u,l,s?J:null,n),J=q.event=y.event,n=T(l,y,q),y.runner}else T(l,q,{});(p=q.structural)||(p="animate"===q.event&&0<Object.keys(q.options.to||{}).length||h(q));if(!p)return x(),g(m),t;var D=(y.counter||0)+1;q.counter=D;k(m,1,q);d.$$postDigest(function(){l=Ha(a);var c=z.get(m),d=!c,c=c||{},u=0<(l.parent()||[]).length&&("animate"===c.event||c.structural||h(c));if(d||c.counter!==D||!u){d&&(W(l,n),ha(l,n));if(d||s&&c.event!==J)n.domOperation(),t.end();u||g(m)}else J=
!c.structural&&h(c,!0)?"setClass":c.event,k(m,2),c=oa(l,J,c.options),t.setHost(c),f(t,J,"start",b(n)),c.done(function(a){x(!a);(a=z.get(m))&&a.counter===D&&g(m);f(t,J,"close",b(n))})});return t}function F(a){a=a.querySelectorAll("[data-ng-animate]");r(a,function(a){var b=parseInt(a.getAttribute("data-ng-animate"),10),c=z.get(a);if(c)switch(b){case 2:c.runner.end();case 1:z.delete(a)}})}function g(a){a.removeAttribute("data-ng-animate");z.delete(a)}function E(a,b,c){c=D[0].body;var k=K(f),g=a===c||
"HTML"===a.nodeName,d=a===k,u=!1,m=O.get(a),e;for((a=B.data(a,"$ngAnimatePin"))&&(b=K(a));b;){d||(d=b===k);if(1!==b.nodeType)break;a=z.get(b)||{};if(!u){var l=O.get(b);if(!0===l&&!1!==m){m=!0;break}else!1===l&&(m=!1);u=a.structural}if(R(e)||!0===e)a=B.data(b,"$$ngAnimateChildren"),za(a)&&(e=a);if(u&&!1===e)break;g||(g=b===c);if(g&&d)break;if(!d&&(a=B.data(b,"$ngAnimatePin"))){b=K(a);continue}b=b.parentNode}return(!u||e)&&!0!==m&&d&&g}function k(a,b,c){c=c||{};c.state=b;a.setAttribute("data-ng-animate",
b);c=(b=z.get(a))?wa(b,c):c;z.set(a,c)}var z=new U,O=new U,C=null,P=d.$watch(function(){return 0===v.totalPendingRequests},function(a){a&&(P(),d.$$postDigest(function(){d.$$postDigest(function(){null===C&&(C=!0)})}))}),m=Object.create(null);U=a.customFilter();var la=a.classNameFilter();l=function(){return!0};var fa=U||l,Ya=la?function(a,b){var c=[a.getAttribute("class"),b.addClass,b.removeClass].join(" ");return la.test(c)}:l,W=aa(u),Oa=Y.Node.prototype.contains||function(a){return this===a||!!(this.compareDocumentPosition(a)&
16)},G={on:function(a,b,c){var k=va(b);m[a]=m[a]||[];m[a].push({node:k,callback:c});B(b).on("$destroy",function(){z.get(k)||G.off(a,b,c)})},off:function(a,b,c){if(1!==arguments.length||H(arguments[0])){var k=m[a];k&&(m[a]=1===arguments.length?null:x(k,b,c))}else for(k in b=arguments[0],m)m[k]=x(m[k],b)},pin:function(a,b){Fa(sa(a),"element","not an element");Fa(sa(b),"parentElement","not an element");a.data("$ngAnimatePin",b)},push:function(a,b,c,k){c=c||{};c.domOperation=k;return t(a,b,c)},enabled:function(a,
b){var c=arguments.length;if(0===c)b=!!C;else if(sa(a)){var k=K(a);if(1===c)b=!O.get(k);else{if(!O.has(k))B(a).on("$destroy",ia);O.set(k,!b)}}else b=C=!!a;return b}};return G}]}]).provider("$$animateCache",function(){var a=0,b=Object.create(null);this.$get=[function(){return{cacheKey:function(b,d,e,h){var f=b.parentNode;b=[f.$$ngAnimateParentKey||(f.$$ngAnimateParentKey=++a),d,b.getAttribute("class")];e&&b.push(e);h&&b.push(h);return b.join(" ")},containsCachedAnimationWithoutDuration:function(a){return(a=
b[a])&&!a.isValid||!1},flush:function(){b=Object.create(null)},count:function(a){return(a=b[a])?a.total:0},get:function(a){return(a=b[a])&&a.value},put:function(a,d,e){b[a]?(b[a].total++,b[a].value=d):b[a]={total:1,value:d,isValid:e}}}}]}).provider("$$animation",["$animateProvider",function(a){var b=this.drivers=[];this.$get=["$$jqLite","$rootScope","$injector","$$AnimateRunner","$$Map","$$rAFScheduler","$$animateCache",function(a,d,e,h,f,Q,L){function s(a){function b(a){if(a.processed)return a;a.processed=
!0;var d=a.domNode,u=d.parentNode;e.set(d,a);for(var f;u;){if(f=e.get(u)){f.processed||(f=b(f));break}u=u.parentNode}(f||c).children.push(a);return a}var c={children:[]},d,e=new f;for(d=0;d<a.length;d++){var da=a[d];e.set(da.domNode,a[d]={domNode:da.domNode,element:da.element,fn:da.fn,children:[]})}for(d=0;d<a.length;d++)b(a[d]);return function(a){var b=[],c=[],d;for(d=0;d<a.children.length;d++)c.push(a.children[d]);a=c.length;var u=0,e=[];for(d=0;d<c.length;d++){var g=c[d];0>=a&&(a=u,u=0,b.push(e),
e=[]);e.push(g);g.children.forEach(function(a){u++;c.push(a)});a--}e.length&&b.push(e);return b}(c)}var D=[],U=aa(a);return function(f,I,v){function u(a){a=a.hasAttribute("ng-animate-ref")?[a]:a.querySelectorAll("[ng-animate-ref]");var b=[];r(a,function(a){var c=a.getAttribute("ng-animate-ref");c&&c.length&&b.push(a)});return b}function l(a){var b=[],c={};r(a,function(a,d){var k=K(a.element),g=0<=["enter","move"].indexOf(a.event),k=a.structural?u(k):[];if(k.length){var e=g?"to":"from";r(k,function(a){var b=
a.getAttribute("ng-animate-ref");c[b]=c[b]||{};c[b][e]={animationID:d,element:B(a)}})}else b.push(a)});var d={},g={};r(c,function(c,u){var e=c.from,f=c.to;if(e&&f){var l=a[e.animationID],h=a[f.animationID],E=e.animationID.toString();if(!g[E]){var F=g[E]={structural:!0,beforeStart:function(){l.beforeStart();h.beforeStart()},close:function(){l.close();h.close()},classes:da(l.classes,h.classes),from:l,to:h,anchors:[]};F.classes.length?b.push(F):(b.push(l),b.push(h))}g[E].anchors.push({out:e.element,
"in":f.element})}else e=e?e.animationID:f.animationID,f=e.toString(),d[f]||(d[f]=!0,b.push(a[e]))});return b}function da(a,b){a=a.split(" ");b=b.split(" ");for(var c=[],d=0;d<a.length;d++){var g=a[d];if("ng-"!==g.substring(0,3))for(var u=0;u<b.length;u++)if(g===b[u]){c.push(g);break}}return c.join(" ")}function ia(a){for(var c=b.length-1;0<=c;c--){var d=e.get(b[c])(a);if(d)return d}}function w(a,b){function c(a){(a=a.data("$$animationRunner"))&&a.setHost(b)}a.from&&a.to?(c(a.from.element),c(a.to.element)):
c(a.element)}function ua(){var a=f.data("$$animationRunner");!a||"leave"===I&&v.$$domOperationFired||a.end()}function x(b){f.off("$destroy",ua);f.removeData("$$animationRunner");U(f,v);ha(f,v);v.domOperation();E&&a.removeClass(f,E);F.complete(!b)}v=pa(v);var t=0<=["enter","move","leave"].indexOf(I),F=new h({end:function(){x()},cancel:function(){x(!0)}});if(!b.length)return x(),F;var g=Ga(f.attr("class"),Ga(v.addClass,v.removeClass)),E=v.tempClasses;E&&(g+=" "+E,v.tempClasses=null);t&&f.data("$$animatePrepareClasses",
"ng-"+I+"-prepare");f.data("$$animationRunner",F);D.push({element:f,classes:g,event:I,structural:t,options:v,beforeStart:function(){E=(E?E+" ":"")+"ng-animate";a.addClass(f,E);var b=f.data("$$animatePrepareClasses");b&&a.removeClass(f,b)},close:x});f.on("$destroy",ua);if(1<D.length)return F;d.$$postDigest(function(){var b=[];r(D,function(a){a.element.data("$$animationRunner")?b.push(a):a.close()});D.length=0;var d=l(b),g=[];r(d,function(a){var b=a.from?a.from.element:a.element,c=v.addClass,d=L.cacheKey(b[0],
a.event,(c?c+" ":"")+"ng-animate",v.removeClass);g.push({element:b,domNode:K(b),fn:function(){var b,c=a.close;if(L.containsCachedAnimationWithoutDuration(d))c();else{a.beforeStart();if((a.anchors?a.from.element||a.to.element:a.element).data("$$animationRunner")){var g=ia(a);g&&(b=g.start)}b?(b=b(),b.done(function(a){c(!a)}),w(a,b)):c()}}})});for(var d=s(g),u=0;u<d.length;u++)for(var e=d[u],f=0;f<e.length;f++){var h=e[f],E=h.element;d[u][f]=h.fn;0===u?E.removeData("$$animatePrepareClasses"):(h=E.data("$$animatePrepareClasses"))&&
a.addClass(E,h)}Q(d)});return F}}]}]).provider("$animateCss",["$animateProvider",function(a){this.$get=["$window","$$jqLite","$$AnimateRunner","$timeout","$$animateCache","$$forceReflow","$sniffer","$$rAFScheduler","$$animateQueue",function(a,c,d,e,h,f,Q,L,s){function D(d,e,f,s){var w,r="stagger-"+f;0<h.count(f)&&(w=h.get(r),w||(e=$(e,"-stagger"),c.addClass(d,e),w=Ka(a,d,s),w.animationDuration=Math.max(w.animationDuration,0),w.transitionDuration=Math.max(w.transitionDuration,0),c.removeClass(d,e),
h.put(r,w,!0)));return w||{}}function U(a){v.push(a);L.waitUntilQuiet(function(){h.flush();for(var a=f(),b=0;b<v.length;b++)v[b](a);v.length=0})}function A(c,d,e,f){(d=h.get(e))||(d=Ka(a,c,Wa));h.put(e,d,f||0<d.transitionDuration||0<d.animationDuration);c=d;e=c.animationDelay;f=c.transitionDelay;c.maxDelay=e&&f?Math.max(e,f):e||f;c.maxDuration=Math.max(c.animationDuration*c.animationIterationCount,c.transitionDuration);return c}var I=aa(c),v=[];return function(a,b){function f(){w()}function L(){w(!0)}
function w(b){if(!(P||la&&m)){P=!0;m=!1;V&&!g.$$skipPreparationClasses&&c.removeClass(a,V);ba&&c.removeClass(a,ba);xa(k,!1);ra.blockTransitions(k,!1);r(z,function(a){k.style[a[0]]=""});I(a,g);ha(a,g);Object.keys(E).length&&r(E,function(a,b){a?k.style.setProperty(b,a):k.style.removeProperty(b)});if(g.onDone)g.onDone();y&&y.length&&a.off(y.join(" "),t);var d=a.data("$$animateCss");d&&(e.cancel(d[0].timer),a.removeData("$$animateCss"));fa&&fa.complete(!b)}}function v(a){p.blockTransition&&ra.blockTransitions(k,
a);p.blockKeyframeAnimation&&xa(k,!!a)}function x(){fa=new d({end:f,cancel:L});U(N);w();return{$$willAnimate:!1,start:function(){return fa},end:f}}function t(a){a.stopPropagation();var b=a.originalEvent||a;b.target===k&&(a=b.$manualTimeStamp||Date.now(),b=parseFloat(b.elapsedTime.toFixed(3)),Math.max(a-J,0)>=H&&b>=G&&(la=!0,w()))}function F(){function b(){if(!P){v(!1);r(z,function(a){k.style[a[0]]=a[1]});I(a,g);c.addClass(a,ba);if(p.recalculateTimingStyles){T=k.getAttribute("class")+" "+V;ka=h.cacheKey(k,
ja,g.addClass,g.removeClass);q=A(k,T,ka,!1);ga=q.maxDelay;W=Math.max(ga,0);G=q.maxDuration;if(0===G){w();return}p.hasTransitions=0<q.transitionDuration;p.hasAnimations=0<q.animationDuration}p.applyAnimationDelay&&(ga="boolean"!==typeof g.delay&&ya(g.delay)?parseFloat(g.delay):ga,W=Math.max(ga,0),q.animationDelay=ga,ea=[qa,ga+"s"],z.push(ea),k.style[ea[0]]=ea[1]);H=1E3*W;R=1E3*G;if(g.easing){var f,l=g.easing;p.hasTransitions&&(f=M+"TimingFunction",z.push([f,l]),k.style[f]=l);p.hasAnimations&&(f=ca+
"TimingFunction",z.push([f,l]),k.style[f]=l)}q.transitionDuration&&y.push(Aa);q.animationDuration&&y.push(Ba);J=Date.now();var m=H+1.5*R;f=J+m;var l=a.data("$$animateCss")||[],F=!0;if(l.length){var n=l[0];(F=f>n.expectedEndTime)?e.cancel(n.timer):l.push(w)}F&&(m=e(d,m,!1),l[0]={timer:m,expectedEndTime:f},l.push(w),a.data("$$animateCss",l));if(y.length)a.on(y.join(" "),t);g.to&&(g.cleanupStyles&&Ma(E,k,Object.keys(g.to)),Ja(a,g))}}function d(){var b=a.data("$$animateCss");if(b){for(var c=1;c<b.length;c++)b[c]();
a.removeData("$$animateCss")}}if(!P)if(k.parentNode){var f=function(a){if(la)m&&a&&(m=!1,w());else if(m=!a,q.animationDuration)if(a=xa(k,m),m)z.push(a);else{var b=z,c=b.indexOf(a);0<=a&&b.splice(c,1)}},l=0<aa&&(q.transitionDuration&&0===X.transitionDuration||q.animationDuration&&0===X.animationDuration)&&Math.max(X.animationDelay,X.transitionDelay);l?e(b,Math.floor(l*aa*1E3),!1):b();B.resume=function(){f(!0)};B.pause=function(){f(!1)}}else w()}var g=b||{};g.$$prepared||(g=pa(Da(g)));var E={},k=K(a);
if(!k||!k.parentNode||!s.enabled())return x();var z=[],O=a.attr("class"),C=Qa(g),P,m,la,fa,B,W,H,G,R,J,y=[];if(0===g.duration||!Q.animations&&!Q.transitions)return x();var ja=g.event&&Z(g.event)?g.event.join(" "):g.event,Y=ja&&g.structural,n="",S="";Y?n=$(ja,"ng-",!0):ja&&(n=ja);g.addClass&&(S+=$(g.addClass,"-add"));g.removeClass&&(S.length&&(S+=" "),S+=$(g.removeClass,"-remove"));g.applyClassesEarly&&S.length&&I(a,g);var V=[n,S].join(" ").trim(),T=O+" "+V,O=C.to&&0<Object.keys(C.to).length;if(!(0<
(g.keyframeStyle||"").length||O||V))return x();var X,ka=h.cacheKey(k,ja,g.addClass,g.removeClass);if(h.containsCachedAnimationWithoutDuration(ka))return V=null,x();0<g.stagger?(C=parseFloat(g.stagger),X={transitionDelay:C,animationDelay:C,transitionDuration:0,animationDuration:0}):X=D(k,V,ka,Xa);g.$$skipPreparationClasses||c.addClass(a,V);g.transitionStyle&&(C=[M,g.transitionStyle],ma(k,C),z.push(C));0<=g.duration&&(C=0<k.style[M].length,C=La(g.duration,C),ma(k,C),z.push(C));g.keyframeStyle&&(C=[ca,
g.keyframeStyle],ma(k,C),z.push(C));var aa=X?0<=g.staggerIndex?g.staggerIndex:h.count(ka):0;(n=0===aa)&&!g.skipBlocking&&ra.blockTransitions(k,9999);var q=A(k,T,ka,!Y),ga=q.maxDelay;W=Math.max(ga,0);G=q.maxDuration;var p={};p.hasTransitions=0<q.transitionDuration;p.hasAnimations=0<q.animationDuration;p.hasTransitionAll=p.hasTransitions&&"all"===q.transitionProperty;p.applyTransitionDuration=O&&(p.hasTransitions&&!p.hasTransitionAll||p.hasAnimations&&!p.hasTransitions);p.applyAnimationDuration=g.duration&&
p.hasAnimations;p.applyTransitionDelay=ya(g.delay)&&(p.applyTransitionDuration||p.hasTransitions);p.applyAnimationDelay=ya(g.delay)&&p.hasAnimations;p.recalculateTimingStyles=0<S.length;if(p.applyTransitionDuration||p.applyAnimationDuration)G=g.duration?parseFloat(g.duration):G,p.applyTransitionDuration&&(p.hasTransitions=!0,q.transitionDuration=G,C=0<k.style[M+"Property"].length,z.push(La(G,C))),p.applyAnimationDuration&&(p.hasAnimations=!0,q.animationDuration=G,z.push([Ca,G+"s"]));if(0===G&&!p.recalculateTimingStyles)return x();
var ba=$(V,"-active");if(null!=g.delay){var ea;"boolean"!==typeof g.delay&&(ea=parseFloat(g.delay),W=Math.max(ea,0));p.applyTransitionDelay&&z.push([na,ea+"s"]);p.applyAnimationDelay&&z.push([qa,ea+"s"])}null==g.duration&&0<q.transitionDuration&&(p.recalculateTimingStyles=p.recalculateTimingStyles||n);H=1E3*W;R=1E3*G;g.skipBlocking||(p.blockTransition=0<q.transitionDuration,p.blockKeyframeAnimation=0<q.animationDuration&&0<X.animationDelay&&0===X.animationDuration);g.from&&(g.cleanupStyles&&Ma(E,
k,Object.keys(g.from)),Ia(a,g));p.blockTransition||p.blockKeyframeAnimation?v(G):g.skipBlocking||ra.blockTransitions(k,!1);return{$$willAnimate:!0,end:f,start:function(){if(!P)return B={end:f,cancel:L,resume:null,pause:null},fa=new d(B),U(F),fa}}}}]}]).provider("$$animateCssDriver",["$$animationProvider",function(a){a.drivers.push("$$animateCssDriver");this.$get=["$animateCss","$rootScope","$$AnimateRunner","$rootElement","$sniffer","$$jqLite","$document",function(a,c,d,e,h,f,Q){function L(a){return a.replace(/\bng-\S+\b/g,
"")}function s(a,b){H(a)&&(a=a.split(" "));H(b)&&(b=b.split(" "));return a.filter(function(a){return-1===b.indexOf(a)}).join(" ")}function D(c,f,e){function h(a){var b={},c=K(a).getBoundingClientRect();r(["width","height","top","left"],function(a){var d=c[a];switch(a){case "top":d+=I.scrollTop;break;case "left":d+=I.scrollLeft}b[a]=Math.floor(d)+"px"});return b}function w(){var c=L(e.attr("class")||""),d=s(c,t),c=s(t,c),d=a(x,{to:h(e),addClass:"ng-anchor-in "+d,removeClass:"ng-anchor-out "+c,delay:!0});
return d.$$willAnimate?d:null}function D(){x.remove();f.removeClass("ng-animate-shim");e.removeClass("ng-animate-shim")}var x=B(K(f).cloneNode(!0)),t=L(x.attr("class")||"");f.addClass("ng-animate-shim");e.addClass("ng-animate-shim");x.addClass("ng-anchor");v.append(x);var F;c=function(){var c=a(x,{addClass:"ng-anchor-out",delay:!0,from:h(f)});return c.$$willAnimate?c:null}();if(!c&&(F=w(),!F))return D();var g=c||F;return{start:function(){function a(){c&&c.end()}var b,c=g.start();c.done(function(){c=
null;if(!F&&(F=w()))return c=F.start(),c.done(function(){c=null;D();b.complete()}),c;D();b.complete()});return b=new d({end:a,cancel:a})}}}function A(a,b,c,f){var e=oa(a,N),h=oa(b,N),s=[];r(f,function(a){(a=D(c,a.out,a["in"]))&&s.push(a)});if(e||h||0!==s.length)return{start:function(){function a(){r(b,function(a){a.end()})}var b=[];e&&b.push(e.start());h&&b.push(h.start());r(s,function(a){b.push(a.start())});var c=new d({end:a,cancel:a});d.all(b,function(a){c.complete(a)});return c}}}function oa(c){var d=
c.element,f=c.options||{};c.structural&&(f.event=c.event,f.structural=!0,f.applyClassesEarly=!0,"leave"===c.event&&(f.onDone=f.domOperation));f.preparationClasses&&(f.event=ba(f.event,f.preparationClasses));c=a(d,f);return c.$$willAnimate?c:null}if(!h.animations&&!h.transitions)return N;var I=Q[0].body;c=K(e);var v=B(c.parentNode&&11===c.parentNode.nodeType||I.contains(c)?c:I);return function(a){return a.from&&a.to?A(a.from,a.to,a.classes,a.anchors):oa(a)}}]}]).provider("$$animateJs",["$animateProvider",
function(a){this.$get=["$injector","$$AnimateRunner","$$jqLite",function(b,c,d){function e(c){c=Z(c)?c:c.split(" ");for(var d=[],e={},h=0;h<c.length;h++){var r=c[h],A=a.$$registeredAnimations[r];A&&!e[r]&&(d.push(b.get(A)),e[r]=!0)}return d}var h=aa(d);return function(a,b,d,s){function D(){s.domOperation();h(a,s)}function A(a,b,d,f,e){switch(d){case "animate":b=[b,f.from,f.to,e];break;case "setClass":b=[b,u,l,e];break;case "addClass":b=[b,u,e];break;case "removeClass":b=[b,l,e];break;default:b=[b,
e]}b.push(f);if(a=a.apply(a,b))if(Ea(a.start)&&(a=a.start()),a instanceof c)a.done(e);else if(Ea(a))return a;return N}function B(a,b,d,e,f){var h=[];r(e,function(e){var k=e[f];k&&h.push(function(){var e,f,h=!1,l=function(a){h||(h=!0,(f||N)(a),e.complete(!a))};e=new c({end:function(){l()},cancel:function(){l(!0)}});f=A(k,a,b,d,function(a){l(!1===a)});return e})});return h}function I(a,b,d,e,f){var h=B(a,b,d,e,f);if(0===h.length){var l,s;"beforeSetClass"===f?(l=B(a,"removeClass",d,e,"beforeRemoveClass"),
s=B(a,"addClass",d,e,"beforeAddClass")):"setClass"===f&&(l=B(a,"removeClass",d,e,"removeClass"),s=B(a,"addClass",d,e,"addClass"));l&&(h=h.concat(l));s&&(h=h.concat(s))}if(0!==h.length)return function(a){var b=[];h.length&&r(h,function(a){b.push(a())});b.length?c.all(b,a):a();return function(a){r(b,function(b){a?b.cancel():b.end()})}}}var v=!1;3===arguments.length&&ta(d)&&(s=d,d=null);s=pa(s);d||(d=a.attr("class")||"",s.addClass&&(d+=" "+s.addClass),s.removeClass&&(d+=" "+s.removeClass));var u=s.addClass,
l=s.removeClass,H=e(d),K,w;if(H.length){var M,x;"leave"===b?(x="leave",M="afterLeave"):(x="before"+b.charAt(0).toUpperCase()+b.substr(1),M=b);"enter"!==b&&"move"!==b&&(K=I(a,b,s,H,x));w=I(a,b,s,H,M)}if(K||w){var t;return{$$willAnimate:!0,end:function(){t?t.end():(v=!0,D(),ha(a,s),t=new c,t.complete(!0));return t},start:function(){function b(c){v=!0;D();ha(a,s);t.complete(c)}if(t)return t;t=new c;var d,e=[];K&&e.push(function(a){d=K(a)});e.length?e.push(function(a){D();a(!0)}):D();w&&e.push(function(a){d=
w(a)});t.setHost({end:function(){v||((d||N)(void 0),b(void 0))},cancel:function(){v||((d||N)(!0),b(!0))}});c.chain(e,b);return t}}}}}]}]).provider("$$animateJsDriver",["$$animationProvider",function(a){a.drivers.push("$$animateJsDriver");this.$get=["$$animateJs","$$AnimateRunner",function(a,c){function d(c){return a(c.element,c.event,c.classes,c.options)}return function(a){if(a.from&&a.to){var b=d(a.from),f=d(a.to);if(b||f)return{start:function(){function a(){return function(){r(d,function(a){a.end()})}}
var d=[];b&&d.push(b.start());f&&d.push(f.start());c.all(d,function(a){e.complete(a)});var e=new c({end:a(),cancel:a()});return e}}}else return d(a)}}]}])})(window,window.angular);
//# sourceMappingURL=angular-animate.min.js.map

var process = process || {env: {NODE_ENV: "development"}};
/**
 * State-based routing for AngularJS
 * @version v0.3.2
 * @link http://angular-ui.github.com/
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */
"undefined"!=typeof module&&"undefined"!=typeof exports&&module.exports===exports&&(module.exports="ui.router"),function(a,b,c){"use strict";function d(a,b){return S(new(S(function(){},{prototype:a})),b)}function e(a){return R(arguments,function(b){b!==a&&R(b,function(b,c){a.hasOwnProperty(c)||(a[c]=b)})}),a}function f(a,b){var c=[];for(var d in a.path){if(a.path[d]!==b.path[d])break;c.push(a.path[d])}return c}function g(a){if(Object.keys)return Object.keys(a);var b=[];return R(a,function(a,c){b.push(c)}),b}function h(a,b){if(Array.prototype.indexOf)return a.indexOf(b,Number(arguments[2])||0);var c=a.length>>>0,d=Number(arguments[2])||0;for(d=d<0?Math.ceil(d):Math.floor(d),d<0&&(d+=c);d<c;d++)if(d in a&&a[d]===b)return d;return-1}function i(a,b,c,d){var e,i=f(c,d),j={},k=[];for(var l in i)if(i[l]&&i[l].params&&(e=g(i[l].params),e.length))for(var m in e)h(k,e[m])>=0||(k.push(e[m]),j[e[m]]=a[e[m]]);return S({},j,b)}function j(a,b,c){if(!c){c=[];for(var d in a)c.push(d)}for(var e=0;e<c.length;e++){var f=c[e];if(a[f]!=b[f])return!1}return!0}function k(a,b){var c={};return R(a,function(a){c[a]=b[a]}),c}function l(a){var b={},c=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1));return R(c,function(c){c in a&&(b[c]=a[c])}),b}function m(a){var b={},c=Array.prototype.concat.apply(Array.prototype,Array.prototype.slice.call(arguments,1));for(var d in a)h(c,d)==-1&&(b[d]=a[d]);return b}function n(a,b){var c=Q(a),d=c?[]:{};return R(a,function(a,e){b(a,e)&&(d[c?d.length:e]=a)}),d}function o(a,b){var c=Q(a)?[]:{};return R(a,function(a,d){c[d]=b(a,d)}),c}function p(a){return a.then(c,function(){})&&a}function q(a,b){var d=1,f=2,i={},j=[],k=i,l=S(a.when(i),{$$promises:i,$$values:i});this.study=function(i){function n(a,c){if(s[c]!==f){if(r.push(c),s[c]===d)throw r.splice(0,h(r,c)),new Error("Cyclic dependency: "+r.join(" -> "));if(s[c]=d,O(a))q.push(c,[function(){return b.get(a)}],j);else{var e=b.annotate(a);R(e,function(a){a!==c&&i.hasOwnProperty(a)&&n(i[a],a)}),q.push(c,a,e)}r.pop(),s[c]=f}}function o(a){return P(a)&&a.then&&a.$$promises}if(!P(i))throw new Error("'invocables' must be an object");var p=g(i||{}),q=[],r=[],s={};return R(i,n),i=r=s=null,function(d,f,g){function h(){--u||(v||e(t,f.$$values),r.$$values=t,r.$$promises=r.$$promises||!0,delete r.$$inheritedValues,n.resolve(t))}function i(a){r.$$failure=a,n.reject(a)}function j(c,e,f){function j(a){l.reject(a),i(a)}function k(){if(!M(r.$$failure))try{l.resolve(b.invoke(e,g,t)),l.promise.then(function(a){t[c]=a,h()},j)}catch(a){j(a)}}var l=a.defer(),m=0;R(f,function(a){s.hasOwnProperty(a)&&!d.hasOwnProperty(a)&&(m++,s[a].then(function(b){t[a]=b,--m||k()},j))}),m||k(),s[c]=l.promise}if(o(d)&&g===c&&(g=f,f=d,d=null),d){if(!P(d))throw new Error("'locals' must be an object")}else d=k;if(f){if(!o(f))throw new Error("'parent' must be a promise returned by $resolve.resolve()")}else f=l;var n=a.defer(),r=n.promise,s=r.$$promises={},t=S({},d),u=1+q.length/3,v=!1;if(M(f.$$failure))return i(f.$$failure),r;f.$$inheritedValues&&e(t,m(f.$$inheritedValues,p)),S(s,f.$$promises),f.$$values?(v=e(t,m(f.$$values,p)),r.$$inheritedValues=m(f.$$values,p),h()):(f.$$inheritedValues&&(r.$$inheritedValues=m(f.$$inheritedValues,p)),f.then(h,i));for(var w=0,x=q.length;w<x;w+=3)d.hasOwnProperty(q[w])?h():j(q[w],q[w+1],q[w+2]);return r}},this.resolve=function(a,b,c,d){return this.study(a)(b,c,d)}}function r(a,b,c){this.fromConfig=function(a,b,c){return M(a.template)?this.fromString(a.template,b):M(a.templateUrl)?this.fromUrl(a.templateUrl,b):M(a.templateProvider)?this.fromProvider(a.templateProvider,b,c):null},this.fromString=function(a,b){return N(a)?a(b):a},this.fromUrl=function(c,d){return N(c)&&(c=c(d)),null==c?null:a.get(c,{cache:b,headers:{Accept:"text/html"}}).then(function(a){return a.data})},this.fromProvider=function(a,b,d){return c.invoke(a,null,d||{params:b})}}function s(a,b,e){function f(b,c,d,e){if(q.push(b),o[b])return o[b];if(!/^\w+([-.]+\w+)*(?:\[\])?$/.test(b))throw new Error("Invalid parameter name '"+b+"' in pattern '"+a+"'");if(p[b])throw new Error("Duplicate parameter name '"+b+"' in pattern '"+a+"'");return p[b]=new V.Param(b,c,d,e),p[b]}function g(a,b,c,d){var e=["",""],f=a.replace(/[\\\[\]\^$*+?.()|{}]/g,"\\$&");if(!b)return f;switch(c){case!1:e=["(",")"+(d?"?":"")];break;case!0:f=f.replace(/\/$/,""),e=["(?:/(",")|/)?"];break;default:e=["("+c+"|",")?"]}return f+e[0]+b+e[1]}function h(e,f){var g,h,i,j,k;return g=e[2]||e[3],k=b.params[g],i=a.substring(m,e.index),h=f?e[4]:e[4]||("*"==e[1]?".*":null),h&&(j=V.type(h)||d(V.type("string"),{pattern:new RegExp(h,b.caseInsensitive?"i":c)})),{id:g,regexp:h,segment:i,type:j,cfg:k}}b=S({params:{}},P(b)?b:{});var i,j=/([:*])([\w\[\]]+)|\{([\w\[\]]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,k=/([:]?)([\w\[\].-]+)|\{([\w\[\].-]+)(?:\:\s*((?:[^{}\\]+|\\.|\{(?:[^{}\\]+|\\.)*\})+))?\}/g,l="^",m=0,n=this.segments=[],o=e?e.params:{},p=this.params=e?e.params.$$new():new V.ParamSet,q=[];this.source=a;for(var r,s,t;(i=j.exec(a))&&(r=h(i,!1),!(r.segment.indexOf("?")>=0));)s=f(r.id,r.type,r.cfg,"path"),l+=g(r.segment,s.type.pattern.source,s.squash,s.isOptional),n.push(r.segment),m=j.lastIndex;t=a.substring(m);var u=t.indexOf("?");if(u>=0){var v=this.sourceSearch=t.substring(u);if(t=t.substring(0,u),this.sourcePath=a.substring(0,m+u),v.length>0)for(m=0;i=k.exec(v);)r=h(i,!0),s=f(r.id,r.type,r.cfg,"search"),m=j.lastIndex}else this.sourcePath=a,this.sourceSearch="";l+=g(t)+(b.strict===!1?"/?":"")+"$",n.push(t),this.regexp=new RegExp(l,b.caseInsensitive?"i":c),this.prefix=n[0],this.$$paramNames=q}function t(a){S(this,a)}function u(){function a(a){return null!=a?a.toString().replace(/(~|\/)/g,function(a){return{"~":"~~","/":"~2F"}[a]}):a}function e(a){return null!=a?a.toString().replace(/(~~|~2F)/g,function(a){return{"~~":"~","~2F":"/"}[a]}):a}function f(){return{strict:p,caseInsensitive:m}}function i(a){return N(a)||Q(a)&&N(a[a.length-1])}function j(){for(;w.length;){var a=w.shift();if(a.pattern)throw new Error("You cannot override a type's .pattern at runtime.");b.extend(r[a.name],l.invoke(a.def))}}function k(a){S(this,a||{})}V=this;var l,m=!1,p=!0,q=!1,r={},v=!0,w=[],x={string:{encode:a,decode:e,is:function(a){return null==a||!M(a)||"string"==typeof a},pattern:/[^\/]*/},int:{encode:a,decode:function(a){return parseInt(a,10)},is:function(a){return M(a)&&this.decode(a.toString())===a},pattern:/\d+/},bool:{encode:function(a){return a?1:0},decode:function(a){return 0!==parseInt(a,10)},is:function(a){return a===!0||a===!1},pattern:/0|1/},date:{encode:function(a){return this.is(a)?[a.getFullYear(),("0"+(a.getMonth()+1)).slice(-2),("0"+a.getDate()).slice(-2)].join("-"):c},decode:function(a){if(this.is(a))return a;var b=this.capture.exec(a);return b?new Date(b[1],b[2]-1,b[3]):c},is:function(a){return a instanceof Date&&!isNaN(a.valueOf())},equals:function(a,b){return this.is(a)&&this.is(b)&&a.toISOString()===b.toISOString()},pattern:/[0-9]{4}-(?:0[1-9]|1[0-2])-(?:0[1-9]|[1-2][0-9]|3[0-1])/,capture:/([0-9]{4})-(0[1-9]|1[0-2])-(0[1-9]|[1-2][0-9]|3[0-1])/},json:{encode:b.toJson,decode:b.fromJson,is:b.isObject,equals:b.equals,pattern:/[^\/]*/},any:{encode:b.identity,decode:b.identity,equals:b.equals,pattern:/.*/}};u.$$getDefaultValue=function(a){if(!i(a.value))return a.value;if(!l)throw new Error("Injectable functions cannot be called at configuration time");return l.invoke(a.value)},this.caseInsensitive=function(a){return M(a)&&(m=a),m},this.strictMode=function(a){return M(a)&&(p=a),p},this.defaultSquashPolicy=function(a){if(!M(a))return q;if(a!==!0&&a!==!1&&!O(a))throw new Error("Invalid squash policy: "+a+". Valid policies: false, true, arbitrary-string");return q=a,a},this.compile=function(a,b){return new s(a,S(f(),b))},this.isMatcher=function(a){if(!P(a))return!1;var b=!0;return R(s.prototype,function(c,d){N(c)&&(b=b&&M(a[d])&&N(a[d]))}),b},this.type=function(a,b,c){if(!M(b))return r[a];if(r.hasOwnProperty(a))throw new Error("A type named '"+a+"' has already been defined.");return r[a]=new t(S({name:a},b)),c&&(w.push({name:a,def:c}),v||j()),this},R(x,function(a,b){r[b]=new t(S({name:b},a))}),r=d(r,{}),this.$get=["$injector",function(a){return l=a,v=!1,j(),R(x,function(a,b){r[b]||(r[b]=new t(a))}),this}],this.Param=function(a,d,e,f){function j(a){var b=P(a)?g(a):[],c=h(b,"value")===-1&&h(b,"type")===-1&&h(b,"squash")===-1&&h(b,"array")===-1;return c&&(a={value:a}),a.$$fn=i(a.value)?a.value:function(){return a.value},a}function k(c,d,e){if(c.type&&d)throw new Error("Param '"+a+"' has two type configurations.");return d?d:c.type?b.isString(c.type)?r[c.type]:c.type instanceof t?c.type:new t(c.type):"config"===e?r.any:r.string}function m(){var b={array:"search"===f&&"auto"},c=a.match(/\[\]$/)?{array:!0}:{};return S(b,c,e).array}function p(a,b){var c=a.squash;if(!b||c===!1)return!1;if(!M(c)||null==c)return q;if(c===!0||O(c))return c;throw new Error("Invalid squash policy: '"+c+"'. Valid policies: false, true, or arbitrary string")}function s(a,b,d,e){var f,g,i=[{from:"",to:d||b?c:""},{from:null,to:d||b?c:""}];return f=Q(a.replace)?a.replace:[],O(e)&&f.push({from:e,to:c}),g=o(f,function(a){return a.from}),n(i,function(a){return h(g,a.from)===-1}).concat(f)}function u(){if(!l)throw new Error("Injectable functions cannot be called at configuration time");var a=l.invoke(e.$$fn);if(null!==a&&a!==c&&!x.type.is(a))throw new Error("Default value ("+a+") for parameter '"+x.id+"' is not an instance of Type ("+x.type.name+")");return a}function v(a){function b(a){return function(b){return b.from===a}}function c(a){var c=o(n(x.replace,b(a)),function(a){return a.to});return c.length?c[0]:a}return a=c(a),M(a)?x.type.$normalize(a):u()}function w(){return"{Param:"+a+" "+d+" squash: '"+A+"' optional: "+z+"}"}var x=this;e=j(e),d=k(e,d,f);var y=m();d=y?d.$asArray(y,"search"===f):d,"string"!==d.name||y||"path"!==f||e.value!==c||(e.value="");var z=e.value!==c,A=p(e,z),B=s(e,y,z,A);S(this,{id:a,type:d,location:f,array:y,squash:A,replace:B,isOptional:z,value:v,dynamic:c,config:e,toString:w})},k.prototype={$$new:function(){return d(this,S(new k,{$$parent:this}))},$$keys:function(){for(var a=[],b=[],c=this,d=g(k.prototype);c;)b.push(c),c=c.$$parent;return b.reverse(),R(b,function(b){R(g(b),function(b){h(a,b)===-1&&h(d,b)===-1&&a.push(b)})}),a},$$values:function(a){var b={},c=this;return R(c.$$keys(),function(d){b[d]=c[d].value(a&&a[d])}),b},$$equals:function(a,b){var c=!0,d=this;return R(d.$$keys(),function(e){var f=a&&a[e],g=b&&b[e];d[e].type.equals(f,g)||(c=!1)}),c},$$validates:function(a){var d,e,f,g,h,i=this.$$keys();for(d=0;d<i.length&&(e=this[i[d]],f=a[i[d]],f!==c&&null!==f||!e.isOptional);d++){if(g=e.type.$normalize(f),!e.type.is(g))return!1;if(h=e.type.encode(g),b.isString(h)&&!e.type.pattern.exec(h))return!1}return!0},$$parent:c},this.ParamSet=k}function v(a,d){function e(a){var b=/^\^((?:\\[^a-zA-Z0-9]|[^\\\[\]\^$*+?.()|{}]+)*)/.exec(a.source);return null!=b?b[1].replace(/\\(.)/g,"$1"):""}function f(a,b){return a.replace(/\$(\$|\d{1,2})/,function(a,c){return b["$"===c?0:Number(c)]})}function g(a,b,c){if(!c)return!1;var d=a.invoke(b,b,{$match:c});return!M(d)||d}function h(d,e,f,g,h){function m(a,b,c){return"/"===q?a:b?q.slice(0,-1)+a:c?q.slice(1)+a:a}function n(a){function b(a){var b=a(f,d);return!!b&&(O(b)&&d.replace().url(b),!0)}if(!a||!a.defaultPrevented){p&&d.url()===p;p=c;var e,g=j.length;for(e=0;e<g;e++)if(b(j[e]))return;k&&b(k)}}function o(){return i=i||e.$on("$locationChangeSuccess",n)}var p,q=g.baseHref(),r=d.url();return l||o(),{sync:function(){n()},listen:function(){return o()},update:function(a){return a?void(r=d.url()):void(d.url()!==r&&(d.url(r),d.replace()))},push:function(a,b,e){var f=a.format(b||{});null!==f&&b&&b["#"]&&(f+="#"+b["#"]),d.url(f),p=e&&e.$$avoidResync?d.url():c,e&&e.replace&&d.replace()},href:function(c,e,f){if(!c.validates(e))return null;var g=a.html5Mode();b.isObject(g)&&(g=g.enabled),g=g&&h.history;var i=c.format(e);if(f=f||{},g||null===i||(i="#"+a.hashPrefix()+i),null!==i&&e&&e["#"]&&(i+="#"+e["#"]),i=m(i,g,f.absolute),!f.absolute||!i)return i;var j=!g&&i?"/":"",k=d.port();return k=80===k||443===k?"":":"+k,[d.protocol(),"://",d.host(),k,j,i].join("")}}}var i,j=[],k=null,l=!1;this.rule=function(a){if(!N(a))throw new Error("'rule' must be a function");return j.push(a),this},this.otherwise=function(a){if(O(a)){var b=a;a=function(){return b}}else if(!N(a))throw new Error("'rule' must be a function");return k=a,this},this.when=function(a,b){var c,h=O(b);if(O(a)&&(a=d.compile(a)),!h&&!N(b)&&!Q(b))throw new Error("invalid 'handler' in when()");var i={matcher:function(a,b){return h&&(c=d.compile(b),b=["$match",function(a){return c.format(a)}]),S(function(c,d){return g(c,b,a.exec(d.path(),d.search()))},{prefix:O(a.prefix)?a.prefix:""})},regex:function(a,b){if(a.global||a.sticky)throw new Error("when() RegExp must not be global or sticky");return h&&(c=b,b=["$match",function(a){return f(c,a)}]),S(function(c,d){return g(c,b,a.exec(d.path()))},{prefix:e(a)})}},j={matcher:d.isMatcher(a),regex:a instanceof RegExp};for(var k in j)if(j[k])return this.rule(i[k](a,b));throw new Error("invalid 'what' in when()")},this.deferIntercept=function(a){a===c&&(a=!0),l=a},this.$get=h,h.$inject=["$location","$rootScope","$injector","$browser","$sniffer"]}function w(a,e){function f(a){return 0===a.indexOf(".")||0===a.indexOf("^")}function m(a,b){if(!a)return c;var d=O(a),e=d?a:a.name,g=f(e);if(g){if(!b)throw new Error("No reference point given for path '"+e+"'");b=m(b);for(var h=e.split("."),i=0,j=h.length,k=b;i<j;i++)if(""!==h[i]||0!==i){if("^"!==h[i])break;if(!k.parent)throw new Error("Path '"+e+"' not valid for state '"+b.name+"'");k=k.parent}else k=b;h=h.slice(i).join("."),e=k.name+(k.name&&h?".":"")+h}var l=A[e];return!l||!d&&(d||l!==a&&l.self!==a)?c:l}function n(a,b){B[a]||(B[a]=[]),B[a].push(b)}function q(a){for(var b=B[a]||[];b.length;)r(b.shift())}function r(b){b=d(b,{self:b,resolve:b.resolve||{},toString:function(){return this.name}});var c=b.name;if(!O(c)||c.indexOf("@")>=0)throw new Error("State must have a valid name");if(A.hasOwnProperty(c))throw new Error("State '"+c+"' is already defined");var e=c.indexOf(".")!==-1?c.substring(0,c.lastIndexOf(".")):O(b.parent)?b.parent:P(b.parent)&&O(b.parent.name)?b.parent.name:"";if(e&&!A[e])return n(e,b.self);for(var f in D)N(D[f])&&(b[f]=D[f](b,D.$delegates[f]));return A[c]=b,!b[C]&&b.url&&a.when(b.url,["$match","$stateParams",function(a,c){z.$current.navigable==b&&j(a,c)||z.transitionTo(b,a,{inherit:!0,location:!1})}]),q(c),b}function s(a){return a.indexOf("*")>-1}function t(a){for(var b=a.split("."),c=z.$current.name.split("."),d=0,e=b.length;d<e;d++)"*"===b[d]&&(c[d]="*");return"**"===b[0]&&(c=c.slice(h(c,b[1])),c.unshift("**")),"**"===b[b.length-1]&&(c.splice(h(c,b[b.length-2])+1,Number.MAX_VALUE),c.push("**")),b.length==c.length&&c.join("")===b.join("")}function u(a,b){return O(a)&&!M(b)?D[a]:N(b)&&O(a)?(D[a]&&!D.$delegates[a]&&(D.$delegates[a]=D[a]),D[a]=b,this):this}function v(a,b){return P(a)?b=a:b.name=a,r(b),this}function w(a,e,f,h,l,n,q,r,u){function v(b,c,d,f){var g=a.$broadcast("$stateNotFound",b,c,d);if(g.defaultPrevented)return q.update(),F;if(!g.retry)return null;if(f.$retry)return q.update(),G;var h=z.transition=e.when(g.retry);return h.then(function(){return h!==z.transition?(a.$broadcast("$stateChangeCancel",b.to,b.toParams,c,d),D):(b.options.$retry=!0,z.transitionTo(b.to,b.toParams,b.options))},function(){return F}),q.update(),h}function w(a,c,d,g,i,j){function m(){var c=[];return R(a.views,function(d,e){var g=d.resolve&&d.resolve!==a.resolve?d.resolve:{};g.$template=[function(){return f.load(e,{view:d,locals:i.globals,params:n,notify:j.notify})||""}],c.push(l.resolve(g,i.globals,i.resolve,a).then(function(c){if(N(d.controllerProvider)||Q(d.controllerProvider)){var f=b.extend({},g,i.globals);c.$$controller=h.invoke(d.controllerProvider,null,f)}else c.$$controller=d.controller;c.$$state=a,c.$$controllerAs=d.controllerAs,c.$$resolveAs=d.resolveAs,i[e]=c}))}),e.all(c).then(function(){return i.globals})}var n=d?c:k(a.params.$$keys(),c),o={$stateParams:n};i.resolve=l.resolve(a.resolve,o,i.resolve,a);var p=[i.resolve.then(function(a){i.globals=a})];return g&&p.push(g),e.all(p).then(m).then(function(a){return i})}var B=new Error("transition superseded"),D=p(e.reject(B)),E=p(e.reject(new Error("transition prevented"))),F=p(e.reject(new Error("transition aborted"))),G=p(e.reject(new Error("transition failed")));return y.locals={resolve:null,globals:{$stateParams:{}}},z={params:{},current:y.self,$current:y,transition:null},z.reload=function(a){return z.transitionTo(z.current,n,{reload:a||!0,inherit:!1,notify:!0})},z.go=function(a,b,c){return z.transitionTo(a,b,S({inherit:!0,relative:z.$current},c))},z.transitionTo=function(b,c,f){c=c||{},f=S({location:!0,inherit:!1,relative:null,notify:!0,reload:!1,$retry:!1},f||{});var g,j=z.$current,l=z.params,o=j.path,p=m(b,f.relative),r=c["#"];if(!M(p)){var s={to:b,toParams:c,options:f},t=v(s,j.self,l,f);if(t)return t;if(b=s.to,c=s.toParams,f=s.options,p=m(b,f.relative),!M(p)){if(!f.relative)throw new Error("No such state '"+b+"'");throw new Error("Could not resolve '"+b+"' from state '"+f.relative+"'")}}if(p[C])throw new Error("Cannot transition to abstract state '"+b+"'");if(f.inherit&&(c=i(n,c||{},z.$current,p)),!p.params.$$validates(c))return G;c=p.params.$$values(c),b=p;var u=b.path,A=0,F=u[A],H=y.locals,I=[];if(f.reload){if(O(f.reload)||P(f.reload)){if(P(f.reload)&&!f.reload.name)throw new Error("Invalid reload state object");var J=f.reload===!0?o[0]:m(f.reload);if(f.reload&&!J)throw new Error("No such reload state '"+(O(f.reload)?f.reload:f.reload.name)+"'");for(;F&&F===o[A]&&F!==J;)H=I[A]=F.locals,A++,F=u[A]}}else for(;F&&F===o[A]&&F.ownParams.$$equals(c,l);)H=I[A]=F.locals,A++,F=u[A];if(x(b,c,j,l,H,f))return r&&(c["#"]=r),z.params=c,T(z.params,n),T(k(b.params.$$keys(),n),b.locals.globals.$stateParams),f.location&&b.navigable&&b.navigable.url&&(q.push(b.navigable.url,c,{$$avoidResync:!0,replace:"replace"===f.location}),q.update(!0)),z.transition=null,e.when(z.current);if(c=k(b.params.$$keys(),c||{}),r&&(c["#"]=r),f.notify&&a.$broadcast("$stateChangeStart",b.self,c,j.self,l,f).defaultPrevented)return a.$broadcast("$stateChangeCancel",b.self,c,j.self,l),null==z.transition&&q.update(),E;for(var K=e.when(H),L=A;L<u.length;L++,F=u[L])H=I[L]=d(H),K=w(F,c,F===b,K,H,f);var N=z.transition=K.then(function(){var d,e,g;if(z.transition!==N)return a.$broadcast("$stateChangeCancel",b.self,c,j.self,l),D;for(d=o.length-1;d>=A;d--)g=o[d],g.self.onExit&&h.invoke(g.self.onExit,g.self,g.locals.globals),g.locals=null;for(d=A;d<u.length;d++)e=u[d],e.locals=I[d],e.self.onEnter&&h.invoke(e.self.onEnter,e.self,e.locals.globals);return z.transition!==N?(a.$broadcast("$stateChangeCancel",b.self,c,j.self,l),D):(z.$current=b,z.current=b.self,z.params=c,T(z.params,n),z.transition=null,f.location&&b.navigable&&q.push(b.navigable.url,b.navigable.locals.globals.$stateParams,{$$avoidResync:!0,replace:"replace"===f.location}),f.notify&&a.$broadcast("$stateChangeSuccess",b.self,c,j.self,l),q.update(!0),z.current)}).then(null,function(d){return d===B?D:z.transition!==N?(a.$broadcast("$stateChangeCancel",b.self,c,j.self,l),D):(z.transition=null,g=a.$broadcast("$stateChangeError",b.self,c,j.self,l,d),g.defaultPrevented||q.update(),e.reject(d))});return N},z.is=function(a,b,d){d=S({relative:z.$current},d||{});var e=m(a,d.relative);return M(e)?z.$current===e&&(!b||j(e.params.$$values(b),n)):c},z.includes=function(a,b,d){if(d=S({relative:z.$current},d||{}),O(a)&&s(a)){if(!t(a))return!1;a=z.$current.name}var e=m(a,d.relative);if(!M(e))return c;if(!M(z.$current.includes[e.name]))return!1;if(!b)return!0;for(var f=g(b),h=0;h<f.length;h++){var i=f[h],j=e.params[i];if(j&&!j.type.equals(n[i],b[i]))return!1}return!0},z.href=function(a,b,d){d=S({lossy:!0,inherit:!0,absolute:!1,relative:z.$current},d||{});var e=m(a,d.relative);if(!M(e))return null;d.inherit&&(b=i(n,b||{},z.$current,e));var f=e&&d.lossy?e.navigable:e;return f&&f.url!==c&&null!==f.url?q.href(f.url,k(e.params.$$keys().concat("#"),b||{}),{absolute:d.absolute}):null},z.get=function(a,b){if(0===arguments.length)return o(g(A),function(a){return A[a].self});var c=m(a,b||z.$current);return c&&c.self?c.self:null},z}function x(a,b,c,d,e,f){function g(a,b,c){function d(b){return"search"!=a.params[b].location}var e=a.params.$$keys().filter(d),f=l.apply({},[a.params].concat(e)),g=new V.ParamSet(f);return g.$$equals(b,c)}if(!f.reload&&a===c&&(e===c.locals||a.self.reloadOnSearch===!1&&g(c,d,b)))return!0}var y,z,A={},B={},C="abstract",D={parent:function(a){if(M(a.parent)&&a.parent)return m(a.parent);var b=/^(.+)\.[^.]+$/.exec(a.name);return b?m(b[1]):y},data:function(a){return a.parent&&a.parent.data&&(a.data=a.self.data=d(a.parent.data,a.data)),a.data},url:function(a){var b=a.url,c={params:a.params||{}};if(O(b))return"^"==b.charAt(0)?e.compile(b.substring(1),c):(a.parent.navigable||y).url.concat(b,c);if(!b||e.isMatcher(b))return b;throw new Error("Invalid url '"+b+"' in state '"+a+"'")},navigable:function(a){return a.url?a:a.parent?a.parent.navigable:null},ownParams:function(a){var b=a.url&&a.url.params||new V.ParamSet;return R(a.params||{},function(a,c){b[c]||(b[c]=new V.Param(c,null,a,"config"))}),b},params:function(a){var b=l(a.ownParams,a.ownParams.$$keys());return a.parent&&a.parent.params?S(a.parent.params.$$new(),b):new V.ParamSet},views:function(a){var b={};return R(M(a.views)?a.views:{"":a},function(c,d){d.indexOf("@")<0&&(d+="@"+a.parent.name),c.resolveAs=c.resolveAs||a.resolveAs||"$resolve",b[d]=c}),b},path:function(a){return a.parent?a.parent.path.concat(a):[]},includes:function(a){var b=a.parent?S({},a.parent.includes):{};return b[a.name]=!0,b},$delegates:{}};y=r({name:"",url:"^",views:null,abstract:!0}),y.navigable=null,this.decorator=u,this.state=v,this.$get=w,w.$inject=["$rootScope","$q","$view","$injector","$resolve","$stateParams","$urlRouter","$location","$urlMatcherFactory"]}function x(){function a(a,b){return{load:function(a,c){var d,e={template:null,controller:null,view:null,locals:null,notify:!0,async:!0,params:{}};return c=S(e,c),c.view&&(d=b.fromConfig(c.view,c.params,c.locals)),d}}}this.$get=a,a.$inject=["$rootScope","$templateFactory"]}function y(){var a=!1;this.useAnchorScroll=function(){a=!0},this.$get=["$anchorScroll","$timeout",function(b,c){return a?b:function(a){return c(function(){a[0].scrollIntoView()},0,!1)}}]}function z(a,c,d,e,f){function g(){return c.has?function(a){return c.has(a)?c.get(a):null}:function(a){try{return c.get(a)}catch(a){return null}}}function h(a,c){var d=function(){return{enter:function(a,b,c){b.after(a),c()},leave:function(a,b){a.remove(),b()}}};if(k)return{enter:function(a,c,d){b.version.minor>2?k.enter(a,null,c).then(d):k.enter(a,null,c,d)},leave:function(a,c){b.version.minor>2?k.leave(a).then(c):k.leave(a,c)}};if(j){var e=j&&j(c,a);return{enter:function(a,b,c){e.enter(a,null,b),c()},leave:function(a,b){e.leave(a),b()}}}return d()}var i=g(),j=i("$animator"),k=i("$animate"),l={restrict:"ECA",terminal:!0,priority:400,transclude:"element",compile:function(c,g,i){return function(c,g,j){function k(){if(m&&(m.remove(),m=null),o&&(o.$destroy(),o=null),n){var a=n.data("$uiViewAnim");s.leave(n,function(){a.$$animLeave.resolve(),m=null}),m=n,n=null}}function l(h){var l,m=B(c,j,g,e),t=m&&a.$current&&a.$current.locals[m];if(h||t!==p){l=c.$new(),p=a.$current.locals[m],l.$emit("$viewContentLoading",m);var u=i(l,function(a){var e=f.defer(),h=f.defer(),i={$animEnter:e.promise,$animLeave:h.promise,$$animLeave:h};a.data("$uiViewAnim",i),s.enter(a,g,function(){e.resolve(),o&&o.$emit("$viewContentAnimationEnded"),(b.isDefined(r)&&!r||c.$eval(r))&&d(a)}),k()});n=u,o=l,o.$emit("$viewContentLoaded",m),o.$eval(q)}}var m,n,o,p,q=j.onload||"",r=j.autoscroll,s=h(j,c);g.inheritedData("$uiView");c.$on("$stateChangeSuccess",function(){l(!1)}),l(!0)}}};return l}function A(a,c,d,e){return{restrict:"ECA",priority:-400,compile:function(f){var g=f.html();return function(f,h,i){var j=d.$current,k=B(f,i,h,e),l=j&&j.locals[k];if(l){h.data("$uiView",{name:k,state:l.$$state}),h.html(l.$template?l.$template:g);var m=b.extend({},l);f[l.$$resolveAs]=m;var n=a(h.contents());if(l.$$controller){l.$scope=f,l.$element=h;var o=c(l.$$controller,l);l.$$controllerAs&&(f[l.$$controllerAs]=o,f[l.$$controllerAs][l.$$resolveAs]=m),N(o.$onInit)&&o.$onInit(),h.data("$ngControllerController",o),h.children().data("$ngControllerController",o)}n(f)}}}}}function B(a,b,c,d){var e=d(b.uiView||b.name||"")(a),f=c.inheritedData("$uiView");return e.indexOf("@")>=0?e:e+"@"+(f?f.state.name:"")}function C(a,b){var c,d=a.match(/^\s*({[^}]*})\s*$/);if(d&&(a=b+"("+d[1]+")"),c=a.replace(/\n/g," ").match(/^([^(]+?)\s*(\((.*)\))?$/),!c||4!==c.length)throw new Error("Invalid state ref '"+a+"'");return{state:c[1],paramExpr:c[3]||null}}function D(a){var b=a.parent().inheritedData("$uiView");if(b&&b.state&&b.state.name)return b.state}function E(a){var b="[object SVGAnimatedString]"===Object.prototype.toString.call(a.prop("href")),c="FORM"===a[0].nodeName;return{attr:c?"action":b?"xlink:href":"href",isAnchor:"A"===a.prop("tagName").toUpperCase(),clickable:!c}}function F(a,b,c,d,e){return function(f){var g=f.which||f.button,h=e();if(!(g>1||f.ctrlKey||f.metaKey||f.shiftKey||a.attr("target"))){var i=c(function(){b.go(h.state,h.params,h.options)});f.preventDefault();var j=d.isAnchor&&!h.href?1:0;f.preventDefault=function(){j--<=0&&c.cancel(i)}}}}function G(a,b){return{relative:D(a)||b.$current,inherit:!0}}function H(a,c){return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(d,e,f,g){var h,i=C(f.uiSref,a.current.name),j={state:i.state,href:null,params:null},k=E(e),l=g[1]||g[0],m=null;j.options=S(G(e,a),f.uiSrefOpts?d.$eval(f.uiSrefOpts):{});var n=function(c){c&&(j.params=b.copy(c)),j.href=a.href(i.state,j.params,j.options),m&&m(),l&&(m=l.$$addStateInfo(i.state,j.params)),null!==j.href&&f.$set(k.attr,j.href)};i.paramExpr&&(d.$watch(i.paramExpr,function(a){a!==j.params&&n(a)},!0),j.params=b.copy(d.$eval(i.paramExpr))),n(),k.clickable&&(h=F(e,a,c,k,function(){return j}),e[e.on?"on":"bind"]("click",h),d.$on("$destroy",function(){e[e.off?"off":"unbind"]("click",h)}))}}}function I(a,b){return{restrict:"A",require:["?^uiSrefActive","?^uiSrefActiveEq"],link:function(c,d,e,f){function g(b){m.state=b[0],m.params=b[1],m.options=b[2],m.href=a.href(m.state,m.params,m.options),n&&n(),j&&(n=j.$$addStateInfo(m.state,m.params)),m.href&&e.$set(i.attr,m.href)}var h,i=E(d),j=f[1]||f[0],k=[e.uiState,e.uiStateParams||null,e.uiStateOpts||null],l="["+k.map(function(a){return a||"null"}).join(", ")+"]",m={state:null,params:null,options:null,href:null},n=null;c.$watch(l,g,!0),g(c.$eval(l)),i.clickable&&(h=F(d,a,b,i,function(){return m}),d[d.on?"on":"bind"]("click",h),c.$on("$destroy",function(){d[d.off?"off":"unbind"]("click",h)}))}}}function J(a,b,c){return{restrict:"A",controller:["$scope","$element","$attrs","$timeout",function(b,d,e,f){function g(b,c,e){var f=a.get(b,D(d)),g=h(b,c),i={state:f||{name:b},params:c,hash:g};return p.push(i),q[g]=e,function(){var a=p.indexOf(i);a!==-1&&p.splice(a,1)}}function h(a,c){if(!O(a))throw new Error("state should be a string");return P(c)?a+U(c):(c=b.$eval(c),P(c)?a+U(c):a)}function i(){for(var a=0;a<p.length;a++)l(p[a].state,p[a].params)?j(d,q[p[a].hash]):k(d,q[p[a].hash]),m(p[a].state,p[a].params)?j(d,n):k(d,n)}function j(a,b){f(function(){a.addClass(b)})}function k(a,b){a.removeClass(b)}function l(b,c){return a.includes(b.name,c)}function m(b,c){return a.is(b.name,c)}var n,o,p=[],q={};n=c(e.uiSrefActiveEq||"",!1)(b);try{o=b.$eval(e.uiSrefActive)}catch(a){}o=o||c(e.uiSrefActive||"",!1)(b),P(o)&&R(o,function(c,d){if(O(c)){var e=C(c,a.current.name);g(e.state,b.$eval(e.paramExpr),d)}}),this.$$addStateInfo=function(a,b){if(!(P(o)&&p.length>0)){var c=g(a,b,o);return i(),c}},b.$on("$stateChangeSuccess",i),i()}]}}function K(a){var b=function(b,c){return a.is(b,c)};return b.$stateful=!0,b}function L(a){var b=function(b,c,d){return a.includes(b,c,d)};return b.$stateful=!0,b}var M=b.isDefined,N=b.isFunction,O=b.isString,P=b.isObject,Q=b.isArray,R=b.forEach,S=b.extend,T=b.copy,U=b.toJson;b.module("ui.router.util",["ng"]),b.module("ui.router.router",["ui.router.util"]),b.module("ui.router.state",["ui.router.router","ui.router.util"]),b.module("ui.router",["ui.router.state"]),b.module("ui.router.compat",["ui.router"]),q.$inject=["$q","$injector"],b.module("ui.router.util").service("$resolve",q),r.$inject=["$http","$templateCache","$injector"],b.module("ui.router.util").service("$templateFactory",r);var V;s.prototype.concat=function(a,b){var c={caseInsensitive:V.caseInsensitive(),strict:V.strictMode(),squash:V.defaultSquashPolicy()};return new s(this.sourcePath+a+this.sourceSearch,S(c,b),this)},s.prototype.toString=function(){return this.source},s.prototype.exec=function(a,b){function c(a){function b(a){return a.split("").reverse().join("")}function c(a){return a.replace(/\\-/g,"-")}var d=b(a).split(/-(?!\\)/),e=o(d,b);return o(e,c).reverse()}var d=this.regexp.exec(a);if(!d)return null;b=b||{};var e,f,g,h=this.parameters(),i=h.length,j=this.segments.length-1,k={};if(j!==d.length-1)throw new Error("Unbalanced capture group in route '"+this.source+"'");var l,m;for(e=0;e<j;e++){for(g=h[e],l=this.params[g],m=d[e+1],f=0;f<l.replace.length;f++)l.replace[f].from===m&&(m=l.replace[f].to);m&&l.array===!0&&(m=c(m)),M(m)&&(m=l.type.decode(m)),k[g]=l.value(m)}for(;e<i;e++){for(g=h[e],k[g]=this.params[g].value(b[g]),l=this.params[g],m=b[g],f=0;f<l.replace.length;f++)l.replace[f].from===m&&(m=l.replace[f].to);M(m)&&(m=l.type.decode(m)),k[g]=l.value(m)}return k},s.prototype.parameters=function(a){return M(a)?this.params[a]||null:this.$$paramNames},s.prototype.validates=function(a){return this.params.$$validates(a)},s.prototype.format=function(a){function b(a){return encodeURIComponent(a).replace(/-/g,function(a){return"%5C%"+a.charCodeAt(0).toString(16).toUpperCase()})}a=a||{};var c=this.segments,d=this.parameters(),e=this.params;if(!this.validates(a))return null;var f,g=!1,h=c.length-1,i=d.length,j=c[0];for(f=0;f<i;f++){var k=f<h,l=d[f],m=e[l],n=m.value(a[l]),p=m.isOptional&&m.type.equals(m.value(),n),q=!!p&&m.squash,r=m.type.encode(n);if(k){var s=c[f+1],t=f+1===h;if(q===!1)null!=r&&(j+=Q(r)?o(r,b).join("-"):encodeURIComponent(r)),j+=s;else if(q===!0){var u=j.match(/\/$/)?/\/?(.*)/:/(.*)/;j+=s.match(u)[1]}else O(q)&&(j+=q+s);t&&m.squash===!0&&"/"===j.slice(-1)&&(j=j.slice(0,-1))}else{if(null==r||p&&q!==!1)continue;if(Q(r)||(r=[r]),0===r.length)continue;r=o(r,encodeURIComponent).join("&"+l+"="),j+=(g?"&":"?")+(l+"="+r),g=!0}}return j},t.prototype.is=function(a,b){return!0},t.prototype.encode=function(a,b){return a},t.prototype.decode=function(a,b){return a},t.prototype.equals=function(a,b){return a==b},t.prototype.$subPattern=function(){var a=this.pattern.toString();return a.substr(1,a.length-2)},t.prototype.pattern=/.*/,t.prototype.toString=function(){return"{Type:"+this.name+"}"},t.prototype.$normalize=function(a){return this.is(a)?a:this.decode(a)},t.prototype.$asArray=function(a,b){function d(a,b){function d(a,b){return function(){return a[b].apply(a,arguments)}}function e(a){return Q(a)?a:M(a)?[a]:[]}function f(a){switch(a.length){case 0:return c;case 1:return"auto"===b?a[0]:a;default:return a}}function g(a){return!a}function h(a,b){return function(c){if(Q(c)&&0===c.length)return c;c=e(c);var d=o(c,a);return b===!0?0===n(d,g).length:f(d)}}function i(a){return function(b,c){var d=e(b),f=e(c);if(d.length!==f.length)return!1;for(var g=0;g<d.length;g++)if(!a(d[g],f[g]))return!1;return!0}}this.encode=h(d(a,"encode")),this.decode=h(d(a,"decode")),this.is=h(d(a,"is"),!0),this.equals=i(d(a,"equals")),this.pattern=a.pattern,this.$normalize=h(d(a,"$normalize")),this.name=a.name,this.$arrayMode=b}if(!a)return this;if("auto"===a&&!b)throw new Error("'auto' array mode is for query parameters only");return new d(this,a);
},b.module("ui.router.util").provider("$urlMatcherFactory",u),b.module("ui.router.util").run(["$urlMatcherFactory",function(a){}]),v.$inject=["$locationProvider","$urlMatcherFactoryProvider"],b.module("ui.router.router").provider("$urlRouter",v),w.$inject=["$urlRouterProvider","$urlMatcherFactoryProvider"],b.module("ui.router.state").factory("$stateParams",function(){return{}}).constant("$state.runtime",{autoinject:!0}).provider("$state",w).run(["$injector",function(a){a.get("$state.runtime").autoinject&&a.get("$state")}]),x.$inject=[],b.module("ui.router.state").provider("$view",x),b.module("ui.router.state").provider("$uiViewScroll",y),z.$inject=["$state","$injector","$uiViewScroll","$interpolate","$q"],A.$inject=["$compile","$controller","$state","$interpolate"],b.module("ui.router.state").directive("uiView",z),b.module("ui.router.state").directive("uiView",A),H.$inject=["$state","$timeout"],I.$inject=["$state","$timeout"],J.$inject=["$state","$stateParams","$interpolate"],b.module("ui.router.state").directive("uiSref",H).directive("uiSrefActive",J).directive("uiSrefActiveEq",J).directive("uiState",I),K.$inject=["$state"],L.$inject=["$state"],b.module("ui.router.state").filter("isState",K).filter("includedByState",L)}(window,window.angular);
var process = process || {env: {NODE_ENV: "development"}};
/*
 AngularJS
 (c) 2010-2020 Google LLC. http://angularjs.org
 License: MIT
 XLTS for AngularJS v1.9.6
 (c) 2022 XLTS.dev All Rights Reserved. https://xlts.dev/angularjs
 License: Obtain a commercial license from XLTS.dev before using this software.
*/
(function(z,l){'use strict';function q(n){return["$animate",function(u){return{restrict:"AE",transclude:"element",priority:1,terminal:!0,require:"^^ngMessages",link:function(m,f,a,e,r){var b,h,s;if(!n){b=f[0];s=a.ngMessage||a.when;a=a.ngMessageExp||a.whenExp;var k=function(c){h=c?v(c)?c:c.split(/[\s,]+/):null;e.reRender()};a?(k(m.$eval(a)),m.$watchCollection(a,k)):k(s)}var g,t;e.register(b,t={test:function(c){var b=h;c=b?v(b)?0<=b.indexOf(c):b.hasOwnProperty(c):void 0;return c},attach:function(){g||
r(function(c,a){u.enter(c,null,f);g=c;var d=g.$$attachId=e.getAttachId();g.on("$destroy",function(){g&&g.$$attachId===d&&(e.deregister(b,n),t.detach());a.$destroy()})})},detach:function(){if(g){var c=g;g=null;u.leave(c)}}},n);m.$on("$destroy",function(){e.deregister(b,n)})}}}]}var x,v,p,y;l.module("ngMessages",[],function(){x=l.forEach;v=l.isArray;p=l.isString;y=l.element}).info({angularVersion:"1.9.6"}).directive("ngMessages",["$animate",function(n){function u(f,a){return p(a)&&0===a.length||m(f.$eval(a))}
function m(f){return p(f)?f.length:!!f}return{require:"ngMessages",restrict:"AE",controller:["$element","$scope","$attrs",function(f,a,e){function r(c,b){for(var d=b,a=[];d&&d!==c;){var e=d.$$ngMessageNode;if(e&&e.length)return k[e];d.childNodes.length&&-1===a.indexOf(d)?(a.push(d),d=d.childNodes[d.childNodes.length-1]):d.previousSibling?d=d.previousSibling:(d=d.parentNode,a.push(d))}}var b=this,h=0,s=0;this.getAttachId=function(){return s++};var k=this.messages={},g,t;this.render=function(c){c=c||
{};g=!1;t=c;for(var w=u(a,e.ngMessagesMultiple)||u(a,e.multiple),d=[],r={},h=0,k=b.head,s=!1,l=0;null!=k;){l++;var p=k.message,q=!1;s||x(c,function(b,c){m(b)&&!q&&(h++,p.test(c)&&!r[c]&&(q=r[c]=!0,p.attach()))});q?s=!w:d.push(p);k=k.next}x(d,function(c){c.detach()});c=d.length!==l;(w=b.default&&!c&&0<h)?b.default.attach():b.default&&b.default.detach();c||w?n.setClass(f,"ng-active","ng-inactive"):n.setClass(f,"ng-inactive","ng-active")};a.$watchCollection(e.ngMessages||e["for"],b.render);this.reRender=
function(){g||(g=!0,a.$evalAsync(function(){g&&t&&b.render(t)}))};this.register=function(c,a,d){if(d)b.default=a;else{d=h.toString();k[d]={message:a};var e=f[0];a=k[d];b.head?(e=r(e,c))?(a.next=e.next,e.next=a):(a.next=b.head,b.head=a):b.head=a;c.$$ngMessageNode=d;h++}b.reRender()};this.deregister=function(a,e){if(e)delete b.default;else{var d=a.$$ngMessageNode;delete a.$$ngMessageNode;var g=k[d];if(g){var h=r(f[0],a);h?h.next=g.next:b.head=g.next}delete k[d]}b.reRender()}}]}}]).directive("ngMessagesInclude",
["$templateRequest","$document","$compile",function(n,l,m){function f(a,e){var f=m.$$createComment?m.$$createComment("ngMessagesInclude",e):l[0].createComment(" ngMessagesInclude: "+e+" "),f=y(f);a.after(f);a.remove()}return{restrict:"AE",require:"^^ngMessages",link:function(a,e,l){var b=l.ngMessagesInclude||l.src;n(b).then(function(h){a.$$destroyed||(p(h)&&!h.trim()?f(e,b):m(h)(a,function(a){e.after(a);f(e,b)}))})}}}]).directive("ngMessage",q()).directive("ngMessageExp",q()).directive("ngMessageDefault",
q(!0))})(window,window.angular);
//# sourceMappingURL=angular-messages.min.js.map

var process = process || {env: {NODE_ENV: "development"}};
/*!
 * angular-translate - v2.18.1 - 2018-05-19
 * 
 * Copyright (c) 2018 The angular-translate team, Pascal Precht; Licensed MIT
 */
!function(t,e){"function"==typeof define&&define.amd?define([],function(){return e()}):"object"==typeof module&&module.exports?module.exports=e():e()}(0,function(){function t(e){"use strict";var n=e.storageKey(),a=e.storage(),t=function(){var t=e.preferredLanguage();angular.isString(t)?e.use(t):a.put(n,e.use())};t.displayName="fallbackFromIncorrectStorageValue",a?a.get(n)?e.use(a.get(n)).catch(t):t():angular.isString(e.preferredLanguage())&&e.use(e.preferredLanguage())}function e(t,r,e,i){"use strict";var z,c,T,x,F,I,_,n,V,R,D,K,U,M,H,G,q={},Y=[],B=t,J=[],Q="translate-cloak",W=!1,X=!1,Z=".",tt=!1,et=!1,nt=0,at=!0,a="default",s={default:function(t){return(t||"").split("-").join("_")},java:function(t){var e=(t||"").split("-").join("_"),n=e.split("_");return 1<n.length?n[0].toLowerCase()+"_"+n[1].toUpperCase():e},bcp47:function(t){var e=(t||"").split("_").join("-"),n=e.split("-");switch(n.length){case 1:n[0]=n[0].toLowerCase();break;case 2:n[0]=n[0].toLowerCase(),4===n[1].length?n[1]=n[1].charAt(0).toUpperCase()+n[1].slice(1).toLowerCase():n[1]=n[1].toUpperCase();break;case 3:n[0]=n[0].toLowerCase(),n[1]=n[1].charAt(0).toUpperCase()+n[1].slice(1).toLowerCase(),n[2]=n[2].toUpperCase();break;default:return e}return n.join("-")},"iso639-1":function(t){return(t||"").split("_").join("-").split("-")[0].toLowerCase()}},o=function(){if(angular.isFunction(i.getLocale))return i.getLocale();var t,e,n=r.$get().navigator,a=["language","browserLanguage","systemLanguage","userLanguage"];if(angular.isArray(n.languages))for(t=0;t<n.languages.length;t++)if((e=n.languages[t])&&e.length)return e;for(t=0;t<a.length;t++)if((e=n[a[t]])&&e.length)return e;return null};o.displayName="angular-translate/service: getFirstBrowserLanguage";var rt=function(){var t=o()||"";return s[a]&&(t=s[a](t)),t};rt.displayName="angular-translate/service: getLocale";var it=function(t,e){for(var n=0,a=t.length;n<a;n++)if(t[n]===e)return n;return-1},st=function(){return this.toString().replace(/^\s+|\s+$/g,"")},f=function(t){return angular.isString(t)?t.toLowerCase():t},ot=function(t){if(t){for(var e,n=[],a=f(t),r=0,i=Y.length;r<i;r++)n.push(f(Y[r]));if(-1<(r=it(n,a)))return Y[r];if(c)for(var s in c)if(c.hasOwnProperty(s)){var o=!1,l=Object.prototype.hasOwnProperty.call(c,s)&&f(s)===f(t);if("*"===s.slice(-1)&&(o=f(s.slice(0,-1))===f(t.slice(0,s.length-1))),(l||o)&&(e=c[s],-1<it(n,f(e))))return e}var u=t.split("_");return 1<u.length&&-1<it(n,f(u[0]))?u[0]:void 0}},lt=function(t,e){if(!t&&!e)return q;if(t&&!e){if(angular.isString(t))return q[t]}else angular.isObject(q[t])||(q[t]={}),angular.extend(q[t],ut(e));return this};this.translations=lt,this.cloakClassName=function(t){return t?(Q=t,this):Q},this.nestedObjectDelimeter=function(t){return t?(Z=t,this):Z};var ut=function(t,e,n,a){var r,i,s;for(r in e||(e=[]),n||(n={}),t)Object.prototype.hasOwnProperty.call(t,r)&&(s=t[r],angular.isObject(s)?ut(s,e.concat(r),n,r):(i=e.length?""+e.join(Z)+Z+r:r,e.length&&r===a&&(n[""+e.join(Z)]="@:"+i),n[i]=s));return n};ut.displayName="flatObject",this.addInterpolation=function(t){return J.push(t),this},this.useMessageFormatInterpolation=function(){return this.useInterpolation("$translateMessageFormatInterpolation")},this.useInterpolation=function(t){return R=t,this},this.useSanitizeValueStrategy=function(t){return e.useStrategy(t),this},this.preferredLanguage=function(t){return t?(ct(t),this):z};var ct=function(t){return t&&(z=t),z};this.translationNotFoundIndicator=function(t){return this.translationNotFoundIndicatorLeft(t),this.translationNotFoundIndicatorRight(t),this},this.translationNotFoundIndicatorLeft=function(t){return t?(U=t,this):U},this.translationNotFoundIndicatorRight=function(t){return t?(M=t,this):M},this.fallbackLanguage=function(t){return ft(t),this};var ft=function(t){return t?(angular.isString(t)?(x=!0,T=[t]):angular.isArray(t)&&(x=!1,T=t),angular.isString(z)&&it(T,z)<0&&T.push(z),this):x?T[0]:T};this.use=function(t){if(t){if(!q[t]&&!D)throw new Error("$translateProvider couldn't find translationTable for langKey: '"+t+"'");return F=t,this}return F},this.resolveClientLocale=function(){return rt()};var gt=function(t){return t?(B=t,this):n?n+B:B};this.storageKey=gt,this.useUrlLoader=function(t,e){return this.useLoader("$translateUrlLoader",angular.extend({url:t},e))},this.useStaticFilesLoader=function(t){return this.useLoader("$translateStaticFilesLoader",t)},this.useLoader=function(t,e){return D=t,K=e||{},this},this.useLocalStorage=function(){return this.useStorage("$translateLocalStorage")},this.useCookieStorage=function(){return this.useStorage("$translateCookieStorage")},this.useStorage=function(t){return _=t,this},this.storagePrefix=function(t){return t?(n=t,this):t},this.useMissingTranslationHandlerLog=function(){return this.useMissingTranslationHandler("$translateMissingTranslationHandlerLog")},this.useMissingTranslationHandler=function(t){return V=t,this},this.usePostCompiling=function(t){return W=!!t,this},this.forceAsyncReload=function(t){return X=!!t,this},this.uniformLanguageTag=function(t){return t?angular.isString(t)&&(t={standard:t}):t={},a=t.standard,this},this.determinePreferredLanguage=function(t){var e=t&&angular.isFunction(t)?t():rt();return z=Y.length&&ot(e)||e,this},this.registerAvailableLanguageKeys=function(t,e){return t?(Y=t,e&&(c=e),this):Y},this.useLoaderCache=function(t){return!1===t?H=void 0:!0===t?H=!0:void 0===t?H="$translationCache":t&&(H=t),this},this.directivePriority=function(t){return void 0===t?nt:(nt=t,this)},this.statefulFilter=function(t){return void 0===t?at:(at=t,this)},this.postProcess=function(t){return G=t||void 0,this},this.keepContent=function(t){return et=!!t,this},this.$get=["$log","$injector","$rootScope","$q",function(t,o,s,m){var i,$,y,b=o.get(R||"$translateDefaultInterpolation"),S=!1,L={},f={},j=function(t,s,o,l,u,c){!F&&z&&(F=z);var a=u&&u!==F?ot(u)||u:F;if(u&&v(u),angular.isArray(t)){return function(t){for(var a={},e=[],n=function(e){var n=m.defer(),t=function(t){a[e]=t,n.resolve([e,t])};return j(e,s,o,l,u,c).then(t,t),n.promise},r=0,i=t.length;r<i;r++)e.push(n(t[r]));return m.all(e).then(function(){return a})}(t)}var e=m.defer();t&&(t=st.apply(t));var n=function(){var t=f[a]||f[z];if($=0,_&&!t){var e=i.get(B);if(t=f[e],T&&T.length){var n=it(T,e);$=0===n?1:0,it(T,z)<0&&T.push(z)}}return t}();if(n){var r=function(){u||(a=F),h(t,s,o,l,a,c).then(e.resolve,e.reject)};r.displayName="promiseResolved",n.finally(r).catch(angular.noop)}else h(t,s,o,l,a,c).then(e.resolve,e.reject);return e.promise},w=function(t){return U&&(t=[U,t].join(" ")),M&&(t=[t,M].join(" ")),t},l=function(t){F=t,_&&i.put(j.storageKey(),F),s.$emit("$translateChangeSuccess",{language:t}),b.setLocale(F);var e=function(t,e){L[e].setLocale(F)};e.displayName="eachInterpolatorLocaleSetter",angular.forEach(L,e),s.$emit("$translateChangeEnd",{language:t})},u=function(n){if(!n)throw"No language key specified for loading.";var a=m.defer();s.$emit("$translateLoadingStart",{language:n}),S=!0;var t=H;"string"==typeof t&&(t=o.get(t));var e=angular.extend({},K,{key:n,$http:angular.extend({},{cache:t},K.$http)}),r=function(t){var e={};s.$emit("$translateLoadingSuccess",{language:n}),angular.isArray(t)?angular.forEach(t,function(t){angular.extend(e,ut(t))}):angular.extend(e,ut(t)),S=!1,a.resolve({key:n,table:e}),s.$emit("$translateLoadingEnd",{language:n})};r.displayName="onLoaderSuccess";var i=function(t){s.$emit("$translateLoadingError",{language:t}),a.reject(t),s.$emit("$translateLoadingEnd",{language:t})};return i.displayName="onLoaderError",o.get(D)(e).then(r,i),a.promise};if(_&&(!(i=o.get(_)).get||!i.put))throw new Error("Couldn't use storage '"+_+"', missing get() or put() method!");if(J.length){var e=function(t){var e=o.get(t);e.setLocale(z||F),L[e.getInterpolationIdentifier()]=e};e.displayName="interpolationFactoryAdder",angular.forEach(J,e)}var c=function(a,r,i,s,o){var l=m.defer(),t=function(t){if(Object.prototype.hasOwnProperty.call(t,r)&&null!==t[r]){s.setLocale(a);var e=t[r];if("@:"===e.substr(0,2))c(a,e.substr(2),i,s,o).then(l.resolve,l.reject);else{var n=s.interpolate(t[r],i,"service",o,r);n=O(r,t[r],n,i,a),l.resolve(n)}s.setLocale(F)}else l.reject()};return t.displayName="fallbackTranslationResolver",function(t){var e=m.defer();if(Object.prototype.hasOwnProperty.call(q,t))e.resolve(q[t]);else if(f[t]){var n=function(t){lt(t.key,t.table),e.resolve(t.table)};n.displayName="translationTableResolver",f[t].then(n,e.reject)}else e.reject();return e.promise}(a).then(t,l.reject),l.promise},g=function(t,e,n,a,r){var i,s=q[t];if(s&&Object.prototype.hasOwnProperty.call(s,e)&&null!==s[e]){if(a.setLocale(t),i=a.interpolate(s[e],n,"filter",r,e),i=O(e,s[e],i,n,t,r),!angular.isString(i)&&angular.isFunction(i.$$unwrapTrustedValue)){var o=i.$$unwrapTrustedValue();if("@:"===o.substr(0,2))return g(t,o.substr(2),n,a,r)}else if("@:"===i.substr(0,2))return g(t,i.substr(2),n,a,r);a.setLocale(F)}return i},C=function(t,e,n,a){return V?o.get(V)(t,F,e,n,a):t},N=function(t,e,n,a,r,i){var s=m.defer();if(t<T.length){var o=T[t];c(o,e,n,a,i).then(function(t){s.resolve(t)},function(){return N(t+1,e,n,a,r,i).then(s.resolve,s.reject)})}else if(r)s.resolve(r);else{var l=C(e,n,r);V&&l?s.resolve(l):s.reject(w(e))}return s.promise},p=function(t,e,n,a,r){var i;if(t<T.length){var s=T[t];(i=g(s,e,n,a,r))||""===i||(i=p(t+1,e,n,a))}return i},h=function(t,e,n,a,r,i){var s,o,l,u,c,f=m.defer(),g=r?q[r]:q,p=n?L[n]:b;if(g&&Object.prototype.hasOwnProperty.call(g,t)&&null!==g[t]){var h=g[t];if("@:"===h.substr(0,2))j(h.substr(2),e,n,a,r,i).then(f.resolve,f.reject);else{var d=p.interpolate(h,e,"service",i,t);d=O(t,h,d,e,r),f.resolve(d)}}else{var v;V&&!S&&(v=C(t,e,a)),r&&T&&T.length?(s=t,o=e,l=p,u=a,c=i,N(0<y?y:$,s,o,l,u,c)).then(function(t){f.resolve(t)},function(t){f.reject(w(t))}):V&&!S&&v?a?f.resolve(a):f.resolve(v):a?f.resolve(a):f.reject(w(t))}return f.promise},d=function(t,e,n,a,r){var i,s=a?q[a]:q,o=b;if(L&&Object.prototype.hasOwnProperty.call(L,n)&&(o=L[n]),s&&Object.prototype.hasOwnProperty.call(s,t)&&null!==s[t]){var l=s[t];"@:"===l.substr(0,2)?i=d(l.substr(2),e,n,a,r):(i=o.interpolate(l,e,"filter",r,t),i=O(t,l,i,e,a,r))}else{var u;V&&!S&&(u=C(t,e,r)),i=a&&T&&T.length?p(($=0)<y?y:$,t,e,o,r):V&&!S&&u?u:w(t)}return i},O=function(t,e,n,a,r,i){var s=G;return s&&("string"==typeof s&&(s=o.get(s)),s)?s(t,e,n,a,r,i):n},v=function(t){q[t]||!D||f[t]||(f[t]=u(t).then(function(t){return lt(t.key,t.table),t}))};j.preferredLanguage=function(t){return t&&ct(t),z},j.cloakClassName=function(){return Q},j.nestedObjectDelimeter=function(){return Z},j.fallbackLanguage=function(t){if(null!=t){if(ft(t),D&&T&&T.length)for(var e=0,n=T.length;e<n;e++)f[T[e]]||(f[T[e]]=u(T[e]));j.use(j.use())}return x?T[0]:T},j.useFallbackLanguage=function(t){if(null!=t)if(t){var e=it(T,t);-1<e&&(y=e)}else y=0},j.proposedLanguage=function(){return I},j.storage=function(){return i},j.negotiateLocale=ot,j.use=function(e){if(!e)return F;var n=m.defer();n.promise.then(null,angular.noop),s.$emit("$translateChangeStart",{language:e});var t=ot(e);return 0<Y.length&&!t?m.reject(e):(t&&(e=t),I=e,!X&&q[e]||!D||f[e]?f[e]?f[e].then(function(t){return I===t.key&&l(t.key),n.resolve(t.key),t},function(t){return!F&&T&&0<T.length&&T[0]!==t?j.use(T[0]).then(n.resolve,n.reject):n.reject(t)}):(n.resolve(e),l(e)):(f[e]=u(e).then(function(t){return lt(t.key,t.table),n.resolve(t.key),I===e&&l(t.key),t},function(t){return s.$emit("$translateChangeError",{language:t}),n.reject(t),s.$emit("$translateChangeEnd",{language:t}),m.reject(t)}),f[e].finally(function(){var t;I===(t=e)&&(I=void 0),f[t]=void 0}).catch(angular.noop)),n.promise)},j.resolveClientLocale=function(){return rt()},j.storageKey=function(){return gt()},j.isPostCompilingEnabled=function(){return W},j.isForceAsyncReloadEnabled=function(){return X},j.isKeepContent=function(){return et},j.refresh=function(t){if(!D)throw new Error("Couldn't refresh translation table, no loader registered!");s.$emit("$translateRefreshStart",{language:t});var e=m.defer(),n={};function a(e){var t=u(e);return(f[e]=t).then(function(t){q[e]={},lt(e,t.table),n[e]=!0},angular.noop),t}if(e.promise.then(function(){for(var t in q)q.hasOwnProperty(t)&&(t in n||delete q[t]);F&&l(F)},angular.noop).finally(function(){s.$emit("$translateRefreshEnd",{language:t})}),t)q[t]?a(t).then(e.resolve,e.reject):e.reject();else{var r=T&&T.slice()||[];F&&-1===r.indexOf(F)&&r.push(F),m.all(r.map(a)).then(e.resolve,e.reject)}return e.promise},j.instant=function(t,e,n,a,r){var i=a&&a!==F?ot(a)||a:F;if(null===t||angular.isUndefined(t))return t;if(a&&v(a),angular.isArray(t)){for(var s={},o=0,l=t.length;o<l;o++)s[t[o]]=j.instant(t[o],e,n,a,r);return s}if(angular.isString(t)&&t.length<1)return t;t&&(t=st.apply(t));var u,c,f=[];z&&f.push(z),i&&f.push(i),T&&T.length&&(f=f.concat(T));for(var g=0,p=f.length;g<p;g++){var h=f[g];if(q[h]&&void 0!==q[h][t]&&(u=d(t,e,n,i,r)),void 0!==u)break}u||""===u||(U||M?u=w(t):(u=b.interpolate(t,e,"filter",r),V&&!S&&(c=C(t,e,r)),V&&!S&&c&&(u=c)));return u},j.versionInfo=function(){return"2.18.1"},j.loaderCache=function(){return H},j.directivePriority=function(){return nt},j.statefulFilter=function(){return at},j.isReady=function(){return tt};var n=m.defer();n.promise.then(function(){tt=!0}),j.onReady=function(t){var e=m.defer();return angular.isFunction(t)&&e.promise.then(t),tt?e.resolve():n.promise.then(e.resolve),e.promise},j.getAvailableLanguageKeys=function(){return 0<Y.length?Y:null},j.getTranslationTable=function(t){return(t=t||j.use())&&q[t]?angular.copy(q[t]):null};var a=s.$on("$translateReady",function(){n.resolve(),a(),a=null}),r=s.$on("$translateChangeEnd",function(){n.resolve(),r(),r=null});if(D){if(angular.equals(q,{})&&j.use()&&j.use(j.use()),T&&T.length)for(var E=function(t){return lt(t.key,t.table),s.$emit("$translateChangeEnd",{language:t.key}),t},k=0,P=T.length;k<P;k++){var A=T[k];!X&&q[A]||(f[A]=u(A).then(E))}}else s.$emit("$translateReady",{language:j.use()});return j}]}function n(s,o){"use strict";var t={};return t.setLocale=function(t){t},t.getInterpolationIdentifier=function(){return"default"},t.useSanitizeValueStrategy=function(t){return o.useStrategy(t),this},t.interpolate=function(t,e,n,a,r){var i;return e=e||{},e=o.sanitize(e,"params",a,n),angular.isNumber(t)?i=""+t:angular.isString(t)?(i=s(t)(e),i=o.sanitize(i,"text",a,n)):i="",i},t}function a(S,L,j,w,C){"use strict";var N=function(t){return angular.isString(t)?t.toLowerCase():t};return{restrict:"AE",scope:!0,priority:S.directivePriority(),compile:function(t,h){var d=h.translateValues?h.translateValues:void 0,v=h.translateInterpolation?h.translateInterpolation:void 0,m=h.translateSanitizeStrategy?h.translateSanitizeStrategy:void 0,$=t[0].outerHTML.match(/translate-value-+/i),y="^(.*)("+L.startSymbol()+".*"+L.endSymbol()+")(.*)",b="^(.*)"+L.startSymbol()+"(.*)"+L.endSymbol()+"(.*)";return function(r,l,u){r.interpolateParams={},r.preText="",r.postText="",r.translateNamespace=function t(e){if(e.translateNamespace)return e.translateNamespace;if(e.$parent)return t(e.$parent)}(r);var i={},s=function(t){if(angular.isFunction(s._unwatchOld)&&(s._unwatchOld(),s._unwatchOld=void 0),angular.equals(t,"")||!angular.isDefined(t)){var e=function(){return this.toString().replace(/^\s+|\s+$/g,"")}.apply(l.text()),n=e.match(y);if(angular.isArray(n)){r.preText=n[1],r.postText=n[3],i.translate=L(n[2])(r.$parent);var a=e.match(b);angular.isArray(a)&&a[2]&&a[2].length&&(s._unwatchOld=r.$watch(a[2],function(t){i.translate=t,c()}))}else i.translate=e||void 0}else i.translate=t;c()},t=function(e){u.$observe(e,function(t){i[e]=t,c()})};!function(t,e,n){if(e.translateValues&&angular.extend(t,w(e.translateValues)(r.$parent)),$)for(var a in n)Object.prototype.hasOwnProperty.call(e,a)&&"translateValue"===a.substr(0,14)&&"translateValues"!==a&&(t[N(a.substr(14,1))+a.substr(15)]=n[a])}(r.interpolateParams,u,h);var e=!0;for(var n in u.$observe("translate",function(t){void 0===t?s(""):""===t&&e||(i.translate=t,c()),e=!1}),u)u.hasOwnProperty(n)&&"translateAttr"===n.substr(0,13)&&13<n.length&&t(n);if(u.$observe("translateDefault",function(t){r.defaultText=t,c()}),m&&u.$observe("translateSanitizeStrategy",function(t){r.sanitizeStrategy=w(t)(r.$parent),c()}),d&&u.$observe("translateValues",function(t){t&&r.$parent.$watch(function(){angular.extend(r.interpolateParams,w(t)(r.$parent))})}),$){var a=function(n){u.$observe(n,function(t){var e=N(n.substr(14,1))+n.substr(15);r.interpolateParams[e]=t})};for(var o in u)Object.prototype.hasOwnProperty.call(u,o)&&"translateValue"===o.substr(0,14)&&"translateValues"!==o&&a(o)}var c=function(){for(var t in i)i.hasOwnProperty(t)&&void 0!==i[t]&&f(t,i[t],r,r.interpolateParams,r.defaultText,r.translateNamespace)},f=function(e,t,n,a,r,i){t?(i&&"."===t.charAt(0)&&(t=i+t),S(t,a,v,r,n.translateLanguage,n.sanitizeStrategy).then(function(t){g(t,n,!0,e)},function(t){g(t,n,!1,e)})):g(t,n,!1,e)},g=function(t,e,n,a){if(n||void 0!==e.defaultText&&(t=e.defaultText),"translate"===a){(n||!n&&!S.isKeepContent()&&void 0===u.translateKeepContent)&&l.empty().append(e.preText+t+e.postText);var r=S.isPostCompilingEnabled(),i=void 0!==h.translateCompile,s=i&&"false"!==h.translateCompile;(r&&!i||s)&&j(l.contents())(e)}else{var o=u.$attr[a];"data-"===o.substr(0,5)&&(o=o.substr(5)),o=o.substr(15),l.attr(o,t)}};(d||$||u.translateDefault)&&r.$watch("interpolateParams",c,!0),r.$on("translateLanguageChanged",c);var p=C.$on("$translateChangeSuccess",c);l.text().length?u.translate?s(u.translate):s(""):u.translate&&s(u.translate),c(),r.$on("$destroy",p)}}}}function r(u,c){"use strict";return{restrict:"A",priority:u.directivePriority(),link:function(n,a,r){var i,s,o,l={},t=function(){angular.forEach(i,function(t,e){t&&(l[e]=!0,n.translateNamespace&&"."===t.charAt(0)&&(t=n.translateNamespace+t),u(t,s,r.translateInterpolation,void 0,n.translateLanguage,o).then(function(t){a.attr(e,t)},function(t){a.attr(e,t)}))}),angular.forEach(l,function(t,e){i[e]||(a.removeAttr(e),delete l[e])})};f(n,r.translateAttr,function(t){i=t},t),f(n,r.translateValues,function(t){s=t},t),f(n,r.translateSanitizeStrategy,function(t){o=t},t),r.translateValues&&n.$watch(r.translateValues,t,!0),n.$on("translateLanguageChanged",t);var e=c.$on("$translateChangeSuccess",t);t(),n.$on("$destroy",e)}}}function f(t,e,n,a){"use strict";e&&("::"===e.substr(0,2)?e=e.substr(2):t.$watch(e,function(t){n(t),a()},!0),n(t.$eval(e)))}function i(s,o){"use strict";return{compile:function(t){var i=function(t){t.addClass(s.cloakClassName())};return i(t),function(t,e,n){var a=function(t){t.removeClass(s.cloakClassName())}.bind(this,e),r=i.bind(this,e);n.translateCloak&&n.translateCloak.length?(n.$observe("translateCloak",function(t){s(t).then(a,r)}),o.$on("$translateChangeSuccess",function(){s(n.translateCloak).then(a,r)})):s.onReady(a)}}}}function s(){"use strict";return{restrict:"A",scope:!0,compile:function(){return{pre:function(t,e,n){t.translateNamespace=function t(e){if(e.translateNamespace)return e.translateNamespace;if(e.$parent)return t(e.$parent)}(t),t.translateNamespace&&"."===n.translateNamespace.charAt(0)?t.translateNamespace+=n.translateNamespace:t.translateNamespace=n.translateNamespace}}}}}function o(){"use strict";return{restrict:"A",scope:!0,compile:function(){return function(e,t,n){n.$observe("translateLanguage",function(t){e.translateLanguage=t}),e.$watch("translateLanguage",function(){e.$broadcast("translateLanguageChanged")})}}}}function l(i,s){"use strict";var t=function(t,e,n,a){if(!angular.isObject(e)){var r=this||{__SCOPE_IS_NOT_AVAILABLE:"More info at https://github.com/angular/angular.js/commit/8863b9d04c722b278fa93c5d66ad1e578ad6eb1f"};e=i(e)(r)}return s.instant(t,e,n,a)};return s.statefulFilter()&&(t.$stateful=!0),t}function u(t){"use strict";return t("translations")}return t.$inject=["$translate"],e.$inject=["$STORAGE_KEY","$windowProvider","$translateSanitizationProvider","pascalprechtTranslateOverrider"],n.$inject=["$interpolate","$translateSanitization"],a.$inject=["$translate","$interpolate","$compile","$parse","$rootScope"],r.$inject=["$translate","$rootScope"],i.$inject=["$translate","$rootScope"],l.$inject=["$parse","$translate"],u.$inject=["$cacheFactory"],angular.module("pascalprecht.translate",["ng"]).run(t),t.displayName="runTranslate",angular.module("pascalprecht.translate").provider("$translateSanitization",function(){"use strict";var n,a,g,p=null,h=!1,d=!1;(g={sanitize:function(t,e){return"text"===e&&(t=i(t)),t},escape:function(t,e){return"text"===e&&(t=r(t)),t},sanitizeParameters:function(t,e){return"params"===e&&(t=o(t,i)),t},escapeParameters:function(t,e){return"params"===e&&(t=o(t,r)),t},sce:function(t,e,n){return"text"===e?t=s(t):"params"===e&&"filter"!==n&&(t=o(t,r)),t},sceParameters:function(t,e){return"params"===e&&(t=o(t,s)),t}}).escaped=g.escapeParameters,this.addStrategy=function(t,e){return g[t]=e,this},this.removeStrategy=function(t){return delete g[t],this},this.useStrategy=function(t){return h=!0,p=t,this},this.$get=["$injector","$log",function(u,c){var e,f={};return u.has("$sanitize")&&(n=u.get("$sanitize")),u.has("$sce")&&(a=u.get("$sce")),{useStrategy:(e=this,function(t){e.useStrategy(t)}),sanitize:function(t,e,n,a){if(p||h||d||(c.warn("pascalprecht.translate.$translateSanitization: No sanitization strategy has been configured. This can have serious security implications. See http://angular-translate.github.io/docs/#/guide/19_security for details."),d=!0),n||null===n||(n=p),!n)return t;a||(a="service");var r,i,s,o,l=angular.isArray(n)?n:[n];return r=t,i=e,s=a,o=l,angular.forEach(o,function(e){if(angular.isFunction(e))r=e(r,i,s);else if(angular.isFunction(g[e]))r=g[e](r,i,s);else{if(!angular.isString(g[e]))throw new Error("pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: '"+e+"'");if(!f[g[e]])try{f[g[e]]=u.get(g[e])}catch(t){throw f[g[e]]=function(){},new Error("pascalprecht.translate.$translateSanitization: Unknown sanitization strategy: '"+e+"'")}r=f[g[e]](r,i,s)}}),r}}}];var r=function(t){var e=angular.element("<div></div>");return e.text(t),e.html()},i=function(t){if(!n)throw new Error("pascalprecht.translate.$translateSanitization: Error cannot find $sanitize service. Either include the ngSanitize module (https://docs.angularjs.org/api/ngSanitize) or use a sanitization strategy which does not depend on $sanitize, such as 'escape'.");return n(t)},s=function(t){if(!a)throw new Error("pascalprecht.translate.$translateSanitization: Error cannot find $sce service.");return a.trustAsHtml(t)},o=function(t,n,a){if(angular.isDate(t))return t;if(angular.isObject(t)){var r=angular.isArray(t)?[]:{};if(a){if(-1<a.indexOf(t))throw new Error("pascalprecht.translate.$translateSanitization: Error cannot interpolate parameter due recursive object")}else a=[];return a.push(t),angular.forEach(t,function(t,e){angular.isFunction(t)||(r[e]=o(t,n,a))}),a.splice(-1,1),r}return angular.isNumber(t)?t:!0===t||!1===t?t:angular.isUndefined(t)||null===t?t:n(t)}}),angular.module("pascalprecht.translate").constant("pascalprechtTranslateOverrider",{}).provider("$translate",e),e.displayName="displayName",angular.module("pascalprecht.translate").factory("$translateDefaultInterpolation",n),n.displayName="$translateDefaultInterpolation",angular.module("pascalprecht.translate").constant("$STORAGE_KEY","NG_TRANSLATE_LANG_KEY"),angular.module("pascalprecht.translate").directive("translate",a),a.displayName="translateDirective",angular.module("pascalprecht.translate").directive("translateAttr",r),r.displayName="translateAttrDirective",angular.module("pascalprecht.translate").directive("translateCloak",i),i.displayName="translateCloakDirective",angular.module("pascalprecht.translate").directive("translateNamespace",s),s.displayName="translateNamespaceDirective",angular.module("pascalprecht.translate").directive("translateLanguage",o),o.displayName="translateLanguageDirective",angular.module("pascalprecht.translate").filter("translate",l),l.displayName="translateFilterFactory",angular.module("pascalprecht.translate").factory("$translationCache",u),u.displayName="$translationCache","pascalprecht.translate"});
var process = process || {env: {NODE_ENV: "development"}};
/*
 * angular-ui-bootstrap
 * http://angular-ui.github.io/bootstrap/

 * Version: 1.3.3 - 2016-05-22
 * License: MIT
 */angular.module("ui.bootstrap",["ui.bootstrap.tpls","ui.bootstrap.collapse","ui.bootstrap.accordion","ui.bootstrap.alert","ui.bootstrap.buttons","ui.bootstrap.carousel","ui.bootstrap.dateparser","ui.bootstrap.isClass","ui.bootstrap.datepicker","ui.bootstrap.position","ui.bootstrap.datepickerPopup","ui.bootstrap.debounce","ui.bootstrap.dropdown","ui.bootstrap.stackedMap","ui.bootstrap.modal","ui.bootstrap.paging","ui.bootstrap.pager","ui.bootstrap.pagination","ui.bootstrap.tooltip","ui.bootstrap.popover","ui.bootstrap.progressbar","ui.bootstrap.rating","ui.bootstrap.tabs","ui.bootstrap.timepicker","ui.bootstrap.typeahead"]),angular.module("ui.bootstrap.tpls",["uib/template/accordion/accordion-group.html","uib/template/accordion/accordion.html","uib/template/alert/alert.html","uib/template/carousel/carousel.html","uib/template/carousel/slide.html","uib/template/datepicker/datepicker.html","uib/template/datepicker/day.html","uib/template/datepicker/month.html","uib/template/datepicker/year.html","uib/template/datepickerPopup/popup.html","uib/template/modal/backdrop.html","uib/template/modal/window.html","uib/template/pager/pager.html","uib/template/pagination/pagination.html","uib/template/tooltip/tooltip-html-popup.html","uib/template/tooltip/tooltip-popup.html","uib/template/tooltip/tooltip-template-popup.html","uib/template/popover/popover-html.html","uib/template/popover/popover-template.html","uib/template/popover/popover.html","uib/template/progressbar/bar.html","uib/template/progressbar/progress.html","uib/template/progressbar/progressbar.html","uib/template/rating/rating.html","uib/template/tabs/tab.html","uib/template/tabs/tabset.html","uib/template/timepicker/timepicker.html","uib/template/typeahead/typeahead-match.html","uib/template/typeahead/typeahead-popup.html"]),angular.module("ui.bootstrap.collapse",[]).directive("uibCollapse",["$animate","$q","$parse","$injector",function(a,b,c,d){var e=d.has("$animateCss")?d.get("$animateCss"):null;return{link:function(d,f,g){function h(){f.hasClass("collapse")&&f.hasClass("in")||b.resolve(l(d)).then(function(){f.removeClass("collapse").addClass("collapsing").attr("aria-expanded",!0).attr("aria-hidden",!1),e?e(f,{addClass:"in",easing:"ease",to:{height:f[0].scrollHeight+"px"}}).start()["finally"](i):a.addClass(f,"in",{to:{height:f[0].scrollHeight+"px"}}).then(i)})}function i(){f.removeClass("collapsing").addClass("collapse").css({height:"auto"}),m(d)}function j(){return f.hasClass("collapse")||f.hasClass("in")?void b.resolve(n(d)).then(function(){f.css({height:f[0].scrollHeight+"px"}).removeClass("collapse").addClass("collapsing").attr("aria-expanded",!1).attr("aria-hidden",!0),e?e(f,{removeClass:"in",to:{height:"0"}}).start()["finally"](k):a.removeClass(f,"in",{to:{height:"0"}}).then(k)}):k()}function k(){f.css({height:"0"}),f.removeClass("collapsing").addClass("collapse"),o(d)}var l=c(g.expanding),m=c(g.expanded),n=c(g.collapsing),o=c(g.collapsed);d.$eval(g.uibCollapse)||f.addClass("in").addClass("collapse").attr("aria-expanded",!0).attr("aria-hidden",!1).css({height:"auto"}),d.$watch(g.uibCollapse,function(a){a?j():h()})}}}]),angular.module("ui.bootstrap.accordion",["ui.bootstrap.collapse"]).constant("uibAccordionConfig",{closeOthers:!0}).controller("UibAccordionController",["$scope","$attrs","uibAccordionConfig",function(a,b,c){this.groups=[],this.closeOthers=function(d){var e=angular.isDefined(b.closeOthers)?a.$eval(b.closeOthers):c.closeOthers;e&&angular.forEach(this.groups,function(a){a!==d&&(a.isOpen=!1)})},this.addGroup=function(a){var b=this;this.groups.push(a),a.$on("$destroy",function(c){b.removeGroup(a)})},this.removeGroup=function(a){var b=this.groups.indexOf(a);-1!==b&&this.groups.splice(b,1)}}]).directive("uibAccordion",function(){return{controller:"UibAccordionController",controllerAs:"accordion",transclude:!0,templateUrl:function(a,b){return b.templateUrl||"uib/template/accordion/accordion.html"}}}).directive("uibAccordionGroup",function(){return{require:"^uibAccordion",transclude:!0,replace:!0,templateUrl:function(a,b){return b.templateUrl||"uib/template/accordion/accordion-group.html"},scope:{heading:"@",panelClass:"@?",isOpen:"=?",isDisabled:"=?"},controller:function(){this.setHeading=function(a){this.heading=a}},link:function(a,b,c,d){d.addGroup(a),a.openClass=c.openClass||"panel-open",a.panelClass=c.panelClass||"panel-default",a.$watch("isOpen",function(c){b.toggleClass(a.openClass,!!c),c&&d.closeOthers(a)}),a.toggleOpen=function(b){a.isDisabled||b&&32!==b.which||(a.isOpen=!a.isOpen)};var e="accordiongroup-"+a.$id+"-"+Math.floor(1e4*Math.random());a.headingId=e+"-tab",a.panelId=e+"-panel"}}}).directive("uibAccordionHeading",function(){return{transclude:!0,template:"",replace:!0,require:"^uibAccordionGroup",link:function(a,b,c,d,e){d.setHeading(e(a,angular.noop))}}}).directive("uibAccordionTransclude",function(){function a(){return"uib-accordion-header,data-uib-accordion-header,x-uib-accordion-header,uib\\:accordion-header,[uib-accordion-header],[data-uib-accordion-header],[x-uib-accordion-header]"}return{require:"^uibAccordionGroup",link:function(b,c,d,e){b.$watch(function(){return e[d.uibAccordionTransclude]},function(b){if(b){var d=angular.element(c[0].querySelector(a()));d.html(""),d.append(b)}})}}}),angular.module("ui.bootstrap.alert",[]).controller("UibAlertController",["$scope","$attrs","$interpolate","$timeout",function(a,b,c,d){a.closeable=!!b.close;var e=angular.isDefined(b.dismissOnTimeout)?c(b.dismissOnTimeout)(a.$parent):null;e&&d(function(){a.close()},parseInt(e,10))}]).directive("uibAlert",function(){return{controller:"UibAlertController",controllerAs:"alert",templateUrl:function(a,b){return b.templateUrl||"uib/template/alert/alert.html"},transclude:!0,replace:!0,scope:{type:"@",close:"&"}}}),angular.module("ui.bootstrap.buttons",[]).constant("uibButtonConfig",{activeClass:"active",toggleEvent:"click"}).controller("UibButtonsController",["uibButtonConfig",function(a){this.activeClass=a.activeClass||"active",this.toggleEvent=a.toggleEvent||"click"}]).directive("uibBtnRadio",["$parse",function(a){return{require:["uibBtnRadio","ngModel"],controller:"UibButtonsController",controllerAs:"buttons",link:function(b,c,d,e){var f=e[0],g=e[1],h=a(d.uibUncheckable);c.find("input").css({display:"none"}),g.$render=function(){c.toggleClass(f.activeClass,angular.equals(g.$modelValue,b.$eval(d.uibBtnRadio)))},c.on(f.toggleEvent,function(){if(!d.disabled){var a=c.hasClass(f.activeClass);a&&!angular.isDefined(d.uncheckable)||b.$apply(function(){g.$setViewValue(a?null:b.$eval(d.uibBtnRadio)),g.$render()})}}),d.uibUncheckable&&b.$watch(h,function(a){d.$set("uncheckable",a?"":void 0)})}}}]).directive("uibBtnCheckbox",function(){return{require:["uibBtnCheckbox","ngModel"],controller:"UibButtonsController",controllerAs:"button",link:function(a,b,c,d){function e(){return g(c.btnCheckboxTrue,!0)}function f(){return g(c.btnCheckboxFalse,!1)}function g(b,c){return angular.isDefined(b)?a.$eval(b):c}var h=d[0],i=d[1];b.find("input").css({display:"none"}),i.$render=function(){b.toggleClass(h.activeClass,angular.equals(i.$modelValue,e()))},b.on(h.toggleEvent,function(){c.disabled||a.$apply(function(){i.$setViewValue(b.hasClass(h.activeClass)?f():e()),i.$render()})})}}}),angular.module("ui.bootstrap.carousel",[]).controller("UibCarouselController",["$scope","$element","$interval","$timeout","$animate",function(a,b,c,d,e){function f(){for(;t.length;)t.shift()}function g(a){for(var b=0;b<q.length;b++)q[b].slide.active=b===a}function h(c,d,i){if(!u){if(angular.extend(c,{direction:i}),angular.extend(q[s].slide||{},{direction:i}),e.enabled(b)&&!a.$currentTransition&&q[d].element&&p.slides.length>1){q[d].element.data(r,c.direction);var j=p.getCurrentIndex();angular.isNumber(j)&&q[j].element&&q[j].element.data(r,c.direction),a.$currentTransition=!0,e.on("addClass",q[d].element,function(b,c){if("close"===c&&(a.$currentTransition=null,e.off("addClass",b),t.length)){var d=t.pop().slide,g=d.index,i=g>p.getCurrentIndex()?"next":"prev";f(),h(d,g,i)}})}a.active=c.index,s=c.index,g(d),l()}}function i(a){for(var b=0;b<q.length;b++)if(q[b].slide===a)return b}function j(){n&&(c.cancel(n),n=null)}function k(b){b.length||(a.$currentTransition=null,f())}function l(){j();var b=+a.interval;!isNaN(b)&&b>0&&(n=c(m,b))}function m(){var b=+a.interval;o&&!isNaN(b)&&b>0&&q.length?a.next():a.pause()}var n,o,p=this,q=p.slides=a.slides=[],r="uib-slideDirection",s=a.active,t=[],u=!1;p.addSlide=function(b,c){q.push({slide:b,element:c}),q.sort(function(a,b){return+a.slide.index-+b.slide.index}),(b.index===a.active||1===q.length&&!angular.isNumber(a.active))&&(a.$currentTransition&&(a.$currentTransition=null),s=b.index,a.active=b.index,g(s),p.select(q[i(b)]),1===q.length&&a.play())},p.getCurrentIndex=function(){for(var a=0;a<q.length;a++)if(q[a].slide.index===s)return a},p.next=a.next=function(){var b=(p.getCurrentIndex()+1)%q.length;return 0===b&&a.noWrap()?void a.pause():p.select(q[b],"next")},p.prev=a.prev=function(){var b=p.getCurrentIndex()-1<0?q.length-1:p.getCurrentIndex()-1;return a.noWrap()&&b===q.length-1?void a.pause():p.select(q[b],"prev")},p.removeSlide=function(b){var c=i(b),d=t.indexOf(q[c]);-1!==d&&t.splice(d,1),q.splice(c,1),q.length>0&&s===c?c>=q.length?(s=q.length-1,a.active=s,g(s),p.select(q[q.length-1])):(s=c,a.active=s,g(s),p.select(q[c])):s>c&&(s--,a.active=s),0===q.length&&(s=null,a.active=null,f())},p.select=a.select=function(b,c){var d=i(b.slide);void 0===c&&(c=d>p.getCurrentIndex()?"next":"prev"),b.slide.index===s||a.$currentTransition?b&&b.slide.index!==s&&a.$currentTransition&&t.push(q[d]):h(b.slide,d,c)},a.indexOfSlide=function(a){return+a.slide.index},a.isActive=function(b){return a.active===b.slide.index},a.isPrevDisabled=function(){return 0===a.active&&a.noWrap()},a.isNextDisabled=function(){return a.active===q.length-1&&a.noWrap()},a.pause=function(){a.noPause||(o=!1,j())},a.play=function(){o||(o=!0,l())},a.$on("$destroy",function(){u=!0,j()}),a.$watch("noTransition",function(a){e.enabled(b,!a)}),a.$watch("interval",l),a.$watchCollection("slides",k),a.$watch("active",function(a){if(angular.isNumber(a)&&s!==a){for(var b=0;b<q.length;b++)if(q[b].slide.index===a){a=b;break}var c=q[a];c&&(g(a),p.select(q[a]),s=a)}})}]).directive("uibCarousel",function(){return{transclude:!0,replace:!0,controller:"UibCarouselController",controllerAs:"carousel",templateUrl:function(a,b){return b.templateUrl||"uib/template/carousel/carousel.html"},scope:{active:"=",interval:"=",noTransition:"=",noPause:"=",noWrap:"&"}}}).directive("uibSlide",function(){return{require:"^uibCarousel",transclude:!0,replace:!0,templateUrl:function(a,b){return b.templateUrl||"uib/template/carousel/slide.html"},scope:{actual:"=?",index:"=?"},link:function(a,b,c,d){d.addSlide(a,b),a.$on("$destroy",function(){d.removeSlide(a)})}}}).animation(".item",["$animateCss",function(a){function b(a,b,c){a.removeClass(b),c&&c()}var c="uib-slideDirection";return{beforeAddClass:function(d,e,f){if("active"===e){var g=!1,h=d.data(c),i="next"===h?"left":"right",j=b.bind(this,d,i+" "+h,f);return d.addClass(h),a(d,{addClass:i}).start().done(j),function(){g=!0}}f()},beforeRemoveClass:function(d,e,f){if("active"===e){var g=!1,h=d.data(c),i="next"===h?"left":"right",j=b.bind(this,d,i,f);return a(d,{addClass:i}).start().done(j),function(){g=!0}}f()}}}]),angular.module("ui.bootstrap.dateparser",[]).service("uibDateParser",["$log","$locale","dateFilter","orderByFilter",function(a,b,c,d){function e(a,b){var c=[],e=a.split(""),f=a.indexOf("'");if(f>-1){var g=!1;a=a.split("");for(var h=f;h<a.length;h++)g?("'"===a[h]&&(h+1<a.length&&"'"===a[h+1]?(a[h+1]="$",e[h+1]=""):(e[h]="",g=!1)),a[h]="$"):"'"===a[h]&&(a[h]="$",e[h]="",g=!0);a=a.join("")}return angular.forEach(n,function(d){var f=a.indexOf(d.key);if(f>-1){a=a.split(""),e[f]="("+d.regex+")",a[f]="$";for(var g=f+1,h=f+d.key.length;h>g;g++)e[g]="",a[g]="$";a=a.join(""),c.push({index:f,key:d.key,apply:d[b],matcher:d.regex})}}),{regex:new RegExp("^"+e.join("")+"$"),map:d(c,"index")}}function f(a,b,c){return 1>c?!1:1===b&&c>28?29===c&&(a%4===0&&a%100!==0||a%400===0):3===b||5===b||8===b||10===b?31>c:!0}function g(a){return parseInt(a,10)}function h(a,b){return a&&b?l(a,b):a}function i(a,b){return a&&b?l(a,b,!0):a}function j(a,b){a=a.replace(/:/g,"");var c=Date.parse("Jan 01, 1970 00:00:00 "+a)/6e4;return isNaN(c)?b:c}function k(a,b){return a=new Date(a.getTime()),a.setMinutes(a.getMinutes()+b),a}function l(a,b,c){c=c?-1:1;var d=a.getTimezoneOffset(),e=j(b,d);return k(a,c*(e-d))}var m,n,o=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g;this.init=function(){m=b.id,this.parsers={},this.formatters={},n=[{key:"yyyy",regex:"\\d{4}",apply:function(a){this.year=+a},formatter:function(a){var b=new Date;return b.setFullYear(Math.abs(a.getFullYear())),c(b,"yyyy")}},{key:"yy",regex:"\\d{2}",apply:function(a){a=+a,this.year=69>a?a+2e3:a+1900},formatter:function(a){var b=new Date;return b.setFullYear(Math.abs(a.getFullYear())),c(b,"yy")}},{key:"y",regex:"\\d{1,4}",apply:function(a){this.year=+a},formatter:function(a){var b=new Date;return b.setFullYear(Math.abs(a.getFullYear())),c(b,"y")}},{key:"M!",regex:"0?[1-9]|1[0-2]",apply:function(a){this.month=a-1},formatter:function(a){var b=a.getMonth();return/^[0-9]$/.test(b)?c(a,"MM"):c(a,"M")}},{key:"MMMM",regex:b.DATETIME_FORMATS.MONTH.join("|"),apply:function(a){this.month=b.DATETIME_FORMATS.MONTH.indexOf(a)},formatter:function(a){return c(a,"MMMM")}},{key:"MMM",regex:b.DATETIME_FORMATS.SHORTMONTH.join("|"),apply:function(a){this.month=b.DATETIME_FORMATS.SHORTMONTH.indexOf(a)},formatter:function(a){return c(a,"MMM")}},{key:"MM",regex:"0[1-9]|1[0-2]",apply:function(a){this.month=a-1},formatter:function(a){return c(a,"MM")}},{key:"M",regex:"[1-9]|1[0-2]",apply:function(a){this.month=a-1},formatter:function(a){return c(a,"M")}},{key:"d!",regex:"[0-2]?[0-9]{1}|3[0-1]{1}",apply:function(a){this.date=+a},formatter:function(a){var b=a.getDate();return/^[1-9]$/.test(b)?c(a,"dd"):c(a,"d")}},{key:"dd",regex:"[0-2][0-9]{1}|3[0-1]{1}",apply:function(a){this.date=+a},formatter:function(a){return c(a,"dd")}},{key:"d",regex:"[1-2]?[0-9]{1}|3[0-1]{1}",apply:function(a){this.date=+a},formatter:function(a){return c(a,"d")}},{key:"EEEE",regex:b.DATETIME_FORMATS.DAY.join("|"),formatter:function(a){return c(a,"EEEE")}},{key:"EEE",regex:b.DATETIME_FORMATS.SHORTDAY.join("|"),formatter:function(a){return c(a,"EEE")}},{key:"HH",regex:"(?:0|1)[0-9]|2[0-3]",apply:function(a){this.hours=+a},formatter:function(a){return c(a,"HH")}},{key:"hh",regex:"0[0-9]|1[0-2]",apply:function(a){this.hours=+a},formatter:function(a){return c(a,"hh")}},{key:"H",regex:"1?[0-9]|2[0-3]",apply:function(a){this.hours=+a},formatter:function(a){return c(a,"H")}},{key:"h",regex:"[0-9]|1[0-2]",apply:function(a){this.hours=+a},formatter:function(a){return c(a,"h")}},{key:"mm",regex:"[0-5][0-9]",apply:function(a){this.minutes=+a},formatter:function(a){return c(a,"mm")}},{key:"m",regex:"[0-9]|[1-5][0-9]",apply:function(a){this.minutes=+a},formatter:function(a){return c(a,"m")}},{key:"sss",regex:"[0-9][0-9][0-9]",apply:function(a){this.milliseconds=+a},formatter:function(a){return c(a,"sss")}},{key:"ss",regex:"[0-5][0-9]",apply:function(a){this.seconds=+a},formatter:function(a){return c(a,"ss")}},{key:"s",regex:"[0-9]|[1-5][0-9]",apply:function(a){this.seconds=+a},formatter:function(a){return c(a,"s")}},{key:"a",regex:b.DATETIME_FORMATS.AMPMS.join("|"),apply:function(a){12===this.hours&&(this.hours=0),"PM"===a&&(this.hours+=12)},formatter:function(a){return c(a,"a")}},{key:"Z",regex:"[+-]\\d{4}",apply:function(a){var b=a.match(/([+-])(\d{2})(\d{2})/),c=b[1],d=b[2],e=b[3];this.hours+=g(c+d),this.minutes+=g(c+e)},formatter:function(a){return c(a,"Z")}},{key:"ww",regex:"[0-4][0-9]|5[0-3]",formatter:function(a){return c(a,"ww")}},{key:"w",regex:"[0-9]|[1-4][0-9]|5[0-3]",formatter:function(a){return c(a,"w")}},{key:"GGGG",regex:b.DATETIME_FORMATS.ERANAMES.join("|").replace(/\s/g,"\\s"),formatter:function(a){return c(a,"GGGG")}},{key:"GGG",regex:b.DATETIME_FORMATS.ERAS.join("|"),formatter:function(a){return c(a,"GGG")}},{key:"GG",regex:b.DATETIME_FORMATS.ERAS.join("|"),formatter:function(a){return c(a,"GG")}},{key:"G",regex:b.DATETIME_FORMATS.ERAS.join("|"),formatter:function(a){return c(a,"G")}}]},this.init(),this.filter=function(a,c){if(!angular.isDate(a)||isNaN(a)||!c)return"";c=b.DATETIME_FORMATS[c]||c,b.id!==m&&this.init(),this.formatters[c]||(this.formatters[c]=e(c,"formatter"));var d=this.formatters[c],f=d.map,g=c;return f.reduce(function(b,c,d){var e=g.match(new RegExp("(.*)"+c.key));e&&angular.isString(e[1])&&(b+=e[1],g=g.replace(e[1]+c.key,""));var h=d===f.length-1?g:"";return c.apply?b+c.apply.call(null,a)+h:b+h},"")},this.parse=function(c,d,g){if(!angular.isString(c)||!d)return c;d=b.DATETIME_FORMATS[d]||d,d=d.replace(o,"\\$&"),b.id!==m&&this.init(),this.parsers[d]||(this.parsers[d]=e(d,"apply"));var h=this.parsers[d],i=h.regex,j=h.map,k=c.match(i),l=!1;if(k&&k.length){var n,p;angular.isDate(g)&&!isNaN(g.getTime())?n={year:g.getFullYear(),month:g.getMonth(),date:g.getDate(),hours:g.getHours(),minutes:g.getMinutes(),seconds:g.getSeconds(),milliseconds:g.getMilliseconds()}:(g&&a.warn("dateparser:","baseDate is not a valid date"),n={year:1900,month:0,date:1,hours:0,minutes:0,seconds:0,milliseconds:0});for(var q=1,r=k.length;r>q;q++){var s=j[q-1];"Z"===s.matcher&&(l=!0),s.apply&&s.apply.call(n,k[q])}var t=l?Date.prototype.setUTCFullYear:Date.prototype.setFullYear,u=l?Date.prototype.setUTCHours:Date.prototype.setHours;return f(n.year,n.month,n.date)&&(!angular.isDate(g)||isNaN(g.getTime())||l?(p=new Date(0),t.call(p,n.year,n.month,n.date),u.call(p,n.hours||0,n.minutes||0,n.seconds||0,n.milliseconds||0)):(p=new Date(g),t.call(p,n.year,n.month,n.date),u.call(p,n.hours,n.minutes,n.seconds,n.milliseconds))),p}},this.toTimezone=h,this.fromTimezone=i,this.timezoneToOffset=j,this.addDateMinutes=k,this.convertTimezoneToLocal=l}]),angular.module("ui.bootstrap.isClass",[]).directive("uibIsClass",["$animate",function(a){var b=/^\s*([\s\S]+?)\s+on\s+([\s\S]+?)\s*$/,c=/^\s*([\s\S]+?)\s+for\s+([\s\S]+?)\s*$/;return{restrict:"A",compile:function(d,e){function f(a,b,c){i.push(a),j.push({scope:a,element:b}),o.forEach(function(b,c){g(b,a)}),a.$on("$destroy",h)}function g(b,d){var e=b.match(c),f=d.$eval(e[1]),g=e[2],h=k[b];if(!h){var i=function(b){var c=null;j.some(function(a){var d=a.scope.$eval(m);return d===b?(c=a,!0):void 0}),h.lastActivated!==c&&(h.lastActivated&&a.removeClass(h.lastActivated.element,f),c&&a.addClass(c.element,f),h.lastActivated=c)};k[b]=h={lastActivated:null,scope:d,watchFn:i,compareWithExp:g,watcher:d.$watch(g,i)}}h.watchFn(d.$eval(g))}function h(a){var b=a.targetScope,c=i.indexOf(b);if(i.splice(c,1),j.splice(c,1),i.length){var d=i[0];angular.forEach(k,function(a){a.scope===b&&(a.watcher=d.$watch(a.compareWithExp,a.watchFn),a.scope=d)})}else k={}}var i=[],j=[],k={},l=e.uibIsClass.match(b),m=l[2],n=l[1],o=n.split(",");return f}}}]),angular.module("ui.bootstrap.datepicker",["ui.bootstrap.dateparser","ui.bootstrap.isClass"]).value("$datepickerSuppressError",!1).value("$datepickerLiteralWarning",!0).constant("uibDatepickerConfig",{datepickerMode:"day",formatDay:"dd",formatMonth:"MMMM",formatYear:"yyyy",formatDayHeader:"EEE",formatDayTitle:"MMMM yyyy",formatMonthTitle:"yyyy",maxDate:null,maxMode:"year",minDate:null,minMode:"day",ngModelOptions:{},shortcutPropagation:!1,showWeeks:!0,yearColumns:5,yearRows:4}).controller("UibDatepickerController",["$scope","$attrs","$parse","$interpolate","$locale","$log","dateFilter","uibDatepickerConfig","$datepickerLiteralWarning","$datepickerSuppressError","uibDateParser",function(a,b,c,d,e,f,g,h,i,j,k){function l(b){a.datepickerMode=b,a.datepickerOptions.datepickerMode=b}var m=this,n={$setViewValue:angular.noop},o={},p=[];!!b.datepickerOptions;a.datepickerOptions||(a.datepickerOptions={}),this.modes=["day","month","year"],["customClass","dateDisabled","datepickerMode","formatDay","formatDayHeader","formatDayTitle","formatMonth","formatMonthTitle","formatYear","maxDate","maxMode","minDate","minMode","showWeeks","shortcutPropagation","startingDay","yearColumns","yearRows"].forEach(function(b){switch(b){case"customClass":case"dateDisabled":a[b]=a.datepickerOptions[b]||angular.noop;break;case"datepickerMode":a.datepickerMode=angular.isDefined(a.datepickerOptions.datepickerMode)?a.datepickerOptions.datepickerMode:h.datepickerMode;break;case"formatDay":case"formatDayHeader":case"formatDayTitle":case"formatMonth":case"formatMonthTitle":case"formatYear":m[b]=angular.isDefined(a.datepickerOptions[b])?d(a.datepickerOptions[b])(a.$parent):h[b];break;case"showWeeks":case"shortcutPropagation":case"yearColumns":case"yearRows":m[b]=angular.isDefined(a.datepickerOptions[b])?a.datepickerOptions[b]:h[b];break;case"startingDay":angular.isDefined(a.datepickerOptions.startingDay)?m.startingDay=a.datepickerOptions.startingDay:angular.isNumber(h.startingDay)?m.startingDay=h.startingDay:m.startingDay=(e.DATETIME_FORMATS.FIRSTDAYOFWEEK+8)%7;break;case"maxDate":case"minDate":a.$watch("datepickerOptions."+b,function(a){a?angular.isDate(a)?m[b]=k.fromTimezone(new Date(a),o.timezone):(i&&f.warn("Literal date support has been deprecated, please switch to date object usage"),m[b]=new Date(g(a,"medium"))):m[b]=h[b]?k.fromTimezone(new Date(h[b]),o.timezone):null,m.refreshView()});break;case"maxMode":case"minMode":a.datepickerOptions[b]?a.$watch(function(){return a.datepickerOptions[b]},function(c){m[b]=a[b]=angular.isDefined(c)?c:datepickerOptions[b],("minMode"===b&&m.modes.indexOf(a.datepickerOptions.datepickerMode)<m.modes.indexOf(m[b])||"maxMode"===b&&m.modes.indexOf(a.datepickerOptions.datepickerMode)>m.modes.indexOf(m[b]))&&(a.datepickerMode=m[b],a.datepickerOptions.datepickerMode=m[b])}):m[b]=a[b]=h[b]||null}}),a.uniqueId="datepicker-"+a.$id+"-"+Math.floor(1e4*Math.random()),a.disabled=angular.isDefined(b.disabled)||!1,angular.isDefined(b.ngDisabled)&&p.push(a.$parent.$watch(b.ngDisabled,function(b){a.disabled=b,m.refreshView()})),a.isActive=function(b){return 0===m.compare(b.date,m.activeDate)?(a.activeDateId=b.uid,!0):!1},this.init=function(b){n=b,o=b.$options||h.ngModelOptions,a.datepickerOptions.initDate?(m.activeDate=k.fromTimezone(a.datepickerOptions.initDate,o.timezone)||new Date,a.$watch("datepickerOptions.initDate",function(a){a&&(n.$isEmpty(n.$modelValue)||n.$invalid)&&(m.activeDate=k.fromTimezone(a,o.timezone),m.refreshView())})):m.activeDate=new Date;var c=n.$modelValue?new Date(n.$modelValue):new Date;this.activeDate=isNaN(c)?k.fromTimezone(new Date,o.timezone):k.fromTimezone(c,o.timezone),n.$render=function(){m.render()}},this.render=function(){if(n.$viewValue){var a=new Date(n.$viewValue),b=!isNaN(a);b?this.activeDate=k.fromTimezone(a,o.timezone):j||f.error('Datepicker directive: "ng-model" value must be a Date object')}this.refreshView()},this.refreshView=function(){if(this.element){a.selectedDt=null,this._refreshView(),a.activeDt&&(a.activeDateId=a.activeDt.uid);var b=n.$viewValue?new Date(n.$viewValue):null;b=k.fromTimezone(b,o.timezone),n.$setValidity("dateDisabled",!b||this.element&&!this.isDisabled(b))}},this.createDateObject=function(b,c){var d=n.$viewValue?new Date(n.$viewValue):null;d=k.fromTimezone(d,o.timezone);var e=new Date;e=k.fromTimezone(e,o.timezone);var f=this.compare(b,e),g={date:b,label:k.filter(b,c),selected:d&&0===this.compare(b,d),disabled:this.isDisabled(b),past:0>f,current:0===f,future:f>0,customClass:this.customClass(b)||null};return d&&0===this.compare(b,d)&&(a.selectedDt=g),m.activeDate&&0===this.compare(g.date,m.activeDate)&&(a.activeDt=g),g},this.isDisabled=function(b){return a.disabled||this.minDate&&this.compare(b,this.minDate)<0||this.maxDate&&this.compare(b,this.maxDate)>0||a.dateDisabled&&a.dateDisabled({date:b,mode:a.datepickerMode})},this.customClass=function(b){return a.customClass({date:b,mode:a.datepickerMode})},this.split=function(a,b){for(var c=[];a.length>0;)c.push(a.splice(0,b));return c},a.select=function(b){if(a.datepickerMode===m.minMode){var c=n.$viewValue?k.fromTimezone(new Date(n.$viewValue),o.timezone):new Date(0,0,0,0,0,0,0);c.setFullYear(b.getFullYear(),b.getMonth(),b.getDate()),c=k.toTimezone(c,o.timezone),n.$setViewValue(c),n.$render()}else m.activeDate=b,l(m.modes[m.modes.indexOf(a.datepickerMode)-1]),a.$emit("uib:datepicker.mode");a.$broadcast("uib:datepicker.focus")},a.move=function(a){var b=m.activeDate.getFullYear()+a*(m.step.years||0),c=m.activeDate.getMonth()+a*(m.step.months||0);m.activeDate.setFullYear(b,c,1),m.refreshView()},a.toggleMode=function(b){b=b||1,a.datepickerMode===m.maxMode&&1===b||a.datepickerMode===m.minMode&&-1===b||(l(m.modes[m.modes.indexOf(a.datepickerMode)+b]),a.$emit("uib:datepicker.mode"))},a.keys={13:"enter",32:"space",33:"pageup",34:"pagedown",35:"end",36:"home",37:"left",38:"up",39:"right",40:"down"};var q=function(){m.element[0].focus()};a.$on("uib:datepicker.focus",q),a.keydown=function(b){var c=a.keys[b.which];if(c&&!b.shiftKey&&!b.altKey&&!a.disabled)if(b.preventDefault(),m.shortcutPropagation||b.stopPropagation(),"enter"===c||"space"===c){if(m.isDisabled(m.activeDate))return;a.select(m.activeDate)}else!b.ctrlKey||"up"!==c&&"down"!==c?(m.handleKeyDown(c,b),m.refreshView()):a.toggleMode("up"===c?1:-1)},a.$on("$destroy",function(){for(;p.length;)p.shift()()})}]).controller("UibDaypickerController",["$scope","$element","dateFilter",function(a,b,c){function d(a,b){return 1!==b||a%4!==0||a%100===0&&a%400!==0?f[b]:29}function e(a){var b=new Date(a);b.setDate(b.getDate()+4-(b.getDay()||7));var c=b.getTime();return b.setMonth(0),b.setDate(1),Math.floor(Math.round((c-b)/864e5)/7)+1}var f=[31,28,31,30,31,30,31,31,30,31,30,31];this.step={months:1},this.element=b,this.init=function(b){angular.extend(b,this),a.showWeeks=b.showWeeks,b.refreshView()},this.getDates=function(a,b){for(var c,d=new Array(b),e=new Date(a),f=0;b>f;)c=new Date(e),d[f++]=c,e.setDate(e.getDate()+1);return d},this._refreshView=function(){var b=this.activeDate.getFullYear(),d=this.activeDate.getMonth(),f=new Date(this.activeDate);f.setFullYear(b,d,1);var g=this.startingDay-f.getDay(),h=g>0?7-g:-g,i=new Date(f);h>0&&i.setDate(-h+1);for(var j=this.getDates(i,42),k=0;42>k;k++)j[k]=angular.extend(this.createDateObject(j[k],this.formatDay),{secondary:j[k].getMonth()!==d,uid:a.uniqueId+"-"+k});a.labels=new Array(7);for(var l=0;7>l;l++)a.labels[l]={abbr:c(j[l].date,this.formatDayHeader),full:c(j[l].date,"EEEE")};if(a.title=c(this.activeDate,this.formatDayTitle),a.rows=this.split(j,7),a.showWeeks){a.weekNumbers=[];for(var m=(11-this.startingDay)%7,n=a.rows.length,o=0;n>o;o++)a.weekNumbers.push(e(a.rows[o][m].date))}},this.compare=function(a,b){var c=new Date(a.getFullYear(),a.getMonth(),a.getDate()),d=new Date(b.getFullYear(),b.getMonth(),b.getDate());return c.setFullYear(a.getFullYear()),d.setFullYear(b.getFullYear()),c-d},this.handleKeyDown=function(a,b){var c=this.activeDate.getDate();if("left"===a)c-=1;else if("up"===a)c-=7;else if("right"===a)c+=1;else if("down"===a)c+=7;else if("pageup"===a||"pagedown"===a){var e=this.activeDate.getMonth()+("pageup"===a?-1:1);this.activeDate.setMonth(e,1),c=Math.min(d(this.activeDate.getFullYear(),this.activeDate.getMonth()),c)}else"home"===a?c=1:"end"===a&&(c=d(this.activeDate.getFullYear(),this.activeDate.getMonth()));this.activeDate.setDate(c)}}]).controller("UibMonthpickerController",["$scope","$element","dateFilter",function(a,b,c){this.step={years:1},this.element=b,this.init=function(a){angular.extend(a,this),a.refreshView()},this._refreshView=function(){for(var b,d=new Array(12),e=this.activeDate.getFullYear(),f=0;12>f;f++)b=new Date(this.activeDate),b.setFullYear(e,f,1),d[f]=angular.extend(this.createDateObject(b,this.formatMonth),{uid:a.uniqueId+"-"+f});a.title=c(this.activeDate,this.formatMonthTitle),a.rows=this.split(d,3)},this.compare=function(a,b){var c=new Date(a.getFullYear(),a.getMonth()),d=new Date(b.getFullYear(),b.getMonth());return c.setFullYear(a.getFullYear()),d.setFullYear(b.getFullYear()),c-d},this.handleKeyDown=function(a,b){var c=this.activeDate.getMonth();if("left"===a)c-=1;else if("up"===a)c-=3;else if("right"===a)c+=1;else if("down"===a)c+=3;else if("pageup"===a||"pagedown"===a){var d=this.activeDate.getFullYear()+("pageup"===a?-1:1);this.activeDate.setFullYear(d)}else"home"===a?c=0:"end"===a&&(c=11);this.activeDate.setMonth(c)}}]).controller("UibYearpickerController",["$scope","$element","dateFilter",function(a,b,c){function d(a){return parseInt((a-1)/f,10)*f+1}var e,f;this.element=b,this.yearpickerInit=function(){e=this.yearColumns,f=this.yearRows*e,this.step={years:f}},this._refreshView=function(){for(var b,c=new Array(f),g=0,h=d(this.activeDate.getFullYear());f>g;g++)b=new Date(this.activeDate),b.setFullYear(h+g,0,1),c[g]=angular.extend(this.createDateObject(b,this.formatYear),{uid:a.uniqueId+"-"+g});a.title=[c[0].label,c[f-1].label].join(" - "),a.rows=this.split(c,e),a.columns=e},this.compare=function(a,b){return a.getFullYear()-b.getFullYear()},this.handleKeyDown=function(a,b){var c=this.activeDate.getFullYear();"left"===a?c-=1:"up"===a?c-=e:"right"===a?c+=1:"down"===a?c+=e:"pageup"===a||"pagedown"===a?c+=("pageup"===a?-1:1)*f:"home"===a?c=d(this.activeDate.getFullYear()):"end"===a&&(c=d(this.activeDate.getFullYear())+f-1),this.activeDate.setFullYear(c)}}]).directive("uibDatepicker",function(){return{replace:!0,templateUrl:function(a,b){return b.templateUrl||"uib/template/datepicker/datepicker.html"},scope:{datepickerOptions:"=?"},require:["uibDatepicker","^ngModel"],controller:"UibDatepickerController",controllerAs:"datepicker",link:function(a,b,c,d){var e=d[0],f=d[1];e.init(f)}}}).directive("uibDaypicker",function(){return{replace:!0,templateUrl:function(a,b){return b.templateUrl||"uib/template/datepicker/day.html"},require:["^uibDatepicker","uibDaypicker"],controller:"UibDaypickerController",link:function(a,b,c,d){var e=d[0],f=d[1];f.init(e)}}}).directive("uibMonthpicker",function(){return{replace:!0,templateUrl:function(a,b){return b.templateUrl||"uib/template/datepicker/month.html"},require:["^uibDatepicker","uibMonthpicker"],controller:"UibMonthpickerController",link:function(a,b,c,d){var e=d[0],f=d[1];f.init(e)}}}).directive("uibYearpicker",function(){return{replace:!0,templateUrl:function(a,b){return b.templateUrl||"uib/template/datepicker/year.html"},require:["^uibDatepicker","uibYearpicker"],controller:"UibYearpickerController",link:function(a,b,c,d){var e=d[0];angular.extend(e,d[1]),e.yearpickerInit(),e.refreshView()}}}),angular.module("ui.bootstrap.position",[]).factory("$uibPosition",["$document","$window",function(a,b){var c,d,e={normal:/(auto|scroll)/,hidden:/(auto|scroll|hidden)/},f={auto:/\s?auto?\s?/i,primary:/^(top|bottom|left|right)$/,secondary:/^(top|bottom|left|right|center)$/,vertical:/^(top|bottom)$/},g=/(HTML|BODY)/;return{getRawNode:function(a){return a.nodeName?a:a[0]||a},parseStyle:function(a){return a=parseFloat(a),isFinite(a)?a:0},offsetParent:function(c){function d(a){return"static"===(b.getComputedStyle(a).position||"static")}c=this.getRawNode(c);for(var e=c.offsetParent||a[0].documentElement;e&&e!==a[0].documentElement&&d(e);)e=e.offsetParent;return e||a[0].documentElement},scrollbarWidth:function(e){if(e){if(angular.isUndefined(d)){var f=a.find("body");f.addClass("uib-position-body-scrollbar-measure"),d=b.innerWidth-f[0].clientWidth,d=isFinite(d)?d:0,f.removeClass("uib-position-body-scrollbar-measure")}return d}if(angular.isUndefined(c)){var g=angular.element('<div class="uib-position-scrollbar-measure"></div>');a.find("body").append(g),c=g[0].offsetWidth-g[0].clientWidth,c=isFinite(c)?c:0,g.remove()}return c},scrollbarPadding:function(a){a=this.getRawNode(a);var c=b.getComputedStyle(a),d=this.parseStyle(c.paddingRight),e=this.parseStyle(c.paddingBottom),f=this.scrollParent(a,!1,!0),h=this.scrollbarWidth(f,g.test(f.tagName));return{scrollbarWidth:h,widthOverflow:f.scrollWidth>f.clientWidth,right:d+h,originalRight:d,heightOverflow:f.scrollHeight>f.clientHeight,
bottom:e+h,originalBottom:e}},isScrollable:function(a,c){a=this.getRawNode(a);var d=c?e.hidden:e.normal,f=b.getComputedStyle(a);return d.test(f.overflow+f.overflowY+f.overflowX)},scrollParent:function(c,d,f){c=this.getRawNode(c);var g=d?e.hidden:e.normal,h=a[0].documentElement,i=b.getComputedStyle(c);if(f&&g.test(i.overflow+i.overflowY+i.overflowX))return c;var j="absolute"===i.position,k=c.parentElement||h;if(k===h||"fixed"===i.position)return h;for(;k.parentElement&&k!==h;){var l=b.getComputedStyle(k);if(j&&"static"!==l.position&&(j=!1),!j&&g.test(l.overflow+l.overflowY+l.overflowX))break;k=k.parentElement}return k},position:function(c,d){c=this.getRawNode(c);var e=this.offset(c);if(d){var f=b.getComputedStyle(c);e.top-=this.parseStyle(f.marginTop),e.left-=this.parseStyle(f.marginLeft)}var g=this.offsetParent(c),h={top:0,left:0};return g!==a[0].documentElement&&(h=this.offset(g),h.top+=g.clientTop-g.scrollTop,h.left+=g.clientLeft-g.scrollLeft),{width:Math.round(angular.isNumber(e.width)?e.width:c.offsetWidth),height:Math.round(angular.isNumber(e.height)?e.height:c.offsetHeight),top:Math.round(e.top-h.top),left:Math.round(e.left-h.left)}},offset:function(c){c=this.getRawNode(c);var d=c.getBoundingClientRect();return{width:Math.round(angular.isNumber(d.width)?d.width:c.offsetWidth),height:Math.round(angular.isNumber(d.height)?d.height:c.offsetHeight),top:Math.round(d.top+(b.pageYOffset||a[0].documentElement.scrollTop)),left:Math.round(d.left+(b.pageXOffset||a[0].documentElement.scrollLeft))}},viewportOffset:function(c,d,e){c=this.getRawNode(c),e=e!==!1;var f=c.getBoundingClientRect(),g={top:0,left:0,bottom:0,right:0},h=d?a[0].documentElement:this.scrollParent(c),i=h.getBoundingClientRect();if(g.top=i.top+h.clientTop,g.left=i.left+h.clientLeft,h===a[0].documentElement&&(g.top+=b.pageYOffset,g.left+=b.pageXOffset),g.bottom=g.top+h.clientHeight,g.right=g.left+h.clientWidth,e){var j=b.getComputedStyle(h);g.top+=this.parseStyle(j.paddingTop),g.bottom-=this.parseStyle(j.paddingBottom),g.left+=this.parseStyle(j.paddingLeft),g.right-=this.parseStyle(j.paddingRight)}return{top:Math.round(f.top-g.top),bottom:Math.round(g.bottom-f.bottom),left:Math.round(f.left-g.left),right:Math.round(g.right-f.right)}},parsePlacement:function(a){var b=f.auto.test(a);return b&&(a=a.replace(f.auto,"")),a=a.split("-"),a[0]=a[0]||"top",f.primary.test(a[0])||(a[0]="top"),a[1]=a[1]||"center",f.secondary.test(a[1])||(a[1]="center"),b?a[2]=!0:a[2]=!1,a},positionElements:function(a,c,d,e){a=this.getRawNode(a),c=this.getRawNode(c);var g=angular.isDefined(c.offsetWidth)?c.offsetWidth:c.prop("offsetWidth"),h=angular.isDefined(c.offsetHeight)?c.offsetHeight:c.prop("offsetHeight");d=this.parsePlacement(d);var i=e?this.offset(a):this.position(a),j={top:0,left:0,placement:""};if(d[2]){var k=this.viewportOffset(a,e),l=b.getComputedStyle(c),m={width:g+Math.round(Math.abs(this.parseStyle(l.marginLeft)+this.parseStyle(l.marginRight))),height:h+Math.round(Math.abs(this.parseStyle(l.marginTop)+this.parseStyle(l.marginBottom)))};if(d[0]="top"===d[0]&&m.height>k.top&&m.height<=k.bottom?"bottom":"bottom"===d[0]&&m.height>k.bottom&&m.height<=k.top?"top":"left"===d[0]&&m.width>k.left&&m.width<=k.right?"right":"right"===d[0]&&m.width>k.right&&m.width<=k.left?"left":d[0],d[1]="top"===d[1]&&m.height-i.height>k.bottom&&m.height-i.height<=k.top?"bottom":"bottom"===d[1]&&m.height-i.height>k.top&&m.height-i.height<=k.bottom?"top":"left"===d[1]&&m.width-i.width>k.right&&m.width-i.width<=k.left?"right":"right"===d[1]&&m.width-i.width>k.left&&m.width-i.width<=k.right?"left":d[1],"center"===d[1])if(f.vertical.test(d[0])){var n=i.width/2-g/2;k.left+n<0&&m.width-i.width<=k.right?d[1]="left":k.right+n<0&&m.width-i.width<=k.left&&(d[1]="right")}else{var o=i.height/2-m.height/2;k.top+o<0&&m.height-i.height<=k.bottom?d[1]="top":k.bottom+o<0&&m.height-i.height<=k.top&&(d[1]="bottom")}}switch(d[0]){case"top":j.top=i.top-h;break;case"bottom":j.top=i.top+i.height;break;case"left":j.left=i.left-g;break;case"right":j.left=i.left+i.width}switch(d[1]){case"top":j.top=i.top;break;case"bottom":j.top=i.top+i.height-h;break;case"left":j.left=i.left;break;case"right":j.left=i.left+i.width-g;break;case"center":f.vertical.test(d[0])?j.left=i.left+i.width/2-g/2:j.top=i.top+i.height/2-h/2}return j.top=Math.round(j.top),j.left=Math.round(j.left),j.placement="center"===d[1]?d[0]:d[0]+"-"+d[1],j},positionArrow:function(a,c){a=this.getRawNode(a);var d=a.querySelector(".tooltip-inner, .popover-inner");if(d){var e=angular.element(d).hasClass("tooltip-inner"),g=e?a.querySelector(".tooltip-arrow"):a.querySelector(".arrow");if(g){var h={top:"",bottom:"",left:"",right:""};if(c=this.parsePlacement(c),"center"===c[1])return void angular.element(g).css(h);var i="border-"+c[0]+"-width",j=b.getComputedStyle(g)[i],k="border-";k+=f.vertical.test(c[0])?c[0]+"-"+c[1]:c[1]+"-"+c[0],k+="-radius";var l=b.getComputedStyle(e?d:a)[k];switch(c[0]){case"top":h.bottom=e?"0":"-"+j;break;case"bottom":h.top=e?"0":"-"+j;break;case"left":h.right=e?"0":"-"+j;break;case"right":h.left=e?"0":"-"+j}h[c[1]]=l,angular.element(g).css(h)}}}}}]),angular.module("ui.bootstrap.datepickerPopup",["ui.bootstrap.datepicker","ui.bootstrap.position"]).value("$datepickerPopupLiteralWarning",!0).constant("uibDatepickerPopupConfig",{altInputFormats:[],appendToBody:!1,clearText:"Clear",closeOnDateSelection:!0,closeText:"Done",currentText:"Today",datepickerPopup:"yyyy-MM-dd",datepickerPopupTemplateUrl:"uib/template/datepickerPopup/popup.html",datepickerTemplateUrl:"uib/template/datepicker/datepicker.html",html5Types:{date:"yyyy-MM-dd","datetime-local":"yyyy-MM-ddTHH:mm:ss.sss",month:"yyyy-MM"},onOpenFocus:!0,showButtonBar:!0,placement:"auto bottom-left"}).controller("UibDatepickerPopupController",["$scope","$element","$attrs","$compile","$log","$parse","$window","$document","$rootScope","$uibPosition","dateFilter","uibDateParser","uibDatepickerPopupConfig","$timeout","uibDatepickerConfig","$datepickerPopupLiteralWarning",function(a,b,c,d,e,f,g,h,i,j,k,l,m,n,o,p){function q(b){var c=l.parse(b,w,a.date);if(isNaN(c))for(var d=0;d<I.length;d++)if(c=l.parse(b,I[d],a.date),!isNaN(c))return c;return c}function r(a){if(angular.isNumber(a)&&(a=new Date(a)),!a)return null;if(angular.isDate(a)&&!isNaN(a))return a;if(angular.isString(a)){var b=q(a);if(!isNaN(b))return l.toTimezone(b,J)}return F.$options&&F.$options.allowInvalid?a:void 0}function s(a,b){var d=a||b;return c.ngRequired||d?(angular.isNumber(d)&&(d=new Date(d)),d?angular.isDate(d)&&!isNaN(d)?!0:angular.isString(d)?!isNaN(q(b)):!1:!0):!0}function t(c){if(a.isOpen||!a.disabled){var d=H[0],e=b[0].contains(c.target),f=void 0!==d.contains&&d.contains(c.target);!a.isOpen||e||f||a.$apply(function(){a.isOpen=!1})}}function u(c){27===c.which&&a.isOpen?(c.preventDefault(),c.stopPropagation(),a.$apply(function(){a.isOpen=!1}),b[0].focus()):40!==c.which||a.isOpen||(c.preventDefault(),c.stopPropagation(),a.$apply(function(){a.isOpen=!0}))}function v(){if(a.isOpen){var d=angular.element(H[0].querySelector(".uib-datepicker-popup")),e=c.popupPlacement?c.popupPlacement:m.placement,f=j.positionElements(b,d,e,y);d.css({top:f.top+"px",left:f.left+"px"}),d.hasClass("uib-position-measure")&&d.removeClass("uib-position-measure")}}var w,x,y,z,A,B,C,D,E,F,G,H,I,J,K=!1,L=[];this.init=function(e){if(F=e,G=e.$options,x=angular.isDefined(c.closeOnDateSelection)?a.$parent.$eval(c.closeOnDateSelection):m.closeOnDateSelection,y=angular.isDefined(c.datepickerAppendToBody)?a.$parent.$eval(c.datepickerAppendToBody):m.appendToBody,z=angular.isDefined(c.onOpenFocus)?a.$parent.$eval(c.onOpenFocus):m.onOpenFocus,A=angular.isDefined(c.datepickerPopupTemplateUrl)?c.datepickerPopupTemplateUrl:m.datepickerPopupTemplateUrl,B=angular.isDefined(c.datepickerTemplateUrl)?c.datepickerTemplateUrl:m.datepickerTemplateUrl,I=angular.isDefined(c.altInputFormats)?a.$parent.$eval(c.altInputFormats):m.altInputFormats,a.showButtonBar=angular.isDefined(c.showButtonBar)?a.$parent.$eval(c.showButtonBar):m.showButtonBar,m.html5Types[c.type]?(w=m.html5Types[c.type],K=!0):(w=c.uibDatepickerPopup||m.datepickerPopup,c.$observe("uibDatepickerPopup",function(a,b){var c=a||m.datepickerPopup;if(c!==w&&(w=c,F.$modelValue=null,!w))throw new Error("uibDatepickerPopup must have a date format specified.")})),!w)throw new Error("uibDatepickerPopup must have a date format specified.");if(K&&c.uibDatepickerPopup)throw new Error("HTML5 date input types do not support custom formats.");C=angular.element("<div uib-datepicker-popup-wrap><div uib-datepicker></div></div>"),G?(J=G.timezone,a.ngModelOptions=angular.copy(G),a.ngModelOptions.timezone=null,a.ngModelOptions.updateOnDefault===!0&&(a.ngModelOptions.updateOn=a.ngModelOptions.updateOn?a.ngModelOptions.updateOn+" default":"default"),C.attr("ng-model-options","ngModelOptions")):J=null,C.attr({"ng-model":"date","ng-change":"dateSelection(date)","template-url":A}),D=angular.element(C.children()[0]),D.attr("template-url",B),a.datepickerOptions||(a.datepickerOptions={}),K&&"month"===c.type&&(a.datepickerOptions.datepickerMode="month",a.datepickerOptions.minMode="month"),D.attr("datepicker-options","datepickerOptions"),K?F.$formatters.push(function(b){return a.date=l.fromTimezone(b,J),b}):(F.$$parserName="date",F.$validators.date=s,F.$parsers.unshift(r),F.$formatters.push(function(b){return F.$isEmpty(b)?(a.date=b,b):(angular.isNumber(b)&&(b=new Date(b)),a.date=l.fromTimezone(b,J),l.filter(a.date,w))})),F.$viewChangeListeners.push(function(){a.date=q(F.$viewValue)}),b.on("keydown",u),H=d(C)(a),C.remove(),y?h.find("body").append(H):b.after(H),a.$on("$destroy",function(){for(a.isOpen===!0&&(i.$$phase||a.$apply(function(){a.isOpen=!1})),H.remove(),b.off("keydown",u),h.off("click",t),E&&E.off("scroll",v),angular.element(g).off("resize",v);L.length;)L.shift()()})},a.getText=function(b){return a[b+"Text"]||m[b+"Text"]},a.isDisabled=function(b){"today"===b&&(b=l.fromTimezone(new Date,J));var c={};return angular.forEach(["minDate","maxDate"],function(b){a.datepickerOptions[b]?angular.isDate(a.datepickerOptions[b])?c[b]=l.fromTimezone(new Date(a.datepickerOptions[b]),J):(p&&e.warn("Literal date support has been deprecated, please switch to date object usage"),c[b]=new Date(k(a.datepickerOptions[b],"medium"))):c[b]=null}),a.datepickerOptions&&c.minDate&&a.compare(b,c.minDate)<0||c.maxDate&&a.compare(b,c.maxDate)>0},a.compare=function(a,b){return new Date(a.getFullYear(),a.getMonth(),a.getDate())-new Date(b.getFullYear(),b.getMonth(),b.getDate())},a.dateSelection=function(c){angular.isDefined(c)&&(a.date=c);var d=a.date?l.filter(a.date,w):null;b.val(d),F.$setViewValue(d),x&&(a.isOpen=!1,b[0].focus())},a.keydown=function(c){27===c.which&&(c.stopPropagation(),a.isOpen=!1,b[0].focus())},a.select=function(b,c){if(c.stopPropagation(),"today"===b){var d=new Date;angular.isDate(a.date)?(b=new Date(a.date),b.setFullYear(d.getFullYear(),d.getMonth(),d.getDate())):b=new Date(d.setHours(0,0,0,0))}a.dateSelection(b)},a.close=function(c){c.stopPropagation(),a.isOpen=!1,b[0].focus()},a.disabled=angular.isDefined(c.disabled)||!1,c.ngDisabled&&L.push(a.$parent.$watch(f(c.ngDisabled),function(b){a.disabled=b})),a.$watch("isOpen",function(d){d?a.disabled?a.isOpen=!1:n(function(){v(),z&&a.$broadcast("uib:datepicker.focus"),h.on("click",t);var d=c.popupPlacement?c.popupPlacement:m.placement;y||j.parsePlacement(d)[2]?(E=E||angular.element(j.scrollParent(b)),E&&E.on("scroll",v)):E=null,angular.element(g).on("resize",v)},0,!1):(h.off("click",t),E&&E.off("scroll",v),angular.element(g).off("resize",v))}),a.$on("uib:datepicker.mode",function(){n(v,0,!1)})}]).directive("uibDatepickerPopup",function(){return{require:["ngModel","uibDatepickerPopup"],controller:"UibDatepickerPopupController",scope:{datepickerOptions:"=?",isOpen:"=?",currentText:"@",clearText:"@",closeText:"@"},link:function(a,b,c,d){var e=d[0],f=d[1];f.init(e)}}}).directive("uibDatepickerPopupWrap",function(){return{replace:!0,transclude:!0,templateUrl:function(a,b){return b.templateUrl||"uib/template/datepickerPopup/popup.html"}}}),angular.module("ui.bootstrap.debounce",[]).factory("$$debounce",["$timeout",function(a){return function(b,c){var d;return function(){var e=this,f=Array.prototype.slice.call(arguments);d&&a.cancel(d),d=a(function(){b.apply(e,f)},c)}}}]),angular.module("ui.bootstrap.dropdown",["ui.bootstrap.position"]).constant("uibDropdownConfig",{appendToOpenClass:"uib-dropdown-open",openClass:"open"}).service("uibDropdownService",["$document","$rootScope",function(a,b){var c=null;this.open=function(b,f){c||(a.on("click",d),f.on("keydown",e)),c&&c!==b&&(c.isOpen=!1),c=b},this.close=function(b,f){c===b&&(c=null,a.off("click",d),f.off("keydown",e))};var d=function(a){if(c&&!(a&&"disabled"===c.getAutoClose()||a&&3===a.which)){var d=c.getToggleElement();if(!(a&&d&&d[0].contains(a.target))){var e=c.getDropdownElement();a&&"outsideClick"===c.getAutoClose()&&e&&e[0].contains(a.target)||(c.isOpen=!1,b.$$phase||c.$apply())}}},e=function(a){27===a.which?(a.stopPropagation(),c.focusToggleElement(),d()):c.isKeynavEnabled()&&-1!==[38,40].indexOf(a.which)&&c.isOpen&&(a.preventDefault(),a.stopPropagation(),c.focusDropdownEntry(a.which))}}]).controller("UibDropdownController",["$scope","$element","$attrs","$parse","uibDropdownConfig","uibDropdownService","$animate","$uibPosition","$document","$compile","$templateRequest",function(a,b,c,d,e,f,g,h,i,j,k){var l,m,n=this,o=a.$new(),p=e.appendToOpenClass,q=e.openClass,r=angular.noop,s=c.onToggle?d(c.onToggle):angular.noop,t=!1,u=null,v=!1,w=i.find("body");b.addClass("dropdown"),this.init=function(){if(c.isOpen&&(m=d(c.isOpen),r=m.assign,a.$watch(m,function(a){o.isOpen=!!a})),angular.isDefined(c.dropdownAppendTo)){var e=d(c.dropdownAppendTo)(o);e&&(u=angular.element(e))}t=angular.isDefined(c.dropdownAppendToBody),v=angular.isDefined(c.keyboardNav),t&&!u&&(u=w),u&&n.dropdownMenu&&(u.append(n.dropdownMenu),b.on("$destroy",function(){n.dropdownMenu.remove()}))},this.toggle=function(a){return o.isOpen=arguments.length?!!a:!o.isOpen,angular.isFunction(r)&&r(o,o.isOpen),o.isOpen},this.isOpen=function(){return o.isOpen},o.getToggleElement=function(){return n.toggleElement},o.getAutoClose=function(){return c.autoClose||"always"},o.getElement=function(){return b},o.isKeynavEnabled=function(){return v},o.focusDropdownEntry=function(a){var c=n.dropdownMenu?angular.element(n.dropdownMenu).find("a"):b.find("ul").eq(0).find("a");switch(a){case 40:angular.isNumber(n.selectedOption)?n.selectedOption=n.selectedOption===c.length-1?n.selectedOption:n.selectedOption+1:n.selectedOption=0;break;case 38:angular.isNumber(n.selectedOption)?n.selectedOption=0===n.selectedOption?0:n.selectedOption-1:n.selectedOption=c.length-1}c[n.selectedOption].focus()},o.getDropdownElement=function(){return n.dropdownMenu},o.focusToggleElement=function(){n.toggleElement&&n.toggleElement[0].focus()},o.$watch("isOpen",function(c,d){if(u&&n.dropdownMenu){var e,i,m,v=h.positionElements(b,n.dropdownMenu,"bottom-left",!0);if(e={top:v.top+"px",display:c?"block":"none"},i=n.dropdownMenu.hasClass("dropdown-menu-right"),i?(e.left="auto",m=h.scrollbarWidth(!0),e.right=window.innerWidth-m-(v.left+b.prop("offsetWidth"))+"px"):(e.left=v.left+"px",e.right="auto"),!t){var w=h.offset(u);e.top=v.top-w.top+"px",i?e.right=window.innerWidth-(v.left-w.left+b.prop("offsetWidth"))+"px":e.left=v.left-w.left+"px"}n.dropdownMenu.css(e)}var x=u?u:b,y=x.hasClass(u?p:q);if(y===!c&&g[c?"addClass":"removeClass"](x,u?p:q).then(function(){angular.isDefined(c)&&c!==d&&s(a,{open:!!c})}),c)n.dropdownMenuTemplateUrl&&k(n.dropdownMenuTemplateUrl).then(function(a){l=o.$new(),j(a.trim())(l,function(a){var b=a;n.dropdownMenu.replaceWith(b),n.dropdownMenu=b})}),o.focusToggleElement(),f.open(o,b);else{if(n.dropdownMenuTemplateUrl){l&&l.$destroy();var z=angular.element('<ul class="dropdown-menu"></ul>');n.dropdownMenu.replaceWith(z),n.dropdownMenu=z}f.close(o,b),n.selectedOption=null}angular.isFunction(r)&&r(a,c)})}]).directive("uibDropdown",function(){return{controller:"UibDropdownController",link:function(a,b,c,d){d.init()}}}).directive("uibDropdownMenu",function(){return{restrict:"A",require:"?^uibDropdown",link:function(a,b,c,d){if(d&&!angular.isDefined(c.dropdownNested)){b.addClass("dropdown-menu");var e=c.templateUrl;e&&(d.dropdownMenuTemplateUrl=e),d.dropdownMenu||(d.dropdownMenu=b)}}}}).directive("uibDropdownToggle",function(){return{require:"?^uibDropdown",link:function(a,b,c,d){if(d){b.addClass("dropdown-toggle"),d.toggleElement=b;var e=function(e){e.preventDefault(),b.hasClass("disabled")||c.disabled||a.$apply(function(){d.toggle()})};b.bind("click",e),b.attr({"aria-haspopup":!0,"aria-expanded":!1}),a.$watch(d.isOpen,function(a){b.attr("aria-expanded",!!a)}),a.$on("$destroy",function(){b.unbind("click",e)})}}}}),angular.module("ui.bootstrap.stackedMap",[]).factory("$$stackedMap",function(){return{createNew:function(){var a=[];return{add:function(b,c){a.push({key:b,value:c})},get:function(b){for(var c=0;c<a.length;c++)if(b===a[c].key)return a[c]},keys:function(){for(var b=[],c=0;c<a.length;c++)b.push(a[c].key);return b},top:function(){return a[a.length-1]},remove:function(b){for(var c=-1,d=0;d<a.length;d++)if(b===a[d].key){c=d;break}return a.splice(c,1)[0]},removeTop:function(){return a.splice(a.length-1,1)[0]},length:function(){return a.length}}}}}),angular.module("ui.bootstrap.modal",["ui.bootstrap.stackedMap","ui.bootstrap.position"]).factory("$$multiMap",function(){return{createNew:function(){var a={};return{entries:function(){return Object.keys(a).map(function(b){return{key:b,value:a[b]}})},get:function(b){return a[b]},hasKey:function(b){return!!a[b]},keys:function(){return Object.keys(a)},put:function(b,c){a[b]||(a[b]=[]),a[b].push(c)},remove:function(b,c){var d=a[b];if(d){var e=d.indexOf(c);-1!==e&&d.splice(e,1),d.length||delete a[b]}}}}}}).provider("$uibResolve",function(){var a=this;this.resolver=null,this.setResolver=function(a){this.resolver=a},this.$get=["$injector","$q",function(b,c){var d=a.resolver?b.get(a.resolver):null;return{resolve:function(a,e,f,g){if(d)return d.resolve(a,e,f,g);var h=[];return angular.forEach(a,function(a){angular.isFunction(a)||angular.isArray(a)?h.push(c.resolve(b.invoke(a))):angular.isString(a)?h.push(c.resolve(b.get(a))):h.push(c.resolve(a))}),c.all(h).then(function(b){var c={},d=0;return angular.forEach(a,function(a,e){c[e]=b[d++]}),c})}}}]}).directive("uibModalBackdrop",["$animate","$injector","$uibModalStack",function(a,b,c){function d(b,d,e){e.modalInClass&&(a.addClass(d,e.modalInClass),b.$on(c.NOW_CLOSING_EVENT,function(c,f){var g=f();b.modalOptions.animation?a.removeClass(d,e.modalInClass).then(g):g()}))}return{replace:!0,templateUrl:"uib/template/modal/backdrop.html",compile:function(a,b){return a.addClass(b.backdropClass),d}}}]).directive("uibModalWindow",["$uibModalStack","$q","$animateCss","$document",function(a,b,c,d){return{scope:{index:"@"},replace:!0,transclude:!0,templateUrl:function(a,b){return b.templateUrl||"uib/template/modal/window.html"},link:function(e,f,g){f.addClass(g.windowClass||""),f.addClass(g.windowTopClass||""),e.size=g.size,e.close=function(b){var c=a.getTop();c&&c.value.backdrop&&"static"!==c.value.backdrop&&b.target===b.currentTarget&&(b.preventDefault(),b.stopPropagation(),a.dismiss(c.key,"backdrop click"))},f.on("click",e.close),e.$isRendered=!0;var h=b.defer();g.$observe("modalRender",function(a){"true"===a&&h.resolve()}),h.promise.then(function(){var h=null;g.modalInClass&&(h=c(f,{addClass:g.modalInClass}).start(),e.$on(a.NOW_CLOSING_EVENT,function(a,b){var d=b();c(f,{removeClass:g.modalInClass}).start().then(d)})),b.when(h).then(function(){var b=a.getTop();if(b&&a.modalRendered(b.key),!d[0].activeElement||!f[0].contains(d[0].activeElement)){var c=f[0].querySelector("[autofocus]");c?c.focus():f[0].focus()}})})}}}]).directive("uibModalAnimationClass",function(){return{compile:function(a,b){b.modalAnimation&&a.addClass(b.uibModalAnimationClass)}}}).directive("uibModalTransclude",function(){return{link:function(a,b,c,d,e){e(a.$parent,function(a){b.empty(),b.append(a)})}}}).factory("$uibModalStack",["$animate","$animateCss","$document","$compile","$rootScope","$q","$$multiMap","$$stackedMap","$uibPosition",function(a,b,c,d,e,f,g,h,i){function j(a){return!!(a.offsetWidth||a.offsetHeight||a.getClientRects().length)}function k(){for(var a=-1,b=v.keys(),c=0;c<b.length;c++)v.get(b[c]).value.backdrop&&(a=c);return a>-1&&y>a&&(a=y),a}function l(a,b){var c=v.get(a).value,d=c.appendTo;v.remove(a),z=v.top(),z&&(y=parseInt(z.value.modalDomEl.attr("index"),10)),o(c.modalDomEl,c.modalScope,function(){var b=c.openedClass||u;w.remove(b,a);var e=w.hasKey(b);d.toggleClass(b,e),!e&&t&&t.heightOverflow&&t.scrollbarWidth&&(t.originalRight?d.css({paddingRight:t.originalRight+"px"}):d.css({paddingRight:""}),t=null),m(!0)},c.closedDeferred),n(),b&&b.focus?b.focus():d.focus&&d.focus()}function m(a){var b;v.length()>0&&(b=v.top().value,b.modalDomEl.toggleClass(b.windowTopClass||"",a))}function n(){if(r&&-1===k()){var a=s;o(r,s,function(){a=null}),r=void 0,s=void 0}}function o(b,c,d,e){function g(){g.done||(g.done=!0,a.leave(b).then(function(){b.remove(),e&&e.resolve()}),c.$destroy(),d&&d())}var h,i=null,j=function(){return h||(h=f.defer(),i=h.promise),function(){h.resolve()}};return c.$broadcast(x.NOW_CLOSING_EVENT,j),f.when(i).then(g)}function p(a){if(a.isDefaultPrevented())return a;var b=v.top();if(b)switch(a.which){case 27:b.value.keyboard&&(a.preventDefault(),e.$apply(function(){x.dismiss(b.key,"escape key press")}));break;case 9:var c=x.loadFocusElementList(b),d=!1;a.shiftKey?(x.isFocusInFirstItem(a,c)||x.isModalFocused(a,b))&&(d=x.focusLastFocusableElement(c)):x.isFocusInLastItem(a,c)&&(d=x.focusFirstFocusableElement(c)),d&&(a.preventDefault(),a.stopPropagation())}}function q(a,b,c){return!a.value.modalScope.$broadcast("modal.closing",b,c).defaultPrevented}var r,s,t,u="modal-open",v=h.createNew(),w=g.createNew(),x={NOW_CLOSING_EVENT:"modal.stack.now-closing"},y=0,z=null,A="a[href], area[href], input:not([disabled]), button:not([disabled]),select:not([disabled]), textarea:not([disabled]), iframe, object, embed, *[tabindex], *[contenteditable=true]";return e.$watch(k,function(a){s&&(s.index=a)}),c.on("keydown",p),e.$on("$destroy",function(){c.off("keydown",p)}),x.open=function(b,f){var g=c[0].activeElement,h=f.openedClass||u;m(!1),z=v.top(),v.add(b,{deferred:f.deferred,renderDeferred:f.renderDeferred,closedDeferred:f.closedDeferred,modalScope:f.scope,backdrop:f.backdrop,keyboard:f.keyboard,openedClass:f.openedClass,windowTopClass:f.windowTopClass,animation:f.animation,appendTo:f.appendTo}),w.put(h,b);var j=f.appendTo,l=k();if(!j.length)throw new Error("appendTo element not found. Make sure that the element passed is in DOM.");l>=0&&!r&&(s=e.$new(!0),s.modalOptions=f,s.index=l,r=angular.element('<div uib-modal-backdrop="modal-backdrop"></div>'),r.attr("backdrop-class",f.backdropClass),f.animation&&r.attr("modal-animation","true"),d(r)(s),a.enter(r,j),t=i.scrollbarPadding(j),t.heightOverflow&&t.scrollbarWidth&&j.css({paddingRight:t.right+"px"})),y=z?parseInt(z.value.modalDomEl.attr("index"),10)+1:0;var n=angular.element('<div uib-modal-window="modal-window"></div>');n.attr({"template-url":f.windowTemplateUrl,"window-class":f.windowClass,"window-top-class":f.windowTopClass,size:f.size,index:y,animate:"animate"}).html(f.content),f.animation&&n.attr("modal-animation","true"),j.addClass(h),a.enter(d(n)(f.scope),j),v.top().value.modalDomEl=n,v.top().value.modalOpener=g},x.close=function(a,b){var c=v.get(a);return c&&q(c,b,!0)?(c.value.modalScope.$$uibDestructionScheduled=!0,c.value.deferred.resolve(b),l(a,c.value.modalOpener),!0):!c},x.dismiss=function(a,b){var c=v.get(a);return c&&q(c,b,!1)?(c.value.modalScope.$$uibDestructionScheduled=!0,c.value.deferred.reject(b),l(a,c.value.modalOpener),!0):!c},x.dismissAll=function(a){for(var b=this.getTop();b&&this.dismiss(b.key,a);)b=this.getTop()},x.getTop=function(){return v.top()},x.modalRendered=function(a){var b=v.get(a);b&&b.value.renderDeferred.resolve()},x.focusFirstFocusableElement=function(a){return a.length>0?(a[0].focus(),!0):!1},x.focusLastFocusableElement=function(a){return a.length>0?(a[a.length-1].focus(),!0):!1},x.isModalFocused=function(a,b){if(a&&b){var c=b.value.modalDomEl;if(c&&c.length)return(a.target||a.srcElement)===c[0]}return!1},x.isFocusInFirstItem=function(a,b){return b.length>0?(a.target||a.srcElement)===b[0]:!1},x.isFocusInLastItem=function(a,b){return b.length>0?(a.target||a.srcElement)===b[b.length-1]:!1},x.loadFocusElementList=function(a){if(a){var b=a.value.modalDomEl;if(b&&b.length){var c=b[0].querySelectorAll(A);return c?Array.prototype.filter.call(c,function(a){return j(a)}):c}}},x}]).provider("$uibModal",function(){var a={options:{animation:!0,backdrop:!0,keyboard:!0},$get:["$rootScope","$q","$document","$templateRequest","$controller","$uibResolve","$uibModalStack",function(b,c,d,e,f,g,h){function i(a){return a.template?c.when(a.template):e(angular.isFunction(a.templateUrl)?a.templateUrl():a.templateUrl)}var j={},k=null;return j.getPromiseChain=function(){return k},j.open=function(e){function j(){return r}var l=c.defer(),m=c.defer(),n=c.defer(),o=c.defer(),p={result:l.promise,opened:m.promise,closed:n.promise,rendered:o.promise,close:function(a){return h.close(p,a)},dismiss:function(a){return h.dismiss(p,a)}};if(e=angular.extend({},a.options,e),e.resolve=e.resolve||{},e.appendTo=e.appendTo||d.find("body").eq(0),!e.template&&!e.templateUrl)throw new Error("One of template or templateUrl options is required.");var q,r=c.all([i(e),g.resolve(e.resolve,{},null,null)]);return q=k=c.all([k]).then(j,j).then(function(a){var c=e.scope||b,d=c.$new();d.$close=p.close,d.$dismiss=p.dismiss,d.$on("$destroy",function(){d.$$uibDestructionScheduled||d.$dismiss("$uibUnscheduledDestruction")});var g,i,j={};e.controller&&(j.$scope=d,j.$scope.$resolve={},j.$uibModalInstance=p,angular.forEach(a[1],function(a,b){j[b]=a,j.$scope.$resolve[b]=a}),i=f(e.controller,j,!0,e.controllerAs),e.controllerAs&&e.bindToController&&(g=i.instance,g.$close=d.$close,g.$dismiss=d.$dismiss,angular.extend(g,{$resolve:j.$scope.$resolve},c)),g=i(),angular.isFunction(g.$onInit)&&g.$onInit()),h.open(p,{scope:d,deferred:l,renderDeferred:o,closedDeferred:n,content:a[0],animation:e.animation,backdrop:e.backdrop,keyboard:e.keyboard,backdropClass:e.backdropClass,windowTopClass:e.windowTopClass,windowClass:e.windowClass,windowTemplateUrl:e.windowTemplateUrl,size:e.size,openedClass:e.openedClass,appendTo:e.appendTo}),m.resolve(!0)},function(a){m.reject(a),l.reject(a)})["finally"](function(){k===q&&(k=null)}),p},j}]};return a}),angular.module("ui.bootstrap.paging",[]).factory("uibPaging",["$parse",function(a){return{create:function(b,c,d){b.setNumPages=d.numPages?a(d.numPages).assign:angular.noop,b.ngModelCtrl={$setViewValue:angular.noop},b._watchers=[],b.init=function(a,e){b.ngModelCtrl=a,b.config=e,a.$render=function(){b.render()},d.itemsPerPage?b._watchers.push(c.$parent.$watch(d.itemsPerPage,function(a){b.itemsPerPage=parseInt(a,10),c.totalPages=b.calculateTotalPages(),b.updatePage()})):b.itemsPerPage=e.itemsPerPage,c.$watch("totalItems",function(a,d){(angular.isDefined(a)||a!==d)&&(c.totalPages=b.calculateTotalPages(),b.updatePage())})},b.calculateTotalPages=function(){var a=b.itemsPerPage<1?1:Math.ceil(c.totalItems/b.itemsPerPage);return Math.max(a||0,1)},b.render=function(){c.page=parseInt(b.ngModelCtrl.$viewValue,10)||1},c.selectPage=function(a,d){d&&d.preventDefault();var e=!c.ngDisabled||!d;e&&c.page!==a&&a>0&&a<=c.totalPages&&(d&&d.target&&d.target.blur(),b.ngModelCtrl.$setViewValue(a),b.ngModelCtrl.$render())},c.getText=function(a){return c[a+"Text"]||b.config[a+"Text"]},c.noPrevious=function(){return 1===c.page},c.noNext=function(){return c.page===c.totalPages},b.updatePage=function(){b.setNumPages(c.$parent,c.totalPages),c.page>c.totalPages?c.selectPage(c.totalPages):b.ngModelCtrl.$render()},c.$on("$destroy",function(){for(;b._watchers.length;)b._watchers.shift()()})}}}]),angular.module("ui.bootstrap.pager",["ui.bootstrap.paging"]).controller("UibPagerController",["$scope","$attrs","uibPaging","uibPagerConfig",function(a,b,c,d){a.align=angular.isDefined(b.align)?a.$parent.$eval(b.align):d.align,c.create(this,a,b)}]).constant("uibPagerConfig",{itemsPerPage:10,previousText:"« Previous",nextText:"Next »",align:!0}).directive("uibPager",["uibPagerConfig",function(a){return{scope:{totalItems:"=",previousText:"@",nextText:"@",ngDisabled:"="},require:["uibPager","?ngModel"],controller:"UibPagerController",controllerAs:"pager",templateUrl:function(a,b){return b.templateUrl||"uib/template/pager/pager.html"},replace:!0,link:function(b,c,d,e){var f=e[0],g=e[1];g&&f.init(g,a)}}}]),angular.module("ui.bootstrap.pagination",["ui.bootstrap.paging"]).controller("UibPaginationController",["$scope","$attrs","$parse","uibPaging","uibPaginationConfig",function(a,b,c,d,e){function f(a,b,c){return{number:a,text:b,active:c}}function g(a,b){var c=[],d=1,e=b,g=angular.isDefined(i)&&b>i;g&&(j?(d=Math.max(a-Math.floor(i/2),1),e=d+i-1,e>b&&(e=b,d=e-i+1)):(d=(Math.ceil(a/i)-1)*i+1,e=Math.min(d+i-1,b)));for(var h=d;e>=h;h++){var n=f(h,m(h),h===a);c.push(n)}if(g&&i>0&&(!j||k||l)){if(d>1){if(!l||d>3){var o=f(d-1,"...",!1);c.unshift(o)}if(l){if(3===d){var p=f(2,"2",!1);c.unshift(p)}var q=f(1,"1",!1);c.unshift(q)}}if(b>e){if(!l||b-2>e){var r=f(e+1,"...",!1);c.push(r)}if(l){if(e===b-2){var s=f(b-1,b-1,!1);c.push(s)}var t=f(b,b,!1);c.push(t)}}}return c}var h=this,i=angular.isDefined(b.maxSize)?a.$parent.$eval(b.maxSize):e.maxSize,j=angular.isDefined(b.rotate)?a.$parent.$eval(b.rotate):e.rotate,k=angular.isDefined(b.forceEllipses)?a.$parent.$eval(b.forceEllipses):e.forceEllipses,l=angular.isDefined(b.boundaryLinkNumbers)?a.$parent.$eval(b.boundaryLinkNumbers):e.boundaryLinkNumbers,m=angular.isDefined(b.pageLabel)?function(c){return a.$parent.$eval(b.pageLabel,{$page:c})}:angular.identity;a.boundaryLinks=angular.isDefined(b.boundaryLinks)?a.$parent.$eval(b.boundaryLinks):e.boundaryLinks,a.directionLinks=angular.isDefined(b.directionLinks)?a.$parent.$eval(b.directionLinks):e.directionLinks,d.create(this,a,b),b.maxSize&&h._watchers.push(a.$parent.$watch(c(b.maxSize),function(a){i=parseInt(a,10),h.render()}));var n=this.render;this.render=function(){n(),a.page>0&&a.page<=a.totalPages&&(a.pages=g(a.page,a.totalPages))}}]).constant("uibPaginationConfig",{itemsPerPage:10,boundaryLinks:!1,boundaryLinkNumbers:!1,directionLinks:!0,firstText:"First",previousText:"Previous",nextText:"Next",lastText:"Last",rotate:!0,forceEllipses:!1}).directive("uibPagination",["$parse","uibPaginationConfig",function(a,b){return{scope:{totalItems:"=",firstText:"@",previousText:"@",nextText:"@",lastText:"@",ngDisabled:"="},require:["uibPagination","?ngModel"],controller:"UibPaginationController",controllerAs:"pagination",templateUrl:function(a,b){return b.templateUrl||"uib/template/pagination/pagination.html"},replace:!0,link:function(a,c,d,e){var f=e[0],g=e[1];g&&f.init(g,b)}}}]),angular.module("ui.bootstrap.tooltip",["ui.bootstrap.position","ui.bootstrap.stackedMap"]).provider("$uibTooltip",function(){function a(a){var b=/[A-Z]/g,c="-";return a.replace(b,function(a,b){return(b?c:"")+a.toLowerCase()})}var b={placement:"top",placementClassPrefix:"",animation:!0,popupDelay:0,popupCloseDelay:0,useContentExp:!1},c={mouseenter:"mouseleave",click:"click",outsideClick:"outsideClick",focus:"blur",none:""},d={};this.options=function(a){angular.extend(d,a)},this.setTriggers=function(a){angular.extend(c,a)},this.$get=["$window","$compile","$timeout","$document","$uibPosition","$interpolate","$rootScope","$parse","$$stackedMap",function(e,f,g,h,i,j,k,l,m){function n(a){if(27===a.which){var b=o.top();b&&(b.value.close(),o.removeTop(),b=null)}}var o=m.createNew();return h.on("keypress",n),k.$on("$destroy",function(){h.off("keypress",n)}),function(e,k,m,n){function p(a){var b=(a||n.trigger||m).split(" "),d=b.map(function(a){
return c[a]||a});return{show:b,hide:d}}n=angular.extend({},b,d,n);var q=a(e),r=j.startSymbol(),s=j.endSymbol(),t="<div "+q+'-popup uib-title="'+r+"title"+s+'" '+(n.useContentExp?'content-exp="contentExp()" ':'content="'+r+"content"+s+'" ')+'placement="'+r+"placement"+s+'" popup-class="'+r+"popupClass"+s+'" animation="animation" is-open="isOpen" origin-scope="origScope" class="uib-position-measure"></div>';return{compile:function(a,b){var c=f(t);return function(a,b,d,f){function j(){N.isOpen?q():m()}function m(){M&&!a.$eval(d[k+"Enable"])||(u(),x(),N.popupDelay?G||(G=g(r,N.popupDelay,!1)):r())}function q(){s(),N.popupCloseDelay?H||(H=g(t,N.popupCloseDelay,!1)):t()}function r(){return s(),u(),N.content?(v(),void N.$evalAsync(function(){N.isOpen=!0,y(!0),S()})):angular.noop}function s(){G&&(g.cancel(G),G=null),I&&(g.cancel(I),I=null)}function t(){N&&N.$evalAsync(function(){N&&(N.isOpen=!1,y(!1),N.animation?F||(F=g(w,150,!1)):w())})}function u(){H&&(g.cancel(H),H=null),F&&(g.cancel(F),F=null)}function v(){D||(E=N.$new(),D=c(E,function(a){K?h.find("body").append(a):b.after(a)}),z())}function w(){s(),u(),A(),D&&(D.remove(),D=null),E&&(E.$destroy(),E=null)}function x(){N.title=d[k+"Title"],Q?N.content=Q(a):N.content=d[e],N.popupClass=d[k+"Class"],N.placement=angular.isDefined(d[k+"Placement"])?d[k+"Placement"]:n.placement;var b=i.parsePlacement(N.placement);J=b[1]?b[0]+"-"+b[1]:b[0];var c=parseInt(d[k+"PopupDelay"],10),f=parseInt(d[k+"PopupCloseDelay"],10);N.popupDelay=isNaN(c)?n.popupDelay:c,N.popupCloseDelay=isNaN(f)?n.popupCloseDelay:f}function y(b){P&&angular.isFunction(P.assign)&&P.assign(a,b)}function z(){R.length=0,Q?(R.push(a.$watch(Q,function(a){N.content=a,!a&&N.isOpen&&t()})),R.push(E.$watch(function(){O||(O=!0,E.$$postDigest(function(){O=!1,N&&N.isOpen&&S()}))}))):R.push(d.$observe(e,function(a){N.content=a,!a&&N.isOpen?t():S()})),R.push(d.$observe(k+"Title",function(a){N.title=a,N.isOpen&&S()})),R.push(d.$observe(k+"Placement",function(a){N.placement=a?a:n.placement,N.isOpen&&S()}))}function A(){R.length&&(angular.forEach(R,function(a){a()}),R.length=0)}function B(a){N&&N.isOpen&&D&&(b[0].contains(a.target)||D[0].contains(a.target)||q())}function C(){var a=d[k+"Trigger"];T(),L=p(a),"none"!==L.show&&L.show.forEach(function(a,c){"outsideClick"===a?(b.on("click",j),h.on("click",B)):a===L.hide[c]?b.on(a,j):a&&(b.on(a,m),b.on(L.hide[c],q)),b.on("keypress",function(a){27===a.which&&q()})})}var D,E,F,G,H,I,J,K=angular.isDefined(n.appendToBody)?n.appendToBody:!1,L=p(void 0),M=angular.isDefined(d[k+"Enable"]),N=a.$new(!0),O=!1,P=angular.isDefined(d[k+"IsOpen"])?l(d[k+"IsOpen"]):!1,Q=n.useContentExp?l(d[e]):!1,R=[],S=function(){D&&D.html()&&(I||(I=g(function(){var a=i.positionElements(b,D,N.placement,K);D.css({top:a.top+"px",left:a.left+"px"}),D.hasClass(a.placement.split("-")[0])||(D.removeClass(J.split("-")[0]),D.addClass(a.placement.split("-")[0])),D.hasClass(n.placementClassPrefix+a.placement)||(D.removeClass(n.placementClassPrefix+J),D.addClass(n.placementClassPrefix+a.placement)),D.hasClass("uib-position-measure")?(i.positionArrow(D,a.placement),D.removeClass("uib-position-measure")):J!==a.placement&&i.positionArrow(D,a.placement),J=a.placement,I=null},0,!1)))};N.origScope=a,N.isOpen=!1,o.add(N,{close:t}),N.contentExp=function(){return N.content},d.$observe("disabled",function(a){a&&s(),a&&N.isOpen&&t()}),P&&a.$watch(P,function(a){N&&!a===N.isOpen&&j()});var T=function(){L.show.forEach(function(a){"outsideClick"===a?b.off("click",j):(b.off(a,m),b.off(a,j))}),L.hide.forEach(function(a){"outsideClick"===a?h.off("click",B):b.off(a,q)})};C();var U=a.$eval(d[k+"Animation"]);N.animation=angular.isDefined(U)?!!U:n.animation;var V,W=k+"AppendToBody";V=W in d&&void 0===d[W]?!0:a.$eval(d[W]),K=angular.isDefined(V)?V:K,a.$on("$destroy",function(){T(),w(),o.remove(N),N=null})}}}}}]}).directive("uibTooltipTemplateTransclude",["$animate","$sce","$compile","$templateRequest",function(a,b,c,d){return{link:function(e,f,g){var h,i,j,k=e.$eval(g.tooltipTemplateTranscludeScope),l=0,m=function(){i&&(i.remove(),i=null),h&&(h.$destroy(),h=null),j&&(a.leave(j).then(function(){i=null}),i=j,j=null)};e.$watch(b.parseAsResourceUrl(g.uibTooltipTemplateTransclude),function(b){var g=++l;b?(d(b,!0).then(function(d){if(g===l){var e=k.$new(),i=d,n=c(i)(e,function(b){m(),a.enter(b,f)});h=e,j=n,h.$emit("$includeContentLoaded",b)}},function(){g===l&&(m(),e.$emit("$includeContentError",b))}),e.$emit("$includeContentRequested",b)):m()}),e.$on("$destroy",m)}}}]).directive("uibTooltipClasses",["$uibPosition",function(a){return{restrict:"A",link:function(b,c,d){if(b.placement){var e=a.parsePlacement(b.placement);c.addClass(e[0])}b.popupClass&&c.addClass(b.popupClass),b.animation()&&c.addClass(d.tooltipAnimationClass)}}}]).directive("uibTooltipPopup",function(){return{replace:!0,scope:{content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"uib/template/tooltip/tooltip-popup.html"}}).directive("uibTooltip",["$uibTooltip",function(a){return a("uibTooltip","tooltip","mouseenter")}]).directive("uibTooltipTemplatePopup",function(){return{replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"uib/template/tooltip/tooltip-template-popup.html"}}).directive("uibTooltipTemplate",["$uibTooltip",function(a){return a("uibTooltipTemplate","tooltip","mouseenter",{useContentExp:!0})}]).directive("uibTooltipHtmlPopup",function(){return{replace:!0,scope:{contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"uib/template/tooltip/tooltip-html-popup.html"}}).directive("uibTooltipHtml",["$uibTooltip",function(a){return a("uibTooltipHtml","tooltip","mouseenter",{useContentExp:!0})}]),angular.module("ui.bootstrap.popover",["ui.bootstrap.tooltip"]).directive("uibPopoverTemplatePopup",function(){return{replace:!0,scope:{uibTitle:"@",contentExp:"&",placement:"@",popupClass:"@",animation:"&",isOpen:"&",originScope:"&"},templateUrl:"uib/template/popover/popover-template.html"}}).directive("uibPopoverTemplate",["$uibTooltip",function(a){return a("uibPopoverTemplate","popover","click",{useContentExp:!0})}]).directive("uibPopoverHtmlPopup",function(){return{replace:!0,scope:{contentExp:"&",uibTitle:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"uib/template/popover/popover-html.html"}}).directive("uibPopoverHtml",["$uibTooltip",function(a){return a("uibPopoverHtml","popover","click",{useContentExp:!0})}]).directive("uibPopoverPopup",function(){return{replace:!0,scope:{uibTitle:"@",content:"@",placement:"@",popupClass:"@",animation:"&",isOpen:"&"},templateUrl:"uib/template/popover/popover.html"}}).directive("uibPopover",["$uibTooltip",function(a){return a("uibPopover","popover","click")}]),angular.module("ui.bootstrap.progressbar",[]).constant("uibProgressConfig",{animate:!0,max:100}).controller("UibProgressController",["$scope","$attrs","uibProgressConfig",function(a,b,c){function d(){return angular.isDefined(a.maxParam)?a.maxParam:c.max}var e=this,f=angular.isDefined(b.animate)?a.$parent.$eval(b.animate):c.animate;this.bars=[],a.max=d(),this.addBar=function(a,b,c){f||b.css({transition:"none"}),this.bars.push(a),a.max=d(),a.title=c&&angular.isDefined(c.title)?c.title:"progressbar",a.$watch("value",function(b){a.recalculatePercentage()}),a.recalculatePercentage=function(){var b=e.bars.reduce(function(a,b){return b.percent=+(100*b.value/b.max).toFixed(2),a+b.percent},0);b>100&&(a.percent-=b-100)},a.$on("$destroy",function(){b=null,e.removeBar(a)})},this.removeBar=function(a){this.bars.splice(this.bars.indexOf(a),1),this.bars.forEach(function(a){a.recalculatePercentage()})},a.$watch("maxParam",function(a){e.bars.forEach(function(a){a.max=d(),a.recalculatePercentage()})})}]).directive("uibProgress",function(){return{replace:!0,transclude:!0,controller:"UibProgressController",require:"uibProgress",scope:{maxParam:"=?max"},templateUrl:"uib/template/progressbar/progress.html"}}).directive("uibBar",function(){return{replace:!0,transclude:!0,require:"^uibProgress",scope:{value:"=",type:"@"},templateUrl:"uib/template/progressbar/bar.html",link:function(a,b,c,d){d.addBar(a,b,c)}}}).directive("uibProgressbar",function(){return{replace:!0,transclude:!0,controller:"UibProgressController",scope:{value:"=",maxParam:"=?max",type:"@"},templateUrl:"uib/template/progressbar/progressbar.html",link:function(a,b,c,d){d.addBar(a,angular.element(b.children()[0]),{title:c.title})}}}),angular.module("ui.bootstrap.rating",[]).constant("uibRatingConfig",{max:5,stateOn:null,stateOff:null,enableReset:!0,titles:["one","two","three","four","five"]}).controller("UibRatingController",["$scope","$attrs","uibRatingConfig",function(a,b,c){var d={$setViewValue:angular.noop},e=this;this.init=function(e){d=e,d.$render=this.render,d.$formatters.push(function(a){return angular.isNumber(a)&&a<<0!==a&&(a=Math.round(a)),a}),this.stateOn=angular.isDefined(b.stateOn)?a.$parent.$eval(b.stateOn):c.stateOn,this.stateOff=angular.isDefined(b.stateOff)?a.$parent.$eval(b.stateOff):c.stateOff,this.enableReset=angular.isDefined(b.enableReset)?a.$parent.$eval(b.enableReset):c.enableReset;var f=angular.isDefined(b.titles)?a.$parent.$eval(b.titles):c.titles;this.titles=angular.isArray(f)&&f.length>0?f:c.titles;var g=angular.isDefined(b.ratingStates)?a.$parent.$eval(b.ratingStates):new Array(angular.isDefined(b.max)?a.$parent.$eval(b.max):c.max);a.range=this.buildTemplateObjects(g)},this.buildTemplateObjects=function(a){for(var b=0,c=a.length;c>b;b++)a[b]=angular.extend({index:b},{stateOn:this.stateOn,stateOff:this.stateOff,title:this.getTitle(b)},a[b]);return a},this.getTitle=function(a){return a>=this.titles.length?a+1:this.titles[a]},a.rate=function(b){if(!a.readonly&&b>=0&&b<=a.range.length){var c=e.enableReset&&d.$viewValue===b?0:b;d.$setViewValue(c),d.$render()}},a.enter=function(b){a.readonly||(a.value=b),a.onHover({value:b})},a.reset=function(){a.value=d.$viewValue,a.onLeave()},a.onKeydown=function(b){/(37|38|39|40)/.test(b.which)&&(b.preventDefault(),b.stopPropagation(),a.rate(a.value+(38===b.which||39===b.which?1:-1)))},this.render=function(){a.value=d.$viewValue,a.title=e.getTitle(a.value-1)}}]).directive("uibRating",function(){return{require:["uibRating","ngModel"],scope:{readonly:"=?readOnly",onHover:"&",onLeave:"&"},controller:"UibRatingController",templateUrl:"uib/template/rating/rating.html",replace:!0,link:function(a,b,c,d){var e=d[0],f=d[1];e.init(f)}}}),angular.module("ui.bootstrap.tabs",[]).controller("UibTabsetController",["$scope",function(a){function b(a){for(var b=0;b<d.tabs.length;b++)if(d.tabs[b].index===a)return b}var c,d=this;d.tabs=[],d.select=function(a,f){if(!e){var g=b(c),h=d.tabs[g];if(h){if(h.tab.onDeselect({$event:f,$selectedIndex:a}),f&&f.isDefaultPrevented())return;h.tab.active=!1}var i=d.tabs[a];i?(i.tab.onSelect({$event:f}),i.tab.active=!0,d.active=i.index,c=i.index):!i&&angular.isDefined(c)&&(d.active=null,c=null)}},d.addTab=function(a){if(d.tabs.push({tab:a,index:a.index}),d.tabs.sort(function(a,b){return a.index>b.index?1:a.index<b.index?-1:0}),a.index===d.active||!angular.isDefined(d.active)&&1===d.tabs.length){var c=b(a.index);d.select(c)}},d.removeTab=function(a){for(var b,c=0;c<d.tabs.length;c++)if(d.tabs[c].tab===a){b=c;break}if(d.tabs[b].index===d.active){var e=b===d.tabs.length-1?b-1:b+1%d.tabs.length;d.select(e)}d.tabs.splice(b,1)},a.$watch("tabset.active",function(a){angular.isDefined(a)&&a!==c&&d.select(b(a))});var e;a.$on("$destroy",function(){e=!0})}]).directive("uibTabset",function(){return{transclude:!0,replace:!0,scope:{},bindToController:{active:"=?",type:"@"},controller:"UibTabsetController",controllerAs:"tabset",templateUrl:function(a,b){return b.templateUrl||"uib/template/tabs/tabset.html"},link:function(a,b,c){a.vertical=angular.isDefined(c.vertical)?a.$parent.$eval(c.vertical):!1,a.justified=angular.isDefined(c.justified)?a.$parent.$eval(c.justified):!1}}}).directive("uibTab",["$parse",function(a){return{require:"^uibTabset",replace:!0,templateUrl:function(a,b){return b.templateUrl||"uib/template/tabs/tab.html"},transclude:!0,scope:{heading:"@",index:"=?",classes:"@?",onSelect:"&select",onDeselect:"&deselect"},controller:function(){},controllerAs:"tab",link:function(b,c,d,e,f){b.disabled=!1,d.disable&&b.$parent.$watch(a(d.disable),function(a){b.disabled=!!a}),angular.isUndefined(d.index)&&(e.tabs&&e.tabs.length?b.index=Math.max.apply(null,e.tabs.map(function(a){return a.index}))+1:b.index=0),angular.isUndefined(d.classes)&&(b.classes=""),b.select=function(a){if(!b.disabled){for(var c,d=0;d<e.tabs.length;d++)if(e.tabs[d].tab===b){c=d;break}e.select(c,a)}},e.addTab(b),b.$on("$destroy",function(){e.removeTab(b)}),b.$transcludeFn=f}}}]).directive("uibTabHeadingTransclude",function(){return{restrict:"A",require:"^uibTab",link:function(a,b){a.$watch("headingElement",function(a){a&&(b.html(""),b.append(a))})}}}).directive("uibTabContentTransclude",function(){function a(a){return a.tagName&&(a.hasAttribute("uib-tab-heading")||a.hasAttribute("data-uib-tab-heading")||a.hasAttribute("x-uib-tab-heading")||"uib-tab-heading"===a.tagName.toLowerCase()||"data-uib-tab-heading"===a.tagName.toLowerCase()||"x-uib-tab-heading"===a.tagName.toLowerCase()||"uib:tab-heading"===a.tagName.toLowerCase())}return{restrict:"A",require:"^uibTabset",link:function(b,c,d){var e=b.$eval(d.uibTabContentTransclude).tab;e.$transcludeFn(e.$parent,function(b){angular.forEach(b,function(b){a(b)?e.headingElement=b:c.append(b)})})}}}),angular.module("ui.bootstrap.timepicker",[]).constant("uibTimepickerConfig",{hourStep:1,minuteStep:1,secondStep:1,showMeridian:!0,showSeconds:!1,meridians:null,readonlyInput:!1,mousewheel:!0,arrowkeys:!0,showSpinners:!0,templateUrl:"uib/template/timepicker/timepicker.html"}).controller("UibTimepickerController",["$scope","$element","$attrs","$parse","$log","$locale","uibTimepickerConfig",function(a,b,c,d,e,f,g){function h(){var b=+a.hours,c=a.showMeridian?b>0&&13>b:b>=0&&24>b;return c&&""!==a.hours?(a.showMeridian&&(12===b&&(b=0),a.meridian===v[1]&&(b+=12)),b):void 0}function i(){var b=+a.minutes,c=b>=0&&60>b;return c&&""!==a.minutes?b:void 0}function j(){var b=+a.seconds;return b>=0&&60>b?b:void 0}function k(a,b){return null===a?"":angular.isDefined(a)&&a.toString().length<2&&!b?"0"+a:a.toString()}function l(a){m(),u.$setViewValue(new Date(s)),n(a)}function m(){u.$setValidity("time",!0),a.invalidHours=!1,a.invalidMinutes=!1,a.invalidSeconds=!1}function n(b){if(u.$modelValue){var c=s.getHours(),d=s.getMinutes(),e=s.getSeconds();a.showMeridian&&(c=0===c||12===c?12:c%12),a.hours="h"===b?c:k(c,!w),"m"!==b&&(a.minutes=k(d)),a.meridian=s.getHours()<12?v[0]:v[1],"s"!==b&&(a.seconds=k(e)),a.meridian=s.getHours()<12?v[0]:v[1]}else a.hours=null,a.minutes=null,a.seconds=null,a.meridian=v[0]}function o(a){s=q(s,a),l()}function p(a,b){return q(a,60*b)}function q(a,b){var c=new Date(a.getTime()+1e3*b),d=new Date(a);return d.setHours(c.getHours(),c.getMinutes(),c.getSeconds()),d}function r(){return(null===a.hours||""===a.hours)&&(null===a.minutes||""===a.minutes)&&(!a.showSeconds||a.showSeconds&&(null===a.seconds||""===a.seconds))}var s=new Date,t=[],u={$setViewValue:angular.noop},v=angular.isDefined(c.meridians)?a.$parent.$eval(c.meridians):g.meridians||f.DATETIME_FORMATS.AMPMS,w=angular.isDefined(c.padHours)?a.$parent.$eval(c.padHours):!0;a.tabindex=angular.isDefined(c.tabindex)?c.tabindex:0,b.removeAttr("tabindex"),this.init=function(b,d){u=b,u.$render=this.render,u.$formatters.unshift(function(a){return a?new Date(a):null});var e=d.eq(0),f=d.eq(1),h=d.eq(2),i=angular.isDefined(c.mousewheel)?a.$parent.$eval(c.mousewheel):g.mousewheel;i&&this.setupMousewheelEvents(e,f,h);var j=angular.isDefined(c.arrowkeys)?a.$parent.$eval(c.arrowkeys):g.arrowkeys;j&&this.setupArrowkeyEvents(e,f,h),a.readonlyInput=angular.isDefined(c.readonlyInput)?a.$parent.$eval(c.readonlyInput):g.readonlyInput,this.setupInputEvents(e,f,h)};var x=g.hourStep;c.hourStep&&t.push(a.$parent.$watch(d(c.hourStep),function(a){x=+a}));var y=g.minuteStep;c.minuteStep&&t.push(a.$parent.$watch(d(c.minuteStep),function(a){y=+a}));var z;t.push(a.$parent.$watch(d(c.min),function(a){var b=new Date(a);z=isNaN(b)?void 0:b}));var A;t.push(a.$parent.$watch(d(c.max),function(a){var b=new Date(a);A=isNaN(b)?void 0:b}));var B=!1;c.ngDisabled&&t.push(a.$parent.$watch(d(c.ngDisabled),function(a){B=a})),a.noIncrementHours=function(){var a=p(s,60*x);return B||a>A||s>a&&z>a},a.noDecrementHours=function(){var a=p(s,60*-x);return B||z>a||a>s&&a>A},a.noIncrementMinutes=function(){var a=p(s,y);return B||a>A||s>a&&z>a},a.noDecrementMinutes=function(){var a=p(s,-y);return B||z>a||a>s&&a>A},a.noIncrementSeconds=function(){var a=q(s,C);return B||a>A||s>a&&z>a},a.noDecrementSeconds=function(){var a=q(s,-C);return B||z>a||a>s&&a>A},a.noToggleMeridian=function(){return s.getHours()<12?B||p(s,720)>A:B||p(s,-720)<z};var C=g.secondStep;c.secondStep&&t.push(a.$parent.$watch(d(c.secondStep),function(a){C=+a})),a.showSeconds=g.showSeconds,c.showSeconds&&t.push(a.$parent.$watch(d(c.showSeconds),function(b){a.showSeconds=!!b})),a.showMeridian=g.showMeridian,c.showMeridian&&t.push(a.$parent.$watch(d(c.showMeridian),function(b){if(a.showMeridian=!!b,u.$error.time){var c=h(),d=i();angular.isDefined(c)&&angular.isDefined(d)&&(s.setHours(c),l())}else n()})),this.setupMousewheelEvents=function(b,c,d){var e=function(a){a.originalEvent&&(a=a.originalEvent);var b=a.wheelDelta?a.wheelDelta:-a.deltaY;return a.detail||b>0};b.bind("mousewheel wheel",function(b){B||a.$apply(e(b)?a.incrementHours():a.decrementHours()),b.preventDefault()}),c.bind("mousewheel wheel",function(b){B||a.$apply(e(b)?a.incrementMinutes():a.decrementMinutes()),b.preventDefault()}),d.bind("mousewheel wheel",function(b){B||a.$apply(e(b)?a.incrementSeconds():a.decrementSeconds()),b.preventDefault()})},this.setupArrowkeyEvents=function(b,c,d){b.bind("keydown",function(b){B||(38===b.which?(b.preventDefault(),a.incrementHours(),a.$apply()):40===b.which&&(b.preventDefault(),a.decrementHours(),a.$apply()))}),c.bind("keydown",function(b){B||(38===b.which?(b.preventDefault(),a.incrementMinutes(),a.$apply()):40===b.which&&(b.preventDefault(),a.decrementMinutes(),a.$apply()))}),d.bind("keydown",function(b){B||(38===b.which?(b.preventDefault(),a.incrementSeconds(),a.$apply()):40===b.which&&(b.preventDefault(),a.decrementSeconds(),a.$apply()))})},this.setupInputEvents=function(b,c,d){if(a.readonlyInput)return a.updateHours=angular.noop,a.updateMinutes=angular.noop,void(a.updateSeconds=angular.noop);var e=function(b,c,d){u.$setViewValue(null),u.$setValidity("time",!1),angular.isDefined(b)&&(a.invalidHours=b),angular.isDefined(c)&&(a.invalidMinutes=c),angular.isDefined(d)&&(a.invalidSeconds=d)};a.updateHours=function(){var a=h(),b=i();u.$setDirty(),angular.isDefined(a)&&angular.isDefined(b)?(s.setHours(a),s.setMinutes(b),z>s||s>A?e(!0):l("h")):e(!0)},b.bind("blur",function(b){u.$setTouched(),r()?m():null===a.hours||""===a.hours?e(!0):!a.invalidHours&&a.hours<10&&a.$apply(function(){a.hours=k(a.hours,!w)})}),a.updateMinutes=function(){var a=i(),b=h();u.$setDirty(),angular.isDefined(a)&&angular.isDefined(b)?(s.setHours(b),s.setMinutes(a),z>s||s>A?e(void 0,!0):l("m")):e(void 0,!0)},c.bind("blur",function(b){u.$setTouched(),r()?m():null===a.minutes?e(void 0,!0):!a.invalidMinutes&&a.minutes<10&&a.$apply(function(){a.minutes=k(a.minutes)})}),a.updateSeconds=function(){var a=j();u.$setDirty(),angular.isDefined(a)?(s.setSeconds(a),l("s")):e(void 0,void 0,!0)},d.bind("blur",function(b){r()?m():!a.invalidSeconds&&a.seconds<10&&a.$apply(function(){a.seconds=k(a.seconds)})})},this.render=function(){var b=u.$viewValue;isNaN(b)?(u.$setValidity("time",!1),e.error('Timepicker directive: "ng-model" value must be a Date object, a number of milliseconds since 01.01.1970 or a string representing an RFC2822 or ISO 8601 date.')):(b&&(s=b),z>s||s>A?(u.$setValidity("time",!1),a.invalidHours=!0,a.invalidMinutes=!0):m(),n())},a.showSpinners=angular.isDefined(c.showSpinners)?a.$parent.$eval(c.showSpinners):g.showSpinners,a.incrementHours=function(){a.noIncrementHours()||o(60*x*60)},a.decrementHours=function(){a.noDecrementHours()||o(60*-x*60)},a.incrementMinutes=function(){a.noIncrementMinutes()||o(60*y)},a.decrementMinutes=function(){a.noDecrementMinutes()||o(60*-y)},a.incrementSeconds=function(){a.noIncrementSeconds()||o(C)},a.decrementSeconds=function(){a.noDecrementSeconds()||o(-C)},a.toggleMeridian=function(){var b=i(),c=h();a.noToggleMeridian()||(angular.isDefined(b)&&angular.isDefined(c)?o(720*(s.getHours()<12?60:-60)):a.meridian=a.meridian===v[0]?v[1]:v[0])},a.blur=function(){u.$setTouched()},a.$on("$destroy",function(){for(;t.length;)t.shift()()})}]).directive("uibTimepicker",["uibTimepickerConfig",function(a){return{require:["uibTimepicker","?^ngModel"],controller:"UibTimepickerController",controllerAs:"timepicker",replace:!0,scope:{},templateUrl:function(b,c){return c.templateUrl||a.templateUrl},link:function(a,b,c,d){var e=d[0],f=d[1];f&&e.init(f,b.find("input"))}}}]),angular.module("ui.bootstrap.typeahead",["ui.bootstrap.debounce","ui.bootstrap.position"]).factory("uibTypeaheadParser",["$parse",function(a){var b=/^\s*([\s\S]+?)(?:\s+as\s+([\s\S]+?))?\s+for\s+(?:([\$\w][\$\w\d]*))\s+in\s+([\s\S]+?)$/;return{parse:function(c){var d=c.match(b);if(!d)throw new Error('Expected typeahead specification in form of "_modelValue_ (as _label_)? for _item_ in _collection_" but got "'+c+'".');return{itemName:d[3],source:a(d[4]),viewMapper:a(d[2]||d[1]),modelMapper:a(d[1])}}}}]).controller("UibTypeaheadController",["$scope","$element","$attrs","$compile","$parse","$q","$timeout","$document","$window","$rootScope","$$debounce","$uibPosition","uibTypeaheadParser",function(a,b,c,d,e,f,g,h,i,j,k,l,m){function n(){O.moveInProgress||(O.moveInProgress=!0,O.$digest()),Z()}function o(){O.position=E?l.offset(b):l.position(b),O.position.top+=b.prop("offsetHeight")}var p,q,r=[9,13,27,38,40],s=200,t=a.$eval(c.typeaheadMinLength);t||0===t||(t=1),a.$watch(c.typeaheadMinLength,function(a){t=a||0===a?a:1});var u=a.$eval(c.typeaheadWaitMs)||0,v=a.$eval(c.typeaheadEditable)!==!1;a.$watch(c.typeaheadEditable,function(a){v=a!==!1});var w,x,y=e(c.typeaheadLoading).assign||angular.noop,z=c.typeaheadShouldSelect?e(c.typeaheadShouldSelect):function(a,b){var c=b.$event;return 13===c.which||9===c.which},A=e(c.typeaheadOnSelect),B=angular.isDefined(c.typeaheadSelectOnBlur)?a.$eval(c.typeaheadSelectOnBlur):!1,C=e(c.typeaheadNoResults).assign||angular.noop,D=c.typeaheadInputFormatter?e(c.typeaheadInputFormatter):void 0,E=c.typeaheadAppendToBody?a.$eval(c.typeaheadAppendToBody):!1,F=c.typeaheadAppendTo?a.$eval(c.typeaheadAppendTo):null,G=a.$eval(c.typeaheadFocusFirst)!==!1,H=c.typeaheadSelectOnExact?a.$eval(c.typeaheadSelectOnExact):!1,I=e(c.typeaheadIsOpen).assign||angular.noop,J=a.$eval(c.typeaheadShowHint)||!1,K=e(c.ngModel),L=e(c.ngModel+"($$$p)"),M=function(b,c){return angular.isFunction(K(a))&&q&&q.$options&&q.$options.getterSetter?L(b,{$$$p:c}):K.assign(b,c)},N=m.parse(c.uibTypeahead),O=a.$new(),P=a.$on("$destroy",function(){O.$destroy()});O.$on("$destroy",P);var Q="typeahead-"+O.$id+"-"+Math.floor(1e4*Math.random());b.attr({"aria-autocomplete":"list","aria-expanded":!1,"aria-owns":Q});var R,S;J&&(R=angular.element("<div></div>"),R.css("position","relative"),b.after(R),S=b.clone(),S.attr("placeholder",""),S.attr("tabindex","-1"),S.val(""),S.css({position:"absolute",top:"0px",left:"0px","border-color":"transparent","box-shadow":"none",opacity:1,background:"none 0% 0% / auto repeat scroll padding-box border-box rgb(255, 255, 255)",color:"#999"}),b.css({position:"relative","vertical-align":"top","background-color":"transparent"}),R.append(S),S.after(b));var T=angular.element("<div uib-typeahead-popup></div>");T.attr({id:Q,matches:"matches",active:"activeIdx",select:"select(activeIdx, evt)","move-in-progress":"moveInProgress",query:"query",position:"position","assign-is-open":"assignIsOpen(isOpen)",debounce:"debounceUpdate"}),angular.isDefined(c.typeaheadTemplateUrl)&&T.attr("template-url",c.typeaheadTemplateUrl),angular.isDefined(c.typeaheadPopupTemplateUrl)&&T.attr("popup-template-url",c.typeaheadPopupTemplateUrl);var U=function(){J&&S.val("")},V=function(){O.matches=[],O.activeIdx=-1,b.attr("aria-expanded",!1),U()},W=function(a){return Q+"-option-"+a};O.$watch("activeIdx",function(a){0>a?b.removeAttr("aria-activedescendant"):b.attr("aria-activedescendant",W(a))});var X=function(a,b){return O.matches.length>b&&a?a.toUpperCase()===O.matches[b].label.toUpperCase():!1},Y=function(c,d){var e={$viewValue:c};y(a,!0),C(a,!1),f.when(N.source(a,e)).then(function(f){var g=c===p.$viewValue;if(g&&w)if(f&&f.length>0){O.activeIdx=G?0:-1,C(a,!1),O.matches.length=0;for(var h=0;h<f.length;h++)e[N.itemName]=f[h],O.matches.push({id:W(h),label:N.viewMapper(O,e),model:f[h]});if(O.query=c,o(),b.attr("aria-expanded",!0),H&&1===O.matches.length&&X(c,0)&&(angular.isNumber(O.debounceUpdate)||angular.isObject(O.debounceUpdate)?k(function(){O.select(0,d)},angular.isNumber(O.debounceUpdate)?O.debounceUpdate:O.debounceUpdate["default"]):O.select(0,d)),J){var i=O.matches[0].label;angular.isString(c)&&c.length>0&&i.slice(0,c.length).toUpperCase()===c.toUpperCase()?S.val(c+i.slice(c.length)):S.val("")}}else V(),C(a,!0);g&&y(a,!1)},function(){V(),y(a,!1),C(a,!0)})};E&&(angular.element(i).on("resize",n),h.find("body").on("scroll",n));var Z=k(function(){O.matches.length&&o(),O.moveInProgress=!1},s);O.moveInProgress=!1,O.query=void 0;var $,_=function(a){$=g(function(){Y(a)},u)},aa=function(){$&&g.cancel($)};V(),O.assignIsOpen=function(b){I(a,b)},O.select=function(d,e){var f,h,i={};x=!0,i[N.itemName]=h=O.matches[d].model,f=N.modelMapper(a,i),M(a,f),p.$setValidity("editable",!0),p.$setValidity("parse",!0),A(a,{$item:h,$model:f,$label:N.viewMapper(a,i),$event:e}),V(),O.$eval(c.typeaheadFocusOnSelect)!==!1&&g(function(){b[0].focus()},0,!1)},b.on("keydown",function(b){if(0!==O.matches.length&&-1!==r.indexOf(b.which)){var c=z(a,{$event:b});if(-1===O.activeIdx&&c||9===b.which&&b.shiftKey)return V(),void O.$digest();b.preventDefault();var d;switch(b.which){case 27:b.stopPropagation(),V(),a.$digest();break;case 38:O.activeIdx=(O.activeIdx>0?O.activeIdx:O.matches.length)-1,O.$digest(),d=T.find("li")[O.activeIdx],d.parentNode.scrollTop=d.offsetTop;break;case 40:O.activeIdx=(O.activeIdx+1)%O.matches.length,O.$digest(),d=T.find("li")[O.activeIdx],d.parentNode.scrollTop=d.offsetTop;break;default:c&&O.$apply(function(){angular.isNumber(O.debounceUpdate)||angular.isObject(O.debounceUpdate)?k(function(){O.select(O.activeIdx,b)},angular.isNumber(O.debounceUpdate)?O.debounceUpdate:O.debounceUpdate["default"]):O.select(O.activeIdx,b)})}}}),b.bind("focus",function(a){w=!0,0!==t||p.$viewValue||g(function(){Y(p.$viewValue,a)},0)}),b.bind("blur",function(a){B&&O.matches.length&&-1!==O.activeIdx&&!x&&(x=!0,O.$apply(function(){angular.isObject(O.debounceUpdate)&&angular.isNumber(O.debounceUpdate.blur)?k(function(){O.select(O.activeIdx,a)},O.debounceUpdate.blur):O.select(O.activeIdx,a)})),!v&&p.$error.editable&&(p.$setViewValue(),p.$setValidity("editable",!0),p.$setValidity("parse",!0),b.val("")),w=!1,x=!1});var ba=function(c){b[0]!==c.target&&3!==c.which&&0!==O.matches.length&&(V(),j.$$phase||a.$digest())};h.on("click",ba),a.$on("$destroy",function(){h.off("click",ba),(E||F)&&ca.remove(),E&&(angular.element(i).off("resize",n),h.find("body").off("scroll",n)),T.remove(),J&&R.remove()});var ca=d(T)(O);E?h.find("body").append(ca):F?angular.element(F).eq(0).append(ca):b.after(ca),this.init=function(b,c){p=b,q=c,O.debounceUpdate=p.$options&&e(p.$options.debounce)(a),p.$parsers.unshift(function(b){return w=!0,0===t||b&&b.length>=t?u>0?(aa(),_(b)):Y(b):(y(a,!1),aa(),V()),v?b:b?void p.$setValidity("editable",!1):(p.$setValidity("editable",!0),null)}),p.$formatters.push(function(b){var c,d,e={};return v||p.$setValidity("editable",!0),D?(e.$model=b,D(a,e)):(e[N.itemName]=b,c=N.viewMapper(a,e),e[N.itemName]=void 0,d=N.viewMapper(a,e),c!==d?c:b)})}}]).directive("uibTypeahead",function(){return{controller:"UibTypeaheadController",require:["ngModel","^?ngModelOptions","uibTypeahead"],link:function(a,b,c,d){d[2].init(d[0],d[1])}}}).directive("uibTypeaheadPopup",["$$debounce",function(a){return{scope:{matches:"=",query:"=",active:"=",position:"&",moveInProgress:"=",select:"&",assignIsOpen:"&",debounce:"&"},replace:!0,templateUrl:function(a,b){return b.popupTemplateUrl||"uib/template/typeahead/typeahead-popup.html"},link:function(b,c,d){b.templateUrl=d.templateUrl,b.isOpen=function(){var a=b.matches.length>0;return b.assignIsOpen({isOpen:a}),a},b.isActive=function(a){return b.active===a},b.selectActive=function(a){b.active=a},b.selectMatch=function(c,d){var e=b.debounce();angular.isNumber(e)||angular.isObject(e)?a(function(){b.select({activeIdx:c,evt:d})},angular.isNumber(e)?e:e["default"]):b.select({activeIdx:c,evt:d})}}}}]).directive("uibTypeaheadMatch",["$templateRequest","$compile","$parse",function(a,b,c){return{scope:{index:"=",match:"=",query:"="},link:function(d,e,f){var g=c(f.templateUrl)(d.$parent)||"uib/template/typeahead/typeahead-match.html";a(g).then(function(a){var c=angular.element(a.trim());e.replaceWith(c),b(c)(d)})}}}]).filter("uibTypeaheadHighlight",["$sce","$injector","$log",function(a,b,c){function d(a){return a.replace(/([.?*+^$[\]\\(){}|-])/g,"\\$1")}function e(a){return/<.*>/g.test(a)}var f;return f=b.has("$sanitize"),function(b,g){return!f&&e(b)&&c.warn("Unsafe use of typeahead please use ngSanitize"),b=g?(""+b).replace(new RegExp(d(g),"gi"),"<strong>$&</strong>"):b,f||(b=a.trustAsHtml(b)),b}}]),angular.module("uib/template/accordion/accordion-group.html",[]).run(["$templateCache",function(a){a.put("uib/template/accordion/accordion-group.html",'<div class="panel" ng-class="panelClass || \'panel-default\'">\n  <div role="tab" id="{{::headingId}}" aria-selected="{{isOpen}}" class="panel-heading" ng-keypress="toggleOpen($event)">\n    <h4 class="panel-title">\n      <a role="button" data-toggle="collapse" href aria-expanded="{{isOpen}}" aria-controls="{{::panelId}}" tabindex="0" class="accordion-toggle" ng-click="toggleOpen()" uib-accordion-transclude="heading"><span uib-accordion-header ng-class="{\'text-muted\': isDisabled}">{{heading}}</span></a>\n    </h4>\n  </div>\n  <div id="{{::panelId}}" aria-labelledby="{{::headingId}}" aria-hidden="{{!isOpen}}" role="tabpanel" class="panel-collapse collapse" uib-collapse="!isOpen">\n    <div class="panel-body" ng-transclude></div>\n  </div>\n</div>\n')}]),angular.module("uib/template/accordion/accordion.html",[]).run(["$templateCache",function(a){a.put("uib/template/accordion/accordion.html",'<div role="tablist" class="panel-group" ng-transclude></div>')}]),angular.module("uib/template/alert/alert.html",[]).run(["$templateCache",function(a){a.put("uib/template/alert/alert.html",'<div class="alert" ng-class="[\'alert-\' + (type || \'warning\'), closeable ? \'alert-dismissible\' : null]" role="alert">\n    <button ng-show="closeable" type="button" class="close" ng-click="close({$event: $event})">\n        <span aria-hidden="true">&times;</span>\n        <span class="sr-only">Close</span>\n    </button>\n    <div ng-transclude></div>\n</div>\n')}]),angular.module("uib/template/carousel/carousel.html",[]).run(["$templateCache",function(a){a.put("uib/template/carousel/carousel.html",'<div ng-mouseenter="pause()" ng-mouseleave="play()" class="carousel" ng-swipe-right="prev()" ng-swipe-left="next()">\n  <div class="carousel-inner" ng-transclude></div>\n  <a role="button" href class="left carousel-control" ng-click="prev()" ng-class="{ disabled: isPrevDisabled() }" ng-show="slides.length > 1">\n    <span aria-hidden="true" class="glyphicon glyphicon-chevron-left"></span>\n    <span class="sr-only">previous</span>\n  </a>\n  <a role="button" href class="right carousel-control" ng-click="next()" ng-class="{ disabled: isNextDisabled() }" ng-show="slides.length > 1">\n    <span aria-hidden="true" class="glyphicon glyphicon-chevron-right"></span>\n    <span class="sr-only">next</span>\n  </a>\n  <ol class="carousel-indicators" ng-show="slides.length > 1">\n    <li ng-repeat="slide in slides | orderBy:indexOfSlide track by $index" ng-class="{ active: isActive(slide) }" ng-click="select(slide)">\n      <span class="sr-only">slide {{ $index + 1 }} of {{ slides.length }}<span ng-if="isActive(slide)">, currently active</span></span>\n    </li>\n  </ol>\n</div>\n');
}]),angular.module("uib/template/carousel/slide.html",[]).run(["$templateCache",function(a){a.put("uib/template/carousel/slide.html",'<div ng-class="{\n    \'active\': active\n  }" class="item text-center" ng-transclude></div>\n')}]),angular.module("uib/template/datepicker/datepicker.html",[]).run(["$templateCache",function(a){a.put("uib/template/datepicker/datepicker.html",'<div class="uib-datepicker" ng-switch="datepickerMode" role="application" ng-keydown="keydown($event)">\n  <uib-daypicker ng-switch-when="day" tabindex="0"></uib-daypicker>\n  <uib-monthpicker ng-switch-when="month" tabindex="0"></uib-monthpicker>\n  <uib-yearpicker ng-switch-when="year" tabindex="0"></uib-yearpicker>\n</div>\n')}]),angular.module("uib/template/datepicker/day.html",[]).run(["$templateCache",function(a){a.put("uib/template/datepicker/day.html",'<table class="uib-daypicker" role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::5 + showWeeks}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n    <tr>\n      <th ng-if="showWeeks" class="text-center"></th>\n      <th ng-repeat="label in ::labels track by $index" class="text-center"><small aria-label="{{::label.full}}">{{::label.abbr}}</small></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-weeks" ng-repeat="row in rows track by $index">\n      <td ng-if="showWeeks" class="text-center h6"><em>{{ weekNumbers[$index] }}</em></td>\n      <td ng-repeat="dt in row" class="uib-day text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default btn-sm"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-muted\': dt.secondary, \'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepicker/month.html",[]).run(["$templateCache",function(a){a.put("uib/template/datepicker/month.html",'<table class="uib-monthpicker" role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-months" ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row" class="uib-month text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepicker/year.html",[]).run(["$templateCache",function(a){a.put("uib/template/datepicker/year.html",'<table class="uib-yearpicker" role="grid" aria-labelledby="{{::uniqueId}}-title" aria-activedescendant="{{activeDateId}}">\n  <thead>\n    <tr>\n      <th><button type="button" class="btn btn-default btn-sm pull-left uib-left" ng-click="move(-1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-left"></i></button></th>\n      <th colspan="{{::columns - 2}}"><button id="{{::uniqueId}}-title" role="heading" aria-live="assertive" aria-atomic="true" type="button" class="btn btn-default btn-sm uib-title" ng-click="toggleMode()" ng-disabled="datepickerMode === maxMode" tabindex="-1"><strong>{{title}}</strong></button></th>\n      <th><button type="button" class="btn btn-default btn-sm pull-right uib-right" ng-click="move(1)" tabindex="-1"><i class="glyphicon glyphicon-chevron-right"></i></button></th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr class="uib-years" ng-repeat="row in rows track by $index">\n      <td ng-repeat="dt in row" class="uib-year text-center" role="gridcell"\n        id="{{::dt.uid}}"\n        ng-class="::dt.customClass">\n        <button type="button" class="btn btn-default"\n          uib-is-class="\n            \'btn-info\' for selectedDt,\n            \'active\' for activeDt\n            on dt"\n          ng-click="select(dt.date)"\n          ng-disabled="::dt.disabled"\n          tabindex="-1"><span ng-class="::{\'text-info\': dt.current}">{{::dt.label}}</span></button>\n      </td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/datepickerPopup/popup.html",[]).run(["$templateCache",function(a){a.put("uib/template/datepickerPopup/popup.html",'<div>\n  <ul class="uib-datepicker-popup dropdown-menu uib-position-measure" dropdown-nested ng-if="isOpen" ng-keydown="keydown($event)" ng-click="$event.stopPropagation()">\n    <li ng-transclude></li>\n    <li ng-if="showButtonBar" class="uib-button-bar">\n      <span class="btn-group pull-left">\n        <button type="button" class="btn btn-sm btn-info uib-datepicker-current" ng-click="select(\'today\', $event)" ng-disabled="isDisabled(\'today\')">{{ getText(\'current\') }}</button>\n        <button type="button" class="btn btn-sm btn-danger uib-clear" ng-click="select(null, $event)">{{ getText(\'clear\') }}</button>\n      </span>\n      <button type="button" class="btn btn-sm btn-success pull-right uib-close" ng-click="close($event)">{{ getText(\'close\') }}</button>\n    </li>\n  </ul>\n</div>\n')}]),angular.module("uib/template/modal/backdrop.html",[]).run(["$templateCache",function(a){a.put("uib/template/modal/backdrop.html",'<div class="modal-backdrop"\n     uib-modal-animation-class="fade"\n     modal-in-class="in"\n     ng-style="{\'z-index\': 1040 + (index && 1 || 0) + index*10}"\n></div>\n')}]),angular.module("uib/template/modal/window.html",[]).run(["$templateCache",function(a){a.put("uib/template/modal/window.html",'<div modal-render="{{$isRendered}}" tabindex="-1" role="dialog" class="modal"\n    uib-modal-animation-class="fade"\n    modal-in-class="in"\n    ng-style="{\'z-index\': 1050 + index*10, display: \'block\'}">\n    <div class="modal-dialog {{size ? \'modal-\' + size : \'\'}}"><div class="modal-content" uib-modal-transclude></div></div>\n</div>\n')}]),angular.module("uib/template/pager/pager.html",[]).run(["$templateCache",function(a){a.put("uib/template/pager/pager.html",'<ul class="pager">\n  <li ng-class="{disabled: noPrevious()||ngDisabled, previous: align}"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-class="{disabled: noNext()||ngDisabled, next: align}"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n</ul>\n')}]),angular.module("uib/template/pagination/pagination.html",[]).run(["$templateCache",function(a){a.put("uib/template/pagination/pagination.html",'<ul class="pagination">\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-first"><a href ng-click="selectPage(1, $event)">{{::getText(\'first\')}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noPrevious()||ngDisabled}" class="pagination-prev"><a href ng-click="selectPage(page - 1, $event)">{{::getText(\'previous\')}}</a></li>\n  <li ng-repeat="page in pages track by $index" ng-class="{active: page.active,disabled: ngDisabled&&!page.active}" class="pagination-page"><a href ng-click="selectPage(page.number, $event)">{{page.text}}</a></li>\n  <li ng-if="::directionLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-next"><a href ng-click="selectPage(page + 1, $event)">{{::getText(\'next\')}}</a></li>\n  <li ng-if="::boundaryLinks" ng-class="{disabled: noNext()||ngDisabled}" class="pagination-last"><a href ng-click="selectPage(totalPages, $event)">{{::getText(\'last\')}}</a></li>\n</ul>\n')}]),angular.module("uib/template/tooltip/tooltip-html-popup.html",[]).run(["$templateCache",function(a){a.put("uib/template/tooltip/tooltip-html-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind-html="contentExp()"></div>\n</div>\n')}]),angular.module("uib/template/tooltip/tooltip-popup.html",[]).run(["$templateCache",function(a){a.put("uib/template/tooltip/tooltip-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner" ng-bind="content"></div>\n</div>\n')}]),angular.module("uib/template/tooltip/tooltip-template-popup.html",[]).run(["$templateCache",function(a){a.put("uib/template/tooltip/tooltip-template-popup.html",'<div class="tooltip"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="tooltip-arrow"></div>\n  <div class="tooltip-inner"\n    uib-tooltip-template-transclude="contentExp()"\n    tooltip-template-transclude-scope="originScope()"></div>\n</div>\n')}]),angular.module("uib/template/popover/popover-html.html",[]).run(["$templateCache",function(a){a.put("uib/template/popover/popover-html.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n      <div class="popover-content" ng-bind-html="contentExp()"></div>\n  </div>\n</div>\n')}]),angular.module("uib/template/popover/popover-template.html",[]).run(["$templateCache",function(a){a.put("uib/template/popover/popover-template.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n      <div class="popover-content"\n        uib-tooltip-template-transclude="contentExp()"\n        tooltip-template-transclude-scope="originScope()"></div>\n  </div>\n</div>\n')}]),angular.module("uib/template/popover/popover.html",[]).run(["$templateCache",function(a){a.put("uib/template/popover/popover.html",'<div class="popover"\n  tooltip-animation-class="fade"\n  uib-tooltip-classes\n  ng-class="{ in: isOpen() }">\n  <div class="arrow"></div>\n\n  <div class="popover-inner">\n      <h3 class="popover-title" ng-bind="uibTitle" ng-if="uibTitle"></h3>\n      <div class="popover-content" ng-bind="content"></div>\n  </div>\n</div>\n')}]),angular.module("uib/template/progressbar/bar.html",[]).run(["$templateCache",function(a){a.put("uib/template/progressbar/bar.html",'<div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n')}]),angular.module("uib/template/progressbar/progress.html",[]).run(["$templateCache",function(a){a.put("uib/template/progressbar/progress.html",'<div class="progress" ng-transclude aria-labelledby="{{::title}}"></div>')}]),angular.module("uib/template/progressbar/progressbar.html",[]).run(["$templateCache",function(a){a.put("uib/template/progressbar/progressbar.html",'<div class="progress">\n  <div class="progress-bar" ng-class="type && \'progress-bar-\' + type" role="progressbar" aria-valuenow="{{value}}" aria-valuemin="0" aria-valuemax="{{max}}" ng-style="{width: (percent < 100 ? percent : 100) + \'%\'}" aria-valuetext="{{percent | number:0}}%" aria-labelledby="{{::title}}" ng-transclude></div>\n</div>\n')}]),angular.module("uib/template/rating/rating.html",[]).run(["$templateCache",function(a){a.put("uib/template/rating/rating.html",'<span ng-mouseleave="reset()" ng-keydown="onKeydown($event)" tabindex="0" role="slider" aria-valuemin="0" aria-valuemax="{{range.length}}" aria-valuenow="{{value}}" aria-valuetext="{{title}}">\n    <span ng-repeat-start="r in range track by $index" class="sr-only">({{ $index < value ? \'*\' : \' \' }})</span>\n    <i ng-repeat-end ng-mouseenter="enter($index + 1)" ng-click="rate($index + 1)" class="glyphicon" ng-class="$index < value && (r.stateOn || \'glyphicon-star\') || (r.stateOff || \'glyphicon-star-empty\')" ng-attr-title="{{r.title}}"></i>\n</span>\n')}]),angular.module("uib/template/tabs/tab.html",[]).run(["$templateCache",function(a){a.put("uib/template/tabs/tab.html",'<li ng-class="[{active: active, disabled: disabled}, classes]" class="uib-tab nav-item">\n  <a href ng-click="select($event)" class="nav-link" uib-tab-heading-transclude>{{heading}}</a>\n</li>\n')}]),angular.module("uib/template/tabs/tabset.html",[]).run(["$templateCache",function(a){a.put("uib/template/tabs/tabset.html",'<div>\n  <ul class="nav nav-{{tabset.type || \'tabs\'}}" ng-class="{\'nav-stacked\': vertical, \'nav-justified\': justified}" ng-transclude></ul>\n  <div class="tab-content">\n    <div class="tab-pane"\n         ng-repeat="tab in tabset.tabs"\n         ng-class="{active: tabset.active === tab.index}"\n         uib-tab-content-transclude="tab">\n    </div>\n  </div>\n</div>\n')}]),angular.module("uib/template/timepicker/timepicker.html",[]).run(["$templateCache",function(a){a.put("uib/template/timepicker/timepicker.html",'<table class="uib-timepicker">\n  <tbody>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-increment hours"><a ng-click="incrementHours()" ng-class="{disabled: noIncrementHours()}" class="btn btn-link" ng-disabled="noIncrementHours()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-increment minutes"><a ng-click="incrementMinutes()" ng-class="{disabled: noIncrementMinutes()}" class="btn btn-link" ng-disabled="noIncrementMinutes()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-increment seconds"><a ng-click="incrementSeconds()" ng-class="{disabled: noIncrementSeconds()}" class="btn btn-link" ng-disabled="noIncrementSeconds()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-up"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n    <tr>\n      <td class="form-group uib-time hours" ng-class="{\'has-error\': invalidHours}">\n        <input type="text" placeholder="HH" ng-model="hours" ng-change="updateHours()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementHours()" ng-blur="blur()">\n      </td>\n      <td class="uib-separator">:</td>\n      <td class="form-group uib-time minutes" ng-class="{\'has-error\': invalidMinutes}">\n        <input type="text" placeholder="MM" ng-model="minutes" ng-change="updateMinutes()" class="form-control text-center" ng-readonly="::readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementMinutes()" ng-blur="blur()">\n      </td>\n      <td ng-show="showSeconds" class="uib-separator">:</td>\n      <td class="form-group uib-time seconds" ng-class="{\'has-error\': invalidSeconds}" ng-show="showSeconds">\n        <input type="text" placeholder="SS" ng-model="seconds" ng-change="updateSeconds()" class="form-control text-center" ng-readonly="readonlyInput" maxlength="2" tabindex="{{::tabindex}}" ng-disabled="noIncrementSeconds()" ng-blur="blur()">\n      </td>\n      <td ng-show="showMeridian" class="uib-time am-pm"><button type="button" ng-class="{disabled: noToggleMeridian()}" class="btn btn-default text-center" ng-click="toggleMeridian()" ng-disabled="noToggleMeridian()" tabindex="{{::tabindex}}">{{meridian}}</button></td>\n    </tr>\n    <tr class="text-center" ng-show="::showSpinners">\n      <td class="uib-decrement hours"><a ng-click="decrementHours()" ng-class="{disabled: noDecrementHours()}" class="btn btn-link" ng-disabled="noDecrementHours()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td>&nbsp;</td>\n      <td class="uib-decrement minutes"><a ng-click="decrementMinutes()" ng-class="{disabled: noDecrementMinutes()}" class="btn btn-link" ng-disabled="noDecrementMinutes()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showSeconds">&nbsp;</td>\n      <td ng-show="showSeconds" class="uib-decrement seconds"><a ng-click="decrementSeconds()" ng-class="{disabled: noDecrementSeconds()}" class="btn btn-link" ng-disabled="noDecrementSeconds()" tabindex="{{::tabindex}}"><span class="glyphicon glyphicon-chevron-down"></span></a></td>\n      <td ng-show="showMeridian"></td>\n    </tr>\n  </tbody>\n</table>\n')}]),angular.module("uib/template/typeahead/typeahead-match.html",[]).run(["$templateCache",function(a){a.put("uib/template/typeahead/typeahead-match.html",'<a href\n   tabindex="-1"\n   ng-bind-html="match.label | uibTypeaheadHighlight:query"\n   ng-attr-title="{{match.label}}"></a>\n')}]),angular.module("uib/template/typeahead/typeahead-popup.html",[]).run(["$templateCache",function(a){a.put("uib/template/typeahead/typeahead-popup.html",'<ul class="dropdown-menu" ng-show="isOpen() && !moveInProgress" ng-style="{top: position().top+\'px\', left: position().left+\'px\'}" role="listbox" aria-hidden="{{!isOpen()}}">\n    <li ng-repeat="match in matches track by $index" ng-class="{active: isActive($index) }" ng-mouseenter="selectActive($index)" ng-click="selectMatch($index, $event)" role="option" id="{{::match.id}}">\n        <div uib-typeahead-match index="$index" match="match" query="query" template-url="templateUrl"></div>\n    </li>\n</ul>\n')}]),angular.module("ui.bootstrap.carousel").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibCarouselCss&&angular.element(document).find("head").prepend('<style type="text/css">.ng-animate.item:not(.left):not(.right){-webkit-transition:0s ease-in-out left;transition:0s ease-in-out left}</style>'),angular.$$uibCarouselCss=!0}),angular.module("ui.bootstrap.datepicker").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibDatepickerCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker .uib-title{width:100%;}.uib-day button,.uib-month button,.uib-year button{min-width:100%;}.uib-left,.uib-right{width:100%}</style>'),angular.$$uibDatepickerCss=!0}),angular.module("ui.bootstrap.position").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibPositionCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-position-measure{display:block !important;visibility:hidden !important;position:absolute !important;top:-9999px !important;left:-9999px !important;}.uib-position-scrollbar-measure{position:absolute !important;top:-9999px !important;width:50px !important;height:50px !important;overflow:scroll !important;}.uib-position-body-scrollbar-measure{overflow:scroll !important;}</style>'),angular.$$uibPositionCss=!0}),angular.module("ui.bootstrap.datepickerPopup").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibDatepickerpopupCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-datepicker-popup.dropdown-menu{display:block;float:none;margin:0;}.uib-button-bar{padding:10px 9px 2px;}</style>'),angular.$$uibDatepickerpopupCss=!0}),angular.module("ui.bootstrap.tooltip").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTooltipCss&&angular.element(document).find("head").prepend('<style type="text/css">[uib-tooltip-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-html-popup].tooltip.right-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.top-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-left > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.bottom-right > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.left-bottom > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-top > .tooltip-arrow,[uib-tooltip-template-popup].tooltip.right-bottom > .tooltip-arrow,[uib-popover-popup].popover.top-left > .arrow,[uib-popover-popup].popover.top-right > .arrow,[uib-popover-popup].popover.bottom-left > .arrow,[uib-popover-popup].popover.bottom-right > .arrow,[uib-popover-popup].popover.left-top > .arrow,[uib-popover-popup].popover.left-bottom > .arrow,[uib-popover-popup].popover.right-top > .arrow,[uib-popover-popup].popover.right-bottom > .arrow,[uib-popover-html-popup].popover.top-left > .arrow,[uib-popover-html-popup].popover.top-right > .arrow,[uib-popover-html-popup].popover.bottom-left > .arrow,[uib-popover-html-popup].popover.bottom-right > .arrow,[uib-popover-html-popup].popover.left-top > .arrow,[uib-popover-html-popup].popover.left-bottom > .arrow,[uib-popover-html-popup].popover.right-top > .arrow,[uib-popover-html-popup].popover.right-bottom > .arrow,[uib-popover-template-popup].popover.top-left > .arrow,[uib-popover-template-popup].popover.top-right > .arrow,[uib-popover-template-popup].popover.bottom-left > .arrow,[uib-popover-template-popup].popover.bottom-right > .arrow,[uib-popover-template-popup].popover.left-top > .arrow,[uib-popover-template-popup].popover.left-bottom > .arrow,[uib-popover-template-popup].popover.right-top > .arrow,[uib-popover-template-popup].popover.right-bottom > .arrow{top:auto;bottom:auto;left:auto;right:auto;margin:0;}[uib-popover-popup].popover,[uib-popover-html-popup].popover,[uib-popover-template-popup].popover{display:block !important;}</style>'),angular.$$uibTooltipCss=!0}),angular.module("ui.bootstrap.timepicker").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTimepickerCss&&angular.element(document).find("head").prepend('<style type="text/css">.uib-time input{width:50px;}</style>'),angular.$$uibTimepickerCss=!0}),angular.module("ui.bootstrap.typeahead").run(function(){!angular.$$csp().noInlineStyle&&!angular.$$uibTypeaheadCss&&angular.element(document).find("head").prepend('<style type="text/css">[uib-typeahead-popup].dropdown-menu{display:block;}</style>'),angular.$$uibTypeaheadCss=!0});
var process = process || {env: {NODE_ENV: "development"}};
(function (ng) {
    'use strict';
    var module = ng.module('lrInfiniteScroll', []);

    module.directive('lrInfiniteScroll', ['$timeout', function (timeout) {
        return{
            link: function ($scope, element, attr) {
                var lengthThreshold = attr.scrollThreshold || 50,
                    timeThreshold = attr.timeThreshold || 400,
                    handler = $scope.$eval(attr.lrInfiniteScroll),
                    promise = null,
                    lastRemaining = 9999;

                lengthThreshold = parseInt(lengthThreshold, 10);
                timeThreshold = parseInt(timeThreshold, 10);

                if (!handler || !ng.isFunction(handler)) {
                    handler = ng.noop;
                }

                var myElement = $(attr.lrInfiniteScrollScrollElement) || element;

                myElement.bind('scroll', function () {
                    var remaining = myElement[0].scrollHeight - (myElement[0].clientHeight + myElement[0].scrollTop);

                    //if we have reached the threshold and we scroll down
                    if (remaining < lengthThreshold && (remaining - lastRemaining) < 0) {

                        //if there is already a timer running which has no expired yet we have to cancel it and restart the timer
                        if (promise !== null) {
                            timeout.cancel(promise);
                        }
                        promise = timeout(function () {
                            handler();
                            promise = null;
                        }, timeThreshold);
                    }
                    lastRemaining = remaining;
                });

                //cleanup once the scope is removed so as this does not fire everywhere
                $scope.$on('$destroy', function () {
                    $(myElement).unbind('scroll');
                });

            }

        };
    }]);
})(angular);

var process = process || {env: {NODE_ENV: "development"}};
// moment.js
// version : 1.6.2
// author : Tim Wood
// license : MIT
// momentjs.com

(function (Date, undefined) {

    var moment,
        VERSION = "1.6.2",
        round = Math.round, i,
        // internal storage for language config files
        languages = {},
        currentLanguage = 'en',

        // check for nodeJS
        hasModule = (typeof module !== 'undefined'),

        // parameters to check for on the lang config
        langConfigProperties = 'months|monthsShort|monthsParse|weekdays|weekdaysShort|longDateFormat|calendar|relativeTime|ordinal|meridiem'.split('|'),

        // ASP.NET json date format regex
        aspNetJsonRegex = /^\/?Date\((\-?\d+)/i,

        // format tokens
        formattingTokens = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|dddd?|do?|w[o|w]?|YYYY|YY|a|A|hh?|HH?|mm?|ss?|SS?S?|zz?|ZZ?|LT|LL?L?L?)/g,

        // parsing tokens
        parseMultipleFormatChunker = /([0-9a-zA-Z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+)/gi,

        // parsing token regexes
        parseTokenOneOrTwoDigits = /\d\d?/, // 0 - 99
        parseTokenOneToThreeDigits = /\d{1,3}/, // 0 - 999
        parseTokenThreeDigits = /\d{3}/, // 000 - 999
        parseTokenFourDigits = /\d{4}/, // 0000 - 9999
        parseTokenWord = /[0-9a-z\u00A0-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+/i, // any word characters or numbers
        parseTokenTimezone = /Z|[\+\-]\d\d:?\d\d/i, // +00:00 -00:00 +0000 -0000 or Z
        parseTokenT = /T/i, // T (ISO seperator)

        // preliminary iso regex 
        // 0000-00-00 + T + 00 or 00:00 or 00:00:00 or 00:00:00.000 + +00:00 or +0000
        isoRegex = /^\s*\d{4}-\d\d-\d\d(T(\d\d(:\d\d(:\d\d(\.\d\d?\d?)?)?)?)?([\+\-]\d\d:?\d\d)?)?/,
        isoFormat = 'YYYY-MM-DDTHH:mm:ssZ',

        // iso time formats and regexes
        isoTimes = [
            ['HH:mm:ss.S', /T\d\d:\d\d:\d\d\.\d{1,3}/],
            ['HH:mm:ss', /T\d\d:\d\d:\d\d/],
            ['HH:mm', /T\d\d:\d\d/],
            ['HH', /T\d\d/]
        ],

        // timezone chunker "+10:00" > ["10", "00"] or "-1530" > ["-15", "30"]
        parseTimezoneChunker = /([\+\-]|\d\d)/gi,

        // getter and setter names
        proxyGettersAndSetters = 'Month|Date|Hours|Minutes|Seconds|Milliseconds'.split('|'),
        unitMillisecondFactors = {
            'Milliseconds' : 1,
            'Seconds' : 1e3,
            'Minutes' : 6e4,
            'Hours' : 36e5,
            'Days' : 864e5,
            'Months' : 2592e6,
            'Years' : 31536e6
        };

    // Moment prototype object
    function Moment(date, isUTC) {
        this._d = date;
        this._isUTC = !!isUTC;
    }

    function absRound(number) {
        if (number < 0) {
            return Math.ceil(number);
        } else {
            return Math.floor(number);
        }
    }

    // Duration Constructor
    function Duration(duration) {
        var data = this._data = {},
            years = duration.years || duration.y || 0,
            months = duration.months || duration.M || 0, 
            weeks = duration.weeks || duration.w || 0,
            days = duration.days || duration.d || 0,
            hours = duration.hours || duration.h || 0,
            minutes = duration.minutes || duration.m || 0,
            seconds = duration.seconds || duration.s || 0,
            milliseconds = duration.milliseconds || duration.ms || 0;

        // representation for dateAddRemove
        this._milliseconds = milliseconds +
            seconds * 1e3 + // 1000
            minutes * 6e4 + // 1000 * 60
            hours * 36e5; // 1000 * 60 * 60
        // Because of dateAddRemove treats 24 hours as different from a
        // day when working around DST, we need to store them separately
        this._days = days +
            weeks * 7;
        // It is impossible translate months into days without knowing
        // which months you are are talking about, so we have to store
        // it separately.
        this._months = months +
            years * 12;
            
        // The following code bubbles up values, see the tests for
        // examples of what that means.
        data.milliseconds = milliseconds % 1000;
        seconds += absRound(milliseconds / 1000);

        data.seconds = seconds % 60;
        minutes += absRound(seconds / 60);

        data.minutes = minutes % 60;
        hours += absRound(minutes / 60);

        data.hours = hours % 24;
        days += absRound(hours / 24);

        days += weeks * 7;
        data.days = days % 30;
        
        months += absRound(days / 30);

        data.months = months % 12;
        years += absRound(months / 12);

        data.years = years;
    }

    // left zero fill a number
    // see http://jsperf.com/left-zero-filling for performance comparison
    function leftZeroFill(number, targetLength) {
        var output = number + '';
        while (output.length < targetLength) {
            output = '0' + output;
        }
        return output;
    }

    // helper function for _.addTime and _.subtractTime
    function addOrSubtractDurationFromMoment(mom, duration, isAdding) {
        var ms = duration._milliseconds,
            d = duration._days,
            M = duration._months,
            currentDate;

        if (ms) {
            mom._d.setTime(+mom + ms * isAdding);
        }
        if (d) {
            mom.date(mom.date() + d * isAdding);
        }
        if (M) {
            currentDate = mom.date();
            mom.date(1)
                .month(mom.month() + M * isAdding)
                .date(Math.min(currentDate, mom.daysInMonth()));
        }
    }

    // check if is an array
    function isArray(input) {
        return Object.prototype.toString.call(input) === '[object Array]';
    }

    // convert an array to a date.
    // the array should mirror the parameters below
    // note: all values past the year are optional and will default to the lowest possible value.
    // [year, month, day , hour, minute, second, millisecond]
    function dateFromArray(input) {
        return new Date(input[0], input[1] || 0, input[2] || 1, input[3] || 0, input[4] || 0, input[5] || 0, input[6] || 0);
    }

    // format date using native date object
    function formatMoment(m, inputString) {
        var currentMonth = m.month(),
            currentDate = m.date(),
            currentYear = m.year(),
            currentDay = m.day(),
            currentHours = m.hours(),
            currentMinutes = m.minutes(),
            currentSeconds = m.seconds(),
            currentMilliseconds = m.milliseconds(),
            currentZone = -m.zone(),
            ordinal = moment.ordinal,
            meridiem = moment.meridiem;
        // check if the character is a format
        // return formatted string or non string.
        //
        // uses switch/case instead of an object of named functions (like http://phpjs.org/functions/date:380)
        // for minification and performance
        // see http://jsperf.com/object-of-functions-vs-switch for performance comparison
        function replaceFunction(input) {
            // create a couple variables to be used later inside one of the cases.
            var a, b;
            switch (input) {
                // MONTH
            case 'M' :
                return currentMonth + 1;
            case 'Mo' :
                return (currentMonth + 1) + ordinal(currentMonth + 1);
            case 'MM' :
                return leftZeroFill(currentMonth + 1, 2);
            case 'MMM' :
                return moment.monthsShort[currentMonth];
            case 'MMMM' :
                return moment.months[currentMonth];
            // DAY OF MONTH
            case 'D' :
                return currentDate;
            case 'Do' :
                return currentDate + ordinal(currentDate);
            case 'DD' :
                return leftZeroFill(currentDate, 2);
            // DAY OF YEAR
            case 'DDD' :
                a = new Date(currentYear, currentMonth, currentDate);
                b = new Date(currentYear, 0, 1);
                return ~~ (((a - b) / 864e5) + 1.5);
            case 'DDDo' :
                a = replaceFunction('DDD');
                return a + ordinal(a);
            case 'DDDD' :
                return leftZeroFill(replaceFunction('DDD'), 3);
            // WEEKDAY
            case 'd' :
                return currentDay;
            case 'do' :
                return currentDay + ordinal(currentDay);
            case 'ddd' :
                return moment.weekdaysShort[currentDay];
            case 'dddd' :
                return moment.weekdays[currentDay];
            // WEEK OF YEAR
            case 'w' :
                a = new Date(currentYear, currentMonth, currentDate - currentDay + 5);
                b = new Date(a.getFullYear(), 0, 4);
                return ~~ ((a - b) / 864e5 / 7 + 1.5);
            case 'wo' :
                a = replaceFunction('w');
                return a + ordinal(a);
            case 'ww' :
                return leftZeroFill(replaceFunction('w'), 2);
            // YEAR
            case 'YY' :
                return leftZeroFill(currentYear % 100, 2);
            case 'YYYY' :
                return currentYear;
            // AM / PM
            case 'a' :
                return meridiem ? meridiem(currentHours, currentMinutes, false) : (currentHours > 11 ? 'pm' : 'am');
            case 'A' :
                return meridiem ? meridiem(currentHours, currentMinutes, true) : (currentHours > 11 ? 'PM' : 'AM');
            // 24 HOUR
            case 'H' :
                return currentHours;
            case 'HH' :
                return leftZeroFill(currentHours, 2);
            // 12 HOUR
            case 'h' :
                return currentHours % 12 || 12;
            case 'hh' :
                return leftZeroFill(currentHours % 12 || 12, 2);
            // MINUTE
            case 'm' :
                return currentMinutes;
            case 'mm' :
                return leftZeroFill(currentMinutes, 2);
            // SECOND
            case 's' :
                return currentSeconds;
            case 'ss' :
                return leftZeroFill(currentSeconds, 2);
            // MILLISECONDS
            case 'S' :
                return ~~ (currentMilliseconds / 100);
            case 'SS' :
                return leftZeroFill(~~(currentMilliseconds / 10), 2);
            case 'SSS' :
                return leftZeroFill(currentMilliseconds, 3);
            // TIMEZONE
            case 'Z' :
                return (currentZone < 0 ? '-' : '+') + leftZeroFill(~~(Math.abs(currentZone) / 60), 2) + ':' + leftZeroFill(~~(Math.abs(currentZone) % 60), 2);
            case 'ZZ' :
                return (currentZone < 0 ? '-' : '+') + leftZeroFill(~~(10 * Math.abs(currentZone) / 6), 4);
            // LONG DATES
            case 'L' :
            case 'LL' :
            case 'LLL' :
            case 'LLLL' :
            case 'LT' :
                return formatMoment(m, moment.longDateFormat[input]);
            // DEFAULT
            default :
                return input.replace(/(^\[)|(\\)|\]$/g, "");
            }
        }
        return inputString.replace(formattingTokens, replaceFunction);
    }

    // get the regex to find the next token
    function getParseRegexForToken(token) {
        switch (token) {
        case 'DDDD':
            return parseTokenThreeDigits;
        case 'YYYY':
            return parseTokenFourDigits;
        case 'S':
        case 'SS':
        case 'SSS':
        case 'DDD':
            return parseTokenOneToThreeDigits;
        case 'MMM':
        case 'MMMM':
        case 'ddd':
        case 'dddd':
        case 'a':
        case 'A':
            return parseTokenWord;
        case 'Z':
        case 'ZZ':
            return parseTokenTimezone;
        case 'T':
            return parseTokenT;
        case 'MM':
        case 'DD':
        case 'dd':
        case 'YY':
        case 'HH':
        case 'hh':
        case 'mm':
        case 'ss':
        case 'M':
        case 'D':
        case 'd':
        case 'H':
        case 'h':
        case 'm':
        case 's':
            return parseTokenOneOrTwoDigits;
        default :
            return new RegExp(token.replace('\\', ''));
        }
    }

    // function to convert string input to date
    function addTimeToArrayFromToken(token, input, datePartArray, config) {
        var a;
        //console.log('addTime', format, input);
        switch (token) {
        // MONTH
        case 'M' : // fall through to MM
        case 'MM' :
            datePartArray[1] = (input == null) ? 0 : ~~input - 1;
            break;
        case 'MMM' : // fall through to MMMM
        case 'MMMM' :
            for (a = 0; a < 12; a++) {
                if (moment.monthsParse[a].test(input)) {
                    datePartArray[1] = a;
                    break;
                }
            }
            break;
        // DAY OF MONTH
        case 'D' : // fall through to DDDD
        case 'DD' : // fall through to DDDD
        case 'DDD' : // fall through to DDDD
        case 'DDDD' :
            datePartArray[2] = ~~input;
            break;
        // YEAR
        case 'YY' :
            input = ~~input;
            datePartArray[0] = input + (input > 70 ? 1900 : 2000);
            break;
        case 'YYYY' :
            datePartArray[0] = ~~Math.abs(input);
            break;
        // AM / PM
        case 'a' : // fall through to A
        case 'A' :
            config.isPm = ((input + '').toLowerCase() === 'pm');
            break;
        // 24 HOUR
        case 'H' : // fall through to hh
        case 'HH' : // fall through to hh
        case 'h' : // fall through to hh
        case 'hh' :
            datePartArray[3] = ~~input;
            break;
        // MINUTE
        case 'm' : // fall through to mm
        case 'mm' :
            datePartArray[4] = ~~input;
            break;
        // SECOND
        case 's' : // fall through to ss
        case 'ss' :
            datePartArray[5] = ~~input;
            break;
        // MILLISECOND
        case 'S' :
        case 'SS' :
        case 'SSS' :
            datePartArray[6] = ~~ (('0.' + input) * 1000);
            break;
        // TIMEZONE
        case 'Z' : // fall through to ZZ
        case 'ZZ' :
            config.isUTC = true;
            a = (input + '').match(parseTimezoneChunker);
            if (a && a[1]) {
                config.tzh = ~~a[1];
            }
            if (a && a[2]) {
                config.tzm = ~~a[2];
            }
            // reverse offsets
            if (a && a[0] === '+') {
                config.tzh = -config.tzh;
                config.tzm = -config.tzm;
            }
            break;
        }
    }

    // date from string and format string
    function makeDateFromStringAndFormat(string, format) {
        var datePartArray = [0, 0, 1, 0, 0, 0, 0],
            config = {
                tzh : 0, // timezone hour offset
                tzm : 0  // timezone minute offset
            },
            tokens = format.match(formattingTokens),
            i, parsedInput;

        for (i = 0; i < tokens.length; i++) {
            parsedInput = (getParseRegexForToken(tokens[i]).exec(string) || [])[0];
            string = string.replace(getParseRegexForToken(tokens[i]), '');
            addTimeToArrayFromToken(tokens[i], parsedInput, datePartArray, config);
        }
        // handle am pm
        if (config.isPm && datePartArray[3] < 12) {
            datePartArray[3] += 12;
        }
        // if is 12 am, change hours to 0
        if (config.isPm === false && datePartArray[3] === 12) {
            datePartArray[3] = 0;
        }
        // handle timezone
        datePartArray[3] += config.tzh;
        datePartArray[4] += config.tzm;
        // return
        return config.isUTC ? new Date(Date.UTC.apply({}, datePartArray)) : dateFromArray(datePartArray);
    }

    // compare two arrays, return the number of differences
    function compareArrays(array1, array2) {
        var len = Math.min(array1.length, array2.length),
            lengthDiff = Math.abs(array1.length - array2.length),
            diffs = 0,
            i;
        for (i = 0; i < len; i++) {
            if (~~array1[i] !== ~~array2[i]) {
                diffs++;
            }
        }
        return diffs + lengthDiff;
    }

    // date from string and array of format strings
    function makeDateFromStringAndArray(string, formats) {
        var output,
            inputParts = string.match(parseMultipleFormatChunker) || [],
            formattedInputParts,
            scoreToBeat = 99,
            i,
            currentDate,
            currentScore;
        for (i = 0; i < formats.length; i++) {
            currentDate = makeDateFromStringAndFormat(string, formats[i]);
            formattedInputParts = formatMoment(new Moment(currentDate), formats[i]).match(parseMultipleFormatChunker) || [];
            currentScore = compareArrays(inputParts, formattedInputParts);
            if (currentScore < scoreToBeat) {
                scoreToBeat = currentScore;
                output = currentDate;
            }
        }
        return output;
    }

    // date from iso format
    function makeDateFromString(string) {
        var format = 'YYYY-MM-DDT',
            i;
        if (isoRegex.exec(string)) {
            for (i = 0; i < 4; i++) {
                if (isoTimes[i][1].exec(string)) {
                    format += isoTimes[i][0];
                    break;
                }
            }
            return parseTokenTimezone.exec(string) ? 
                makeDateFromStringAndFormat(string, format + ' Z') :
                makeDateFromStringAndFormat(string, format);
        }
        return new Date(string);
    }

    // helper function for moment.fn.from, moment.fn.fromNow, and moment.duration.fn.humanize
    function substituteTimeAgo(string, number, withoutSuffix, isFuture) {
        var rt = moment.relativeTime[string];
        return (typeof rt === 'function') ?
            rt(number || 1, !!withoutSuffix, string, isFuture) :
            rt.replace(/%d/i, number || 1);
    }

    function relativeTime(milliseconds, withoutSuffix) {
        var seconds = round(Math.abs(milliseconds) / 1000),
            minutes = round(seconds / 60),
            hours = round(minutes / 60),
            days = round(hours / 24),
            years = round(days / 365),
            args = seconds < 45 && ['s', seconds] ||
                minutes === 1 && ['m'] ||
                minutes < 45 && ['mm', minutes] ||
                hours === 1 && ['h'] ||
                hours < 22 && ['hh', hours] ||
                days === 1 && ['d'] ||
                days <= 25 && ['dd', days] ||
                days <= 45 && ['M'] ||
                days < 345 && ['MM', round(days / 30)] ||
                years === 1 && ['y'] || ['yy', years];
        args[2] = withoutSuffix;
        args[3] = milliseconds > 0;
        return substituteTimeAgo.apply({}, args);
    }

    moment = function (input, format) {
        if (input === null || input === '') {
            return null;
        }
        var date,
            matched,
            isUTC;
        // parse Moment object
        if (moment.isMoment(input)) {
            date = new Date(+input._d);
            isUTC = input._isUTC;
        // parse string and format
        } else if (format) {
            if (isArray(format)) {
                date = makeDateFromStringAndArray(input, format);
            } else {
                date = makeDateFromStringAndFormat(input, format);
            }
        // evaluate it as a JSON-encoded date
        } else {
            matched = aspNetJsonRegex.exec(input);
            date = input === undefined ? new Date() :
                matched ? new Date(+matched[1]) :
                input instanceof Date ? input :
                isArray(input) ? dateFromArray(input) :
                typeof input === 'string' ? makeDateFromString(input) :
                new Date(input);
        }
        return new Moment(date, isUTC);
    };

    // creating with utc
    moment.utc = function (input, format) {
        if (isArray(input)) {
            return new Moment(new Date(Date.UTC.apply({}, input)), true);
        }
        return (format && input) ?
            moment(input + ' +0000', format + ' Z').utc() :
            moment(input && !parseTokenTimezone.exec(input) ? input + '+0000' : input).utc();
    };

    // creating with unix timestamp (in seconds)
    moment.unix = function (input) {
        return moment(input * 1000);
    };

    // duration
    moment.duration = function (input, key) {
        var isDuration = moment.isDuration(input),
            isNumber = (typeof input === 'number'),
            duration = (isDuration ? input._data : (isNumber ? {} : input));

        if (isNumber) {
            if (key) {
                duration[key] = input;
            } else {
                duration.milliseconds = input;
            }
        }

        return new Duration(duration);
    };

    // humanizeDuration
    // This method is deprecated in favor of the new Duration object.  Please
    // see the moment.duration method.
    moment.humanizeDuration = function (num, type, withSuffix) {
        return moment.duration(num, type === true ? null : type).humanize(type === true ? true : withSuffix);
    };

    // version number
    moment.version = VERSION;

    // default format
    moment.defaultFormat = isoFormat;

    // language switching and caching
    moment.lang = function (key, values) {
        var i, req,
            parse = [];
        if (!key) {
            return currentLanguage;
        }
        if (values) {
            for (i = 0; i < 12; i++) {
                parse[i] = new RegExp('^' + values.months[i] + '|^' + values.monthsShort[i].replace('.', ''), 'i');
            }
            values.monthsParse = values.monthsParse || parse;
            languages[key] = values;
        }
        if (languages[key]) {
            for (i = 0; i < langConfigProperties.length; i++) {
                moment[langConfigProperties[i]] = languages[key][langConfigProperties[i]] || 
                    languages.en[langConfigProperties[i]];
            }
            currentLanguage = key;
        } else {
            if (hasModule) {
                req = require('./lang/' + key);
                moment.lang(key, req);
            }
        }
    };

    // set default language
    moment.lang('en', {
        months : "January_February_March_April_May_June_July_August_September_October_November_December".split("_"),
        monthsShort : "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),
        weekdays : "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),
        weekdaysShort : "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),
        longDateFormat : {
            LT : "h:mm A",
            L : "MM/DD/YYYY",
            LL : "MMMM D YYYY",
            LLL : "MMMM D YYYY LT",
            LLLL : "dddd, MMMM D YYYY LT"
        },
        meridiem : false,
        calendar : {
            sameDay : '[Today at] LT',
            nextDay : '[Tomorrow at] LT',
            nextWeek : 'dddd [at] LT',
            lastDay : '[Yesterday at] LT',
            lastWeek : '[last] dddd [at] LT',
            sameElse : 'L'
        },
        relativeTime : {
            future : "in %s",
            past : "%s ago",
            s : "a few seconds",
            m : "a minute",
            mm : "%d minutes",
            h : "an hour",
            hh : "%d hours",
            d : "a day",
            dd : "%d days",
            M : "a month",
            MM : "%d months",
            y : "a year",
            yy : "%d years"
        },
        ordinal : function (number) {
            var b = number % 10;
            return (~~ (number % 100 / 10) === 1) ? 'th' :
                (b === 1) ? 'st' :
                (b === 2) ? 'nd' :
                (b === 3) ? 'rd' : 'th';
        }
    });

    // compare moment object
    moment.isMoment = function (obj) {
        return obj instanceof Moment;
    };

    // for typechecking Duration objects
    moment.isDuration = function (obj) {
        return obj instanceof Duration;
    };

    // shortcut for prototype
    moment.fn = Moment.prototype = {

        clone : function () {
            return moment(this);
        },

        valueOf : function () {
            return +this._d;
        },

        unix : function () {
            return Math.floor(+this._d / 1000);
        },

        toString : function () {
            return this._d.toString();
        },

        toDate : function () {
            return this._d;
        },

        utc : function () {
            this._isUTC = true;
            return this;
        },

        local : function () {
            this._isUTC = false;
            return this;
        },

        format : function (inputString) {
            return formatMoment(this, inputString ? inputString : moment.defaultFormat);
        },

        add : function (input, val) {
            var dur = val ? moment.duration(+val, input) : moment.duration(input);
            addOrSubtractDurationFromMoment(this, dur, 1);
            return this;
        },

        subtract : function (input, val) {
            var dur = val ? moment.duration(+val, input) : moment.duration(input);
            addOrSubtractDurationFromMoment(this, dur, -1);
            return this;
        },

        diff : function (input, val, asFloat) {
            var inputMoment = this._isUTC ? moment(input).utc() : moment(input).local(),
                zoneDiff = (this.zone() - inputMoment.zone()) * 6e4,
                diff = this._d - inputMoment._d - zoneDiff,
                year = this.year() - inputMoment.year(),
                month = this.month() - inputMoment.month(),
                date = this.date() - inputMoment.date(),
                output;
            if (val === 'months') {
                output = year * 12 + month + date / 30;
            } else if (val === 'years') {
                output = year + (month + date / 30) / 12;
            } else {
                output = val === 'seconds' ? diff / 1e3 : // 1000
                    val === 'minutes' ? diff / 6e4 : // 1000 * 60
                    val === 'hours' ? diff / 36e5 : // 1000 * 60 * 60
                    val === 'days' ? diff / 864e5 : // 1000 * 60 * 60 * 24
                    val === 'weeks' ? diff / 6048e5 : // 1000 * 60 * 60 * 24 * 7
                    diff;
            }
            return asFloat ? output : round(output);
        },

        from : function (time, withoutSuffix) {
            return moment.duration(this.diff(time)).humanize(!withoutSuffix);
        },

        fromNow : function (withoutSuffix) {
            return this.from(moment(), withoutSuffix);
        },

        calendar : function () {
            var diff = this.diff(moment().sod(), 'days', true),
                calendar = moment.calendar,
                allElse = calendar.sameElse,
                format = diff < -6 ? allElse :
                diff < -1 ? calendar.lastWeek :
                diff < 0 ? calendar.lastDay :
                diff < 1 ? calendar.sameDay :
                diff < 2 ? calendar.nextDay :
                diff < 7 ? calendar.nextWeek : allElse;
            return this.format(typeof format === 'function' ? format.apply(this) : format);
        },

        isLeapYear : function () {
            var year = this.year();
            return (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0;
        },

        isDST : function () {
            return (this.zone() < moment([this.year()]).zone() || 
                this.zone() < moment([this.year(), 5]).zone());
        },

        day : function (input) {
            var day = this._isUTC ? this._d.getUTCDay() : this._d.getDay();
            return input == null ? day :
                this.add({ d : input - day });
        },

        sod: function () {
            return moment(this)
                .hours(0)
                .minutes(0)
                .seconds(0)
                .milliseconds(0);
        },

        eod: function () {
            // end of day = start of day plus 1 day, minus 1 millisecond
            return this.sod().add({
                d : 1,
                ms : -1
            });
        },

        zone : function () {
            return this._isUTC ? 0 : this._d.getTimezoneOffset();
        },

        daysInMonth : function () {
            return moment(this).month(this.month() + 1).date(0).date();
        }
    };

    // helper for adding shortcuts
    function makeGetterAndSetter(name, key) {
        moment.fn[name] = function (input) {
            var utc = this._isUTC ? 'UTC' : '';
            if (input != null) {
                this._d['set' + utc + key](input);
                return this;
            } else {
                return this._d['get' + utc + key]();
            }
        };
    }

    // loop through and add shortcuts (Month, Date, Hours, Minutes, Seconds, Milliseconds)
    for (i = 0; i < proxyGettersAndSetters.length; i ++) {
        makeGetterAndSetter(proxyGettersAndSetters[i].toLowerCase(), proxyGettersAndSetters[i]);
    }

    // add shortcut for year (uses different syntax than the getter/setter 'year' == 'FullYear')
    makeGetterAndSetter('year', 'FullYear');

    moment.duration.fn = Duration.prototype = {
        weeks : function () {
            return absRound(this.days() / 7);
        },

        valueOf : function () {
            return this._milliseconds +
              this._days * 864e5 +
              this._months * 2592e6;
        },

        humanize : function (withSuffix) {
            var difference = +this,
                rel = moment.relativeTime,
                output = relativeTime(difference, !withSuffix);

            if (withSuffix) {
                output = (difference <= 0 ? rel.past : rel.future).replace(/%s/i, output);
            }

            return output;
        }
    };

    function makeDurationGetter(name) {
        moment.duration.fn[name] = function () {
            return this._data[name];
        };
    }

    function makeDurationAsGetter(name, factor) {
        moment.duration.fn['as' + name] = function () {
            return +this / factor;
        };
    }

    for (i in unitMillisecondFactors) {
        if (unitMillisecondFactors.hasOwnProperty(i)) {
            makeDurationAsGetter(i, unitMillisecondFactors[i]);
            makeDurationGetter(i.toLowerCase());
        }
    }

    makeDurationAsGetter('Weeks', 6048e5);

    // CommonJS module is defined
    if (hasModule) {
        module.exports = moment;
    }
    /*global ender:false */
    if (typeof window !== 'undefined' && typeof ender === 'undefined') {
        window.moment = moment;
    }
    /*global define:false */
    if (typeof define === "function" && define.amd) {
        define("moment", [], function () {
            return moment;
        });
    }
})(Date);

var process = process || {env: {NODE_ENV: "development"}};
angular.module('xe.common', [])./*
   * Intercept Angular $http requests and trigger the jQuery ajaxStart event
   * to allow the activity timer to recognize the activity.
   */
factory('ajaxStartLoadingInterceptor', function () {
    return {
        request: function (config) {
            $(document).trigger('ajaxStart');
            return config;
        }
    }
}).config(['$httpProvider', function ($httpProvider) {
    $httpProvider.interceptors.push('ajaxStartLoadingInterceptor');
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*!
 * The MIT License (MIT)
 * 
 * Copyright (c) 2017 Dzulqarnain Nasir
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 * 
 */
!function(t){function e(r){if(n[r])return n[r].exports;var a=n[r]={i:r,l:!1,exports:{}};return t[r].call(a.exports,a,a.exports,e),a.l=!0,a.exports}var n={};e.m=t,e.c=n,e.i=function(t){return t},e.d=function(t,n,r){e.o(t,n)||Object.defineProperty(t,n,{configurable:!1,enumerable:!0,get:r})},e.n=function(t){var n=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(n,"a",n),n},e.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},e.p="",e(e.s=3)}([function(t,e){t.exports=angular},function(t,e,n){"use strict";var r=n(0);n.n(r);n.d(e,"a",function(){return a});var a=function(){function t(){var t=this;this.$get=function(e,n,r){return t.$locale=n,t.$dateFilter=e("date"),t.updateFromLocale(),t._watchLocale&&r.$watchCollection(function(){return n},function(){t.updateFromLocale()}),t.parse},this.parse=function(e,n){if(r.isDate(e))return e;if(r.isString(e))try{if(!n.length)return new Date(e);null!=t.datetimeFormats&&t.datetimeFormats[n]&&(n=t.datetimeFormats[n]);var a=new Date,i=0,l=0,o="",s=null,u=null,h=null,c=null,g=0,f=0,d=0,m=0,v="am",w=0,M=!1;for(a=new Date(a.getFullYear(),a.getMonth(),1);l<n.length;){o=n.charAt(l);var p="";if("'"!==n.charAt(l)){for(;n.charAt(l)===o&&l<n.length;)p+=n.charAt(l++);if("yyyy"===p||"yy"===p||"y"===p){var y,I;if("yyyy"===p&&(y=4,I=4),"yy"===p&&(y=2,I=2),"y"===p&&(y=2,I=4),null===(s=t.getInteger(e,i,y,I)))throw"Invalid year";i+=Math.max(s.toString().length,p.length),2===s.toString().length&&(s=s>70?s-0+1900:s-0+2e3)}else if("ww"===p||"w"===p)u=t.getInteger(e,i,p.length,2),i+=Math.max(u.toString().length,p.length);else if("MMMM"===p||"MMM"===p){h=0;for(var $=0;$<t.monthNames.length;$++){var D=t.monthNames[$];if(e.substring(i,i+D.length).toLowerCase()===D.toLowerCase()){h=$+1,h>12&&(h-=12),i+=D.length;break}}if(h<1||h>12)throw"Invalid month"}else if("EEEE"===p||"EEE"===p)for(var b=0;b<t.dayNames.length;b++){var F=t.dayNames[b];if(e.substring(i,i+F.length).toLowerCase()===F.toLowerCase()){i+=F.length;break}}else if("MM"===p||"M"===p){if(null===(h=t.getInteger(e,i,p.length,2))||h<1||h>12)throw"Invalid month";i+=Math.max(h.toString().length,p.length)}else if("dd"===p||"d"===p){if(null===(c=t.getInteger(e,i,p.length,2))||c<1||c>31)throw"Invalid date";i+=Math.max(c.toString().length,p.length)}else if("HH"===p||"H"===p){if(null===(g=t.getInteger(e,i,p.length,2))||g<0||g>23)throw"Invalid hours";i+=Math.max(g.toString().length,p.length)}else if("hh"===p||"h"===p){if(null===(g=t.getInteger(e,i,p.length,2))||g<1||g>12)throw"Invalid hours";i+=Math.max(g.toString().length,p.length)}else if("mm"===p||"m"===p){if(null===(f=t.getInteger(e,i,p.length,2))||f<0||f>59)throw"Invalid minutes";i+=Math.max(f.toString().length,p.length)}else if("ss"===p||"s"===p){if(null===(d=t.getInteger(e,i,p.length,2))||d<0||d>59)throw"Invalid seconds";i+=Math.max(d.toString().length,p.length)}else if("sss"===p){if(null===(m=t.getInteger(e,i,3,3))||m<0||m>999)throw"Invalid milliseconds";i+=3}else if("a"===p){if("am"===e.substring(i,i+2).toLowerCase())v="AM";else{if("pm"!==e.substring(i,i+2).toLowerCase())throw"Invalid AM/PM";v="PM"}i+=2}else if("Z"===p){if(M=!0,"Z"===e[i])w=0,i+=1;else if(":"===e[i+3]){var S=e.substring(i,i+6);w=60*parseInt(S.substr(0,3),10)+parseInt(S.substr(4,2),10),i+=6}else{var S=e.substring(i,i+5);w=60*parseInt(S.substr(0,3),10)+parseInt(S.substr(3,2),10),i+=5}if(w>720||w<-720)throw"Invalid timezone"}else{if(e.substring(i,i+p.length)!==p)throw"Pattern value mismatch";i+=p.length}}else{for(;"'"!==n.charAt(++l)&&l<n.length;)p+=n.charAt(l);if(e.substring(i,i+p.length)!==p)throw"Pattern value mismatch";i+=p.length,l++}}if(i!==e.length)throw"Pattern value mismatch";if(2===h)if(s%4==0&&s%100!=0||s%400==0){if(c>29)throw"Invalid date"}else if(c>28)throw"Invalid date";if((4===h||6===h||9===h||11===h)&&c>30)throw"Invalid date";g<12&&"PM"===v?g+=12:g>11&&"AM"===v&&(g-=12);var x=new Date(s||a.getFullYear(),null!==h?h-1:a.getMonth(),c||a.getDate(),g,f,d,m);if(null!==u){var P=t.getDateOfISOWeek(u,s||a.getFullYear(),h,c);if(!P)throw"Invalid week number or week number/date mismatch";null!==h&&P.setMonth(h-1),null!==c&&P.setDate(c),P.setHours(g),P.setMinutes(f),P.setSeconds(d),P.setMilliseconds(m),x=P}return M?new Date(x.getTime()-6e4*(w+x.getTimezoneOffset())):x}catch(t){return void console.info(t)}},this.cache=[],this._watchLocale=!1,this.$get.$inject=["$filter","$locale","$rootScope"]}return t.prototype.updateFromLocale=function(){this.datetimeFormats=this.$locale.DATETIME_FORMATS,this.monthNames=this.datetimeFormats.MONTH.concat(this.datetimeFormats.SHORTMONTH),this.dayNames=this.datetimeFormats.DAY.concat(this.datetimeFormats.SHORTDAY)},t.prototype.watchLocale=function(t){if(!r.isDefined(t))return this._watchLocale;this._watchLocale=t},t.prototype.getInteger=function(t,e,n,r){var a=t.substring(e),i=n+"_"+r,l=this.cache[i];l||(l=new RegExp("^(\\d{"+n+","+r+"})"),this.cache[i]=l);var o=l.exec(a);return o?Number(o[1]):null},t.prototype.getDateOfISOWeek=function(t,e,n,r){if(!(t<1)){var a=new Date(e,0,1+7*(t-1)),i=a.getDay(),l=a;if(i<=4?l.setDate(a.getDate()-a.getDay()+1):l.setDate(a.getDate()+8-a.getDay()),l.getFullYear()===e&&(null===n||l.getMonth()===n-1)){if(null!==r){var o=l.getDate();if(r<o&&r>o+6)return}return l}}},t}()},function(t,e,n){"use strict";var r=n(0);n.n(r);n.d(e,"a",function(){return a});var a=function(){function t(t,e,n){var a=this;this.dateFilter=t,this.$dateParser=e,this.$locale=n,this.restrict="A",this.require="ngModel",this.scope={ngModel:"="},this.link=function(t,e,n,i){var l;n.$observe("dateParser",function(t){l=t,i.$render()}),t.$watchCollection(function(){return a.$locale},function(t,e){r.equals(t,e)||i.$render()}),i.$parsers.unshift(function(t){var e=a.$dateParser(t,l);return i.$setValidity("date",!t||r.isDate(e)),e}),i.$render=function(){var t=""===i.$modelValue||null===i.$modelValue||i.$modelValue;e.val(t?a.dateFilter(i.$modelValue,l):void 0),a.scope.ngModel=i.$modelValue},i.$formatters.push(function(t){return i.$setValidity("date",!t||r.isDate(t)),r.isDate(t)?a.dateFilter(t,l):""})}}return t.factory=function(){var e=function(e,n,r){return new t(e,n,r)};return e.$inject=["dateFilter","$dateParser","$locale"],e},t}()},function(t,e,n){"use strict";Object.defineProperty(e,"__esModule",{value:!0});var r=n(0),a=(n.n(r),n(1)),i=n(2);r.module("dateParser",[]).provider("$dateParser",a.a).directive("dateParser",i.a.factory())}]);
var process = process || {env: {NODE_ENV: "development"}};
var numericApp = angular.module('numericApp', ['xe-ui-components']);

numericApp.controller("numericController", function($scope){
    console.log('here in controller');
    $scope.currency1 = 3434343;
})

//angular.module("xe-ui-components").value("RESOURCE_PATH","/PlatformSandboxApp/plugins/banner-ui-ss-2.10.5/angular-components/")

var process = process || {env: {NODE_ENV: "development"}};
numericApp.directive('currencyInput',['$timeout','$filter','readonlysvc','$compile', function($timeout, $filter,readonlysvc,$compile) {
    var withoutDecimal='<input type="number" ng-model="ngModel" class="eds-text-field" ng-show="showNumber" ng-blur="numberBlurred()" ng-change="valNgChange()" only-number/><input value="{{formatted}}" id="{{id}}" class="eds-text-field" ng-click="textFocused()" ng-focus="textFocused()" ng-hide="showNumber" only-number/>';
    var withDecimal='<input type="number" ng-model="ngModel" class="eds-text-field" ng-show="showNumber" ng-blur="numberBlurred()" ng-change="valNgChange()" /><input value="{{formatted}}" id="{{id}}" class="eds-text-field " ng-click="textFocused()" ng-focus="textFocused()" ng-hide="showNumber" />';
    var getTemplate = function(decimalLength){
        var template = '';
        decimalLength = decimalLength||0;
        if(decimalLength==0) {
            template = withoutDecimal;
        } else {
            template = withDecimal;
        }
        return template;
    };

    return {
        restrict: 'E',
        scope:{
            ngModel : "=",
            id : "@",
            integerLength:"=",
            decimalLength:"="
        },
        link: function($scope, $elm, $attrs) {
            $elm.removeAttr('id');
            $elm.html(getTemplate($attrs.decimals));

            $scope.valNgChange = function() {
                $timeout(function() {
                    if ($attrs.ngChange) $scope.$parent.$eval($attrs.ngChange);
                }, 0);
            };

            var liveRegion= $('.number-input-accessible');
            if (liveRegion.length == 0) {
                liveRegion = $("<span>", {
                    role: "status",
                    "aria-live": "assertive",
                    "aria-atomic":"true"
                })
                    .addClass("number-input-accessible screen-reader")
                    .appendTo(document.body);
            }
            $elm.find('input[type=number]').focus(function() {
                var ariaText=$.i18n.prop("numeric.currency.value");
                var editUnavailableText=$.i18n.prop("numeric.edit.unavailable");
                if ($elm.find('input').attr('readonly')) {
                    ariaText = ariaText+" "+editUnavailableText;
                }
                liveRegion.text(ariaText);
            });

            $compile($elm.contents())($scope);
            $scope.showNumber = false;
            $scope.numberBlurred = function(){
                $scope.showNumber = false;
            };

            $scope.textBlurred = function(){
                $scope.showNumber = true;
            };

            $scope.textFocused = function(){
                $scope.showNumber = true;
                $timeout(function(){
                    $elm.find('input[type=number]').focus().select();
                }, 50)
            };

            $scope.$watch('$scope.showNumber',function(){
                if($scope.showNumber){
                     $timeout(function(){
                        $elm.find('input[type=number]').focus();
                        console.log('focused');
                    }, 50)
                }
            },true);

            $scope.$watch(function() { return $elm.attr('ng-readonly') },function(value){
                if(value !== undefined){
                    readonlysvc.toggle($elm,$elm.attr('ng-readonly'));
                }
            });

            $scope.$watch('ngModel', function () {
                var formatted;
                var dotIndex;
                if($scope.ngModel) {
                    dotIndex = $scope.ngModel.toString().indexOf(".");
                    if (dotIndex !== -1) {
                        if ($attrs.integerLength && (dotIndex > parseInt($attrs.integerLength))) {
                            var splittedNumber = $scope.ngModel.toString().split(".");
                            var slicedIntegerPart = splittedNumber[0].toString().slice(0, $attrs.integerLength);
                            $scope.ngModel = parseFloat(slicedIntegerPart.concat("." + splittedNumber[1]));
                        }

                        var numberOfDecimals = $scope.ngModel.toString().length - dotIndex + 1;

                        if ($attrs.decimalLength && (numberOfDecimals > parseInt($attrs.decimalLength))) {
                            var splittedNumber = $scope.ngModel.toString().split(".");
                            var slicedDecimalPart = splittedNumber[1].toString().slice(0, $attrs.decimalLength);
                            $scope.ngModel = parseFloat(splittedNumber[0].toString().concat(".", slicedDecimalPart));
                        }
                    }
                    else {
                        $scope.ngModel = parseFloat($scope.ngModel.toString().slice(0, $attrs.integerLength));
                    }
                }
                formatted = $filter("currency")($scope.ngModel);
                if ($attrs.currency) {
                    formatted = $filter("currency")($scope.ngModel, $attrs.currency, $attrs.decimals);
                }
                $scope.formatted = formatted;
                if(formatted && $('meta[name=userLocale]').attr("content")=="es" && formatted.split('')[formatted.split('').length-1] == '\u20ac')
                {
                    const splitFormatted = formatted.split('\u20ac');
                    $scope.formatted = '$' + splitFormatted[0];
                }
            }, true);
        }
    };
}]);
var process = process || {env: {NODE_ENV: "development"}};
numericApp.directive('decimalInput',['$timeout', '$filter','readonlysvc', '$compile',function($timeout, $filter,readonlysvc,$compile) {
    var withoutDecimal='<input type="number" ng-model="ngModel" class="eds-text-field" ng-show="showNumber" ng-blur="numberBlurred()" ng-change="valNgChange()" only-number/><input value="{{formatted}}" id="{{id}}" ng-focus="textFocused()" class="eds-text-field" ng-click="textFocused()" ng-hide="showNumber" only-number/>';
    var withDecimal='<input type="number" ng-model="ngModel" class="eds-text-field" ng-show="showNumber" ng-blur="numberBlurred()" ng-change="valNgChange()" /><input value="{{formatted}}" id="{{id}}" ng-focus="textFocused()" class="eds-text-field" ng-click="textFocused()" ng-hide="showNumber" />';
    var getTemplate = function(decimalLength){
        var template = '';
        decimalLength = decimalLength||0;
        if(decimalLength==0) {
            template = withoutDecimal;
        } else {
            template = withDecimal;
        }
        return template;
    };
    return {
        restrict: 'E',
        scope:{
            ngModel : "=",
            id : "@",
            integerLength:"=",
            decimalLength:"="
        },
        link: function($scope, $elm, $attrs) {
            $elm.removeAttr('id');
            $elm.html(getTemplate($attrs.decimals));

            $scope.valNgChange = function() {
                $timeout(function() {
                    if ($attrs.ngChange) $scope.$parent.$eval($attrs.ngChange);
                }, 0);
            };

            var liveRegion= $('.number-input-accessible');
            if (liveRegion.length == 0) {
                liveRegion = $("<span>", {
                    role: "status",
                    "aria-live": "assertive",
                    "aria-atomic":"true"
                })
                    .addClass("number-input-accessible screen-reader")
                    .appendTo(document.body);
            }
            $elm.find('input[type=number]').focus(function() {
                var ariaText=$.i18n.prop("numeric.decimal.value");
                var editUnavailableText=$.i18n.prop("numeric.edit.unavailable");
                if ($elm.find('input').attr('readonly')) {
                    ariaText = ariaText+" "+editUnavailableText;
                }
                liveRegion.text(ariaText);
            });
            $compile($elm.contents())($scope);
            $scope.showNumber = false;
            $scope.numberBlurred = function(){
                $scope.showNumber = false;
            };

            $scope.textBlurred = function(){
                $scope.showNumber = true;
            };

            $scope.textFocused = function(){
                $scope.showNumber = true;
                $timeout(function () {
                    $elm.find('input[type=number]').focus().select();
                }, 50)
            };

            $scope.$watch('$scope.showNumber',function(){
                if($scope.showNumber){
                     $timeout(function(){
                        $elm.find('input[type=number]').focus();
                        console.log('focused');
                    }, 50)
                }
            },true);

            $scope.$watch(function() { return $elm.attr('ng-readonly') },function(value){
                if(value !== undefined){
                    readonlysvc.toggle($elm,$elm.attr('ng-readonly'));
                }
            });

            $scope.$watch('ngModel', function(){
                var formatted;
                var dotIndex
                if($scope.ngModel) {
                    dotIndex = $scope.ngModel.toString().indexOf(".")
                    if (dotIndex !== -1) {
                        if ($attrs.integerLength && (dotIndex > parseInt($attrs.integerLength))) {
                            var splittedNumber = $scope.ngModel.toString().split(".");
                            var slicedIntegerPart = splittedNumber[0].toString().slice(0, $attrs.integerLength);
                            $scope.ngModel = parseFloat(slicedIntegerPart.concat("." + splittedNumber[1]));
                        }

                        var numberOfDecimals = $scope.ngModel.toString().length - dotIndex + 1;

                        if ($attrs.decimalLength && (numberOfDecimals > parseInt($attrs.decimalLength))) {
                            var splittedNumber = $scope.ngModel.toString().split(".");
                            var slicedDecimalPart = splittedNumber[1].toString().slice(0, $attrs.decimalLength);
                            $scope.ngModel = parseFloat(splittedNumber[0].toString().concat(".", slicedDecimalPart));
                        }
                    }
                    else {
                        $scope.ngModel = parseFloat($scope.ngModel.toString().slice(0, $attrs.integerLength));
                    }
                }
                formatted = $filter("number")($scope.ngModel, $attrs.decimals);
                $scope.formatted = formatted;

            }, true);
        }
    };
}]);
var process = process || {env: {NODE_ENV: "development"}};
numericApp.directive('percentInput', ['$timeout', '$filter','readonlysvc','$compile', function($timeout, $filter,readonlysvc,$compile) {
    var withoutDecimal='<input type="number" ng-model="ngModel" class="eds-text-field" ng-show="showNumber" ng-blur="numberBlurred()" ng-change="valNgChange()" only-number/><input value="{{formatted}}" id="{{id}}" class="eds-text-field" ng-click="textFocused()" ng-focus="textFocused()" ng-hide="showNumber" only-number/>';
    var withDecimal='<input type="number" ng-model="ngModel" class="eds-text-field" ng-show="showNumber" ng-blur="numberBlurred()" ng-change="valNgChange()" /><input value="{{formatted}}" id="{{id}}" class="eds-text-field" ng-click="textFocused()"  ng-focus="textFocused()" ng-hide="showNumber" />';
    var getTemplate = function(decimalLength){
        var template = '';
        decimalLength = decimalLength||0;
        if(decimalLength==0) {
            template = withoutDecimal;
        } else {
            template = withDecimal;
        }
        return template;
    };
    return {
        restrict: 'E',
        scope:{
            ngModel : "=",
            id : "@",
            integerLength:"=",
            decimalLength:"="
        },
        link: function($scope, $elm, $attrs) {
            $elm.removeAttr('id');
            $elm.html(getTemplate($attrs.decimals));

            $scope.valNgChange = function() {
                $timeout(function() {
                    if ($attrs.ngChange) $scope.$parent.$eval($attrs.ngChange);
                }, 0);
            };

            var liveRegion= $('.number-input-accessible');
            if (liveRegion.length == 0) {
                liveRegion = $("<span>", {
                    role: "status",
                    "aria-live": "assertive",
                    "aria-atomic":"true"
                })
                    .addClass("number-input-accessible screen-reader")
                    .appendTo(document.body);
            }
            $elm.find('input[type=number]').focus(function() {
                var ariaText=$.i18n.prop("numeric.percent.value");
                var editUnavailableText=$.i18n.prop("numeric.edit.unavailable");
                if ($elm.find('input').attr('readonly')) {
                    ariaText = ariaText+" "+editUnavailableText;
                }
                liveRegion.text(ariaText);
            });
            $compile($elm.contents())($scope);
            $scope.showNumber = false;
            $scope.numberBlurred = function(){
                $scope.showNumber = false;
            };

            $scope.textBlurred = function(){
                $scope.showNumber = true;
            };

            $scope.textFocused = function(){
                $scope.showNumber = true;
                $timeout(function(){
                    $elm.find('input[type=number]').focus().select();
                }, 50)
            };

            $scope.$watch('$scope.showNumber',function(){
                if($scope.showNumber){
                     $timeout(function(){
                        $elm.find('input[type=number]').focus();
                        console.log('focused');
                    }, 50)
                }
            },true);

            $scope.$watch(function() { return $elm.attr('ng-readonly') },function(value){
                if(value !== undefined){
                    readonlysvc.toggle($elm,$elm.attr('ng-readonly'));
                }
            });

            $scope.$watch('ngModel', function(){
                var formatted;
                var dotIndex;
                if($scope.ngModel) {
                    dotIndex = $scope.ngModel.toString().indexOf(".");
                    if (dotIndex !== -1) {
                        if ($attrs.integerLength && (dotIndex > parseInt($attrs.integerLength))) {
                            var splittedNumber = $scope.ngModel.toString().split(".");
                            var slicedIntegerPart = splittedNumber[0].toString().slice(0, $attrs.integerLength);
                            $scope.ngModel = parseFloat(slicedIntegerPart.concat("." + splittedNumber[1]));
                        }

                        var numberOfDecimals = $scope.ngModel.toString().length - dotIndex + 1;

                        if ($attrs.decimalLength && (numberOfDecimals > parseInt($attrs.decimalLength))) {
                            var splittedNumber = $scope.ngModel.toString().split(".");
                            var slicedDecimalPart = splittedNumber[1].toString().slice(0, $attrs.decimalLength);
                            $scope.ngModel = parseFloat(splittedNumber[0].toString().concat(".", slicedDecimalPart));
                        }
                    }
                    else {
                        $scope.ngModel = parseFloat($scope.ngModel.toString().slice(0, $attrs.integerLength));
                    }
                }
                formatted = $filter("number")($scope.ngModel, $attrs.decimals);
                    if(formatted){
                        formatted = formatted + "%";
                    }
                $scope.formatted = formatted;

            }, true);
        }
    };
}]);
var process = process || {env: {NODE_ENV: "development"}};
numericApp.directive('onlyNumber', function() {
    return function(scope, element, attrs) {

        var keyCode = [8,9,37,39,48,49,50,51,52,53,54,55,56,57,96,97,98,99,100,101,102,103,104,105,109,189,110,46];
        element.bind("keydown", function(event) {
            if( event.ctrlKey || event.metaKey){
                if(event.keyCode=="65" || event.keyCode=="86" || event.keyCode=="67"){
                    return;
                }
            }   else if($.inArray(event.which,keyCode) == -1) {
                scope.$apply(function(){
                    scope.$eval(attrs.onlyNum);
                    event.preventDefault();
                });
                event.preventDefault();
            }

        })
    };
})

var process = process || {env: {NODE_ENV: "development"}};
numericApp.service('readonlysvc', function() {

    this.toggle = function(ele,value) {
        var numberInput = $(ele).find('input[type=number]');
        var textInput = $(ele).find('input[type!=number]');
        if(value === 'true'){
            numberInput.attr('readonly','readonly');
            $(numberInput).addClass('readonly');
            $(textInput).addClass('readonly');
            $(numberInput).on('click');
        }
        else{
            numberInput.removeAttr('readonly');
            $(numberInput).removeClass('readonly');
            $(textInput).removeClass('readonly');
            $(numberInput).off('click');

        }
    }
});

var process = process || {env: {NODE_ENV: "development"}};
angular.module('datePickerApp', [])
    .directive('datePicker',function(){
        return{
        restrict: "A",
        scope:{
            date:"=",
            showOn: "@",
            onSelect:"&",
            onClose:"&"
        },

        link:function($scope, $ele) {

            $ele.multiCalendarPicker({
                showOn: $scope.showOn ? $scope.showOn : 'button',
                onSelect:$scope.onSelect(),
                onClose:$scope.onClose()
            })

        }}
    });


var hideCalender=function(){

    if($('#checkId').is(":checked")){

        $('#multiCalendar1').hide()
        $('#multiCalendar2').show()
    }
    else{
        $('#multiCalendar2').hide()
        $('#multiCalendar1').show()
    }
}







var process = process || {env: {NODE_ENV: "development"}};
/********************************************************************************
  Copyright 2019 Ellucian Company L.P. and its affiliates.
********************************************************************************/
angular.module('I18n', []).
    filter('i18n', function () {
        return function (key, data) {
            var value = _.isUndefined(key) ? key : window.i18n[key];
            if(value && data) {
                for(var i=0; i < data.length; i++) {
                    var regexp = new RegExp('\\{('+i+')\\}', "g");

                    // Note how the replacement value (second argument to the "replace" function) is wrapped inside an
                    // anonymous function. Historically, this hasn't been done in i18n filters.  However, where the
                    // replacement value is a dollar value, a problem can occur where the "$1" in $16,500.00, for
                    // example, is viewed by the "replace" function as a string submatch pattern. Where the target
                    // string is "the cost is {0}", the outcome can be something like "the cost is 06,500.00".  Wrapping
                    // that value in a function gets around that problem.
                    value = value.replace(regexp, function() {
                        return data[i] !== undefined ? data[i] : ''
                    });
                }
            }
            return value;
        };
    });

var process = process || {env: {NODE_ENV: "development"}};
/*********************************************************************************
 Copyright 2018 Ellucian Company L.P. and its affiliates.
 **********************************************************************************/
(function() {

    'use strict';

    angular.module('bannerBindkeys', []).provider('hotkeys', function() {

        this.includeCheatSheet = true;

        this.templateTitle = '';

        this.template = '';

        this.cheatSheetHotkey = '';

        this.cheatSheetDescription = '';

        this.$get = ['$rootElement', '$rootScope', '$compile', '$window', '$document', function ($rootElement, $rootScope, $compile, $window, $document) {

            Mousetrap.stopCallback = function(event, element) {
                if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {
                    return false;
                }
                return (element.contentEditable && element.contentEditable == 'true');
            };

            function symbolize (combo) {
                var map = {
                    command   : '\u2318',     // ?
                    shift     : '\u21E7',     // ?
                    left      : '\u2190',     // ?
                    right     : '\u2192',     // ?
                    up        : '\u2191',     // ?
                    down      : '\u2193',     // ?
                    'return'  : '\u23CE',     // ?
                    backspace : '\u232B'      // ?
                };
                combo = combo.split('+');

                for (var i = 0; i < combo.length; i++) {
                    // try to resolve command / ctrl based on OS:
                    if (combo[i] === 'mod') {
                        if ($window.navigator && $window.navigator.platform.indexOf('Mac') >=0 ) {
                            combo[i] = 'command';
                        } else {
                            combo[i] = 'ctrl';
                        }
                    }

                    combo[i] = map[combo[i]] || combo[i];
                }

                return combo.join(' + ');
            }

            /**
             * Hotkey object used internally for consistency
             *
             * @param {array}    combo       The keycombo. it's an array to support multiple combos
             * @param {String}   description Description for the keycombo
             * @param {Function} callback    function to execute when keycombo pressed
             * @param {string}   action      the type of event to listen for (for mousetrap)
             * @param {array}    allowIn     an array of tag names to allow this combo in ('INPUT', 'SELECT', and/or 'TEXTAREA')
             * @param {Boolean}  persistent  Whether the hotkey persists navigation events
             */
            function Hotkey (combo, description, callback, action, allowIn, persistent) {
                this.combo = combo instanceof Array ? combo : [combo];
                this.description = description;
                this.callback = callback;
                this.action = action;
                this.allowIn = allowIn;
                this.persistent = persistent;
            }

            /**
             * A new scope used internally for the cheatsheet
             * @type {$rootScope.Scope}
             */
            var scope = $rootScope.$new();

            /**
             * Holds an array of Hotkey objects currently bound
             * @type {Array}
             */
            scope.hotkeys = [];

            /**
             * Contains the state of the help's visibility
             * @type {Boolean}
             */
            scope.helpVisible = false;

            /**
             * Holds the title string for the help menu
             * @type {String}
             */
            scope.title = this.templateTitle;

            /**
             * Expose toggleCheatSheet to hotkeys scope so we can call it using
             * ng-click from the template
             * @type {function}
             */
            scope.toggleCheatSheet = toggleCheatSheet;


            /**
             * Holds references to the different scopes that have bound hotkeys
             * attached.  This is useful to catch when the scopes are `$destroy`d and
             * then automatically unbind the hotkey.
             *
             * @type {Array}
             */
            var boundScopes = [];


            $rootScope.$on('$routeChangeSuccess', function (event, route) {
                purgeHotkeys();

                if (route && route.hotkeys) {
                    angular.forEach(route.hotkeys, function (hotkey) {
                        var callback = hotkey[2];
                        if (typeof(callback) === 'string' || callback instanceof String) {
                            hotkey[2] = [callback, route];
                        }
                        hotkey[5] = false;
                        _add.apply(this, hotkey);
                    });
                }
            });


            // Auto-create a help menu:
            if (this.includeCheatSheet) {
                var document = $document[0];
                var element = $rootElement[0];
                var helpMenu = angular.element(this.template);
                if(this.cheatSheetHotkey !== ""){
                    _add(this.cheatSheetHotkey, this.cheatSheetDescription, toggleCheatSheet);
                }
                ;
                // If $rootElement is document or documentElement, then body must be used
                if (element === document || element === document.documentElement) {
                    element = document.body;
                }

                angular.element(element).append($compile(helpMenu)(scope));
            }


            function purgeHotkeys() {
                var i = scope.hotkeys.length;
                while (i--) {
                    var hotkey = scope.hotkeys[i];
                    if (hotkey && !hotkey.persistent) {
                        _del(hotkey);
                    }
                }
            }

            var previousEsc = false;


            function toggleCheatSheet() {
                scope.helpVisible = !scope.helpVisible;
                if (scope.helpVisible) {
                    previousEsc = _get('esc');
                    _del('esc');
                    _add('esc', previousEsc.description, toggleCheatSheet);
                } else {
                    _del('esc');
                    // restore the previously bound ESC key
                    if (previousEsc !== false) {
                        _add(previousEsc);
                    }
                }
            }

            /**
             * Creates a new Hotkey and creates the Mousetrap binding
             *
             * @param {string}   combo       mousetrap key binding
             * @param {string}   description description for the help menu
             * @param {Function} callback    method to call when key is pressed
             * @param {string}   action      the type of event to listen for (for mousetrap)
             * @param {array}    allowIn     an array of tag names to allow this combo in ('INPUT', 'SELECT', and/or 'TEXTAREA')
             * @param {boolean}  persistent  if true, the binding is preserved upon route changes
             */
            function _add (combo, description, callback, action, allowIn, persistent) {

                var _callback;

                var preventIn = ['INPUT', 'SELECT', 'TEXTAREA'];

                var objType = Object.prototype.toString.call(combo);

                if (objType === '[object Object]') {
                    description = combo.description;
                    callback    = combo.callback;
                    action      = combo.action;
                    persistent  = combo.persistent;
                    allowIn     = combo.allowIn;
                    combo       = combo.combo;
                }

                if (description instanceof Function) {
                    action = callback;
                    callback = description;
                    description = '$$undefined$$';
                } else if (angular.isUndefined(description)) {
                    description = '$$undefined$$';
                }

                if (persistent === undefined) {
                    persistent = true;
                }

                if (typeof callback === 'function') {

                    _callback = callback;

                    if (!(allowIn instanceof Array)) {
                        allowIn = [];
                    }

                    var index;
                    for (var i=0; i < allowIn.length; i++) {
                        allowIn[i] = allowIn[i].toUpperCase();
                        index = preventIn.indexOf(allowIn[i]);
                        if (index !== -1) {
                            preventIn.splice(index, 1);
                        }
                    }

                    callback = function(event) {
                        var shouldExecute = true;
                        var target = event.target || event.srcElement; // srcElement is IE only
                        var nodeName = target.nodeName.toUpperCase();

                        // check if the input has a mousetrap class, and skip checking preventIn if so
                        if ((' ' + target.className + ' ').indexOf(' mousetrap ') > -1) {
                            shouldExecute = true;
                        } else {
                            // don't execute callback if the event was fired from inside an element listed in preventIn
                            for (var i=0; i<preventIn.length; i++) {
                                if (preventIn[i] === nodeName) {
                                    shouldExecute = false;
                                    break;
                                }
                            }
                        }

                        if (shouldExecute) {
                            wrapApply(_callback.apply(this, arguments));
                        }
                    };
                }

                if (typeof(action) === 'string') {
                    Mousetrap.bind(combo, wrapApply(callback), action);
                } else {
                    Mousetrap.bind(combo, wrapApply(callback));
                }

                var hotkey = new Hotkey(combo, description, callback, action, allowIn, persistent);
                scope.hotkeys.push(hotkey);
                return hotkey;
            }

            function _del (hotkey) {
                var combo = (hotkey instanceof Hotkey) ? hotkey.combo : hotkey;

                Mousetrap.unbind(combo);

                if (angular.isArray(combo)) {
                    var retStatus = true;
                    var i = combo.length;
                    while (i--) {
                        retStatus = _del(combo[i]) && retStatus;
                    }
                    return retStatus;
                } else {
                    var index = scope.hotkeys.indexOf(_get(combo));

                    if (index > -1) {
                        // if the combo has other combos bound, don't unbind the whole thing, just the one combo:
                        if (scope.hotkeys[index].combo.length > 1) {
                            scope.hotkeys[index].combo.splice(scope.hotkeys[index].combo.indexOf(combo), 1);
                        } else {
                            scope.hotkeys.splice(index, 1);
                        }
                        return true;
                    }
                }

                return false;

            }

            /**
             * Get a Hotkey object by key binding
             *
             * @param  {[string]} combo  the key the Hotkey is bound to
             * @return {Hotkey}          The Hotkey object
             */
            function _get (combo) {

                var hotkey;

                for (var i = 0; i < scope.hotkeys.length; i++) {
                    hotkey = scope.hotkeys[i];

                    if (hotkey.combo.indexOf(combo) > -1) {
                        return hotkey;
                    }
                }

                return false;
            }

            /**
             * Binds the hotkey to a particular scope.  Useful if the scope is
             * destroyed, we can automatically destroy the hotkey binding.
             *
             * @param  {Object} scope The scope to bind to
             */
            function bindTo (scope) {
                // Only initialize once to allow multiple calls for same scope.
                if (!(scope.$id in boundScopes)) {

                    // Add the scope to the list of bound scopes
                    boundScopes[scope.$id] = [];

                    scope.$on('$destroy', function () {
                        var i = boundScopes[scope.$id].length;
                        while (i--) {
                            _del(boundScopes[scope.$id][i]);
                            delete boundScopes[scope.$id][i];
                        }
                    });
                }
                // return an object with an add function so we can keep track of the
                // hotkeys and their scope that we added via this chaining method
                return {
                    add: function (args) {
                        var hotkey;

                        if (arguments.length > 1) {
                            hotkey = _add.apply(this, arguments);
                        } else {
                            hotkey = _add(args);
                        }

                        boundScopes[scope.$id].push(hotkey);
                        return this;
                    }
                };
            }

            /**
             * All callbacks sent to Mousetrap are wrapped using this function
             * so that we can force a $scope.$apply()
             *
             * @param  {Function} callback [description]
             * @return {[type]}            [description]
             */
            function wrapApply (callback) {
                // return mousetrap a function to call
                return function (event, combo) {

                    if (callback instanceof Array) {
                        var funcString = callback[0];
                        var route = callback[1];
                        callback = function (event) {
                            route.scope.$eval(funcString);
                        };
                    }

                    $rootScope.$apply(function() {
                        callback(event, _get(combo));
                    });
                };
            }


            var publicApi = {
                add                   : _add,
                del                   : _del,
                get                   : _get,
                bindTo                : bindTo,
                template              : this.template,
                toggleCheatSheet      : toggleCheatSheet,
                includeCheatSheet     : this.includeCheatSheet,
                cheatSheetHotkey      : this.cheatSheetHotkey,
                cheatSheetDescription : this.cheatSheetDescription,
                purgeHotkeys          : purgeHotkeys,
                templateTitle         : this.templateTitle
            };

            return publicApi;

        }];
    })

        .directive('hotkey', ['hotkeys', function (hotkeys) {
            return {
                restrict: 'A',
                link: function (scope, el, attrs) {
                    var key, allowIn;

                    angular.forEach(scope.$eval(attrs.hotkey), function (func, hotkey) {
                        // split and trim the hotkeys string into array
                        allowIn = typeof attrs.hotkeyAllowIn === "string" ? attrs.hotkeyAllowIn.split(/[\s,]+/) : [];

                        key = hotkey;

                        hotkeys.add({
                            combo: hotkey,
                            description: attrs.hotkeyDescription,
                            callback: func,
                            action: attrs.hotkeyAction,
                            allowIn: allowIn
                        });
                    });

                    // remove the hotkey if the directive is destroyed:
                    el.bind('$destroy', function() {
                        hotkeys.del(key);
                    });
                }
            };
        }])

        .run(['hotkeys', function(hotkeys) {
        }]);

})();

/*global define:false */
(function(window, document, undefined) {

    /**
     * mapping of special keycodes to their corresponding keys
     *
     * everything in this dictionary cannot use keypress events
     * so it has to be here to map to the correct keycodes for
     * keyup/keydown events
     *
     * @type {Object}
     */
    var _MAP = {
            8: 'backspace',
            9: 'tab',
            13: 'enter',
            16: 'shift',
            17: 'ctrl',
            18: 'alt',
            20: 'capslock',
            27: 'esc',
            32: 'space',
            33: 'pageup',
            34: 'pagedown',
            35: 'end',
            36: 'home',
            37: 'left',
            38: 'up',
            39: 'right',
            40: 'down',
            45: 'ins',
            46: 'del',
            91: 'meta',
            93: 'meta',
            224: 'meta'
        },

        /**
         * mapping for special characters so they can support
         *
         * this dictionary is only used incase you want to bind a
         * keyup or keydown event to one of these keys
         *
         * @type {Object}
         */
        _KEYCODE_MAP = {
            106: '*',
            107: '+',
            109: '-',
            110: '.',
            111 : '/',
            186: ';',
            187: '=',
            188: ',',
            189: '-',
            190: '.',
            191: '/',
            192: '`',
            219: '[',
            220: '\\',
            221: ']',
            222: '\''
        },

        /**
         * this is a mapping of keys that require shift on a US keypad
         * back to the non shift equivelents
         *
         * this is so you can use keyup events with these keys
         *
         * note that this will only work reliably on US keyboards
         *
         * @type {Object}
         */
        _SHIFT_MAP = {
            '~': '`',
            '!': '1',
            '@': '2',
            '#': '3',
            '$': '4',
            '%': '5',
            '^': '6',
            '&': '7',
            '*': '8',
            '(': '9',
            ')': '0',
            '_': '-',
            '+': '=',
            ':': ';',
            '\"': '\'',
            '<': ',',
            '>': '.',
            '?': '/',
            '|': '\\'
        },

        /**
         * this is a list of special strings you can use to map
         * to modifier keys when you specify your keyboard shortcuts
         *
         * @type {Object}
         */
        _SPECIAL_ALIASES = {
            'option': 'alt',
            'command': 'meta',
            'return': 'enter',
            'escape': 'esc',
            'mod': /Mac|iPod|iPhone|iPad/.test(navigator.platform) ? 'meta' : 'ctrl'
        },

        /**
         * variable to store the flipped version of _MAP from above
         * needed to check if we should use keypress or not when no action
         * is specified
         *
         * @type {Object|undefined}
         */
        _REVERSE_MAP,

        /**
         * a list of all the callbacks setup via Mousetrap.bind()
         *
         * @type {Object}
         */
        _callbacks = {},

        /**
         * direct map of string combinations to callbacks used for trigger()
         *
         * @type {Object}
         */
        _directMap = {},

        /**
         * keeps track of what level each sequence is at since multiple
         * sequences can start out with the same sequence
         *
         * @type {Object}
         */
        _sequenceLevels = {},

        /**
         * variable to store the setTimeout call
         *
         * @type {null|number}
         */
        _resetTimer,

        /**
         * temporary state where we will ignore the next keyup
         *
         * @type {boolean|string}
         */
        _ignoreNextKeyup = false,

        /**
         * temporary state where we will ignore the next keypress
         *
         * @type {boolean}
         */
        _ignoreNextKeypress = false,

        /**
         * are we currently inside of a sequence?
         * type of action ("keyup" or "keydown" or "keypress") or false
         *
         * @type {boolean|string}
         */
        _nextExpectedAction = false;

    /**
     * loop through the f keys, f1 to f19 and add them to the map
     * programatically
     */
    for (var i = 1; i < 20; ++i) {
        _MAP[111 + i] = 'f' + i;
    }

    /**
     * loop through to map numbers on the numeric keypad
     */
    for (i = 0; i <= 9; ++i) {
        _MAP[i + 96] = i;
    }

    /**
     * cross browser add event method
     *
     * @param {Element|HTMLDocument} object
     * @param {string} type
     * @param {Function} callback
     * @returns void
     */
    function _addEvent(object, type, callback) {
        if (object.addEventListener) {
            object.addEventListener(type, callback, false);
            return;
        }

        object.attachEvent('on' + type, callback);
    }

    /**
     * takes the event and returns the key character
     *
     * @param {Event} e
     * @return {string}
     */
    function _characterFromEvent(e) {

        // for keypress events we should return the character as is
        if (e.type == 'keypress') {
            var character = String.fromCharCode(e.which);
            if (!e.shiftKey) {
                character = character.toLowerCase();
            }

            return character;
        }

        if (_MAP[e.which]) {
            return _MAP[e.which];
        }

        if (_KEYCODE_MAP[e.which]) {
            return _KEYCODE_MAP[e.which];
        }

        return String.fromCharCode(e.which).toLowerCase();
    }

    /**
     * checks if two arrays are equal
     *
     * @param {Array} modifiers1
     * @param {Array} modifiers2
     * @returns {boolean}
     */
    function _modifiersMatch(modifiers1, modifiers2) {
        return modifiers1.sort().join(',') === modifiers2.sort().join(',');
    }

    /**
     * resets all sequence counters except for the ones passed in
     *
     * @param {Object} doNotReset
     * @returns void
     */
    function _resetSequences(doNotReset) {
        doNotReset = doNotReset || {};

        var activeSequences = false,
            key;

        for (key in _sequenceLevels) {
            if (doNotReset[key]) {
                activeSequences = true;
                continue;
            }
            _sequenceLevels[key] = 0;
        }

        if (!activeSequences) {
            _nextExpectedAction = false;
        }
    }

    /**
     * finds all callbacks that match based on the keycode, modifiers,
     * and action
     *
     * @param {string} character
     * @param {Array} modifiers
     * @param {Event|Object} e
     * @param {string=} sequenceName - name of the sequence we are looking for
     * @param {string=} combination
     * @param {number=} level
     * @returns {Array}
     */
    function _getMatches(character, modifiers, e, sequenceName, combination, level) {
        var i,
            callback,
            matches = [],
            action = e.type;

        // if there are no events related to this keycode
        if (!_callbacks[character]) {
            return [];
        }

        // if a modifier key is coming up on its own we should allow it
        if (action == 'keyup' && _isModifier(character)) {
            modifiers = [character];
        }

        // loop through all callbacks for the key that was pressed
        // and see if any of them match
        for (i = 0; i < _callbacks[character].length; ++i) {
            callback = _callbacks[character][i];

            // if a sequence name is not specified, but this is a sequence at
            // the wrong level then move onto the next match
            if (!sequenceName && callback.seq && _sequenceLevels[callback.seq] != callback.level) {
                continue;
            }

            // if the action we are looking for doesn't match the action we got
            // then we should keep going
            if (action != callback.action) {
                continue;
            }

            if ((action == 'keypress' && !e.metaKey && !e.ctrlKey) || _modifiersMatch(modifiers, callback.modifiers)) {

                var deleteCombo = !sequenceName && callback.combo == combination;
                var deleteSequence = sequenceName && callback.seq == sequenceName && callback.level == level;
                if (deleteCombo || deleteSequence) {
                    _callbacks[character].splice(i, 1);
                }

                matches.push(callback);
            }
        }

        return matches;
    }

    /**
     * takes a key event and figures out what the modifiers are
     *
     * @param {Event} e
     * @returns {Array}
     */
    function _eventModifiers(e) {
        var modifiers = [];

        if (e.shiftKey) {
            modifiers.push('shift');
        }

        if (e.altKey) {
            modifiers.push('alt');
        }

        if (e.ctrlKey) {
            modifiers.push('ctrl');
        }

        if (e.metaKey) {
            modifiers.push('meta');
        }

        return modifiers;
    }

    /**
     * prevents default for this event
     *
     * @param {Event} e
     * @returns void
     */
    function _preventDefault(e) {
        if (e.preventDefault) {
            e.preventDefault();
            return;
        }

        e.returnValue = false;
    }

    /**
     * stops propogation for this event
     *
     * @param {Event} e
     * @returns void
     */
    function _stopPropagation(e) {
        if (e.stopPropagation) {
            e.stopPropagation();
            return;
        }

        e.cancelBubble = true;
    }

    /**
     * actually calls the callback function
     *
     * if your callback function returns false this will use the jquery
     * convention - prevent default and stop propogation on the event
     *
     * @param {Function} callback
     * @param {Event} e
     * @returns void
     */
    function _fireCallback(callback, e, combo, sequence) {

        // if this event should not happen stop here
        if (Mousetrap.stopCallback(e, e.target || e.srcElement, combo, sequence)) {
            return;
        }

        if (callback(e, combo) === false) {
            _preventDefault(e);
            _stopPropagation(e);
        }
    }

    /**
     * handles a character key event
     *
     * @param {string} character
     * @param {Array} modifiers
     * @param {Event} e
     * @returns void
     */
    function _handleKey(character, modifiers, e) {
        var callbacks = _getMatches(character, modifiers, e),
            i,
            doNotReset = {},
            maxLevel = 0,
            processedSequenceCallback = false;

        // Calculate the maxLevel for sequences so we can only execute the longest callback sequence
        for (i = 0; i < callbacks.length; ++i) {
            if (callbacks[i].seq) {
                maxLevel = Math.max(maxLevel, callbacks[i].level);
            }
        }

        // loop through matching callbacks for this key event
        for (i = 0; i < callbacks.length; ++i) {

            if (callbacks[i].seq) {

                if (callbacks[i].level != maxLevel) {
                    continue;
                }

                processedSequenceCallback = true;

                // keep a list of which sequences were matches for later
                doNotReset[callbacks[i].seq] = 1;
                _fireCallback(callbacks[i].callback, e, callbacks[i].combo, callbacks[i].seq);
                continue;
            }

            // if there were no sequence matches but we are still here
            // that means this is a regular match so we should fire that
            if (!processedSequenceCallback) {
                _fireCallback(callbacks[i].callback, e, callbacks[i].combo);
            }
        }

        var ignoreThisKeypress = e.type == 'keypress' && _ignoreNextKeypress;
        if (e.type == _nextExpectedAction && !_isModifier(character) && !ignoreThisKeypress) {
            _resetSequences(doNotReset);
        }

        _ignoreNextKeypress = processedSequenceCallback && e.type == 'keydown';
    }

    /**
     * handles a keydown event
     *
     * @param {Event} e
     * @returns void
     */
    function _handleKeyEvent(e) {

        // normalize e.which for key events
        // @see http://stackoverflow.com/questions/4285627/javascript-keycode-vs-charcode-utter-confusion
        if (typeof e.which !== 'number') {
            e.which = e.keyCode;
        }

        var character = _characterFromEvent(e);

        // no character found then stop
        if (!character) {
            return;
        }

        // need to use === for the character check because the character can be 0
        if (e.type == 'keyup' && _ignoreNextKeyup === character) {
            _ignoreNextKeyup = false;
            return;
        }

        Mousetrap.handleKey(character, _eventModifiers(e), e);
    }

    /**
     * determines if the keycode specified is a modifier key or not
     *
     * @param {string} key
     * @returns {boolean}
     */
    function _isModifier(key) {
        return key == 'shift' || key == 'ctrl' || key == 'alt' || key == 'meta';
    }

    /**
     * called to set a 1 second timeout on the specified sequence
     *
     * this is so after each key press in the sequence you have 1 second
     * to press the next key before you have to start over
     *
     * @returns void
     */
    function _resetSequenceTimer() {
        clearTimeout(_resetTimer);
        _resetTimer = setTimeout(_resetSequences, 1000);
    }

    /**
     * reverses the map lookup so that we can look for specific keys
     * to see what can and can't use keypress
     *
     * @return {Object}
     */
    function _getReverseMap() {
        if (!_REVERSE_MAP) {
            _REVERSE_MAP = {};
            for (var key in _MAP) {

                if (key > 95 && key < 112) {
                    continue;
                }

                if (_MAP.hasOwnProperty(key)) {
                    _REVERSE_MAP[_MAP[key]] = key;
                }
            }
        }
        return _REVERSE_MAP;
    }

    /**
     * picks the best action based on the key combination
     *
     * @param {string} key - character for key
     * @param {Array} modifiers
     * @param {string=} action passed in
     */
    function _pickBestAction(key, modifiers, action) {

        if (!action) {
            action = _getReverseMap()[key] ? 'keydown' : 'keypress';
        }

        // modifier keys don't work as expected with keypress,
        // switch to keydown
        if (action == 'keypress' && modifiers.length) {
            action = 'keydown';
        }

        return action;
    }

    /**
     * binds a key sequence to an event
     *
     * @param {string} combo - combo specified in bind call
     * @param {Array} keys
     * @param {Function} callback
     * @param {string=} action
     * @returns void
     */
    function _bindSequence(combo, keys, callback, action) {

        _sequenceLevels[combo] = 0;

        /**
         * callback to increase the sequence level for this sequence and reset
         * all other sequences that were active
         *
         * @param {string} nextAction
         * @returns {Function}
         */
        function _increaseSequence(nextAction) {
            return function() {
                _nextExpectedAction = nextAction;
                ++_sequenceLevels[combo];
                _resetSequenceTimer();
            };
        }

        /**
         * wraps the specified callback inside of another function in order
         * to reset all sequence counters as soon as this sequence is done
         *
         * @param {Event} e
         * @returns void
         */
        function _callbackAndReset(e) {
            _fireCallback(callback, e, combo);

            if (action !== 'keyup') {
                _ignoreNextKeyup = _characterFromEvent(e);
            }

            setTimeout(_resetSequences, 10);
        }

        for (var i = 0; i < keys.length; ++i) {
            var isFinal = i + 1 === keys.length;
            var wrappedCallback = isFinal ? _callbackAndReset : _increaseSequence(action || _getKeyInfo(keys[i + 1]).action);
            _bindSingle(keys[i], wrappedCallback, action, combo, i);
        }
    }

    /**
     * Converts from a string key combination to an array
     *
     * @param  {string} combination like "command+shift+l"
     * @return {Array}
     */
    function _keysFromString(combination) {
        if (combination === '+') {
            return ['+'];
        }

        return combination.split('+');
    }

    /**
     * Gets info for a specific key combination
     *
     * @param  {string} combination key combination ("command+s" or "a" or "*")
     * @param  {string=} action
     * @returns {Object}
     */
    function _getKeyInfo(combination, action) {
        var keys,
            key,
            i,
            modifiers = [];

        // take the keys from this pattern and figure out what the actual
        // pattern is all about
        keys = _keysFromString(combination);

        for (i = 0; i < keys.length; ++i) {
            key = keys[i];

            // normalize key names
            if (_SPECIAL_ALIASES[key]) {
                key = _SPECIAL_ALIASES[key];
            }

            if (action && action != 'keypress' && _SHIFT_MAP[key]) {
                key = _SHIFT_MAP[key];
                modifiers.push('shift');
            }

            if (_isModifier(key)) {
                modifiers.push(key);
            }
        }

        action = _pickBestAction(key, modifiers, action);

        return {
            key: key,
            modifiers: modifiers,
            action: action
        };
    }

    /**
     * binds a single keyboard combination
     *
     * @param {string} combination
     * @param {Function} callback
     * @param {string=} action
     * @param {string=} sequenceName - name of sequence if part of sequence
     * @param {number=} level - what part of the sequence the command is
     * @returns void
     */
    function _bindSingle(combination, callback, action, sequenceName, level) {

        _directMap[combination + ':' + action] = callback;

        combination = combination.replace(/\s+/g, ' ');

        var sequence = combination.split(' '),
            info;

        if (sequence.length > 1) {
            _bindSequence(combination, sequence, callback, action);
            return;
        }

        info = _getKeyInfo(combination, action);

        _callbacks[info.key] = _callbacks[info.key] || [];

        // remove an existing match if there is one
        _getMatches(info.key, info.modifiers, {type: info.action}, sequenceName, combination, level);

        _callbacks[info.key][sequenceName ? 'unshift' : 'push']({
            callback: callback,
            modifiers: info.modifiers,
            action: info.action,
            seq: sequenceName,
            level: level,
            combo: combination
        });
    }

    /**
     * binds multiple combinations to the same callback
     *
     * @param {Array} combinations
     * @param {Function} callback
     * @param {string|undefined} action
     * @returns void
     */
    function _bindMultiple(combinations, callback, action) {
        for (var i = 0; i < combinations.length; ++i) {
            _bindSingle(combinations[i], callback, action);
        }
    }

    // start!
    _addEvent(document, 'keypress', _handleKeyEvent);
    _addEvent(document, 'keydown', _handleKeyEvent);
    _addEvent(document, 'keyup', _handleKeyEvent);

    var Mousetrap = {

        /**
         * binds an event to mousetrap
         *
         * can be a single key, a combination of keys separated with +,
         * an array of keys, or a sequence of keys separated by spaces
         *
         * be sure to list the modifier keys first to make sure that the
         * correct key ends up getting bound (the last key in the pattern)
         *
         * @param {string|Array} keys
         * @param {Function} callback
         * @param {string=} action - 'keypress', 'keydown', or 'keyup'
         * @returns void
         */
        bind: function(keys, callback, action) {
            keys = keys instanceof Array ? keys : [keys];
            _bindMultiple(keys, callback, action);
            return this;
        },

        /**
         * unbinds an event to mousetrap
         *
         * the unbinding sets the callback function of the specified key combo
         * to an empty function and deletes the corresponding key in the
         * _directMap dict.
         *
         * TODO: actually remove this from the _callbacks dictionary instead
         * of binding an empty function
         *
         * the keycombo+action has to be exactly the same as
         * it was defined in the bind method
         *
         * @param {string|Array} keys
         * @param {string} action
         * @returns void
         */
        unbind: function(keys, action) {
            return Mousetrap.bind(keys, function() {}, action);
        },

        /**
         * triggers an event that has already been bound
         *
         * @param {string} keys
         * @param {string=} action
         * @returns void
         */
        trigger: function(keys, action) {
            if (_directMap[keys + ':' + action]) {
                _directMap[keys + ':' + action]({}, keys);
            }
            return this;
        },

        /**
         * resets the library back to its initial state.  this is useful
         * if you want to clear out the current keyboard shortcuts and bind
         * new ones - for example if you switch to another page
         *
         * @returns void
         */
        reset: function() {
            _callbacks = {};
            _directMap = {};
            return this;
        },

        /**
         * should we stop this event before firing off callbacks
         *
         * @param {Event} e
         * @param {Element} element
         * @return {boolean}
         */
        stopCallback: function(e, element) {

            // if the element has the class "mousetrap" then no need to stop
            if ((' ' + element.className + ' ').indexOf(' mousetrap ') > -1) {
                return false;
            }

            // stop for input, select, and textarea
            return element.tagName == 'INPUT' || element.tagName == 'SELECT' || element.tagName == 'TEXTAREA' || element.isContentEditable;
        },

        /**
         * exposes _handleKey publicly so it can be overwritten by extensions
         */
        handleKey: _handleKey
    };

    // expose mousetrap to the global object
    window.Mousetrap = Mousetrap;

    // expose mousetrap as an AMD module
    if (typeof define === 'function' && define.amd) {
        define(Mousetrap);
    }
}) (window, document);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2018-2024 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

(function () {
    'use strict';
    var _listOfBannerShortcuts = [];
    angular.module('keyboardshortcut', ['bannerBindkeys', 'xe-ui-components'])
    //service
        .service('keyshortcut', ['hotkeys', function (hotkeys) {
            this.shortcutObj = function (combination, description, callback, bindingScope) {
                let shortcut = {};
                if (combination.indexOf('+') >= 0) {
                    let addSplCombination = this.addingSpecial(combination);
                    combination = addSplCombination.split('+');
                } else {
                    let specialKeys = this.symbolize(combination);
                    let newArr = this.createArray(specialKeys);
                    combination = newArr;
                }
                shortcut.combo = combination;
                shortcut.description = description;
                shortcut.callback = callback;
                shortcut.scopeToBind = bindingScope;
                return shortcut;
            };

            this.createArray = function (combo) {
                let arr = [];
                arr.push(combo);
                return arr;
            };

            this.map = {
                command: '\u2318',     // ?
                left: '\u2190',     // ?
                right: '\u2192',     // ?
                up: '\u2191',     // ?
                down: '\u2193',     // ?
                'return': '\u23CE',
                backspace: '\u232B'      // ?
            };

            this.symbolize = function (combo) {
                if (combo.split('+') >= 0) {
                    for (let i = 0; i < combo.length; i++) {
                        combo[i] = this.map[combo[i]] || combo[i];
                    }
                    return combo.join(' + ');
                } else {
                    combo = this.map[combo] || combo;
                    return combo;
                }
            };

            this.addingSpecial = function (combo) {
                combo = combo.split('+');
                for (let i = 0; i < combo.length; i++) {
                    combo[i] = this.map[combo[i]] || combo[i];
                }
                return combo.join(' + ');
            };

            this.addBannerShortcut = function (sectionHeading, shortcutList) {
                let bannerObj = {};
                bannerObj.sectionHeading = sectionHeading;
                bannerObj.shortcutList = shortcutList;
                //combining the shortcuts if the same sectionHeading is been used by App Team
                let sectionHeadList = this.getBannerShortcutList().map(function (listOfBannerShortcut, index, array) {
                    return listOfBannerShortcut.sectionHeading;
                });
                let index = sectionHeadList.indexOf(sectionHeading);
                if (index < 0) {
                    _listOfBannerShortcuts.push(bannerObj);
                } else {
                    _listOfBannerShortcuts[index].shortcutList = _listOfBannerShortcuts[index].shortcutList.concat(shortcutList);
                }

            };

            this.addSectionShortcuts = function (sectionHeading, shortcutList) {
                for (let i = 0; i < shortcutList.length - 1; i++) {
                    this.addToList(shortcutList[i].combo.toString(), shortcutList[i].description, shortcutList[i].callback, shortcutList[i].scopeToBind);
                }
                this.addBannerShortcut(sectionHeading, shortcutList);
            };

            this.getBannerShortcutList = function () {
                return _listOfBannerShortcuts;
            };

            this.addToHotkeys = function (combo, description, callback, passingScope) {
                this.addToList(combo, description, callback, passingScope);
            };

            this.isMac = function () {
                var isMac = false;
                if (window.navigator.platform.indexOf('Mac') >= 0 || window.navigator.platform.match(/iPhone|iPod|iPad/)) {
                    isMac = true;
                }
                return isMac;
            };

            this.addToList = function (combo, description, callback, scopeToBind) {
                if (callback) {
                    if (!scopeToBind) {
                        hotkeys.add({
                            combo: combo,
                            description: description,
                            callback: callback
                        });
                    } else {
                        hotkeys.bindTo(scopeToBind).add({
                            combo: combo,
                            description: description,
                            callback: callback
                        })
                    }
                } else {
                    hotkeys.add({
                        combo: combo,
                        description: description
                    });
                }
            };
        }])
        .controller('shortcutModal', ['$scope', 'keyshortcut', '$http', '$document', '$timeout', function ($scope, keyshortcut, $http, $document, $timeout) {

            $document.bind('keydown', function (event) {
                if (event.ctrlKey && event.shiftKey && event.keyCode === 191) {
                    $scope.toggleshortcut();
                    $scope.$apply();
                    event.preventDefault();
                    event.stopPropagation();
                    return false;
                }
            });

            // This is Aria Span's used to hold values to be read with JAWS
            var regionSpan1 = angular.element('<span></span>');
            regionSpan1.attr('role', 'status');
            regionSpan1.attr('aria-live', 'assertive');
            regionSpan1.attr('class', 'keyboard-hidden-screen-reader');
            angular.element(document.body).append(regionSpan1);

            var regionSpan2 = angular.element('<span></span>');
            regionSpan2.attr('role', 'status');
            regionSpan2.attr('aria-live', 'assertive');
            regionSpan2.attr('class', 'keyboard-screen-reader-opens');
            angular.element(document.body).append(regionSpan2);


            $scope.backendCalled = false;

            $scope.showDescription = function (event) {
                if (event.type === "click" || (event.type = "keydown" && event.keyCode === 13)) {
                    let displayBlock = angular.element(event.target).closest('div');
                    let descBlock = angular.element(displayBlock).find('div.banner-shortcut').attr('id');
                    $scope[descBlock] = !$scope[descBlock];
                    $timeout(function () {
                        $scope.ariaExpandCollpaseContent(event);
                        event.preventDefault();
                        return false;
                    }, 10);
                } else if (event.shiftKey && event.keyCode === 9) {
                    let prevHeader = angular.element(event.target).closest('div').prev();
                    prevHeader = angular.element(prevHeader).find('span.content-heading-shortcut').text();
                    if (prevHeader) {
                        let expandedClass = angular.element(event.target).closest('div').prev().hasClass('shortcut-container-expanded');
                        if (expandedClass) {
                            angular.element(".keyboard-screen-reader-opens").text(prevHeader + " " + $.i18n.prop("platform.shortcut.aria.expanded"));
                            prevHeader = prevHeader + ". " + $.i18n.prop("platform.shortcut.aria.instructnavigate");
                            angular.element(".keyboard-hidden-screen-reader").text(prevHeader);
                        } else {
                            angular.element(".keyboard-screen-reader-opens").text(prevHeader + " " + $.i18n.prop("platform.shortcut.aria.collapsed"));
                            prevHeader = prevHeader + " " + $.i18n.prop("platform.shortcut.aria.collapsed");
                            angular.element(".keyboard-hidden-screen-reader").text(prevHeader);
                        }
                    }
                    return true;
                } else if (event.keyCode === 9) {
                    let nextHeader = angular.element(event.target).closest('div').next();
                    nextHeader = angular.element(nextHeader).find('span.content-heading-shortcut').text();
                    if (nextHeader) {
                        let expandedClass = angular.element(event.target).closest('div').next().hasClass('shortcut-container-expanded');
                        if (expandedClass) {
                            angular.element(".keyboard-screen-reader-opens").text(nextHeader + " " + $.i18n.prop("platform.shortcut.aria.expanded"));
                            nextHeader = nextHeader + ". " + $.i18n.prop("platform.shortcut.aria.instructnavigate");
                            angular.element(".keyboard-hidden-screen-reader").text(nextHeader);
                        } else {
                            angular.element(".keyboard-screen-reader-opens").text(nextHeader + " " + $.i18n.prop("platform.shortcut.aria.collapsed"));
                            nextHeader = nextHeader + " " + $.i18n.prop("platform.shortcut.aria.collapsed");
                            angular.element(".keyboard-hidden-screen-reader").text(nextHeader);
                        }
                    }
                    return true;
                } else {
                    return true;
                }
            };

            $scope.ariaExpandCollpaseContent = function (event) {
                let headerName = angular.element(event.target).text();
                let expandedClass = angular.element(event.target).closest('div').hasClass('shortcut-container-expanded');
                if (expandedClass) {
                    angular.element(".keyboard-screen-reader-opens").text(headerName + " " + $.i18n.prop("platform.shortcut.aria.expanded"));
                    headerName = headerName + ". " + $.i18n.prop("platform.shortcut.aria.instructnavigate");
                    angular.element(".keyboard-hidden-screen-reader").text(headerName);
                } else {
                    angular.element(".keyboard-screen-reader-opens").text(headerName + " " + $.i18n.prop("platform.shortcut.aria.collapsed"));
                    headerName = headerName + " " + $.i18n.prop("platform.shortcut.aria.collapsed");
                    angular.element(".keyboard-hidden-screen-reader").text(headerName);
                }
            };

            function defaultAriaAccessibility(shortcutListObj) {
                angular.element('.xe-popup-mask').attr('tabindex', 0).focus();
                angular.element(".banner_aria-shortcut_0").find('span.content-heading-shortcut').focus();
                for (let i = 0; i <= shortcutListObj.length - 1; i++) {
                    angular.element(".banner_aria-shortcut_" + i).find('span.content-heading-shortcut').attr('aria-live', 'polite');
                    let contentHeading = shortcutListObj[i].sectionHeading;
                    let contentDisplay = $.i18n.prop("platform.shortcut.aria.sectionheading") + " " + contentHeading + ". " + $.i18n.prop("platform.shortcut.aria.focussed");
                    angular.element(".banner_aria-shortcut_" + i).find('span.content-heading-shortcut').attr('aria-label', contentDisplay);
                }
                let headingName = angular.element(".banner_aria-shortcut_0").find('span.content-heading-shortcut').text();
                const expandedClass = angular.element(".banner_aria-shortcut_0").hasClass('shortcut-container-expanded');
                if (expandedClass) {
                    headingName = headingName + " " + $.i18n.prop("platform.shortcut.aria.expanded");
                } else {
                    headingName = headingName + " " + $.i18n.prop("platform.shortcut.aria.collapsed");
                }
                angular.element(".keyboard-hidden-screen-reader").text($.i18n.prop("platform.shortcut.aria.dialog.description"));
                angular.element(".keyboard-screen-reader-opens").text(headingName);
            }

            function sortAscendingShortcutList(listToBeSorted) {
                listToBeSorted.sort(function (a, b) {
                    if (a.sectionHeading > b.sectionHeading) return 1;
                    if (a.sectionHeading < b.sectionHeading) return -1;
                    return 0;
                });
                return listToBeSorted;
            }

            $scope.populateEntireDialog = function (objToIterate) {
                Object.keys(objToIterate).forEach(function (key, index) {
                    var shortcutList = objToIterate[key];
                    var tempList = [];
                    for (let i = 0; i < shortcutList.length; i++) {
                        let temp1 = keyshortcut.shortcutObj(shortcutList[i].combination, shortcutList[i].description);
                        tempList.push(temp1);
                    }
                    keyshortcut.addSectionShortcuts(key, tempList);
                });
            };


            $scope.toggleshortcut = function () {
                $scope.modalShown = !$scope.modalShown;
                let shortcutList = keyshortcut.getBannerShortcutList();
                if (!$scope.backendCalled) {
                    var backendURL = $('meta[name=menuBaseURL]').attr("content");
                    $http({
                        method: "GET",
                        url: backendURL + "/shortcut/data",
                        cache: true
                    }).then(function onSuccess(response, status) {
                            let jsonShortcutList = response.data;
                            $scope.backendCalled = true;
                            if (keyshortcut.isMac()) {
                                let macMessageList = jsonShortcutList.mac;
                                if(CommonContext.integratedWithExperience){
                                    macMessageList['Application header'] = [macMessageList['Application header'].find((shortcut) => (shortcut.combination === 'option+Q'))];
                                }
                                $scope.populateEntireDialog(macMessageList);
                            } else {
                                let windowsMessageList = jsonShortcutList.windows;
                                if(CommonContext.integratedWithExperience){
                                    windowsMessageList['Application header'] = [windowsMessageList['Application header'].find((shortcut) => (shortcut.combination === 'Alt+Q'))];
                                }
                                $scope.populateEntireDialog(windowsMessageList);
                            }
                            $scope.shortcutObj = sortAscendingShortcutList(keyshortcut.getBannerShortcutList());
                            $timeout(function () {
                                /*let derivedScope = angular.element("#shortcut_module_added").scope();
                                let firstShortcutScope = angular.element(".banner_shortcut_0").scope();
                                let createId = "banner_shortcut_" + firstShortcutScope.$id;
                                derivedScope[createId] = false;*/
                                defaultAriaAccessibility(shortcutList);
                            }, 10);
                        }).catch(function onError(error) {
                        // Handle error
                        console.log("Error Occurred reading message keys from message.properties file");
                        console.log("Status " + error.status + " Error Message is " + error.statusText);
                    });
                } else {
                    $scope.shortcutObj = sortAscendingShortcutList(keyshortcut.getBannerShortcutList());
                    $timeout(function () {
                        defaultAriaAccessibility(shortcutList);
                    }, 10);
                }
            };
            var switchTojqueryLegacy = $('meta[name=switchTojqueryLegacy]').attr("content");
            if(switchTojqueryLegacy=='' || switchTojqueryLegacy === 'false')
            $scope.toggleshortcut();

        }]);
})();
var process = process || {env: {NODE_ENV: "development"}};
/*
    http://www.JSON.org/json2.js
    2011-02-23

    Public Domain.

    NO WARRANTY EXPRESSED OR IMPLIED. USE AT YOUR OWN RISK.

    See http://www.JSON.org/js.html


    This code should be minified before deployment.
    See http://javascript.crockford.com/jsmin.html

    USE YOUR OWN COPY. IT IS EXTREMELY UNWISE TO LOAD CODE FROM SERVERS YOU DO
    NOT CONTROL.


    This file creates a global JSON object containing two methods: stringify
    and parse.

        JSON.stringify(value, replacer, space)
            value       any JavaScript value, usually an object or array.

            replacer    an optional parameter that determines how object
                        values are stringified for objects. It can be a
                        function or an array of strings.

            space       an optional parameter that specifies the indentation
                        of nested structures. If it is omitted, the text will
                        be packed without extra whitespace. If it is a number,
                        it will specify the number of spaces to indent at each
                        level. If it is a string (such as '\t' or '&nbsp;'),
                        it contains the characters used to indent at each level.

            This method produces a JSON text from a JavaScript value.

            When an object value is found, if the object contains a toJSON
            method, its toJSON method will be called and the result will be
            stringified. A toJSON method does not serialize: it returns the
            value represented by the name/value pair that should be serialized,
            or undefined if nothing should be serialized. The toJSON method
            will be passed the key associated with the value, and this will be
            bound to the value

            For example, this would serialize Dates as ISO strings.

                Date.prototype.toJSON = function (key) {
                    function f(n) {
                        // Format integers to have at least two digits.
                        return n < 10 ? '0' + n : n;
                    }

                    return this.getUTCFullYear()   + '-' +
                         f(this.getUTCMonth() + 1) + '-' +
                         f(this.getUTCDate())      + 'T' +
                         f(this.getUTCHours())     + ':' +
                         f(this.getUTCMinutes())   + ':' +
                         f(this.getUTCSeconds())   + 'Z';
                };

            You can provide an optional replacer method. It will be passed the
            key and value of each member, with this bound to the containing
            object. The value that is returned from your method will be
            serialized. If your method returns undefined, then the member will
            be excluded from the serialization.

            If the replacer parameter is an array of strings, then it will be
            used to select the members to be serialized. It filters the results
            such that only members with keys listed in the replacer array are
            stringified.

            Values that do not have JSON representations, such as undefined or
            functions, will not be serialized. Such values in objects will be
            dropped; in arrays they will be replaced with null. You can use
            a replacer function to replace those with JSON values.
            JSON.stringify(undefined) returns undefined.

            The optional space parameter produces a stringification of the
            value that is filled with line breaks and indentation to make it
            easier to read.

            If the space parameter is a non-empty string, then that string will
            be used for indentation. If the space parameter is a number, then
            the indentation will be that many spaces.

            Example:

            text = JSON.stringify(['e', {pluribus: 'unum'}]);
            // text is '["e",{"pluribus":"unum"}]'


            text = JSON.stringify(['e', {pluribus: 'unum'}], null, '\t');
            // text is '[\n\t"e",\n\t{\n\t\t"pluribus": "unum"\n\t}\n]'

            text = JSON.stringify([new Date()], function (key, value) {
                return this[key] instanceof Date ?
                    'Date(' + this[key] + ')' : value;
            });
            // text is '["Date(---current time---)"]'


        JSON.parse(text, reviver)
            This method parses a JSON text to produce an object or array.
            It can throw a SyntaxError exception.

            The optional reviver parameter is a function that can filter and
            transform the results. It receives each of the keys and values,
            and its return value is used instead of the original value.
            If it returns what it received, then the structure is not modified.
            If it returns undefined then the member is deleted.

            Example:

            // Parse the text. Values that look like ISO date strings will
            // be converted to Date objects.

            myData = JSON.parse(text, function (key, value) {
                var a;
                if (typeof value === 'string') {
                    a =
/^(\d{4})-(\d{2})-(\d{2})T(\d{2}):(\d{2}):(\d{2}(?:\.\d*)?)Z$/.exec(value);
                    if (a) {
                        return new Date(Date.UTC(+a[1], +a[2] - 1, +a[3], +a[4],
                            +a[5], +a[6]));
                    }
                }
                return value;
            });

            myData = JSON.parse('["Date(09/09/2001)"]', function (key, value) {
                var d;
                if (typeof value === 'string' &&
                        value.slice(0, 5) === 'Date(' &&
                        value.slice(-1) === ')') {
                    d = new Date(value.slice(5, -1));
                    if (d) {
                        return d;
                    }
                }
                return value;
            });


    This is a reference implementation. You are free to copy, modify, or
    redistribute.
*/

/*jslint evil: true, strict: false, regexp: false */

/*members "", "\b", "\t", "\n", "\f", "\r", "\"", JSON, "\\", apply,
    call, charCodeAt, getUTCDate, getUTCFullYear, getUTCHours,
    getUTCMinutes, getUTCMonth, getUTCSeconds, hasOwnProperty, join,
    lastIndex, length, parse, prototype, push, replace, slice, stringify,
    test, toJSON, toString, valueOf
*/


// Create a JSON object only if one does not already exist. We create the
// methods in a closure to avoid creating global variables.

var JSON;
if (!JSON) {
    JSON = {};
}

(function () {
    "use strict";

    function f(n) {
        // Format integers to have at least two digits.
        return n < 10 ? '0' + n : n;
    }

    if (typeof Date.prototype.toJSON !== 'function') {

        Date.prototype.toJSON = function (key) {

            return isFinite(this.valueOf()) ?
                this.getUTCFullYear()     + '-' +
                f(this.getUTCMonth() + 1) + '-' +
                f(this.getUTCDate())      + 'T' +
                f(this.getUTCHours())     + ':' +
                f(this.getUTCMinutes())   + ':' +
                f(this.getUTCSeconds())   + 'Z' : null;
        };

        String.prototype.toJSON      =
            Number.prototype.toJSON  =
            Boolean.prototype.toJSON = function (key) {
                return this.valueOf();
            };
    }

    var cx = /[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        escapable = /[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,
        gap,
        indent,
        meta = {    // table of character substitutions
            '\b': '\\b',
            '\t': '\\t',
            '\n': '\\n',
            '\f': '\\f',
            '\r': '\\r',
            '"' : '\\"',
            '\\': '\\\\'
        },
        rep;


    function quote(string) {

// If the string contains no control characters, no quote characters, and no
// backslash characters, then we can safely slap some quotes around it.
// Otherwise we must also replace the offending characters with safe escape
// sequences.

        escapable.lastIndex = 0;
        return escapable.test(string) ? '"' + string.replace(escapable, function (a) {
            var c = meta[a];
            return typeof c === 'string' ? c :
                '\\u' + ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
        }) + '"' : '"' + string + '"';
    }


    function str(key, holder) {

// Produce a string from holder[key].

        var i,          // The loop counter.
            k,          // The member key.
            v,          // The member value.
            length,
            mind = gap,
            partial,
            value = holder[key];

// If the value has a toJSON method, call it to obtain a replacement value.

        if (value && typeof value === 'object' &&
                typeof value.toJSON === 'function') {
            value = value.toJSON(key);
        }

// If we were called with a replacer function, then call the replacer to
// obtain a replacement value.

        if (typeof rep === 'function') {
            value = rep.call(holder, key, value);
        }

// What happens next depends on the value's type.

        switch (typeof value) {
        case 'string':
            return quote(value);

        case 'number':

// JSON numbers must be finite. Encode non-finite numbers as null.

            return isFinite(value) ? String(value) : 'null';

        case 'boolean':
        case 'null':

// If the value is a boolean or null, convert it to a string. Note:
// typeof null does not produce 'null'. The case is included here in
// the remote chance that this gets fixed someday.

            return String(value);

// If the type is 'object', we might be dealing with an object or an array or
// null.

        case 'object':

// Due to a specification blunder in ECMAScript, typeof null is 'object',
// so watch out for that case.

            if (!value) {
                return 'null';
            }

// Make an array to hold the partial results of stringifying this object value.

            gap += indent;
            partial = [];

// Is the value an array?

            if (Object.prototype.toString.apply(value) === '[object Array]') {

// The value is an array. Stringify every element. Use null as a placeholder
// for non-JSON values.

                length = value.length;
                for (i = 0; i < length; i += 1) {
                    partial[i] = str(i, value) || 'null';
                }

// Join all of the elements together, separated with commas, and wrap them in
// brackets.

                v = partial.length === 0 ? '[]' : gap ?
                    '[\n' + gap + partial.join(',\n' + gap) + '\n' + mind + ']' :
                    '[' + partial.join(',') + ']';
                gap = mind;
                return v;
            }

// If the replacer is an array, use it to select the members to be stringified.

            if (rep && typeof rep === 'object') {
                length = rep.length;
                for (i = 0; i < length; i += 1) {
                    if (typeof rep[i] === 'string') {
                        k = rep[i];
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            } else {

// Otherwise, iterate through all of the keys in the object.

                for (k in value) {
                    if (Object.prototype.hasOwnProperty.call(value, k)) {
                        v = str(k, value);
                        if (v) {
                            partial.push(quote(k) + (gap ? ': ' : ':') + v);
                        }
                    }
                }
            }

// Join all of the member texts together, separated with commas,
// and wrap them in braces.

            v = partial.length === 0 ? '{}' : gap ?
                '{\n' + gap + partial.join(',\n' + gap) + '\n' + mind + '}' :
                '{' + partial.join(',') + '}';
            gap = mind;
            return v;
        }
    }

// If the JSON object does not yet have a stringify method, give it one.

    if (typeof JSON.stringify !== 'function') {
        JSON.stringify = function (value, replacer, space) {

// The stringify method takes a value and an optional replacer, and an optional
// space parameter, and returns a JSON text. The replacer can be a function
// that can replace values, or an array of strings that will select the keys.
// A default replacer method can be provided. Use of the space parameter can
// produce text that is more easily readable.

            var i;
            gap = '';
            indent = '';

// If the space parameter is a number, make an indent string containing that
// many spaces.

            if (typeof space === 'number') {
                for (i = 0; i < space; i += 1) {
                    indent += ' ';
                }

// If the space parameter is a string, it will be used as the indent string.

            } else if (typeof space === 'string') {
                indent = space;
            }

// If there is a replacer, it must be a function or an array.
// Otherwise, throw an error.

            rep = replacer;
            if (replacer && typeof replacer !== 'function' &&
                    (typeof replacer !== 'object' ||
                    typeof replacer.length !== 'number')) {
                throw new Error('JSON.stringify');
            }

// Make a fake root object containing our value under the key of ''.
// Return the result of stringifying the value.

            return str('', {'': value});
        };
    }


// If the JSON object does not yet have a parse method, give it one.

    if (typeof JSON.parse !== 'function') {
        JSON.parse = function (text, reviver) {

// The parse method takes a text and an optional reviver function, and returns
// a JavaScript value if the text is a valid JSON text.

            var j;

            function walk(holder, key) {

// The walk method is used to recursively walk the resulting structure so
// that modifications can be made.

                var k, v, value = holder[key];
                if (value && typeof value === 'object') {
                    for (k in value) {
                        if (Object.prototype.hasOwnProperty.call(value, k)) {
                            v = walk(value, k);
                            if (v !== undefined) {
                                value[k] = v;
                            } else {
                                delete value[k];
                            }
                        }
                    }
                }
                return reviver.call(holder, key, value);
            }


// Parsing happens in four stages. In the first stage, we replace certain
// Unicode characters with escape sequences. JavaScript handles many characters
// incorrectly, either silently deleting them, or treating them as line endings.

            text = String(text);
            cx.lastIndex = 0;
            if (cx.test(text)) {
                text = text.replace(cx, function (a) {
                    return '\\u' +
                        ('0000' + a.charCodeAt(0).toString(16)).slice(-4);
                });
            }

// In the second stage, we run the text against regular expressions that look
// for non-JSON patterns. We are especially concerned with '()' and 'new'
// because they can cause invocation, and '=' because it can cause mutation.
// But just to be safe, we want to reject all unexpected forms.

// We split the second stage into 4 regexp operations in order to work around
// crippling inefficiencies in IE's and Safari's regexp engines. First we
// replace the JSON backslash pairs with '@' (a non-JSON character). Second, we
// replace all simple value tokens with ']' characters. Third, we delete all
// open brackets that follow a colon or comma or that begin the text. Finally,
// we look to see that the remaining characters are only whitespace or ']' or
// ',' or ':' or '{' or '}'. If that is so, then the text is safe for eval.

            if (/^[\],:{}\s]*$/
                    .test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g, '@')
                        .replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g, ']')
                        .replace(/(?:^|:|,)(?:\s*\[)+/g, ''))) {

// In the third stage we use the eval function to compile the text into a
// JavaScript structure. The '{' operator is subject to a syntactic ambiguity
// in JavaScript: it can begin a block or an object literal. We wrap the text
// in parens to eliminate the ambiguity.

                j = eval('(' + text + ')');

// In the optional fourth stage, we recursively walk the new structure, passing
// each name/value pair to a reviver function for possible transformation.

                return typeof reviver === 'function' ?
                    walk({'': j}, '') : j;
            }

// If the text is not JSON parseable, then a SyntaxError is thrown.

            throw new SyntaxError('JSON.parse');
        };
    }
}());

var process = process || {env: {NODE_ENV: "development"}};
!function(){function n(n){return n&&(n.ownerDocument||n.document||n).documentElement}function t(n){return n&&(n.ownerDocument&&n.ownerDocument.defaultView||n.document&&n||n.defaultView)}function e(n,t){return t>n?-1:n>t?1:n>=t?0:NaN}function r(n){return null===n?NaN:+n}function i(n){return!isNaN(n)}function u(n){return{left:function(t,e,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=t.length);i>r;){var u=r+i>>>1;n(t[u],e)<0?r=u+1:i=u}return r},right:function(t,e,r,i){for(arguments.length<3&&(r=0),arguments.length<4&&(i=t.length);i>r;){var u=r+i>>>1;n(t[u],e)>0?i=u:r=u+1}return r}}}function o(n){return n.length}function a(n){for(var t=1;n*t%1;)t*=10;return t}function l(n,t){for(var e in t)Object.defineProperty(n.prototype,e,{value:t[e],enumerable:!1})}function c(){this._=Object.create(null)}function f(n){return(n+="")===bo||n[0]===_o?_o+n:n}function s(n){return(n+="")[0]===_o?n.slice(1):n}function h(n){return f(n)in this._}function p(n){return(n=f(n))in this._&&delete this._[n]}function g(){var n=[];for(var t in this._)n.push(s(t));return n}function v(){var n=0;for(var t in this._)++n;return n}function d(){for(var n in this._)return!1;return!0}function y(){this._=Object.create(null)}function m(n){return n}function M(n,t,e){return function(){var r=e.apply(t,arguments);return r===t?n:r}}function x(n,t){if(t in n)return t;t=t.charAt(0).toUpperCase()+t.slice(1);for(var e=0,r=wo.length;r>e;++e){var i=wo[e]+t;if(i in n)return i}}function b(){}function _(){}function w(n){function t(){for(var t,r=e,i=-1,u=r.length;++i<u;)(t=r[i].on)&&t.apply(this,arguments);return n}var e=[],r=new c;return t.on=function(t,i){var u,o=r.get(t);return arguments.length<2?o&&o.on:(o&&(o.on=null,e=e.slice(0,u=e.indexOf(o)).concat(e.slice(u+1)),r.remove(t)),i&&e.push(r.set(t,{on:i})),n)},t}function S(){ao.event.preventDefault()}function k(){for(var n,t=ao.event;n=t.sourceEvent;)t=n;return t}function N(n){for(var t=new _,e=0,r=arguments.length;++e<r;)t[arguments[e]]=w(t);return t.of=function(e,r){return function(i){try{var u=i.sourceEvent=ao.event;i.target=n,ao.event=i,t[i.type].apply(e,r)}finally{ao.event=u}}},t}function E(n){return ko(n,Co),n}function A(n){return"function"==typeof n?n:function(){return No(n,this)}}function C(n){return"function"==typeof n?n:function(){return Eo(n,this)}}function z(n,t){function e(){this.removeAttribute(n)}function r(){this.removeAttributeNS(n.space,n.local)}function i(){this.setAttribute(n,t)}function u(){this.setAttributeNS(n.space,n.local,t)}function o(){var e=t.apply(this,arguments);null==e?this.removeAttribute(n):this.setAttribute(n,e)}function a(){var e=t.apply(this,arguments);null==e?this.removeAttributeNS(n.space,n.local):this.setAttributeNS(n.space,n.local,e)}return n=ao.ns.qualify(n),null==t?n.local?r:e:"function"==typeof t?n.local?a:o:n.local?u:i}function L(n){return n.trim().replace(/\s+/g," ")}function q(n){return new RegExp("(?:^|\\s+)"+ao.requote(n)+"(?:\\s+|$)","g")}function T(n){return(n+"").trim().split(/^|\s+/)}function R(n,t){function e(){for(var e=-1;++e<i;)n[e](this,t)}function r(){for(var e=-1,r=t.apply(this,arguments);++e<i;)n[e](this,r)}n=T(n).map(D);var i=n.length;return"function"==typeof t?r:e}function D(n){var t=q(n);return function(e,r){if(i=e.classList)return r?i.add(n):i.remove(n);var i=e.getAttribute("class")||"";r?(t.lastIndex=0,t.test(i)||e.setAttribute("class",L(i+" "+n))):e.setAttribute("class",L(i.replace(t," ")))}}function P(n,t,e){function r(){this.style.removeProperty(n)}function i(){this.style.setProperty(n,t,e)}function u(){var r=t.apply(this,arguments);null==r?this.style.removeProperty(n):this.style.setProperty(n,r,e)}return null==t?r:"function"==typeof t?u:i}function U(n,t){function e(){delete this[n]}function r(){this[n]=t}function i(){var e=t.apply(this,arguments);null==e?delete this[n]:this[n]=e}return null==t?e:"function"==typeof t?i:r}function j(n){function t(){var t=this.ownerDocument,e=this.namespaceURI;return e===zo&&t.documentElement.namespaceURI===zo?t.createElement(n):t.createElementNS(e,n)}function e(){return this.ownerDocument.createElementNS(n.space,n.local)}return"function"==typeof n?n:(n=ao.ns.qualify(n)).local?e:t}function F(){var n=this.parentNode;n&&n.removeChild(this)}function H(n){return{__data__:n}}function O(n){return function(){return Ao(this,n)}}function I(n){return arguments.length||(n=e),function(t,e){return t&&e?n(t.__data__,e.__data__):!t-!e}}function Y(n,t){for(var e=0,r=n.length;r>e;e++)for(var i,u=n[e],o=0,a=u.length;a>o;o++)(i=u[o])&&t(i,o,e);return n}function Z(n){return ko(n,qo),n}function V(n){var t,e;return function(r,i,u){var o,a=n[u].update,l=a.length;for(u!=e&&(e=u,t=0),i>=t&&(t=i+1);!(o=a[t])&&++t<l;);return o}}function X(n,t,e){function r(){var t=this[o];t&&(this.removeEventListener(n,t,t.$),delete this[o])}function i(){var i=l(t,co(arguments));r.call(this),this.addEventListener(n,this[o]=i,i.$=e),i._=t}function u(){var t,e=new RegExp("^__on([^.]+)"+ao.requote(n)+"$");for(var r in this)if(t=r.match(e)){var i=this[r];this.removeEventListener(t[1],i,i.$),delete this[r]}}var o="__on"+n,a=n.indexOf("."),l=$;a>0&&(n=n.slice(0,a));var c=To.get(n);return c&&(n=c,l=B),a?t?i:r:t?b:u}function $(n,t){return function(e){var r=ao.event;ao.event=e,t[0]=this.__data__;try{n.apply(this,t)}finally{ao.event=r}}}function B(n,t){var e=$(n,t);return function(n){var t=this,r=n.relatedTarget;r&&(r===t||8&r.compareDocumentPosition(t))||e.call(t,n)}}function W(e){var r=".dragsuppress-"+ ++Do,i="click"+r,u=ao.select(t(e)).on("touchmove"+r,S).on("dragstart"+r,S).on("selectstart"+r,S);if(null==Ro&&(Ro="onselectstart"in e?!1:x(e.style,"userSelect")),Ro){var o=n(e).style,a=o[Ro];o[Ro]="none"}return function(n){if(u.on(r,null),Ro&&(o[Ro]=a),n){var t=function(){u.on(i,null)};u.on(i,function(){S(),t()},!0),setTimeout(t,0)}}}function J(n,e){e.changedTouches&&(e=e.changedTouches[0]);var r=n.ownerSVGElement||n;if(r.createSVGPoint){var i=r.createSVGPoint();if(0>Po){var u=t(n);if(u.scrollX||u.scrollY){r=ao.select("body").append("svg").style({position:"absolute",top:0,left:0,margin:0,padding:0,border:"none"},"important");var o=r[0][0].getScreenCTM();Po=!(o.f||o.e),r.remove()}}return Po?(i.x=e.pageX,i.y=e.pageY):(i.x=e.clientX,i.y=e.clientY),i=i.matrixTransform(n.getScreenCTM().inverse()),[i.x,i.y]}var a=n.getBoundingClientRect();return[e.clientX-a.left-n.clientLeft,e.clientY-a.top-n.clientTop]}function G(){return ao.event.changedTouches[0].identifier}function K(n){return n>0?1:0>n?-1:0}function Q(n,t,e){return(t[0]-n[0])*(e[1]-n[1])-(t[1]-n[1])*(e[0]-n[0])}function nn(n){return n>1?0:-1>n?Fo:Math.acos(n)}function tn(n){return n>1?Io:-1>n?-Io:Math.asin(n)}function en(n){return((n=Math.exp(n))-1/n)/2}function rn(n){return((n=Math.exp(n))+1/n)/2}function un(n){return((n=Math.exp(2*n))-1)/(n+1)}function on(n){return(n=Math.sin(n/2))*n}function an(){}function ln(n,t,e){return this instanceof ln?(this.h=+n,this.s=+t,void(this.l=+e)):arguments.length<2?n instanceof ln?new ln(n.h,n.s,n.l):_n(""+n,wn,ln):new ln(n,t,e)}function cn(n,t,e){function r(n){return n>360?n-=360:0>n&&(n+=360),60>n?u+(o-u)*n/60:180>n?o:240>n?u+(o-u)*(240-n)/60:u}function i(n){return Math.round(255*r(n))}var u,o;return n=isNaN(n)?0:(n%=360)<0?n+360:n,t=isNaN(t)?0:0>t?0:t>1?1:t,e=0>e?0:e>1?1:e,o=.5>=e?e*(1+t):e+t-e*t,u=2*e-o,new mn(i(n+120),i(n),i(n-120))}function fn(n,t,e){return this instanceof fn?(this.h=+n,this.c=+t,void(this.l=+e)):arguments.length<2?n instanceof fn?new fn(n.h,n.c,n.l):n instanceof hn?gn(n.l,n.a,n.b):gn((n=Sn((n=ao.rgb(n)).r,n.g,n.b)).l,n.a,n.b):new fn(n,t,e)}function sn(n,t,e){return isNaN(n)&&(n=0),isNaN(t)&&(t=0),new hn(e,Math.cos(n*=Yo)*t,Math.sin(n)*t)}function hn(n,t,e){return this instanceof hn?(this.l=+n,this.a=+t,void(this.b=+e)):arguments.length<2?n instanceof hn?new hn(n.l,n.a,n.b):n instanceof fn?sn(n.h,n.c,n.l):Sn((n=mn(n)).r,n.g,n.b):new hn(n,t,e)}function pn(n,t,e){var r=(n+16)/116,i=r+t/500,u=r-e/200;return i=vn(i)*na,r=vn(r)*ta,u=vn(u)*ea,new mn(yn(3.2404542*i-1.5371385*r-.4985314*u),yn(-.969266*i+1.8760108*r+.041556*u),yn(.0556434*i-.2040259*r+1.0572252*u))}function gn(n,t,e){return n>0?new fn(Math.atan2(e,t)*Zo,Math.sqrt(t*t+e*e),n):new fn(NaN,NaN,n)}function vn(n){return n>.206893034?n*n*n:(n-4/29)/7.787037}function dn(n){return n>.008856?Math.pow(n,1/3):7.787037*n+4/29}function yn(n){return Math.round(255*(.00304>=n?12.92*n:1.055*Math.pow(n,1/2.4)-.055))}function mn(n,t,e){return this instanceof mn?(this.r=~~n,this.g=~~t,void(this.b=~~e)):arguments.length<2?n instanceof mn?new mn(n.r,n.g,n.b):_n(""+n,mn,cn):new mn(n,t,e)}function Mn(n){return new mn(n>>16,n>>8&255,255&n)}function xn(n){return Mn(n)+""}function bn(n){return 16>n?"0"+Math.max(0,n).toString(16):Math.min(255,n).toString(16)}function _n(n,t,e){var r,i,u,o=0,a=0,l=0;if(r=/([a-z]+)\((.*)\)/.exec(n=n.toLowerCase()))switch(i=r[2].split(","),r[1]){case"hsl":return e(parseFloat(i[0]),parseFloat(i[1])/100,parseFloat(i[2])/100);case"rgb":return t(Nn(i[0]),Nn(i[1]),Nn(i[2]))}return(u=ua.get(n))?t(u.r,u.g,u.b):(null==n||"#"!==n.charAt(0)||isNaN(u=parseInt(n.slice(1),16))||(4===n.length?(o=(3840&u)>>4,o=o>>4|o,a=240&u,a=a>>4|a,l=15&u,l=l<<4|l):7===n.length&&(o=(16711680&u)>>16,a=(65280&u)>>8,l=255&u)),t(o,a,l))}function wn(n,t,e){var r,i,u=Math.min(n/=255,t/=255,e/=255),o=Math.max(n,t,e),a=o-u,l=(o+u)/2;return a?(i=.5>l?a/(o+u):a/(2-o-u),r=n==o?(t-e)/a+(e>t?6:0):t==o?(e-n)/a+2:(n-t)/a+4,r*=60):(r=NaN,i=l>0&&1>l?0:r),new ln(r,i,l)}function Sn(n,t,e){n=kn(n),t=kn(t),e=kn(e);var r=dn((.4124564*n+.3575761*t+.1804375*e)/na),i=dn((.2126729*n+.7151522*t+.072175*e)/ta),u=dn((.0193339*n+.119192*t+.9503041*e)/ea);return hn(116*i-16,500*(r-i),200*(i-u))}function kn(n){return(n/=255)<=.04045?n/12.92:Math.pow((n+.055)/1.055,2.4)}function Nn(n){var t=parseFloat(n);return"%"===n.charAt(n.length-1)?Math.round(2.55*t):t}function En(n){return"function"==typeof n?n:function(){return n}}function An(n){return function(t,e,r){return 2===arguments.length&&"function"==typeof e&&(r=e,e=null),Cn(t,e,n,r)}}function Cn(n,t,e,r){function i(){var n,t=l.status;if(!t&&Ln(l)||t>=200&&300>t||304===t){try{n=e.call(u,l)}catch(r){return void o.error.call(u,r)}o.load.call(u,n)}else o.error.call(u,l)}var u={},o=ao.dispatch("beforesend","progress","load","error"),a={},l=new XMLHttpRequest,c=null;return!this.XDomainRequest||"withCredentials"in l||!/^(http(s)?:)?\/\//.test(n)||(l=new XDomainRequest),"onload"in l?l.onload=l.onerror=i:l.onreadystatechange=function(){l.readyState>3&&i()},l.onprogress=function(n){var t=ao.event;ao.event=n;try{o.progress.call(u,l)}finally{ao.event=t}},u.header=function(n,t){return n=(n+"").toLowerCase(),arguments.length<2?a[n]:(null==t?delete a[n]:a[n]=t+"",u)},u.mimeType=function(n){return arguments.length?(t=null==n?null:n+"",u):t},u.responseType=function(n){return arguments.length?(c=n,u):c},u.response=function(n){return e=n,u},["get","post"].forEach(function(n){u[n]=function(){return u.send.apply(u,[n].concat(co(arguments)))}}),u.send=function(e,r,i){if(2===arguments.length&&"function"==typeof r&&(i=r,r=null),l.open(e,n,!0),null==t||"accept"in a||(a.accept=t+",*/*"),l.setRequestHeader)for(var f in a)l.setRequestHeader(f,a[f]);return null!=t&&l.overrideMimeType&&l.overrideMimeType(t),null!=c&&(l.responseType=c),null!=i&&u.on("error",i).on("load",function(n){i(null,n)}),o.beforesend.call(u,l),l.send(null==r?null:r),u},u.abort=function(){return l.abort(),u},ao.rebind(u,o,"on"),null==r?u:u.get(zn(r))}function zn(n){return 1===n.length?function(t,e){n(null==t?e:null)}:n}function Ln(n){var t=n.responseType;return t&&"text"!==t?n.response:n.responseText}function qn(n,t,e){var r=arguments.length;2>r&&(t=0),3>r&&(e=Date.now());var i=e+t,u={c:n,t:i,n:null};return aa?aa.n=u:oa=u,aa=u,la||(ca=clearTimeout(ca),la=1,fa(Tn)),u}function Tn(){var n=Rn(),t=Dn()-n;t>24?(isFinite(t)&&(clearTimeout(ca),ca=setTimeout(Tn,t)),la=0):(la=1,fa(Tn))}function Rn(){for(var n=Date.now(),t=oa;t;)n>=t.t&&t.c(n-t.t)&&(t.c=null),t=t.n;return n}function Dn(){for(var n,t=oa,e=1/0;t;)t.c?(t.t<e&&(e=t.t),t=(n=t).n):t=n?n.n=t.n:oa=t.n;return aa=n,e}function Pn(n,t){return t-(n?Math.ceil(Math.log(n)/Math.LN10):1)}function Un(n,t){var e=Math.pow(10,3*xo(8-t));return{scale:t>8?function(n){return n/e}:function(n){return n*e},symbol:n}}function jn(n){var t=n.decimal,e=n.thousands,r=n.grouping,i=n.currency,u=r&&e?function(n,t){for(var i=n.length,u=[],o=0,a=r[0],l=0;i>0&&a>0&&(l+a+1>t&&(a=Math.max(1,t-l)),u.push(n.substring(i-=a,i+a)),!((l+=a+1)>t));)a=r[o=(o+1)%r.length];return u.reverse().join(e)}:m;return function(n){var e=ha.exec(n),r=e[1]||" ",o=e[2]||">",a=e[3]||"-",l=e[4]||"",c=e[5],f=+e[6],s=e[7],h=e[8],p=e[9],g=1,v="",d="",y=!1,m=!0;switch(h&&(h=+h.substring(1)),(c||"0"===r&&"="===o)&&(c=r="0",o="="),p){case"n":s=!0,p="g";break;case"%":g=100,d="%",p="f";break;case"p":g=100,d="%",p="r";break;case"b":case"o":case"x":case"X":"#"===l&&(v="0"+p.toLowerCase());case"c":m=!1;case"d":y=!0,h=0;break;case"s":g=-1,p="r"}"$"===l&&(v=i[0],d=i[1]),"r"!=p||h||(p="g"),null!=h&&("g"==p?h=Math.max(1,Math.min(21,h)):"e"!=p&&"f"!=p||(h=Math.max(0,Math.min(20,h)))),p=pa.get(p)||Fn;var M=c&&s;return function(n){var e=d;if(y&&n%1)return"";var i=0>n||0===n&&0>1/n?(n=-n,"-"):"-"===a?"":a;if(0>g){var l=ao.formatPrefix(n,h);n=l.scale(n),e=l.symbol+d}else n*=g;n=p(n,h);var x,b,_=n.lastIndexOf(".");if(0>_){var w=m?n.lastIndexOf("e"):-1;0>w?(x=n,b=""):(x=n.substring(0,w),b=n.substring(w))}else x=n.substring(0,_),b=t+n.substring(_+1);!c&&s&&(x=u(x,1/0));var S=v.length+x.length+b.length+(M?0:i.length),k=f>S?new Array(S=f-S+1).join(r):"";return M&&(x=u(k+x,k.length?f-b.length:1/0)),i+=v,n=x+b,("<"===o?i+n+k:">"===o?k+i+n:"^"===o?k.substring(0,S>>=1)+i+n+k.substring(S):i+(M?n:k+n))+e}}}function Fn(n){return n+""}function Hn(){this._=new Date(arguments.length>1?Date.UTC.apply(this,arguments):arguments[0])}function On(n,t,e){function r(t){var e=n(t),r=u(e,1);return r-t>t-e?e:r}function i(e){return t(e=n(new va(e-1)),1),e}function u(n,e){return t(n=new va(+n),e),n}function o(n,r,u){var o=i(n),a=[];if(u>1)for(;r>o;)e(o)%u||a.push(new Date(+o)),t(o,1);else for(;r>o;)a.push(new Date(+o)),t(o,1);return a}function a(n,t,e){try{va=Hn;var r=new Hn;return r._=n,o(r,t,e)}finally{va=Date}}n.floor=n,n.round=r,n.ceil=i,n.offset=u,n.range=o;var l=n.utc=In(n);return l.floor=l,l.round=In(r),l.ceil=In(i),l.offset=In(u),l.range=a,n}function In(n){return function(t,e){try{va=Hn;var r=new Hn;return r._=t,n(r,e)._}finally{va=Date}}}function Yn(n){function t(n){function t(t){for(var e,i,u,o=[],a=-1,l=0;++a<r;)37===n.charCodeAt(a)&&(o.push(n.slice(l,a)),null!=(i=ya[e=n.charAt(++a)])&&(e=n.charAt(++a)),(u=A[e])&&(e=u(t,null==i?"e"===e?" ":"0":i)),o.push(e),l=a+1);return o.push(n.slice(l,a)),o.join("")}var r=n.length;return t.parse=function(t){var r={y:1900,m:0,d:1,H:0,M:0,S:0,L:0,Z:null},i=e(r,n,t,0);if(i!=t.length)return null;"p"in r&&(r.H=r.H%12+12*r.p);var u=null!=r.Z&&va!==Hn,o=new(u?Hn:va);return"j"in r?o.setFullYear(r.y,0,r.j):"W"in r||"U"in r?("w"in r||(r.w="W"in r?1:0),o.setFullYear(r.y,0,1),o.setFullYear(r.y,0,"W"in r?(r.w+6)%7+7*r.W-(o.getDay()+5)%7:r.w+7*r.U-(o.getDay()+6)%7)):o.setFullYear(r.y,r.m,r.d),o.setHours(r.H+(r.Z/100|0),r.M+r.Z%100,r.S,r.L),u?o._:o},t.toString=function(){return n},t}function e(n,t,e,r){for(var i,u,o,a=0,l=t.length,c=e.length;l>a;){if(r>=c)return-1;if(i=t.charCodeAt(a++),37===i){if(o=t.charAt(a++),u=C[o in ya?t.charAt(a++):o],!u||(r=u(n,e,r))<0)return-1}else if(i!=e.charCodeAt(r++))return-1}return r}function r(n,t,e){_.lastIndex=0;var r=_.exec(t.slice(e));return r?(n.w=w.get(r[0].toLowerCase()),e+r[0].length):-1}function i(n,t,e){x.lastIndex=0;var r=x.exec(t.slice(e));return r?(n.w=b.get(r[0].toLowerCase()),e+r[0].length):-1}function u(n,t,e){N.lastIndex=0;var r=N.exec(t.slice(e));return r?(n.m=E.get(r[0].toLowerCase()),e+r[0].length):-1}function o(n,t,e){S.lastIndex=0;var r=S.exec(t.slice(e));return r?(n.m=k.get(r[0].toLowerCase()),e+r[0].length):-1}function a(n,t,r){return e(n,A.c.toString(),t,r)}function l(n,t,r){return e(n,A.x.toString(),t,r)}function c(n,t,r){return e(n,A.X.toString(),t,r)}function f(n,t,e){var r=M.get(t.slice(e,e+=2).toLowerCase());return null==r?-1:(n.p=r,e)}var s=n.dateTime,h=n.date,p=n.time,g=n.periods,v=n.days,d=n.shortDays,y=n.months,m=n.shortMonths;t.utc=function(n){function e(n){try{va=Hn;var t=new va;return t._=n,r(t)}finally{va=Date}}var r=t(n);return e.parse=function(n){try{va=Hn;var t=r.parse(n);return t&&t._}finally{va=Date}},e.toString=r.toString,e},t.multi=t.utc.multi=ct;var M=ao.map(),x=Vn(v),b=Xn(v),_=Vn(d),w=Xn(d),S=Vn(y),k=Xn(y),N=Vn(m),E=Xn(m);g.forEach(function(n,t){M.set(n.toLowerCase(),t)});var A={a:function(n){return d[n.getDay()]},A:function(n){return v[n.getDay()]},b:function(n){return m[n.getMonth()]},B:function(n){return y[n.getMonth()]},c:t(s),d:function(n,t){return Zn(n.getDate(),t,2)},e:function(n,t){return Zn(n.getDate(),t,2)},H:function(n,t){return Zn(n.getHours(),t,2)},I:function(n,t){return Zn(n.getHours()%12||12,t,2)},j:function(n,t){return Zn(1+ga.dayOfYear(n),t,3)},L:function(n,t){return Zn(n.getMilliseconds(),t,3)},m:function(n,t){return Zn(n.getMonth()+1,t,2)},M:function(n,t){return Zn(n.getMinutes(),t,2)},p:function(n){return g[+(n.getHours()>=12)]},S:function(n,t){return Zn(n.getSeconds(),t,2)},U:function(n,t){return Zn(ga.sundayOfYear(n),t,2)},w:function(n){return n.getDay()},W:function(n,t){return Zn(ga.mondayOfYear(n),t,2)},x:t(h),X:t(p),y:function(n,t){return Zn(n.getFullYear()%100,t,2)},Y:function(n,t){return Zn(n.getFullYear()%1e4,t,4)},Z:at,"%":function(){return"%"}},C={a:r,A:i,b:u,B:o,c:a,d:tt,e:tt,H:rt,I:rt,j:et,L:ot,m:nt,M:it,p:f,S:ut,U:Bn,w:$n,W:Wn,x:l,X:c,y:Gn,Y:Jn,Z:Kn,"%":lt};return t}function Zn(n,t,e){var r=0>n?"-":"",i=(r?-n:n)+"",u=i.length;return r+(e>u?new Array(e-u+1).join(t)+i:i)}function Vn(n){return new RegExp("^(?:"+n.map(ao.requote).join("|")+")","i")}function Xn(n){for(var t=new c,e=-1,r=n.length;++e<r;)t.set(n[e].toLowerCase(),e);return t}function $n(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+1));return r?(n.w=+r[0],e+r[0].length):-1}function Bn(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e));return r?(n.U=+r[0],e+r[0].length):-1}function Wn(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e));return r?(n.W=+r[0],e+r[0].length):-1}function Jn(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+4));return r?(n.y=+r[0],e+r[0].length):-1}function Gn(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+2));return r?(n.y=Qn(+r[0]),e+r[0].length):-1}function Kn(n,t,e){return/^[+-]\d{4}$/.test(t=t.slice(e,e+5))?(n.Z=-t,e+5):-1}function Qn(n){return n+(n>68?1900:2e3)}function nt(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+2));return r?(n.m=r[0]-1,e+r[0].length):-1}function tt(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+2));return r?(n.d=+r[0],e+r[0].length):-1}function et(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+3));return r?(n.j=+r[0],e+r[0].length):-1}function rt(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+2));return r?(n.H=+r[0],e+r[0].length):-1}function it(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+2));return r?(n.M=+r[0],e+r[0].length):-1}function ut(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+2));return r?(n.S=+r[0],e+r[0].length):-1}function ot(n,t,e){ma.lastIndex=0;var r=ma.exec(t.slice(e,e+3));return r?(n.L=+r[0],e+r[0].length):-1}function at(n){var t=n.getTimezoneOffset(),e=t>0?"-":"+",r=xo(t)/60|0,i=xo(t)%60;return e+Zn(r,"0",2)+Zn(i,"0",2)}function lt(n,t,e){Ma.lastIndex=0;var r=Ma.exec(t.slice(e,e+1));return r?e+r[0].length:-1}function ct(n){for(var t=n.length,e=-1;++e<t;)n[e][0]=this(n[e][0]);return function(t){for(var e=0,r=n[e];!r[1](t);)r=n[++e];return r[0](t)}}function ft(){}function st(n,t,e){var r=e.s=n+t,i=r-n,u=r-i;e.t=n-u+(t-i)}function ht(n,t){n&&wa.hasOwnProperty(n.type)&&wa[n.type](n,t)}function pt(n,t,e){var r,i=-1,u=n.length-e;for(t.lineStart();++i<u;)r=n[i],t.point(r[0],r[1],r[2]);t.lineEnd()}function gt(n,t){var e=-1,r=n.length;for(t.polygonStart();++e<r;)pt(n[e],t,1);t.polygonEnd()}function vt(){function n(n,t){n*=Yo,t=t*Yo/2+Fo/4;var e=n-r,o=e>=0?1:-1,a=o*e,l=Math.cos(t),c=Math.sin(t),f=u*c,s=i*l+f*Math.cos(a),h=f*o*Math.sin(a);ka.add(Math.atan2(h,s)),r=n,i=l,u=c}var t,e,r,i,u;Na.point=function(o,a){Na.point=n,r=(t=o)*Yo,i=Math.cos(a=(e=a)*Yo/2+Fo/4),u=Math.sin(a)},Na.lineEnd=function(){n(t,e)}}function dt(n){var t=n[0],e=n[1],r=Math.cos(e);return[r*Math.cos(t),r*Math.sin(t),Math.sin(e)]}function yt(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]}function mt(n,t){return[n[1]*t[2]-n[2]*t[1],n[2]*t[0]-n[0]*t[2],n[0]*t[1]-n[1]*t[0]]}function Mt(n,t){n[0]+=t[0],n[1]+=t[1],n[2]+=t[2]}function xt(n,t){return[n[0]*t,n[1]*t,n[2]*t]}function bt(n){var t=Math.sqrt(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);n[0]/=t,n[1]/=t,n[2]/=t}function _t(n){return[Math.atan2(n[1],n[0]),tn(n[2])]}function wt(n,t){return xo(n[0]-t[0])<Uo&&xo(n[1]-t[1])<Uo}function St(n,t){n*=Yo;var e=Math.cos(t*=Yo);kt(e*Math.cos(n),e*Math.sin(n),Math.sin(t))}function kt(n,t,e){++Ea,Ca+=(n-Ca)/Ea,za+=(t-za)/Ea,La+=(e-La)/Ea}function Nt(){function n(n,i){n*=Yo;var u=Math.cos(i*=Yo),o=u*Math.cos(n),a=u*Math.sin(n),l=Math.sin(i),c=Math.atan2(Math.sqrt((c=e*l-r*a)*c+(c=r*o-t*l)*c+(c=t*a-e*o)*c),t*o+e*a+r*l);Aa+=c,qa+=c*(t+(t=o)),Ta+=c*(e+(e=a)),Ra+=c*(r+(r=l)),kt(t,e,r)}var t,e,r;ja.point=function(i,u){i*=Yo;var o=Math.cos(u*=Yo);t=o*Math.cos(i),e=o*Math.sin(i),r=Math.sin(u),ja.point=n,kt(t,e,r)}}function Et(){ja.point=St}function At(){function n(n,t){n*=Yo;var e=Math.cos(t*=Yo),o=e*Math.cos(n),a=e*Math.sin(n),l=Math.sin(t),c=i*l-u*a,f=u*o-r*l,s=r*a-i*o,h=Math.sqrt(c*c+f*f+s*s),p=r*o+i*a+u*l,g=h&&-nn(p)/h,v=Math.atan2(h,p);Da+=g*c,Pa+=g*f,Ua+=g*s,Aa+=v,qa+=v*(r+(r=o)),Ta+=v*(i+(i=a)),Ra+=v*(u+(u=l)),kt(r,i,u)}var t,e,r,i,u;ja.point=function(o,a){t=o,e=a,ja.point=n,o*=Yo;var l=Math.cos(a*=Yo);r=l*Math.cos(o),i=l*Math.sin(o),u=Math.sin(a),kt(r,i,u)},ja.lineEnd=function(){n(t,e),ja.lineEnd=Et,ja.point=St}}function Ct(n,t){function e(e,r){return e=n(e,r),t(e[0],e[1])}return n.invert&&t.invert&&(e.invert=function(e,r){return e=t.invert(e,r),e&&n.invert(e[0],e[1])}),e}function zt(){return!0}function Lt(n,t,e,r,i){var u=[],o=[];if(n.forEach(function(n){if(!((t=n.length-1)<=0)){var t,e=n[0],r=n[t];if(wt(e,r)){i.lineStart();for(var a=0;t>a;++a)i.point((e=n[a])[0],e[1]);return void i.lineEnd()}var l=new Tt(e,n,null,!0),c=new Tt(e,null,l,!1);l.o=c,u.push(l),o.push(c),l=new Tt(r,n,null,!1),c=new Tt(r,null,l,!0),l.o=c,u.push(l),o.push(c)}}),o.sort(t),qt(u),qt(o),u.length){for(var a=0,l=e,c=o.length;c>a;++a)o[a].e=l=!l;for(var f,s,h=u[0];;){for(var p=h,g=!0;p.v;)if((p=p.n)===h)return;f=p.z,i.lineStart();do{if(p.v=p.o.v=!0,p.e){if(g)for(var a=0,c=f.length;c>a;++a)i.point((s=f[a])[0],s[1]);else r(p.x,p.n.x,1,i);p=p.n}else{if(g){f=p.p.z;for(var a=f.length-1;a>=0;--a)i.point((s=f[a])[0],s[1])}else r(p.x,p.p.x,-1,i);p=p.p}p=p.o,f=p.z,g=!g}while(!p.v);i.lineEnd()}}}function qt(n){if(t=n.length){for(var t,e,r=0,i=n[0];++r<t;)i.n=e=n[r],e.p=i,i=e;i.n=e=n[0],e.p=i}}function Tt(n,t,e,r){this.x=n,this.z=t,this.o=e,this.e=r,this.v=!1,this.n=this.p=null}function Rt(n,t,e,r){return function(i,u){function o(t,e){var r=i(t,e);n(t=r[0],e=r[1])&&u.point(t,e)}function a(n,t){var e=i(n,t);d.point(e[0],e[1])}function l(){m.point=a,d.lineStart()}function c(){m.point=o,d.lineEnd()}function f(n,t){v.push([n,t]);var e=i(n,t);x.point(e[0],e[1])}function s(){x.lineStart(),v=[]}function h(){f(v[0][0],v[0][1]),x.lineEnd();var n,t=x.clean(),e=M.buffer(),r=e.length;if(v.pop(),g.push(v),v=null,r)if(1&t){n=e[0];var i,r=n.length-1,o=-1;if(r>0){for(b||(u.polygonStart(),b=!0),u.lineStart();++o<r;)u.point((i=n[o])[0],i[1]);u.lineEnd()}}else r>1&&2&t&&e.push(e.pop().concat(e.shift())),p.push(e.filter(Dt))}var p,g,v,d=t(u),y=i.invert(r[0],r[1]),m={point:o,lineStart:l,lineEnd:c,polygonStart:function(){m.point=f,m.lineStart=s,m.lineEnd=h,p=[],g=[]},polygonEnd:function(){m.point=o,m.lineStart=l,m.lineEnd=c,p=ao.merge(p);var n=Ot(y,g);p.length?(b||(u.polygonStart(),b=!0),Lt(p,Ut,n,e,u)):n&&(b||(u.polygonStart(),b=!0),u.lineStart(),e(null,null,1,u),u.lineEnd()),b&&(u.polygonEnd(),b=!1),p=g=null},sphere:function(){u.polygonStart(),u.lineStart(),e(null,null,1,u),u.lineEnd(),u.polygonEnd()}},M=Pt(),x=t(M),b=!1;return m}}function Dt(n){return n.length>1}function Pt(){var n,t=[];return{lineStart:function(){t.push(n=[])},point:function(t,e){n.push([t,e])},lineEnd:b,buffer:function(){var e=t;return t=[],n=null,e},rejoin:function(){t.length>1&&t.push(t.pop().concat(t.shift()))}}}function Ut(n,t){return((n=n.x)[0]<0?n[1]-Io-Uo:Io-n[1])-((t=t.x)[0]<0?t[1]-Io-Uo:Io-t[1])}function jt(n){var t,e=NaN,r=NaN,i=NaN;return{lineStart:function(){n.lineStart(),t=1},point:function(u,o){var a=u>0?Fo:-Fo,l=xo(u-e);xo(l-Fo)<Uo?(n.point(e,r=(r+o)/2>0?Io:-Io),n.point(i,r),n.lineEnd(),n.lineStart(),n.point(a,r),n.point(u,r),t=0):i!==a&&l>=Fo&&(xo(e-i)<Uo&&(e-=i*Uo),xo(u-a)<Uo&&(u-=a*Uo),r=Ft(e,r,u,o),n.point(i,r),n.lineEnd(),n.lineStart(),n.point(a,r),t=0),n.point(e=u,r=o),i=a},lineEnd:function(){n.lineEnd(),e=r=NaN},clean:function(){return 2-t}}}function Ft(n,t,e,r){var i,u,o=Math.sin(n-e);return xo(o)>Uo?Math.atan((Math.sin(t)*(u=Math.cos(r))*Math.sin(e)-Math.sin(r)*(i=Math.cos(t))*Math.sin(n))/(i*u*o)):(t+r)/2}function Ht(n,t,e,r){var i;if(null==n)i=e*Io,r.point(-Fo,i),r.point(0,i),r.point(Fo,i),r.point(Fo,0),r.point(Fo,-i),r.point(0,-i),r.point(-Fo,-i),r.point(-Fo,0),r.point(-Fo,i);else if(xo(n[0]-t[0])>Uo){var u=n[0]<t[0]?Fo:-Fo;i=e*u/2,r.point(-u,i),r.point(0,i),r.point(u,i)}else r.point(t[0],t[1])}function Ot(n,t){var e=n[0],r=n[1],i=[Math.sin(e),-Math.cos(e),0],u=0,o=0;ka.reset();for(var a=0,l=t.length;l>a;++a){var c=t[a],f=c.length;if(f)for(var s=c[0],h=s[0],p=s[1]/2+Fo/4,g=Math.sin(p),v=Math.cos(p),d=1;;){d===f&&(d=0),n=c[d];var y=n[0],m=n[1]/2+Fo/4,M=Math.sin(m),x=Math.cos(m),b=y-h,_=b>=0?1:-1,w=_*b,S=w>Fo,k=g*M;if(ka.add(Math.atan2(k*_*Math.sin(w),v*x+k*Math.cos(w))),u+=S?b+_*Ho:b,S^h>=e^y>=e){var N=mt(dt(s),dt(n));bt(N);var E=mt(i,N);bt(E);var A=(S^b>=0?-1:1)*tn(E[2]);(r>A||r===A&&(N[0]||N[1]))&&(o+=S^b>=0?1:-1)}if(!d++)break;h=y,g=M,v=x,s=n}}return(-Uo>u||Uo>u&&-Uo>ka)^1&o}function It(n){function t(n,t){return Math.cos(n)*Math.cos(t)>u}function e(n){var e,u,l,c,f;return{lineStart:function(){c=l=!1,f=1},point:function(s,h){var p,g=[s,h],v=t(s,h),d=o?v?0:i(s,h):v?i(s+(0>s?Fo:-Fo),h):0;if(!e&&(c=l=v)&&n.lineStart(),v!==l&&(p=r(e,g),(wt(e,p)||wt(g,p))&&(g[0]+=Uo,g[1]+=Uo,v=t(g[0],g[1]))),v!==l)f=0,v?(n.lineStart(),p=r(g,e),n.point(p[0],p[1])):(p=r(e,g),n.point(p[0],p[1]),n.lineEnd()),e=p;else if(a&&e&&o^v){var y;d&u||!(y=r(g,e,!0))||(f=0,o?(n.lineStart(),n.point(y[0][0],y[0][1]),n.point(y[1][0],y[1][1]),n.lineEnd()):(n.point(y[1][0],y[1][1]),n.lineEnd(),n.lineStart(),n.point(y[0][0],y[0][1])))}!v||e&&wt(e,g)||n.point(g[0],g[1]),e=g,l=v,u=d},lineEnd:function(){l&&n.lineEnd(),e=null},clean:function(){return f|(c&&l)<<1}}}function r(n,t,e){var r=dt(n),i=dt(t),o=[1,0,0],a=mt(r,i),l=yt(a,a),c=a[0],f=l-c*c;if(!f)return!e&&n;var s=u*l/f,h=-u*c/f,p=mt(o,a),g=xt(o,s),v=xt(a,h);Mt(g,v);var d=p,y=yt(g,d),m=yt(d,d),M=y*y-m*(yt(g,g)-1);if(!(0>M)){var x=Math.sqrt(M),b=xt(d,(-y-x)/m);if(Mt(b,g),b=_t(b),!e)return b;var _,w=n[0],S=t[0],k=n[1],N=t[1];w>S&&(_=w,w=S,S=_);var E=S-w,A=xo(E-Fo)<Uo,C=A||Uo>E;if(!A&&k>N&&(_=k,k=N,N=_),C?A?k+N>0^b[1]<(xo(b[0]-w)<Uo?k:N):k<=b[1]&&b[1]<=N:E>Fo^(w<=b[0]&&b[0]<=S)){var z=xt(d,(-y+x)/m);return Mt(z,g),[b,_t(z)]}}}function i(t,e){var r=o?n:Fo-n,i=0;return-r>t?i|=1:t>r&&(i|=2),-r>e?i|=4:e>r&&(i|=8),i}var u=Math.cos(n),o=u>0,a=xo(u)>Uo,l=ve(n,6*Yo);return Rt(t,e,l,o?[0,-n]:[-Fo,n-Fo])}function Yt(n,t,e,r){return function(i){var u,o=i.a,a=i.b,l=o.x,c=o.y,f=a.x,s=a.y,h=0,p=1,g=f-l,v=s-c;if(u=n-l,g||!(u>0)){if(u/=g,0>g){if(h>u)return;p>u&&(p=u)}else if(g>0){if(u>p)return;u>h&&(h=u)}if(u=e-l,g||!(0>u)){if(u/=g,0>g){if(u>p)return;u>h&&(h=u)}else if(g>0){if(h>u)return;p>u&&(p=u)}if(u=t-c,v||!(u>0)){if(u/=v,0>v){if(h>u)return;p>u&&(p=u)}else if(v>0){if(u>p)return;u>h&&(h=u)}if(u=r-c,v||!(0>u)){if(u/=v,0>v){if(u>p)return;u>h&&(h=u)}else if(v>0){if(h>u)return;p>u&&(p=u)}return h>0&&(i.a={x:l+h*g,y:c+h*v}),1>p&&(i.b={x:l+p*g,y:c+p*v}),i}}}}}}function Zt(n,t,e,r){function i(r,i){return xo(r[0]-n)<Uo?i>0?0:3:xo(r[0]-e)<Uo?i>0?2:1:xo(r[1]-t)<Uo?i>0?1:0:i>0?3:2}function u(n,t){return o(n.x,t.x)}function o(n,t){var e=i(n,1),r=i(t,1);return e!==r?e-r:0===e?t[1]-n[1]:1===e?n[0]-t[0]:2===e?n[1]-t[1]:t[0]-n[0]}return function(a){function l(n){for(var t=0,e=d.length,r=n[1],i=0;e>i;++i)for(var u,o=1,a=d[i],l=a.length,c=a[0];l>o;++o)u=a[o],c[1]<=r?u[1]>r&&Q(c,u,n)>0&&++t:u[1]<=r&&Q(c,u,n)<0&&--t,c=u;return 0!==t}function c(u,a,l,c){var f=0,s=0;if(null==u||(f=i(u,l))!==(s=i(a,l))||o(u,a)<0^l>0){do c.point(0===f||3===f?n:e,f>1?r:t);while((f=(f+l+4)%4)!==s)}else c.point(a[0],a[1])}function f(i,u){return i>=n&&e>=i&&u>=t&&r>=u}function s(n,t){f(n,t)&&a.point(n,t)}function h(){C.point=g,d&&d.push(y=[]),S=!0,w=!1,b=_=NaN}function p(){v&&(g(m,M),x&&w&&E.rejoin(),v.push(E.buffer())),C.point=s,w&&a.lineEnd()}function g(n,t){n=Math.max(-Ha,Math.min(Ha,n)),t=Math.max(-Ha,Math.min(Ha,t));var e=f(n,t);if(d&&y.push([n,t]),S)m=n,M=t,x=e,S=!1,e&&(a.lineStart(),a.point(n,t));else if(e&&w)a.point(n,t);else{var r={a:{x:b,y:_},b:{x:n,y:t}};A(r)?(w||(a.lineStart(),a.point(r.a.x,r.a.y)),a.point(r.b.x,r.b.y),e||a.lineEnd(),k=!1):e&&(a.lineStart(),a.point(n,t),k=!1)}b=n,_=t,w=e}var v,d,y,m,M,x,b,_,w,S,k,N=a,E=Pt(),A=Yt(n,t,e,r),C={point:s,lineStart:h,lineEnd:p,polygonStart:function(){a=E,v=[],d=[],k=!0},polygonEnd:function(){a=N,v=ao.merge(v);var t=l([n,r]),e=k&&t,i=v.length;(e||i)&&(a.polygonStart(),e&&(a.lineStart(),c(null,null,1,a),a.lineEnd()),i&&Lt(v,u,t,c,a),a.polygonEnd()),v=d=y=null}};return C}}function Vt(n){var t=0,e=Fo/3,r=ae(n),i=r(t,e);return i.parallels=function(n){return arguments.length?r(t=n[0]*Fo/180,e=n[1]*Fo/180):[t/Fo*180,e/Fo*180]},i}function Xt(n,t){function e(n,t){var e=Math.sqrt(u-2*i*Math.sin(t))/i;return[e*Math.sin(n*=i),o-e*Math.cos(n)]}var r=Math.sin(n),i=(r+Math.sin(t))/2,u=1+r*(2*i-r),o=Math.sqrt(u)/i;return e.invert=function(n,t){var e=o-t;return[Math.atan2(n,e)/i,tn((u-(n*n+e*e)*i*i)/(2*i))]},e}function $t(){function n(n,t){Ia+=i*n-r*t,r=n,i=t}var t,e,r,i;$a.point=function(u,o){$a.point=n,t=r=u,e=i=o},$a.lineEnd=function(){n(t,e)}}function Bt(n,t){Ya>n&&(Ya=n),n>Va&&(Va=n),Za>t&&(Za=t),t>Xa&&(Xa=t)}function Wt(){function n(n,t){o.push("M",n,",",t,u)}function t(n,t){o.push("M",n,",",t),a.point=e}function e(n,t){o.push("L",n,",",t)}function r(){a.point=n}function i(){o.push("Z")}var u=Jt(4.5),o=[],a={point:n,lineStart:function(){a.point=t},lineEnd:r,polygonStart:function(){a.lineEnd=i},polygonEnd:function(){a.lineEnd=r,a.point=n},pointRadius:function(n){return u=Jt(n),a},result:function(){if(o.length){var n=o.join("");return o=[],n}}};return a}function Jt(n){return"m0,"+n+"a"+n+","+n+" 0 1,1 0,"+-2*n+"a"+n+","+n+" 0 1,1 0,"+2*n+"z"}function Gt(n,t){Ca+=n,za+=t,++La}function Kt(){function n(n,r){var i=n-t,u=r-e,o=Math.sqrt(i*i+u*u);qa+=o*(t+n)/2,Ta+=o*(e+r)/2,Ra+=o,Gt(t=n,e=r)}var t,e;Wa.point=function(r,i){Wa.point=n,Gt(t=r,e=i)}}function Qt(){Wa.point=Gt}function ne(){function n(n,t){var e=n-r,u=t-i,o=Math.sqrt(e*e+u*u);qa+=o*(r+n)/2,Ta+=o*(i+t)/2,Ra+=o,o=i*n-r*t,Da+=o*(r+n),Pa+=o*(i+t),Ua+=3*o,Gt(r=n,i=t)}var t,e,r,i;Wa.point=function(u,o){Wa.point=n,Gt(t=r=u,e=i=o)},Wa.lineEnd=function(){n(t,e)}}function te(n){function t(t,e){n.moveTo(t+o,e),n.arc(t,e,o,0,Ho)}function e(t,e){n.moveTo(t,e),a.point=r}function r(t,e){n.lineTo(t,e)}function i(){a.point=t}function u(){n.closePath()}var o=4.5,a={point:t,lineStart:function(){a.point=e},lineEnd:i,polygonStart:function(){a.lineEnd=u},polygonEnd:function(){a.lineEnd=i,a.point=t},pointRadius:function(n){return o=n,a},result:b};return a}function ee(n){function t(n){return(a?r:e)(n)}function e(t){return ue(t,function(e,r){e=n(e,r),t.point(e[0],e[1])})}function r(t){function e(e,r){e=n(e,r),t.point(e[0],e[1])}function r(){M=NaN,S.point=u,t.lineStart()}function u(e,r){var u=dt([e,r]),o=n(e,r);i(M,x,m,b,_,w,M=o[0],x=o[1],m=e,b=u[0],_=u[1],w=u[2],a,t),t.point(M,x)}function o(){S.point=e,t.lineEnd()}function l(){
r(),S.point=c,S.lineEnd=f}function c(n,t){u(s=n,h=t),p=M,g=x,v=b,d=_,y=w,S.point=u}function f(){i(M,x,m,b,_,w,p,g,s,v,d,y,a,t),S.lineEnd=o,o()}var s,h,p,g,v,d,y,m,M,x,b,_,w,S={point:e,lineStart:r,lineEnd:o,polygonStart:function(){t.polygonStart(),S.lineStart=l},polygonEnd:function(){t.polygonEnd(),S.lineStart=r}};return S}function i(t,e,r,a,l,c,f,s,h,p,g,v,d,y){var m=f-t,M=s-e,x=m*m+M*M;if(x>4*u&&d--){var b=a+p,_=l+g,w=c+v,S=Math.sqrt(b*b+_*_+w*w),k=Math.asin(w/=S),N=xo(xo(w)-1)<Uo||xo(r-h)<Uo?(r+h)/2:Math.atan2(_,b),E=n(N,k),A=E[0],C=E[1],z=A-t,L=C-e,q=M*z-m*L;(q*q/x>u||xo((m*z+M*L)/x-.5)>.3||o>a*p+l*g+c*v)&&(i(t,e,r,a,l,c,A,C,N,b/=S,_/=S,w,d,y),y.point(A,C),i(A,C,N,b,_,w,f,s,h,p,g,v,d,y))}}var u=.5,o=Math.cos(30*Yo),a=16;return t.precision=function(n){return arguments.length?(a=(u=n*n)>0&&16,t):Math.sqrt(u)},t}function re(n){var t=ee(function(t,e){return n([t*Zo,e*Zo])});return function(n){return le(t(n))}}function ie(n){this.stream=n}function ue(n,t){return{point:t,sphere:function(){n.sphere()},lineStart:function(){n.lineStart()},lineEnd:function(){n.lineEnd()},polygonStart:function(){n.polygonStart()},polygonEnd:function(){n.polygonEnd()}}}function oe(n){return ae(function(){return n})()}function ae(n){function t(n){return n=a(n[0]*Yo,n[1]*Yo),[n[0]*h+l,c-n[1]*h]}function e(n){return n=a.invert((n[0]-l)/h,(c-n[1])/h),n&&[n[0]*Zo,n[1]*Zo]}function r(){a=Ct(o=se(y,M,x),u);var n=u(v,d);return l=p-n[0]*h,c=g+n[1]*h,i()}function i(){return f&&(f.valid=!1,f=null),t}var u,o,a,l,c,f,s=ee(function(n,t){return n=u(n,t),[n[0]*h+l,c-n[1]*h]}),h=150,p=480,g=250,v=0,d=0,y=0,M=0,x=0,b=Fa,_=m,w=null,S=null;return t.stream=function(n){return f&&(f.valid=!1),f=le(b(o,s(_(n)))),f.valid=!0,f},t.clipAngle=function(n){return arguments.length?(b=null==n?(w=n,Fa):It((w=+n)*Yo),i()):w},t.clipExtent=function(n){return arguments.length?(S=n,_=n?Zt(n[0][0],n[0][1],n[1][0],n[1][1]):m,i()):S},t.scale=function(n){return arguments.length?(h=+n,r()):h},t.translate=function(n){return arguments.length?(p=+n[0],g=+n[1],r()):[p,g]},t.center=function(n){return arguments.length?(v=n[0]%360*Yo,d=n[1]%360*Yo,r()):[v*Zo,d*Zo]},t.rotate=function(n){return arguments.length?(y=n[0]%360*Yo,M=n[1]%360*Yo,x=n.length>2?n[2]%360*Yo:0,r()):[y*Zo,M*Zo,x*Zo]},ao.rebind(t,s,"precision"),function(){return u=n.apply(this,arguments),t.invert=u.invert&&e,r()}}function le(n){return ue(n,function(t,e){n.point(t*Yo,e*Yo)})}function ce(n,t){return[n,t]}function fe(n,t){return[n>Fo?n-Ho:-Fo>n?n+Ho:n,t]}function se(n,t,e){return n?t||e?Ct(pe(n),ge(t,e)):pe(n):t||e?ge(t,e):fe}function he(n){return function(t,e){return t+=n,[t>Fo?t-Ho:-Fo>t?t+Ho:t,e]}}function pe(n){var t=he(n);return t.invert=he(-n),t}function ge(n,t){function e(n,t){var e=Math.cos(t),a=Math.cos(n)*e,l=Math.sin(n)*e,c=Math.sin(t),f=c*r+a*i;return[Math.atan2(l*u-f*o,a*r-c*i),tn(f*u+l*o)]}var r=Math.cos(n),i=Math.sin(n),u=Math.cos(t),o=Math.sin(t);return e.invert=function(n,t){var e=Math.cos(t),a=Math.cos(n)*e,l=Math.sin(n)*e,c=Math.sin(t),f=c*u-l*o;return[Math.atan2(l*u+c*o,a*r+f*i),tn(f*r-a*i)]},e}function ve(n,t){var e=Math.cos(n),r=Math.sin(n);return function(i,u,o,a){var l=o*t;null!=i?(i=de(e,i),u=de(e,u),(o>0?u>i:i>u)&&(i+=o*Ho)):(i=n+o*Ho,u=n-.5*l);for(var c,f=i;o>0?f>u:u>f;f-=l)a.point((c=_t([e,-r*Math.cos(f),-r*Math.sin(f)]))[0],c[1])}}function de(n,t){var e=dt(t);e[0]-=n,bt(e);var r=nn(-e[1]);return((-e[2]<0?-r:r)+2*Math.PI-Uo)%(2*Math.PI)}function ye(n,t,e){var r=ao.range(n,t-Uo,e).concat(t);return function(n){return r.map(function(t){return[n,t]})}}function me(n,t,e){var r=ao.range(n,t-Uo,e).concat(t);return function(n){return r.map(function(t){return[t,n]})}}function Me(n){return n.source}function xe(n){return n.target}function be(n,t,e,r){var i=Math.cos(t),u=Math.sin(t),o=Math.cos(r),a=Math.sin(r),l=i*Math.cos(n),c=i*Math.sin(n),f=o*Math.cos(e),s=o*Math.sin(e),h=2*Math.asin(Math.sqrt(on(r-t)+i*o*on(e-n))),p=1/Math.sin(h),g=h?function(n){var t=Math.sin(n*=h)*p,e=Math.sin(h-n)*p,r=e*l+t*f,i=e*c+t*s,o=e*u+t*a;return[Math.atan2(i,r)*Zo,Math.atan2(o,Math.sqrt(r*r+i*i))*Zo]}:function(){return[n*Zo,t*Zo]};return g.distance=h,g}function _e(){function n(n,i){var u=Math.sin(i*=Yo),o=Math.cos(i),a=xo((n*=Yo)-t),l=Math.cos(a);Ja+=Math.atan2(Math.sqrt((a=o*Math.sin(a))*a+(a=r*u-e*o*l)*a),e*u+r*o*l),t=n,e=u,r=o}var t,e,r;Ga.point=function(i,u){t=i*Yo,e=Math.sin(u*=Yo),r=Math.cos(u),Ga.point=n},Ga.lineEnd=function(){Ga.point=Ga.lineEnd=b}}function we(n,t){function e(t,e){var r=Math.cos(t),i=Math.cos(e),u=n(r*i);return[u*i*Math.sin(t),u*Math.sin(e)]}return e.invert=function(n,e){var r=Math.sqrt(n*n+e*e),i=t(r),u=Math.sin(i),o=Math.cos(i);return[Math.atan2(n*u,r*o),Math.asin(r&&e*u/r)]},e}function Se(n,t){function e(n,t){o>0?-Io+Uo>t&&(t=-Io+Uo):t>Io-Uo&&(t=Io-Uo);var e=o/Math.pow(i(t),u);return[e*Math.sin(u*n),o-e*Math.cos(u*n)]}var r=Math.cos(n),i=function(n){return Math.tan(Fo/4+n/2)},u=n===t?Math.sin(n):Math.log(r/Math.cos(t))/Math.log(i(t)/i(n)),o=r*Math.pow(i(n),u)/u;return u?(e.invert=function(n,t){var e=o-t,r=K(u)*Math.sqrt(n*n+e*e);return[Math.atan2(n,e)/u,2*Math.atan(Math.pow(o/r,1/u))-Io]},e):Ne}function ke(n,t){function e(n,t){var e=u-t;return[e*Math.sin(i*n),u-e*Math.cos(i*n)]}var r=Math.cos(n),i=n===t?Math.sin(n):(r-Math.cos(t))/(t-n),u=r/i+n;return xo(i)<Uo?ce:(e.invert=function(n,t){var e=u-t;return[Math.atan2(n,e)/i,u-K(i)*Math.sqrt(n*n+e*e)]},e)}function Ne(n,t){return[n,Math.log(Math.tan(Fo/4+t/2))]}function Ee(n){var t,e=oe(n),r=e.scale,i=e.translate,u=e.clipExtent;return e.scale=function(){var n=r.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.translate=function(){var n=i.apply(e,arguments);return n===e?t?e.clipExtent(null):e:n},e.clipExtent=function(n){var o=u.apply(e,arguments);if(o===e){if(t=null==n){var a=Fo*r(),l=i();u([[l[0]-a,l[1]-a],[l[0]+a,l[1]+a]])}}else t&&(o=null);return o},e.clipExtent(null)}function Ae(n,t){return[Math.log(Math.tan(Fo/4+t/2)),-n]}function Ce(n){return n[0]}function ze(n){return n[1]}function Le(n){for(var t=n.length,e=[0,1],r=2,i=2;t>i;i++){for(;r>1&&Q(n[e[r-2]],n[e[r-1]],n[i])<=0;)--r;e[r++]=i}return e.slice(0,r)}function qe(n,t){return n[0]-t[0]||n[1]-t[1]}function Te(n,t,e){return(e[0]-t[0])*(n[1]-t[1])<(e[1]-t[1])*(n[0]-t[0])}function Re(n,t,e,r){var i=n[0],u=e[0],o=t[0]-i,a=r[0]-u,l=n[1],c=e[1],f=t[1]-l,s=r[1]-c,h=(a*(l-c)-s*(i-u))/(s*o-a*f);return[i+h*o,l+h*f]}function De(n){var t=n[0],e=n[n.length-1];return!(t[0]-e[0]||t[1]-e[1])}function Pe(){rr(this),this.edge=this.site=this.circle=null}function Ue(n){var t=cl.pop()||new Pe;return t.site=n,t}function je(n){Be(n),ol.remove(n),cl.push(n),rr(n)}function Fe(n){var t=n.circle,e=t.x,r=t.cy,i={x:e,y:r},u=n.P,o=n.N,a=[n];je(n);for(var l=u;l.circle&&xo(e-l.circle.x)<Uo&&xo(r-l.circle.cy)<Uo;)u=l.P,a.unshift(l),je(l),l=u;a.unshift(l),Be(l);for(var c=o;c.circle&&xo(e-c.circle.x)<Uo&&xo(r-c.circle.cy)<Uo;)o=c.N,a.push(c),je(c),c=o;a.push(c),Be(c);var f,s=a.length;for(f=1;s>f;++f)c=a[f],l=a[f-1],nr(c.edge,l.site,c.site,i);l=a[0],c=a[s-1],c.edge=Ke(l.site,c.site,null,i),$e(l),$e(c)}function He(n){for(var t,e,r,i,u=n.x,o=n.y,a=ol._;a;)if(r=Oe(a,o)-u,r>Uo)a=a.L;else{if(i=u-Ie(a,o),!(i>Uo)){r>-Uo?(t=a.P,e=a):i>-Uo?(t=a,e=a.N):t=e=a;break}if(!a.R){t=a;break}a=a.R}var l=Ue(n);if(ol.insert(t,l),t||e){if(t===e)return Be(t),e=Ue(t.site),ol.insert(l,e),l.edge=e.edge=Ke(t.site,l.site),$e(t),void $e(e);if(!e)return void(l.edge=Ke(t.site,l.site));Be(t),Be(e);var c=t.site,f=c.x,s=c.y,h=n.x-f,p=n.y-s,g=e.site,v=g.x-f,d=g.y-s,y=2*(h*d-p*v),m=h*h+p*p,M=v*v+d*d,x={x:(d*m-p*M)/y+f,y:(h*M-v*m)/y+s};nr(e.edge,c,g,x),l.edge=Ke(c,n,null,x),e.edge=Ke(n,g,null,x),$e(t),$e(e)}}function Oe(n,t){var e=n.site,r=e.x,i=e.y,u=i-t;if(!u)return r;var o=n.P;if(!o)return-(1/0);e=o.site;var a=e.x,l=e.y,c=l-t;if(!c)return a;var f=a-r,s=1/u-1/c,h=f/c;return s?(-h+Math.sqrt(h*h-2*s*(f*f/(-2*c)-l+c/2+i-u/2)))/s+r:(r+a)/2}function Ie(n,t){var e=n.N;if(e)return Oe(e,t);var r=n.site;return r.y===t?r.x:1/0}function Ye(n){this.site=n,this.edges=[]}function Ze(n){for(var t,e,r,i,u,o,a,l,c,f,s=n[0][0],h=n[1][0],p=n[0][1],g=n[1][1],v=ul,d=v.length;d--;)if(u=v[d],u&&u.prepare())for(a=u.edges,l=a.length,o=0;l>o;)f=a[o].end(),r=f.x,i=f.y,c=a[++o%l].start(),t=c.x,e=c.y,(xo(r-t)>Uo||xo(i-e)>Uo)&&(a.splice(o,0,new tr(Qe(u.site,f,xo(r-s)<Uo&&g-i>Uo?{x:s,y:xo(t-s)<Uo?e:g}:xo(i-g)<Uo&&h-r>Uo?{x:xo(e-g)<Uo?t:h,y:g}:xo(r-h)<Uo&&i-p>Uo?{x:h,y:xo(t-h)<Uo?e:p}:xo(i-p)<Uo&&r-s>Uo?{x:xo(e-p)<Uo?t:s,y:p}:null),u.site,null)),++l)}function Ve(n,t){return t.angle-n.angle}function Xe(){rr(this),this.x=this.y=this.arc=this.site=this.cy=null}function $e(n){var t=n.P,e=n.N;if(t&&e){var r=t.site,i=n.site,u=e.site;if(r!==u){var o=i.x,a=i.y,l=r.x-o,c=r.y-a,f=u.x-o,s=u.y-a,h=2*(l*s-c*f);if(!(h>=-jo)){var p=l*l+c*c,g=f*f+s*s,v=(s*p-c*g)/h,d=(l*g-f*p)/h,s=d+a,y=fl.pop()||new Xe;y.arc=n,y.site=i,y.x=v+o,y.y=s+Math.sqrt(v*v+d*d),y.cy=s,n.circle=y;for(var m=null,M=ll._;M;)if(y.y<M.y||y.y===M.y&&y.x<=M.x){if(!M.L){m=M.P;break}M=M.L}else{if(!M.R){m=M;break}M=M.R}ll.insert(m,y),m||(al=y)}}}}function Be(n){var t=n.circle;t&&(t.P||(al=t.N),ll.remove(t),fl.push(t),rr(t),n.circle=null)}function We(n){for(var t,e=il,r=Yt(n[0][0],n[0][1],n[1][0],n[1][1]),i=e.length;i--;)t=e[i],(!Je(t,n)||!r(t)||xo(t.a.x-t.b.x)<Uo&&xo(t.a.y-t.b.y)<Uo)&&(t.a=t.b=null,e.splice(i,1))}function Je(n,t){var e=n.b;if(e)return!0;var r,i,u=n.a,o=t[0][0],a=t[1][0],l=t[0][1],c=t[1][1],f=n.l,s=n.r,h=f.x,p=f.y,g=s.x,v=s.y,d=(h+g)/2,y=(p+v)/2;if(v===p){if(o>d||d>=a)return;if(h>g){if(u){if(u.y>=c)return}else u={x:d,y:l};e={x:d,y:c}}else{if(u){if(u.y<l)return}else u={x:d,y:c};e={x:d,y:l}}}else if(r=(h-g)/(v-p),i=y-r*d,-1>r||r>1)if(h>g){if(u){if(u.y>=c)return}else u={x:(l-i)/r,y:l};e={x:(c-i)/r,y:c}}else{if(u){if(u.y<l)return}else u={x:(c-i)/r,y:c};e={x:(l-i)/r,y:l}}else if(v>p){if(u){if(u.x>=a)return}else u={x:o,y:r*o+i};e={x:a,y:r*a+i}}else{if(u){if(u.x<o)return}else u={x:a,y:r*a+i};e={x:o,y:r*o+i}}return n.a=u,n.b=e,!0}function Ge(n,t){this.l=n,this.r=t,this.a=this.b=null}function Ke(n,t,e,r){var i=new Ge(n,t);return il.push(i),e&&nr(i,n,t,e),r&&nr(i,t,n,r),ul[n.i].edges.push(new tr(i,n,t)),ul[t.i].edges.push(new tr(i,t,n)),i}function Qe(n,t,e){var r=new Ge(n,null);return r.a=t,r.b=e,il.push(r),r}function nr(n,t,e,r){n.a||n.b?n.l===e?n.b=r:n.a=r:(n.a=r,n.l=t,n.r=e)}function tr(n,t,e){var r=n.a,i=n.b;this.edge=n,this.site=t,this.angle=e?Math.atan2(e.y-t.y,e.x-t.x):n.l===t?Math.atan2(i.x-r.x,r.y-i.y):Math.atan2(r.x-i.x,i.y-r.y)}function er(){this._=null}function rr(n){n.U=n.C=n.L=n.R=n.P=n.N=null}function ir(n,t){var e=t,r=t.R,i=e.U;i?i.L===e?i.L=r:i.R=r:n._=r,r.U=i,e.U=r,e.R=r.L,e.R&&(e.R.U=e),r.L=e}function ur(n,t){var e=t,r=t.L,i=e.U;i?i.L===e?i.L=r:i.R=r:n._=r,r.U=i,e.U=r,e.L=r.R,e.L&&(e.L.U=e),r.R=e}function or(n){for(;n.L;)n=n.L;return n}function ar(n,t){var e,r,i,u=n.sort(lr).pop();for(il=[],ul=new Array(n.length),ol=new er,ll=new er;;)if(i=al,u&&(!i||u.y<i.y||u.y===i.y&&u.x<i.x))u.x===e&&u.y===r||(ul[u.i]=new Ye(u),He(u),e=u.x,r=u.y),u=n.pop();else{if(!i)break;Fe(i.arc)}t&&(We(t),Ze(t));var o={cells:ul,edges:il};return ol=ll=il=ul=null,o}function lr(n,t){return t.y-n.y||t.x-n.x}function cr(n,t,e){return(n.x-e.x)*(t.y-n.y)-(n.x-t.x)*(e.y-n.y)}function fr(n){return n.x}function sr(n){return n.y}function hr(){return{leaf:!0,nodes:[],point:null,x:null,y:null}}function pr(n,t,e,r,i,u){if(!n(t,e,r,i,u)){var o=.5*(e+i),a=.5*(r+u),l=t.nodes;l[0]&&pr(n,l[0],e,r,o,a),l[1]&&pr(n,l[1],o,r,i,a),l[2]&&pr(n,l[2],e,a,o,u),l[3]&&pr(n,l[3],o,a,i,u)}}function gr(n,t,e,r,i,u,o){var a,l=1/0;return function c(n,f,s,h,p){if(!(f>u||s>o||r>h||i>p)){if(g=n.point){var g,v=t-n.x,d=e-n.y,y=v*v+d*d;if(l>y){var m=Math.sqrt(l=y);r=t-m,i=e-m,u=t+m,o=e+m,a=g}}for(var M=n.nodes,x=.5*(f+h),b=.5*(s+p),_=t>=x,w=e>=b,S=w<<1|_,k=S+4;k>S;++S)if(n=M[3&S])switch(3&S){case 0:c(n,f,s,x,b);break;case 1:c(n,x,s,h,b);break;case 2:c(n,f,b,x,p);break;case 3:c(n,x,b,h,p)}}}(n,r,i,u,o),a}function vr(n,t){n=ao.rgb(n),t=ao.rgb(t);var e=n.r,r=n.g,i=n.b,u=t.r-e,o=t.g-r,a=t.b-i;return function(n){return"#"+bn(Math.round(e+u*n))+bn(Math.round(r+o*n))+bn(Math.round(i+a*n))}}function dr(n,t){var e,r={},i={};for(e in n)e in t?r[e]=Mr(n[e],t[e]):i[e]=n[e];for(e in t)e in n||(i[e]=t[e]);return function(n){for(e in r)i[e]=r[e](n);return i}}function yr(n,t){return n=+n,t=+t,function(e){return n*(1-e)+t*e}}function mr(n,t){var e,r,i,u=hl.lastIndex=pl.lastIndex=0,o=-1,a=[],l=[];for(n+="",t+="";(e=hl.exec(n))&&(r=pl.exec(t));)(i=r.index)>u&&(i=t.slice(u,i),a[o]?a[o]+=i:a[++o]=i),(e=e[0])===(r=r[0])?a[o]?a[o]+=r:a[++o]=r:(a[++o]=null,l.push({i:o,x:yr(e,r)})),u=pl.lastIndex;return u<t.length&&(i=t.slice(u),a[o]?a[o]+=i:a[++o]=i),a.length<2?l[0]?(t=l[0].x,function(n){return t(n)+""}):function(){return t}:(t=l.length,function(n){for(var e,r=0;t>r;++r)a[(e=l[r]).i]=e.x(n);return a.join("")})}function Mr(n,t){for(var e,r=ao.interpolators.length;--r>=0&&!(e=ao.interpolators[r](n,t)););return e}function xr(n,t){var e,r=[],i=[],u=n.length,o=t.length,a=Math.min(n.length,t.length);for(e=0;a>e;++e)r.push(Mr(n[e],t[e]));for(;u>e;++e)i[e]=n[e];for(;o>e;++e)i[e]=t[e];return function(n){for(e=0;a>e;++e)i[e]=r[e](n);return i}}function br(n){return function(t){return 0>=t?0:t>=1?1:n(t)}}function _r(n){return function(t){return 1-n(1-t)}}function wr(n){return function(t){return.5*(.5>t?n(2*t):2-n(2-2*t))}}function Sr(n){return n*n}function kr(n){return n*n*n}function Nr(n){if(0>=n)return 0;if(n>=1)return 1;var t=n*n,e=t*n;return 4*(.5>n?e:3*(n-t)+e-.75)}function Er(n){return function(t){return Math.pow(t,n)}}function Ar(n){return 1-Math.cos(n*Io)}function Cr(n){return Math.pow(2,10*(n-1))}function zr(n){return 1-Math.sqrt(1-n*n)}function Lr(n,t){var e;return arguments.length<2&&(t=.45),arguments.length?e=t/Ho*Math.asin(1/n):(n=1,e=t/4),function(r){return 1+n*Math.pow(2,-10*r)*Math.sin((r-e)*Ho/t)}}function qr(n){return n||(n=1.70158),function(t){return t*t*((n+1)*t-n)}}function Tr(n){return 1/2.75>n?7.5625*n*n:2/2.75>n?7.5625*(n-=1.5/2.75)*n+.75:2.5/2.75>n?7.5625*(n-=2.25/2.75)*n+.9375:7.5625*(n-=2.625/2.75)*n+.984375}function Rr(n,t){n=ao.hcl(n),t=ao.hcl(t);var e=n.h,r=n.c,i=n.l,u=t.h-e,o=t.c-r,a=t.l-i;return isNaN(o)&&(o=0,r=isNaN(r)?t.c:r),isNaN(u)?(u=0,e=isNaN(e)?t.h:e):u>180?u-=360:-180>u&&(u+=360),function(n){return sn(e+u*n,r+o*n,i+a*n)+""}}function Dr(n,t){n=ao.hsl(n),t=ao.hsl(t);var e=n.h,r=n.s,i=n.l,u=t.h-e,o=t.s-r,a=t.l-i;return isNaN(o)&&(o=0,r=isNaN(r)?t.s:r),isNaN(u)?(u=0,e=isNaN(e)?t.h:e):u>180?u-=360:-180>u&&(u+=360),function(n){return cn(e+u*n,r+o*n,i+a*n)+""}}function Pr(n,t){n=ao.lab(n),t=ao.lab(t);var e=n.l,r=n.a,i=n.b,u=t.l-e,o=t.a-r,a=t.b-i;return function(n){return pn(e+u*n,r+o*n,i+a*n)+""}}function Ur(n,t){return t-=n,function(e){return Math.round(n+t*e)}}function jr(n){var t=[n.a,n.b],e=[n.c,n.d],r=Hr(t),i=Fr(t,e),u=Hr(Or(e,t,-i))||0;t[0]*e[1]<e[0]*t[1]&&(t[0]*=-1,t[1]*=-1,r*=-1,i*=-1),this.rotate=(r?Math.atan2(t[1],t[0]):Math.atan2(-e[0],e[1]))*Zo,this.translate=[n.e,n.f],this.scale=[r,u],this.skew=u?Math.atan2(i,u)*Zo:0}function Fr(n,t){return n[0]*t[0]+n[1]*t[1]}function Hr(n){var t=Math.sqrt(Fr(n,n));return t&&(n[0]/=t,n[1]/=t),t}function Or(n,t,e){return n[0]+=e*t[0],n[1]+=e*t[1],n}function Ir(n){return n.length?n.pop()+",":""}function Yr(n,t,e,r){if(n[0]!==t[0]||n[1]!==t[1]){var i=e.push("translate(",null,",",null,")");r.push({i:i-4,x:yr(n[0],t[0])},{i:i-2,x:yr(n[1],t[1])})}else(t[0]||t[1])&&e.push("translate("+t+")")}function Zr(n,t,e,r){n!==t?(n-t>180?t+=360:t-n>180&&(n+=360),r.push({i:e.push(Ir(e)+"rotate(",null,")")-2,x:yr(n,t)})):t&&e.push(Ir(e)+"rotate("+t+")")}function Vr(n,t,e,r){n!==t?r.push({i:e.push(Ir(e)+"skewX(",null,")")-2,x:yr(n,t)}):t&&e.push(Ir(e)+"skewX("+t+")")}function Xr(n,t,e,r){if(n[0]!==t[0]||n[1]!==t[1]){var i=e.push(Ir(e)+"scale(",null,",",null,")");r.push({i:i-4,x:yr(n[0],t[0])},{i:i-2,x:yr(n[1],t[1])})}else 1===t[0]&&1===t[1]||e.push(Ir(e)+"scale("+t+")")}function $r(n,t){var e=[],r=[];return n=ao.transform(n),t=ao.transform(t),Yr(n.translate,t.translate,e,r),Zr(n.rotate,t.rotate,e,r),Vr(n.skew,t.skew,e,r),Xr(n.scale,t.scale,e,r),n=t=null,function(n){for(var t,i=-1,u=r.length;++i<u;)e[(t=r[i]).i]=t.x(n);return e.join("")}}function Br(n,t){return t=(t-=n=+n)||1/t,function(e){return(e-n)/t}}function Wr(n,t){return t=(t-=n=+n)||1/t,function(e){return Math.max(0,Math.min(1,(e-n)/t))}}function Jr(n){for(var t=n.source,e=n.target,r=Kr(t,e),i=[t];t!==r;)t=t.parent,i.push(t);for(var u=i.length;e!==r;)i.splice(u,0,e),e=e.parent;return i}function Gr(n){for(var t=[],e=n.parent;null!=e;)t.push(n),n=e,e=e.parent;return t.push(n),t}function Kr(n,t){if(n===t)return n;for(var e=Gr(n),r=Gr(t),i=e.pop(),u=r.pop(),o=null;i===u;)o=i,i=e.pop(),u=r.pop();return o}function Qr(n){n.fixed|=2}function ni(n){n.fixed&=-7}function ti(n){n.fixed|=4,n.px=n.x,n.py=n.y}function ei(n){n.fixed&=-5}function ri(n,t,e){var r=0,i=0;if(n.charge=0,!n.leaf)for(var u,o=n.nodes,a=o.length,l=-1;++l<a;)u=o[l],null!=u&&(ri(u,t,e),n.charge+=u.charge,r+=u.charge*u.cx,i+=u.charge*u.cy);if(n.point){n.leaf||(n.point.x+=Math.random()-.5,n.point.y+=Math.random()-.5);var c=t*e[n.point.index];n.charge+=n.pointCharge=c,r+=c*n.point.x,i+=c*n.point.y}n.cx=r/n.charge,n.cy=i/n.charge}function ii(n,t){return ao.rebind(n,t,"sort","children","value"),n.nodes=n,n.links=fi,n}function ui(n,t){for(var e=[n];null!=(n=e.pop());)if(t(n),(i=n.children)&&(r=i.length))for(var r,i;--r>=0;)e.push(i[r])}function oi(n,t){for(var e=[n],r=[];null!=(n=e.pop());)if(r.push(n),(u=n.children)&&(i=u.length))for(var i,u,o=-1;++o<i;)e.push(u[o]);for(;null!=(n=r.pop());)t(n)}function ai(n){return n.children}function li(n){return n.value}function ci(n,t){return t.value-n.value}function fi(n){return ao.merge(n.map(function(n){return(n.children||[]).map(function(t){return{source:n,target:t}})}))}function si(n){return n.x}function hi(n){return n.y}function pi(n,t,e){n.y0=t,n.y=e}function gi(n){return ao.range(n.length)}function vi(n){for(var t=-1,e=n[0].length,r=[];++t<e;)r[t]=0;return r}function di(n){for(var t,e=1,r=0,i=n[0][1],u=n.length;u>e;++e)(t=n[e][1])>i&&(r=e,i=t);return r}function yi(n){return n.reduce(mi,0)}function mi(n,t){return n+t[1]}function Mi(n,t){return xi(n,Math.ceil(Math.log(t.length)/Math.LN2+1))}function xi(n,t){for(var e=-1,r=+n[0],i=(n[1]-r)/t,u=[];++e<=t;)u[e]=i*e+r;return u}function bi(n){return[ao.min(n),ao.max(n)]}function _i(n,t){return n.value-t.value}function wi(n,t){var e=n._pack_next;n._pack_next=t,t._pack_prev=n,t._pack_next=e,e._pack_prev=t}function Si(n,t){n._pack_next=t,t._pack_prev=n}function ki(n,t){var e=t.x-n.x,r=t.y-n.y,i=n.r+t.r;return.999*i*i>e*e+r*r}function Ni(n){function t(n){f=Math.min(n.x-n.r,f),s=Math.max(n.x+n.r,s),h=Math.min(n.y-n.r,h),p=Math.max(n.y+n.r,p)}if((e=n.children)&&(c=e.length)){var e,r,i,u,o,a,l,c,f=1/0,s=-(1/0),h=1/0,p=-(1/0);if(e.forEach(Ei),r=e[0],r.x=-r.r,r.y=0,t(r),c>1&&(i=e[1],i.x=i.r,i.y=0,t(i),c>2))for(u=e[2],zi(r,i,u),t(u),wi(r,u),r._pack_prev=u,wi(u,i),i=r._pack_next,o=3;c>o;o++){zi(r,i,u=e[o]);var g=0,v=1,d=1;for(a=i._pack_next;a!==i;a=a._pack_next,v++)if(ki(a,u)){g=1;break}if(1==g)for(l=r._pack_prev;l!==a._pack_prev&&!ki(l,u);l=l._pack_prev,d++);g?(d>v||v==d&&i.r<r.r?Si(r,i=a):Si(r=l,i),o--):(wi(r,u),i=u,t(u))}var y=(f+s)/2,m=(h+p)/2,M=0;for(o=0;c>o;o++)u=e[o],u.x-=y,u.y-=m,M=Math.max(M,u.r+Math.sqrt(u.x*u.x+u.y*u.y));n.r=M,e.forEach(Ai)}}function Ei(n){n._pack_next=n._pack_prev=n}function Ai(n){delete n._pack_next,delete n._pack_prev}function Ci(n,t,e,r){var i=n.children;if(n.x=t+=r*n.x,n.y=e+=r*n.y,n.r*=r,i)for(var u=-1,o=i.length;++u<o;)Ci(i[u],t,e,r)}function zi(n,t,e){var r=n.r+e.r,i=t.x-n.x,u=t.y-n.y;if(r&&(i||u)){var o=t.r+e.r,a=i*i+u*u;o*=o,r*=r;var l=.5+(r-o)/(2*a),c=Math.sqrt(Math.max(0,2*o*(r+a)-(r-=a)*r-o*o))/(2*a);e.x=n.x+l*i+c*u,e.y=n.y+l*u-c*i}else e.x=n.x+r,e.y=n.y}function Li(n,t){return n.parent==t.parent?1:2}function qi(n){var t=n.children;return t.length?t[0]:n.t}function Ti(n){var t,e=n.children;return(t=e.length)?e[t-1]:n.t}function Ri(n,t,e){var r=e/(t.i-n.i);t.c-=r,t.s+=e,n.c+=r,t.z+=e,t.m+=e}function Di(n){for(var t,e=0,r=0,i=n.children,u=i.length;--u>=0;)t=i[u],t.z+=e,t.m+=e,e+=t.s+(r+=t.c)}function Pi(n,t,e){return n.a.parent===t.parent?n.a:e}function Ui(n){return 1+ao.max(n,function(n){return n.y})}function ji(n){return n.reduce(function(n,t){return n+t.x},0)/n.length}function Fi(n){var t=n.children;return t&&t.length?Fi(t[0]):n}function Hi(n){var t,e=n.children;return e&&(t=e.length)?Hi(e[t-1]):n}function Oi(n){return{x:n.x,y:n.y,dx:n.dx,dy:n.dy}}function Ii(n,t){var e=n.x+t[3],r=n.y+t[0],i=n.dx-t[1]-t[3],u=n.dy-t[0]-t[2];return 0>i&&(e+=i/2,i=0),0>u&&(r+=u/2,u=0),{x:e,y:r,dx:i,dy:u}}function Yi(n){var t=n[0],e=n[n.length-1];return e>t?[t,e]:[e,t]}function Zi(n){return n.rangeExtent?n.rangeExtent():Yi(n.range())}function Vi(n,t,e,r){var i=e(n[0],n[1]),u=r(t[0],t[1]);return function(n){return u(i(n))}}function Xi(n,t){var e,r=0,i=n.length-1,u=n[r],o=n[i];return u>o&&(e=r,r=i,i=e,e=u,u=o,o=e),n[r]=t.floor(u),n[i]=t.ceil(o),n}function $i(n){return n?{floor:function(t){return Math.floor(t/n)*n},ceil:function(t){return Math.ceil(t/n)*n}}:Sl}function Bi(n,t,e,r){var i=[],u=[],o=0,a=Math.min(n.length,t.length)-1;for(n[a]<n[0]&&(n=n.slice().reverse(),t=t.slice().reverse());++o<=a;)i.push(e(n[o-1],n[o])),u.push(r(t[o-1],t[o]));return function(t){var e=ao.bisect(n,t,1,a)-1;return u[e](i[e](t))}}function Wi(n,t,e,r){function i(){var i=Math.min(n.length,t.length)>2?Bi:Vi,l=r?Wr:Br;return o=i(n,t,l,e),a=i(t,n,l,Mr),u}function u(n){return o(n)}var o,a;return u.invert=function(n){return a(n)},u.domain=function(t){return arguments.length?(n=t.map(Number),i()):n},u.range=function(n){return arguments.length?(t=n,i()):t},u.rangeRound=function(n){return u.range(n).interpolate(Ur)},u.clamp=function(n){return arguments.length?(r=n,i()):r},u.interpolate=function(n){return arguments.length?(e=n,i()):e},u.ticks=function(t){return Qi(n,t)},u.tickFormat=function(t,e){return nu(n,t,e)},u.nice=function(t){return Gi(n,t),i()},u.copy=function(){return Wi(n,t,e,r)},i()}function Ji(n,t){return ao.rebind(n,t,"range","rangeRound","interpolate","clamp")}function Gi(n,t){return Xi(n,$i(Ki(n,t)[2])),Xi(n,$i(Ki(n,t)[2])),n}function Ki(n,t){null==t&&(t=10);var e=Yi(n),r=e[1]-e[0],i=Math.pow(10,Math.floor(Math.log(r/t)/Math.LN10)),u=t/r*i;return.15>=u?i*=10:.35>=u?i*=5:.75>=u&&(i*=2),e[0]=Math.ceil(e[0]/i)*i,e[1]=Math.floor(e[1]/i)*i+.5*i,e[2]=i,e}function Qi(n,t){return ao.range.apply(ao,Ki(n,t))}function nu(n,t,e){var r=Ki(n,t);if(e){var i=ha.exec(e);if(i.shift(),"s"===i[8]){var u=ao.formatPrefix(Math.max(xo(r[0]),xo(r[1])));return i[7]||(i[7]="."+tu(u.scale(r[2]))),i[8]="f",e=ao.format(i.join("")),function(n){return e(u.scale(n))+u.symbol}}i[7]||(i[7]="."+eu(i[8],r)),e=i.join("")}else e=",."+tu(r[2])+"f";return ao.format(e)}function tu(n){return-Math.floor(Math.log(n)/Math.LN10+.01)}function eu(n,t){var e=tu(t[2]);return n in kl?Math.abs(e-tu(Math.max(xo(t[0]),xo(t[1]))))+ +("e"!==n):e-2*("%"===n)}function ru(n,t,e,r){function i(n){return(e?Math.log(0>n?0:n):-Math.log(n>0?0:-n))/Math.log(t)}function u(n){return e?Math.pow(t,n):-Math.pow(t,-n)}function o(t){return n(i(t))}return o.invert=function(t){return u(n.invert(t))},o.domain=function(t){return arguments.length?(e=t[0]>=0,n.domain((r=t.map(Number)).map(i)),o):r},o.base=function(e){return arguments.length?(t=+e,n.domain(r.map(i)),o):t},o.nice=function(){var t=Xi(r.map(i),e?Math:El);return n.domain(t),r=t.map(u),o},o.ticks=function(){var n=Yi(r),o=[],a=n[0],l=n[1],c=Math.floor(i(a)),f=Math.ceil(i(l)),s=t%1?2:t;if(isFinite(f-c)){if(e){for(;f>c;c++)for(var h=1;s>h;h++)o.push(u(c)*h);o.push(u(c))}else for(o.push(u(c));c++<f;)for(var h=s-1;h>0;h--)o.push(u(c)*h);for(c=0;o[c]<a;c++);for(f=o.length;o[f-1]>l;f--);o=o.slice(c,f)}return o},o.tickFormat=function(n,e){if(!arguments.length)return Nl;arguments.length<2?e=Nl:"function"!=typeof e&&(e=ao.format(e));var r=Math.max(1,t*n/o.ticks().length);return function(n){var o=n/u(Math.round(i(n)));return t-.5>o*t&&(o*=t),r>=o?e(n):""}},o.copy=function(){return ru(n.copy(),t,e,r)},Ji(o,n)}function iu(n,t,e){function r(t){return n(i(t))}var i=uu(t),u=uu(1/t);return r.invert=function(t){return u(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain((e=t.map(Number)).map(i)),r):e},r.ticks=function(n){return Qi(e,n)},r.tickFormat=function(n,t){return nu(e,n,t)},r.nice=function(n){return r.domain(Gi(e,n))},r.exponent=function(o){return arguments.length?(i=uu(t=o),u=uu(1/t),n.domain(e.map(i)),r):t},r.copy=function(){return iu(n.copy(),t,e)},Ji(r,n)}function uu(n){return function(t){return 0>t?-Math.pow(-t,n):Math.pow(t,n)}}function ou(n,t){function e(e){return u[((i.get(e)||("range"===t.t?i.set(e,n.push(e)):NaN))-1)%u.length]}function r(t,e){return ao.range(n.length).map(function(n){return t+e*n})}var i,u,o;return e.domain=function(r){if(!arguments.length)return n;n=[],i=new c;for(var u,o=-1,a=r.length;++o<a;)i.has(u=r[o])||i.set(u,n.push(u));return e[t.t].apply(e,t.a)},e.range=function(n){return arguments.length?(u=n,o=0,t={t:"range",a:arguments},e):u},e.rangePoints=function(i,a){arguments.length<2&&(a=0);var l=i[0],c=i[1],f=n.length<2?(l=(l+c)/2,0):(c-l)/(n.length-1+a);return u=r(l+f*a/2,f),o=0,t={t:"rangePoints",a:arguments},e},e.rangeRoundPoints=function(i,a){arguments.length<2&&(a=0);var l=i[0],c=i[1],f=n.length<2?(l=c=Math.round((l+c)/2),0):(c-l)/(n.length-1+a)|0;return u=r(l+Math.round(f*a/2+(c-l-(n.length-1+a)*f)/2),f),o=0,t={t:"rangeRoundPoints",a:arguments},e},e.rangeBands=function(i,a,l){arguments.length<2&&(a=0),arguments.length<3&&(l=a);var c=i[1]<i[0],f=i[c-0],s=i[1-c],h=(s-f)/(n.length-a+2*l);return u=r(f+h*l,h),c&&u.reverse(),o=h*(1-a),t={t:"rangeBands",a:arguments},e},e.rangeRoundBands=function(i,a,l){arguments.length<2&&(a=0),arguments.length<3&&(l=a);var c=i[1]<i[0],f=i[c-0],s=i[1-c],h=Math.floor((s-f)/(n.length-a+2*l));return u=r(f+Math.round((s-f-(n.length-a)*h)/2),h),c&&u.reverse(),o=Math.round(h*(1-a)),t={t:"rangeRoundBands",a:arguments},e},e.rangeBand=function(){return o},e.rangeExtent=function(){return Yi(t.a[0])},e.copy=function(){return ou(n,t)},e.domain(n)}function au(n,t){function u(){var e=0,r=t.length;for(a=[];++e<r;)a[e-1]=ao.quantile(n,e/r);return o}function o(n){return isNaN(n=+n)?void 0:t[ao.bisect(a,n)]}var a;return o.domain=function(t){return arguments.length?(n=t.map(r).filter(i).sort(e),u()):n},o.range=function(n){return arguments.length?(t=n,u()):t},o.quantiles=function(){return a},o.invertExtent=function(e){return e=t.indexOf(e),0>e?[NaN,NaN]:[e>0?a[e-1]:n[0],e<a.length?a[e]:n[n.length-1]]},o.copy=function(){return au(n,t)},u()}function lu(n,t,e){function r(t){return e[Math.max(0,Math.min(o,Math.floor(u*(t-n))))]}function i(){return u=e.length/(t-n),o=e.length-1,r}var u,o;return r.domain=function(e){return arguments.length?(n=+e[0],t=+e[e.length-1],i()):[n,t]},r.range=function(n){return arguments.length?(e=n,i()):e},r.invertExtent=function(t){return t=e.indexOf(t),t=0>t?NaN:t/u+n,[t,t+1/u]},r.copy=function(){return lu(n,t,e)},i()}function cu(n,t){function e(e){return e>=e?t[ao.bisect(n,e)]:void 0}return e.domain=function(t){return arguments.length?(n=t,e):n},e.range=function(n){return arguments.length?(t=n,e):t},e.invertExtent=function(e){return e=t.indexOf(e),[n[e-1],n[e]]},e.copy=function(){return cu(n,t)},e}function fu(n){function t(n){return+n}return t.invert=t,t.domain=t.range=function(e){return arguments.length?(n=e.map(t),t):n},t.ticks=function(t){return Qi(n,t)},t.tickFormat=function(t,e){return nu(n,t,e)},t.copy=function(){return fu(n)},t}function su(){return 0}function hu(n){return n.innerRadius}function pu(n){return n.outerRadius}function gu(n){return n.startAngle}function vu(n){return n.endAngle}function du(n){return n&&n.padAngle}function yu(n,t,e,r){return(n-e)*t-(t-r)*n>0?0:1}function mu(n,t,e,r,i){var u=n[0]-t[0],o=n[1]-t[1],a=(i?r:-r)/Math.sqrt(u*u+o*o),l=a*o,c=-a*u,f=n[0]+l,s=n[1]+c,h=t[0]+l,p=t[1]+c,g=(f+h)/2,v=(s+p)/2,d=h-f,y=p-s,m=d*d+y*y,M=e-r,x=f*p-h*s,b=(0>y?-1:1)*Math.sqrt(Math.max(0,M*M*m-x*x)),_=(x*y-d*b)/m,w=(-x*d-y*b)/m,S=(x*y+d*b)/m,k=(-x*d+y*b)/m,N=_-g,E=w-v,A=S-g,C=k-v;return N*N+E*E>A*A+C*C&&(_=S,w=k),[[_-l,w-c],[_*e/M,w*e/M]]}function Mu(n){function t(t){function o(){c.push("M",u(n(f),a))}for(var l,c=[],f=[],s=-1,h=t.length,p=En(e),g=En(r);++s<h;)i.call(this,l=t[s],s)?f.push([+p.call(this,l,s),+g.call(this,l,s)]):f.length&&(o(),f=[]);return f.length&&o(),c.length?c.join(""):null}var e=Ce,r=ze,i=zt,u=xu,o=u.key,a=.7;return t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,t):r},t.defined=function(n){return arguments.length?(i=n,t):i},t.interpolate=function(n){return arguments.length?(o="function"==typeof n?u=n:(u=Tl.get(n)||xu).key,t):o},t.tension=function(n){return arguments.length?(a=n,t):a},t}function xu(n){return n.length>1?n.join("L"):n+"Z"}function bu(n){return n.join("L")+"Z"}function _u(n){for(var t=0,e=n.length,r=n[0],i=[r[0],",",r[1]];++t<e;)i.push("H",(r[0]+(r=n[t])[0])/2,"V",r[1]);return e>1&&i.push("H",r[0]),i.join("")}function wu(n){for(var t=0,e=n.length,r=n[0],i=[r[0],",",r[1]];++t<e;)i.push("V",(r=n[t])[1],"H",r[0]);return i.join("")}function Su(n){for(var t=0,e=n.length,r=n[0],i=[r[0],",",r[1]];++t<e;)i.push("H",(r=n[t])[0],"V",r[1]);return i.join("")}function ku(n,t){return n.length<4?xu(n):n[1]+Au(n.slice(1,-1),Cu(n,t))}function Nu(n,t){return n.length<3?bu(n):n[0]+Au((n.push(n[0]),n),Cu([n[n.length-2]].concat(n,[n[1]]),t))}function Eu(n,t){return n.length<3?xu(n):n[0]+Au(n,Cu(n,t))}function Au(n,t){if(t.length<1||n.length!=t.length&&n.length!=t.length+2)return xu(n);var e=n.length!=t.length,r="",i=n[0],u=n[1],o=t[0],a=o,l=1;if(e&&(r+="Q"+(u[0]-2*o[0]/3)+","+(u[1]-2*o[1]/3)+","+u[0]+","+u[1],i=n[1],l=2),t.length>1){a=t[1],u=n[l],l++,r+="C"+(i[0]+o[0])+","+(i[1]+o[1])+","+(u[0]-a[0])+","+(u[1]-a[1])+","+u[0]+","+u[1];for(var c=2;c<t.length;c++,l++)u=n[l],a=t[c],r+="S"+(u[0]-a[0])+","+(u[1]-a[1])+","+u[0]+","+u[1]}if(e){var f=n[l];r+="Q"+(u[0]+2*a[0]/3)+","+(u[1]+2*a[1]/3)+","+f[0]+","+f[1]}return r}function Cu(n,t){for(var e,r=[],i=(1-t)/2,u=n[0],o=n[1],a=1,l=n.length;++a<l;)e=u,u=o,o=n[a],r.push([i*(o[0]-e[0]),i*(o[1]-e[1])]);return r}function zu(n){if(n.length<3)return xu(n);var t=1,e=n.length,r=n[0],i=r[0],u=r[1],o=[i,i,i,(r=n[1])[0]],a=[u,u,u,r[1]],l=[i,",",u,"L",Ru(Pl,o),",",Ru(Pl,a)];for(n.push(n[e-1]);++t<=e;)r=n[t],o.shift(),o.push(r[0]),a.shift(),a.push(r[1]),Du(l,o,a);return n.pop(),l.push("L",r),l.join("")}function Lu(n){if(n.length<4)return xu(n);for(var t,e=[],r=-1,i=n.length,u=[0],o=[0];++r<3;)t=n[r],u.push(t[0]),o.push(t[1]);for(e.push(Ru(Pl,u)+","+Ru(Pl,o)),--r;++r<i;)t=n[r],u.shift(),u.push(t[0]),o.shift(),o.push(t[1]),Du(e,u,o);return e.join("")}function qu(n){for(var t,e,r=-1,i=n.length,u=i+4,o=[],a=[];++r<4;)e=n[r%i],o.push(e[0]),a.push(e[1]);for(t=[Ru(Pl,o),",",Ru(Pl,a)],--r;++r<u;)e=n[r%i],o.shift(),o.push(e[0]),a.shift(),a.push(e[1]),Du(t,o,a);return t.join("")}function Tu(n,t){var e=n.length-1;if(e)for(var r,i,u=n[0][0],o=n[0][1],a=n[e][0]-u,l=n[e][1]-o,c=-1;++c<=e;)r=n[c],i=c/e,r[0]=t*r[0]+(1-t)*(u+i*a),r[1]=t*r[1]+(1-t)*(o+i*l);return zu(n)}function Ru(n,t){return n[0]*t[0]+n[1]*t[1]+n[2]*t[2]+n[3]*t[3]}function Du(n,t,e){n.push("C",Ru(Rl,t),",",Ru(Rl,e),",",Ru(Dl,t),",",Ru(Dl,e),",",Ru(Pl,t),",",Ru(Pl,e))}function Pu(n,t){return(t[1]-n[1])/(t[0]-n[0])}function Uu(n){for(var t=0,e=n.length-1,r=[],i=n[0],u=n[1],o=r[0]=Pu(i,u);++t<e;)r[t]=(o+(o=Pu(i=u,u=n[t+1])))/2;return r[t]=o,r}function ju(n){for(var t,e,r,i,u=[],o=Uu(n),a=-1,l=n.length-1;++a<l;)t=Pu(n[a],n[a+1]),xo(t)<Uo?o[a]=o[a+1]=0:(e=o[a]/t,r=o[a+1]/t,i=e*e+r*r,i>9&&(i=3*t/Math.sqrt(i),o[a]=i*e,o[a+1]=i*r));for(a=-1;++a<=l;)i=(n[Math.min(l,a+1)][0]-n[Math.max(0,a-1)][0])/(6*(1+o[a]*o[a])),u.push([i||0,o[a]*i||0]);return u}function Fu(n){return n.length<3?xu(n):n[0]+Au(n,ju(n))}function Hu(n){for(var t,e,r,i=-1,u=n.length;++i<u;)t=n[i],e=t[0],r=t[1]-Io,t[0]=e*Math.cos(r),t[1]=e*Math.sin(r);return n}function Ou(n){function t(t){function l(){v.push("M",a(n(y),s),f,c(n(d.reverse()),s),"Z")}for(var h,p,g,v=[],d=[],y=[],m=-1,M=t.length,x=En(e),b=En(i),_=e===r?function(){
return p}:En(r),w=i===u?function(){return g}:En(u);++m<M;)o.call(this,h=t[m],m)?(d.push([p=+x.call(this,h,m),g=+b.call(this,h,m)]),y.push([+_.call(this,h,m),+w.call(this,h,m)])):d.length&&(l(),d=[],y=[]);return d.length&&l(),v.length?v.join(""):null}var e=Ce,r=Ce,i=0,u=ze,o=zt,a=xu,l=a.key,c=a,f="L",s=.7;return t.x=function(n){return arguments.length?(e=r=n,t):r},t.x0=function(n){return arguments.length?(e=n,t):e},t.x1=function(n){return arguments.length?(r=n,t):r},t.y=function(n){return arguments.length?(i=u=n,t):u},t.y0=function(n){return arguments.length?(i=n,t):i},t.y1=function(n){return arguments.length?(u=n,t):u},t.defined=function(n){return arguments.length?(o=n,t):o},t.interpolate=function(n){return arguments.length?(l="function"==typeof n?a=n:(a=Tl.get(n)||xu).key,c=a.reverse||a,f=a.closed?"M":"L",t):l},t.tension=function(n){return arguments.length?(s=n,t):s},t}function Iu(n){return n.radius}function Yu(n){return[n.x,n.y]}function Zu(n){return function(){var t=n.apply(this,arguments),e=t[0],r=t[1]-Io;return[e*Math.cos(r),e*Math.sin(r)]}}function Vu(){return 64}function Xu(){return"circle"}function $u(n){var t=Math.sqrt(n/Fo);return"M0,"+t+"A"+t+","+t+" 0 1,1 0,"+-t+"A"+t+","+t+" 0 1,1 0,"+t+"Z"}function Bu(n){return function(){var t,e,r;(t=this[n])&&(r=t[e=t.active])&&(r.timer.c=null,r.timer.t=NaN,--t.count?delete t[e]:delete this[n],t.active+=.5,r.event&&r.event.interrupt.call(this,this.__data__,r.index))}}function Wu(n,t,e){return ko(n,Yl),n.namespace=t,n.id=e,n}function Ju(n,t,e,r){var i=n.id,u=n.namespace;return Y(n,"function"==typeof e?function(n,o,a){n[u][i].tween.set(t,r(e.call(n,n.__data__,o,a)))}:(e=r(e),function(n){n[u][i].tween.set(t,e)}))}function Gu(n){return null==n&&(n=""),function(){this.textContent=n}}function Ku(n){return null==n?"__transition__":"__transition_"+n+"__"}function Qu(n,t,e,r,i){function u(n){var t=v.delay;return f.t=t+l,n>=t?o(n-t):void(f.c=o)}function o(e){var i=g.active,u=g[i];u&&(u.timer.c=null,u.timer.t=NaN,--g.count,delete g[i],u.event&&u.event.interrupt.call(n,n.__data__,u.index));for(var o in g)if(r>+o){var c=g[o];c.timer.c=null,c.timer.t=NaN,--g.count,delete g[o]}f.c=a,qn(function(){return f.c&&a(e||1)&&(f.c=null,f.t=NaN),1},0,l),g.active=r,v.event&&v.event.start.call(n,n.__data__,t),p=[],v.tween.forEach(function(e,r){(r=r.call(n,n.__data__,t))&&p.push(r)}),h=v.ease,s=v.duration}function a(i){for(var u=i/s,o=h(u),a=p.length;a>0;)p[--a].call(n,o);return u>=1?(v.event&&v.event.end.call(n,n.__data__,t),--g.count?delete g[r]:delete n[e],1):void 0}var l,f,s,h,p,g=n[e]||(n[e]={active:0,count:0}),v=g[r];v||(l=i.time,f=qn(u,0,l),v=g[r]={tween:new c,time:l,timer:f,delay:i.delay,duration:i.duration,ease:i.ease,index:t},i=null,++g.count)}function no(n,t,e){n.attr("transform",function(n){var r=t(n);return"translate("+(isFinite(r)?r:e(n))+",0)"})}function to(n,t,e){n.attr("transform",function(n){var r=t(n);return"translate(0,"+(isFinite(r)?r:e(n))+")"})}function eo(n){return n.toISOString()}function ro(n,t,e){function r(t){return n(t)}function i(n,e){var r=n[1]-n[0],i=r/e,u=ao.bisect(Kl,i);return u==Kl.length?[t.year,Ki(n.map(function(n){return n/31536e6}),e)[2]]:u?t[i/Kl[u-1]<Kl[u]/i?u-1:u]:[tc,Ki(n,e)[2]]}return r.invert=function(t){return io(n.invert(t))},r.domain=function(t){return arguments.length?(n.domain(t),r):n.domain().map(io)},r.nice=function(n,t){function e(e){return!isNaN(e)&&!n.range(e,io(+e+1),t).length}var u=r.domain(),o=Yi(u),a=null==n?i(o,10):"number"==typeof n&&i(o,n);return a&&(n=a[0],t=a[1]),r.domain(Xi(u,t>1?{floor:function(t){for(;e(t=n.floor(t));)t=io(t-1);return t},ceil:function(t){for(;e(t=n.ceil(t));)t=io(+t+1);return t}}:n))},r.ticks=function(n,t){var e=Yi(r.domain()),u=null==n?i(e,10):"number"==typeof n?i(e,n):!n.range&&[{range:n},t];return u&&(n=u[0],t=u[1]),n.range(e[0],io(+e[1]+1),1>t?1:t)},r.tickFormat=function(){return e},r.copy=function(){return ro(n.copy(),t,e)},Ji(r,n)}function io(n){return new Date(n)}function uo(n){return JSON.parse(n.responseText)}function oo(n){var t=fo.createRange();return t.selectNode(fo.body),t.createContextualFragment(n.responseText)}var ao={version:"3.5.17"},lo=[].slice,co=function(n){return lo.call(n)},fo=this.document;if(fo)try{co(fo.documentElement.childNodes)[0].nodeType}catch(so){co=function(n){for(var t=n.length,e=new Array(t);t--;)e[t]=n[t];return e}}if(Date.now||(Date.now=function(){return+new Date}),fo)try{fo.createElement("DIV").style.setProperty("opacity",0,"")}catch(ho){var po=this.Element.prototype,go=po.setAttribute,vo=po.setAttributeNS,yo=this.CSSStyleDeclaration.prototype,mo=yo.setProperty;po.setAttribute=function(n,t){go.call(this,n,t+"")},po.setAttributeNS=function(n,t,e){vo.call(this,n,t,e+"")},yo.setProperty=function(n,t,e){mo.call(this,n,t+"",e)}}ao.ascending=e,ao.descending=function(n,t){return n>t?-1:t>n?1:t>=n?0:NaN},ao.min=function(n,t){var e,r,i=-1,u=n.length;if(1===arguments.length){for(;++i<u;)if(null!=(r=n[i])&&r>=r){e=r;break}for(;++i<u;)null!=(r=n[i])&&e>r&&(e=r)}else{for(;++i<u;)if(null!=(r=t.call(n,n[i],i))&&r>=r){e=r;break}for(;++i<u;)null!=(r=t.call(n,n[i],i))&&e>r&&(e=r)}return e},ao.max=function(n,t){var e,r,i=-1,u=n.length;if(1===arguments.length){for(;++i<u;)if(null!=(r=n[i])&&r>=r){e=r;break}for(;++i<u;)null!=(r=n[i])&&r>e&&(e=r)}else{for(;++i<u;)if(null!=(r=t.call(n,n[i],i))&&r>=r){e=r;break}for(;++i<u;)null!=(r=t.call(n,n[i],i))&&r>e&&(e=r)}return e},ao.extent=function(n,t){var e,r,i,u=-1,o=n.length;if(1===arguments.length){for(;++u<o;)if(null!=(r=n[u])&&r>=r){e=i=r;break}for(;++u<o;)null!=(r=n[u])&&(e>r&&(e=r),r>i&&(i=r))}else{for(;++u<o;)if(null!=(r=t.call(n,n[u],u))&&r>=r){e=i=r;break}for(;++u<o;)null!=(r=t.call(n,n[u],u))&&(e>r&&(e=r),r>i&&(i=r))}return[e,i]},ao.sum=function(n,t){var e,r=0,u=n.length,o=-1;if(1===arguments.length)for(;++o<u;)i(e=+n[o])&&(r+=e);else for(;++o<u;)i(e=+t.call(n,n[o],o))&&(r+=e);return r},ao.mean=function(n,t){var e,u=0,o=n.length,a=-1,l=o;if(1===arguments.length)for(;++a<o;)i(e=r(n[a]))?u+=e:--l;else for(;++a<o;)i(e=r(t.call(n,n[a],a)))?u+=e:--l;return l?u/l:void 0},ao.quantile=function(n,t){var e=(n.length-1)*t+1,r=Math.floor(e),i=+n[r-1],u=e-r;return u?i+u*(n[r]-i):i},ao.median=function(n,t){var u,o=[],a=n.length,l=-1;if(1===arguments.length)for(;++l<a;)i(u=r(n[l]))&&o.push(u);else for(;++l<a;)i(u=r(t.call(n,n[l],l)))&&o.push(u);return o.length?ao.quantile(o.sort(e),.5):void 0},ao.variance=function(n,t){var e,u,o=n.length,a=0,l=0,c=-1,f=0;if(1===arguments.length)for(;++c<o;)i(e=r(n[c]))&&(u=e-a,a+=u/++f,l+=u*(e-a));else for(;++c<o;)i(e=r(t.call(n,n[c],c)))&&(u=e-a,a+=u/++f,l+=u*(e-a));return f>1?l/(f-1):void 0},ao.deviation=function(){var n=ao.variance.apply(this,arguments);return n?Math.sqrt(n):n};var Mo=u(e);ao.bisectLeft=Mo.left,ao.bisect=ao.bisectRight=Mo.right,ao.bisector=function(n){return u(1===n.length?function(t,r){return e(n(t),r)}:n)},ao.shuffle=function(n,t,e){(u=arguments.length)<3&&(e=n.length,2>u&&(t=0));for(var r,i,u=e-t;u;)i=Math.random()*u--|0,r=n[u+t],n[u+t]=n[i+t],n[i+t]=r;return n},ao.permute=function(n,t){for(var e=t.length,r=new Array(e);e--;)r[e]=n[t[e]];return r},ao.pairs=function(n){for(var t,e=0,r=n.length-1,i=n[0],u=new Array(0>r?0:r);r>e;)u[e]=[t=i,i=n[++e]];return u},ao.transpose=function(n){if(!(i=n.length))return[];for(var t=-1,e=ao.min(n,o),r=new Array(e);++t<e;)for(var i,u=-1,a=r[t]=new Array(i);++u<i;)a[u]=n[u][t];return r},ao.zip=function(){return ao.transpose(arguments)},ao.keys=function(n){var t=[];for(var e in n)t.push(e);return t},ao.values=function(n){var t=[];for(var e in n)t.push(n[e]);return t},ao.entries=function(n){var t=[];for(var e in n)t.push({key:e,value:n[e]});return t},ao.merge=function(n){for(var t,e,r,i=n.length,u=-1,o=0;++u<i;)o+=n[u].length;for(e=new Array(o);--i>=0;)for(r=n[i],t=r.length;--t>=0;)e[--o]=r[t];return e};var xo=Math.abs;ao.range=function(n,t,e){if(arguments.length<3&&(e=1,arguments.length<2&&(t=n,n=0)),(t-n)/e===1/0)throw new Error("infinite range");var r,i=[],u=a(xo(e)),o=-1;if(n*=u,t*=u,e*=u,0>e)for(;(r=n+e*++o)>t;)i.push(r/u);else for(;(r=n+e*++o)<t;)i.push(r/u);return i},ao.map=function(n,t){var e=new c;if(n instanceof c)n.forEach(function(n,t){e.set(n,t)});else if(Array.isArray(n)){var r,i=-1,u=n.length;if(1===arguments.length)for(;++i<u;)e.set(i,n[i]);else for(;++i<u;)e.set(t.call(n,r=n[i],i),r)}else for(var o in n)e.set(o,n[o]);return e};var bo="__proto__",_o="\x00";l(c,{has:h,get:function(n){return this._[f(n)]},set:function(n,t){return this._[f(n)]=t},remove:p,keys:g,values:function(){var n=[];for(var t in this._)n.push(this._[t]);return n},entries:function(){var n=[];for(var t in this._)n.push({key:s(t),value:this._[t]});return n},size:v,empty:d,forEach:function(n){for(var t in this._)n.call(this,s(t),this._[t])}}),ao.nest=function(){function n(t,o,a){if(a>=u.length)return r?r.call(i,o):e?o.sort(e):o;for(var l,f,s,h,p=-1,g=o.length,v=u[a++],d=new c;++p<g;)(h=d.get(l=v(f=o[p])))?h.push(f):d.set(l,[f]);return t?(f=t(),s=function(e,r){f.set(e,n(t,r,a))}):(f={},s=function(e,r){f[e]=n(t,r,a)}),d.forEach(s),f}function t(n,e){if(e>=u.length)return n;var r=[],i=o[e++];return n.forEach(function(n,i){r.push({key:n,values:t(i,e)})}),i?r.sort(function(n,t){return i(n.key,t.key)}):r}var e,r,i={},u=[],o=[];return i.map=function(t,e){return n(e,t,0)},i.entries=function(e){return t(n(ao.map,e,0),0)},i.key=function(n){return u.push(n),i},i.sortKeys=function(n){return o[u.length-1]=n,i},i.sortValues=function(n){return e=n,i},i.rollup=function(n){return r=n,i},i},ao.set=function(n){var t=new y;if(n)for(var e=0,r=n.length;r>e;++e)t.add(n[e]);return t},l(y,{has:h,add:function(n){return this._[f(n+="")]=!0,n},remove:p,values:g,size:v,empty:d,forEach:function(n){for(var t in this._)n.call(this,s(t))}}),ao.behavior={},ao.rebind=function(n,t){for(var e,r=1,i=arguments.length;++r<i;)n[e=arguments[r]]=M(n,t,t[e]);return n};var wo=["webkit","ms","moz","Moz","o","O"];ao.dispatch=function(){for(var n=new _,t=-1,e=arguments.length;++t<e;)n[arguments[t]]=w(n);return n},_.prototype.on=function(n,t){var e=n.indexOf("."),r="";if(e>=0&&(r=n.slice(e+1),n=n.slice(0,e)),n)return arguments.length<2?this[n].on(r):this[n].on(r,t);if(2===arguments.length){if(null==t)for(n in this)this.hasOwnProperty(n)&&this[n].on(r,null);return this}},ao.event=null,ao.requote=function(n){return n.replace(So,"\\$&")};var So=/[\\\^\$\*\+\?\|\[\]\(\)\.\{\}]/g,ko={}.__proto__?function(n,t){n.__proto__=t}:function(n,t){for(var e in t)n[e]=t[e]},No=function(n,t){return t.querySelector(n)},Eo=function(n,t){return t.querySelectorAll(n)},Ao=function(n,t){var e=n.matches||n[x(n,"matchesSelector")];return(Ao=function(n,t){return e.call(n,t)})(n,t)};"function"==typeof Sizzle&&(No=function(n,t){return Sizzle(n,t)[0]||null},Eo=Sizzle,Ao=Sizzle.matchesSelector),ao.selection=function(){return ao.select(fo.documentElement)};var Co=ao.selection.prototype=[];Co.select=function(n){var t,e,r,i,u=[];n=A(n);for(var o=-1,a=this.length;++o<a;){u.push(t=[]),t.parentNode=(r=this[o]).parentNode;for(var l=-1,c=r.length;++l<c;)(i=r[l])?(t.push(e=n.call(i,i.__data__,l,o)),e&&"__data__"in i&&(e.__data__=i.__data__)):t.push(null)}return E(u)},Co.selectAll=function(n){var t,e,r=[];n=C(n);for(var i=-1,u=this.length;++i<u;)for(var o=this[i],a=-1,l=o.length;++a<l;)(e=o[a])&&(r.push(t=co(n.call(e,e.__data__,a,i))),t.parentNode=e);return E(r)};var zo="http://www.w3.org/1999/xhtml",Lo={svg:"http://www.w3.org/2000/svg",xhtml:zo,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"};ao.ns={prefix:Lo,qualify:function(n){var t=n.indexOf(":"),e=n;return t>=0&&"xmlns"!==(e=n.slice(0,t))&&(n=n.slice(t+1)),Lo.hasOwnProperty(e)?{space:Lo[e],local:n}:n}},Co.attr=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node();return n=ao.ns.qualify(n),n.local?e.getAttributeNS(n.space,n.local):e.getAttribute(n)}for(t in n)this.each(z(t,n[t]));return this}return this.each(z(n,t))},Co.classed=function(n,t){if(arguments.length<2){if("string"==typeof n){var e=this.node(),r=(n=T(n)).length,i=-1;if(t=e.classList){for(;++i<r;)if(!t.contains(n[i]))return!1}else for(t=e.getAttribute("class");++i<r;)if(!q(n[i]).test(t))return!1;return!0}for(t in n)this.each(R(t,n[t]));return this}return this.each(R(n,t))},Co.style=function(n,e,r){var i=arguments.length;if(3>i){if("string"!=typeof n){2>i&&(e="");for(r in n)this.each(P(r,n[r],e));return this}if(2>i){var u=this.node();return t(u).getComputedStyle(u,null).getPropertyValue(n)}r=""}return this.each(P(n,e,r))},Co.property=function(n,t){if(arguments.length<2){if("string"==typeof n)return this.node()[n];for(t in n)this.each(U(t,n[t]));return this}return this.each(U(n,t))},Co.text=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.textContent=null==t?"":t}:null==n?function(){this.textContent=""}:function(){this.textContent=n}):this.node().textContent},Co.html=function(n){return arguments.length?this.each("function"==typeof n?function(){var t=n.apply(this,arguments);this.innerHTML=null==t?"":t}:null==n?function(){this.innerHTML=""}:function(){this.innerHTML=n}):this.node().innerHTML},Co.append=function(n){return n=j(n),this.select(function(){return this.appendChild(n.apply(this,arguments))})},Co.insert=function(n,t){return n=j(n),t=A(t),this.select(function(){return this.insertBefore(n.apply(this,arguments),t.apply(this,arguments)||null)})},Co.remove=function(){return this.each(F)},Co.data=function(n,t){function e(n,e){var r,i,u,o=n.length,s=e.length,h=Math.min(o,s),p=new Array(s),g=new Array(s),v=new Array(o);if(t){var d,y=new c,m=new Array(o);for(r=-1;++r<o;)(i=n[r])&&(y.has(d=t.call(i,i.__data__,r))?v[r]=i:y.set(d,i),m[r]=d);for(r=-1;++r<s;)(i=y.get(d=t.call(e,u=e[r],r)))?i!==!0&&(p[r]=i,i.__data__=u):g[r]=H(u),y.set(d,!0);for(r=-1;++r<o;)r in m&&y.get(m[r])!==!0&&(v[r]=n[r])}else{for(r=-1;++r<h;)i=n[r],u=e[r],i?(i.__data__=u,p[r]=i):g[r]=H(u);for(;s>r;++r)g[r]=H(e[r]);for(;o>r;++r)v[r]=n[r]}g.update=p,g.parentNode=p.parentNode=v.parentNode=n.parentNode,a.push(g),l.push(p),f.push(v)}var r,i,u=-1,o=this.length;if(!arguments.length){for(n=new Array(o=(r=this[0]).length);++u<o;)(i=r[u])&&(n[u]=i.__data__);return n}var a=Z([]),l=E([]),f=E([]);if("function"==typeof n)for(;++u<o;)e(r=this[u],n.call(r,r.parentNode.__data__,u));else for(;++u<o;)e(r=this[u],n);return l.enter=function(){return a},l.exit=function(){return f},l},Co.datum=function(n){return arguments.length?this.property("__data__",n):this.property("__data__")},Co.filter=function(n){var t,e,r,i=[];"function"!=typeof n&&(n=O(n));for(var u=0,o=this.length;o>u;u++){i.push(t=[]),t.parentNode=(e=this[u]).parentNode;for(var a=0,l=e.length;l>a;a++)(r=e[a])&&n.call(r,r.__data__,a,u)&&t.push(r)}return E(i)},Co.order=function(){for(var n=-1,t=this.length;++n<t;)for(var e,r=this[n],i=r.length-1,u=r[i];--i>=0;)(e=r[i])&&(u&&u!==e.nextSibling&&u.parentNode.insertBefore(e,u),u=e);return this},Co.sort=function(n){n=I.apply(this,arguments);for(var t=-1,e=this.length;++t<e;)this[t].sort(n);return this.order()},Co.each=function(n){return Y(this,function(t,e,r){n.call(t,t.__data__,e,r)})},Co.call=function(n){var t=co(arguments);return n.apply(t[0]=this,t),this},Co.empty=function(){return!this.node()},Co.node=function(){for(var n=0,t=this.length;t>n;n++)for(var e=this[n],r=0,i=e.length;i>r;r++){var u=e[r];if(u)return u}return null},Co.size=function(){var n=0;return Y(this,function(){++n}),n};var qo=[];ao.selection.enter=Z,ao.selection.enter.prototype=qo,qo.append=Co.append,qo.empty=Co.empty,qo.node=Co.node,qo.call=Co.call,qo.size=Co.size,qo.select=function(n){for(var t,e,r,i,u,o=[],a=-1,l=this.length;++a<l;){r=(i=this[a]).update,o.push(t=[]),t.parentNode=i.parentNode;for(var c=-1,f=i.length;++c<f;)(u=i[c])?(t.push(r[c]=e=n.call(i.parentNode,u.__data__,c,a)),e.__data__=u.__data__):t.push(null)}return E(o)},qo.insert=function(n,t){return arguments.length<2&&(t=V(this)),Co.insert.call(this,n,t)},ao.select=function(t){var e;return"string"==typeof t?(e=[No(t,fo)],e.parentNode=fo.documentElement):(e=[t],e.parentNode=n(t)),E([e])},ao.selectAll=function(n){var t;return"string"==typeof n?(t=co(Eo(n,fo)),t.parentNode=fo.documentElement):(t=co(n),t.parentNode=null),E([t])},Co.on=function(n,t,e){var r=arguments.length;if(3>r){if("string"!=typeof n){2>r&&(t=!1);for(e in n)this.each(X(e,n[e],t));return this}if(2>r)return(r=this.node()["__on"+n])&&r._;e=!1}return this.each(X(n,t,e))};var To=ao.map({mouseenter:"mouseover",mouseleave:"mouseout"});fo&&To.forEach(function(n){"on"+n in fo&&To.remove(n)});var Ro,Do=0;ao.mouse=function(n){return J(n,k())};var Po=this.navigator&&/WebKit/.test(this.navigator.userAgent)?-1:0;ao.touch=function(n,t,e){if(arguments.length<3&&(e=t,t=k().changedTouches),t)for(var r,i=0,u=t.length;u>i;++i)if((r=t[i]).identifier===e)return J(n,r)},ao.behavior.drag=function(){function n(){this.on("mousedown.drag",u).on("touchstart.drag",o)}function e(n,t,e,u,o){return function(){function a(){var n,e,r=t(h,v);r&&(n=r[0]-M[0],e=r[1]-M[1],g|=n|e,M=r,p({type:"drag",x:r[0]+c[0],y:r[1]+c[1],dx:n,dy:e}))}function l(){t(h,v)&&(y.on(u+d,null).on(o+d,null),m(g),p({type:"dragend"}))}var c,f=this,s=ao.event.target.correspondingElement||ao.event.target,h=f.parentNode,p=r.of(f,arguments),g=0,v=n(),d=".drag"+(null==v?"":"-"+v),y=ao.select(e(s)).on(u+d,a).on(o+d,l),m=W(s),M=t(h,v);i?(c=i.apply(f,arguments),c=[c.x-M[0],c.y-M[1]]):c=[0,0],p({type:"dragstart"})}}var r=N(n,"drag","dragstart","dragend"),i=null,u=e(b,ao.mouse,t,"mousemove","mouseup"),o=e(G,ao.touch,m,"touchmove","touchend");return n.origin=function(t){return arguments.length?(i=t,n):i},ao.rebind(n,r,"on")},ao.touches=function(n,t){return arguments.length<2&&(t=k().touches),t?co(t).map(function(t){var e=J(n,t);return e.identifier=t.identifier,e}):[]};var Uo=1e-6,jo=Uo*Uo,Fo=Math.PI,Ho=2*Fo,Oo=Ho-Uo,Io=Fo/2,Yo=Fo/180,Zo=180/Fo,Vo=Math.SQRT2,Xo=2,$o=4;ao.interpolateZoom=function(n,t){var e,r,i=n[0],u=n[1],o=n[2],a=t[0],l=t[1],c=t[2],f=a-i,s=l-u,h=f*f+s*s;if(jo>h)r=Math.log(c/o)/Vo,e=function(n){return[i+n*f,u+n*s,o*Math.exp(Vo*n*r)]};else{var p=Math.sqrt(h),g=(c*c-o*o+$o*h)/(2*o*Xo*p),v=(c*c-o*o-$o*h)/(2*c*Xo*p),d=Math.log(Math.sqrt(g*g+1)-g),y=Math.log(Math.sqrt(v*v+1)-v);r=(y-d)/Vo,e=function(n){var t=n*r,e=rn(d),a=o/(Xo*p)*(e*un(Vo*t+d)-en(d));return[i+a*f,u+a*s,o*e/rn(Vo*t+d)]}}return e.duration=1e3*r,e},ao.behavior.zoom=function(){function n(n){n.on(L,s).on(Wo+".zoom",p).on("dblclick.zoom",g).on(R,h)}function e(n){return[(n[0]-k.x)/k.k,(n[1]-k.y)/k.k]}function r(n){return[n[0]*k.k+k.x,n[1]*k.k+k.y]}function i(n){k.k=Math.max(A[0],Math.min(A[1],n))}function u(n,t){t=r(t),k.x+=n[0]-t[0],k.y+=n[1]-t[1]}function o(t,e,r,o){t.__chart__={x:k.x,y:k.y,k:k.k},i(Math.pow(2,o)),u(d=e,r),t=ao.select(t),C>0&&(t=t.transition().duration(C)),t.call(n.event)}function a(){b&&b.domain(x.range().map(function(n){return(n-k.x)/k.k}).map(x.invert)),w&&w.domain(_.range().map(function(n){return(n-k.y)/k.k}).map(_.invert))}function l(n){z++||n({type:"zoomstart"})}function c(n){a(),n({type:"zoom",scale:k.k,translate:[k.x,k.y]})}function f(n){--z||(n({type:"zoomend"}),d=null)}function s(){function n(){a=1,u(ao.mouse(i),h),c(o)}function r(){s.on(q,null).on(T,null),p(a),f(o)}var i=this,o=D.of(i,arguments),a=0,s=ao.select(t(i)).on(q,n).on(T,r),h=e(ao.mouse(i)),p=W(i);Il.call(i),l(o)}function h(){function n(){var n=ao.touches(g);return p=k.k,n.forEach(function(n){n.identifier in d&&(d[n.identifier]=e(n))}),n}function t(){var t=ao.event.target;ao.select(t).on(x,r).on(b,a),_.push(t);for(var e=ao.event.changedTouches,i=0,u=e.length;u>i;++i)d[e[i].identifier]=null;var l=n(),c=Date.now();if(1===l.length){if(500>c-M){var f=l[0];o(g,f,d[f.identifier],Math.floor(Math.log(k.k)/Math.LN2)+1),S()}M=c}else if(l.length>1){var f=l[0],s=l[1],h=f[0]-s[0],p=f[1]-s[1];y=h*h+p*p}}function r(){var n,t,e,r,o=ao.touches(g);Il.call(g);for(var a=0,l=o.length;l>a;++a,r=null)if(e=o[a],r=d[e.identifier]){if(t)break;n=e,t=r}if(r){var f=(f=e[0]-n[0])*f+(f=e[1]-n[1])*f,s=y&&Math.sqrt(f/y);n=[(n[0]+e[0])/2,(n[1]+e[1])/2],t=[(t[0]+r[0])/2,(t[1]+r[1])/2],i(s*p)}M=null,u(n,t),c(v)}function a(){if(ao.event.touches.length){for(var t=ao.event.changedTouches,e=0,r=t.length;r>e;++e)delete d[t[e].identifier];for(var i in d)return void n()}ao.selectAll(_).on(m,null),w.on(L,s).on(R,h),N(),f(v)}var p,g=this,v=D.of(g,arguments),d={},y=0,m=".zoom-"+ao.event.changedTouches[0].identifier,x="touchmove"+m,b="touchend"+m,_=[],w=ao.select(g),N=W(g);t(),l(v),w.on(L,null).on(R,t)}function p(){var n=D.of(this,arguments);m?clearTimeout(m):(Il.call(this),v=e(d=y||ao.mouse(this)),l(n)),m=setTimeout(function(){m=null,f(n)},50),S(),i(Math.pow(2,.002*Bo())*k.k),u(d,v),c(n)}function g(){var n=ao.mouse(this),t=Math.log(k.k)/Math.LN2;o(this,n,e(n),ao.event.shiftKey?Math.ceil(t)-1:Math.floor(t)+1)}var v,d,y,m,M,x,b,_,w,k={x:0,y:0,k:1},E=[960,500],A=Jo,C=250,z=0,L="mousedown.zoom",q="mousemove.zoom",T="mouseup.zoom",R="touchstart.zoom",D=N(n,"zoomstart","zoom","zoomend");return Wo||(Wo="onwheel"in fo?(Bo=function(){return-ao.event.deltaY*(ao.event.deltaMode?120:1)},"wheel"):"onmousewheel"in fo?(Bo=function(){return ao.event.wheelDelta},"mousewheel"):(Bo=function(){return-ao.event.detail},"MozMousePixelScroll")),n.event=function(n){n.each(function(){var n=D.of(this,arguments),t=k;Hl?ao.select(this).transition().each("start.zoom",function(){k=this.__chart__||{x:0,y:0,k:1},l(n)}).tween("zoom:zoom",function(){var e=E[0],r=E[1],i=d?d[0]:e/2,u=d?d[1]:r/2,o=ao.interpolateZoom([(i-k.x)/k.k,(u-k.y)/k.k,e/k.k],[(i-t.x)/t.k,(u-t.y)/t.k,e/t.k]);return function(t){var r=o(t),a=e/r[2];this.__chart__=k={x:i-r[0]*a,y:u-r[1]*a,k:a},c(n)}}).each("interrupt.zoom",function(){f(n)}).each("end.zoom",function(){f(n)}):(this.__chart__=k,l(n),c(n),f(n))})},n.translate=function(t){return arguments.length?(k={x:+t[0],y:+t[1],k:k.k},a(),n):[k.x,k.y]},n.scale=function(t){return arguments.length?(k={x:k.x,y:k.y,k:null},i(+t),a(),n):k.k},n.scaleExtent=function(t){return arguments.length?(A=null==t?Jo:[+t[0],+t[1]],n):A},n.center=function(t){return arguments.length?(y=t&&[+t[0],+t[1]],n):y},n.size=function(t){return arguments.length?(E=t&&[+t[0],+t[1]],n):E},n.duration=function(t){return arguments.length?(C=+t,n):C},n.x=function(t){return arguments.length?(b=t,x=t.copy(),k={x:0,y:0,k:1},n):b},n.y=function(t){return arguments.length?(w=t,_=t.copy(),k={x:0,y:0,k:1},n):w},ao.rebind(n,D,"on")};var Bo,Wo,Jo=[0,1/0];ao.color=an,an.prototype.toString=function(){return this.rgb()+""},ao.hsl=ln;var Go=ln.prototype=new an;Go.brighter=function(n){return n=Math.pow(.7,arguments.length?n:1),new ln(this.h,this.s,this.l/n)},Go.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),new ln(this.h,this.s,n*this.l)},Go.rgb=function(){return cn(this.h,this.s,this.l)},ao.hcl=fn;var Ko=fn.prototype=new an;Ko.brighter=function(n){return new fn(this.h,this.c,Math.min(100,this.l+Qo*(arguments.length?n:1)))},Ko.darker=function(n){return new fn(this.h,this.c,Math.max(0,this.l-Qo*(arguments.length?n:1)))},Ko.rgb=function(){return sn(this.h,this.c,this.l).rgb()},ao.lab=hn;var Qo=18,na=.95047,ta=1,ea=1.08883,ra=hn.prototype=new an;ra.brighter=function(n){return new hn(Math.min(100,this.l+Qo*(arguments.length?n:1)),this.a,this.b)},ra.darker=function(n){return new hn(Math.max(0,this.l-Qo*(arguments.length?n:1)),this.a,this.b)},ra.rgb=function(){return pn(this.l,this.a,this.b)},ao.rgb=mn;var ia=mn.prototype=new an;ia.brighter=function(n){n=Math.pow(.7,arguments.length?n:1);var t=this.r,e=this.g,r=this.b,i=30;return t||e||r?(t&&i>t&&(t=i),e&&i>e&&(e=i),r&&i>r&&(r=i),new mn(Math.min(255,t/n),Math.min(255,e/n),Math.min(255,r/n))):new mn(i,i,i)},ia.darker=function(n){return n=Math.pow(.7,arguments.length?n:1),new mn(n*this.r,n*this.g,n*this.b)},ia.hsl=function(){return wn(this.r,this.g,this.b)},ia.toString=function(){return"#"+bn(this.r)+bn(this.g)+bn(this.b)};var ua=ao.map({aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074});ua.forEach(function(n,t){ua.set(n,Mn(t))}),ao.functor=En,ao.xhr=An(m),ao.dsv=function(n,t){function e(n,e,u){arguments.length<3&&(u=e,e=null);var o=Cn(n,t,null==e?r:i(e),u);return o.row=function(n){return arguments.length?o.response(null==(e=n)?r:i(n)):e},o}function r(n){return e.parse(n.responseText)}function i(n){return function(t){return e.parse(t.responseText,n)}}function u(t){return t.map(o).join(n)}function o(n){return a.test(n)?'"'+n.replace(/\"/g,'""')+'"':n}var a=new RegExp('["'+n+"\n]"),l=n.charCodeAt(0);return e.parse=function(n,t){var r;return e.parseRows(n,function(n,e){if(r)return r(n,e-1);var i=new Function("d","return {"+n.map(function(n,t){return JSON.stringify(n)+": d["+t+"]"}).join(",")+"}");r=t?function(n,e){return t(i(n),e)}:i})},e.parseRows=function(n,t){function e(){if(f>=c)return o;if(i)return i=!1,u;var t=f;if(34===n.charCodeAt(t)){for(var e=t;e++<c;)if(34===n.charCodeAt(e)){if(34!==n.charCodeAt(e+1))break;++e}f=e+2;var r=n.charCodeAt(e+1);return 13===r?(i=!0,10===n.charCodeAt(e+2)&&++f):10===r&&(i=!0),n.slice(t+1,e).replace(/""/g,'"')}for(;c>f;){var r=n.charCodeAt(f++),a=1;if(10===r)i=!0;else if(13===r)i=!0,10===n.charCodeAt(f)&&(++f,++a);else if(r!==l)continue;return n.slice(t,f-a)}return n.slice(t)}for(var r,i,u={},o={},a=[],c=n.length,f=0,s=0;(r=e())!==o;){for(var h=[];r!==u&&r!==o;)h.push(r),r=e();t&&null==(h=t(h,s++))||a.push(h)}return a},e.format=function(t){if(Array.isArray(t[0]))return e.formatRows(t);var r=new y,i=[];return t.forEach(function(n){for(var t in n)r.has(t)||i.push(r.add(t))}),[i.map(o).join(n)].concat(t.map(function(t){return i.map(function(n){return o(t[n])}).join(n)})).join("\n")},e.formatRows=function(n){return n.map(u).join("\n")},e},ao.csv=ao.dsv(",","text/csv"),ao.tsv=ao.dsv("	","text/tab-separated-values");var oa,aa,la,ca,fa=this[x(this,"requestAnimationFrame")]||function(n){setTimeout(n,17)};ao.timer=function(){qn.apply(this,arguments)},ao.timer.flush=function(){Rn(),Dn()},ao.round=function(n,t){return t?Math.round(n*(t=Math.pow(10,t)))/t:Math.round(n)};var sa=["y","z","a","f","p","n","\xb5","m","","k","M","G","T","P","E","Z","Y"].map(Un);ao.formatPrefix=function(n,t){var e=0;return(n=+n)&&(0>n&&(n*=-1),t&&(n=ao.round(n,Pn(n,t))),e=1+Math.floor(1e-12+Math.log(n)/Math.LN10),e=Math.max(-24,Math.min(24,3*Math.floor((e-1)/3)))),sa[8+e/3]};var ha=/(?:([^{])?([<>=^]))?([+\- ])?([$#])?(0)?(\d+)?(,)?(\.-?\d+)?([a-z%])?/i,pa=ao.map({b:function(n){return n.toString(2)},c:function(n){return String.fromCharCode(n)},o:function(n){return n.toString(8)},x:function(n){return n.toString(16)},X:function(n){return n.toString(16).toUpperCase()},g:function(n,t){return n.toPrecision(t)},e:function(n,t){return n.toExponential(t)},f:function(n,t){return n.toFixed(t)},r:function(n,t){return(n=ao.round(n,Pn(n,t))).toFixed(Math.max(0,Math.min(20,Pn(n*(1+1e-15),t))))}}),ga=ao.time={},va=Date;Hn.prototype={getDate:function(){return this._.getUTCDate()},getDay:function(){return this._.getUTCDay()},getFullYear:function(){return this._.getUTCFullYear()},getHours:function(){return this._.getUTCHours()},getMilliseconds:function(){return this._.getUTCMilliseconds()},getMinutes:function(){return this._.getUTCMinutes()},getMonth:function(){return this._.getUTCMonth()},getSeconds:function(){return this._.getUTCSeconds()},getTime:function(){return this._.getTime()},getTimezoneOffset:function(){return 0},valueOf:function(){return this._.valueOf()},setDate:function(){da.setUTCDate.apply(this._,arguments)},setDay:function(){da.setUTCDay.apply(this._,arguments)},setFullYear:function(){da.setUTCFullYear.apply(this._,arguments)},setHours:function(){da.setUTCHours.apply(this._,arguments)},setMilliseconds:function(){da.setUTCMilliseconds.apply(this._,arguments)},setMinutes:function(){da.setUTCMinutes.apply(this._,arguments)},setMonth:function(){da.setUTCMonth.apply(this._,arguments)},setSeconds:function(){da.setUTCSeconds.apply(this._,arguments)},setTime:function(){da.setTime.apply(this._,arguments)}};var da=Date.prototype;ga.year=On(function(n){return n=ga.day(n),n.setMonth(0,1),n},function(n,t){n.setFullYear(n.getFullYear()+t)},function(n){return n.getFullYear()}),ga.years=ga.year.range,ga.years.utc=ga.year.utc.range,ga.day=On(function(n){var t=new va(2e3,0);return t.setFullYear(n.getFullYear(),n.getMonth(),n.getDate()),t},function(n,t){n.setDate(n.getDate()+t)},function(n){return n.getDate()-1}),ga.days=ga.day.range,ga.days.utc=ga.day.utc.range,ga.dayOfYear=function(n){var t=ga.year(n);return Math.floor((n-t-6e4*(n.getTimezoneOffset()-t.getTimezoneOffset()))/864e5)},["sunday","monday","tuesday","wednesday","thursday","friday","saturday"].forEach(function(n,t){t=7-t;var e=ga[n]=On(function(n){return(n=ga.day(n)).setDate(n.getDate()-(n.getDay()+t)%7),n},function(n,t){n.setDate(n.getDate()+7*Math.floor(t))},function(n){var e=ga.year(n).getDay();return Math.floor((ga.dayOfYear(n)+(e+t)%7)/7)-(e!==t)});ga[n+"s"]=e.range,ga[n+"s"].utc=e.utc.range,ga[n+"OfYear"]=function(n){var e=ga.year(n).getDay();return Math.floor((ga.dayOfYear(n)+(e+t)%7)/7)}}),ga.week=ga.sunday,ga.weeks=ga.sunday.range,ga.weeks.utc=ga.sunday.utc.range,ga.weekOfYear=ga.sundayOfYear;var ya={"-":"",_:" ",0:"0"},ma=/^\s*\d+/,Ma=/^%/;ao.locale=function(n){return{numberFormat:jn(n),timeFormat:Yn(n)}};var xa=ao.locale({decimal:".",thousands:",",grouping:[3],currency:["$",""],dateTime:"%a %b %e %X %Y",date:"%m/%d/%Y",time:"%H:%M:%S",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],
shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});ao.format=xa.numberFormat,ao.geo={},ft.prototype={s:0,t:0,add:function(n){st(n,this.t,ba),st(ba.s,this.s,this),this.s?this.t+=ba.t:this.s=ba.t},reset:function(){this.s=this.t=0},valueOf:function(){return this.s}};var ba=new ft;ao.geo.stream=function(n,t){n&&_a.hasOwnProperty(n.type)?_a[n.type](n,t):ht(n,t)};var _a={Feature:function(n,t){ht(n.geometry,t)},FeatureCollection:function(n,t){for(var e=n.features,r=-1,i=e.length;++r<i;)ht(e[r].geometry,t)}},wa={Sphere:function(n,t){t.sphere()},Point:function(n,t){n=n.coordinates,t.point(n[0],n[1],n[2])},MultiPoint:function(n,t){for(var e=n.coordinates,r=-1,i=e.length;++r<i;)n=e[r],t.point(n[0],n[1],n[2])},LineString:function(n,t){pt(n.coordinates,t,0)},MultiLineString:function(n,t){for(var e=n.coordinates,r=-1,i=e.length;++r<i;)pt(e[r],t,0)},Polygon:function(n,t){gt(n.coordinates,t)},MultiPolygon:function(n,t){for(var e=n.coordinates,r=-1,i=e.length;++r<i;)gt(e[r],t)},GeometryCollection:function(n,t){for(var e=n.geometries,r=-1,i=e.length;++r<i;)ht(e[r],t)}};ao.geo.area=function(n){return Sa=0,ao.geo.stream(n,Na),Sa};var Sa,ka=new ft,Na={sphere:function(){Sa+=4*Fo},point:b,lineStart:b,lineEnd:b,polygonStart:function(){ka.reset(),Na.lineStart=vt},polygonEnd:function(){var n=2*ka;Sa+=0>n?4*Fo+n:n,Na.lineStart=Na.lineEnd=Na.point=b}};ao.geo.bounds=function(){function n(n,t){M.push(x=[f=n,h=n]),s>t&&(s=t),t>p&&(p=t)}function t(t,e){var r=dt([t*Yo,e*Yo]);if(y){var i=mt(y,r),u=[i[1],-i[0],0],o=mt(u,i);bt(o),o=_t(o);var l=t-g,c=l>0?1:-1,v=o[0]*Zo*c,d=xo(l)>180;if(d^(v>c*g&&c*t>v)){var m=o[1]*Zo;m>p&&(p=m)}else if(v=(v+360)%360-180,d^(v>c*g&&c*t>v)){var m=-o[1]*Zo;s>m&&(s=m)}else s>e&&(s=e),e>p&&(p=e);d?g>t?a(f,t)>a(f,h)&&(h=t):a(t,h)>a(f,h)&&(f=t):h>=f?(f>t&&(f=t),t>h&&(h=t)):t>g?a(f,t)>a(f,h)&&(h=t):a(t,h)>a(f,h)&&(f=t)}else n(t,e);y=r,g=t}function e(){b.point=t}function r(){x[0]=f,x[1]=h,b.point=n,y=null}function i(n,e){if(y){var r=n-g;m+=xo(r)>180?r+(r>0?360:-360):r}else v=n,d=e;Na.point(n,e),t(n,e)}function u(){Na.lineStart()}function o(){i(v,d),Na.lineEnd(),xo(m)>Uo&&(f=-(h=180)),x[0]=f,x[1]=h,y=null}function a(n,t){return(t-=n)<0?t+360:t}function l(n,t){return n[0]-t[0]}function c(n,t){return t[0]<=t[1]?t[0]<=n&&n<=t[1]:n<t[0]||t[1]<n}var f,s,h,p,g,v,d,y,m,M,x,b={point:n,lineStart:e,lineEnd:r,polygonStart:function(){b.point=i,b.lineStart=u,b.lineEnd=o,m=0,Na.polygonStart()},polygonEnd:function(){Na.polygonEnd(),b.point=n,b.lineStart=e,b.lineEnd=r,0>ka?(f=-(h=180),s=-(p=90)):m>Uo?p=90:-Uo>m&&(s=-90),x[0]=f,x[1]=h}};return function(n){p=h=-(f=s=1/0),M=[],ao.geo.stream(n,b);var t=M.length;if(t){M.sort(l);for(var e,r=1,i=M[0],u=[i];t>r;++r)e=M[r],c(e[0],i)||c(e[1],i)?(a(i[0],e[1])>a(i[0],i[1])&&(i[1]=e[1]),a(e[0],i[1])>a(i[0],i[1])&&(i[0]=e[0])):u.push(i=e);for(var o,e,g=-(1/0),t=u.length-1,r=0,i=u[t];t>=r;i=e,++r)e=u[r],(o=a(i[1],e[0]))>g&&(g=o,f=e[0],h=i[1])}return M=x=null,f===1/0||s===1/0?[[NaN,NaN],[NaN,NaN]]:[[f,s],[h,p]]}}(),ao.geo.centroid=function(n){Ea=Aa=Ca=za=La=qa=Ta=Ra=Da=Pa=Ua=0,ao.geo.stream(n,ja);var t=Da,e=Pa,r=Ua,i=t*t+e*e+r*r;return jo>i&&(t=qa,e=Ta,r=Ra,Uo>Aa&&(t=Ca,e=za,r=La),i=t*t+e*e+r*r,jo>i)?[NaN,NaN]:[Math.atan2(e,t)*Zo,tn(r/Math.sqrt(i))*Zo]};var Ea,Aa,Ca,za,La,qa,Ta,Ra,Da,Pa,Ua,ja={sphere:b,point:St,lineStart:Nt,lineEnd:Et,polygonStart:function(){ja.lineStart=At},polygonEnd:function(){ja.lineStart=Nt}},Fa=Rt(zt,jt,Ht,[-Fo,-Fo/2]),Ha=1e9;ao.geo.clipExtent=function(){var n,t,e,r,i,u,o={stream:function(n){return i&&(i.valid=!1),i=u(n),i.valid=!0,i},extent:function(a){return arguments.length?(u=Zt(n=+a[0][0],t=+a[0][1],e=+a[1][0],r=+a[1][1]),i&&(i.valid=!1,i=null),o):[[n,t],[e,r]]}};return o.extent([[0,0],[960,500]])},(ao.geo.conicEqualArea=function(){return Vt(Xt)}).raw=Xt,ao.geo.albers=function(){return ao.geo.conicEqualArea().rotate([96,0]).center([-.6,38.7]).parallels([29.5,45.5]).scale(1070)},ao.geo.albersUsa=function(){function n(n){var u=n[0],o=n[1];return t=null,e(u,o),t||(r(u,o),t)||i(u,o),t}var t,e,r,i,u=ao.geo.albers(),o=ao.geo.conicEqualArea().rotate([154,0]).center([-2,58.5]).parallels([55,65]),a=ao.geo.conicEqualArea().rotate([157,0]).center([-3,19.9]).parallels([8,18]),l={point:function(n,e){t=[n,e]}};return n.invert=function(n){var t=u.scale(),e=u.translate(),r=(n[0]-e[0])/t,i=(n[1]-e[1])/t;return(i>=.12&&.234>i&&r>=-.425&&-.214>r?o:i>=.166&&.234>i&&r>=-.214&&-.115>r?a:u).invert(n)},n.stream=function(n){var t=u.stream(n),e=o.stream(n),r=a.stream(n);return{point:function(n,i){t.point(n,i),e.point(n,i),r.point(n,i)},sphere:function(){t.sphere(),e.sphere(),r.sphere()},lineStart:function(){t.lineStart(),e.lineStart(),r.lineStart()},lineEnd:function(){t.lineEnd(),e.lineEnd(),r.lineEnd()},polygonStart:function(){t.polygonStart(),e.polygonStart(),r.polygonStart()},polygonEnd:function(){t.polygonEnd(),e.polygonEnd(),r.polygonEnd()}}},n.precision=function(t){return arguments.length?(u.precision(t),o.precision(t),a.precision(t),n):u.precision()},n.scale=function(t){return arguments.length?(u.scale(t),o.scale(.35*t),a.scale(t),n.translate(u.translate())):u.scale()},n.translate=function(t){if(!arguments.length)return u.translate();var c=u.scale(),f=+t[0],s=+t[1];return e=u.translate(t).clipExtent([[f-.455*c,s-.238*c],[f+.455*c,s+.238*c]]).stream(l).point,r=o.translate([f-.307*c,s+.201*c]).clipExtent([[f-.425*c+Uo,s+.12*c+Uo],[f-.214*c-Uo,s+.234*c-Uo]]).stream(l).point,i=a.translate([f-.205*c,s+.212*c]).clipExtent([[f-.214*c+Uo,s+.166*c+Uo],[f-.115*c-Uo,s+.234*c-Uo]]).stream(l).point,n},n.scale(1070)};var Oa,Ia,Ya,Za,Va,Xa,$a={point:b,lineStart:b,lineEnd:b,polygonStart:function(){Ia=0,$a.lineStart=$t},polygonEnd:function(){$a.lineStart=$a.lineEnd=$a.point=b,Oa+=xo(Ia/2)}},Ba={point:Bt,lineStart:b,lineEnd:b,polygonStart:b,polygonEnd:b},Wa={point:Gt,lineStart:Kt,lineEnd:Qt,polygonStart:function(){Wa.lineStart=ne},polygonEnd:function(){Wa.point=Gt,Wa.lineStart=Kt,Wa.lineEnd=Qt}};ao.geo.path=function(){function n(n){return n&&("function"==typeof a&&u.pointRadius(+a.apply(this,arguments)),o&&o.valid||(o=i(u)),ao.geo.stream(n,o)),u.result()}function t(){return o=null,n}var e,r,i,u,o,a=4.5;return n.area=function(n){return Oa=0,ao.geo.stream(n,i($a)),Oa},n.centroid=function(n){return Ca=za=La=qa=Ta=Ra=Da=Pa=Ua=0,ao.geo.stream(n,i(Wa)),Ua?[Da/Ua,Pa/Ua]:Ra?[qa/Ra,Ta/Ra]:La?[Ca/La,za/La]:[NaN,NaN]},n.bounds=function(n){return Va=Xa=-(Ya=Za=1/0),ao.geo.stream(n,i(Ba)),[[Ya,Za],[Va,Xa]]},n.projection=function(n){return arguments.length?(i=(e=n)?n.stream||re(n):m,t()):e},n.context=function(n){return arguments.length?(u=null==(r=n)?new Wt:new te(n),"function"!=typeof a&&u.pointRadius(a),t()):r},n.pointRadius=function(t){return arguments.length?(a="function"==typeof t?t:(u.pointRadius(+t),+t),n):a},n.projection(ao.geo.albersUsa()).context(null)},ao.geo.transform=function(n){return{stream:function(t){var e=new ie(t);for(var r in n)e[r]=n[r];return e}}},ie.prototype={point:function(n,t){this.stream.point(n,t)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}},ao.geo.projection=oe,ao.geo.projectionMutator=ae,(ao.geo.equirectangular=function(){return oe(ce)}).raw=ce.invert=ce,ao.geo.rotation=function(n){function t(t){return t=n(t[0]*Yo,t[1]*Yo),t[0]*=Zo,t[1]*=Zo,t}return n=se(n[0]%360*Yo,n[1]*Yo,n.length>2?n[2]*Yo:0),t.invert=function(t){return t=n.invert(t[0]*Yo,t[1]*Yo),t[0]*=Zo,t[1]*=Zo,t},t},fe.invert=ce,ao.geo.circle=function(){function n(){var n="function"==typeof r?r.apply(this,arguments):r,t=se(-n[0]*Yo,-n[1]*Yo,0).invert,i=[];return e(null,null,1,{point:function(n,e){i.push(n=t(n,e)),n[0]*=Zo,n[1]*=Zo}}),{type:"Polygon",coordinates:[i]}}var t,e,r=[0,0],i=6;return n.origin=function(t){return arguments.length?(r=t,n):r},n.angle=function(r){return arguments.length?(e=ve((t=+r)*Yo,i*Yo),n):t},n.precision=function(r){return arguments.length?(e=ve(t*Yo,(i=+r)*Yo),n):i},n.angle(90)},ao.geo.distance=function(n,t){var e,r=(t[0]-n[0])*Yo,i=n[1]*Yo,u=t[1]*Yo,o=Math.sin(r),a=Math.cos(r),l=Math.sin(i),c=Math.cos(i),f=Math.sin(u),s=Math.cos(u);return Math.atan2(Math.sqrt((e=s*o)*e+(e=c*f-l*s*a)*e),l*f+c*s*a)},ao.geo.graticule=function(){function n(){return{type:"MultiLineString",coordinates:t()}}function t(){return ao.range(Math.ceil(u/d)*d,i,d).map(h).concat(ao.range(Math.ceil(c/y)*y,l,y).map(p)).concat(ao.range(Math.ceil(r/g)*g,e,g).filter(function(n){return xo(n%d)>Uo}).map(f)).concat(ao.range(Math.ceil(a/v)*v,o,v).filter(function(n){return xo(n%y)>Uo}).map(s))}var e,r,i,u,o,a,l,c,f,s,h,p,g=10,v=g,d=90,y=360,m=2.5;return n.lines=function(){return t().map(function(n){return{type:"LineString",coordinates:n}})},n.outline=function(){return{type:"Polygon",coordinates:[h(u).concat(p(l).slice(1),h(i).reverse().slice(1),p(c).reverse().slice(1))]}},n.extent=function(t){return arguments.length?n.majorExtent(t).minorExtent(t):n.minorExtent()},n.majorExtent=function(t){return arguments.length?(u=+t[0][0],i=+t[1][0],c=+t[0][1],l=+t[1][1],u>i&&(t=u,u=i,i=t),c>l&&(t=c,c=l,l=t),n.precision(m)):[[u,c],[i,l]]},n.minorExtent=function(t){return arguments.length?(r=+t[0][0],e=+t[1][0],a=+t[0][1],o=+t[1][1],r>e&&(t=r,r=e,e=t),a>o&&(t=a,a=o,o=t),n.precision(m)):[[r,a],[e,o]]},n.step=function(t){return arguments.length?n.majorStep(t).minorStep(t):n.minorStep()},n.majorStep=function(t){return arguments.length?(d=+t[0],y=+t[1],n):[d,y]},n.minorStep=function(t){return arguments.length?(g=+t[0],v=+t[1],n):[g,v]},n.precision=function(t){return arguments.length?(m=+t,f=ye(a,o,90),s=me(r,e,m),h=ye(c,l,90),p=me(u,i,m),n):m},n.majorExtent([[-180,-90+Uo],[180,90-Uo]]).minorExtent([[-180,-80-Uo],[180,80+Uo]])},ao.geo.greatArc=function(){function n(){return{type:"LineString",coordinates:[t||r.apply(this,arguments),e||i.apply(this,arguments)]}}var t,e,r=Me,i=xe;return n.distance=function(){return ao.geo.distance(t||r.apply(this,arguments),e||i.apply(this,arguments))},n.source=function(e){return arguments.length?(r=e,t="function"==typeof e?null:e,n):r},n.target=function(t){return arguments.length?(i=t,e="function"==typeof t?null:t,n):i},n.precision=function(){return arguments.length?n:0},n},ao.geo.interpolate=function(n,t){return be(n[0]*Yo,n[1]*Yo,t[0]*Yo,t[1]*Yo)},ao.geo.length=function(n){return Ja=0,ao.geo.stream(n,Ga),Ja};var Ja,Ga={sphere:b,point:b,lineStart:_e,lineEnd:b,polygonStart:b,polygonEnd:b},Ka=we(function(n){return Math.sqrt(2/(1+n))},function(n){return 2*Math.asin(n/2)});(ao.geo.azimuthalEqualArea=function(){return oe(Ka)}).raw=Ka;var Qa=we(function(n){var t=Math.acos(n);return t&&t/Math.sin(t)},m);(ao.geo.azimuthalEquidistant=function(){return oe(Qa)}).raw=Qa,(ao.geo.conicConformal=function(){return Vt(Se)}).raw=Se,(ao.geo.conicEquidistant=function(){return Vt(ke)}).raw=ke;var nl=we(function(n){return 1/n},Math.atan);(ao.geo.gnomonic=function(){return oe(nl)}).raw=nl,Ne.invert=function(n,t){return[n,2*Math.atan(Math.exp(t))-Io]},(ao.geo.mercator=function(){return Ee(Ne)}).raw=Ne;var tl=we(function(){return 1},Math.asin);(ao.geo.orthographic=function(){return oe(tl)}).raw=tl;var el=we(function(n){return 1/(1+n)},function(n){return 2*Math.atan(n)});(ao.geo.stereographic=function(){return oe(el)}).raw=el,Ae.invert=function(n,t){return[-t,2*Math.atan(Math.exp(n))-Io]},(ao.geo.transverseMercator=function(){var n=Ee(Ae),t=n.center,e=n.rotate;return n.center=function(n){return n?t([-n[1],n[0]]):(n=t(),[n[1],-n[0]])},n.rotate=function(n){return n?e([n[0],n[1],n.length>2?n[2]+90:90]):(n=e(),[n[0],n[1],n[2]-90])},e([0,0,90])}).raw=Ae,ao.geom={},ao.geom.hull=function(n){function t(n){if(n.length<3)return[];var t,i=En(e),u=En(r),o=n.length,a=[],l=[];for(t=0;o>t;t++)a.push([+i.call(this,n[t],t),+u.call(this,n[t],t),t]);for(a.sort(qe),t=0;o>t;t++)l.push([a[t][0],-a[t][1]]);var c=Le(a),f=Le(l),s=f[0]===c[0],h=f[f.length-1]===c[c.length-1],p=[];for(t=c.length-1;t>=0;--t)p.push(n[a[c[t]][2]]);for(t=+s;t<f.length-h;++t)p.push(n[a[f[t]][2]]);return p}var e=Ce,r=ze;return arguments.length?t(n):(t.x=function(n){return arguments.length?(e=n,t):e},t.y=function(n){return arguments.length?(r=n,t):r},t)},ao.geom.polygon=function(n){return ko(n,rl),n};var rl=ao.geom.polygon.prototype=[];rl.area=function(){for(var n,t=-1,e=this.length,r=this[e-1],i=0;++t<e;)n=r,r=this[t],i+=n[1]*r[0]-n[0]*r[1];return.5*i},rl.centroid=function(n){var t,e,r=-1,i=this.length,u=0,o=0,a=this[i-1];for(arguments.length||(n=-1/(6*this.area()));++r<i;)t=a,a=this[r],e=t[0]*a[1]-a[0]*t[1],u+=(t[0]+a[0])*e,o+=(t[1]+a[1])*e;return[u*n,o*n]},rl.clip=function(n){for(var t,e,r,i,u,o,a=De(n),l=-1,c=this.length-De(this),f=this[c-1];++l<c;){for(t=n.slice(),n.length=0,i=this[l],u=t[(r=t.length-a)-1],e=-1;++e<r;)o=t[e],Te(o,f,i)?(Te(u,f,i)||n.push(Re(u,o,f,i)),n.push(o)):Te(u,f,i)&&n.push(Re(u,o,f,i)),u=o;a&&n.push(n[0]),f=i}return n};var il,ul,ol,al,ll,cl=[],fl=[];Ye.prototype.prepare=function(){for(var n,t=this.edges,e=t.length;e--;)n=t[e].edge,n.b&&n.a||t.splice(e,1);return t.sort(Ve),t.length},tr.prototype={start:function(){return this.edge.l===this.site?this.edge.a:this.edge.b},end:function(){return this.edge.l===this.site?this.edge.b:this.edge.a}},er.prototype={insert:function(n,t){var e,r,i;if(n){if(t.P=n,t.N=n.N,n.N&&(n.N.P=t),n.N=t,n.R){for(n=n.R;n.L;)n=n.L;n.L=t}else n.R=t;e=n}else this._?(n=or(this._),t.P=null,t.N=n,n.P=n.L=t,e=n):(t.P=t.N=null,this._=t,e=null);for(t.L=t.R=null,t.U=e,t.C=!0,n=t;e&&e.C;)r=e.U,e===r.L?(i=r.R,i&&i.C?(e.C=i.C=!1,r.C=!0,n=r):(n===e.R&&(ir(this,e),n=e,e=n.U),e.C=!1,r.C=!0,ur(this,r))):(i=r.L,i&&i.C?(e.C=i.C=!1,r.C=!0,n=r):(n===e.L&&(ur(this,e),n=e,e=n.U),e.C=!1,r.C=!0,ir(this,r))),e=n.U;this._.C=!1},remove:function(n){n.N&&(n.N.P=n.P),n.P&&(n.P.N=n.N),n.N=n.P=null;var t,e,r,i=n.U,u=n.L,o=n.R;if(e=u?o?or(o):u:o,i?i.L===n?i.L=e:i.R=e:this._=e,u&&o?(r=e.C,e.C=n.C,e.L=u,u.U=e,e!==o?(i=e.U,e.U=n.U,n=e.R,i.L=n,e.R=o,o.U=e):(e.U=i,i=e,n=e.R)):(r=n.C,n=e),n&&(n.U=i),!r){if(n&&n.C)return void(n.C=!1);do{if(n===this._)break;if(n===i.L){if(t=i.R,t.C&&(t.C=!1,i.C=!0,ir(this,i),t=i.R),t.L&&t.L.C||t.R&&t.R.C){t.R&&t.R.C||(t.L.C=!1,t.C=!0,ur(this,t),t=i.R),t.C=i.C,i.C=t.R.C=!1,ir(this,i),n=this._;break}}else if(t=i.L,t.C&&(t.C=!1,i.C=!0,ur(this,i),t=i.L),t.L&&t.L.C||t.R&&t.R.C){t.L&&t.L.C||(t.R.C=!1,t.C=!0,ir(this,t),t=i.L),t.C=i.C,i.C=t.L.C=!1,ur(this,i),n=this._;break}t.C=!0,n=i,i=i.U}while(!n.C);n&&(n.C=!1)}}},ao.geom.voronoi=function(n){function t(n){var t=new Array(n.length),r=a[0][0],i=a[0][1],u=a[1][0],o=a[1][1];return ar(e(n),a).cells.forEach(function(e,a){var l=e.edges,c=e.site,f=t[a]=l.length?l.map(function(n){var t=n.start();return[t.x,t.y]}):c.x>=r&&c.x<=u&&c.y>=i&&c.y<=o?[[r,o],[u,o],[u,i],[r,i]]:[];f.point=n[a]}),t}function e(n){return n.map(function(n,t){return{x:Math.round(u(n,t)/Uo)*Uo,y:Math.round(o(n,t)/Uo)*Uo,i:t}})}var r=Ce,i=ze,u=r,o=i,a=sl;return n?t(n):(t.links=function(n){return ar(e(n)).edges.filter(function(n){return n.l&&n.r}).map(function(t){return{source:n[t.l.i],target:n[t.r.i]}})},t.triangles=function(n){var t=[];return ar(e(n)).cells.forEach(function(e,r){for(var i,u,o=e.site,a=e.edges.sort(Ve),l=-1,c=a.length,f=a[c-1].edge,s=f.l===o?f.r:f.l;++l<c;)i=f,u=s,f=a[l].edge,s=f.l===o?f.r:f.l,r<u.i&&r<s.i&&cr(o,u,s)<0&&t.push([n[r],n[u.i],n[s.i]])}),t},t.x=function(n){return arguments.length?(u=En(r=n),t):r},t.y=function(n){return arguments.length?(o=En(i=n),t):i},t.clipExtent=function(n){return arguments.length?(a=null==n?sl:n,t):a===sl?null:a},t.size=function(n){return arguments.length?t.clipExtent(n&&[[0,0],n]):a===sl?null:a&&a[1]},t)};var sl=[[-1e6,-1e6],[1e6,1e6]];ao.geom.delaunay=function(n){return ao.geom.voronoi().triangles(n)},ao.geom.quadtree=function(n,t,e,r,i){function u(n){function u(n,t,e,r,i,u,o,a){if(!isNaN(e)&&!isNaN(r))if(n.leaf){var l=n.x,f=n.y;if(null!=l)if(xo(l-e)+xo(f-r)<.01)c(n,t,e,r,i,u,o,a);else{var s=n.point;n.x=n.y=n.point=null,c(n,s,l,f,i,u,o,a),c(n,t,e,r,i,u,o,a)}else n.x=e,n.y=r,n.point=t}else c(n,t,e,r,i,u,o,a)}function c(n,t,e,r,i,o,a,l){var c=.5*(i+a),f=.5*(o+l),s=e>=c,h=r>=f,p=h<<1|s;n.leaf=!1,n=n.nodes[p]||(n.nodes[p]=hr()),s?i=c:a=c,h?o=f:l=f,u(n,t,e,r,i,o,a,l)}var f,s,h,p,g,v,d,y,m,M=En(a),x=En(l);if(null!=t)v=t,d=e,y=r,m=i;else if(y=m=-(v=d=1/0),s=[],h=[],g=n.length,o)for(p=0;g>p;++p)f=n[p],f.x<v&&(v=f.x),f.y<d&&(d=f.y),f.x>y&&(y=f.x),f.y>m&&(m=f.y),s.push(f.x),h.push(f.y);else for(p=0;g>p;++p){var b=+M(f=n[p],p),_=+x(f,p);v>b&&(v=b),d>_&&(d=_),b>y&&(y=b),_>m&&(m=_),s.push(b),h.push(_)}var w=y-v,S=m-d;w>S?m=d+w:y=v+S;var k=hr();if(k.add=function(n){u(k,n,+M(n,++p),+x(n,p),v,d,y,m)},k.visit=function(n){pr(n,k,v,d,y,m)},k.find=function(n){return gr(k,n[0],n[1],v,d,y,m)},p=-1,null==t){for(;++p<g;)u(k,n[p],s[p],h[p],v,d,y,m);--p}else n.forEach(k.add);return s=h=n=f=null,k}var o,a=Ce,l=ze;return(o=arguments.length)?(a=fr,l=sr,3===o&&(i=e,r=t,e=t=0),u(n)):(u.x=function(n){return arguments.length?(a=n,u):a},u.y=function(n){return arguments.length?(l=n,u):l},u.extent=function(n){return arguments.length?(null==n?t=e=r=i=null:(t=+n[0][0],e=+n[0][1],r=+n[1][0],i=+n[1][1]),u):null==t?null:[[t,e],[r,i]]},u.size=function(n){return arguments.length?(null==n?t=e=r=i=null:(t=e=0,r=+n[0],i=+n[1]),u):null==t?null:[r-t,i-e]},u)},ao.interpolateRgb=vr,ao.interpolateObject=dr,ao.interpolateNumber=yr,ao.interpolateString=mr;var hl=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,pl=new RegExp(hl.source,"g");ao.interpolate=Mr,ao.interpolators=[function(n,t){var e=typeof t;return("string"===e?ua.has(t.toLowerCase())||/^(#|rgb\(|hsl\()/i.test(t)?vr:mr:t instanceof an?vr:Array.isArray(t)?xr:"object"===e&&isNaN(t)?dr:yr)(n,t)}],ao.interpolateArray=xr;var gl=function(){return m},vl=ao.map({linear:gl,poly:Er,quad:function(){return Sr},cubic:function(){return kr},sin:function(){return Ar},exp:function(){return Cr},circle:function(){return zr},elastic:Lr,back:qr,bounce:function(){return Tr}}),dl=ao.map({"in":m,out:_r,"in-out":wr,"out-in":function(n){return wr(_r(n))}});ao.ease=function(n){var t=n.indexOf("-"),e=t>=0?n.slice(0,t):n,r=t>=0?n.slice(t+1):"in";return e=vl.get(e)||gl,r=dl.get(r)||m,br(r(e.apply(null,lo.call(arguments,1))))},ao.interpolateHcl=Rr,ao.interpolateHsl=Dr,ao.interpolateLab=Pr,ao.interpolateRound=Ur,ao.transform=function(n){var t=fo.createElementNS(ao.ns.prefix.svg,"g");return(ao.transform=function(n){if(null!=n){t.setAttribute("transform",n);var e=t.transform.baseVal.consolidate()}return new jr(e?e.matrix:yl)})(n)},jr.prototype.toString=function(){return"translate("+this.translate+")rotate("+this.rotate+")skewX("+this.skew+")scale("+this.scale+")"};var yl={a:1,b:0,c:0,d:1,e:0,f:0};ao.interpolateTransform=$r,ao.layout={},ao.layout.bundle=function(){return function(n){for(var t=[],e=-1,r=n.length;++e<r;)t.push(Jr(n[e]));return t}},ao.layout.chord=function(){function n(){var n,c,s,h,p,g={},v=[],d=ao.range(u),y=[];for(e=[],r=[],n=0,h=-1;++h<u;){for(c=0,p=-1;++p<u;)c+=i[h][p];v.push(c),y.push(ao.range(u)),n+=c}for(o&&d.sort(function(n,t){return o(v[n],v[t])}),a&&y.forEach(function(n,t){n.sort(function(n,e){return a(i[t][n],i[t][e])})}),n=(Ho-f*u)/n,c=0,h=-1;++h<u;){for(s=c,p=-1;++p<u;){var m=d[h],M=y[m][p],x=i[m][M],b=c,_=c+=x*n;g[m+"-"+M]={index:m,subindex:M,startAngle:b,endAngle:_,value:x}}r[m]={index:m,startAngle:s,endAngle:c,value:v[m]},c+=f}for(h=-1;++h<u;)for(p=h-1;++p<u;){var w=g[h+"-"+p],S=g[p+"-"+h];(w.value||S.value)&&e.push(w.value<S.value?{source:S,target:w}:{source:w,target:S})}l&&t()}function t(){e.sort(function(n,t){return l((n.source.value+n.target.value)/2,(t.source.value+t.target.value)/2)})}var e,r,i,u,o,a,l,c={},f=0;return c.matrix=function(n){return arguments.length?(u=(i=n)&&i.length,e=r=null,c):i},c.padding=function(n){return arguments.length?(f=n,e=r=null,c):f},c.sortGroups=function(n){return arguments.length?(o=n,e=r=null,c):o},c.sortSubgroups=function(n){return arguments.length?(a=n,e=null,c):a},c.sortChords=function(n){return arguments.length?(l=n,e&&t(),c):l},c.chords=function(){return e||n(),e},c.groups=function(){return r||n(),r},c},ao.layout.force=function(){function n(n){return function(t,e,r,i){if(t.point!==n){var u=t.cx-n.x,o=t.cy-n.y,a=i-e,l=u*u+o*o;if(l>a*a/y){if(v>l){var c=t.charge/l;n.px-=u*c,n.py-=o*c}return!0}if(t.point&&l&&v>l){var c=t.pointCharge/l;n.px-=u*c,n.py-=o*c}}return!t.charge}}function t(n){n.px=ao.event.x,n.py=ao.event.y,l.resume()}var e,r,i,u,o,a,l={},c=ao.dispatch("start","tick","end"),f=[1,1],s=.9,h=ml,p=Ml,g=-30,v=xl,d=.1,y=.64,M=[],x=[];return l.tick=function(){if((i*=.99)<.005)return e=null,c.end({type:"end",alpha:i=0}),!0;var t,r,l,h,p,v,y,m,b,_=M.length,w=x.length;for(r=0;w>r;++r)l=x[r],h=l.source,p=l.target,m=p.x-h.x,b=p.y-h.y,(v=m*m+b*b)&&(v=i*o[r]*((v=Math.sqrt(v))-u[r])/v,m*=v,b*=v,p.x-=m*(y=h.weight+p.weight?h.weight/(h.weight+p.weight):.5),p.y-=b*y,h.x+=m*(y=1-y),h.y+=b*y);if((y=i*d)&&(m=f[0]/2,b=f[1]/2,r=-1,y))for(;++r<_;)l=M[r],l.x+=(m-l.x)*y,l.y+=(b-l.y)*y;if(g)for(ri(t=ao.geom.quadtree(M),i,a),r=-1;++r<_;)(l=M[r]).fixed||t.visit(n(l));for(r=-1;++r<_;)l=M[r],l.fixed?(l.x=l.px,l.y=l.py):(l.x-=(l.px-(l.px=l.x))*s,l.y-=(l.py-(l.py=l.y))*s);c.tick({type:"tick",alpha:i})},l.nodes=function(n){return arguments.length?(M=n,l):M},l.links=function(n){return arguments.length?(x=n,l):x},l.size=function(n){return arguments.length?(f=n,l):f},l.linkDistance=function(n){return arguments.length?(h="function"==typeof n?n:+n,l):h},l.distance=l.linkDistance,l.linkStrength=function(n){return arguments.length?(p="function"==typeof n?n:+n,l):p},l.friction=function(n){return arguments.length?(s=+n,l):s},l.charge=function(n){return arguments.length?(g="function"==typeof n?n:+n,l):g},l.chargeDistance=function(n){return arguments.length?(v=n*n,l):Math.sqrt(v)},l.gravity=function(n){return arguments.length?(d=+n,l):d},l.theta=function(n){return arguments.length?(y=n*n,l):Math.sqrt(y)},l.alpha=function(n){return arguments.length?(n=+n,i?n>0?i=n:(e.c=null,e.t=NaN,e=null,c.end({type:"end",alpha:i=0})):n>0&&(c.start({type:"start",alpha:i=n}),e=qn(l.tick)),l):i},l.start=function(){function n(n,r){if(!e){for(e=new Array(i),l=0;i>l;++l)e[l]=[];for(l=0;c>l;++l){var u=x[l];e[u.source.index].push(u.target),e[u.target.index].push(u.source)}}for(var o,a=e[t],l=-1,f=a.length;++l<f;)if(!isNaN(o=a[l][n]))return o;return Math.random()*r}var t,e,r,i=M.length,c=x.length,s=f[0],v=f[1];for(t=0;i>t;++t)(r=M[t]).index=t,r.weight=0;for(t=0;c>t;++t)r=x[t],"number"==typeof r.source&&(r.source=M[r.source]),"number"==typeof r.target&&(r.target=M[r.target]),++r.source.weight,++r.target.weight;for(t=0;i>t;++t)r=M[t],isNaN(r.x)&&(r.x=n("x",s)),isNaN(r.y)&&(r.y=n("y",v)),isNaN(r.px)&&(r.px=r.x),isNaN(r.py)&&(r.py=r.y);if(u=[],"function"==typeof h)for(t=0;c>t;++t)u[t]=+h.call(this,x[t],t);else for(t=0;c>t;++t)u[t]=h;if(o=[],"function"==typeof p)for(t=0;c>t;++t)o[t]=+p.call(this,x[t],t);else for(t=0;c>t;++t)o[t]=p;if(a=[],"function"==typeof g)for(t=0;i>t;++t)a[t]=+g.call(this,M[t],t);else for(t=0;i>t;++t)a[t]=g;return l.resume()},l.resume=function(){return l.alpha(.1)},l.stop=function(){return l.alpha(0)},l.drag=function(){return r||(r=ao.behavior.drag().origin(m).on("dragstart.force",Qr).on("drag.force",t).on("dragend.force",ni)),arguments.length?void this.on("mouseover.force",ti).on("mouseout.force",ei).call(r):r},ao.rebind(l,c,"on")};var ml=20,Ml=1,xl=1/0;ao.layout.hierarchy=function(){function n(i){var u,o=[i],a=[];for(i.depth=0;null!=(u=o.pop());)if(a.push(u),(c=e.call(n,u,u.depth))&&(l=c.length)){for(var l,c,f;--l>=0;)o.push(f=c[l]),f.parent=u,f.depth=u.depth+1;r&&(u.value=0),u.children=c}else r&&(u.value=+r.call(n,u,u.depth)||0),delete u.children;return oi(i,function(n){var e,i;t&&(e=n.children)&&e.sort(t),r&&(i=n.parent)&&(i.value+=n.value)}),a}var t=ci,e=ai,r=li;return n.sort=function(e){return arguments.length?(t=e,n):t},n.children=function(t){return arguments.length?(e=t,n):e},n.value=function(t){return arguments.length?(r=t,n):r},n.revalue=function(t){return r&&(ui(t,function(n){n.children&&(n.value=0)}),oi(t,function(t){var e;t.children||(t.value=+r.call(n,t,t.depth)||0),(e=t.parent)&&(e.value+=t.value)})),t},n},ao.layout.partition=function(){function n(t,e,r,i){var u=t.children;if(t.x=e,t.y=t.depth*i,t.dx=r,t.dy=i,u&&(o=u.length)){var o,a,l,c=-1;for(r=t.value?r/t.value:0;++c<o;)n(a=u[c],e,l=a.value*r,i),e+=l}}function t(n){var e=n.children,r=0;if(e&&(i=e.length))for(var i,u=-1;++u<i;)r=Math.max(r,t(e[u]));return 1+r}function e(e,u){var o=r.call(this,e,u);return n(o[0],0,i[0],i[1]/t(o[0])),o}var r=ao.layout.hierarchy(),i=[1,1];return e.size=function(n){return arguments.length?(i=n,e):i},ii(e,r)},ao.layout.pie=function(){function n(o){var a,l=o.length,c=o.map(function(e,r){return+t.call(n,e,r)}),f=+("function"==typeof r?r.apply(this,arguments):r),s=("function"==typeof i?i.apply(this,arguments):i)-f,h=Math.min(Math.abs(s)/l,+("function"==typeof u?u.apply(this,arguments):u)),p=h*(0>s?-1:1),g=ao.sum(c),v=g?(s-l*p)/g:0,d=ao.range(l),y=[];return null!=e&&d.sort(e===bl?function(n,t){return c[t]-c[n]}:function(n,t){return e(o[n],o[t])}),d.forEach(function(n){y[n]={data:o[n],value:a=c[n],startAngle:f,endAngle:f+=a*v+p,padAngle:h}}),y}var t=Number,e=bl,r=0,i=Ho,u=0;return n.value=function(e){return arguments.length?(t=e,n):t},n.sort=function(t){return arguments.length?(e=t,n):e},n.startAngle=function(t){return arguments.length?(r=t,n):r},n.endAngle=function(t){return arguments.length?(i=t,n):i},n.padAngle=function(t){return arguments.length?(u=t,n):u},n};var bl={};ao.layout.stack=function(){function n(a,l){if(!(h=a.length))return a;var c=a.map(function(e,r){return t.call(n,e,r)}),f=c.map(function(t){return t.map(function(t,e){return[u.call(n,t,e),o.call(n,t,e)]})}),s=e.call(n,f,l);c=ao.permute(c,s),f=ao.permute(f,s);var h,p,g,v,d=r.call(n,f,l),y=c[0].length;for(g=0;y>g;++g)for(i.call(n,c[0][g],v=d[g],f[0][g][1]),p=1;h>p;++p)i.call(n,c[p][g],v+=f[p-1][g][1],f[p][g][1]);return a}var t=m,e=gi,r=vi,i=pi,u=si,o=hi;return n.values=function(e){return arguments.length?(t=e,n):t},n.order=function(t){return arguments.length?(e="function"==typeof t?t:_l.get(t)||gi,n):e},n.offset=function(t){return arguments.length?(r="function"==typeof t?t:wl.get(t)||vi,n):r},n.x=function(t){return arguments.length?(u=t,n):u},n.y=function(t){return arguments.length?(o=t,n):o},n.out=function(t){return arguments.length?(i=t,n):i},n};var _l=ao.map({"inside-out":function(n){var t,e,r=n.length,i=n.map(di),u=n.map(yi),o=ao.range(r).sort(function(n,t){return i[n]-i[t]}),a=0,l=0,c=[],f=[];for(t=0;r>t;++t)e=o[t],l>a?(a+=u[e],c.push(e)):(l+=u[e],f.push(e));return f.reverse().concat(c)},reverse:function(n){return ao.range(n.length).reverse()},"default":gi}),wl=ao.map({silhouette:function(n){var t,e,r,i=n.length,u=n[0].length,o=[],a=0,l=[];for(e=0;u>e;++e){for(t=0,r=0;i>t;t++)r+=n[t][e][1];r>a&&(a=r),o.push(r)}for(e=0;u>e;++e)l[e]=(a-o[e])/2;return l},wiggle:function(n){var t,e,r,i,u,o,a,l,c,f=n.length,s=n[0],h=s.length,p=[];for(p[0]=l=c=0,e=1;h>e;++e){for(t=0,i=0;f>t;++t)i+=n[t][e][1];for(t=0,u=0,a=s[e][0]-s[e-1][0];f>t;++t){for(r=0,o=(n[t][e][1]-n[t][e-1][1])/(2*a);t>r;++r)o+=(n[r][e][1]-n[r][e-1][1])/a;u+=o*n[t][e][1]}p[e]=l-=i?u/i*a:0,c>l&&(c=l)}for(e=0;h>e;++e)p[e]-=c;return p},expand:function(n){var t,e,r,i=n.length,u=n[0].length,o=1/i,a=[];for(e=0;u>e;++e){for(t=0,r=0;i>t;t++)r+=n[t][e][1];if(r)for(t=0;i>t;t++)n[t][e][1]/=r;else for(t=0;i>t;t++)n[t][e][1]=o}for(e=0;u>e;++e)a[e]=0;return a},zero:vi});ao.layout.histogram=function(){function n(n,u){for(var o,a,l=[],c=n.map(e,this),f=r.call(this,c,u),s=i.call(this,f,c,u),u=-1,h=c.length,p=s.length-1,g=t?1:1/h;++u<p;)o=l[u]=[],o.dx=s[u+1]-(o.x=s[u]),o.y=0;if(p>0)for(u=-1;++u<h;)a=c[u],a>=f[0]&&a<=f[1]&&(o=l[ao.bisect(s,a,1,p)-1],o.y+=g,o.push(n[u]));return l}var t=!0,e=Number,r=bi,i=Mi;return n.value=function(t){return arguments.length?(e=t,n):e},n.range=function(t){return arguments.length?(r=En(t),n):r},n.bins=function(t){return arguments.length?(i="number"==typeof t?function(n){return xi(n,t)}:En(t),n):i},n.frequency=function(e){return arguments.length?(t=!!e,n):t},n},ao.layout.pack=function(){function n(n,u){var o=e.call(this,n,u),a=o[0],l=i[0],c=i[1],f=null==t?Math.sqrt:"function"==typeof t?t:function(){return t};if(a.x=a.y=0,oi(a,function(n){n.r=+f(n.value)}),oi(a,Ni),r){var s=r*(t?1:Math.max(2*a.r/l,2*a.r/c))/2;oi(a,function(n){n.r+=s}),oi(a,Ni),oi(a,function(n){n.r-=s})}return Ci(a,l/2,c/2,t?1:1/Math.max(2*a.r/l,2*a.r/c)),o}var t,e=ao.layout.hierarchy().sort(_i),r=0,i=[1,1];return n.size=function(t){return arguments.length?(i=t,n):i},n.radius=function(e){return arguments.length?(t=null==e||"function"==typeof e?e:+e,n):t},n.padding=function(t){return arguments.length?(r=+t,n):r},ii(n,e)},ao.layout.tree=function(){function n(n,i){var f=o.call(this,n,i),s=f[0],h=t(s);if(oi(h,e),h.parent.m=-h.z,ui(h,r),c)ui(s,u);else{var p=s,g=s,v=s;ui(s,function(n){n.x<p.x&&(p=n),n.x>g.x&&(g=n),n.depth>v.depth&&(v=n)});var d=a(p,g)/2-p.x,y=l[0]/(g.x+a(g,p)/2+d),m=l[1]/(v.depth||1);ui(s,function(n){n.x=(n.x+d)*y,n.y=n.depth*m})}return f}function t(n){for(var t,e={A:null,children:[n]},r=[e];null!=(t=r.pop());)for(var i,u=t.children,o=0,a=u.length;a>o;++o)r.push((u[o]=i={_:u[o],parent:t,children:(i=u[o].children)&&i.slice()||[],A:null,a:null,z:0,m:0,c:0,s:0,t:null,i:o}).a=i);return e.children[0]}function e(n){var t=n.children,e=n.parent.children,r=n.i?e[n.i-1]:null;if(t.length){Di(n);var u=(t[0].z+t[t.length-1].z)/2;r?(n.z=r.z+a(n._,r._),n.m=n.z-u):n.z=u}else r&&(n.z=r.z+a(n._,r._));n.parent.A=i(n,r,n.parent.A||e[0])}function r(n){n._.x=n.z+n.parent.m,n.m+=n.parent.m}function i(n,t,e){if(t){for(var r,i=n,u=n,o=t,l=i.parent.children[0],c=i.m,f=u.m,s=o.m,h=l.m;o=Ti(o),i=qi(i),o&&i;)l=qi(l),u=Ti(u),u.a=n,r=o.z+s-i.z-c+a(o._,i._),r>0&&(Ri(Pi(o,n,e),n,r),c+=r,f+=r),s+=o.m,c+=i.m,h+=l.m,f+=u.m;o&&!Ti(u)&&(u.t=o,u.m+=s-f),i&&!qi(l)&&(l.t=i,l.m+=c-h,e=n)}return e}function u(n){n.x*=l[0],n.y=n.depth*l[1]}var o=ao.layout.hierarchy().sort(null).value(null),a=Li,l=[1,1],c=null;return n.separation=function(t){return arguments.length?(a=t,n):a},n.size=function(t){return arguments.length?(c=null==(l=t)?u:null,n):c?null:l},n.nodeSize=function(t){return arguments.length?(c=null==(l=t)?null:u,n):c?l:null},ii(n,o)},ao.layout.cluster=function(){function n(n,u){var o,a=t.call(this,n,u),l=a[0],c=0;oi(l,function(n){var t=n.children;t&&t.length?(n.x=ji(t),n.y=Ui(t)):(n.x=o?c+=e(n,o):0,n.y=0,o=n)});var f=Fi(l),s=Hi(l),h=f.x-e(f,s)/2,p=s.x+e(s,f)/2;return oi(l,i?function(n){n.x=(n.x-l.x)*r[0],n.y=(l.y-n.y)*r[1]}:function(n){n.x=(n.x-h)/(p-h)*r[0],n.y=(1-(l.y?n.y/l.y:1))*r[1]}),a}var t=ao.layout.hierarchy().sort(null).value(null),e=Li,r=[1,1],i=!1;return n.separation=function(t){return arguments.length?(e=t,n):e},n.size=function(t){return arguments.length?(i=null==(r=t),n):i?null:r},n.nodeSize=function(t){return arguments.length?(i=null!=(r=t),n):i?r:null},ii(n,t)},ao.layout.treemap=function(){function n(n,t){for(var e,r,i=-1,u=n.length;++i<u;)r=(e=n[i]).value*(0>t?0:t),e.area=isNaN(r)||0>=r?0:r}function t(e){var u=e.children;if(u&&u.length){var o,a,l,c=s(e),f=[],h=u.slice(),g=1/0,v="slice"===p?c.dx:"dice"===p?c.dy:"slice-dice"===p?1&e.depth?c.dy:c.dx:Math.min(c.dx,c.dy);for(n(h,c.dx*c.dy/e.value),f.area=0;(l=h.length)>0;)f.push(o=h[l-1]),f.area+=o.area,"squarify"!==p||(a=r(f,v))<=g?(h.pop(),g=a):(f.area-=f.pop().area,i(f,v,c,!1),v=Math.min(c.dx,c.dy),f.length=f.area=0,g=1/0);f.length&&(i(f,v,c,!0),f.length=f.area=0),u.forEach(t)}}function e(t){var r=t.children;if(r&&r.length){var u,o=s(t),a=r.slice(),l=[];for(n(a,o.dx*o.dy/t.value),l.area=0;u=a.pop();)l.push(u),l.area+=u.area,null!=u.z&&(i(l,u.z?o.dx:o.dy,o,!a.length),l.length=l.area=0);r.forEach(e)}}function r(n,t){for(var e,r=n.area,i=0,u=1/0,o=-1,a=n.length;++o<a;)(e=n[o].area)&&(u>e&&(u=e),e>i&&(i=e));return r*=r,t*=t,r?Math.max(t*i*g/r,r/(t*u*g)):1/0}function i(n,t,e,r){var i,u=-1,o=n.length,a=e.x,c=e.y,f=t?l(n.area/t):0;
if(t==e.dx){for((r||f>e.dy)&&(f=e.dy);++u<o;)i=n[u],i.x=a,i.y=c,i.dy=f,a+=i.dx=Math.min(e.x+e.dx-a,f?l(i.area/f):0);i.z=!0,i.dx+=e.x+e.dx-a,e.y+=f,e.dy-=f}else{for((r||f>e.dx)&&(f=e.dx);++u<o;)i=n[u],i.x=a,i.y=c,i.dx=f,c+=i.dy=Math.min(e.y+e.dy-c,f?l(i.area/f):0);i.z=!1,i.dy+=e.y+e.dy-c,e.x+=f,e.dx-=f}}function u(r){var i=o||a(r),u=i[0];return u.x=u.y=0,u.value?(u.dx=c[0],u.dy=c[1]):u.dx=u.dy=0,o&&a.revalue(u),n([u],u.dx*u.dy/u.value),(o?e:t)(u),h&&(o=i),i}var o,a=ao.layout.hierarchy(),l=Math.round,c=[1,1],f=null,s=Oi,h=!1,p="squarify",g=.5*(1+Math.sqrt(5));return u.size=function(n){return arguments.length?(c=n,u):c},u.padding=function(n){function t(t){var e=n.call(u,t,t.depth);return null==e?Oi(t):Ii(t,"number"==typeof e?[e,e,e,e]:e)}function e(t){return Ii(t,n)}if(!arguments.length)return f;var r;return s=null==(f=n)?Oi:"function"==(r=typeof n)?t:"number"===r?(n=[n,n,n,n],e):e,u},u.round=function(n){return arguments.length?(l=n?Math.round:Number,u):l!=Number},u.sticky=function(n){return arguments.length?(h=n,o=null,u):h},u.ratio=function(n){return arguments.length?(g=n,u):g},u.mode=function(n){return arguments.length?(p=n+"",u):p},ii(u,a)},ao.random={normal:function(n,t){var e=arguments.length;return 2>e&&(t=1),1>e&&(n=0),function(){var e,r,i;do e=2*Math.random()-1,r=2*Math.random()-1,i=e*e+r*r;while(!i||i>1);return n+t*e*Math.sqrt(-2*Math.log(i)/i)}},logNormal:function(){var n=ao.random.normal.apply(ao,arguments);return function(){return Math.exp(n())}},bates:function(n){var t=ao.random.irwinHall(n);return function(){return t()/n}},irwinHall:function(n){return function(){for(var t=0,e=0;n>e;e++)t+=Math.random();return t}}},ao.scale={};var Sl={floor:m,ceil:m};ao.scale.linear=function(){return Wi([0,1],[0,1],Mr,!1)};var kl={s:1,g:1,p:1,r:1,e:1};ao.scale.log=function(){return ru(ao.scale.linear().domain([0,1]),10,!0,[1,10])};var Nl=ao.format(".0e"),El={floor:function(n){return-Math.ceil(-n)},ceil:function(n){return-Math.floor(-n)}};ao.scale.pow=function(){return iu(ao.scale.linear(),1,[0,1])},ao.scale.sqrt=function(){return ao.scale.pow().exponent(.5)},ao.scale.ordinal=function(){return ou([],{t:"range",a:[[]]})},ao.scale.category10=function(){return ao.scale.ordinal().range(Al)},ao.scale.category20=function(){return ao.scale.ordinal().range(Cl)},ao.scale.category20b=function(){return ao.scale.ordinal().range(zl)},ao.scale.category20c=function(){return ao.scale.ordinal().range(Ll)};var Al=[2062260,16744206,2924588,14034728,9725885,9197131,14907330,8355711,12369186,1556175].map(xn),Cl=[2062260,11454440,16744206,16759672,2924588,10018698,14034728,16750742,9725885,12955861,9197131,12885140,14907330,16234194,8355711,13092807,12369186,14408589,1556175,10410725].map(xn),zl=[3750777,5395619,7040719,10264286,6519097,9216594,11915115,13556636,9202993,12426809,15186514,15190932,8666169,11356490,14049643,15177372,8077683,10834324,13528509,14589654].map(xn),Ll=[3244733,7057110,10406625,13032431,15095053,16616764,16625259,16634018,3253076,7652470,10607003,13101504,7695281,10394312,12369372,14342891,6513507,9868950,12434877,14277081].map(xn);ao.scale.quantile=function(){return au([],[])},ao.scale.quantize=function(){return lu(0,1,[0,1])},ao.scale.threshold=function(){return cu([.5],[0,1])},ao.scale.identity=function(){return fu([0,1])},ao.svg={},ao.svg.arc=function(){function n(){var n=Math.max(0,+e.apply(this,arguments)),c=Math.max(0,+r.apply(this,arguments)),f=o.apply(this,arguments)-Io,s=a.apply(this,arguments)-Io,h=Math.abs(s-f),p=f>s?0:1;if(n>c&&(g=c,c=n,n=g),h>=Oo)return t(c,p)+(n?t(n,1-p):"")+"Z";var g,v,d,y,m,M,x,b,_,w,S,k,N=0,E=0,A=[];if((y=(+l.apply(this,arguments)||0)/2)&&(d=u===ql?Math.sqrt(n*n+c*c):+u.apply(this,arguments),p||(E*=-1),c&&(E=tn(d/c*Math.sin(y))),n&&(N=tn(d/n*Math.sin(y)))),c){m=c*Math.cos(f+E),M=c*Math.sin(f+E),x=c*Math.cos(s-E),b=c*Math.sin(s-E);var C=Math.abs(s-f-2*E)<=Fo?0:1;if(E&&yu(m,M,x,b)===p^C){var z=(f+s)/2;m=c*Math.cos(z),M=c*Math.sin(z),x=b=null}}else m=M=0;if(n){_=n*Math.cos(s-N),w=n*Math.sin(s-N),S=n*Math.cos(f+N),k=n*Math.sin(f+N);var L=Math.abs(f-s+2*N)<=Fo?0:1;if(N&&yu(_,w,S,k)===1-p^L){var q=(f+s)/2;_=n*Math.cos(q),w=n*Math.sin(q),S=k=null}}else _=w=0;if(h>Uo&&(g=Math.min(Math.abs(c-n)/2,+i.apply(this,arguments)))>.001){v=c>n^p?0:1;var T=g,R=g;if(Fo>h){var D=null==S?[_,w]:null==x?[m,M]:Re([m,M],[S,k],[x,b],[_,w]),P=m-D[0],U=M-D[1],j=x-D[0],F=b-D[1],H=1/Math.sin(Math.acos((P*j+U*F)/(Math.sqrt(P*P+U*U)*Math.sqrt(j*j+F*F)))/2),O=Math.sqrt(D[0]*D[0]+D[1]*D[1]);R=Math.min(g,(n-O)/(H-1)),T=Math.min(g,(c-O)/(H+1))}if(null!=x){var I=mu(null==S?[_,w]:[S,k],[m,M],c,T,p),Y=mu([x,b],[_,w],c,T,p);g===T?A.push("M",I[0],"A",T,",",T," 0 0,",v," ",I[1],"A",c,",",c," 0 ",1-p^yu(I[1][0],I[1][1],Y[1][0],Y[1][1]),",",p," ",Y[1],"A",T,",",T," 0 0,",v," ",Y[0]):A.push("M",I[0],"A",T,",",T," 0 1,",v," ",Y[0])}else A.push("M",m,",",M);if(null!=S){var Z=mu([m,M],[S,k],n,-R,p),V=mu([_,w],null==x?[m,M]:[x,b],n,-R,p);g===R?A.push("L",V[0],"A",R,",",R," 0 0,",v," ",V[1],"A",n,",",n," 0 ",p^yu(V[1][0],V[1][1],Z[1][0],Z[1][1]),",",1-p," ",Z[1],"A",R,",",R," 0 0,",v," ",Z[0]):A.push("L",V[0],"A",R,",",R," 0 0,",v," ",Z[0])}else A.push("L",_,",",w)}else A.push("M",m,",",M),null!=x&&A.push("A",c,",",c," 0 ",C,",",p," ",x,",",b),A.push("L",_,",",w),null!=S&&A.push("A",n,",",n," 0 ",L,",",1-p," ",S,",",k);return A.push("Z"),A.join("")}function t(n,t){return"M0,"+n+"A"+n+","+n+" 0 1,"+t+" 0,"+-n+"A"+n+","+n+" 0 1,"+t+" 0,"+n}var e=hu,r=pu,i=su,u=ql,o=gu,a=vu,l=du;return n.innerRadius=function(t){return arguments.length?(e=En(t),n):e},n.outerRadius=function(t){return arguments.length?(r=En(t),n):r},n.cornerRadius=function(t){return arguments.length?(i=En(t),n):i},n.padRadius=function(t){return arguments.length?(u=t==ql?ql:En(t),n):u},n.startAngle=function(t){return arguments.length?(o=En(t),n):o},n.endAngle=function(t){return arguments.length?(a=En(t),n):a},n.padAngle=function(t){return arguments.length?(l=En(t),n):l},n.centroid=function(){var n=(+e.apply(this,arguments)+ +r.apply(this,arguments))/2,t=(+o.apply(this,arguments)+ +a.apply(this,arguments))/2-Io;return[Math.cos(t)*n,Math.sin(t)*n]},n};var ql="auto";ao.svg.line=function(){return Mu(m)};var Tl=ao.map({linear:xu,"linear-closed":bu,step:_u,"step-before":wu,"step-after":Su,basis:zu,"basis-open":Lu,"basis-closed":qu,bundle:Tu,cardinal:Eu,"cardinal-open":ku,"cardinal-closed":Nu,monotone:Fu});Tl.forEach(function(n,t){t.key=n,t.closed=/-closed$/.test(n)});var Rl=[0,2/3,1/3,0],Dl=[0,1/3,2/3,0],Pl=[0,1/6,2/3,1/6];ao.svg.line.radial=function(){var n=Mu(Hu);return n.radius=n.x,delete n.x,n.angle=n.y,delete n.y,n},wu.reverse=Su,Su.reverse=wu,ao.svg.area=function(){return Ou(m)},ao.svg.area.radial=function(){var n=Ou(Hu);return n.radius=n.x,delete n.x,n.innerRadius=n.x0,delete n.x0,n.outerRadius=n.x1,delete n.x1,n.angle=n.y,delete n.y,n.startAngle=n.y0,delete n.y0,n.endAngle=n.y1,delete n.y1,n},ao.svg.chord=function(){function n(n,a){var l=t(this,u,n,a),c=t(this,o,n,a);return"M"+l.p0+r(l.r,l.p1,l.a1-l.a0)+(e(l,c)?i(l.r,l.p1,l.r,l.p0):i(l.r,l.p1,c.r,c.p0)+r(c.r,c.p1,c.a1-c.a0)+i(c.r,c.p1,l.r,l.p0))+"Z"}function t(n,t,e,r){var i=t.call(n,e,r),u=a.call(n,i,r),o=l.call(n,i,r)-Io,f=c.call(n,i,r)-Io;return{r:u,a0:o,a1:f,p0:[u*Math.cos(o),u*Math.sin(o)],p1:[u*Math.cos(f),u*Math.sin(f)]}}function e(n,t){return n.a0==t.a0&&n.a1==t.a1}function r(n,t,e){return"A"+n+","+n+" 0 "+ +(e>Fo)+",1 "+t}function i(n,t,e,r){return"Q 0,0 "+r}var u=Me,o=xe,a=Iu,l=gu,c=vu;return n.radius=function(t){return arguments.length?(a=En(t),n):a},n.source=function(t){return arguments.length?(u=En(t),n):u},n.target=function(t){return arguments.length?(o=En(t),n):o},n.startAngle=function(t){return arguments.length?(l=En(t),n):l},n.endAngle=function(t){return arguments.length?(c=En(t),n):c},n},ao.svg.diagonal=function(){function n(n,i){var u=t.call(this,n,i),o=e.call(this,n,i),a=(u.y+o.y)/2,l=[u,{x:u.x,y:a},{x:o.x,y:a},o];return l=l.map(r),"M"+l[0]+"C"+l[1]+" "+l[2]+" "+l[3]}var t=Me,e=xe,r=Yu;return n.source=function(e){return arguments.length?(t=En(e),n):t},n.target=function(t){return arguments.length?(e=En(t),n):e},n.projection=function(t){return arguments.length?(r=t,n):r},n},ao.svg.diagonal.radial=function(){var n=ao.svg.diagonal(),t=Yu,e=n.projection;return n.projection=function(n){return arguments.length?e(Zu(t=n)):t},n},ao.svg.symbol=function(){function n(n,r){return(Ul.get(t.call(this,n,r))||$u)(e.call(this,n,r))}var t=Xu,e=Vu;return n.type=function(e){return arguments.length?(t=En(e),n):t},n.size=function(t){return arguments.length?(e=En(t),n):e},n};var Ul=ao.map({circle:$u,cross:function(n){var t=Math.sqrt(n/5)/2;return"M"+-3*t+","+-t+"H"+-t+"V"+-3*t+"H"+t+"V"+-t+"H"+3*t+"V"+t+"H"+t+"V"+3*t+"H"+-t+"V"+t+"H"+-3*t+"Z"},diamond:function(n){var t=Math.sqrt(n/(2*Fl)),e=t*Fl;return"M0,"+-t+"L"+e+",0 0,"+t+" "+-e+",0Z"},square:function(n){var t=Math.sqrt(n)/2;return"M"+-t+","+-t+"L"+t+","+-t+" "+t+","+t+" "+-t+","+t+"Z"},"triangle-down":function(n){var t=Math.sqrt(n/jl),e=t*jl/2;return"M0,"+e+"L"+t+","+-e+" "+-t+","+-e+"Z"},"triangle-up":function(n){var t=Math.sqrt(n/jl),e=t*jl/2;return"M0,"+-e+"L"+t+","+e+" "+-t+","+e+"Z"}});ao.svg.symbolTypes=Ul.keys();var jl=Math.sqrt(3),Fl=Math.tan(30*Yo);Co.transition=function(n){for(var t,e,r=Hl||++Zl,i=Ku(n),u=[],o=Ol||{time:Date.now(),ease:Nr,delay:0,duration:250},a=-1,l=this.length;++a<l;){u.push(t=[]);for(var c=this[a],f=-1,s=c.length;++f<s;)(e=c[f])&&Qu(e,f,i,r,o),t.push(e)}return Wu(u,i,r)},Co.interrupt=function(n){return this.each(null==n?Il:Bu(Ku(n)))};var Hl,Ol,Il=Bu(Ku()),Yl=[],Zl=0;Yl.call=Co.call,Yl.empty=Co.empty,Yl.node=Co.node,Yl.size=Co.size,ao.transition=function(n,t){return n&&n.transition?Hl?n.transition(t):n:ao.selection().transition(n)},ao.transition.prototype=Yl,Yl.select=function(n){var t,e,r,i=this.id,u=this.namespace,o=[];n=A(n);for(var a=-1,l=this.length;++a<l;){o.push(t=[]);for(var c=this[a],f=-1,s=c.length;++f<s;)(r=c[f])&&(e=n.call(r,r.__data__,f,a))?("__data__"in r&&(e.__data__=r.__data__),Qu(e,f,u,i,r[u][i]),t.push(e)):t.push(null)}return Wu(o,u,i)},Yl.selectAll=function(n){var t,e,r,i,u,o=this.id,a=this.namespace,l=[];n=C(n);for(var c=-1,f=this.length;++c<f;)for(var s=this[c],h=-1,p=s.length;++h<p;)if(r=s[h]){u=r[a][o],e=n.call(r,r.__data__,h,c),l.push(t=[]);for(var g=-1,v=e.length;++g<v;)(i=e[g])&&Qu(i,g,a,o,u),t.push(i)}return Wu(l,a,o)},Yl.filter=function(n){var t,e,r,i=[];"function"!=typeof n&&(n=O(n));for(var u=0,o=this.length;o>u;u++){i.push(t=[]);for(var e=this[u],a=0,l=e.length;l>a;a++)(r=e[a])&&n.call(r,r.__data__,a,u)&&t.push(r)}return Wu(i,this.namespace,this.id)},Yl.tween=function(n,t){var e=this.id,r=this.namespace;return arguments.length<2?this.node()[r][e].tween.get(n):Y(this,null==t?function(t){t[r][e].tween.remove(n)}:function(i){i[r][e].tween.set(n,t)})},Yl.attr=function(n,t){function e(){this.removeAttribute(a)}function r(){this.removeAttributeNS(a.space,a.local)}function i(n){return null==n?e:(n+="",function(){var t,e=this.getAttribute(a);return e!==n&&(t=o(e,n),function(n){this.setAttribute(a,t(n))})})}function u(n){return null==n?r:(n+="",function(){var t,e=this.getAttributeNS(a.space,a.local);return e!==n&&(t=o(e,n),function(n){this.setAttributeNS(a.space,a.local,t(n))})})}if(arguments.length<2){for(t in n)this.attr(t,n[t]);return this}var o="transform"==n?$r:Mr,a=ao.ns.qualify(n);return Ju(this,"attr."+n,t,a.local?u:i)},Yl.attrTween=function(n,t){function e(n,e){var r=t.call(this,n,e,this.getAttribute(i));return r&&function(n){this.setAttribute(i,r(n))}}function r(n,e){var r=t.call(this,n,e,this.getAttributeNS(i.space,i.local));return r&&function(n){this.setAttributeNS(i.space,i.local,r(n))}}var i=ao.ns.qualify(n);return this.tween("attr."+n,i.local?r:e)},Yl.style=function(n,e,r){function i(){this.style.removeProperty(n)}function u(e){return null==e?i:(e+="",function(){var i,u=t(this).getComputedStyle(this,null).getPropertyValue(n);return u!==e&&(i=Mr(u,e),function(t){this.style.setProperty(n,i(t),r)})})}var o=arguments.length;if(3>o){if("string"!=typeof n){2>o&&(e="");for(r in n)this.style(r,n[r],e);return this}r=""}return Ju(this,"style."+n,e,u)},Yl.styleTween=function(n,e,r){function i(i,u){var o=e.call(this,i,u,t(this).getComputedStyle(this,null).getPropertyValue(n));return o&&function(t){this.style.setProperty(n,o(t),r)}}return arguments.length<3&&(r=""),this.tween("style."+n,i)},Yl.text=function(n){return Ju(this,"text",n,Gu)},Yl.remove=function(){var n=this.namespace;return this.each("end.transition",function(){var t;this[n].count<2&&(t=this.parentNode)&&t.removeChild(this)})},Yl.ease=function(n){var t=this.id,e=this.namespace;return arguments.length<1?this.node()[e][t].ease:("function"!=typeof n&&(n=ao.ease.apply(ao,arguments)),Y(this,function(r){r[e][t].ease=n}))},Yl.delay=function(n){var t=this.id,e=this.namespace;return arguments.length<1?this.node()[e][t].delay:Y(this,"function"==typeof n?function(r,i,u){r[e][t].delay=+n.call(r,r.__data__,i,u)}:(n=+n,function(r){r[e][t].delay=n}))},Yl.duration=function(n){var t=this.id,e=this.namespace;return arguments.length<1?this.node()[e][t].duration:Y(this,"function"==typeof n?function(r,i,u){r[e][t].duration=Math.max(1,n.call(r,r.__data__,i,u))}:(n=Math.max(1,n),function(r){r[e][t].duration=n}))},Yl.each=function(n,t){var e=this.id,r=this.namespace;if(arguments.length<2){var i=Ol,u=Hl;try{Hl=e,Y(this,function(t,i,u){Ol=t[r][e],n.call(t,t.__data__,i,u)})}finally{Ol=i,Hl=u}}else Y(this,function(i){var u=i[r][e];(u.event||(u.event=ao.dispatch("start","end","interrupt"))).on(n,t)});return this},Yl.transition=function(){for(var n,t,e,r,i=this.id,u=++Zl,o=this.namespace,a=[],l=0,c=this.length;c>l;l++){a.push(n=[]);for(var t=this[l],f=0,s=t.length;s>f;f++)(e=t[f])&&(r=e[o][i],Qu(e,f,o,u,{time:r.time,ease:r.ease,delay:r.delay+r.duration,duration:r.duration})),n.push(e)}return Wu(a,o,u)},ao.svg.axis=function(){function n(n){n.each(function(){var n,c=ao.select(this),f=this.__chart__||e,s=this.__chart__=e.copy(),h=null==l?s.ticks?s.ticks.apply(s,a):s.domain():l,p=null==t?s.tickFormat?s.tickFormat.apply(s,a):m:t,g=c.selectAll(".tick").data(h,s),v=g.enter().insert("g",".domain").attr("class","tick").style("opacity",Uo),d=ao.transition(g.exit()).style("opacity",Uo).remove(),y=ao.transition(g.order()).style("opacity",1),M=Math.max(i,0)+o,x=Zi(s),b=c.selectAll(".domain").data([0]),_=(b.enter().append("path").attr("class","domain"),ao.transition(b));v.append("line"),v.append("text");var w,S,k,N,E=v.select("line"),A=y.select("line"),C=g.select("text").text(p),z=v.select("text"),L=y.select("text"),q="top"===r||"left"===r?-1:1;if("bottom"===r||"top"===r?(n=no,w="x",k="y",S="x2",N="y2",C.attr("dy",0>q?"0em":".71em").style("text-anchor","middle"),_.attr("d","M"+x[0]+","+q*u+"V0H"+x[1]+"V"+q*u)):(n=to,w="y",k="x",S="y2",N="x2",C.attr("dy",".32em").style("text-anchor",0>q?"end":"start"),_.attr("d","M"+q*u+","+x[0]+"H0V"+x[1]+"H"+q*u)),E.attr(N,q*i),z.attr(k,q*M),A.attr(S,0).attr(N,q*i),L.attr(w,0).attr(k,q*M),s.rangeBand){var T=s,R=T.rangeBand()/2;f=s=function(n){return T(n)+R}}else f.rangeBand?f=s:d.call(n,s,f);v.call(n,f,s),y.call(n,s,s)})}var t,e=ao.scale.linear(),r=Vl,i=6,u=6,o=3,a=[10],l=null;return n.scale=function(t){return arguments.length?(e=t,n):e},n.orient=function(t){return arguments.length?(r=t in Xl?t+"":Vl,n):r},n.ticks=function(){return arguments.length?(a=co(arguments),n):a},n.tickValues=function(t){return arguments.length?(l=t,n):l},n.tickFormat=function(e){return arguments.length?(t=e,n):t},n.tickSize=function(t){var e=arguments.length;return e?(i=+t,u=+arguments[e-1],n):i},n.innerTickSize=function(t){return arguments.length?(i=+t,n):i},n.outerTickSize=function(t){return arguments.length?(u=+t,n):u},n.tickPadding=function(t){return arguments.length?(o=+t,n):o},n.tickSubdivide=function(){return arguments.length&&n},n};var Vl="bottom",Xl={top:1,right:1,bottom:1,left:1};ao.svg.brush=function(){function n(t){t.each(function(){var t=ao.select(this).style("pointer-events","all").style("-webkit-tap-highlight-color","rgba(0,0,0,0)").on("mousedown.brush",u).on("touchstart.brush",u),o=t.selectAll(".background").data([0]);o.enter().append("rect").attr("class","background").style("visibility","hidden").style("cursor","crosshair"),t.selectAll(".extent").data([0]).enter().append("rect").attr("class","extent").style("cursor","move");var a=t.selectAll(".resize").data(v,m);a.exit().remove(),a.enter().append("g").attr("class",function(n){return"resize "+n}).style("cursor",function(n){return $l[n]}).append("rect").attr("x",function(n){return/[ew]$/.test(n)?-3:null}).attr("y",function(n){return/^[ns]/.test(n)?-3:null}).attr("width",6).attr("height",6).style("visibility","hidden"),a.style("display",n.empty()?"none":null);var l,s=ao.transition(t),h=ao.transition(o);c&&(l=Zi(c),h.attr("x",l[0]).attr("width",l[1]-l[0]),r(s)),f&&(l=Zi(f),h.attr("y",l[0]).attr("height",l[1]-l[0]),i(s)),e(s)})}function e(n){n.selectAll(".resize").attr("transform",function(n){return"translate("+s[+/e$/.test(n)]+","+h[+/^s/.test(n)]+")"})}function r(n){n.select(".extent").attr("x",s[0]),n.selectAll(".extent,.n>rect,.s>rect").attr("width",s[1]-s[0])}function i(n){n.select(".extent").attr("y",h[0]),n.selectAll(".extent,.e>rect,.w>rect").attr("height",h[1]-h[0])}function u(){function u(){32==ao.event.keyCode&&(C||(M=null,L[0]-=s[1],L[1]-=h[1],C=2),S())}function v(){32==ao.event.keyCode&&2==C&&(L[0]+=s[1],L[1]+=h[1],C=0,S())}function d(){var n=ao.mouse(b),t=!1;x&&(n[0]+=x[0],n[1]+=x[1]),C||(ao.event.altKey?(M||(M=[(s[0]+s[1])/2,(h[0]+h[1])/2]),L[0]=s[+(n[0]<M[0])],L[1]=h[+(n[1]<M[1])]):M=null),E&&y(n,c,0)&&(r(k),t=!0),A&&y(n,f,1)&&(i(k),t=!0),t&&(e(k),w({type:"brush",mode:C?"move":"resize"}))}function y(n,t,e){var r,i,u=Zi(t),l=u[0],c=u[1],f=L[e],v=e?h:s,d=v[1]-v[0];return C&&(l-=f,c-=d+f),r=(e?g:p)?Math.max(l,Math.min(c,n[e])):n[e],C?i=(r+=f)+d:(M&&(f=Math.max(l,Math.min(c,2*M[e]-r))),r>f?(i=r,r=f):i=f),v[0]!=r||v[1]!=i?(e?a=null:o=null,v[0]=r,v[1]=i,!0):void 0}function m(){d(),k.style("pointer-events","all").selectAll(".resize").style("display",n.empty()?"none":null),ao.select("body").style("cursor",null),q.on("mousemove.brush",null).on("mouseup.brush",null).on("touchmove.brush",null).on("touchend.brush",null).on("keydown.brush",null).on("keyup.brush",null),z(),w({type:"brushend"})}var M,x,b=this,_=ao.select(ao.event.target),w=l.of(b,arguments),k=ao.select(b),N=_.datum(),E=!/^(n|s)$/.test(N)&&c,A=!/^(e|w)$/.test(N)&&f,C=_.classed("extent"),z=W(b),L=ao.mouse(b),q=ao.select(t(b)).on("keydown.brush",u).on("keyup.brush",v);if(ao.event.changedTouches?q.on("touchmove.brush",d).on("touchend.brush",m):q.on("mousemove.brush",d).on("mouseup.brush",m),k.interrupt().selectAll("*").interrupt(),C)L[0]=s[0]-L[0],L[1]=h[0]-L[1];else if(N){var T=+/w$/.test(N),R=+/^n/.test(N);x=[s[1-T]-L[0],h[1-R]-L[1]],L[0]=s[T],L[1]=h[R]}else ao.event.altKey&&(M=L.slice());k.style("pointer-events","none").selectAll(".resize").style("display",null),ao.select("body").style("cursor",_.style("cursor")),w({type:"brushstart"}),d()}var o,a,l=N(n,"brushstart","brush","brushend"),c=null,f=null,s=[0,0],h=[0,0],p=!0,g=!0,v=Bl[0];return n.event=function(n){n.each(function(){var n=l.of(this,arguments),t={x:s,y:h,i:o,j:a},e=this.__chart__||t;this.__chart__=t,Hl?ao.select(this).transition().each("start.brush",function(){o=e.i,a=e.j,s=e.x,h=e.y,n({type:"brushstart"})}).tween("brush:brush",function(){var e=xr(s,t.x),r=xr(h,t.y);return o=a=null,function(i){s=t.x=e(i),h=t.y=r(i),n({type:"brush",mode:"resize"})}}).each("end.brush",function(){o=t.i,a=t.j,n({type:"brush",mode:"resize"}),n({type:"brushend"})}):(n({type:"brushstart"}),n({type:"brush",mode:"resize"}),n({type:"brushend"}))})},n.x=function(t){return arguments.length?(c=t,v=Bl[!c<<1|!f],n):c},n.y=function(t){return arguments.length?(f=t,v=Bl[!c<<1|!f],n):f},n.clamp=function(t){return arguments.length?(c&&f?(p=!!t[0],g=!!t[1]):c?p=!!t:f&&(g=!!t),n):c&&f?[p,g]:c?p:f?g:null},n.extent=function(t){var e,r,i,u,l;return arguments.length?(c&&(e=t[0],r=t[1],f&&(e=e[0],r=r[0]),o=[e,r],c.invert&&(e=c(e),r=c(r)),e>r&&(l=e,e=r,r=l),e==s[0]&&r==s[1]||(s=[e,r])),f&&(i=t[0],u=t[1],c&&(i=i[1],u=u[1]),a=[i,u],f.invert&&(i=f(i),u=f(u)),i>u&&(l=i,i=u,u=l),i==h[0]&&u==h[1]||(h=[i,u])),n):(c&&(o?(e=o[0],r=o[1]):(e=s[0],r=s[1],c.invert&&(e=c.invert(e),r=c.invert(r)),e>r&&(l=e,e=r,r=l))),f&&(a?(i=a[0],u=a[1]):(i=h[0],u=h[1],f.invert&&(i=f.invert(i),u=f.invert(u)),i>u&&(l=i,i=u,u=l))),c&&f?[[e,i],[r,u]]:c?[e,r]:f&&[i,u])},n.clear=function(){return n.empty()||(s=[0,0],h=[0,0],o=a=null),n},n.empty=function(){return!!c&&s[0]==s[1]||!!f&&h[0]==h[1]},ao.rebind(n,l,"on")};var $l={n:"ns-resize",e:"ew-resize",s:"ns-resize",w:"ew-resize",nw:"nwse-resize",ne:"nesw-resize",se:"nwse-resize",sw:"nesw-resize"},Bl=[["n","e","s","w","nw","ne","se","sw"],["e","w"],["n","s"],[]],Wl=ga.format=xa.timeFormat,Jl=Wl.utc,Gl=Jl("%Y-%m-%dT%H:%M:%S.%LZ");Wl.iso=Date.prototype.toISOString&&+new Date("2000-01-01T00:00:00.000Z")?eo:Gl,eo.parse=function(n){var t=new Date(n);return isNaN(t)?null:t},eo.toString=Gl.toString,ga.second=On(function(n){return new va(1e3*Math.floor(n/1e3))},function(n,t){n.setTime(n.getTime()+1e3*Math.floor(t))},function(n){return n.getSeconds()}),ga.seconds=ga.second.range,ga.seconds.utc=ga.second.utc.range,ga.minute=On(function(n){return new va(6e4*Math.floor(n/6e4))},function(n,t){n.setTime(n.getTime()+6e4*Math.floor(t))},function(n){return n.getMinutes()}),ga.minutes=ga.minute.range,ga.minutes.utc=ga.minute.utc.range,ga.hour=On(function(n){var t=n.getTimezoneOffset()/60;return new va(36e5*(Math.floor(n/36e5-t)+t))},function(n,t){n.setTime(n.getTime()+36e5*Math.floor(t))},function(n){return n.getHours()}),ga.hours=ga.hour.range,ga.hours.utc=ga.hour.utc.range,ga.month=On(function(n){return n=ga.day(n),n.setDate(1),n},function(n,t){n.setMonth(n.getMonth()+t)},function(n){return n.getMonth()}),ga.months=ga.month.range,ga.months.utc=ga.month.utc.range;var Kl=[1e3,5e3,15e3,3e4,6e4,3e5,9e5,18e5,36e5,108e5,216e5,432e5,864e5,1728e5,6048e5,2592e6,7776e6,31536e6],Ql=[[ga.second,1],[ga.second,5],[ga.second,15],[ga.second,30],[ga.minute,1],[ga.minute,5],[ga.minute,15],[ga.minute,30],[ga.hour,1],[ga.hour,3],[ga.hour,6],[ga.hour,12],[ga.day,1],[ga.day,2],[ga.week,1],[ga.month,1],[ga.month,3],[ga.year,1]],nc=Wl.multi([[".%L",function(n){return n.getMilliseconds()}],[":%S",function(n){return n.getSeconds()}],["%I:%M",function(n){return n.getMinutes()}],["%I %p",function(n){return n.getHours()}],["%a %d",function(n){return n.getDay()&&1!=n.getDate()}],["%b %d",function(n){return 1!=n.getDate()}],["%B",function(n){return n.getMonth()}],["%Y",zt]]),tc={range:function(n,t,e){return ao.range(Math.ceil(n/e)*e,+t,e).map(io)},floor:m,ceil:m};Ql.year=ga.year,ga.scale=function(){return ro(ao.scale.linear(),Ql,nc)};var ec=Ql.map(function(n){return[n[0].utc,n[1]]}),rc=Jl.multi([[".%L",function(n){return n.getUTCMilliseconds()}],[":%S",function(n){return n.getUTCSeconds()}],["%I:%M",function(n){return n.getUTCMinutes()}],["%I %p",function(n){return n.getUTCHours()}],["%a %d",function(n){return n.getUTCDay()&&1!=n.getUTCDate()}],["%b %d",function(n){return 1!=n.getUTCDate()}],["%B",function(n){return n.getUTCMonth()}],["%Y",zt]]);ec.year=ga.year.utc,ga.scale.utc=function(){return ro(ao.scale.linear(),ec,rc)},ao.text=An(function(n){return n.responseText}),ao.json=function(n,t){return Cn(n,"application/json",uo,t)},ao.html=function(n,t){return Cn(n,"text/html",oo,t)},ao.xml=An(function(n){return n.responseXML}),"function"==typeof define&&define.amd?(this.d3=ao,define(ao)):"object"==typeof module&&module.exports?module.exports=ao:this.d3=ao}();
var process = process || {env: {NODE_ENV: "development"}};
/*
 * component-library
 * 

 * Version: 17.0.0 - 2022-06-21
 * License: Copyright 2018-2022 Ellucian Company L.P. and its affiliates.
 */
angular.module("xe-ui-components", ['badge','button','checkbox','dropdown','label','radiobutton','simpleTextbox','statusLabel','switch','textarea','textbox','ui.select','xeUISelect','external-resouces','utils','columnFilter','pagination','search','xebarmodule','dataTableModule','aboutModal','pieChartModule','popupModal','tabnav','timePicker','xe-ui-components-tpls']);
angular.module('xe-ui-components-tpls', ['templates/badge.html', 'templates/button.html', 'templates/checkbox.html', 'templates/dropdown.html', 'templates/label.html', 'templates/radio-button.html', 'templates/simple-textbox.html', 'templates/statusLabel.html', 'templates/switch.html', 'templates/text-area-counter.html', 'templates/text-area.html', 'templates/text-box-char-limit.html', 'templates/text-box-password.html', 'templates/text-box.html', 'templates/column-filter.html', 'templates/pagination.html', 'templates/search.html', 'templates/dataTable.html', 'templates/dialog.html', 'templates/dialog_default.html', 'templates/modal.html', 'templates/tabNav.html', 'templates/tabPanel.html', 'templates/timePicker.html', 'templates/timePicker_rtl.html']);

angular.module("templates/badge.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/badge.html",
    "<span aria-live=\"assertive\" tabindex=\"0\" class=\"xe-badge {{::xeType}}-badge\" ng-bind=\"xeLabel\">{{xeLabel}}</span>");
}]);

angular.module("templates/button.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/button.html",
    "<button xe-data id=\"{{::xeId}}\" class=\"{{xeType +' '+ xeBtnClass}}\" ng-disabled=\"xeDisabled\" aria-label=\"{{xeAriaLabel}}\" ng-click=\"xeBtnClick()\" ng-bind=\"xeLabel\"></button>");
}]);

angular.module("templates/checkbox.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/checkbox.html",
    "<div class=\"xe-container\" aria-checked=\"{{xeModel}}\" aria-disabled=\"{{xeDisabled? true:false}}\" tabindex=\"{{!xeDisabled ? 0 : -1}}\" role=\"checkbox\" aria-live=\"assertive\" aria-label=\"{{xeAriaLabel}}\"><input id=\"{{::xeId}}\" xe-data type=\"checkbox\" aria-checked=\"{{xeModel}}\" aria-label=\"{{xeAriaLabel}}\" ng-click=\"cbClicked($event)\" ng-model=\"xeModel\" value=\"{{xeValue}}\" ng-checked=\"xeModel\" aria-live=\"assertive\" aria-disabled=\"{{xeDisabled? true:false}}\" ng-disabled=\"xeDisabled == true\" name=\"{{xeName}}\" tabindex=\"-1\"> <span class=\"xe-checkmark\" tabindex=\"-1\"></span><label class=\"checkbox-label\" xe-for=\"{{::xeId}}\">{{xeLabel}}</label></div>");
}]);

angular.module("templates/dropdown.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/dropdown.html",
    "<div class=\"btn-group\"><button type=\"button\" ng-disabled=\"{{disabled}}\" ng-class=\"{disabledDD:disabled}\" data-toggle=\"dropdown\" class=\"btn btn-default dropdown dropdown-toggle\" role=\"listbox\" aria-expanded=\"false\" aria-haspopup=\"true\"><span class=\"placeholder\" ng-show=\"!ngModel\">{{::xeLabel}}</span> <span class=\"placeholder\">{{ dropDownLabel }}</span> <span class=\"glyphicon glyphicon-chevron-down\"></span></button><ul class=\"dropdown-menu\" role=\"listbox\" aria-expanded=\"false\" role=\"listbox\"><li ng-hide=\"!ngModel\" ng-click=\"updateModel(xeLabel)\">{{::xeLabel}}</li><li ng-if=\"!isObject\" role=\"option\" ng-repeat=\"option in xeOptions track by $index\" ng-click=\"updateModel(option)\" ng-class=\"{'selected':option===ngModel}\">{{::option}}</li><li ng-if=\"isObject\" ng-repeat=\"option in xeOptions track by $index\" ng-click=\"updateModel(option)\">{{::option.label}}</li></ul></div>");
}]);

angular.module("templates/label.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/label.html",
    "<label id=\"{{xeId}}\" class=\"xe-label\" for=\"{{xeFor}}\" ng-hide=\"{{xeHidden}}\" ng-cloak><span class=\"xe-label\" aria-label=\"{{xeValue}}\" ng-bind=\"xeValue\"></span> <span class=\"xe-required\" ng-if=\"xeRequired==true\" ng-bind=\"'*'\"></span></label>");
}]);

angular.module("templates/radio-button.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/radio-button.html",
    "<div class=\"radio-container\"><input ng-value=\"ngValue\" ng-model=\"ngModel\" ng-disabled=\"xeDisabled\" ng-class=\"{disabledRadio:xeDisabled}\" ng-click=\"xeOnClick\" type=\"radio\" id=\"{{xeId}}\" name=\"{{xeName}}\"><xe-label xe-value=\"{{xeLabel}}\" xe-for=\"{{xeId}}\" aria-checked=\"{{ngModel===ngValue}}\" role=\"radio\" tabindex=\"{{!xeDisabled ? 0 : ''}}\"></xe-label></div>");
}]);

angular.module("templates/simple-textbox.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/simple-textbox.html",
    "<input id=\"{{::inputField}}\" xe-field=\"search\" name=\"{{::inputField}}\" placeholder=\"{{placeHolder}}\" class=\"simple-input-field auto-width font-semibold {{xeClass}}\" ng-model=\"value\" ng-class=\"{readOnly: inputDisabled}\" ng-disabled=\"{{disabled}}\" ng-keyup=\"onChange({data: value, id: inputField, event: $event})\" ng-keydown=\"onKeydown({data: value, id: inputField, event: $event})\" ng-keypress=\"onKeypress({data: value, id: inputField, event: $event})\" ng-paste=\"onKeypress({data: $event.originalEvent.clipboardData.getData('text/plain'), id: inputField, event: $event})\" ng-focus=\"onFocus({event: $event})\" ng-blur=\"onBlur(({event: $event}))\" autocomplete=\"off\">");
}]);

angular.module("templates/statusLabel.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/statusLabel.html",
    "<span class=\"labels {{xeType}}\" aria-label=\"{{::xeLabel}}\">{{::xeLabel}}</span>");
}]);

angular.module("templates/switch.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/switch.html",
    "<input id=\"{{id}}\" ng-disabled=\"disabled\" ng-class=\"{disabledSwitch:disabled}\" ng-model=\"value\" class=\"cmn-toggle cmn-toggle-round\" type=\"checkbox\"><label for=\"{{id}}\"></label>");
}]);

angular.module("templates/text-area-counter.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/text-area-counter.html",
    "<div class=\"textarea-container\"><xe-label xe-id=\"xe-textarea-label\" xe-value=\"{{xeLabel}}\" xe-for=\"{{xeId}}\" xe-required=\"xeRequired\"></xe-label><div class=\"xe-labeltext-margin\"></div><textarea xe-data ng-model=\"ngModel\" class=\"comments-field\" ng-class=\"{readonly:xeReadonly}\" id=\"{{xeId}}\" name=\"{{xeName}}\" placeholder=\"{{xePlaceholder}}\" ng-required=\"xeRequired\" aria-multiline=\"true\" ng-readonly=\"xeReadonly\" maxlength=\"{{xeCharCounter}}\" ng-trim=\"false\" aria-labelledby=\"xe-textarea-label xe-id-characters-count\">\n" +
    "\n" +
    "    </textarea><div id=\"xe-id-characters-count\" aria-live=\"polite\"><span>{{::'xe.text.chars.left' | xei18n}} : {{ charRemaining }}</span></div></div>");
}]);

angular.module("templates/text-area.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/text-area.html",
    "<div class=\"textarea-container\"><xe-label xe-value=\"{{xeLabel}}\" xe-for=\"{{xeId}}\" xe-required=\"xeRequired\"></xe-label><div class=\"xe-labeltext-margin\"></div><textarea xe-data ng-model=\"ngModel\" class=\"comments-field\" ng-class=\"{readonly:xeReadonly}\" id=\"{{xeId}}\" name=\"{{xeName}}\" placeholder=\"{{xePlaceholder}}\" ng-required=\"xeRequired\" aria-multiline=\"true\" ng-readonly=\"xeReadonly\">\n" +
    "    </textarea></div>");
}]);

angular.module("templates/text-box-char-limit.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/text-box-char-limit.html",
    "<div class=\"textbox-container\" aria-live=\"assertive\"><xe-label xe-value=\"{{xeLabel}}\" xe-for=\"{{xeId}}\" xe-required=\"xeRequired\"></xe-label><span id=\"xe-id-max-characters\">{{ xeMaxlength }} {{::'xe.text.max.chars' | xei18n}}</span><div class=\"xe-labeltext-margin\"></div><input xe-data ng-class=\"{readonly:xeReadonly}\" ng-model=\"ngModel\" ng-form=\"ngForm\" class=\"{{xeType}}-field\" id=\"{{xeId}}\" name=\"{{xeName}}\" placeholder=\"{{xePlaceholder}}\" ng-pattern=\"xePattern\" ng-required=\"xeRequired\" ng-maxlength=\"xeMaxlength\" ng-minlength=\"xeMinlength\" ng-readonly=\"xeReadonly\" aria-labelledby=\"{{xeId}}\" aria-describedby=\"xe-id-max-characters\" aria-required=\"{{xeRequired? true : false}}\"><br><div class=\"error-messages\" id=\"{{xeId+'label'}}\" ng-messages=\"\" ng-show=\"{{!xeNotification}}\" aria-live=\"assertive\" role=\"alert\"><div ng-message=\"required\">{{::'textbox.validation.required' | xei18n}}</div><div ng-message=\"maxlength\">{{::'textbox.validation.maxlength' | xei18n}} {{xeMaxlength}}</div></div></div>");
}]);

angular.module("templates/text-box-password.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/text-box-password.html",
    "<div class=\"textbox-container\" aria-live=\"assertive\"><xe-label xe-value=\"{{xeLabel}}\" xe-for=\"{{xeId}}\" xe-required=\"xeRequired\"></xe-label><div class=\"xe-labeltext-margin\"></div><input xe-data ng-class=\"{readonly:xeReadonly}\" ng-model=\"ngModel\" ng-form=\"ngForm\" class=\"{{xeType}}-field\" id=\"{{xeId}}\" type=\"password\" name=\"{{xeName}}\" placeholder=\"{{xePlaceholder}}\" ng-pattern=\"xePattern\" ng-required=\"xeRequired\" ng-maxlength=\"xeMaxlength\" ng-minlength=\"xeMinlength\" ng-readonly=\"xeReadonly\" aria-describedby=\"{{xeId}}\" aria-required=\"{{xeRequired? true : false}}\"><br><div class=\"error-messages\" id=\"{{xeId+'label'}}\" ng-messages=\"\" ng-show=\"{{!xeNotification}}\"><div ng-message=\"required\">{{::'textbox.validation.required' | xei18n}}</div><div ng-message=\"maxlength\">{{::'textbox.validation.maxlength' | xei18n}} {{xeMaxlength}}</div></div></div>");
}]);

angular.module("templates/text-box.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/text-box.html",
    "<div class=\"textbox-container\" aria-live=\"assertive\"><xe-label xe-value=\"{{xeLabel}}\" xe-for=\"{{xeId}}\" xe-required=\"xeRequired\"></xe-label><div class=\"xe-labeltext-margin\"></div><input xe-data ng-class=\"{readonly:xeReadonly}\" ng-model=\"ngModel\" ng-form=\"ngForm\" class=\"{{xeType}}-field\" id=\"{{xeId}}\" name=\"{{xeName}}\" placeholder=\"{{xePlaceholder}}\" ng-pattern=\"xePattern\" ng-required=\"xeRequired\" ng-maxlength=\"xeMaxlength\" ng-minlength=\"xeMinlength\" ng-readonly=\"xeReadonly\" aria-describedby=\"{{xeId}}\" aria-required=\"{{xeRequired ? true : false}}\"><br><div class=\"error-messages\" id=\"{{xeId+'label'}}\" ng-messages=\"\" ng-show=\"{{!xeNotification}}\"><div ng-message=\"required\">{{::'textbox.validation.required' | xei18n}}</div><div ng-message=\"maxlength\">{{::'textbox.validation.maxlength' | xei18n}} {{xeMaxlength}}</div></div></div>");
}]);

angular.module("templates/column-filter.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/column-filter.html",
    "<span><div class=\"column-filter-container\" ng-if=\"::!nocolumnFilterMenu\"><button type=\"button\" class=\"column-filter-button\" ng-click=\"bindClickEvent($event)\" aria-haspopup=\"true\" aria-labelledby=\"columnFilter\" xe-field=\"columnFilterMenu\"><span id=\"columnFilter\" class=\"placeholder\" ng-bind=\"'dataTable.columnFilter.label' | xei18n\"></span><div class=\"dropdown-icon\">&nbsp;</div></button><ul class=\"column-setting-menu\" ng-hide=\"hideColumnSettingMenu\" role=\"list\" aria-labelledby=\"columnFilter\"><li role=\"presentation\"><xe-checkbox xe-label=\"{{::'dataTable.columnFilter.selectAll' | xei18n}}\" xe-aria-label=\"{{::'dataTable.columnFilter.selectAll' | xei18n}}\" xe-model=\"selectAll.visible\" xe-on-click=\"onSelectAll(header, event)\" xe-id=\"0\" data-name=\"all\" aria-role=\"listitem\" aria-live=\"assertive\"></xe-checkbox></li><li ng-repeat=\"heading in header\" ng-class=\"{'disabled': heading.options.disable}\" ng-if=\"heading.options.columnShowHide !== false\" data-name=\"{{heading.name}}\" role=\"presentation\"><xe-checkbox xe-id=\"{{heading.name}}\" xe-value=\"{{$index+1}}\" xe-label=\"{{heading.title}}\" xe-aria-label=\"{{heading.title}}\" xe-model=\"heading.options.visible\" xe-on-click=\"hideUnhideColumn(heading, event)\" xe-disabled=\"heading.options.disable\" aria-role=\"listitem\" aria-live=\"assertive\"></xe-checkbox></li></ul></div></span>");
}]);

angular.module("templates/pagination.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/pagination.html",
    "<div class=\"tfoot pagination-container visible-lg\" role=\"navigation\" ng-cloak><div id=\"resultsFound\" aria-live=\"assertive\" class=\"results-container\" ng-bind=\"('pagination.record.found' | xei18n) + ': ' + resultsFound\"></div><div class=\"pagination-controls\"><xe-button xe-type=\"secondary\" xe-btn-class=\"first\" xe-aria-label=\"{{::'pagination.first.label' | xei18n}}\" title=\"{{::'pagination.first.label' | xei18n}}\" xe-btn-click=\"first()\" xe-disabled=\"firstPrev\" ng-cloak></xe-button><xe-button xe-type=\"secondary\" xe-btn-class=\"previous\" xe-aria-label=\"{{::'pagination.previous.label' | xei18n}}\" title=\"{{::'pagination.previous.label' | xei18n}}\" xe-btn-click=\"prev()\" xe-disabled=\"firstPrev\" ng-cloak></xe-button><xe-label xe-value=\"{{::'pagination.page.label' | xei18n}}\" role=\"presentation\" aria-hidden=\"true\"></xe-label><span title=\"{{::'pagination.page.shortcut.label' | xei18n}}\" role=\"presentation\"><input id=\"pageInput\" type=\"number\" ng-model=\"onPage\" aria-valuenow=\"{{onPage}}\" aria-valuemax=\"{{numberOfPages}}\" aria-valuemin=\"{{!numberOfPages ? 0 : 1}}\" max=\"{{numberOfPages}}\" min=\"{{!numberOfPages ? 0 : 1}}\" ng-model-options=\"{ debounce: {'default': 200, 'blur': 0} }\" ng-change=\"paggeNumberChange()\" ng-blur=\"focusOut($event)\" aria-label=\"{{::'pagination.page.aria.label' | xei18n}}. {{::'pagination.page.label' | xei18n}} {{onPage}} {{::'pagination.page.of.label' | xei18n}} {{numberOfPages}}\" ng-cloak></span><xe-label xe-value=\"{{::'pagination.page.of.label' | xei18n}} {{numberOfPages}}\" role=\"presentation\"></xe-label><xe-button xe-type=\"secondary\" xe-btn-class=\"next\" xe-aria-label=\"{{::'pagination.next.label' | xei18n}}\" title=\"{{::'pagination.next.label' | xei18n}}\" xe-btn-click=\"next()\" xe-disabled=\"nextLast\" ng-cloak></xe-button><xe-button xe-type=\"secondary\" xe-btn-class=\"last\" xe-aria-label=\"{{::'pagination.last.label' | xei18n}}\" title=\"{{::'pagination.last.label' | xei18n}}\" xe-btn-click=\"last()\" xe-disabled=\"nextLast\" ng-cloak></xe-button><xe-label xe-id=\"perPage\" xe-value=\"{{::'pagination.per.page.label' | xei18n}}\" role=\"presentation\" aria-hidden=\"true\"></xe-label><select class=\"per-page-select\" aria-labelledby=\"perPage\" ng-model=\"offset\" ng-options=\"pageOffset for pageOffset in ::pageOffsets\" ng-change=\"offsetChanged(true)\" ng-disabled=\"resultsFound === 0\"></select></div></div>");
}]);

angular.module("templates/search.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/search.html",
    "<form name=\"form\" class=\"search-container\"><xe-simple-text-box input-field=\"{{searchConfig.id}}\" xe-class=\"search\" value=\"value\" place-holder=\"{{searchConfig.placeholder}}\" on-keydown=\"searchKeydown(data, id, event)\" on-keypress=\"searchKeypress(data, id, event)\" on-focus=\"onFocus(event)\" on-blur=\"onBlur(event)\" aria-label=\"{{::ariaLabel}}\"></xe-simple-text-box></form>");
}]);

angular.module("templates/dataTable.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/dataTable.html",
    "<div id=\"{{tableId}}\" class=\"table-container\" ng-class=\"{'fixed-height': !!height, 'noToolbar': noCaptionAndToolbar, 'no-data': !resultsFound, 'empty': emptyTableMsg}\" browser-detect role=\"grid\" aria-labelledby=\"gridCaption-{{tableId}}\" ng-cloak><div class=\"trMobile\" ng-if=\"totalRow && isMobileView  \"><div ng-repeat=\"heading in header\" ng-if=\"heading.options.visible === true\"><span class=\"total-row\" total-label=\"{{heading.totalDisplayName}}\" aria-hidden=\"false\" ng-bind=\"getTotalValue(heading)\"></span></div></div><div class=\"caption\" ng-if=\"::!noCaptionBar\" xe-section=\"{{xeSection + 'CaptionBar'}}\"><table class=\"data-table datatable_spacing\" role=\"heading\" aria-level=\"1\"><caption id=\"gridCaption-{{tableId}}\" ng-class=\"{'search-opened': hideContainer}\"><span id=\"gridCaption\" class=\"caption-container font-semibold\" ng-if=\"::!nocaption\" ng-bind=\"::caption\" xe-field=\"caption\"></span><div class=\"toolbar\" ng-if=\"toolbar\"><xe-toolbar></xe-toolbar><xe-column-filter header=\"header\"></xe-column-filter><span role=\"search\" title=\"{{'search.title' | xei18n}}\" ng-if=\"::!nosearch\"><xe-search value=\"searchConfig.searchString\" place-holder=\"{{'search.label' | xei18n}}\" on-change=\"fetchSpecial(query)\" on-focus=\"onSearchFocus({event: event})\" on-blur=\"onSearchBlur({event: event})\" search-config=\"searchConfig\" xe-focus loading-data=\"loadingData\"></xe-search></span></div></caption></table></div><div class=\"hr-scrollable-content\"><div class=\"thead\"><table class=\"data-table\" ng-style=\"headerPadding\" role=\"presentation\"><thead role=\"rowgroup\"><tr role=\"row\"><th class=\"font-semibold width-animate {{::heading.name}}\" ng-repeat=\"heading in header\" ng-class=\"{'sortable': heading.options.sortable, 'ascending': sortArray[heading.name].ascending, 'decending': sortArray[heading.name].decending}\" ng-if=\"heading.options.visible === true\" ng-style=\"{'width': heading.dynamicWidth + 'px'}\" data-name=\"{{::heading.name}}\" ng-click=\"onSort({heading: heading}); sortOnHeading(heading, $index);\" role=\"columnheader\" aria-sort=\"{{sortArray[heading.name].ascending ? ('dataTable.sort.ascending.label' | xei18n) : (sortArray[heading.name].decending ? ('dataTable.sort.descending.label' | xei18n) : 'none')}}\" aria-describedby=\"headingAria{{$index+'-'+tableId}}\" drag-drop=\"handleDrop\" tabindex=\"0\" xe-field=\"{{::heading.name}}\" id=\"dataTableHead-{{heading.name+'-'+tableId}}\" xe-heading-injector xe-focus xe-click-grid><div class=\"data\" title=\"{{heading.label}}\"><span ng-show=\"::heading.options.titleVisible !== false\" aria-hidden=\"false\" ng-bind=\"::heading.title\"></span><label ng-if=\"::heading.options.sortable || heading.ariaLabel\" id=\"headingAria{{$index+'-'+tableId}}\" class=\"sr-only\" ng-bind=\"heading.ariaLabel + (heading.options.sortable ? ('dataTable.sortable.label' | xei18n) : '')\"></label></div></th></tr></thead></table></div><div class=\"tbody\" ng-style=\"::{'height': height}\" continuous-scroll=\"nextPage()\" scroll-parent=\"{{::continuousScrollParent}}\" tabindex=\"{{(!resultsFound || emptyTableMsg) ? '-1' : ''}}\" resize xe-focus-no-data-msg><div id=\"msg\" ng-bind=\"emptyTableMsg? emptyTableMsg : ((!resultsFound && !loadingData) ? noDataMsg : '')\"></div><table class=\"data-table\" ng-class=\"::mobileLayout ? 'mobileLayout' : 'noMobileLayout'\" role=\"presentation\"><thead role=\"presentation\" aria-hidden=\"true\"><tr><th class=\"font-semibold {{::heading.name}}\" ng-repeat=\"heading in header\" ng-class=\"{'sortable': heading.options.sortable, 'ascending': sortArray[heading.name].ascending, 'decending': sortArray[heading.name].decending}\" ng-if=\"heading.options.visible === true\" ng-style=\"{'width': heading.dynamicWidth + 'px'}\" data-name=\"{{::heading.name}}\" xe-field=\"{{::heading.name}}\" xe-heading-injector><div class=\"data\"><span ng-show=\"::heading.options.titleVisible !== false\" ng-bind=\"::heading.title\"></span></div></th></tr></thead><tbody role=\"rowgroup\"><tr ng-repeat=\"row in content\" ng-click=\"onRowClick({data:row,index:$index})\" ng-dblclick=\"onRowDoubleClick({data:row,index:$index})\" xe-row-injector tabindex=\"-1\" role=\"row\"><td class=\"width-animate\" ng-repeat=\"heading in header\" ng-class=\"{'align-right': heading.options.actionOrStatus, 'sortable': heading.options.sortable}\" ng-if=\"heading.options.visible === true\" data-name=\"{{::heading.name}}\" data-title=\"{{::(heading.title && heading.options.titleVisible !== false) ? heading.title + ':' : ''}}\" attain-mobile-layout=\"{{mobileLayout[heading.name]}}\" xe-field=\"{{::heading.name}}\" xe-cell-injector xe-focus xe-click-grid role=\"gridcell\" ng-cloak headers=\"dataTableHead-{{heading.name+'-'+tableId}}\"><div ng-if=\"!isExtendedField(row, heading.name)\"><span ng-bind=\"getObjectValue(row, heading.name)\" tabindex=\"0\"></span></div><div ng-if=\"isExtendedField(row, heading.name)\"><div ng-if=\"isEditable\"><div ng-if=\"dataType === 'DATE'\"><input date-picker=\"\" value=\"{{::extensionValue}}\" class=\"datePicker\" aria-labelledby=\"\"></div><div ng-if=\"dataType === 'VARCHAR2'\"><xe-simple-text-box value=\"::extensionValue\"></xe-simple-text-box></div><div ng-if=\"dataType === 'NUMBER'\"><decimal-input ng-model=\"::extensionValue\" decimals=\"0\"></decimal-input></div></div><div ng-if=\"!isEditable\"><span ng-bind=\"::extensionValue\"></span></div></div></td></tr></tbody></table></div><div class=\"trDesktop\" ng-if=\"totalRow && !isMobileView\" xe-section=\"totalRow\"><table class=\"data-table\" ng-style=\"headerPadding\"><thead><tr><th class=\"font-semibold width-animate {{::heading.name}}\" ng-repeat=\"heading in header\" ng-if=\"heading.options.visible === true\" ng-style=\"{'width': heading.dynamicWidth + 'px'}\" data-name=\"{{::heading.name}}\" drag-drop=\"handleDrop\" tabindex=\"0\" xe-field=\"{{::heading.name+'Total'}}\" xe-focus xe-click-grid><div class=\"aggregateRow data\" ng-class=\"{'align-right': heading.options.actionOrStatus}\" title=\"{{heading.label}}\"><label ng-if=\"heading.totalLabel\" id=\"{{::heading.name+'Total'}}\" for=\"{{::heading.name+'Total'}}\">{{getTotalValue(heading)}}</label><span ng-if=\"!heading.totalLabel\" class=\"total-display\" ng-show=\"::heading.options.titleVisible !== false\" aria-hidden=\"false\" ng-bind=\"getTotalValue(heading)\"></span></div></th></tr></thead></table></div></div><div class=\"tfoot\" ng-transclude></div><xe-pagination model=\"content\" results-found=\"resultsFound\" ng-show=\"showPagination\" xe-grid-pagination-control search-string=\"searchConfig.searchString\"></xe-pagination><div ng-show=\"loadingData\" class=\"load-indicator\"><div class=\"spinner\"><div class=\"bounce1\"></div><div class=\"bounce2\"></div><div class=\"bounce3\"></div></div></div></div>");
}]);

angular.module("templates/dialog.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/dialog.html",
    "<div id=\"xeModalMask\" class=\"xe-modal-mask\" ng-show=\"show\" tabindex=\"-1\" aria-labelledby=\"xeModalLabel\" role=\"dialog\"><div class=\"xe-modal-wrapper\" role=\"document\"><div class=\"xe-modal-container\"><span class=\"xe-modal-close\" ng-click=\"hide()\" tabindex=\"0\" title=\"{{about[api.close]}}\"></span><h4 id=\"xeModalLabel\" hidden>{{about[api.title]}}</h4><div class=\"xe-modal-header\" tabindex=\"0\"><h5 class=\"xe-app-title\">{{about[api.name]}}</h5><h6 class=\"xe-app-version\">{{about[api.version]}}</h6><h6 ng-if=\"!hidePlatformVersion\" class=\"xe-platform-version\">{{about[api.platformVersion]}}</h6></div><hr><div class=\"xe-modal-body\" role=\"list\" tabindex=\"0\"><h6 id=\"xe-modal-gen-sec\" class=\"xe-title\">General</h6><ul role=\"list\" aria-labelledby=\"xe-modal-gen-sec\"><li role=\"listitem\" aria-level=\"{{$index + 1}}\" ng-repeat-start=\"(key, value) in about[api.general]\" ng-repeat-end><strong>{{key}}</strong> : <span>{{value}}</span></li></ul></div><hr><div class=\"xe-modal-body\" role=\"list\" tabindex=\"0\"><h6 id=\"xe-modal-plugin-info\" class=\"xe-title\">Plugin information</h6><ul role=\"list\" aria-labelledby=\"xe-modal-plugin-info\"><li role=\"listitem\" aria-level=\"{{$index + 1}}\" ng-repeat-start=\"(key, value) in about[api.plugin]\" ng-repeat-end><strong>{{key}}</strong> : <span>{{value}}</span></li></ul></div><hr><div class=\"xe-modal-body\" role=\"list\" tabindex=\"0\"><h6 id=\"xe-modal-other-plugin-info\" class=\"xe-title\">Other Plugin information</h6><ul role=\"list\" aria-labelledby=\"xe-modal-other-plugin-info\"><li role=\"listitem\" aria-level=\"{{$index + 1}}\" ng-repeat-start=\"(key, value) in about[api.otherPlugin]\" ng-repeat-end><strong>{{key}}</strong> : <span>{{value}}</span></li></ul></div><div class=\"xe-modal-footer\" tabindex=\"0\">{{about[api.copyright]}}</div></div></div></div>");
}]);

angular.module("templates/dialog_default.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/dialog_default.html",
    "<div id=\"xeModalMask\" class=\"xe-modal-mask\" ng-show=\"show\" tabindex=\"-1\" aria-labelledby=\"xeModalMask\" role=\"region\"><div class=\"xe-modal-wrapper\" role=\"dialog\" title=\"{{about[api.title]}}\"><div id=\"xeModalContainer\" class=\"xe-modal-container\" role=\"dialog\" aria-labelledby=\"xeModalLabel xeModalHeaderDialog xeModalFooter\"><span id=\"xeModalClose\" class=\"xe-modal-close\" ng-click=\"hide()\" tabindex=\"0\" role=\"button\" alt=\"{{about[api.close]}}\" title=\"{{about[api.close]}}\"></span><h4 id=\"xeModalLabel\" hidden>{{about[api.title]}}</h4><div id=\"xeModalHeaderDialog\" class=\"xe-modal-header\"><h5 class=\"xe-app-title\">{{about[api.name]}}</h5><h6 class=\"xe-app-version\">{{about[api.version]}}</h6><h6 ng-if=\"!hidePlatformVersion\" class=\"xe-platform-version\">{{about[api.platformVersion]}}</h6></div><hr><div id=\"xeModalFooter\" class=\"xe-modal-footer\" role=\"heading\" aria-level=\"1\"><span class=\"xe-modal-footer-copyright\">&copy; {{about[api.copyright]}}</span><br><br><span class=\"xe-modal-footer-copyright-info\">{{about[api.copyrightLegalNotice]}}</span></div><a id=\"xeModalPrivacyLink\" href=\"{{about[api.ellucianPrivacyNoticeLink]}}\" tabindex=\"0\" role=\"link\" target=\"_blank\" title=\"{{about[api.ellucianPrivacyNotice]}}\">{{about[api.ellucianPrivacyNotice]}}</a></div></div></div>");
}]);

angular.module("templates/modal.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/modal.html",
    "<div class=\"xe-popup-mask\" ng-show=\"show\" tabindex=\"-1\" role=\"dialog\" aria-labelledby=\"{{xeId?xeId:'xePopTitle'}}\"><div class=\"xe-popup-wrapper\"><div class=\"xe-popup-container\"><div id=\"xeModalHeader\" class=\"xe-popup-header\"><h5 id=\"{{xeId?xeId:'xePopTitle'}}\" class=\"xe-app-title\" role=\"heading\"><label ng-bind=\"popupTitle\"></label></h5><span id=\"xePopupClose\" ng-show=\"showCloseButton==undefined ?true:showCloseButton\" class=\"xe-popup-close\" ng-click=\"hide()\" tabindex=\"0\" role=\"button\" aria-label=\"{{'userpreference.popup.language.close' | xei18n}}\" alt=\"{{'userpreference.popup.language.close' | xei18n}}\" title=\"{{'userpreference.popup.language.close' | xei18n}}\"></span></div><div id=\"xePopupContent\" class=\"xe-pop-content\" ng-transclude=\"popupContent\"></div><div id=\"buttonContainer\" class=\"buttonContainer\" ng-transclude=\"popupButtons\"></div><div tabindex=\"0\" id=\"tabOrdering\"></div></div></div></div>");
}]);

angular.module("templates/tabNav.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/tabNav.html",
    "<div class=\"xe-tab-container\" role=\"presentation\"><ul class=\"xe-tab-nav\" role=\"tablist\"><li ng-repeat=\"tab in tabnav.tabs\" ng-click=\"tabnav.activate(tab)\" ng-class=\"{active: tab.active}\" ng-repeat-complete role=\"tab\" aria-controls=\"{{'xe-tab-panel'+ ($index+1)}}\" aria-selected=\"{{tab.active?tab.active:false}}\"><a href=\"javascript:void(0);\" tabindex=\"0\" id=\"{{'xe-tab'+ ($index+1)}}\" title=\"{{tab.heading}}\" ng-if=\"tab.state\">{{tab.heading}} <span></span> </a><a href=\"#\" id=\"{{'xe-tab'+ ($index+1)}}\" title=\"{{tab.heading}}\" ng-if=\"!tab.state\">{{tab.heading}} <span></span></a></li></ul><div class=\"xe-tab-content\" role=\"presentation\"><ng-transclude></ng-transclude></div></div>");
}]);

angular.module("templates/tabPanel.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/tabPanel.html",
    "<div class=\"xe-tab-container\" role=\"presentation\"><div id=\"{{ 'xe-tab-panel'+ tabIndex}}\" class=\"xe-tab-panel\" ng-show=\"active\" ng-class=\"{active: active }\" role=\"tabpanel\" aria-labelledby=\"{{'xe-tab'+ tabIndex}}\" content=\"\" aria-hidden=\"{{ !active }}\"></div></div>");
}]);

angular.module("templates/timePicker.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/timePicker.html",
    "<div class=\"xe-time-container\" role=\"presentation\"><div class=\"input-outerContainer\"><div class=\"input-container\"><input class=\"input-field xeTimePickerTextField\" name=\"{{xeName}}\" ng-model=\"displayModel\" placeholder=\"{{xeTimePlaceholder}}\" id=\"{{xeId}}\" title=\"{{'js.input.timepicker.info' | xei18n}}\" aria-label=\"{{'timepicker.textbox.aria.label' | xei18n}} {{'default.time.format' | xei18n}}\"> <button type=\"button\" class=\"inputicon\" tabindex=\"-1\"></button></div><div class=\"timepickerContainer\" ng-show=\"toggleContainer\"><div id=\"article\" class=\"mainContainer\"><div class=\"wrappingDiv hrsContainer\" ng-class=\"timeObject.is24Hrformat ? 'LTRpadding24hrs' : 'LTRpadding12hrs'\"><div class=\"itemContainer previousDiv\"></div><ul role=\"listbox\" class=\"dropdown ulContainer hrsFocus\"><li class=\"hrs_{{$index}}\" role=\"option\" data-ng-repeat=\"hr in timeObject.hours\" value=\"{{hr}}\" data-ng-bind=\"hr\"></li></ul><div class=\"itemContainer nextDiv\"></div></div><div class=\"wrappingDiv minContainer\"><div class=\"itemContainer previousDiv\"></div><ul class=\"dropdown ulContainer minFocus\" role=\"listbox\"><li role=\"option\" class=\"mins_{{$index}}\" tabindex=\"0\" data-ng-repeat=\"mins in timeObject.minutes\" value=\"{{mins}}\" data-ng-bind=\"mins\"></li></ul><div class=\"itemContainer nextDiv\" data-ng-bind=\"timeObject.configstep\"></div></div><div role=\"listbox\" class=\"wrappingDiv meridianContainer\" ng-if=\"!timeObject.is24Hrformat\" aria-label=\"{{'timepicker.am.pm.aria.label' | xei18n}}\"><div class=\"itemContainer\"></div><div role=\"option\" aria-live=\"assertive\" class=\"tickerContainer pushmeBorder meridianFocus\" tabindex=\"0\" ng-bind=\"'default.time.am' | xei18n\"></div><div aria-label=\"{{'default.time.pm' | xei18n}}\" class=\"tickerContainer meridianPm\" ng-bind=\"'default.time.pm' | xei18n\"></div></div></div><footer class=\"timerFooter\"><xe-button class=\"footerButton footercancelButton\" xe-type=\"secondary\" xe-label=\"{{'js.timepicker.cancel' | xei18n}}\" aria-label=\"{{'js.timepicker.cancel' | xei18n}}\"></xe-button><xe-button class=\"footerButton\" xe-type=\"primary\" xe-label=\"{{'js.timepicker.set' | xei18n}}\" aria-label=\"{{'js.timepicker.set' | xei18n}}\"></xe-button><div class=\"extraDiv\" tabindex=\"0\"></div></footer></div></div></div>");
}]);

angular.module("templates/timePicker_rtl.html", []).run(["$templateCache", function ($templateCache) {
  $templateCache.put("templates/timePicker_rtl.html",
    "<div class=\"xe-time-container\" role=\"presentation\"><div class=\"input-outerContainer\"><div class=\"input-container\"><input class=\"input-field xeTimePickerTextField\" name=\"{{xeName}}\" ng-model=\"displayModel\" placeholder=\"{{xeTimePlaceholder}}\" id=\"{{xeId}}\" title=\"{{'js.input.timepicker.info' | xei18n}}\" aria-label=\"{{'timepicker.textbox.aria.label' | xei18n}} {{'default.time.format' | xei18n}}\"> <button type=\"button\" class=\"inputicon\" tabindex=\"-1\"></button></div><div class=\"timepickerContainer\" ng-show=\"toggleContainer\"><div id=\"article\" class=\"mainContainer\"><div role=\"listbox\" class=\"wrappingDiv meridianContainer rtl12hrsPadding\" ng-if=\"!timeObject.is24Hrformat\" aria-label=\"{{'timepicker.am.pm.aria.label' | xei18n}}\"><div id=\"prevampmDiv\" class=\"itemContainer\"></div><div role=\"option\" aria-live=\"assertive\" class=\"tickerContainer pushmeBorder meridianFocus\" tabindex=\"0\" ng-bind=\"'default.time.am' | xei18n\"></div><div aria-label=\"{{'default.time.pm' | xei18n}}\" class=\"tickerContainer meridianPm\" ng-bind=\"'default.time.pm' | xei18n\"></div></div><div class=\"wrappingDiv hrsContainer\" ng-class=\"timeObject.is24Hrformat ? 'rtl24hrsPadding' : 'rtlhrsPadding'\"><div id=\"prevHrDiv\" class=\"itemContainer previousDiv\"></div><ul id=\"nav\" role=\"listbox\" class=\"dropdown ulContainer hrsFocus\"><li class=\"hrs_{{$index}}\" role=\"option\" data-ng-repeat=\"hr in timeObject.hours\" value=\"{{hr}}\" data-ng-bind=\"hr\"></li></ul><div class=\"itemContainer nextDiv\"></div></div><div class=\"wrappingDiv minContainer\"><div class=\"itemContainer previousDiv\"></div><ul class=\"dropdown ulContainer minFocus\"><li class=\"mins_{{$index}}\" tabindex=\"0\" data-ng-repeat=\"mins in timeObject.minutes\" value=\"{{mins}}\" data-ng-bind=\"mins\"></li></ul><div class=\"itemContainer nextDiv\" data-ng-bind=\"timeObject.configstep\"></div></div></div><footer class=\"timerFooter\"><xe-button class=\"footerButton footercancelButton\" xe-type=\"secondary\" xe-label=\"{{'js.timepicker.cancel' | xei18n}}\" aria-label=\"{{'js.timepicker.cancel' | xei18n}}\"></xe-button><xe-button class=\"footerButton\" xe-type=\"primary\" xe-label=\"{{'js.timepicker.set' | xei18n}}\" aria-label=\"{{'js.timepicker.set' | xei18n}}\"></xe-button><div class=\"extraDiv\" tabindex=\"0\"></div></footer></div></div></div>");
}]);

(function () {
    'use strict';
    angular.module('badge', []).directive('xeBadge', function () {
        return {
        restrict: 'E',
            scope : {
            xeLabel:'@',
            xeType:'@'
        },
            templateUrl : 'templates/badge.html'
        };
    });
}());

(function () {
    'use strict';
    angular.module('button', []).directive('xeButton', function () {
        return {
            restrict: 'E',
            scope: {
                xeId : '@',
                xeType : '@',
                xeDisabled : '=',
                xeLabel : '@',
                xeBtnClick : '&',
                xeBtnClass : "@",
                xeAriaLabel : "@"
            },
            templateUrl: 'templates/button.html'
        };
    });
}());

(function () {
    'use strict';
    angular.module('checkbox', ['label']).directive('xeCheckbox', ['keyCodes', '$timeout', function (keyCodes, $timeout) {
        return {
            scope : {
                xeId : '@',
                xeValue : '@',
                xeName : '@?',
                xeLabel : '@?',
                xeAriaLabel: '@?',
                xeLabelHidden : '@?',
                xeModel : '=',
                xeOnClick : '&',
                xeDisabled : '=?',
                ariaRole : '@?'
            },
            restrict : 'E',
            replace : true,
            templateUrl : 'templates/checkbox.html',
            link : function (scope, element) {
                scope.cbClicked = function (event) {
                    if (scope.xeDisabled) { return; }

                    scope.xeModel = !scope.xeModel;
                    $timeout(function () {
                        scope.xeOnClick({checked: scope.xeModel, event: event});
                        angular.element(element.find('input')).controller('ngModel').$setDirty();
                    });
                };

                element.on('keydown', function (event) {
                    if (event.keyCode === keyCodes.ENTER || event.keyCode === keyCodes.SPACEBAR) {
                        event.preventDefault();
                        event.stopPropagation();
                        scope.cbClicked(event);
                        scope.$apply();
                    }
                });

                element.on('click', function (event) {
                    event.preventDefault();
                    event.stopPropagation();
                    scope.cbClicked(event);
                    scope.$apply();
                });

            }
        };
    }]);
}());
(function () {
    'use strict';
    angular.module('dropdown', []).directive('xeDropdown', function () {
        return {
            restrict : 'E',
            scope : {
                xeOptions : '=',
                xeLabel : '=',
                disabled : '=',
                ngModel : '='  // Store selected item.
            },
            require : "ngModel",
            controller : ['$scope', function ($scope) {
                $scope.isObject = angular.isObject($scope.xeOptions[0]);
                $scope.dropDownLabel = "";
                $scope.updateModel = function (value) {
                    if ($scope.xeLabel !== value) {
                        if (angular.isObject(value)) {
                            $scope.ngModel = value;
                            $scope.dropDownLabel = value.label;
                        } else {
                            $scope.ngModel = value;
                            $scope.dropDownLabel = value;
                        }
                    } else {
                        $scope.ngModel = null;
                        $scope.dropDownLabel = null;
                    }
                };
            }],
            link: function (scope) {
                if (angular.isDefined(scope.ngModel)) {
                    scope.updateModel(scope.ngModel);
                }
            },
            templateUrl : 'templates/dropdown.html'
        };
    });
}());

(function () {
    'use strict';
    angular.module('label', []).directive('xeLabel', function () {
        return {
        restrict: 'E',
            scope : {
            xeId: '@',
            xeValue: '@',
            xeHidden: '@?',
            xeRequired: '=?',
            xeFor: '@'
        },
        replace: true,
            templateUrl : 'templates/label.html'
        };
    });
}());

(function () {
    'use strict';
    angular.module('radiobutton', []).directive('xeRadioButton', ['$window', function ($window) {
        return {
            scope : {
                xeLabel : '@',
                ngValue : '=',
                ngModel : '=',
                xeOnClick : '&',
                xeName : '@',
                xeDisabled : '=',
                xeId : '@'
            },
            restrict : 'E',
            require : 'ngModel',
            templateUrl : 'templates/radio-button.html',
            link : function (scope, element) {
                element.on('keydown', function (event) {
                    if (event.keyCode === 32 || event.keyCode === 13) {
                        event.preventDefault();
                        scope.ngModel = scope.ngValue;
                        scope.$apply();
                    }
                });
            }
        };
    }]);
}());

(function () {
    'use strict';
    angular.module('simpleTextbox', []).directive('xeSimpleTextBox', function () {
        return {
            restrict: 'E',
            scope: {
                inputField: '@',
                xeClass: '@',
                value: '=',
                placeHolder: '@',
                disabled: '=',
                onChange: '&',
                onKeydown: '&',
                onKeypress: '&',
                onFocus : '&',
                onBlur : '&',
                required: '='
            },
            templateUrl: 'templates/simple-textbox.html'
        };
    });
}());

(function () {
    'use strict';
    angular.module('statusLabel', []).directive('xeStatusLabel', function () {
        return {
            restrict : 'E',
            scope : {
                xeLabel : '@',
                xeType : '@'
            },
            templateUrl : 'templates/statusLabel.html'
        };
    });
}());

(function () {
    'use strict';
    angular.module('switch', []).directive('xeSwitch', function () {
        return {
            scope : {
                disabled : '=',
                label : '=',
                value : '=',
                id : '='
            },
            templateUrl: 'templates/switch.html'
        };
    });
}());
/*****************************************************
 *  Copyright 2016-2021 Ellucian Company L.P. and its affiliates. *
 *****************************************************/
/*global $*/
(function () {
    'use strict';
    angular.module('textarea', []).directive('xeTextArea', ['$filter', function ($filter) {
        return {
            restrict: 'E',
            scope: {
                ngModel: '=',
                xeOnChange: '&',
                xePlaceholder: '@',
                xeLabel: '=',
                xeId: '@',
                xeName: '@?',
                xeRequired: '=',
                xeReadonly: '=',
                xeCharCounter: '@'
            },
            templateUrl: function (element, attrs) {
                if (attrs.xeCharCounter) {return 'templates/text-area-counter.html'; }
                return 'templates/text-area.html';
            },
            controller: ['$scope', '$element', '$attrs',function ($scope, $element, $attrs) {
                var CharCounterLiveRegion, remainingCharsMsg;
                //Setting Live Regions for Accessibility
                if ($attrs.xeCharCounter) {
                    CharCounterLiveRegion = $('.textarea-char-accessible');
                    if (CharCounterLiveRegion.length === 0) {
                        CharCounterLiveRegion = $("<span>", {
                            role: "status",
                            "aria-live": "polite",
                            "aria-atomic": "true",
                            "aria-hidden": "false"
                        })
                            .addClass("textarea-char-accessible screen-reader")
                            .appendTo(document.body);
                    }
                }
                remainingCharsMsg = $filter('xei18n')('xe.text.limit.over', $attrs.xeCharCounter);

                //Accessibility for Text Area Focus Case to read Remaining Characters
                if ($attrs.xeCharCounter) {
                    $element.find('textarea').focus(function () {
                        var ariaTextRemainingChars = $filter('xei18n')('xe.text.chars.remaining.aria', $scope.charRemaining);
                        CharCounterLiveRegion.text(ariaTextRemainingChars);
                    });
                }

                $scope.$watch('ngModel', function () {

                    if ($attrs.xeCharCounter) {

                        if ($scope.charRemaining <= 0) {
                            $scope.charRemaining = 0;

                        } else {
                            $scope.charRemaining = $attrs.xeCharCounter;
                        }

                        if ($scope.ngModel) {
                            var currentChar = $scope.ngModel;
                            $scope.charRemaining = $attrs.xeCharCounter - currentChar.length;
                            $element.find('textarea').on("keyup change", function (e) {
                                if ($(this).val().length === $attrs.xeCharCounter) {
                                    CharCounterLiveRegion.text(remainingCharsMsg);
                                }
                            });
                        }
                    }
                });
            }]
        };
    }]);
}());
/*****************************************************
 *  Copyright 2019-2021 Ellucian Company L.P. and its affiliates. *
 *****************************************************/
/*global $*/
(function () {
    'use strict';
    angular.module('textbox', ['ngMessages']).directive('xeTextBox', ['$filter', function ($filter) {
        return {
            restrict: 'E',
            scope: {
                xePlaceholder: '@',
                xeId: '@',
                xeRequired: '=',
                xeType: '@',
                xeReadonly: '=',
                xeValidate: '=',
                xePattern: '@',
                xeErrorMessages: '=',
                xeNotification: '@',
                xeLabel: '@',
                xeName: '@',
                xeMaxlength: '@',
                xeMinlength: '@',
                xeFormName: '@',
                ngModel: '=',
                ngForm: '=',
                xeCharMax: '@'
            },
            require: ['ngModel', '?ngForm'],
            templateUrl: function (element, attrs) {
                if (attrs.xeType === 'password') {
                    return 'templates/text-box-password.html';
                }
                if (attrs.hasOwnProperty('xeCharMax')) {
                    return 'templates/text-box-char-limit.html';
                }
                return 'templates/text-box.html';

            },
            controller: ['$scope', '$element', '$attrs',function ($scope, $element, $attrs) {
                var CharCounterTextLiveRegion, remainingCharsTextMsg;
                if ($attrs.hasOwnProperty('xeCharMax')) {
                    CharCounterTextLiveRegion = $('.text-box-char-accessible');
                    remainingCharsTextMsg = $filter('xei18n')('xe.text.limit.over', $attrs.xeMaxlength);
                    if (CharCounterTextLiveRegion.length === 0) {
                        CharCounterTextLiveRegion = $("<span>", {
                            role: "alert",
                            "aria-live": "assertive",
                            "aria-atomic": "true",
                            "aria-hidden": "false"
                        })
                            .addClass("text-box-char-accessible screen-reader")
                            .appendTo(document.body);
                    }

                    $element.find('input').on("keyup change focusout", function (e) {
                        if ($(this).val().length >= $attrs.xeMaxlength) {
                            CharCounterTextLiveRegion.text(remainingCharsTextMsg);
                        }
                        if($(this).prop('required') == true ){
                            if($(this).val().length > 0){
                                $(this).attr('aria-invalid', false);
                            }else {
                                $(this).attr('aria-invalid', true);
                            }
                        }
                    });
                }
            }],
            compile: function (elem, attrs) {
                var formStr = "ngForm." + attrs.xeName;
                elem.find("div.error-messages").attr("ng-messages", formStr + "." + "$error");
                elem.find("div.error-messages").attr("ng-if", formStr  + "." + attrs.xeName + "." + "$touched");
            }
        };
    }]);
}());
/*!
 * ui-select
 * http://github.com/angular-ui/ui-select
 * Version: 0.16.0 - 2016-03-23T20:51:56.609Z
 * License: MIT
 */


(function () {
    "use strict";
    var KEY = {
        TAB: 9,
        ENTER: 13,
        ESC: 27,
        SPACE: 32,
        LEFT: 37,
        UP: 38,
        RIGHT: 39,
        DOWN: 40,
        SHIFT: 16,
        CTRL: 17,
        ALT: 18,
        PAGE_UP: 33,
        PAGE_DOWN: 34,
        HOME: 36,
        END: 35,
        BACKSPACE: 8,
        DELETE: 46,
        COMMAND: 91,

        MAP: { 91 : "COMMAND", 8 : "BACKSPACE", 9 : "TAB", 13 : "ENTER", 16 : "SHIFT", 17 : "CTRL", 18 : "ALT", 19 : "PAUSEBREAK", 20 : "CAPSLOCK", 27 : "ESC", 32 : "SPACE", 33 : "PAGE_UP", 34 : "PAGE_DOWN", 35 : "END", 36 : "HOME", 37 : "LEFT", 38 : "UP", 39 : "RIGHT", 40 : "DOWN", 43 : "+", 44 : "PRINTSCREEN", 45 : "INSERT", 46 : "DELETE", 48 : "0", 49 : "1", 50 : "2", 51 : "3", 52 : "4", 53 : "5", 54 : "6", 55 : "7", 56 : "8", 57 : "9", 59 : ";", 61 : "=", 65 : "A", 66 : "B", 67 : "C", 68 : "D", 69 : "E", 70 : "F", 71 : "G", 72 : "H", 73 : "I", 74 : "J", 75 : "K", 76 : "L", 77 : "M", 78 : "N", 79 : "O", 80 : "P", 81 : "Q", 82 : "R", 83 : "S", 84 : "T", 85 : "U", 86 : "V", 87 : "W", 88 : "X", 89 : "Y", 90 : "Z", 96 : "0", 97 : "1", 98 : "2", 99 : "3", 100 : "4", 101 : "5", 102 : "6", 103 : "7", 104 : "8", 105 : "9", 106 : "*", 107 : "+", 109 : "-", 110 : ".", 111 : "/", 112 : "F1", 113 : "F2", 114 : "F3", 115 : "F4", 116 : "F5", 117 : "F6", 118 : "F7", 119 : "F8", 120 : "F9", 121 : "F10", 122 : "F11", 123 : "F12", 144 : "NUMLOCK", 145 : "SCROLLLOCK", 186 : ";", 187 : "=", 188 : ",", 189 : "-", 190 : ".", 191 : "/", 192 : "`", 219 : "[", 220 : "\\", 221 : "]", 222 : "'"
        },

        isControl: function (e) {
            var k = e.which;
            switch (k) {
                case KEY.COMMAND:
                case KEY.SHIFT:
                case KEY.CTRL:
                case KEY.ALT:
                    return true;
            }

            if (e.metaKey) {
                return true;
            }

            return false;
        },
        isFunctionKey: function (k) {
            k = k.which ? k.which : k;
            return k >= 112 && k <= 123;
        },
        isVerticalMovement: function (k) {
            return ~[KEY.UP, KEY.DOWN].indexOf(k);
        },
        isHorizontalMovement: function (k) {
            return ~[KEY.LEFT, KEY.RIGHT, KEY.BACKSPACE, KEY.DELETE].indexOf(k);
        },
        toSeparator: function (k) {
            var sep = {ENTER: "\n", TAB: "\t", SPACE: " "}[k];
            if (sep) { return sep; }
            // return undefined for special keys other than enter, tab or space.
            // no way to use them to cut strings.
            return KEY[k] ? undefined : k;
        }
    };

    /**
     * Add querySelectorAll() to jqLite.
     *
     * jqLite find() is limited to lookups by tag name.
     * TODO This will change with future versions of AngularJS, to be removed when this happens
     *
     * See jqLite.find - why not use querySelectorAll? https://github.com/angular/angular.js/issues/3586
     * See feat(jqLite): use querySelectorAll instead of getElementsByTagName in jqLite.find https://github.com/angular/angular.js/pull/3598
     */
    if (angular.element.prototype.querySelectorAll === undefined) {
        angular.element.prototype.querySelectorAll = function (selector) {
            return angular.element(this[0].querySelectorAll(selector));
        };
    }

    /**
     * Add closest() to jqLite.
     */
    if (angular.element.prototype.closest === undefined) {
        angular.element.prototype.closest = function (selector) {
            var elem = this[0];
            var matchesSelector = elem.matches || elem.webkitMatchesSelector || elem.mozMatchesSelector || elem.msMatchesSelector;

            while (elem) {
                if (matchesSelector.bind(elem)(selector)) {
                    return elem;
                } else {
                    elem = elem.parentElement;
                }
            }
            return false;
        };
    }

    var latestId = 0;

    var uis = angular.module('ui.select', [])

        .constant('uiSelectConfig', {
            theme: 'bootstrap',
            searchEnabled: true,
            sortable: false,
            placeholder: '', // Empty by default, like HTML tag <select>
            refreshDelay: 0, // In milliseconds
            closeOnSelect: true,
            skipFocusser: false,
            dropdownPosition: 'auto',
            generateId: function () {
                return latestId = latestId + 1;
            },
            appendToBody: false
        })

        // See Rename minErr and make it accessible from outside https://github.com/angular/angular.js/issues/6913
        .service('uiSelectMinErr', function() {
            var minErr = angular.$$minErr('ui.select');
            return function() {
                var error = minErr.apply(this, arguments);
                var message = error.message.replace(new RegExp('\nhttp://errors.angularjs.org/.*'), '');
                return new Error(message);
            };
        })

        // Recreates old behavior of ng-transclude. Used internally.
        .directive('uisTranscludeAppend', function () {
            return {
                link: function (scope, element, attrs, ctrl, transclude) {
                    transclude(scope, function (clone) {
                        element.append(clone);
                    });
                }
            };
        })

    /**
     * Highlights text that matches $select.search.
     *
     * Taken from AngularUI Bootstrap Typeahead
     * See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L340
     */
        .filter('highlight', function () {
            function escapeRegexp(queryToEscape) {
                return ("" + queryToEscape).replace(/([.?*+^$[\]\\(){}|-])/g, '\\$1');
            }

            return function (matchItem, query) {
                return query && matchItem ? ("" + matchItem).replace(new RegExp(escapeRegexp(query), 'gi'), '<span class="ui-select-highlight">$&</span>') : matchItem;
            };
        })

    /**
     * A read-only equivalent of jQuery's offset function: http://api.jquery.com/offset/
     *
     * Taken from AngularUI Bootstrap Position:
     * See https://github.com/angular-ui/bootstrap/blob/master/src/position/position.js#L70
     */
        .factory('uisOffset',
        ['$document', '$window',
            function ($document, $window) {

                return function (element) {
                    var boundingClientRect = element[0].getBoundingClientRect();
                    return {
                        width: boundingClientRect.width || element.prop('offsetWidth'),
                        height: boundingClientRect.height || element.prop('offsetHeight'),
                        top: boundingClientRect.top + ($window.pageYOffset || $document[0].documentElement.scrollTop),
                        left: boundingClientRect.left + ($window.pageXOffset || $document[0].documentElement.scrollLeft)
                    };
                };
            }]);

    uis.directive('xeUiSelectChoices',
        ['uiSelectConfig', 'uisRepeatParser', 'uiSelectMinErr', '$compile', '$window', '$timeout',
            function (uiSelectConfig, RepeatParser, uiSelectMinErr, $compile, $window, $timeout) {

                return {
                    restrict: 'EA',
                    require: '^xeUiSelect',
                    replace: true,
                    transclude: true,
                    templateUrl: function (tElement) {
                        // Needed so the uiSelect can detect the transcluded content
                        tElement.addClass('ui-select-choices');

                        // Gets theme attribute from parent (ui-select)
                        var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;
                        return theme + '/choices.tpl.html';
                    },

                    compile: function (tElement, tAttrs) {
                        if (!tAttrs.repeat) {
                            throw uiSelectMinErr('repeat', "Expected 'repeat' expression.");
                        }

                        return function link(scope, element, attrs, $select, transcludeFn) {

                            // var repeat = RepeatParser.parse(attrs.repeat);
                            var groupByExp = attrs.groupBy, groupFilterExp = attrs.groupFilter, groups,
                                choices = element.querySelectorAll('.ui-select-choices-row'), rowsInner = element.querySelectorAll('.ui-select-choices-row-inner');

                            $select.parseRepeatAttr(attrs, groupByExp, groupFilterExp, $select); //Result ready at $select.parserResult

                            $select.disableChoiceExpression = attrs.uiDisableChoice;
                            $select.onHighlightCallback = attrs.onHighlight;

                            $select.dropdownPosition = attrs.position ? attrs.position.toLowerCase() : uiSelectConfig.dropdownPosition;

                            if (groupByExp) {
                                groups = element.querySelectorAll('.ui-select-choices-group');
                                if (groups.length !== 1) {
                                    throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-group but got '{0}'.", groups.length);
                                }
                                groups.attr('ng-repeat', RepeatParser.getGroupNgRepeatExpression());
                            }

                            if (choices.length !== 1) {
                                throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-row but got '{0}'.", choices.length);
                            }

                            choices.attr('ng-repeat', $select.parserResult.repeatExpression(groupByExp))
                                .attr('ng-if', '$select.open'); //Prevent unnecessary watches when dropdown is closed
                            if ($window.document.addEventListener) {  //crude way to exclude IE8, specifically, which also cannot capture events
                                choices.attr('ng-mouseenter', '$select.setActiveItem('+ $select.parserResult.itemName +')')
                                    .attr('ng-click', '$select.select(' + $select.parserResult.itemName + ',$select.skipFocusser,$event)');
                            }

                            if (rowsInner.length !== 1) {
                                throw uiSelectMinErr('rows', "Expected 1 .ui-select-choices-row-inner but got '{0}'.", rowsInner.length);
                            }
                            rowsInner.attr('uis-transclude-append', ''); //Adding uisTranscludeAppend directive to row element after choices element has ngRepeat
                            if (!$window.document.addEventListener) {  //crude way to target IE8, specifically, which also cannot capture events - so event bindings must be here
                                rowsInner.attr('ng-mouseenter', '$select.setActiveItem('+$select.parserResult.itemName +')')
                                    .attr('ng-click', '$select.select(' + $select.parserResult.itemName + ',$select.skipFocusser,$event)');
                            }

                            $compile(element, transcludeFn)(scope); //Passing current transcludeFn to be able to append elements correctly from uisTranscludeAppend

                            scope.$watch('$select.search', function(newValue) {
                                if (newValue && !$select.open && $select.multiple) {
                                    $select.activate(false, true);
                                    $select.activeIndex = $select.tagging.isActivated ? -1 : 0;
                                }if ((!attrs.minimumInputLength || $select.search.length >= attrs.minimumInputLength) && !$select.disabled) {
                                    $select.refresh(attrs.refresh);
                                    $select.showMinMsg = false;
                                } else if (!$select.disabled) {
                                    $select.minimumInputLength = attrs.minimumInputLength;
                                    $select.showMinMsg = true;
                                    $select.items = [];
                                }
                            });

                            scope.$watch($select.disabled, function(newValue, oldValue) {
                                if (!newValue && newValue !== oldValue && !$select.items.length) {
                                    $select.refresh(attrs.refresh);
                                }
                            });

                            if ($select.refreshOnChange) {
                                scope.$watch($select.refreshOnChange, function(newValue) {
                                    if (newValue) {
                                        $select.refresh(attrs.refresh);
                                    }
                                });
                            }

                            attrs.$observe('refreshDelay', function() {
                                // $eval() is needed otherwise we get a string instead of a number
                                var refreshDelay = scope.$eval(attrs.refreshDelay);
                                $select.refreshDelay = refreshDelay !== undefined ? refreshDelay : uiSelectConfig.refreshDelay;
                            });
                            scope.$watch('$select.items', function (newVal, oldVal) {
                                if ($select.items.length == 0) {
                                    $select.showNoResultsMsg = true;
                                } else {
                                    $select.showNoResultsMsg = false;
                                }
                            });
                        };
                    }
                };
            }]);

    /**
     * Contains ui-select "intelligence".
     *
     * The goal is to limit dependency on the DOM whenever possible and
     * put as much logic in the controller (instead of the link functions) as possible so it can be easily tested.
     */
    uis.controller('uiSelectCtrl',
        ['$scope', '$element', '$timeout', '$filter', 'uisRepeatParser', 'uiSelectMinErr', 'uiSelectConfig', '$parse', '$injector', '$window',
            function($scope, $element, $timeout, $filter, RepeatParser, uiSelectMinErr, uiSelectConfig, $parse, $injector, $window ) {

                var ctrl = this;
                var EMPTY_SEARCH = '';

                ctrl.placeholder = uiSelectConfig.placeholder;
                ctrl.searchEnabled = uiSelectConfig.searchEnabled;
                ctrl.sortable = uiSelectConfig.sortable;
                ctrl.refreshDelay = uiSelectConfig.refreshDelay;
                ctrl.paste = uiSelectConfig.paste;

                ctrl.removeSelected = false; //If selected item(s) should be removed from dropdown list
                ctrl.closeOnSelect = true; //Initialized inside uiSelect directive link function
                ctrl.skipFocusser = false; //Set to true to avoid returning focus to ctrl when item is selected
                ctrl.search = EMPTY_SEARCH;

                ctrl.activeIndex = 0; //Dropdown of choices
                ctrl.items = []; //All available choices

                ctrl.open = false;
                ctrl.focus = false;
                ctrl.disabled = false;
                ctrl.selected = undefined;

                ctrl.dropdownPosition = 'auto';

                ctrl.focusser = undefined; //Reference to input element used to handle focus events
                ctrl.resetSearchInput = true;
                ctrl.multiple = undefined; // Initialized inside uiSelect directive link function
                ctrl.disableChoiceExpression = undefined; // Initialized inside uiSelectChoices directive link function
                ctrl.tagging = {isActivated: false, fct: undefined};
                ctrl.taggingTokens = {isActivated: false, tokens: undefined};
                ctrl.lockChoiceExpression = undefined; // Initialized inside uiSelectMatch directive link function
                ctrl.clickTriggeredSelect = false;
                ctrl.$filter = $filter;
                ctrl.minimumInputLength;

                // Use $injector to check for $animate and store a reference to it
                ctrl.$animate = (function () {
                    try {
                        return $injector.get('$animate');
                    } catch (err) {
                        // $animate does not exist
                        return null;
                    }
                })();

                ctrl.searchInput = $element.querySelectorAll('input.ui-select-search');
                if (ctrl.searchInput.length !== 1) {
                    throw uiSelectMinErr('searchInput', "Expected 1 input.ui-select-search but got '{0}'.", ctrl.searchInput.length);
                }

                ctrl.isEmpty = function () {
                    return angular.isUndefined(ctrl.selected) || ctrl.selected === null || ctrl.selected === '' || (ctrl.multiple && ctrl.selected.length === 0);
                };

                function _findIndex (collection, predicate, thisArg){
                    if (collection.findIndex) {
                        return collection.findIndex(predicate, thisArg);
                    } else {
                        var list = Object(collection), length = list.length >>> 0, value, i;
                        for (i = 0; i < length; i += 1) {
                            value = list[i];
                            if (predicate.call(thisArg, value, i, list)) {
                                return i;
                            }
                        }
                        return -1;
                    }
                }

                // Most of the time the user does not want to empty the search input when in typeahead mode
                function _resetSearchInput () {
                    if (ctrl.resetSearchInput || (ctrl.resetSearchInput === undefined && uiSelectConfig.resetSearchInput)) {
                        ctrl.search = EMPTY_SEARCH;
                        //reset activeIndex+-
                        if (ctrl.selected && ctrl.items.length && !ctrl.multiple) {
                            ctrl.activeIndex = _findIndex(ctrl.items, function(item){
                                return angular.equals(this, item);
                            }, ctrl.selected);
                        }
                    }
                }

                function _groupsFilter(groups, groupNames) {
                    var i, j, result = [];
                    for(i = 0; i < groupNames.length; i += 1){
                        for(j = 0; j < groups.length; j += 1){
                            if(groups[j].name == [groupNames[i]]){
                                result.push(groups[j]);
                            }
                        }
                    }
                    return result;
                }

                // When the user clicks on ui-select, displays the dropdown list
                ctrl.activate = function(initSearchValue, avoidReset) {
                    if (!ctrl.disabled && !ctrl.open) {
                        if (!avoidReset) _resetSearchInput();

                        $scope.$broadcast('uis:activate');

                        ctrl.open = true;

                        ctrl.liveRegion = $('.uiselect-hidden-accessible');
                        ctrl.liveChoicestStusRegion = $('.uiselect-choice-status-hidden-accessible');

                        if (ctrl.liveRegion.length == 0) {
                            var regionSpan1 = angular.element('<span></span>');
                            regionSpan1.attr('role', 'status');
                            regionSpan1.attr('aria-live', 'assertive');
                            regionSpan1.attr('class', 'uiselect-hidden-accessible');
                            angular.element(document.body).append(regionSpan1);
                        }

                        if (ctrl.liveChoicestStusRegion.length == 0) {
                            var regionSpan2 = angular.element('<span></span>');
                            regionSpan2.attr('role', 'status');
                            regionSpan2.attr('aria-live', 'assertive');
                            regionSpan2.attr('aria-atomic', 'true');
                            regionSpan2.attr('class', 'uiselect-choice-status-hidden-accessible');
                            angular.element(document.body).append(regionSpan2);
                        }

                        ctrl.activeIndex = ctrl.activeIndex >= ctrl.items.length ? 0 : ctrl.activeIndex;

                        // ensure that the index is set to zero for tagging variants
                        // that where first option is auto-selected
                        if (ctrl.activeIndex === -1 && ctrl.taggingLabel !== false) {
                            ctrl.activeIndex = 0;
                        }

                        var container = $element.querySelectorAll('.ui-select-choices-content');
                        if (ctrl.$animate && ctrl.$animate.on && ctrl.$animate.enabled(container[0])) {
                            ctrl.$animate.on('enter', container[0], function (elem, phase) {
                                if (phase === 'close') {
                                    // Only focus input after the animation has finished
                                    $timeout(function () {
                                        ctrl.focusSearchInput(initSearchValue);
                                    });
                                }
                            });
                        } else {
                            $timeout(function () {
                                ctrl.focusSearchInput(initSearchValue);
                                if (!ctrl.tagging.isActivated && ctrl.items.length > 1) {
                                    var ariaResultFoundMessage;
                                    $('.uiselect-hidden-accessible').text("");
                                    if(!ctrl.searchEnabled){
                                        ariaResultFoundMessage = $filter('xei18n')('uiselect.search.disabled.results');
                                    }else {
                                        ariaResultFoundMessage = $filter('xei18n')('uiselect.search.results', ctrl.items.length);
                                    }
                                    $('.uiselect-hidden-accessible').text(ariaResultFoundMessage);
                                    $('.uiselect-hidden-accessible').innerText = ariaResultFoundMessage;
                                } else if (ctrl.items.length === 0 && ctrl.minimumInputLength != "undefined") {
                                    var ariaMinMessageLength = $filter('xei18n')('uiselect.minimum.input.text', ctrl.minimumInputLength);
                                    $('.uiselect-hidden-accessible').text("");
                                    $('.uiselect-hidden-accessible').text(ariaMinMessageLength);
                                    $('.uiselect-hidden-accessible').innerText = ariaMinMessageLength;
                                }
                            });
                        }
                    } else if (ctrl.open && ctrl.multiple) {
                        ctrl.open = false;
                    }
                };

                ctrl.focusSearchInput = function (initSearchValue) {
                    ctrl.search = initSearchValue || ctrl.search;
                    setTimeout(function() { ctrl.searchInput[0].focus(); }, 10);
                };

                ctrl.findGroupByName = function(name) {
                    return ctrl.groups && ctrl.groups.filter(function(group) {
                            return group.name === name;
                        })[0];
                };

                ctrl.parseRepeatAttr = function(attrs, groupByExp, groupFilterExp, $select) {
                    function updateGroups(items) {
                        var groupFn = $scope.$eval(groupByExp);
                        ctrl.groups = [];
                        angular.forEach(items, function(item) {
                            var groupName = angular.isFunction(groupFn) ? groupFn(item) : item[groupFn];
                            var group = ctrl.findGroupByName(groupName);
                            if(group) {
                                group.items.push(item);
                            }
                            else {
                                ctrl.groups.push({name: groupName, items: [item]});
                            }
                        });
                        if(groupFilterExp){
                            var groupFilterFn = $scope.$eval(groupFilterExp);
                            if( angular.isFunction(groupFilterFn)){
                                ctrl.groups = groupFilterFn(ctrl.groups);
                            } else if(angular.isArray(groupFilterFn)){
                                ctrl.groups = _groupsFilter(ctrl.groups, groupFilterFn);
                            }
                        }
                        ctrl.items = [];
                        ctrl.groups.forEach(function(group) {
                            ctrl.items = ctrl.items.concat(group.items);
                        });
                    }

                    function setPlainItems(items) {
                        ctrl.items = items;
                    }

                    ctrl.setItemsFn = groupByExp ? updateGroups : setPlainItems;

                    ctrl.parserResult = RepeatParser.parse(attrs.repeat);

                    ctrl.isGrouped = !!groupByExp;
                    ctrl.itemProperty = ctrl.parserResult.itemName;

                    //If collection is an Object, convert it to Array

                    var originalSource = ctrl.parserResult.source;

                    //When an object is used as source, we better create an array and use it as 'source'
                    var createArrayFromObject = function(){
                        var origSrc = originalSource($scope);
                        $scope.$uisSource = Object.keys(origSrc).map(function(v){
                            var result = {};
                            result[ctrl.parserResult.keyName] = v;
                            result.value = origSrc[v];
                            return result;
                        });
                    };

                    if (ctrl.parserResult.keyName){ // Check for (key,value) syntax
                        createArrayFromObject();
                        ctrl.parserResult.source = $parse('$uisSource' + ctrl.parserResult.filters);
                        $scope.$watch(originalSource, function(newVal, oldVal){
                            if (newVal !== oldVal) createArrayFromObject();
                        }, true);
                    }

                    ctrl.refreshItems = function (data) {
                        if (angular.isArray(data) && attrs.refresh && angular.isArray(ctrl.items) && (typeof ctrl.items[0] === 'object') && ctrl.items[0].isTag) {
                            data.unshift(ctrl.items[0]);
                        }
                        data = data || ctrl.parserResult.source($scope);
                        var selectedItems = ctrl.selected;
                        //TODO should implement for single mode removeSelected
                        if (ctrl.isEmpty() || (angular.isArray(selectedItems) && !selectedItems.length) || !ctrl.removeSelected) {
                            ctrl.setItemsFn(data);
                        } else {
                            if (data !== undefined) {
                                var filteredItems = data.filter(function (i) {
                                    return selectedItems.every(function (selectedItem) {
                                        return !angular.equals(i, selectedItem);
                                    });
                                });
                                ctrl.setItemsFn(filteredItems);
                            }
                        }
                        if (ctrl.items !== null && ctrl.items !== undefined && ctrl.items.length !== undefined && ctrl.items.length > 0) {
                            if(ctrl.search != "") {
                                var ariaSearchResult = $filter('xei18n')('uiselect.search.results', ctrl.items.length);
                                $('.uiselect-hidden-accessible').text("");
                                $('.uiselect-hidden-accessible').text(ariaSearchResult);
                                $('.uiselect-hidden-accessible').innerText = ariaSearchResult;
                            }
                        }else if(ctrl.items !== null && ctrl.items !== undefined && ctrl.items.length !== undefined && ctrl.items.length === 0){
                            var ariaNoSearchResult = $filter('xei18n')('uiselect.no.results.found.text');
                            $('.uiselect-hidden-accessible').text("");
                            $('.uiselect-hidden-accessible').text(ariaNoSearchResult);
                            $('.uiselect-hidden-accessible').innerText = ariaNoSearchResult;
                        }
                        if (ctrl.dropdownPosition === 'auto' || ctrl.dropdownPosition === 'up') {
                            $scope.calculateDropdownPos();
                        }
                    };

                    // See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L259
                    $scope.$watchCollection(ctrl.parserResult.source, function(items) {
                        if (items === undefined || items === null) {
                            // If the user specifies undefined or null => reset the collection
                            // Special case: items can be undefined if the user did not initialized the collection on the scope
                            // i.e $scope.addresses = [] is missing
                            ctrl.items = [];
                        } else {
                            if (!angular.isArray(items)) {
                                throw uiSelectMinErr('items', "Expected an array but got '{0}'.", items);
                            } else {
                                //Remove already selected items (ex: while searching)
                                //TODO Should add a test
                                if (!attrs.minimumInputLength || $select.search.length >= attrs.minimumInputLength) {
                                    ctrl.refreshItems(items);
                                } else {
                                    ctrl.groups = [];
                                    ctrl.items = [];
                                }
                                ctrl.ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters
                            }
                        }
                    });

                };

                var _refreshDelayPromise;

                /**
                 * Typeahead mode: lets the user refresh the collection using his own function.
                 *
                 * See Expose $select.search for external / remote filtering https://github.com/angular-ui/ui-select/pull/31
                 */
                ctrl.refresh = function(refreshAttr) {
                    if (refreshAttr !== undefined) {

                        // Debounce
                        // See https://github.com/angular-ui/bootstrap/blob/0.10.0/src/typeahead/typeahead.js#L155
                        // FYI AngularStrap typeahead does not have debouncing: https://github.com/mgcrea/angular-strap/blob/v2.0.0-rc.4/src/typeahead/typeahead.js#L177
                        if (_refreshDelayPromise) {
                            $timeout.cancel(_refreshDelayPromise);
                        }
                        _refreshDelayPromise = $timeout(function() {
                            $scope.$eval(refreshAttr);
                        }, ctrl.refreshDelay);
                    }
                };

                ctrl.isActive = function(itemScope) {
                    if ( !ctrl.open ) {
                        return false;
                    }
                    var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty]);
                    var isActive =  itemIndex == ctrl.activeIndex;

                    if ( !isActive || ( itemIndex < 0 && ctrl.taggingLabel !== false ) ||( itemIndex < 0 && ctrl.taggingLabel === false) ) {
                        return false;
                    }

                    if (isActive && !angular.isUndefined(ctrl.onHighlightCallback)) {
                        itemScope.$eval(ctrl.onHighlightCallback);
                    }

                    return isActive;
                };

                ctrl.isDisabled = function(itemScope) {

                    if (!ctrl.open) return;

                    var itemIndex = ctrl.items.indexOf(itemScope[ctrl.itemProperty]);
                    var isDisabled = false;
                    var item;

                    if (itemIndex >= 0 && !angular.isUndefined(ctrl.disableChoiceExpression)) {
                        item = ctrl.items[itemIndex];
                        isDisabled = !!(itemScope.$eval(ctrl.disableChoiceExpression)); // force the boolean value
                        item._uiSelectChoiceDisabled = isDisabled; // store this for later reference
                    }

                    return isDisabled;
                };


                // When the user selects an item with ENTER or clicks the dropdown
                ctrl.select = function(item, skipFocusser, $event) {
                    if (item === undefined || !item._uiSelectChoiceDisabled) {
                        var removedChoice = ctrl.selected;

                        if ( ! ctrl.items && ! ctrl.search && ! ctrl.tagging.isActivated) return;

                        if (!item || !item._uiSelectChoiceDisabled) {
                            if(ctrl.tagging.isActivated) {
                                // if taggingLabel is disabled, we pull from ctrl.search val
                                if ( ctrl.taggingLabel === false ) {
                                    if ( ctrl.activeIndex < 0 ) {
                                        item = ctrl.tagging.fct !== undefined ? ctrl.tagging.fct({tag: ctrl.search, taggingKey: ctrl.taggingKey}) : ctrl.search;
                                        if (!item || angular.equals( ctrl.items[0], item ) ) {
                                            return;
                                        }
                                    } else {
                                        // keyboard nav happened first, user selected from dropdown
                                        item = ctrl.items[ctrl.activeIndex];
                                    }
                                } else {
                                    // tagging always operates at index zero, taggingLabel === false pushes
                                    // the ctrl.search value without having it injected
                                    if ( item ) {
                                        // ctrl.tagging pushes items to ctrl.items, so we only have empty val
                                        // for `item` if it is a detected duplicate
                                        // if ( item === undefined ) return;

                                        // create new item on the fly if we don't already have one;
                                        // use tagging function if we have one
                                        if ( ctrl.tagging.fct !== undefined && typeof item === 'object' && item.isTag) {
                                            item = ctrl.tagging.fct({tag: ctrl.search, taggingKey: ctrl.taggingKey, onSelect: true});
                                            if (!item) return;
                                            // if item type is 'string', apply the tagging label
                                        } else if ( ctrl.tagging.fct !== undefined && typeof item === 'string' && item.indexOf(ctrl.taggingLabel) !== -1) {
                                            item = ctrl.tagging.fct({tag: item, taggingKey: ctrl.taggingKey, onSelect: true});
                                            if (!item) return;
                                            // if item type is 'string', apply the tagging label
                                        } else if ( typeof item === 'string' && item.indexOf(ctrl.taggingLabel) !== -1) {
                                            // trim the trailing space
                                            item = item.replace(ctrl.taggingLabel,'').trim();
                                        }
                                    }
                                }
                                // search ctrl.selected for dupes potentially caused by tagging and return early if found
                                if ( ctrl.selected && angular.isArray(ctrl.selected) && ctrl.selected.filter( function (selection) { return angular.equals(selection, item); }).length > 0 ) {
                                    ctrl.close(skipFocusser);
                                    return;
                                }
                            }
                            _resetSearchInput();
                            var ariaOptionSelected;
                            if (item) {
                                $('.uiselect-choice-status-hidden-accessible').text("");
                                if(undefined != ctrl.selectedValue){
                                    ariaOptionSelected = $filter('xei18n')('uiselect.option.selected',item[ctrl.selectedValue]);
                                }else{
                                    ariaOptionSelected = $filter('xei18n')('uiselect.option.selected',item.name);
                                }
                                $('.uiselect-choice-status-hidden-accessible').text(ariaOptionSelected);
                                $('.uiselect-choice-status-hidden-accessible').innerText = ariaOptionSelected;
                            }

                            $scope.$broadcast('uis:select', item);

                            var locals = {};
                            locals[ctrl.parserResult.itemName] = item;

                            var locals1 = {};
                            locals1[ctrl.parserResult.itemName] = removedChoice;

                            $timeout(function() {
                                if (angular.isUndefined(item)) {
                                    ctrl.onRemoveCallback($scope, {
                                        $item: removedChoice,
                                        $model: ctrl.parserResult.modelMapper($scope, locals1)
                                    });
                                } else {
                                    ctrl.onSelectCallback($scope, {
                                        $item: item,
                                        $model: ctrl.parserResult.modelMapper($scope, locals),
                                        $prevItem: ctrl.parserResult.modelMapper($scope, locals1)
                                    });
                                }
                            });

                            //To set focus on current element When user selects an item with clicks the dropdown
                            ctrl.focusSearchInput("");
                            if (ctrl.closeOnSelect) {
                                ctrl.close(skipFocusser);
                            }
                            if ($event && $event.type === 'click') {
                                ctrl.clickTriggeredSelect = true;
                            }
                        }
                    }
                };

                // Closes the dropdown
                ctrl.close = function(skipFocusser) {
                    if (!ctrl.open) return;
                    if (ctrl.ngModel && ctrl.ngModel.$setTouched) ctrl.ngModel.$setTouched();
                    _resetSearchInput();
                    ctrl.open = false;

                    $scope.$broadcast('uis:close', skipFocusser);

                };

                ctrl.setFocus = function(){
                    if (!ctrl.focus) ctrl.focusInput[0].focus();
                };

                ctrl.clear = function($event) {
                    ctrl.select(undefined);
                    $event.stopPropagation();
                    $timeout(function() {
                        ctrl.focusser[0].focus();
                    }, 0, false);
                };

                // Toggle dropdown
                ctrl.toggle = function(e) {
                    if (ctrl.open) {
                        ctrl.close();
                        e.preventDefault();
                        e.stopPropagation();
                    } else {
                        ctrl.activate();
                    }
                };

                ctrl.toggleMultiDropdown = function (e) {

                };

                ctrl.isLocked = function(itemScope, itemIndex) {
                    var isLocked, item = ctrl.selected[itemIndex];

                    if (item && !angular.isUndefined(ctrl.lockChoiceExpression)) {
                        isLocked = !!(itemScope.$eval(ctrl.lockChoiceExpression)); // force the boolean value
                        item._uiSelectChoiceLocked = isLocked; // store this for later reference
                    }

                    return isLocked;
                };

                var sizeWatch = null;
                ctrl.sizeSearchInput = function() {

                    var input = ctrl.searchInput[0],
                        container = ctrl.searchInput.parent().parent()[0],
                        calculateContainerWidth = function() {
                            // Return the container width only if the search input is visible
                            return container.clientWidth * !!input.offsetParent;
                        },
                        updateIfVisible = function(containerWidth) {
                            if (containerWidth === 0) {
                                return false;
                            }
                            var inputWidth = containerWidth - input.offsetLeft - 10;
                            //The below line is commented because the selected element is not visible due to the large width.
                            //if (inputWidth < 50) inputWidth = containerWidth;
                            ctrl.searchInput.css('width', inputWidth+'px');
                            return true;
                        };

                    ctrl.searchInput.css('width', '10px');
                    $timeout(function() { //Give tags time to render correctly
                        if (sizeWatch === null && !updateIfVisible(calculateContainerWidth())) {
                            sizeWatch = $scope.$watch(calculateContainerWidth, function(containerWidth) {
                                if (updateIfVisible(containerWidth)) {
                                    sizeWatch();
                                    sizeWatch = null;
                                }
                            });
                        }
                    });
                };

                function _handleDropDownSelection(key) {
                    var processed = true;
                    switch (key) {
                        case KEY.DOWN:
                            if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode
                            else if (ctrl.activeIndex < ctrl.items.length - 1) { ctrl.activeIndex++; }
                            break;
                        case KEY.UP:
                            if (!ctrl.open && ctrl.multiple) ctrl.activate(false, true); //In case its the search input in 'multiple' mode
                            else if (ctrl.activeIndex > 0 || (ctrl.search.length === 0 && ctrl.tagging.isActivated && ctrl.activeIndex > -1)) { ctrl.activeIndex--; }
                            break;
                        case KEY.TAB:
                            if (!ctrl.multiple || ctrl.open) ctrl.select(ctrl.items[ctrl.activeIndex], true);
                            break;
                        case KEY.ENTER:
                            if(ctrl.items.length == 1) {
                                ctrl.select(ctrl.items[0], ctrl.skipFocusser); // Make sure at least one dropdown item is highlighted before adding if not in tagging mode
                            }
                            else if(ctrl.open && (ctrl.tagging.isActivated || ctrl.activeIndex >= 0)){
                                ctrl.select(ctrl.items[ctrl.activeIndex], ctrl.skipFocusser); // Make sure at least one dropdown item is highlighted before adding if not in tagging mode
                            }
                            else
                            {
                                ctrl.activate(false, true); //In case its the search input in 'multiple' mode
                            }
                            break;
                        case KEY.ESC:
                            ctrl.close();
                            break;
                        default:
                            processed = false;
                    }
                    return processed;
                }

                // Bind to keyboard shortcuts
                ctrl.searchInput.on('keydown', function (e) {

                    var key = e.which;
                    if (~[KEY.ENTER, KEY.ESC].indexOf(key)) {
                        e.preventDefault();
                        e.stopPropagation();
                    }

                    if (~[KEY.ESC].indexOf(key)) {
                        ctrl.close();
                    }

                    // if(~[KEY.ESC,KEY.TAB].indexOf(key)){
                    //   //TODO: SEGURO?
                    //   ctrl.close();
                    // }

                    //When the select component searchEnabled is false shouldn't allow user to search ; Hence restricting the user to search here.
                    if (!~[KEY.ENTER, KEY.ESC].indexOf(key) && !KEY.isVerticalMovement(key) && ctrl.searchEnabled === false) {
                        e.preventDefault();
                        e.stopPropagation();
                        return false;
                    }

                    $scope.$apply(function () {

                        var tagged = false;

                        if (ctrl.items.length > 0 || ctrl.tagging.isActivated) {
                            _handleDropDownSelection(key);
                            if (ctrl.taggingTokens.isActivated) {
                                for (var i = 0; i < ctrl.taggingTokens.tokens.length; i++) {
                                    if (ctrl.taggingTokens.tokens[i] === KEY.MAP[e.keyCode]) {
                                        // make sure there is a new value to push via tagging
                                        if (ctrl.search.length > 0) {
                                            tagged = true;
                                        }
                                    }
                                }
                                if (tagged) {
                                    $timeout(function () {
                                        ctrl.searchInput.triggerHandler('tagged');
                                        var newItem = ctrl.search.replace(KEY.MAP[e.keyCode], '').trim();
                                        if (ctrl.tagging.fct) {
                                            newItem = ctrl.tagging.fct({tag: newItem, taggingKey: ctrl.taggingKey});
                                        }
                                        if (newItem) ctrl.select(newItem, true);
                                    });
                                }
                            }
                        } else if (!ctrl.open && ctrl.multiple) {
                            _handleDropDownSelection(key);
                        }

                    });

                    if (KEY.isVerticalMovement(key) && ctrl.items.length > 0) {
                        _ensureHighlightVisible();
                    }
                    if ($scope.$select.search.length == 0 && key === KEY.SPACE) {
                        e.preventDefault();
                        e.stopPropagation();
                    }
                    if (key === KEY.ENTER || key === KEY.ESC || key === KEY.UP || KEY === KEY.DOWN) {
                        e.preventDefault();
                        e.stopPropagation();
                        //return false;
                    }

                    if (ctrl.activeIndex === -1 || (ctrl.taggingLabel !== false && !KEY.isVerticalMovement(key) )) {
                        ctrl.activeIndex = 0;
                    }

                });

                ctrl.searchInput.on('paste', function (e) {
                    var data;

                    if (window.clipboardData && window.clipboardData.getData) { // IE
                        data = window.clipboardData.getData('Text');
                    } else {
                        data = (e.originalEvent || e).clipboardData.getData('text/plain');
                    }

                    // Prepend the current input field text to the paste buffer.
                    data = ctrl.search + data;

                    if (data && data.length > 0) {
                        // If tagging try to split by tokens and add items
                        if (ctrl.taggingTokens.isActivated) {
                            var separator = KEY.toSeparator(ctrl.taggingTokens.tokens[0]);
                            var items = data.split(separator || ctrl.taggingTokens.tokens[0]); // split by first token only
                            if (items && items.length > 0) {
                                var oldsearch = ctrl.search;
                                angular.forEach(items, function (item) {
                                    var newItem = ctrl.tagging.fct ? ctrl.tagging.fct({tag: item, taggingKey: ctrl.taggingKey}) : item;
                                    if (newItem) {
                                        ctrl.select(newItem, true);
                                    }
                                });
                                ctrl.search = oldsearch || EMPTY_SEARCH;
                                e.preventDefault();
                                e.stopPropagation();
                            }
                        } else if (ctrl.paste) {
                            ctrl.paste(data);
                            ctrl.search = EMPTY_SEARCH;
                            e.preventDefault();
                            e.stopPropagation();
                        }
                    }
                });

                ctrl.searchInput.on('tagged', function() {
                    $timeout(function() {
                        _resetSearchInput();
                    });
                });

                // See https://github.com/ivaynberg/select2/blob/3.4.6/select2.js#L1431
                function _ensureHighlightVisible() {
                    var container = $element.querySelectorAll('.ui-select-choices-content');
                    var choices = container.querySelectorAll('.ui-select-choices-row');
                    if (choices.length < 1) {
                        throw uiSelectMinErr('choices', "Expected multiple .ui-select-choices-row but got '{0}'.", choices.length);
                    }

                    if (ctrl.activeIndex < 0) {
                        return;
                    }

                    var highlighted = choices[ctrl.activeIndex];
                    $('.uiselect-choice-status-hidden-accessible').text("");
                    var optionHighlighted =$(highlighted).find('div:last').text();
                    var ariaOptionSelected = $filter('xei18n')('uiselect.option.selected', optionHighlighted);
                    $('.uiselect-choice-status-hidden-accessible').text(ariaOptionSelected);
                    $('.uiselect-choice-status-hidden-accessible').attr('aria-selected',true);
                    $('.uiselect-choice-status-hidden-accessible').innerText = ariaOptionSelected;
                    var posY = highlighted.offsetTop + highlighted.clientHeight - container[0].scrollTop;
                    var height = container[0].offsetHeight;

                    if (posY > height) {
                        container[0].scrollTop += posY - height;
                    } else if (posY < highlighted.clientHeight) {
                        if (ctrl.isGrouped && ctrl.activeIndex === 0)
                            container[0].scrollTop = 0; //To make group header visible when going all the way up
                        else
                            container[0].scrollTop -= highlighted.clientHeight - posY;
                    }
                }

                $scope.$on('$destroy', function() {
                    ctrl.searchInput.off('keyup keydown tagged blur paste');
                });

                angular.element($window).bind('resize', function() {
                    ctrl.sizeSearchInput();
                });

            }]);

    uis.directive('xeUiSelect',
        ['$document', 'uiSelectConfig', 'uiSelectMinErr', 'uisOffset', '$compile', '$parse', '$timeout',
            function($document, uiSelectConfig, uiSelectMinErr, uisOffset, $compile, $parse, $timeout) {

                return {
                    restrict: 'EA',
                    templateUrl: function(tElement, tAttrs) {
                        var theme = tAttrs.theme || uiSelectConfig.theme;
                        return theme + (angular.isDefined(tAttrs.multiple) ? '/select-multiple.tpl.html' : '/select.tpl.html');
                    },
                    replace: true,
                    transclude: true,
                    require: ['xeUiSelect', '^ngModel'],
                    scope: true,

                    controller: 'uiSelectCtrl',
                    controllerAs: '$select',
                    compile: function(tElement, tAttrs) {

                        // Allow setting ngClass on uiSelect
                        var match = /{(.*)}\s*{(.*)}/.exec(tAttrs.ngClass);
                        if(match) {
                            var combined = '{'+ match[1] +', '+ match[2] +'}';
                            tAttrs.ngClass = combined;
                            tElement.attr('ng-class', combined);
                        }

                        //Multiple or Single depending if multiple attribute presence
                        if (angular.isDefined(tAttrs.multiple))
                            tElement.append('<ui-select-multiple/>').removeAttr('multiple');
                        else
                            tElement.append('<ui-select-single/>');

                        if (tAttrs.inputId)
                            tElement.querySelectorAll('input.ui-select-search')[0].id = tAttrs.inputId;

                        return function(scope, element, attrs, ctrls, transcludeFn) {

                            var $select = ctrls[0];
                            var ngModel = ctrls[1];
                            $select.selectedValue = attrs.textSelected;
                            $select.refreshOnChange = attrs.refreshOnChange !== undefined ? attrs.refreshOnChange : '';
                            $select.disabled = attrs.hasOwnProperty('ngDisabled') ? true : false;
                            $select.generatedId = uiSelectConfig.generateId();
                            $select.baseTitle = attrs.title || 'Select box';
                            $select.focusserId = 'focusser-' + $select.generatedId;

                            if (attrs.searchEnabled === 'false') {
                                $select.focusserTitle = $select.baseTitle + (attrs.ngRequired === 'true' ? ', required' : '') + ', focus, Single Select Search Unavailable';

                            }else{
                                $select.focusserTitle = $select.baseTitle + (attrs.ngRequired === 'true' ? ', required' : '') + ', focus';
                            }

                            $select.closeOnSelect = function() {
                                if (angular.isDefined(attrs.closeOnSelect)) {
                                    return $parse(attrs.closeOnSelect)();
                                } else {
                                    return uiSelectConfig.closeOnSelect;
                                }
                            }();

                            scope.$watch('skipFocusser', function() {
                                var skipFocusser = scope.$eval(attrs.skipFocusser);
                                $select.skipFocusser = skipFocusser !== undefined ? skipFocusser : uiSelectConfig.skipFocusser;
                            });

                            $select.onSelectCallback = $parse(attrs.onSelect);
                            $select.onRemoveCallback = $parse(attrs.onRemove);

                            //Limit the number of selections allowed
                            $select.limit = (angular.isDefined(attrs.limit)) ? parseInt(attrs.limit, 10) : undefined;

                            //Set reference to ngModel from uiSelectCtrl
                            $select.ngModel = ngModel;

                            $select.choiceGrouped = function(group){
                                return $select.isGrouped && group && group.name;
                            };

                            if(attrs.tabindex){
                                attrs.$observe('tabindex', function(value) {
                                    $select.focusInput.attr('tabindex', value);
                                    element.removeAttr('tabindex');
                                });
                            }

                            scope.$watch('searchEnabled', function() {
                                var searchEnabled = scope.$eval(attrs.searchEnabled);
                                $select.searchEnabled = searchEnabled !== undefined ? searchEnabled : uiSelectConfig.searchEnabled;
                            });

                            scope.$watch('sortable', function() {
                                var sortable = scope.$eval(attrs.sortable);
                                $select.sortable = sortable !== undefined ? sortable : uiSelectConfig.sortable;
                            });

                            attrs.$observe('disabled', function() {
                                // No need to use $eval() (thanks to ng-disabled) since we already get a boolean instead of a string
                                $select.disabled = attrs.disabled !== undefined ? attrs.disabled : false;
                            });

                            attrs.$observe('resetSearchInput', function() {
                                // $eval() is needed otherwise we get a string instead of a boolean
                                var resetSearchInput = scope.$eval(attrs.resetSearchInput);
                                $select.resetSearchInput = resetSearchInput !== undefined ? resetSearchInput : true;
                            });

                            attrs.$observe('paste', function() {
                                $select.paste = scope.$eval(attrs.paste);
                            });

                            attrs.$observe('tagging', function() {
                                if(attrs.tagging !== undefined)
                                {
                                    // $eval() is needed otherwise we get a string instead of a boolean
                                    var taggingEval = scope.$eval(attrs.tagging);
                                    $select.tagging = {isActivated: true, fct: taggingEval !== true ? taggingEval : undefined};
                                }
                                else
                                {
                                    $select.tagging = {isActivated: false, fct: undefined};
                                }
                            });

                            attrs.$observe('taggingLabel', function() {
                                if(attrs.tagging !== undefined )
                                {
                                    // check eval for FALSE, in this case, we disable the labels
                                    // associated with tagging
                                    if ( attrs.taggingLabel === 'false' ) {
                                        $select.taggingLabel = false;
                                    }
                                    else
                                    {
                                        $select.taggingLabel = attrs.taggingLabel !== undefined ? attrs.taggingLabel : '(new)';
                                    }
                                }
                            });

                            attrs.$observe('taggingKey', function() {
                                if (attrs.tagging !== undefined ) {
                                    $select.taggingKey = attrs.taggingKey !== undefined ? attrs.taggingKey : '';
                                }
                            });

                            attrs.$observe('taggingTokens', function() {
                                if (attrs.tagging !== undefined) {
                                    var tokens = attrs.taggingTokens !== undefined ? attrs.taggingTokens.split('|') : [',','ENTER'];
                                    $select.taggingTokens = {isActivated: true, tokens: tokens };
                                }
                            });

                            //Automatically gets focus when loaded
                            if (angular.isDefined(attrs.autofocus)){
                                $timeout(function(){
                                    $select.setFocus();
                                });
                            }

                            //Gets focus based on scope event name (e.g. focus-on='SomeEventName')
                            if (angular.isDefined(attrs.focusOn)){
                                scope.$on(attrs.focusOn, function() {
                                    $timeout(function(){
                                        $select.setFocus();
                                    });
                                });
                            }

                            function onDocumentClick(e) {
                                if (!$select.open) return; //Skip it if dropdown is close

                                var contains = false;

                                if (window.jQuery) {
                                    // Firefox 3.6 does not support element.contains()
                                    // See Node.contains https://developer.mozilla.org/en-US/docs/Web/API/Node.contains
                                    contains = window.jQuery.contains(element[0], e.target);
                                } else {
                                    contains = element[0].contains(e.target);
                                }

                                if (!contains && !$select.clickTriggeredSelect) {
                                    var skipFocusser;
                                    if (!$select.skipFocusser) {
                                        //Will lose focus only with certain targets
                                        var focusableControls = ['input','button','textarea','select'];
                                        var targetController = angular.element(e.target).controller('xeUiSelect'); //To check if target is other ui-select
                                        skipFocusser = targetController && targetController !== $select; //To check if target is other ui-select
                                        if (!skipFocusser) skipFocusser =  ~focusableControls.indexOf(e.target.tagName.toLowerCase()); //Check if target is input, button or textarea
                                    } else {
                                        skipFocusser = true;
                                    }
                                    $select.close(skipFocusser);
                                    scope.$digest();
                                }
                                $select.clickTriggeredSelect = false;
                            }

                            // See Click everywhere but here event http://stackoverflow.com/questions/12931369
                            $document.on('click', onDocumentClick);

                            scope.$on('$destroy', function() {
                                $document.off('click', onDocumentClick);
                            });

                            // Move transcluded elements to their correct position in main template
                            transcludeFn(scope, function(clone) {
                                // See Transclude in AngularJS http://blog.omkarpatil.com/2012/11/transclude-in-angularjs.html

                                // One day jqLite will be replaced by jQuery and we will be able to write:
                                // var transcludedElement = clone.filter('.my-class')
                                // instead of creating a hackish DOM element:
                                var transcluded = angular.element('<div>').append(clone);

                                var transcludedMatch = transcluded.querySelectorAll('.ui-select-match');
                                transcludedMatch.removeAttr('ui-select-match'); //To avoid loop in case directive as attr
                                transcludedMatch.removeAttr('data-ui-select-match'); // Properly handle HTML5 data-attributes
                                if (transcludedMatch.length !== 1) {
                                    throw uiSelectMinErr('transcluded', "Expected 1 .ui-select-match but got '{0}'.", transcludedMatch.length);
                                }
                                element.querySelectorAll('.ui-select-match').replaceWith(transcludedMatch);

                                var transcludedChoices = transcluded.querySelectorAll('.ui-select-choices');
                                transcludedChoices.removeAttr('ui-select-choices'); //To avoid loop in case directive as attr
                                transcludedChoices.removeAttr('data-ui-select-choices'); // Properly handle HTML5 data-attributes
                                if (transcludedChoices.length !== 1) {
                                    throw uiSelectMinErr('transcluded', "Expected 1 .ui-select-choices but got '{0}'.", transcludedChoices.length);
                                }
                                element.querySelectorAll('.ui-select-choices').replaceWith(transcludedChoices);
                            });

                            // Support for appending the select field to the body when its open
                            var appendToBody = scope.$eval(attrs.appendToBody);
                            if (appendToBody !== undefined ? appendToBody : uiSelectConfig.appendToBody) {
                                scope.$watch('$select.open', function(isOpen) {
                                    if (isOpen) {
                                        positionDropdown();
                                    } else {
                                        resetDropdown();
                                    }
                                });

                                // Move the dropdown back to its original location when the scope is destroyed. Otherwise
                                // it might stick around when the user routes away or the select field is otherwise removed
                                scope.$on('$destroy', function() {
                                    resetDropdown();
                                });
                            }

                            // Hold on to a reference to the .ui-select-container element for appendToBody support
                            var placeholder = null,
                                originalWidth = '';

                            function positionDropdown() {
                                // Remember the absolute position of the element
                                var offset = uisOffset(element);

                                // Clone the element into a placeholder element to take its original place in the DOM
                                placeholder = angular.element('<div class="ui-select-placeholder"></div>');
                                placeholder[0].style.width = offset.width + 'px';
                                placeholder[0].style.height = offset.height + 'px';
                                element.after(placeholder);

                                // Remember the original value of the element width inline style, so it can be restored
                                // when the dropdown is closed
                                originalWidth = element[0].style.width;

                                // Now move the actual dropdown element to the end of the body
                                $document.find('body').append(element);

                                element[0].style.position = 'absolute';
                                element[0].style.left = offset.left + 'px';
                                element[0].style.top = offset.top + 'px';
                                element[0].style.width = offset.width + 'px';
                            }

                            function resetDropdown() {
                                if (placeholder === null) {
                                    // The dropdown has not actually been display yet, so there's nothing to reset
                                    return;
                                }

                                // Move the dropdown element back to its original location in the DOM
                                placeholder.replaceWith(element);
                                placeholder = null;

                                element[0].style.position = '';
                                element[0].style.left = '';
                                element[0].style.top = '';
                                element[0].style.width = originalWidth;

                                // Set focus back on to the moved element
                                $select.setFocus();
                            }

                            // Hold on to a reference to the .ui-select-dropdown element for direction support.
                            var dropdown = null,
                                directionUpClassName = 'direction-up';

                            // Support changing the direction of the dropdown if there isn't enough space to render it.
                            scope.$watch('$select.open', function() {

                                if ($select.dropdownPosition === 'auto' || $select.dropdownPosition === 'up'){
                                    scope.calculateDropdownPos();
                                }

                            });

                            var setDropdownPosUp = function(offset, offsetDropdown){

                                offset = offset || uisOffset(element);
                                offsetDropdown = offsetDropdown || uisOffset(dropdown);

                                dropdown[0].style.position = 'absolute';
                                dropdown[0].style.top = (offsetDropdown.height * -1) + 'px';
                                element.addClass(directionUpClassName);

                            };

                            var setDropdownPosDown = function(offset, offsetDropdown){

                                element.removeClass(directionUpClassName);

                                offset = offset || uisOffset(element);
                                offsetDropdown = offsetDropdown || uisOffset(dropdown);

                                dropdown[0].style.position = '';
                                dropdown[0].style.top = '';

                            };

                            scope.calculateDropdownPos = function(){

                                if ($select.open) {
                                    dropdown = angular.element(element).querySelectorAll('.ui-select-dropdown');
                                    if (dropdown.length === 0) {
                                        return;
                                    }

                                    // Hide the dropdown so there is no flicker until $timeout is done executing.
                                    dropdown[0].style.opacity = 0;

                                    // Delay positioning the dropdown until all choices have been added so its height is correct.
                                    $timeout(function(){

                                        if ($select.dropdownPosition === 'up'){
                                            //Go UP
                                            setDropdownPosUp();

                                        }else{ //AUTO

                                            element.removeClass(directionUpClassName);

                                            var offset = uisOffset(element);
                                            var offsetDropdown = uisOffset(dropdown);

                                            //https://code.google.com/p/chromium/issues/detail?id=342307#c4
                                            var scrollTop = $document[0].documentElement.scrollTop || $document[0].body.scrollTop; //To make it cross browser (blink, webkit, IE, Firefox).

                                            // Determine if the direction of the dropdown needs to be changed.
                                            if (offset.top + offset.height + offsetDropdown.height > scrollTop + $document[0].documentElement.clientHeight) {
                                                //Go UP
                                                setDropdownPosUp(offset, offsetDropdown);
                                            }else{
                                                //Go DOWN
                                                setDropdownPosDown(offset, offsetDropdown);
                                            }

                                        }

                                        // Display the dropdown once it has been positioned.
                                        dropdown[0].style.opacity = 1;
                                    });
                                } else {
                                    if (dropdown === null || dropdown.length === 0) {
                                        return;
                                    }

                                    // Reset the position of the dropdown.
                                    dropdown[0].style.position = '';
                                    dropdown[0].style.top = '';
                                    element.removeClass(directionUpClassName);
                                }
                            };
                        };
                    }
                };
            }]);

    uis.directive('xeUiSelectMatch', ['uiSelectConfig', function(uiSelectConfig) {
        return {
            restrict: 'EA',
            require: '^xeUiSelect',
            replace: true,
            transclude: true,
            templateUrl: function(tElement) {
                // Needed so the uiSelect can detect the transcluded content
                tElement.addClass('ui-select-match');

                // Gets theme attribute from parent (ui-select)
                var theme = tElement.parent().attr('theme') || uiSelectConfig.theme;
                var multi = tElement.parent().attr('multiple');
                return theme + (multi ? '/match-multiple.tpl.html' : '/match.tpl.html');
            },
            link: function(scope, element, attrs, $select) {
                $select.lockChoiceExpression = attrs.uiLockChoice;
                attrs.$observe('placeholder', function(placeholder) {
                    $select.placeholder = placeholder !== undefined ? placeholder : uiSelectConfig.placeholder;
                });

                function setAllowClear(allow) {
                    $select.allowClear = (angular.isDefined(allow)) ? (allow === '') ? true : (allow.toLowerCase() === 'true') : false;
                }

                attrs.$observe('allowClear', setAllowClear);
                setAllowClear(attrs.allowClear);

                if($select.multiple){
                    $select.sizeSearchInput();
                }

            }
        };
    }]);

    uis.directive('uiSelectMultiple', ['uiSelectMinErr','$timeout', function(uiSelectMinErr, $timeout) {
        return {
            restrict: 'EA',
            require: ['^xeUiSelect', '^ngModel'],

            controller: ['$scope','$timeout', function($scope, $timeout){

                var ctrl = this,
                    $select = $scope.$select,
                    ngModel;

                if (angular.isUndefined($select.selected))
                    $select.selected = [];

                //Wait for link fn to inject it
                $scope.$evalAsync(function(){ ngModel = $scope.ngModel; });

                ctrl.activeMatchIndex = -1;

                ctrl.updateModel = function(){
                    ngModel.$setViewValue(Date.now()); //Set timestamp as a unique string to force changes
                    ctrl.refreshComponent();
                };

                ctrl.refreshComponent = function(){
                    //Remove already selected items
                    //e.g. When user clicks on a selection, the selected array changes and
                    //the dropdown should remove that item
                    $select.refreshItems();
                    $select.sizeSearchInput();
                };

                // Remove item from multiple select
                ctrl.removeChoice = function(index){

                    var removedChoice = $select.selected[index];

                    // if the choice is locked, can't remove it
                    if(removedChoice._uiSelectChoiceLocked) return;

                    var locals = {};
                    locals[$select.parserResult.itemName] = removedChoice;

                    $select.selected.splice(index, 1);
                    ctrl.activeMatchIndex = -1;
                    $select.sizeSearchInput();

                    // Give some time for scope propagation.
                    $timeout(function(){
                        $select.onRemoveCallback($scope, {
                            $item: removedChoice,
                            $model: $select.parserResult.modelMapper($scope, locals)
                        });
                    });

                    ctrl.updateModel();
                    $select.setFocus();
                };

                ctrl.getPlaceholder = function(){
                    //Refactor single?
                    if($select.selected && $select.selected.length) return;
                    return $select.placeholder;
                };


            }],
            controllerAs: '$selectMultiple',

            link: function(scope, element, attrs, ctrls) {

                var $select = ctrls[0];
                var ngModel = scope.ngModel = ctrls[1];
                var $selectMultiple = scope.$selectMultiple;

                //$select.selected = raw selected objects (ignoring any property binding)

                $select.multiple = true;
                $select.removeSelected = true;

                //Input that will handle focus
                $select.focusInput = $select.searchInput;

                //Properly check for empty if set to multiple
                ngModel.$isEmpty = function(value) {
                    return !value || value.length === 0;
                };

                //From view --> model
                ngModel.$parsers.unshift(function () {
                    var locals = {},
                        result,
                        resultMultiple = [];
                    for (var j = $select.selected.length - 1; j >= 0; j--) {
                        locals = {};
                        locals[$select.parserResult.itemName] = $select.selected[j];
                        result = $select.parserResult.modelMapper(scope, locals);
                        resultMultiple.unshift(result);
                    }
                    return resultMultiple;
                });

                // From model --> view
                ngModel.$formatters.unshift(function (inputValue) {
                    var data = $select.parserResult.source (scope, { $select : {search:''}}), //Overwrite $search
                        locals = {},
                        result;
                    if (!data) return inputValue;
                    var resultMultiple = [];
                    var checkFnMultiple = function(list, value){
                        if (!list || !list.length) return;
                        for (var p = list.length - 1; p >= 0; p--) {
                            locals[$select.parserResult.itemName] = list[p];
                            result = $select.parserResult.modelMapper(scope, locals);
                            if($select.parserResult.trackByExp){
                                var propsItemNameMatches = /(\w*)\./.exec($select.parserResult.trackByExp);
                                var matches = /\.([^\s]+)/.exec($select.parserResult.trackByExp);
                                if(propsItemNameMatches && propsItemNameMatches.length > 0 && propsItemNameMatches[1] == $select.parserResult.itemName){
                                    if(matches && matches.length>0 && result[matches[1]] == value[matches[1]]){
                                        resultMultiple.unshift(list[p]);
                                        return true;
                                    }
                                }
                            }
                            if (angular.equals(result,value)){
                                resultMultiple.unshift(list[p]);
                                return true;
                            }
                        }
                        return false;
                    };
                    if (!inputValue) return resultMultiple; //If ngModel was undefined
                    for (var k = inputValue.length - 1; k >= 0; k--) {
                        //Check model array of currently selected items
                        if (!checkFnMultiple($select.selected, inputValue[k])){
                            //Check model array of all items available
                            if (!checkFnMultiple(data, inputValue[k])){
                                //If not found on previous lists, just add it directly to resultMultiple
                                resultMultiple.unshift(inputValue[k]);
                            }
                        }
                    }
                    return resultMultiple;
                });

                //Watch for external model changes
                scope.$watchCollection(function(){ return ngModel.$modelValue; }, function(newValue, oldValue) {
                    if (oldValue != newValue){
                        ngModel.$modelValue = null; //Force scope model value and ngModel value to be out of sync to re-run formatters
                        $selectMultiple.refreshComponent();
                    }
                });

                ngModel.$render = function() {
                    // Make sure that model value is array
                    if(!angular.isArray(ngModel.$viewValue)){
                        // Have tolerance for null or undefined values
                        if(angular.isUndefined(ngModel.$viewValue) || ngModel.$viewValue === null){
                            $select.selected = [];
                        } else {
                            throw uiSelectMinErr('multiarr', "Expected model value to be array but got '{0}'", ngModel.$viewValue);
                        }
                    }
                    $select.selected = ngModel.$viewValue;
                    $selectMultiple.refreshComponent();
                    scope.$evalAsync(); //To force $digest
                };

                scope.$on('uis:select', function (event, item) {
                    if($select.selected.length >= $select.limit) {
                        return;
                    }
                    $select.selected.push(item);
                    $selectMultiple.updateModel();
                });

                scope.$on('uis:activate', function () {
                    $selectMultiple.activeMatchIndex = -1;
                });

                scope.$watch('$select.disabled', function(newValue, oldValue) {
                    // As the search input field may now become visible, it may be necessary to recompute its size
                    if (oldValue && !newValue) $select.sizeSearchInput();
                });

                $select.searchInput.on('keydown', function(e) {
                    var key = e.which;
                    scope.$apply(function() {
                        var processed = false;
                        // var tagged = false; //Checkme
                        if(KEY.isHorizontalMovement(key)){
                            processed = _handleMatchSelection(key);
                        }
                        if (processed  && key != KEY.TAB) {
                            //TODO Check si el tab selecciona aun correctamente
                            //Crear test
                            e.preventDefault();
                            e.stopPropagation();
                        }
                    });
                });
                function _getCaretPosition(el) {
                    if(angular.isNumber(el.selectionStart)) return el.selectionStart;
                    // selectionStart is not supported in IE8 and we don't want hacky workarounds so we compromise
                    else return el.value.length;
                }
                // Handles selected options in "multiple" mode
                function _handleMatchSelection(key){
                    var caretPosition = _getCaretPosition($select.searchInput[0]),
                        length = $select.selected.length,
                    // none  = -1,
                        first = 0,
                        last  = length-1,
                        curr  = $selectMultiple.activeMatchIndex,
                        next  = $selectMultiple.activeMatchIndex+1,
                        prev  = $selectMultiple.activeMatchIndex-1,
                        newIndex = curr;

                    if(caretPosition > 0 || ($select.search.length && key == KEY.RIGHT)) return false;

                    $select.close();

                    function getNewActiveMatchIndex(){
                        switch(key){
                            case KEY.LEFT:
                                // Select previous/first item
                                if(~$selectMultiple.activeMatchIndex){
                                    var precedingItem=$select.selected[prev].name;
                                    $('.uiselect-choice-status-hidden-accessible').text(precedingItem);
                                    return prev;
                                }
                                // Select last item
                                else {
                                    var precedingItem=$select.selected[last].name;
                                    $('.uiselect-choice-status-hidden-accessible').text(precedingItem);
                                    return last;
                                }
                                break;
                            case KEY.RIGHT:
                                // Open drop-down
                                if(!~$selectMultiple.activeMatchIndex || curr === last){
                                    $select.activate();
                                    return false;
                                }
                                // Select next/last item
                                else {
                                    var succedingItem = $select.selected[next].name
                                    $('.uiselect-choice-status-hidden-accessible').text(succedingItem);
                                    return next;
                                }
                                break;
                            case KEY.BACKSPACE:
                                // Remove selected item and select previous/first
                                if(~$selectMultiple.activeMatchIndex){
                                    $selectMultiple.removeChoice(curr);
                                    return prev;
                                }
                                // Select last item
                                else return last;
                                break;
                            case KEY.DELETE:
                                // Remove selected item and select next item
                                if(~$selectMultiple.activeMatchIndex){
                                    $selectMultiple.removeChoice($selectMultiple.activeMatchIndex);
                                    return curr;
                                }
                                else return false;
                        }
                    }

                    newIndex = getNewActiveMatchIndex();

                    if(!$select.selected.length || newIndex === false) $selectMultiple.activeMatchIndex = -1;
                    else $selectMultiple.activeMatchIndex = Math.min(last,Math.max(first,newIndex));

                    return true;
                }

                $select.searchInput.on('keyup', function(e) {

                    if ( ! KEY.isVerticalMovement(e.which) ) {
                        scope.$evalAsync( function () {
                            $select.activeIndex = $select.taggingLabel === false ? -1 : 0;
                        });
                    }
                    // Push a "create new" item into array if there is a search string
                    if ( $select.tagging.isActivated && $select.search.length > 0 ) {

                        // return early with these keys
                        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || KEY.isVerticalMovement(e.which) ) {
                            return;
                        }
                        // always reset the activeIndex to the first item when tagging
                        $select.activeIndex = $select.taggingLabel === false ? -1 : 0;
                        // taggingLabel === false bypasses all of this
                        if ($select.taggingLabel === false) return;

                        var items = angular.copy( $select.items );
                        var stashArr = angular.copy( $select.items );
                        var newItem;
                        var item;
                        var hasTag = false;
                        var dupeIndex = -1;
                        var tagItems;
                        var tagItem;

                        // case for object tagging via transform `$select.tagging.fct` function
                        if ( $select.tagging.fct !== undefined) {
                            tagItems = $select.$filter('filter')(items,{'isTag': true});
                            if ( tagItems.length > 0 ) {
                                tagItem = tagItems[0];
                            }
                            // remove the first element, if it has the `isTag` prop we generate a new one with each keyup, shaving the previous
                            if ( items.length > 0 && tagItem ) {
                                hasTag = true;
                                items = items.slice(1,items.length);
                                stashArr = stashArr.slice(1,stashArr.length);
                            }
                            newItem = $select.tagging.fct({tag: $select.search, taggingKey: $select.taggingKey});
                            // verify the new tag doesn't match the value of a possible selection choice or an already selected item.
                            if (
                                stashArr.some(function (origItem) {
                                    return angular.equals(origItem, $select.tagging.fct({tag: $select.search, taggingKey: $select.taggingKey}));
                                }) ||
                                $select.selected.some(function (origItem) {
                                    return angular.equals(origItem, newItem);
                                })
                            ) {
                                scope.$evalAsync(function () {
                                    $select.activeIndex = 0;
                                    $select.items = items;
                                });
                                return;
                            }
                            newItem.isTag = true;
                            // handle newItem string and stripping dupes in tagging string context
                        } else {
                            // find any tagging items already in the $select.items array and store them
                            tagItems = $select.$filter('filter')(items,function (item) {
                                return item.match($select.taggingLabel);
                            });
                            if ( tagItems.length > 0 ) {
                                tagItem = tagItems[0];
                            }
                            item = items[0];
                            // remove existing tag item if found (should only ever be one tag item)
                            if ( item !== undefined && items.length > 0 && tagItem ) {
                                hasTag = true;
                                items = items.slice(1,items.length);
                                stashArr = stashArr.slice(1,stashArr.length);
                            }
                            newItem = $select.search+' '+$select.taggingLabel;
                            if ( _findApproxDupe($select.selected, $select.search) > -1 ) {
                                return;
                            }
                            // verify the the tag doesn't match the value of an existing item from
                            // the searched data set or the items already selected
                            if ( _findCaseInsensitiveDupe(stashArr.concat($select.selected)) ) {
                                // if there is a tag from prev iteration, strip it / queue the change
                                // and return early
                                if ( hasTag ) {
                                    items = stashArr;
                                    scope.$evalAsync( function () {
                                        $select.activeIndex = 0;
                                        $select.items = items;
                                    });
                                }
                                return;
                            }
                            if ( _findCaseInsensitiveDupe(stashArr) ) {
                                // if there is a tag from prev iteration, strip it
                                if ( hasTag ) {
                                    $select.items = stashArr.slice(1,stashArr.length);
                                }
                                return;
                            }
                        }
                        if ( hasTag ) dupeIndex = _findApproxDupe($select.selected, newItem);
                        // dupe found, shave the first item
                        if ( dupeIndex > -1 ) {
                            items = items.slice(dupeIndex+1,items.length-1);
                        } else {
                            items = [];
                            items.push(newItem);
                            items = items.concat(stashArr);
                        }
                        scope.$evalAsync( function () {
                            $select.activeIndex = 0;
                            $select.items = items;
                        });
                    }
                });
                function _findCaseInsensitiveDupe(arr) {
                    if ( arr === undefined || $select.search === undefined ) {
                        return false;
                    }
                    var hasDupe = arr.filter( function (origItem) {
                            if ( $select.search.toUpperCase() === undefined || origItem === undefined ) {
                                return false;
                            }
                            return origItem.toUpperCase() === $select.search.toUpperCase();
                        }).length > 0;

                    return hasDupe;
                }
                function _findApproxDupe(haystack, needle) {
                    var dupeIndex = -1;
                    if(angular.isArray(haystack)) {
                        var tempArr = angular.copy(haystack);
                        for (var i = 0; i <tempArr.length; i++) {
                            // handle the simple string version of tagging
                            if ( $select.tagging.fct === undefined ) {
                                // search the array for the match
                                if ( tempArr[i]+' '+$select.taggingLabel === needle ) {
                                    dupeIndex = i;
                                }
                                // handle the object tagging implementation
                            } else {
                                var mockObj = tempArr[i];
                                if (angular.isObject(mockObj)) {
                                    mockObj.isTag = true;
                                }
                                if ( angular.equals(mockObj, needle) ) {
                                    dupeIndex = i;
                                }
                            }
                        }
                    }
                    return dupeIndex;
                }

                $select.searchInput.on('blur', function() {
                    $timeout(function() {
                        $selectMultiple.activeMatchIndex = -1;
                    });
                });

            }
        };
    }]);

    uis.directive('uiSelectSingle', ['$timeout','$compile', function($timeout, $compile) {
        return {
            restrict: 'EA',
            require: ['^xeUiSelect', '^ngModel'],
            link: function(scope, element, attrs, ctrls) {

                var $select = ctrls[0];
                var ngModel = ctrls[1];

                //From view --> model
                ngModel.$parsers.unshift(function (inputValue) {
                    var locals = {},
                        result;
                    locals[$select.parserResult.itemName] = inputValue;
                    result = $select.parserResult.modelMapper(scope, locals);
                    return result;
                });

                //From model --> view
                ngModel.$formatters.unshift(function (inputValue) {
                    var data = $select.parserResult.source (scope, { $select : {search:''}}), //Overwrite $search
                        locals = {},
                        result;
                    if (data){
                        var checkFnSingle = function(d){
                            locals[$select.parserResult.itemName] = d;
                            result = $select.parserResult.modelMapper(scope, locals);
                            return result == inputValue;
                        };
                        //If possible pass same object stored in $select.selected
                        if ($select.selected && checkFnSingle($select.selected)) {
                            return $select.selected;
                        }
                        for (var i = data.length - 1; i >= 0; i--) {
                            if (checkFnSingle(data[i])) return data[i];
                        }
                    }
                    return inputValue;
                });

                //Update viewValue if model change
                scope.$watch('$select.selected', function(newValue) {
                    if (ngModel.$viewValue !== newValue) {
                        ngModel.$setViewValue(newValue);
                    }
                });

                ngModel.$render = function() {
                    $select.selected = ngModel.$viewValue;
                };

                scope.$on('uis:select', function (event, item) {
                    $select.selected = item;
                });

                scope.$on('uis:close', function (event, skipFocusser) {
                    $timeout(function(){
                        if ( $select.tagging.isActivated ) {
                            $select.refreshItems();
                        }
                        $select.focusser.prop('disabled', false);
                        if (!skipFocusser) $select.focusser[0].focus();
                    },0,false);
                });

                scope.$on('uis:activate', function () {
                    focusser.prop('disabled', true); //Will reactivate it on .close()
                });

                //Idea from: https://github.com/ivaynberg/select2/blob/79b5bf6db918d7560bdd959109b7bcfb47edaf43/select2.js#L1954
                var focusser = angular.element("<input ng-disabled='$select.disabled' class='ui-select-focusser ui-select-offscreen' type='text' id='{{ $select.focusserId }}' aria-labelledby='select2-focusser-{{ $select.generatedId }} select2-placeholder-{{ $select.generatedId }} select2-chosen-{{ $select.generatedId }}' aria-expanded='{{($select.isDisabled(this) === false)?true:false}}' aria-haspopup='true' role='combobox'/><abbr ng-if=\"$select.allowClear && !$select.isEmpty()\" class=\"select2-search-choice-close ui-select-clear\" tabindex=\"0\" ng-click=\"$select.clear($event)\" xe-key-enter><span class=\"ui-select-offscreen\">Clear</span></abbr>");

                $compile(focusser)(scope);
                $select.focusser = focusser;

                //Input that will handle focus
                $select.focusInput = focusser;

                element.parent().append(focusser);
                focusser.bind("focus", function(){
                    scope.$evalAsync(function(){
                        $select.focus = true;
                    });
                });

                focusser.bind("blur", function(){
                    scope.$evalAsync(function(){
                        $select.focus = false;
                    });
                });

                focusser.bind("keydown", function (e) {

                    if (e.which === KEY.BACKSPACE) {
                        e.preventDefault();
                        e.stopPropagation();
                        $select.select(undefined);
                        scope.$apply();
                        return;
                    }

                    if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC) {
                        return;
                    }

                    if (e.which == KEY.DOWN || e.which == KEY.UP || e.which == KEY.ENTER || e.which == KEY.SPACE) {
                        e.preventDefault();
                        e.stopPropagation();
                        $select.activate();
                        return false;
                    }

                    scope.$digest();
                });

                $select.searchInput.on('keyup', function(e) {
                    // Push a "create new" item into array if there is a search string
                    if ( $select.tagging.isActivated && $select.search.length > 0 ) {

                        // return early with these keys
                        if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || KEY.isVerticalMovement(e.which) ) {
                            return;
                        }
                        // always reset the activeIndex to the first item when tagging
                        $select.activeIndex = $select.taggingLabel === false ? -1 : 0;
                        // taggingLabel === false bypasses all of this
                        if ($select.taggingLabel === false) return;

                        var items = angular.copy( $select.items );
                        var stashArr = angular.copy( $select.items );
                        var newItem;
                        var item;
                        var hasTag = false;
                        var tagItems;
                        var tagItem;

                        // case for object tagging via transform `$select.tagging.fct` function
                        if ( $select.tagging.fct !== undefined ) {
                            tagItems = $select.$filter('filter')(items,{'isTag': true});
                            if ( tagItems.length > 0 ) {
                                tagItem = tagItems[0];
                            }
                            // remove the first element, if it has the `isTag` prop we generate a new one with each keyup, shaving the previous
                            if ( items.length > 0 && tagItem ) {
                                hasTag = true;
                                items = items.slice(1,items.length);
                                stashArr = stashArr.slice(1,stashArr.length);

                                // verify the new tag doesn't match the value of a possible selection choice.
                                if (
                                    stashArr.some(function (origItem) {
                                        return angular.equals(origItem[$select.taggingKey].toLowerCase(), $select.search.toLowerCase());
                                    })
                                ) {
                                    scope.$evalAsync(function () {
                                        $select.activeIndex = 0;
                                        $select.items = items;
                                    });
                                    return;
                                }
                            }
                            newItem = $select.tagging.fct({tag: $select.search, taggingKey: $select.taggingKey});
                            newItem.isTag = true;
                            // handle newItem string and stripping dupes in tagging string context
                        } else {
                            // find any tagging items already in the $select.items array and store them
                            var originItems = $select.parserResult.source(scope, { $select : {search:''}});
                            tagItem = items.filter(function(item) { return originItems.indexOf(item) < 0; })[0];
                            item = items[0];
                            // remove existing tag item if found (should only ever be one tag item)
                            if ( item !== undefined && items.length > 0 && tagItem ) {
                                hasTag = true;
                                items = items.slice(1,items.length);
                                stashArr = stashArr.slice(1,stashArr.length);
                            }

                            newItem = $select.search + ($select.taggingLabel ? (' '+$select.taggingLabel) : '');

                            // verify the the tag doesn't match the value of an existing item from
                            // the searched data set or the items already selected
                            if ( _findCaseInsensitiveDupe(stashArr.concat($select.selected)) ) {
                                // if there is a tag from prev iteration, strip it / queue the change
                                // and return early
                                if ( hasTag ) {
                                    items = stashArr;
                                    scope.$evalAsync( function () {
                                        $select.activeIndex = 0;
                                        $select.items = items;
                                    });
                                }
                                return;
                            }
                            if ( _findCaseInsensitiveDupe(stashArr) ) {
                                // if there is a tag from prev iteration, strip it
                                if ( hasTag ) {
                                    $select.items = stashArr.slice(1,stashArr.length);
                                }
                                return;
                            }
                        }

                        items = [];
                        items.push(newItem);
                        items = items.concat(stashArr);

                        scope.$evalAsync( function () {
                            $select.activeIndex = 0;
                            $select.items = items;
                        });
                    } else if ( $select.tagging.isActivated && $select.search.length === 0 && angular.isArray($select.items)) {
                        $select.refreshItems();
                    }
                });
                function _findCaseInsensitiveDupe(arr) {
                    if ( arr === undefined || $select.search === undefined ) {
                        return false;
                    }
                    var hasDupe = arr.filter( function (origItem) {
                        if ( $select.search.toUpperCase() === undefined || origItem === undefined ) {
                            return false;
                        }
                        return origItem.toUpperCase() === $select.search.toUpperCase();
                    }).length > 0;

                    return hasDupe;
                }

                focusser.bind("keyup input", function(e){

                    if (e.which === KEY.TAB || KEY.isControl(e) || KEY.isFunctionKey(e) || e.which === KEY.ESC || e.which == KEY.ENTER || e.which === KEY.BACKSPACE) {
                        return;
                    }

                    $select.activate(focusser.val()); //User pressed some regular key, so we pass it to the search input
                    focusser.val('');
                    scope.$digest();

                });


            }
        };
    }]);
// Make multiple matches sortable
    uis.directive('uiSelectSort', ['$timeout', 'uiSelectConfig', 'uiSelectMinErr', function($timeout, uiSelectConfig, uiSelectMinErr) {
        return {
            require: '^xeUiSelect',
            link: function(scope, element, attrs, $select) {
                if (scope[attrs.uiSelectSort] === null) {
                    throw uiSelectMinErr('sort', 'Expected a list to sort');
                }

                var options = angular.extend({
                        axis: 'horizontal'
                    },
                    scope.$eval(attrs.uiSelectSortOptions));

                var axis = options.axis;
                var draggingClassName = 'dragging';
                var droppingClassName = 'dropping';
                var droppingBeforeClassName = 'dropping-before';
                var droppingAfterClassName = 'dropping-after';

                scope.$watch(function(){
                    return $select.sortable;
                }, function(newValue){
                    if (newValue) {
                        element.attr('draggable', true);
                    } else {
                        element.removeAttr('draggable');
                    }
                });

                element.on('dragstart', function(event) {
                    element.addClass(draggingClassName);

                    (event.dataTransfer || event.originalEvent.dataTransfer).setData('text', scope.$index.toString());
                });

                element.on('dragend', function() {
                    element.removeClass(draggingClassName);
                });

                var move = function(from, to) {
                    /*jshint validthis: true */
                    this.splice(to, 0, this.splice(from, 1)[0]);
                };

                var dragOverHandler = function(event) {
                    event.preventDefault();

                    var offset = axis === 'vertical' ? event.offsetY || event.layerY || (event.originalEvent ? event.originalEvent.offsetY : 0) : event.offsetX || event.layerX || (event.originalEvent ? event.originalEvent.offsetX : 0);

                    if (offset < (this[axis === 'vertical' ? 'offsetHeight' : 'offsetWidth'] / 2)) {
                        element.removeClass(droppingAfterClassName);
                        element.addClass(droppingBeforeClassName);

                    } else {
                        element.removeClass(droppingBeforeClassName);
                        element.addClass(droppingAfterClassName);
                    }
                };

                var dropTimeout;

                var dropHandler = function(event) {
                    event.preventDefault();

                    var droppedItemIndex = parseInt((event.dataTransfer || event.originalEvent.dataTransfer).getData('text'), 10);

                    // prevent event firing multiple times in firefox
                    $timeout.cancel(dropTimeout);
                    dropTimeout = $timeout(function() {
                        _dropHandler(droppedItemIndex);
                    }, 20);
                };

                var _dropHandler = function(droppedItemIndex) {
                    var theList = scope.$eval(attrs.uiSelectSort);
                    var itemToMove = theList[droppedItemIndex];
                    var newIndex = null;

                    if (element.hasClass(droppingBeforeClassName)) {
                        if (droppedItemIndex < scope.$index) {
                            newIndex = scope.$index - 1;
                        } else {
                            newIndex = scope.$index;
                        }
                    } else {
                        if (droppedItemIndex < scope.$index) {
                            newIndex = scope.$index;
                        } else {
                            newIndex = scope.$index + 1;
                        }
                    }

                    move.apply(theList, [droppedItemIndex, newIndex]);

                    scope.$apply(function() {
                        scope.$emit('uiSelectSort:change', {
                            array: theList,
                            item: itemToMove,
                            from: droppedItemIndex,
                            to: newIndex
                        });
                    });

                    element.removeClass(droppingClassName);
                    element.removeClass(droppingBeforeClassName);
                    element.removeClass(droppingAfterClassName);

                    element.off('drop', dropHandler);
                };

                element.on('dragenter', function() {
                    if (element.hasClass(draggingClassName)) {
                        return;
                    }

                    element.addClass(droppingClassName);

                    element.on('dragover', dragOverHandler);
                    element.on('drop', dropHandler);
                });

                element.on('dragleave', function(event) {
                    if (event.target != element) {
                        return;
                    }
                    element.removeClass(droppingClassName);
                    element.removeClass(droppingBeforeClassName);
                    element.removeClass(droppingAfterClassName);

                    element.off('dragover', dragOverHandler);
                    element.off('drop', dropHandler);
                });
            }
        };
    }]);

    /**
     * Parses "repeat" attribute.
     *
     * Taken from AngularJS ngRepeat source code
     * See https://github.com/angular/angular.js/blob/v1.2.15/src/ng/directive/ngRepeat.js#L211
     *
     * Original discussion about parsing "repeat" attribute instead of fully relying on ng-repeat:
     * https://github.com/angular-ui/ui-select/commit/5dd63ad#commitcomment-5504697
     */

    uis.service('uisRepeatParser', ['uiSelectMinErr','$parse', function(uiSelectMinErr, $parse) {
        var self = this;

        /**
         * Example:
         * expression = "address in addresses | filter: {street: $select.search} track by $index"
         * itemName = "address",
         * source = "addresses | filter: {street: $select.search}",
         * trackByExp = "$index",
         */
        self.parse = function(expression) {


            var match;
            //var isObjectCollection = /\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)/.test(expression);
            // If an array is used as collection

            // if (isObjectCollection){
            // 000000000000000000000000000000111111111000000000000000222222222222220033333333333333333333330000444444444444444444000000000000000055555555555000000000000000000000066666666600000000
            match = expression.match(/^\s*(?:([\s\S]+?)\s+as\s+)?(?:([\$\w][\$\w]*)|(?:\(\s*([\$\w][\$\w]*)\s*,\s*([\$\w][\$\w]*)\s*\)))\s+in\s+(\s*[\s\S]+?)?(?:\s+track\s+by\s+([\s\S]+?))?\s*$/);

            // 1 Alias
            // 2 Item
            // 3 Key on (key,value)
            // 4 Value on (key,value)
            // 5 Source expression (including filters)
            // 6 Track by

            if (!match) {
                throw uiSelectMinErr('iexp', "Expected expression in form of '_item_ in _collection_[ track by _id_]' but got '{0}'.",
                    expression);
            }

            var source = match[5],
                filters = '';

            // When using (key,value) ui-select requires filters to be extracted, since the object
            // is converted to an array for $select.items
            // (in which case the filters need to be reapplied)
            if (match[3]) {
                // Remove any enclosing parenthesis
                source = match[5].replace(/(^\()|(\)$)/g, '');
                // match all after | but not after ||
                var filterMatch = match[5].match(/^\s*(?:[\s\S]+?)(?:[^\|]|\|\|)+([\s\S]*)\s*$/);
                if(filterMatch && filterMatch[1].trim()) {
                    filters = filterMatch[1];
                    source = source.replace(filters, '');
                }
            }

            return {
                itemName: match[4] || match[2], // (lhs) Left-hand side,
                keyName: match[3], //for (key, value) syntax
                source: $parse(source),
                filters: filters,
                trackByExp: match[6],
                modelMapper: $parse(match[1] || match[4] || match[2]),
                repeatExpression: function (grouped) {
                    var expression = this.itemName + ' in ' + (grouped ? '$group.items' : '$select.items');
                    if (this.trackByExp) {
                        expression += ' track by ' + this.trackByExp;
                    }
                    return expression;
                }
            };

        };

        self.getGroupNgRepeatExpression = function() {
            return '$group in $select.groups';
        };

    }]);

}());
angular.module("ui.select").run(["$templateCache", function($templateCache) {$templateCache.put("bootstrap/choices.tpl.html","<ul class=\"ui-select-choices ui-select-choices-content ui-select-dropdown dropdown-menu\" role=\"list\" ng-show=\"$select.open\"><li class=\"ui-select-choices-group\" id=\"ui-select-choices-{{ $select.generatedId }}\"><div class=\"divider\" ng-show=\"$select.isGrouped && $index > 0\"></div><div ng-show=\"$select.isGrouped\" class=\"ui-select-choices-group-label dropdown-header\" ng-bind=\"$group.name\"></div><div id=\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\" class=\"ui-select-choices-row\" ng-class=\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\" role=\"listitem\"><a href=\"\" class=\"ui-select-choices-row-inner\"></a></div></li></ul>");
    $templateCache.put("bootstrap/match-multiple.tpl.html","<span class=\"ui-select-match\"><span ng-repeat=\"$item in $select.selected\"><span class=\"ui-select-match-item btn btn-default btn-xs\" tabindex=\"-1\" type=\"button\" ng-disabled=\"$select.disabled\" ng-click=\"$selectMultiple.activeMatchIndex = $index;\" ng-class=\"{\'btn-primary\':$selectMultiple.activeMatchIndex === $index, \'select-locked\':$select.isLocked(this, $index)}\" ui-select-sort=\"$select.selected\"><span class=\"close ui-select-match-close\" ng-hide=\"$select.disabled\" ng-click=\"$selectMultiple.removeChoice($index)\">&nbsp;&times;</span> <span uis-transclude-append=\"\"></span></span></span></span>");
    $templateCache.put("bootstrap/match.tpl.html","<div class=\"ui-select-match\" ng-hide=\"$select.open\" ng-disabled=\"$select.disabled\" ng-class=\"{\'btn-default-focus\':$select.focus}\"><span tabindex=\"-1\" class=\"btn btn-default form-control ui-select-toggle\" aria-label=\"{{ $select.baseTitle }} activate\" ng-disabled=\"$select.disabled\" ng-click=\"$select.activate()\" style=\"outline: 0;\"><span ng-show=\"$select.isEmpty()\" class=\"ui-select-placeholder text-muted\">{{$select.placeholder}}</span> <span ng-hide=\"$select.isEmpty()\" class=\"ui-select-match-text pull-left\" ng-class=\"{\'ui-select-allow-clear\': $select.allowClear && !$select.isEmpty()}\" ng-transclude=\"\"></span> <i class=\"caret pull-right\" ng-click=\"$select.toggle($event)\"></i> <a ng-show=\"$select.allowClear && !$select.isEmpty()\" style=\"margin-right: 10px\" ng-click=\"$select.clear($event)\" class=\"btn btn-xs btn-link pull-right\"><i class=\"glyphicon glyphicon-remove\" aria-hidden=\"true\"></i></a></span></div>");
    $templateCache.put("bootstrap/select-multiple.tpl.html","<div class=\"ui-select-container ui-select-multiple ui-select-bootstrap dropdown form-control\" ng-class=\"{open: $select.open}\"><div><div class=\"ui-select-match\"></div><input type=\"text\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" class=\"ui-select-search input-xs\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-disabled=\"$select.disabled\" ng-hide=\"$select.disabled\" ng-click=\"$select.activate()\" ng-model=\"$select.search\" role=\"application\" aria-label=\"{{ $select.baseTitle }}\" ondrop=\"return false;\"></div><div class=\"ui-select-choices\"></div></div>");
    $templateCache.put("bootstrap/select.tpl.html","<div class=\"ui-select-container ui-select-bootstrap dropdown\" ng-class=\"{open: $select.open}\"><div class=\"ui-select-match\"></div><input type=\"text\" autocomplete=\"off\" tabindex=\"-1\" aria-expanded=\"true\" aria-label=\"{{ $select.baseTitle }}\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" aria-activedescendant=\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\" class=\"form-control ui-select-search\" placeholder=\"{{$select.placeholder}}\" ng-model=\"$select.search\" ng-show=\"$select.searchEnabled && $select.open\"><div class=\"ui-select-choices\"></div></div>");

    $templateCache.put("select2/choices.tpl.html",
        "<ul class=\"ui-select-choices ui-select-choices-content select2-results\" >" +
        "<li ng-if=\"$select.minimumInputLength\" ng-show=\"$select.showMinMsg\" class=\"select2-no-results\" role=\"listitem\" ng-bind=\"'uiselect.minimum.input.text' | xei18n: $select.minimumInputLength\" aria-live=\"polite\" ></li>" +
        "<li ng-show=\"$select.showNoResultsMsg && !$select.showMinMsg\" role=\"listitem\"  class=\"select2-no-results \"  ng-bind=\"'uiselect.no.results.found.text' | xei18n\" > " +
        "<li class=\"ui-select-choices-group\" ng-class=\"{\'select2-result-with-children\': $select.choiceGrouped($group) }\" role=\"listitem\"  >" +
        "<div ng-show=\"$select.choiceGrouped($group) && !$select.showNoResultsMsg && !$select.showMinMsg\" class=\"ui-select-choices-group-label select2-result-label\" ng-bind=\"$group.name\"></div>" +
        "<ul ng-show=\"!$select.showNoResultsMsg && !$select.showMinMsg\" role=\"list\" id=\"ui-select-choices-{{ $select.generatedId }}\" " +
        "ng-class=\"{\'select2-result-sub\': $select.choiceGrouped($group), \'select2-result-single\': !$select.choiceGrouped($group) }\">" +
        "<li role=\"listitem\" id=\"ui-select-choices-row-{{ $select.generatedId }}-{{$index}}\" class=\"ui-select-choices-row\"  " +
        "ng-class=\"{\'select2-highlighted\': $select.isActive(this), \'select2-disabled\': $select.isDisabled(this)}\" >" +
        "<div class=\"select2-result-label ui-select-choices-row-inner\"></div></li></ul></li></ul>");

    $templateCache.put("select2/match-multiple.tpl.html","<span class=\"ui-select-match\"><li class=\"ui-select-match-item select2-search-choice\" ng-repeat=\"$item in $select.selected\" ng-class=\"{\'select2-search-choice-focus\':$selectMultiple.activeMatchIndex === $index, \'select2-locked\':$select.isLocked(this, $index)}\" ui-select-sort=\"$select.selected\"><span uis-transclude-append=\"\"></span> <a class=\"ui-select-match-close select2-search-choice-close\" ng-click=\"$selectMultiple.removeChoice($index)\" tabindex=\"-1\"></a></li></span>");
    $templateCache.put("select2/match.tpl.html","<a class=\"select2-choice ui-select-match\" ng-class=\"{\'select2-default\': $select.isEmpty()}\" ng-click=\"$select.toggle($event)\" ><span  id=\"select2-placeholder-{{ $select.generatedId }}\" ng-show=\"$select.isEmpty()\" class=\"select2-chosen\">{{$select.placeholder}}</span><span id=\"select2-focusser-{{ $select.generatedId }}\" ng-show=\"false\">{{$select.focusserTitle}}</span><span id=\"select2-chosen-{{ $select.generatedId }}\" ng-hide=\"$select.isEmpty()\" class=\"select2-chosen\" ng-transclude=\"\">{{$select.placeholder}}</span><span class=\"select2-arrow ui-select-toggle\"><b></b></span></a>");

    $templateCache.put("select2/select-multiple.tpl.html",
        "<div class=\"ui-select-container ui-select-multiple select2 select2-container select2-container-multi\" " +
        "ng-class=\"{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled}\">" +
        "<ul class=\"select2-choices\" ng-click=\"$select.activate()\"><span class=\"ui-select-match\"></span>" +
        "<li class=\"select2-search-field\">" +
        "<input type=\"text\" autocomplete=\"off\" autocorrect=\"off\" autocapitalize=\"off\" spellcheck=\"false\" role=\"combobox\" aria-expanded=\"true\" " +
        "aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" " +
        "aria-label=\"{{ $select.baseTitle }}\" aria-activedescendant=\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\" " +
        "class=\"select2-input ui-select-search\" placeholder=\"{{$selectMultiple.getPlaceholder()}}\" ng-disabled=\"$select.disabled\" ng-hide=\"$select.disabled\" " +
        "ng-model=\"$select.search\"  style=\"width: 34px;\" ondrop=\"return false;\"/>" +
        "</li>" +
        "</ul><div class=\"ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active\" ng-class=\"{\'select2-display-none\': !$select.open}\">" +
        "<div class=\"ui-select-choices\"></div></div></div>");

    $templateCache.put("select2/select.tpl.html","<div class=\"ui-select-container select2 select2-container\" " +
        "ng-class=\"{\'select2-container-active select2-dropdown-open open\': $select.open, \'select2-container-disabled\': $select.disabled, \'select2-container-active\': $select.focus, \'select2-allowclear\': $select.allowClear && !$select.isEmpty()}\">" +
        "<div class=\"ui-select-match\"></div><div class=\"ui-select-dropdown select2-drop select2-with-searchbox select2-drop-active\" " +
        "ng-class=\"{\'select2-display-none\': !$select.open}\"><div ng-class=\" {\'ui-select-search-hidden\' : !$select.searchEnabled , \'select2-search\' : $select.searchEnabled , \'search-container\' : $select.searchEnabled }\">" +
        "<input type=\"text\" autocomplete=\"off\" aria-autocomplete=\"list\" autocorrect=\"false\" autocapitalize=\"off\" spellcheck=\"false\" role=\"combobox\" aria-expanded=\"true\" aria-owns=\"ui-select-choices-{{ $select.generatedId }}\" aria-label=\"{{ $select.baseTitle }}\" aria-activedescendant=\"ui-select-choices-row-{{ $select.generatedId }}-{{ $select.activeIndex }}\" class=\"ui-select-search select2-input\" ng-model=\"$select.search\"></div>" +
        "<div class=\"ui-select-choices\"></div></div></div>");


    $templateCache.put("selectize/choices.tpl.html","<div ng-show=\"$select.open\" class=\"ui-select-choices ui-select-dropdown selectize-dropdown single\"><div class=\"ui-select-choices-content selectize-dropdown-content\"><div class=\"ui-select-choices-group optgroup\" role=\"list\"><div ng-show=\"$select.isGrouped\" class=\"ui-select-choices-group-label optgroup-header\" ng-bind=\"$group.name\"></div><div role=\"listitem\" class=\"ui-select-choices-row\" ng-class=\"{active: $select.isActive(this), disabled: $select.isDisabled(this)}\"><div class=\"option ui-select-choices-row-inner\" data-selectable=\"\"></div></div></div></div></div>");
    $templateCache.put("selectize/match.tpl.html","<div ng-hide=\"($select.open || $select.isEmpty())\" class=\"ui-select-match\" ng-transclude=\"\"></div>");
    $templateCache.put("selectize/select.tpl.html","<div class=\"ui-select-container selectize-control single\" ng-class=\"{\'open\': $select.open}\"><div class=\"selectize-input\" ng-class=\"{\'focus\': $select.open, \'disabled\': $select.disabled, \'selectize-focus\' : $select.focus}\" ng-click=\"$select.open && !$select.searchEnabled ? $select.toggle($event) : $select.activate()\"><div class=\"ui-select-match\"></div><input type=\"text\" autocomplete=\"off\" tabindex=\"-1\" class=\"ui-select-search ui-select-toggle\" ng-click=\"$select.toggle($event)\" placeholder=\"{{$select.placeholder}}\" ng-model=\"$select.search\" ng-hide=\"!$select.searchEnabled || ($select.selected && !$select.open)\" ng-disabled=\"$select.disabled\" aria-label=\"{{ $select.baseTitle }}\"></div><div class=\"ui-select-choices\"></div></div>");}]);
(function () {
    'use strict';
    angular.module('xeUISelect', ['ui.select', 'ngSanitize'])
        .filter('propsFilter', function() {
            return function(items, props) {
                var out = [];

                if (angular.isArray(items)) {
                    items.forEach(function(item) {
                        var itemMatches = false;

                        if (typeof item === 'string') {
                            if (item.toLowerCase().indexOf(props.toLowerCase()) !== -1) {
                                itemMatches = true;
                            }
                        } else if (typeof item === 'object') {
                            var keys = Object.keys(props);
                            for (var i = 0; i < keys.length; i++) {
                                var prop = keys[i];
                                var text = props[prop].toLowerCase();
                                if (item[prop].toString().toLowerCase().indexOf(text) !== -1) {
                                    itemMatches = true;
                                    break;
                                }
                            }
                        }

                        if (itemMatches) {
                            out.push(item);
                        }
                    });
                } else {
                    // Let the output be the input untouched
                    out = items;
                }

                return out;
            };
        }).directive('reachInfinity', ['$parse', '$timeout', '$q', function($parse, $timeout, $q) {
            function height(elem) {
                if (!elem) {
                    return;
                }

                elem = elem[0] || elem;
                if (isNaN(elem.offsetHeight) && elem.document) {
                    return elem.document.documentElement.clientHeight;
                } else {
                    return elem.offsetHeight;
                }
            }

            function offsetTop(elem) {
                if (!elem || !elem[0] || !elem[0].getBoundingClientRect || elem.css('none')) {
                    return;
                }
                return elem[0].getBoundingClientRect().top + pageYOffset(elem);
            }

            function pageYOffset(elem) {
                if (!elem) {
                    return;
                }

                elem = elem[0] || elem;
                if (isNaN(window.pageYOffset) && elem.document) {
                    return elem.document.documentElement.scrollTop;
                } else {
                    return elem.ownerDocument.defaultView.pageYOffset;
                }
            }

            /**
             * Since scroll events can fire at a high rate, the event handler
             * shouldn't execute computationally expensive operations such as DOM modifications.
             * based on https://developer.mozilla.org/en-US/docs/Web/Events/scroll#requestAnimationFrame_.2B_customEvent
             *
             * @param type
             * @param name
             * @param (obj)
             * @returns {Function}
             */
            function throttle(type, name, obj) {
                var running = false;

                obj = obj || window;

                var func = function() {
                    if (running) {
                        return;
                    }

                    running = true;
                    requestAnimationFrame(function() {
                        obj.dispatchEvent(new CustomEvent(name));
                        running = false;
                    });
                };

                obj.addEventListener(type, func);

                return function() {
                    obj.removeEventListener(type, func);
                };
            }

            return {
                link: function(scope, elem, attrs) {
                    var container = elem,
                        scrollDistance = angular.isDefined(attrs.scrollDistance) ? parseInt(attrs.scrollDistance) : 0.3,
                        removeThrottle;

                    function tryToSetupInfinityScroll() {
                        var rows = elem.querySelectorAll('.ui-select-choices-row');

                        if (rows.length === 0) {
                            return false;
                        }

                        var lastChoice = angular.element(rows[rows.length - 1]);

                        container = angular.element(elem.querySelectorAll('.ui-select-choices-content'));

                        var handler = function() {
                            var containerBottom = height(container),
                                containerTopOffset = 0,
                                elementBottom;

                            rows = elem.querySelectorAll('.ui-select-choices-row');
                            lastChoice = angular.element(rows[rows.length - 1]);

                            if (offsetTop(container) !== void 0) {
                                containerTopOffset = offsetTop(container);
                            }

                            elementBottom = offsetTop(lastChoice) - containerTopOffset + height(lastChoice);

                            var remaining = elementBottom - containerBottom,
                                shouldScroll = (height(container) > 0) && (remaining <= height(container) * (scrollDistance + 1));

                            if (shouldScroll) {
                                $q.when($parse(attrs['reachInfinity'])(scope)).then(function() {
                                    setTimeout(function() {
                                        rows = elem.querySelectorAll('.ui-select-choices-row');
                                        lastChoice = angular.element(rows[rows.length - 1]);
                                    }, 0);
                                });
                            }
                        };

                        removeThrottle = throttle('scroll', 'optimizedScroll', container[0]);
                        container.on('optimizedScroll', handler);

                        scope.$on('$destroy', function() {
                            removeThrottle();
                            container.off('optimizedScroll', handler);
                        });

                        return true;
                    }

                    var unbindWatcher = scope.$watch('$select.open', function(newItems) {
                        if (!newItems) {
                            return;
                        }

                        $timeout(function() {
                            if (tryToSetupInfinityScroll()) {
                                unbindWatcher();
                            }
                        });
                    });
                }
            }
        }])
        .directive("xeKeyEnter", function() {
            return {
                restrict: 'A',
                scope: true,
                link: function (scope, element) {
                    element.on("keydown", function(event) {
                        if (event.which === 13) {
                            element.click();
                            event.preventDefault();
                            event.stopPropagation();
                        }
                    });
                }
            };
        });
}());
angular.module("external-resouces", ['pascalprecht.translate', 'ngSanitize']);
(function () {
    'use strict';
    angular.module("xe-ui-components")
        .constant("keyCodes", {
            A: 65,
            B: 66,
            C: 67,
            D: 68,
            E: 69,
            F: 70,
            G: 71,
            H: 72,
            I: 73,
            J: 74,
            K: 75,
            L: 76,
            M: 77,
            N: 78,
            O: 79,
            P: 80,
            Q: 81,
            R: 82,
            S: 83,
            T: 84,
            U: 85,
            V: 86,
            W: 87,
            X: 88,
            Y: 89,
            Z: 90,
            ZERO: 48,
            ONE: 49,
            TWO: 50,
            THREE: 51,
            FOUR: 52,
            FIVE: 53,
            SIX: 54,
            SEVEN: 55,
            EIGHT: 56,
            NINE: 57,
            NUMPAD_0: 96,
            NUMPAD_1: 97,
            NUMPAD_2: 98,
            NUMPAD_3: 99,
            NUMPAD_4: 100,
            NUMPAD_5: 101,
            NUMPAD_6: 102,
            NUMPAD_7: 103,
            NUMPAD_8: 104,
            NUMPAD_9: 105,
            NUMPAD_MULTIPLY: 106,
            NUMPAD_ADD: 107,
            NUMPAD_ENTER: 108,
            NUMPAD_SUBTRACT: 109,
            NUMPAD_DECIMAL: 110,
            NUMPAD_DIVIDE: 111,
            F1: 112,
            F2: 113,
            F3: 114,
            F4: 115,
            F5: 116,
            F6: 117,
            F7: 118,
            F8: 119,
            F9: 120,
            F10: 121,
            F11: 122,
            F12: 123,
            F13: 124,
            F14: 125,
            F15: 126,
            COLON: 186,
            EQUALS: 187,
            UNDERSCORE: 189,
            QUESTION_MARK: 191,
            TILDE: 192,
            OPEN_BRACKET: 219,
            BACKWARD_SLASH: 220,
            CLOSED_BRACKET: 221,
            QUOTES: 222,
            BACKSPACE: 8,
            TAB: 9,
            CLEAR: 12,
            ENTER: 13,
            RETURN: 13,
            SHIFT: 16,
            CONTROL: 17,
            ALT: 18,
            CAPS_LOCK: 20,
            ESC: 27,
            SPACEBAR: 32,
            SPACE: 32,
            PAGE_UP: 33,
            PAGE_DOWN: 34,
            END: 35,
            HOME: 36,
            LEFT: 37,
            UP: 38,
            RIGHT: 39,
            DOWN: 40,
            INSERT: 45,
            DELETE: 46,
            HELP: 47,
            NUM_LOCK: 144
        })
        .run(['$rootScope', '$window', 'getlocale', 'Language', '$translate', function ($rootScope, $window, getlocale, Language, $translate) {
            $rootScope.isMAC = ($window.navigator.userAgent.indexOf("Mac") !== -1);
            $rootScope.isRtl = Language.isRtl();
            $translate.use(getlocale.getUserLocale());
        }]);
}());
(function () {
    'use strict';
    angular.module('utils', ['ngResource'])
        .directive('numbersOnly', function () { // TODO: Move this to common utility file
            return {
                require: 'ngModel',
                link: function (scope, element, attrs, modelCtrl) {
                    modelCtrl.$parsers.push(function (inputValue) {
                        // It is necessary for when using ng-required on your input.
                        // In such cases, when a letter is typed first, this parser will be called
                        // again, and the 2nd time, the value will be undefined
                        if (inputValue === undefined) {
                            return '';
                        }
                        var transformedInput = inputValue.replace(/[^0-9]/g, '');
                        if (transformedInput !== inputValue) {
                            modelCtrl.$setViewValue(transformedInput);
                            modelCtrl.$render();
                        }
                        return transformedInput;
                    });
                }
            };
        })
        .directive("browserDetect", function () { // TODO: Move this to common utility file
            return {
                link: function (scope, element) {
                    var browser = angular || {},
                        ua = navigator.userAgent;
                    browser.ISFF = ua.indexOf('Firefox') !== -1;
                    browser.ISOPERA = ua.indexOf('Opera') !== -1;
                    browser.ISCHROME = ua.indexOf('Chrome') !== -1;
                    browser.ISSAFARI = ua.indexOf('Safari') !== -1 && !browser.ISCHROME;
                    browser.ISWEBKIT = ua.indexOf('WebKit') !== -1;

                    browser.ISIE = ua.indexOf('Trident') > 0 || navigator.userAgent.indexOf('MSIE') > 0;
                    browser.ISIE9 = ua.indexOf('MSIE 9') > 0;
                    browser.ISIE10 = ua.indexOf('MSIE 10') > 0;

                    browser.ISIE11UP = ua.indexOf('MSIE') === -1 && ua.indexOf('Trident') > 0;
                    browser.ISIE10UP = browser.ISIE10 || browser.ISIE11UP;
                    browser.ISIE9UP = browser.ISIE9 || browser.ISIE10UP;

                    if (browser.ISIE9) {
                        element.addClass("ie ie9");
                    } else if (browser.ISCHROME) {
                        element.addClass("modern chrome");
                    } else {
                        element.addClass("modern");
                    }
                }
            };
        })
        .directive('continuousScroll', ['$window', function ($window) {
            return {
                restrict : "A",
                scope : {
                    continuousScroll : "&",
                    scrollParent: '@'
                },
                link : function (scope, element) {
                    var scrollableElement, threshold = 500;

                    if (scope.scrollParent === 'body') {
                        scrollableElement = angular.element($window);
                    } else if (scope.scrollParent !== '') {
                        scrollableElement = angular.element('#' + scope.scrollParent);
                    } else {
                        scrollableElement = element;
                    }

                    /**
                     * The function is called when scrollbar position is close enough to the bottom
                     */
                    var onBottomTooClose = function() {
                        scope.continuousScroll();
                    };

                    var checkIfBottomTooClose = _.throttle(function(elm) {
                        var scrollHeight = (scope.scrollParent === 'body') ? angular.element(document).height() : elm[0].scrollHeight;

                        // Check if we're too close to the bottom
                        if((scrollHeight - elm.scrollTop() - elm.height()) <= threshold) {
                            onBottomTooClose();
                        }
                    }, 500);

                    /**
                     * maintain scroll event
                     */
                    scrollableElement.bind("scroll", function () {
                        checkIfBottomTooClose(scrollableElement);
                    });

                    /**
                     * Destructor
                     */
                    scope.$on("$destroy", function() {
                        // Remove jquery events manually because angular doesn't know about them
                        scrollableElement.off('scroll');
                    });
                }
            };
        }])
        .directive("xeKeypress", ['keyCodes', function (keyCodes) {
            var keyCodeMatch = function (keyPress, codes) {
                var keys = codes.split(","),
                    index;

                for (index = 0; index < keys.length; index = index + 1) {
                    if (keyPress === keyCodes[keys[index]]) {
                        return true;
                    }
                }
                return false;
            };

            return {
                restrict : 'A',
                link : function (scope, element, attrs) {
                    element.bind("keypress", function (event) {
                        var keyCode = event.which || event.keyCode;

                        if (keyCodeMatch(keyCode, attrs.codes)) {
                            scope.$apply(function () {
                                scope.$eval(attrs.xeKeypress, {$event: event});
                            });
                        }
                    });
                }
            };
        }])

        /* Factory Methods */
        .factory("accessibility", ['$rootScope', 'keyCodes', '$document', function ($rootScope, keyCodes, $document) {
            var accessibility = {
                provideAccessibilityForTable: provideAccessibilityForTable
            }, globalKeydownHandler = function (event) {
                var targetToClick = checkKeyTarget(event, event.data.table.find('[global-key][shortcut-key]'));

                if (targetToClick && targetToClick.length) {
                    scrollToTarget(targetToClick, event.data.parent);
                    targetToClick.select().focus().click();
                    event.preventDefault();
                }
            }, scrollToTarget = function (element, scrollableParent) {
                if (!scrollableParent.prop('nodeName')) {
                    scrollableParent = angular.element('#content');
                }

                if (scrollableParent.length && element) {
                    scrollableParent.animate({
                        scrollTop: element.offset().top - scrollableParent.offset().top + scrollableParent.scrollTop()
                    });
                }
            };

            function provideAccessibilityForTable(component, scrollableParent) {
                applyAccessibilityForTable(component);
                applyKeyboardNavForTable(component, scrollableParent);
            }

            function applyAccessibilityForTable(table) {
                /* Tabindex of table rows and all actionable elements present inside table body are set through
                    tab-index directive in dataTable.html as they can be generated dynamically. */

                // Shortcut key bindings
                var searchShortcutKey;
                if ($rootScope.isMAC) {
                    searchShortcutKey = 'CTRL+META+Y';
                } else {
                    searchShortcutKey = 'ALT+Y';
                }

                table.find('input.search:first').attr('shortcut-key', searchShortcutKey).attr('global-key', true);
            }

            function applyKeyboardNavForTable(table, scrollableParent) {
                var tempTargetIndex; // Variable to remember previous column position,
                                     // used while traversing across columns inside rows

                $document.off('keydown', globalKeydownHandler).on('keydown', {"table": table, "parent": scrollableParent}, globalKeydownHandler);

                table.on('keydown', function (event) {
                    var targetToFocus,        // Target to focus itself
                        targetToFocusChildren,// Target to focus itself/children based on the presence of actionable children
                        targetToClick,        // Target to be clicked
                        element = angular.element(event.target),
                        elementIndex,
                        isFromColumnFilter = !!element.closest('.column-filter-container').length,
                        isFromSearch = element.is('input.search'),
                        isFromHeader = !!element.closest('.thead').length,
                        isFromBody = !!element.closest('.tbody').length,
                        isEmptyBody = table.find('.tbody tbody').is(':empty'),
                        isFromFooter = !!element.closest('.tfoot').length;

                    if (element.is("[xe-keypress]")) {
                        return;
                    }

                    switch (event.which) {
                        case keyCodes.ENTER:
                            if (isFromSearch) {
                                targetToFocusChildren = table.find('.tbody tbody tr:first-child');
                                unfocusTableBody(table);
                            } else if (isFromBody || isFromHeader) {
                                targetToClick = element;
                            }
                            break;
                        case keyCodes.SPACEBAR:
                            if (isFromHeader) {
                                targetToClick = element;
                            }else{
                                return true;
                            }
                            break;
                        default:
                            targetToFocusChildren = checkKeyTarget(event, table.find(':not([global-key])[shortcut-key]'));
                            scrollToTarget(targetToFocusChildren, scrollableParent);
                    }

                    if (targetToFocusChildren && targetToFocusChildren.length) {
                        focusElement(targetToFocusChildren, elementIndex);
                        event.preventDefault();
                    } else if (targetToFocus && targetToFocus.length) {
                        targetToFocus.select().focus();
                        event.preventDefault();
                    } else if (targetToClick && targetToClick.length) {
                        if (targetToClick.is('a')) {
                            targetToClick = targetToClick.get(0);
                            targetToClick.click();
                        } else {
                            targetToClick.select().focus().click();
                        }
                        event.preventDefault();
                    }
                });
            }

            function getFirstActionableItem (element) {
                return element.find("a, :input, [tabindex=0], .xe-checkbox").first().not(':hidden, .disabled, :disabled, [readonly]');
            }

            function focusElement (element, targetIndex) {
                var actionableElement;

                element.select().focus();

                if (element.is('tr')) {
                    element.addClass('active-row');
                }

                if (targetIndex) {
                    actionableElement = getFirstActionableItem(element.children().eq(targetIndex));
                } else {
                    actionableElement = getFirstActionableItem(element);
                }

                if(actionableElement.length) {
                    focusActionableElement(actionableElement);
                }
            }

            function focusActionableElement (element) {
                element.select().focus()
                    .on('focusout', function(event) {
                        var element = angular.element(event.target);

                        element.closest('th').removeClass('focus-ring');
                        element.closest('td').removeClass('active focus-ring');
                        element.off('focusout');
                    });
                element.closest('tr th').addClass('focus-ring');
                element.closest('tr td').addClass('active focus-ring');
            }

            function prev (element, repeat) {
                var prevElement = element.prev();
                if (!prevElement.get(0) && repeat) {
                    prevElement = element.siblings(':last');
                }

                return prevElement;
            }

            function next (element, repeat) {
                var nextElement = element.next();
                if (!nextElement.get(0) &&  repeat) {
                    nextElement = element.siblings(':first');
                }

                return nextElement;
            }

            function prevActionable (element, parentTag, rootTag, repeat) {
                if (parentTag && !rootTag) {
                    element = element.closest(parentTag);
                }

                var siblings = getActionableSiblings(element, parentTag, rootTag),
                    prevActionableElement = angular.element(siblings[siblings.index(element) - 1]);

                if (!prevActionableElement.length && repeat) {
                    prevActionableElement = siblings.eq(-1);
                }

                return prevActionableElement;
            }

            function nextActionable (element, parentTag, rootTag, repeat) {
                if (parentTag && !rootTag) {
                    element = element.closest(parentTag);
                }

                var siblings = getActionableSiblings(element, parentTag, rootTag),
                    nextActionableElement = angular.element(siblings[siblings.index(element) + 1]);

                if (!nextActionableElement.length && repeat) {
                    nextActionableElement = siblings.eq(0);
                }

                return nextActionableElement;
            }

            function getActionableSiblings (element, parentTag, rootTag) {
                var siblings;

                if (parentTag && element.is('th')) {
                    siblings = element.siblings('.sortable').add(element);
                    siblings = siblings.add(element.siblings(':not(.sortable)').has("a:not(:hidden), :input:enabled:not([readonly]), [tabindex=0]").not(':hidden, .disabled'));
                } else if (parentTag && rootTag) {
                    siblings = element.closest(rootTag).find("a, :input:enabled:not([readonly]), [tabindex=0]").not(':hidden, .disabled');
                } else if (parentTag) {
                    siblings = element.siblings().add(element).has("a:not(:hidden), :input:enabled:not([readonly]), [tabindex=0], .xe-checkbox:not(.disabled)").not(':hidden, .disabled');
                } else {
                    siblings = element.siblings("a, :input:enabled:not([readonly]), [tabindex=0]").not(':hidden, .disabled').add(element);
                }

                return siblings;
            }

            function unfocusTableBody (table) {
                table.find('.active-row').removeClass('active-row');
                table.find('.active').removeClass('active');
            }

            function checkKeyTarget (event, targetElements) {
                if (angular.isUndefined(targetElements) || !targetElements.length) { return; }

                var target;

                for (var i = 0; i < targetElements.length; i++) {
                    var comboKeys = ['ctrl', 'alt', 'shift', 'meta'],
                        keyStrokes = targetElements.eq(i).attr('shortcut-key').split('+');

                    if (keyStrokes.length === 1) {
                        if (keyCodes[keyStrokes[0]] === event.which) {
                            target = targetElements.eq(i);
                            break;
                        }
                    } else if (keyStrokes.length === 2 && comboKeys.indexOf(keyStrokes[0].toLowerCase()) !== -1) {
                        if (event[keyStrokes[0].toLowerCase() + 'Key'] && keyCodes[keyStrokes[1]] === event.which) {
                            target = targetElements.eq(i);
                            break;
                        }
                    } else if (keyStrokes.length === 3 && comboKeys.indexOf(keyStrokes[0].toLowerCase()) !== -1 && comboKeys.indexOf(keyStrokes[1].toLowerCase()) !== -1) {
                        if (event[keyStrokes[0].toLowerCase() + 'Key'] && event[keyStrokes[1].toLowerCase() + 'Key'] && keyCodes[keyStrokes[2]] === event.which) {
                            target = targetElements.eq(i);
                            break;
                        }
                    }
                }

                return target;
            }

            function setTabindex (element, tabindex, replace) {
                element = angular.element(element);

                if (!element.attr('tabindex') || replace) {
                    element.attr('tabindex', tabindex);
                }
            }

            return accessibility;
        }])
        .factory("getlocale", [ '$translate', function ($translate) {
            return {
                getUserLocale : function () {
                    var locale = jQuery('meta[name=userLocale]').attr("content");
                    if (!locale) {
                        locale = $translate.use();
                    }
                    return locale;
                }
            };
        }])
        .factory("Language", ['$translate' , function($translate) {
            var isRtl = function() {
                var dir = jQuery('meta[name=dir]').attr("content");

                if (!dir) {
                    //add the languages you support here. ar stands for arabic
                    var rtlLanguages = ['ar'];

                    var languageKey = $translate.proposedLanguage() || $translate.use();
                    for (var i = 0; i < rtlLanguages.length; i += 1) {
                        // You may need to change this logic depending on your supported languages (possible languageKey values)
                        // This code will match both "ar", "ar-XXX" locales. It won't match any other languages as we only support en, es, ar.
                        if (languageKey.indexOf(rtlLanguages[i]) > -1)
                            return true;
                    }
                    return false;
                } else if (dir === 'rtl') {
                    return true;
                }
                return false;
            };

            return {
                isRtl: isRtl
            };
        }])
        .filter('xei18n', ['$filter', function ($filter) {
            return function (key, arg1) {
                var value = "";
                if (angular.isDefined(key) && angular.isDefined(jQuery.i18n)) {
                    value = jQuery.i18n.prop(key, [arg1]);
                }

                if (!value || value.indexOf(key) >= 0) {
                    value = $filter('translate')(key, {arg1: arg1});
                }
                return value;
            };
        }]);
}());
//TODO : Presently it works for table grid componets. Need to work on this component to make more generic.
(function () {
    'use strict';
    angular.module('columnFilter', []).directive('xeColumnFilter', ['$document', '$timeout', 'keyCodes', function ($document, $timeout, keyCodes) {
            return {
                restrict : 'E',
                scope : {
                    header: '='

                },
                replace : true,
                templateUrl : 'templates/column-filter.html',
                controller : ['$scope', function ($scope) {
                    $scope.selectAll = {visible: true};
                    $scope.hideColumnSettingMenu = true;
                    $scope.hideUnhideColumn = function (heading, e) {
                        if (!heading.options.visible) {
                            $scope.selectAll.visible = false;
                        } else {
                            var invisibleColumnCount = $scope.header.filter(function (heading) {
                                    return (heading.options.visible === false && heading.options.columnShowHide !== false);
                                }).length;

                            if (!invisibleColumnCount) {
                                $scope.selectAll.visible = true;
                            }
                        }
                    };

                    $scope.onSelectAll = function (header, e) {
                        $scope.selectAll.visible = true;

                        angular.forEach(header, function (heading) {
                            if (heading.options.visible === false && heading.options.columnShowHide !== false) {
                                heading.options.visible = true;
                            }
                        });
                    };
                }],
                link: function (scope, element, attrs) {
                    var postMenuClose = function () {
                        $document.off('click');

                        $timeout(function () {
                            element.find('button').attr('tabindex', 0);
                        }, 10);
                    };

                    element.on('close', function (event, actualTarget) {
                        var isClickedFromPopup = element.find(actualTarget).length > 0;
                        if (isClickedFromPopup) {
                            return;
                        }

                        scope.hideColumnSettingMenu = true;
                        postMenuClose();

                        if (angular.isUndefined(actualTarget) || angular.element(actualTarget).is(':not(:focus)')) {
                            element.find('.column-filter-button').focus();
                        }

                        scope.$apply();
                    });

                    scope.bindClickEvent  = function (event) {
                        scope.hideColumnSettingMenu = !scope.hideColumnSettingMenu;

                        // On open dropdown menu
                        if (!scope.hideColumnSettingMenu) {
                            element.find('button').attr('tabindex', -1);

                            $document.on('click', function (event) {
                                element.trigger('close', event.target);
                            });

                            // Focusing 1st item on open of dropdown menu
                            $timeout(function () {
                                element.find('ul.column-setting-menu li:first').find('div').focus();
                            }, 10);
                        } else { // On close dropdown menu
                            postMenuClose();
                        }
                    };

                    $timeout(function () {
                        element.find('ul.column-setting-menu li').bind('keydown', function (event) {
                            if (event.keyCode === keyCodes.ESC) {
                                scope.hideColumnSettingMenu = true;
                                postMenuClose();
                                element.find('.column-filter-button').focus();
                                event.preventDefault();
                                event.stopPropagation();
                            }

                            if (event.keyCode === keyCodes.DOWN || event.keyCode === keyCodes.TAB) {
                                // TO GET NEXT ELEMENT
                                if($(event.currentTarget).next().length >0 )
                                {
                                    var next= $(event.currentTarget).next();
                                    $(next).find('div').focus();
                                }
                                else
                                {
                                    element.find('ul.column-setting-menu li:first').find('div').focus();
                                }
                                event.preventDefault();
                                event.stopPropagation();
                            }

                            if (event.keyCode === keyCodes.UP || (event.shiftKey && event.keyCode === keyCodes.TAB )) {
                                // TO GET NEXT ELEMENT
                                if($(event.currentTarget).prev().length > 0 )
                                {
                                    var previous= $(event.currentTarget).prev();
                                    $(previous).find('div').focus();
                                }
                                else
                                {
                                    element.find('ul.column-setting-menu li:last').find('div').focus();
                                }
                                event.preventDefault();
                                event.stopPropagation();
                            }

                        });
                    },10);
                }
            };
        }]);
}());
angular.module('pagination', [])
.directive('xePagination', ["$http", "$q", "$filter", function($http, $q, $filter) {
    var fetch = function(query) {
        var deferred = $q.defer();          
        
        url = query.endPoint + "?"
            + "searchString=" + (query.searchString ? query.searchString : "")
            + "&sortColumnName=" + (query.sortColumnName ? query.sortColumnName : "")
            + "&ascending=" + query.ascending
            + "&offset=" + (query.offset ? query.offset : "")
            + "&max=" + (query.max ? query.max : "");
        
        $http.get(url).then(function onSuccess(data){
                deferred.resolve(data);
            }).catch(function onError(data) {
            deferred.reject(data);
        });
        return deferred.promise;
    };
    var reassignRange = function(pageNumber, offset) {
        var pageEnd = offset * pageNumber;
        return {
            max: pageEnd,
            offset: pageEnd === 0 ? 0 :(pageEnd - offset)
        };
    };

    return {
        restrict: 'EA',
        replace: true,
        require: "?^xeTableGrid",
        scope: {
            model: "=",         
            endPoint: "=?",
            paginationConfig: "=?",
            resultsFound: "=",
            searchString: "=",
            fetch: "&?",
            postFetch: "&",
            totalValue: "=?"
        },
        templateUrl: "templates/pagination.html",
        controller: ['$scope', '$attrs', "$timeout", function($scope, $attrs, $timeout) {
            var oldPageValue = 1;   
            
            $scope.firstPrev = false;
            $scope.nextLast = false;
            $scope.onPage = 1;

            if (angular.isUndefined($scope.paginationConfig) || (angular.isObject($scope.paginationConfig) && !$scope.paginationConfig.pageLengths)) {
                $scope.pageOffsets = [10, 20, 50, 100];
            } else {
                $scope.pageOffsets = $scope.paginationConfig.pageLengths;
            }

            if (angular.isObject($scope.paginationConfig) && $scope.paginationConfig.offset) {
                $scope.offset = $scope.paginationConfig.offset;
            } else {
                $scope.offset = $scope.pageOffsets[0];
            }

            if ($scope.pageOffsets.indexOf($scope.offset) < 0) {
                $scope.pageOffsets.push($scope.offset);
                $scope.pageOffsets.sort(function(a, b){ return a-b; });
            }
            
            $scope.offsetChanged = function(doFetch) {                              
                calculateNumberOfPages();
                disableButtons($scope.onPage, $scope.numberOfPages);
                if (doFetch) {
                    $scope.fetchData($scope.onPage, $scope.offset);
                }
            };      

            $scope.first = function() {
                if ($scope.firstPrev) {
                    return;
                }

                setPageValue(1);
                
                $scope.fetchData($scope.onPage, $scope.offset);
                disableButtons($scope.onPage, $scope.numberOfPages);
                focusPageInput();
            };

            $scope.prev = function(append) {
                if ($scope.firstPrev) {
                    return;
                }

                var onPage = parseInt($scope.onPage);
                onPage--;
                setPageValue(onPage);
                
                $scope.fetchData($scope.onPage, $scope.offset, append);
                disableButtons($scope.onPage, $scope.numberOfPages);
                if ($scope.firstPrev) {
                    focusPageInput();
                }
            };

            $scope.next = function(append) {    
                if ($scope.nextLast) {
                    return;
                }   

                var onPage = parseInt($scope.onPage);
                onPage++;
                setPageValue(onPage);
                
                $scope.fetchData($scope.onPage, $scope.offset, append);
                disableButtons($scope.onPage, $scope.numberOfPages);
                if ($scope.nextLast) {
                    focusPageInput();
                }
            };

            $scope.last = function() {
                if ($scope.nextLast) {
                    return;
                }

                setPageValue($scope.numberOfPages);
                
                $scope.fetchData($scope.onPage, $scope.offset);
                disableButtons($scope.onPage, $scope.numberOfPages);
                focusPageInput();
            };

            $scope.paggeNumberChange = function() {
                if ($scope.onPage) {
                    focusPageInput();
                }

                if (($scope.onPage !== null) && (oldPageValue != $scope.onPage)) {
                    if (angular.isUndefined($scope.onPage) || ($scope.onPage <= 0) || ($scope.onPage > $scope.numberOfPages)){
                        $scope.onPage = oldPageValue;
                    } else {
                        setPageValue($scope.onPage);
                        $scope.fetchData($scope.onPage, $scope.offset);
                        disableButtons($scope.onPage, $scope.numberOfPages);
                    }
                }
            };

            $scope.focusOut = function(event) {
                angular.element(event.target).val(oldPageValue);
            };

            $scope.$watch("resultsFound", function(newValue, oldValue) {              
                $timeout(function() {
                    if (newValue === 0) {
                        setPageValue(0);
                    } else if ($scope.onPage === 0) {
                        setPageValue(1);
                    }

                    calculateNumberOfPages();
                    disableButtons($scope.onPage, $scope.numberOfPages);
                });             
            });

            // Private functions
            var setPageValue = function(onPage) {
                $scope.onPage = onPage;
                oldPageValue = onPage;
                calculateNumberOfPages();
                disableButtons($scope.onPage, $scope.numberOfPages);
            };

            // Private functions
            var focusPageInput = function() {
                $timeout(function() {
                    angular.element('#pageInput').select().focus();
                }, 50);
            };

            var calculateNumberOfPages = function() {
                $scope.numberOfPages = Math.ceil($scope.resultsFound / $scope.offset);
                $scope.numberOfPages = $scope.numberOfPages < 1 ? 0 : $scope.numberOfPages;             

                if ($scope.onPage > $scope.numberOfPages) {
                    setPageValue($scope.numberOfPages);              
                }
            };

            var disableButtons = function(pageNumber, numberOfPages) {              
                pageNumber = parseInt(pageNumber);
                numberOfPages = parseInt(numberOfPages);
                var reminder = numberOfPages / pageNumber;

                if (numberOfPages === 1) { // Only one page
                    $scope.firstPrev = true;
                    $scope.nextLast = true;
                } else if(reminder === 1) { // On last page
                    $scope.nextLast = true;
                    $scope.firstPrev = false;
                } else if(reminder === numberOfPages) { // On first page
                    $scope.firstPrev = true;
                    $scope.nextLast = false;
                } else if(pageNumber <= 0 || (pageNumber > numberOfPages)) { // Out of range
                    $scope.firstPrev = true;
                    $scope.nextLast = true;                 
                } else { // Between first and last page
                    $scope.nextLast = false;
                    $scope.firstPrev = false;
                }               
            };

            /*
                boolean append variable is used to check if we need append to the result set or not.
                This is because on tablet we will not show the pagination but it components can still use pagination 
                code to make the continuous scroll happen.
            */
            $scope.fetchData = function(onPage, offset, append) {
                if (!angular.isNumber(onPage)) {            
                    onPage = parseInt(onPage);
                }

                setPageValue(onPage);

                var range = reassignRange(onPage, offset),
                    query = {                       
                        searchString: $scope.searchString,
                        sortColumnName: $scope.sortColumnName,
                        ascending: $scope.ascending,
                        offset: range.offset,
                        max: range.max,
                        endPoint: $scope.endPoint,
                        onPage: onPage,
                        pageSize:offset             
                    };

                // Show Load indicator
                $scope.loading(true);

                if (angular.isDefined($attrs.fetch)) {
                    // Call clients fetch method
                    $scope.fetch({query: query}).then
                    (function onSuccess(data){
                        $scope.postFetch({response: data, oldResult: $scope.model});
                        $scope.model = append ? $scope.model.concat(data.result) : data.result;
                        $scope.resultsFound = data.length;
                        if(angular.isDefined(data.totals) && Object.keys(data.totals).length !== 0){
                            $scope.totalValue = data.totals;
                        }

                        $scope.loading(false);
                        $scope.addExtensionColumns($scope.header, data);
                    }).catch(function (data) {
                        if (data) console.error(data);
                        $scope.postFetch({response: data, oldResult: $scope.model});
                        $scope.loading(false);
                    });
                } else if (query.endPoint) {
                    fetch(query).then(function onSuccess(data){
                            $scope.postFetch({response: data, oldResult: $scope.model});
                            $scope.model = append ? $scope.model.concat(data.result) : data.result;
                            $scope.resultsFound = data.length;
                            if(angular.isDefined(data.totals) && Object.keys(data.totals).length !== 0){
                                $scope.totalValue = data.totals;
                            }

                            $scope.loading(false);
                            $scope.addExtensionColumns($scope.header, data);
                        }).catch(function (data) {
                            if (data) console.error(data);
                            $scope.postFetch({response: data, oldResult: $scope.model});
                            $scope.loading(false);
                        });
                } else if (!angular.isDefined($attrs.fetch) && !$scope.endPoint && $scope.modelClone) {
                    // Direct Model pagination
                    var displayModel, modelLength;
                    if (query.searchString != null && query.searchString !== '') {
                        displayModel = _.filter($scope.modelClone, function (obj) {
                            return _.values(_.omit(obj, '$$hashKey')).some(function (el) {
                                var elValueString = ((_.isString(el) || _.isNumber(el)) ? el.toString() : (_.isObject(el) ? Object.values(el).join(' ') : ''));
                                return ((el != null && elValueString !== '') ? (elValueString.toUpperCase().indexOf(query.searchString.toUpperCase()) > -1) : false);
                            });
                        });
                        modelLength = displayModel.length;
                        displayModel = displayModel.slice(query.offset, query.max);
                    } else {
                        displayModel = $scope.modelClone.slice(query.offset, query.max);
                        modelLength = $scope.modelClone.length;
                    }
                    if (!append) {
                        // reset the array while keeping its reference
                        $scope.model.length = 0;
                    }
                    // fill the first array with items from the second
                    [].push.apply($scope.model, displayModel);
                    $scope.resultsFound = modelLength;

                    $scope.loading(false);
                }
            };
            
            $scope.offsetChanged(false);            
        }],
        link: function(scope, elem, attributes, parentController) {
            // Assigning values from parentCOntroller to be used later in paginations controller.
            scope.loading = parentController.loadingDataIndicator;
            scope.emptyTableMsg = parentController.emptyTableMsg;
            scope.sortColumnName = parentController.sortColumnName;
            scope.ascending = parentController.ascending;
            scope.header =  parentController.header;
            scope.addExtensionColumns = parentController.addExtensionColumns;

            if (!angular.isDefined(attributes.fetch) && !scope.endPoint) {
                scope.modelClone = angular.copy(scope.model);
            }

            if (!scope.emptyTableMsg) {
                scope.fetchData(1, scope.offset);
            }

            // If continuous scrolling is true then we can to hide paginations across devices and desktop.
            if (parentController.hidePaginationIfContinuousScroll) {
                parentController.hidePaginationIfContinuousScroll();
            }

            // Injecting next(), previous() and sort() function to parent controller so that it can invoke them later as per the need.
            // For example for continuous scrolling.
            parentController.next = function(append) {
                scope.next(append);
            };

            parentController.previous = function(append) {
                scope.prev(append);
            };

            parentController.fetchData = function(onPage, offset) {
                onPage = angular.isDefined(onPage) ? onPage : scope.onPage;
                offset = angular.isDefined(offset) ? offset : scope.offset;

                scope.fetchData(onPage, offset);
            };

            parentController.refreshContent = function (onPage, offset) {
                scope.searchString = '';
                if (!angular.isDefined(attributes.fetch) && !scope.endPoint) {
                    scope.modelClone = angular.copy(scope.model);
                }
                parentController.fetchData(onPage, offset);
            }

            parentController.sort = function(sortColumnName, order, continuousScrollEnabled) {
                if (!angular.isDefined(attributes.fetch) && !scope.endPoint && scope.modelClone) {
                    // Direct Model sort
                    scope.modelClone = $filter('orderBy')(scope.modelClone, sortColumnName, !order);
                }
                scope.sortColumnName = sortColumnName;
                scope.ascending = order;
                scope.fetchData(continuousScrollEnabled ? 1 : scope.onPage, scope.offset);
            };
        }
    };
}]);
(function () {
    'use strict';
    angular.module('search', []).directive('xeSearch', ['keyCodes', '$filter', function (keyCodes, $filter) {
        return {
            restrict: 'E',
            scope: {
                value: '=',
                placeholder: '@',
                onChange: '&',
                onFocus : '&',
                onBlur : '&',
                onKeydown : '&',
                searchConfig: '=',
                loadingData: '='
            },
            replace: true,
            templateUrl: 'templates/search.html',
            link: function (scope, element, attrs) {
                var minCharactersToStartSearch = 0,
                    maxlength = Infinity,
                    onDataChange,
                    transformedInput;

                if (angular.isObject(scope.searchConfig)) {
                    if (angular.isDefined(scope.searchConfig.minimumCharacters)) {
                        minCharactersToStartSearch = scope.searchConfig.minimumCharacters;
                    }
                    if (angular.isDefined(scope.searchConfig.maxlength)) {
                        maxlength = scope.searchConfig.maxlength;
                    }
                    // Blank search string if not specified initially
                    if (angular.isUndefined(scope.searchConfig.searchString)) {
                        scope.searchConfig.searchString = '';
                    }
                    // Default element id if not specified
                    if (angular.isUndefined(scope.searchConfig.id)) {
                        scope.searchConfig.id = 'search';
                    }
                    if (minCharactersToStartSearch >= maxlength) {
                        console.error('Wrong searchConfig: maxlength value should be more than the minimumCharacters value inside searchConfig to enable searching.');
                    }
                    scope.ariaLabel = $filter('xei18n')('search.aria.label');
                    if (angular.isDefined(scope.searchConfig.ariaLabel)) {
                        scope.ariaLabel = scope.ariaLabel + ' ' + scope.searchConfig.ariaLabel;
                    }
                }

                // Debouncing search call as per provided value or default is 0ms(immediate)
                /*jslint nomen: true*/
                onDataChange = _.debounce(function (data) {
                    if (angular.isUndefined(data)) { return; }

                    scope.onChange({query: data});
                }, scope.searchConfig.delay || 0);
                /*jslint nomen: false*/

                scope.$watch("searchConfig.searchString", function (newValue, oldValue) {
                    if (angular.isDefined(newValue)) {
                        var searchString = newValue.toString();

                        if (searchString.length > maxlength) {
                            searchString = searchString.substring(0, maxlength);
                            scope.searchConfig.searchString = searchString;
                        }

                        if (angular.isDefined(oldValue)) {
                            oldValue = oldValue.toString();
                        } else {
                            oldValue = '';
                        }

                        if (searchString !== oldValue) {
                            if (searchString.length > maxlength) {
                                searchString = searchString.substring(0, maxlength);
                                scope.searchConfig.searchString = searchString;
                            }

                            if (searchString.length >= minCharactersToStartSearch) {
                                onDataChange(searchString);
                            } else if ((searchString.length < oldValue.length) && (oldValue.length >= minCharactersToStartSearch) && (searchString.length < minCharactersToStartSearch)) {
                                onDataChange('');
                            } else if(searchString === "" && searchString.length === 0 && oldValue.length === 1){
                                onDataChange('');
                            }
                        }
                    }
                });

                scope.searchKeypress = function (data, id, e) {
                    if (!maxlength) {
                        e.preventDefault();
                    } else if (angular.isDefined(data) && data.length >= maxlength) {
                        e.preventDefault();
                        transformedInput = data.substring(0, maxlength);
                        scope.form[id].$setViewValue(transformedInput);
                        scope.form[id].$render();
                    }
                };

                scope.searchKeydown = function (data, id, e) {
                    if (e && e.which === keyCodes.ESC) {
                        e.preventDefault();
                        scope.form[id].$rollbackViewValue();
                        scope.form[id].$render();
                        scope.value = '';
                    } else if (e && e.which === keyCodes.ENTER) {
                        if (scope.loadingData || !scope.searchConfig.searchString.length || scope.searchConfig.searchString.length < minCharactersToStartSearch) {
                            e.preventDefault();
                            e.stopPropagation();
                        }
                    }

                    scope.onKeydown({$event: e});
                };
            }
        };
    }]);
}());
/*****************************************************
 *  © 2018 Ellucian Company L.P. and its affiliates. *
 *****************************************************/
; // safe for iife
(function() {


    angular.module('xebarmodule', [])
        .factory('d3', ['$window', '$log', function ($window, $log) {
            if (!$window.d3) {
                $log.error('D3 must be present');
            }
            return $window.d3;
        }])
        .directive('xeBarModule', ['d3', 'Language','$filter','getlocale', function (d3, Language,$filter,getlocale){

            return {
                restrict: 'E',
                scope: {
                    data: '=xebardata',
                    ngclickfunction: "&",
                    barChartWidth: "@xeChartWidth",
                    barChartHeight: "@xeChartHeight",
                    barWidth: "@xeBarWidth",
                    gapWidth:"@xeGapWidth",
                    xTitleValue: "@xeXaxisTitle",
                    yTitleValue: "@xeYaxisTitle",
                    yAxisFormat:"@xeYaxisFormat"
                },
                template: '<div><div class="xe-bar-tooltip"></div></div>',
                link: function(scope, element) {
                    /* svg variables */
                    var xAxis,yAxis,svg,x,y,svgChild,xSvgChild,ySvgChild,allBars,bar,zoom,chartArea,yTitle;

                    /* Input variables */
                    var chartWidth,chartHeight,barWidth,gapWidth,xTitleValue,yTitleValue,yAxisFormat;

                    /* Chart variables */
                    var divTooltip,gapFactor,numberOfBars,width,height,chartData;



                    var margin = {
                        top: 20,
                        right: 50,
                        bottom: 50,
                        left: 40
                    };
                    var color = d3.scale.ordinal()
                        .range(["#9191E1", "#90C9FF", "#6DD6BC", "#BBE19B", "#F4DB76", "#FFB581", "#D389C6", "#B2B3B7","#DD5C5F"]);

                    /* Bar chart variables */
                    var indexG=-1;

                    /* Multi bar chart variables */
                    var isMultipleBarChart = false,numberOfSG=0,indexSG=0,multipleBarChartMetaData;


                    element.addClass("xe-bar-chart");

                    function detectIE() {
                        ua = window.navigator.userAgent;
                        msie = ua.indexOf('MSIE ');
                        trident = ua.indexOf('Trident/');
                        if (msie > 0 || trident > 0) {
                            return true;
                        }
                        return false;
                    }

                    if(detectIE()){
                        /* Code to support classList in IE */
                        if (!Object.getOwnPropertyDescriptor(Element.prototype,'classList')){
                            if (HTMLElement&&Object.getOwnPropertyDescriptor(HTMLElement.prototype,'classList')){
                                Object.defineProperty(Element.prototype,'classList',Object.getOwnPropertyDescriptor(HTMLElement.prototype,'classList'));
                            }
                        }
                    }
                    function localizedNumber(input){
                        if(Language.isRtl()) {
                            return input;
                        }
                        else {
                            return input.toLocaleString(getlocale.getUserLocale().replace('_', '-'));
                        }
                    }
                    function wrap(text, width) {
                        width = 2* width;
                        text.each(function() {
                            var text = d3.select(this),
                                words = text.text().split(/\s+/).reverse(),
                                word,
                                line = [],
                                lineNumber = 0,
                                lineHeight = 1.1, // ems
                                y = text.attr("y"),
                                dy = parseFloat(text.attr("dy")),
                                tspan = text.text("").append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");
                            while (word = words.pop()) {
                                line.push(word);
                                tspan.text(line.join(" "));
                                if ((tspan.node().getComputedTextLength()>0? tspan.node().getComputedTextLength():(tspan.text().length*5)) > width) {
                                    if(line.length>1)
                                    {
                                        line.pop();
                                        tspan.text(line.join(" "));
                                        line = [word];
                                        tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text(word);
                                    }
                                    else
                                    {
                                        line=[];
                                        tspan = text.append("tspan").attr("x", 0).attr("y", y).attr("dy", ++lineNumber * lineHeight + dy + "em").text("");
                                    }

                                }
                            }
                        });
                    }
                    function initializeVariables(){
                        if(scope.barWidth == undefined) {
                            barWidth = 44;
                        }
                        else {
                            barWidth = +scope.barWidth;
                        }
                        if(scope.gapWidth == undefined) {
                            gapWidth= 55;
                        }
                        else {
                            gapWidth = +scope.gapWidth;
                        }
                        if (scope.barChartWidth == undefined) {
                            chartWidth = 400;
                        }
                        else {
                            chartWidth = +scope.barChartWidth;
                        }
                        if (scope.barChartHeight == undefined) {
                            chartHeight = 450;
                        }
                        else {
                            chartHeight = +scope.barChartHeight;
                        }
                        if(scope.xTitleValue==undefined) {
                            xTitleValue ="";
                        }
                        else {
                            xTitleValue = scope.xTitleValue;
                        }
                        if(scope.yTitleValue==undefined) {
                            yTitleValue = "";
                        }
                        else {
                            yTitleValue = scope.yTitleValue;
                        }
                        if(scope.yAxisFormat==undefined) {
                            yAxisFormat = "d";
                        }
                        else {
                            yAxisFormat = scope.yAxisFormat;
                        }

                        width = +chartWidth - margin.right - margin.left;
                        height = +chartHeight - margin.top - margin.bottom;
                        numberOfBars = width / (barWidth+gapWidth);
                        gapFactor= gapWidth/(barWidth+gapWidth);
                    }
                    function initializeKeys(){
                        scope.dataKeys = [];
                        angular.forEach(scope.data[0], function (value, key) {
                            scope.dataKeys.push(key);
                        });

                        if (scope.dataKeys.length == 1) {
                            isMultipleBarChart = true;
                            scope.dataKeys = [];
                            angular.forEach(scope.data, function (value, key) {
                                angular.forEach(value, function (value1, key1) {
                                    scope.dataKeys.push(key1);
                                });
                            });
                            scope.displayGroupsKey = scope.dataKeys[0];
                            scope.displayValuesKey = scope.dataKeys[1];
                            multipleBarChartMetaData = scope.data[0][scope.displayGroupsKey];
                            chartData = scope.data[1][scope.displayValuesKey];
                            numberOfSG =multipleBarChartMetaData.length;
                            if(Language.isRtl()){
                                multipleBarChartMetaData = multipleBarChartMetaData.reverse();
                            }
                            scope.dataKeys = [];
                            angular.forEach(multipleBarChartMetaData[0], function (value, key) {
                                scope.dataKeys.push(key);
                            });
                            angular.forEach(chartData[0], function (value, key) {
                                scope.dataKeys.push(key);
                            });
                            scope.subLabelKey = scope.dataKeys[0];
                            scope.colorKey = scope.dataKeys[1];
                            scope.labelKey = scope.dataKeys[2];
                            scope.valueKey = scope.dataKeys[3];
                        }
                        else {
                            scope.labelKey = scope.dataKeys[0];
                            scope.valueKey = scope.dataKeys[1];
                            scope.colorKey = scope.dataKeys[2];
                            chartData = scope.data;
                        }

                    }
                    function renderChart() {
                        if(chartData.length > numberOfBars){
                            svg.call(zoom);
                        }

                        x.domain(chartData.map(function (d) {
                            return d[scope.labelKey];
                        }));


                        if (Language.isRtl()) {
                            x.rangeRoundBands([width, ((barWidth+gapWidth) * (numberOfBars - chartData.length))], gapFactor);
                        } else {
                            x.rangeRoundBands([0, ((barWidth+gapWidth) * (chartData.length))], gapFactor);
                        }
                        if (isMultipleBarChart) {
                            y.domain([0, d3.max(chartData, function (d) {
                                return d3.max(d[scope.valueKey]);
                            })]).nice()
                                .range([height, 0]);
                        }
                        else {
                            y.domain([0, d3.max(chartData, function (d) {
                                return d[scope.valueKey];
                            })]).nice()
                                .range([height, 0]);
                        }
                        y.domain([0, d3.max(y.ticks()) + y.ticks()[1]]);
                        svg.on("keydown", function () {
                                switch (d3.event.keyCode) {
                                    case 37:
                                        zoom.translate([zoom.translate()[0] + (barWidth+gapWidth), zoom.translate()[1]]).event(svg);
                                        break;
                                    case 39:
                                        zoom.translate([zoom.translate()[0] - (barWidth+gapWidth), zoom.translate()[1]]).event(svg);
                                        break;
                                }

                            });
                        if (Language.isRtl())
                        {
                            ySvgChild.call(yAxis)
                                .attr("transform", "translate(" + width + " ,0)");
                            ySvgChild.selectAll("text").style("text-anchor", "end");
                        } else {
                            ySvgChild.call(yAxis);
                        }

                        xSvgChild.attr("transform", "translate(0," + height + ")")
                            .call(xAxis)
                            .selectAll(".tick text")
                            .call(wrap, x.rangeBand());




                        allBars.selectAll(".bar").remove();

                        bar = allBars.selectAll(".bar").data(chartData)
                                .enter().append("g");

                        bar.attr("class", "bar")
                            .attr("transform", function (d) {
                                return "translate(" + x(d[scope.labelKey]) + ",0)";
                            });
                        bar.selectAll("rect")
                            .data(function (d) {
                                if (isMultipleBarChart)
                                    if(Language.isRtl())
                                        return d[scope.valueKey].reverse();
                                    else
                                        return d[scope.valueKey];
                                else
                                    return [d];
                            })
                            .enter().append("rect")
                            .attr("width", function (d) {
                                if (isMultipleBarChart)
                                    return barWidth / numberOfSG;
                                else
                                    return barWidth;
                            })
                            .attr("x", function (d) {
                                if (isMultipleBarChart) {
                                    if(indexSG==numberOfSG) indexSG=0;
                                    return (indexSG++ * barWidth / numberOfSG);
                                }
                                else
                                    return 0;
                            })
                            .attr("y", function (d) {
                                if(isMultipleBarChart)
                                    return isNaN(y(d))?0: y(d);
                                else
                                    return isNaN(y(d[scope.valueKey]))?0: y(d[scope.valueKey]);
                            })
                            .attr("height", function (d) {
                                if(isMultipleBarChart)
                                    return isNaN(y(d))?0: (height - y(d));
                                else
                                    return  isNaN(y(d[scope.valueKey]))?0: (height- y(d[scope.valueKey]));

                            })
                            .style("fill", function (d) {
                                if(isMultipleBarChart){
                                    if(indexSG==numberOfSG) indexSG=0;
                                    if(multipleBarChartMetaData[indexSG][scope.colorKey] == undefined || multipleBarChartMetaData[indexSG][scope.colorKey]=='')
                                        return color(indexSG++);
                                    else
                                        return multipleBarChartMetaData[indexSG++][scope.colorKey];
                                }
                                else {
                                    indexG++;
                                    if (d[scope.colorKey] == undefined||d[scope.colorKey]=='') {
                                        return color((indexG%color.range().length));
                                    }
                                    else
                                        return d[scope.colorKey];

                                }

                            })
                            .attr("tabindex", function (d) {
                                if((isMultipleBarChart&& d==0) ||(!isMultipleBarChart&& d[scope.valueKey]==0)) return -1;
                                return 0;
                            })
                            .attr("focusable", function (d) {
                                if((isMultipleBarChart&& d==0) ||(!isMultipleBarChart&& d[scope.valueKey]==0)) return "false";
                                return "true";
                            })
                            .attr("aria-label", function (d) {
                                if (isMultipleBarChart) {
                                    if(indexSG==numberOfSG) indexSG=0;
                                    return multipleBarChartMetaData[indexSG++][scope.subLabelKey] + " " + localizedNumber(d);
                                }
                                else
                                    return d[scope.labelKey] + " " + localizedNumber(d[scope.valueKey]);
                            })
                            .on("mousemove", function (d) {
                                divTooltip[0].style.left = d3.event.layerX + 10 + "px";
                                divTooltip[0].style.top = d3.event.layerY - 25 + "px";
                                divTooltip[0].style.display = "block";
                                if (isMultipleBarChart) {
                                    var tooltip = d3.event.currentTarget.attributes["aria-label"].value;
                                    divTooltip[0].innerHTML = tooltip.substring(0, tooltip.lastIndexOf(' ')) +"<br>"+tooltip.substring(tooltip.lastIndexOf(' ') + 1);
                                }
                                else
                                    divTooltip[0].innerHTML = d[scope.labelKey] + " <br> " + localizedNumber(d[scope.valueKey]);
                            })
                            .on("mouseout", function (d) {
                                divTooltip[0].style.display = "none";
                            })
                            .on('focusin',function() {
                                d3.event.target.classList.add("xe-rect-on");
                            })
                            .on('focusout',function() {
                                d3.event.target.classList.remove("xe-rect-on");
                            });


                        bar.on("click", function (d) {
                            scope.ngclickfunction({
                                barData: d
                            });
                        });

                        bar.on("keydown", function (d) {
                            if(d3.event.keyCode==13) {
                                scope.ngclickfunction({
                                    barData:d
                                });
                            }
                        });

                        bar.selectAll("text")
                            .data(function (d) {
                                if (isMultipleBarChart)
                                    if(Language.isRtl())
                                        return d[scope.valueKey].reverse();
                                    else
                                        return d[scope.valueKey];
                                else
                                    return [d];
                            })
                            .enter()
                            .append("text")
                            .attr("class", "xe-bar-label")
                            .attr("text-anchor", "middle")
                            .attr("x", function (d) {
                                if (isMultipleBarChart) {
                                    if (indexSG == numberOfSG) indexSG = 0;
                                    if(Language.isRtl()){
                                        return ((numberOfSG-indexSG++) * barWidth / numberOfSG) - (barWidth / (2 * numberOfSG));
                                    }
                                    else {
                                        return (indexSG++ * barWidth / numberOfSG) + (barWidth / (2 * numberOfSG));
                                    }
                                }
                                else
                                    return barWidth/2;
                            })
                            .attr("y", function (d) {
                                if(isMultipleBarChart)
                                    return isNaN(y(d))?0: (y(d)- 3);
                                else
                                    return isNaN(y(d[scope.valueKey]))?0: (y(d[scope.valueKey]) -3) ;
                            })
                            .text(function(d){
                                if (isMultipleBarChart) {
                                    return localizedNumber(d);
                                }
                                else
                                    return localizedNumber(d[scope.valueKey]);
                            });
                    }
                    function initializeChart() {
                        divTooltip = element[0].getElementsByClassName("xe-bar-tooltip");
                        x = d3.scale.ordinal();
                        y = d3.scale.linear();
                        xAxis = d3.svg.axis()
                            .scale(x)
                            .orient("bottom")
                            .innerTickSize(0)
                            .outerTickSize(0);

                        zoom = d3.behavior.zoom().on("zoom", scope.zoom)

                        d3.select(element[0]).selectAll("svg").remove();
                        svg = d3.select(element[0])
                            .classed("svg-container", true)
                            .append("svg")
                            .attr("preserveAspectRatio", "xMinYMin meet")
                            .attr("viewBox", "0 "+margin.top+" " + chartWidth + " " + chartHeight)
                            .classed("svg-content-responsive", true);

                        if(detectIE()){
                            svg.attr("width",width)
                                .attr("height",height);
                        }


                        if(chartData.length > numberOfBars) {
                            svg.append("text")
                                .attr("text-anchor", "middle")
                                .attr("class", "xe-bar-title")
                                .attr("tabindex", "0")
                                .attr("focusable","true")
                                .attr("transform", "translate(" + (chartWidth / 2) + "," + (margin.top * 1.5) + ")")
                                .attr("aria-label", $filter('xei18n')('barchart.viewmore.help.label'))
                                .text($filter('xei18n')('barchart.viewmore.help.label'));
                        };

                        /* Set Y axis label if defined */
                        if(yTitleValue!="") {
                            yTitle = svg.append("text")
                                .attr("text-anchor", "middle")
                                .attr("class", "xe-bar-title")
                                .attr("tabindex","0")
                                .attr("focusable","true")
                                .attr("aria-label",yTitleValue)
                                .text(yTitleValue);
                            if (Language.isRtl()) {
                                yTitle.attr("transform", "translate(" + (chartWidth - (margin.right/4)) + "," + (chartHeight / 2) + ")rotate(-90)");
                            }
                            else {
                                yTitle.attr("transform", "translate(" + (margin.left / 3) + "," + (chartHeight / 2) + ")rotate(-90)");
                            }
                        }

                        /* Set X axis label if defined */
                        if(xTitleValue!="") {
                            svg.append("text")
                                .attr("text-anchor", "middle")
                                .attr("class", "xe-bar-title")
                                .attr("tabindex", "0")
                                .attr("focusable","true")
                                .attr("transform", "translate(" + (chartWidth / 2) + "," + (chartHeight + (margin.bottom / 3)) + ")")
                                .attr("aria-label",xTitleValue)
                                .text(xTitleValue);
                        }



                        svgChild = svg.append("g")
                            .attr("transform", "translate(" + margin.left + "," + margin.bottom + ")");

                        yAxis = d3.svg.axis()
                            .scale(y)
                            .orient(Language.isRtl()?"right":"left")
                            .innerTickSize(-width)
                            .tickFormat(d3.format(yAxisFormat));

                        ySvgChild = svgChild.append("g")
                            .attr("class", "y xe-bar-axis");

                        var chartArea = svgChild.append('g')
                            .attr('clip-path', 'url(#chartAreaClip'+scope.$id+')');

                        chartArea.append('clipPath')
                            .attr('id', 'chartAreaClip'+scope.$id)
                            .append('rect')
                            .attr({ width: width, height: height + margin.bottom });

                        xSvgChild = chartArea.append("g")
                            .attr("class", "x xe-bar-axis");
                        allBars = chartArea.append("g")
                            .attr("class", "allBars")

                    }
                    function DisplayChart() {
                        if (scope.data != null && scope.data.length != 0) {
                            element[0].style = "";
                            initializeVariables();
                            initializeKeys();
                            initializeChart();
                            renderChart();
                        }
                        else
                        {
                            element[0].style = "display:none";
                        }
                    }
                    scope.$watch('data', function (newVal, oldVal, scope) {
                        if (newVal!=oldVal) {
                            DisplayChart();
                        }
                    }, true);
                    scope.zoom = function(){

                        if(d3.event.scale==1) {

                            svg.select(".allBars").attr("transform", "translate(" + (d3.event.translate[0] ) +
                                ",0)");
                            svg.select(".x.xe-bar-axis").attr("transform", "translate(" + (d3.event.translate[0]) +
                                "," + (height) + ")").call(xAxis).selectAll(".tick text")
                                .call(wrap, x.rangeBand());
                        }
                    };

                    DisplayChart();
                }
            }

        }])
})();
/**
 DataTable Module is used to render data in table format.

 HTML Markup(Syntax) :
 ------------------------
 <xe-table-grid
 tableId="dataTable"
 caption="Table Caption"
 header="headings"
 end-point="urlTest"
 fetch="fetchData(query)"
 post-fetch="postFetch(response, oldResult)"
 content="rows"
 results-found="records"
 toolbar="true"
 paginate="true"
 continuous-scrolling="false"
 continuous-scroll-parent="body"
 on-row-click="onClick(data,index)"
 on-row-double-click="onDoubleClick(data,index)"
 no-data-msg="No Results Found"
 empty-table-msg="emptyTableMsg"
 search-config="searchConfig"
 pagination-config="paginationConfig"
 draggable-column-names="draggableColumnNames"
 mobile-layout="mobileConfig"
 height="416px"
 total-row="true"  //This is to enable total row
 refresh-grid="refreshGrid"
 >

 <xe-cell-markup heading-name="tick">
 <input type="checkbox" ng-click="someMethod()" value="all"/>
 </xe-cell-markup>

 <xe-cell-markup column-name="tick">
 <input type="checkbox"/>
 </xe-cell-markup>
 </xe-table-grid>

 Input :
 ----------
 Basically It requires two inputs
 1. Column headings
 2. Column Content / URL Endpoint / Fetch Method

 These should be in following format.

 $scope.headings = [
 {
     position: {desktop: 1, mobile: 1},   // Refer #1 under "Features Available:" below
     name: 'tick',                        // Json key to map with column data
     title: '',                           // Column heading name to display
     label: 'First Column Header (Home)', // Onhover tooltip text, used to show short cut keys if available
     ariaLabel: 'Short cut is Home.',     // Aria text for column header
     options: {                           // Refer #2 under "Features Available:" below
         visible: true,
         columnShowHide: false
     },
     width: '100px'
 },
 {position: {desktop: 2, mobile: 2}, name: 'rollNo', title: 'Roll No.', width: '23%', options: {visible: false, isSortable: false}},
 {position: {desktop: 3, mobile: 3}, name: 'studentName', title: 'Studnet Name', width: '23%', options: {visible: true, isSortable: true}},
 {position: {desktop: 4, mobile: 5}, name: 'subject', title: 'Subject', width: '23%', options: {visible: true, isSortable: true}},
 {position: {desktop: 5, mobile: 4}, name: 'marks', title: 'Marks', width: '23%', options: {visible: true, isSortable: true}}
 ];

 $scope.content = [
 {rollNo: 6, studentName: 'Vaikunt Naik', subject: 'Subject1', marks: 45},
 {rollNo: 2, studentName: 'Venuglopal Kathavate', subject: 'Subject2', marks: 50},
 {rollNo: 3, studentName: 'Ram', subject: 'Subject3', marks: 74},
 {rollNo: 4, studentName: 'Nethaji', subject: 'Subject5', marks: 85}
 {rollNo: 1, studentName: 'Mohan Venkatesh', subject: 'Subject5', marks: 65}
 ];

 $scope.urlTest = '/app/components/data';

 $scope.fetchData = function(query) {
            var deferred = $q.defer();
            var url = '/app/components/data' +
                        '?searchString=' + (query.searchString || '') +
                        '&sortColumnName=' + (query.sortColumnName || '') +
                        '&ascending=' + query.ascending +
                        '&offset=' + (query.offset || '') +
                        '&max=' + (query.max || '');

            $http.get(url)
                .success(function(data) {
                    deferred.resolve(data);
                })
                .error(function(data) {
                    deferred.reject(data);
                });

            return deferred.promise;
        };

 **** Total Row ****
 While using total row we need to consider few things
 1. Need to configure a column to display label "total"
 to enable a column for total row we need to remove that column from draggable columns list and showHideColumns list
 2. Add totals object in totals object in the grid response


 Output :
 -----------
 Using given arrays this directive will render the data in table format by enabling/disabling specified configurations for
 each individual columns and headings.


 Features Available :
 -----------------------
 1. Extensibility:
 - Hiding different fields under header/caption bar
 EX: {
                    "sections": [
                        {
                            "name": "dataTable",
                            "fields": [
                                {
                                    "name": "term",
                                    "exclude": true
                                }
                            ]
                        },{
                            "name": "dataTableCaptionBar",
                            "exclude": false,
                            "fields": [
                                {
                                    "name": "caption",
                                    "exclude": true
                                },
                                {
                                    "name": "columnFilterMenu",
                                    "exclude": true
                                },
                                {
                                    "name": "search",
                                    "exclude": true
                                }
                            ]
                        }
                    ]
                }
 - Reordering different columns
 EX: {
                    "sections": [
                        {
                            "name": "dataTable",
                            "fields": [
                                {
                                    "name": "term",
                                    "nextSibling": "subject"
                                }
                            ]
                        }
                    ]
                }
 - replacing columns attributes (filed label name change)
 ex :
 - Rename a field with text with hard code value
     {"sections": [{
           "name": "dataTable",
           "fields": [{
              "name": "id",
              "exclude": false,
              "attributes": {"label": "term"}
           }]
        }]}
 - Rename a field with i18n key
     {"sections": [{
       "name": "dataTable",
       "fields": [{
          "name": "id",
          "exclude": false,
          "attributes": {"label": {"key": "dataTable.column.term.heading"}}
       }]
    }]}
 
 2. position: This configuration for each heading in $scope.headings array, orders the headings in the specified positions
 ex: position : {
                desktop: 1, // displays in 1st position for desktop & in 2nd position for mobile
                mobile: 2
            }

 3. options: This configuration for each heading in $scope.headings array, controls the different column behaviours
 ex: options : {
                visible: true,      // If "true" then display the column
                                    // If "false"/not specified then hide it

                titleVisible: false,// If "true"/not specified then display the column header name
                                    // If "false" then hide it

                isSortable: false,  // If "true" then it will provide sortable feature for the specified column
                                    // If "false"/not specified it does not display any sortable controls

                ascending: true,    // If "true" for a column then initially this column will be in ascending order,
                                    // If "false" then descending,
                                    // If not specified then no initial sorting will be applied to that column

                disable: false,     // If "true" then this column name will be disabled in the "Show/Hide Columns" settings menu and user can't check/uncheck this column to show/hide.
                                    // If "false"/not specified by default column name will be enabled in settings menu

                columnShowHide: true// If "true" then this column name will be removed from the "Show/Hide Columns" settings menu,
                                    // If "false"/not specified by default column name will be displayed in the "Show/Hide Columns" settings menu
            }

 4. Adding custom HTML elements
 As column heading: using attrabute heading-name="column name"
 ex: <xe-cell-markup heading-name="tick">
 <input type="checkbox" ng-click="someMethod()" value="all"/>
 </xe-cell-markup>

 As column Data: using attrabute column-name="column name"
 ex: <xe-cell-markup column-name="tick">
 <input type="checkbox"/>
 </xe-cell-markup>

 5. Exposing grid data array and no of records
 ex: content="rows" results-found="records"
 use these two attributes to get an reference to the currently displaying grid data set and the total no. of records available.

 6. Post fetch handler method(fetch callback method)
 ex: post-fetch="postFetch(response, oldResult)"
 use this attribute to do some extra processing just after grid data populates.

 7. How to make grid variable height(not fixed height tbody)??
 Ans: don't specify the height attribute of grid and
 specify the attribute "continuous-scroll-parent" with value as the id of scrollable parent html element / 'body' if the scroll is present on document/page wise,
 so that the continuous scroll will work in tab and mobiles.
 ex: continuous-scroll-parent="content" // #content has overflow: auto
 ex: continuous-scroll-parent="body" // body has overflow: auto

 8. No data found on search & empty table msg display
 ex: no-data-msg="No Results Found"
 empty-table-msg="emptyTableMsg"

 set no-data-msg attribute to display a custom message(ex. "no results found") inside grid on empty search scenario.
 In the above scenario "grid caption", "show/hide column", "search field", "column headers" & "custom message" will be visible, only "grid rows" will be hidden.

 set empty-table-msg attribute to display a custom message(ex. "You don't have access to view the grid") inside grid to handle not authorized scenarios.
 In the above scenario whole grid template will be hidden and a message will be shown instead.

 9. Search configuration to control search behaviour
 ex: $scope.searchConfig = {
                id: 'dataTableSearch',  // A unique id for search input element

                ariaLabel: 'Search for any course or section',
                                        // Additional aria text for search field, This is optional

                placeholder : 'Search for any course or section'   // placeholder text for search input

                delay: 300,             // Debouncing frequent search calls to server when user types fast
                                        // defaults to: 0(in ms)

                searchString : 201410,  // provided search string to filter grid on initial load itself
                                        // defaults to: ''

                maxlength: 200,         // Specifying maximum length for user input
                                        // defaults to: infinite(∞)

                minimumCharacters : 2   // Limiting no of characters to start search
                                        // defaults to: 1
            };

 10. Pagination configuration to control pagination behaviour
 ex: $scope.paginationConfig = {
                pageLengths : [ 5, 10, 25], // Page offsets

                offset : 7,                 // Page offset to set on initial grid load
                                            // this value will be added to pageLengths [] if not present
            };

 11. Enabling drag and drop for columns
 ex: draggable-column-names="draggableColumnNames"
 $scope.draggableColumnNames = ['tick', 'term', 'crn', 'subject', 'status'];
 bind an array to draggable-column-names attribute for which drap&drop will be enabled.

 12. Mobile layout configuration [1: "single-column", 2: "two-columns", 3: "all-columns"]
 ex: mobile-layout="mobileConfig"
 $scope.mobileConfig = {
                term: 2,
                crn: 2,
                subject: 3,
                status: 3
            };

 13. Method exposed to refresh grid data without recreating/rerendering html
 ex: refresh-grid="refreshGrid"
 $scope.refreshGrid('Table Caption');
 call this method with "caption name" as parameter, to refresh corresponding grid data

 */

(function () {

    'use strict';
    var editableMode = false;
    var paginationPreviousGridCell;
    var keys = {'left': 37, 'right': 39, 'enter': 13, 'escape': 27, 'tab': 9, 'downArrow': 40, 'upArrow': 38, 'PAGE_UP':33 , 'PAGE_DOWN':34 , 'HOME':36, 'END':35};
    angular.module('dataTableModule', ['utils'])
        .constant('mobileMaxWidth', 768)
        .factory('xeFocusUtility', function () {
            function focusableElements() {
                return 'a:not(:disabled):not(:hidden), button:not(:disabled):not(:hidden), input:not(:disabled):not(:hidden)';
            }

            function getTabbableElement (next, fromElement) {
                var elementToFocus;
                //add all elements we want to include in our selection
                if (document.activeElement) {
                    var focusable = Array.prototype.filter.call(angular.element(focusableElements()+', [tabindex]:not(:disabled):not(:hidden):not([tabindex="-1"]):not(.tbody)'),
                        function (element) {
                            //check for visibility while always include the current activeElement
                            return element.offsetWidth > 0 || element.offsetHeight > 0 || element === document.activeElement
                        });
                    var index = focusable.indexOf(fromElement || document.activeElement);
                    if (index > -1) {
                        elementToFocus = focusable[next ? (index + 1) : (index - 1)] || focusable[0];
                    }
                }
                return elementToFocus;
            }

            function clearFocusRing(elem) {
                var headerWithFocus = elem.closest('.table-container').find('th.focus-ring');
                if (headerWithFocus.length) {
                    headerWithFocus.removeClass('focus-ring');
                }

                var columnWithFocus = elem.closest('.table-container').find('td.focus-ring');
                if (columnWithFocus.length) {
                    columnWithFocus.removeClass('focus-ring');
                }

                return true;
            }

            return {
                focusableElements: function() {
                    return focusableElements();
                },
                getNextTabbableElement: function(fromElement) {
                    return getTabbableElement(true, fromElement);
                },
                getPreviousTabbableElement: function(fromElement){
                    return getTabbableElement(false, fromElement);
                },
                clearFocusRing: function(elem) {
                    return clearFocusRing(elem);
                }
            }
        })
        .directive('xeTableGrid', ['$timeout', 'accessibility', '$window', 'mobileMaxWidth', function ($timeout, accessibility, $window, mobileMaxWidth) {
            return {
                restrict: 'E',
                transclude: true,
                replace: true,
                scope: {
                    tableId: '@',
                    caption: '@?',
                    header: '=',
                    endPoint: '=?',
                    fetch: '&',
                    postFetch: '&',
                    content: '=',
                    resultsFound: '=?',
                    toolbar: '=',
                    paginate: '=?',
                    continuousScrolling: '=?',
                    continuousScrollParent: '@?',
                    onRowClick: '&',
                    onRowDoubleClick: '&',
                    noDataMsg: '@?',
                    emptyTableMsg: '=?',
                    searchConfig: '=',
                    paginationConfig: '=',
                    draggableColumnNames: '=?',
                    mobileLayout: '=?',
                    height: '@?',
                    refreshContent: '=?refreshGrid',
                    xeSection: '@?',
                    totalRow: '@?'
                },
                controller : ['$scope', '$filter', '$attrs', "$http", "$sce", "$timeout", function ($scope, $filter, $attrs, $http, $sce, $timeout) {
                    var orderBy = $filter('orderBy'),
                        filter = $filter("filter"),
                        _this = this,
                        content,
                        previousSortColumn,
                        device;
                    $scope.hideColumnSettingMenu = true;
                    $scope.transcludes = {};
                    $scope.headingTranscludes = {};
                    $scope.hideContainer = false;
                    $scope.sortArray = [];
                    $scope.pagination = $scope.paginate;
                    $scope.showPagination = true;
                    $scope.totalValue = {};
                    $scope.isMobileView = $window.innerWidth <= mobileMaxWidth;

                    if (!$scope.tableId) {
                        console.error("Provide a unique id for table");
                        return;
                    }

                    if (!$scope.pagination) {
                        $scope.pagination = $scope.continuousScrolling;
                    }

                    if (!$scope.toolbar && !$scope.caption) {
                        $scope.noCaptionBar = true;
                    }

                    if ($window.innerWidth > mobileMaxWidth) {
                        $scope.header = $filter('orderBy')($scope.header, 'position.desktop', false);
                        device = 'desktop';
                    } else {
                        $scope.header = $filter('orderBy')($scope.header, 'position.mobile', false);
                        device = 'mobile';
                    }

                    /*
                     * Applying extensibility after $scope level initializations and the initial header ordering
                     */
                    applyExtensions('captionBar');
                    applyExtensions('header');

                    if (angular.isObject($scope.searchConfig) && angular.isUndefined($scope.searchConfig.searchString)) {
                        $scope.searchConfig.searchString = '';
                    }

                    /*
                     START: Shared properties and methods across directives
                     */
                    // Used in pagination directive
                    // If emptyTableMsg is set no need to fetch the data for grid
                    this.emptyTableMsg = $scope.emptyTableMsg;


                    // Used in pagination directive
                    // Sharing the header information from grid
                    this.header = $scope.header;

                    // Used in pagination directive
                    // Method to show/hide the spinner while fetching data
                    this.loadingDataIndicator = function (loading) {
                        $scope.loadingData = loading;
                        $scope.$emit('xeGridContentFetchInProgress', loading);
                    };

                    // Used in pagination directive
                    // If continuous scrolling is true then hide pagination on tablets and mobile.
                    this.hidePaginationIfContinuousScroll = function () {
                        $scope.showPagination = !$scope.continuousScrolling;
                    };
                    /*
                     END: Shared properties and methods across directives
                     */


                    // If Pagination is false, then all the data will be loaded at once and no need to hit the server for sorting.
                    // Sorting will be done on model data.
                    $scope.onSort = function (params) {
                        _this.sortColumnName = params.heading.name;
                        _this.ascending = (previousSortColumn === _this.sortColumnName) ? !_this.ascending : false;
                        // TODO: Too many ifs. Revisit this.
                        if (!$scope.pagination) {
                            if (params.heading.options.sortable) {
                                if (!angular.isDefined($attrs.fetch)) {
                                    // Model sort
                                    $scope.content = orderBy($scope.content, _this.sortColumnName, !_this.ascending);
                                } else {
                                    // Server side sort
                                    _this.loadingDataIndicator(true);
                                    $scope.fetch({
                                        query: {
                                            searchString: $scope.searchConfig.searchString,
                                            sortColumnName: _this.sortColumnName,
                                            ascending: _this.ascending
                                        }
                                    }).then(function onSuccess(data) {
                                        $scope.postFetch({response: data, oldResult: $scope.content});
                                        $scope.content = data.result;
                                        _this.loadingDataIndicator(false);
                                    }).catch(function onError(data) {
                                        // Handle error
                                        console.error(data);
                                        $scope.postFetch({response: data, oldResult: $scope.content});
                                        _this.loadingDataIndicator(false);
                                    });
                                }
                            }
                        } else {
                            if (params.heading.options.sortable) {
                                _this.sort(_this.sortColumnName, _this.ascending, !!($scope.pagination && (!$scope.showPagination || angular.element('#'+$scope.tableId).find(".pagination-container").is(':hidden'))));
                            }
                        }
                    };

                    $scope.handleDrop = function (draggedFrom, draggedTo) {
                        $scope.header = orderColumns($scope.header, draggedFrom, draggedTo);
                    };

                    function applyExtensions(sectionName) {
                        var gridXESection;
                        var gridSectionExtns;

                        if (typeof xe !== 'undefined' && xe.extensionsFound) {
                            switch (sectionName) {
                                case 'captionBar':
                                    gridXESection = $scope.xeSection + 'CaptionBar';

                                    if (gridXESection) {
                                        gridSectionExtns = _.find(xe.extensions.sections, function (section) {
                                            return section.name == gridXESection;
                                        });

                                        if (gridSectionExtns) {
                                            setVisibilityForCaptionBar(gridSectionExtns);
                                        }
                                    }
                                    break;
                                case 'header':
                                    gridXESection = $scope.xeSection;

                                    if (gridXESection) {
                                        gridSectionExtns = _.find(xe.extensions.sections, function (section) {
                                            return section.name == gridXESection;
                                        });

                                        if (gridSectionExtns) {
                                            $scope.header = setVisibilityForHeaders(gridSectionExtns, $scope.header);
                                            $scope.header = orderHeaders(gridSectionExtns, $scope.header);
                                        }
                                    }
                            }
                        }
                    }

                    function setVisibilityForCaptionBar(sectionExtns) {
                        if (sectionExtns.exclude) {
                            $scope.noCaptionBar = true;
                            return;
                        }

                        _.each(sectionExtns.fields, function (extensibleField) {
                            if (extensibleField.exclude) {
                                $scope['no' + extensibleField.name] = true;
                            }
                        });
                    }

                    function setVisibilityForHeaders(sectionExtns, columnHeaders) {
                        var updatedOption, columnToHide;

                        _.each(sectionExtns.fields, function (extensibleField) {
                            columnToHide = _.findWhere(columnHeaders, {name: extensibleField.name});

                            if (angular.isDefined(columnToHide)) {  //Set visibility to false only if the column exists
                                updatedOption = extensibleField.exclude ? {
                                    visible: !extensibleField.exclude,
                                    columnShowHide: !extensibleField.exclude
                                } : {};
                                _.extend(_.findWhere(columnHeaders, {name: extensibleField.name}).options, updatedOption);
                                if (!extensibleField.exclude) {
                                    updateColumnName(extensibleField, columnToHide);
                                }
                            }
                        });

                        return columnHeaders;
                    }

                    function updateColumnName(extensibleField,columnToChange){
                        if(extensibleField.attributes && extensibleField.attributes.label && angular.isString(extensibleField.attributes.label)){
                            columnToChange.title = extensibleField.attributes.label;
                        }
                        if(extensibleField.attributes && extensibleField.attributes.label && angular.isObject(extensibleField.attributes.label) && extensibleField.attributes.label.key){
                            columnToChange.title = xe.i18n(extensibleField.attributes.label.key);
                        }
                    }

                    function orderHeaders(sectionExtns, columnHeaders) {
                        _.each(sectionExtns.fields, function (extension) {
                            if (_.has(extension, "nextSibling")) {
                                var current_field_idx = _.indexOf(_.pluck(columnHeaders, 'name'), extension.name);
                                var nextSibling_idx = _.indexOf(_.pluck(columnHeaders, 'name'), extension.nextSibling);

                                if (_.isNull(extension.nextSibling) && current_field_idx >= 0) {
                                    // A “nextSibling” of null indicates that the element should be placed as the last element of its siblings
                                    // {"name": "field2", "nextSibling": null}
                                    var lastSibling = _.last(columnHeaders).name;

                                    // Reusing same method used for drag-drop column functionality
                                    columnHeaders = orderColumns(columnHeaders, extension.name, lastSibling);
                                } else if (current_field_idx >= 0 && nextSibling_idx >= 0) {
                                    var prev_of_nextSibling = ((current_field_idx < nextSibling_idx) && columnHeaders[nextSibling_idx - 1]) ? columnHeaders[nextSibling_idx - 1].name : columnHeaders[nextSibling_idx].name;

                                    // Reusing same method used for drag-drop column functionality
                                    columnHeaders = orderColumns(columnHeaders, extension.name, prev_of_nextSibling);
                                }
                            }
                        });

                        return columnHeaders;
                    }

                    function orderColumns(columnHeaders, draggedFrom, draggedTo) {
                        var srcIdx = _.indexOf(_.pluck(columnHeaders, 'name'), draggedFrom),
                            destIdx = _.indexOf(_.pluck(columnHeaders, 'name'), draggedTo);

                        if (srcIdx >= 0 && destIdx >= 0) {
                            var element = columnHeaders[srcIdx];
                            columnHeaders.splice(srcIdx, 1);
                            columnHeaders.splice(destIdx, 0, element);

                            _.each(columnHeaders, function (item, index) {
                                item.position[device] = index + 1;
                            });
                        }

                        return columnHeaders;
                    }
                    /*Extensibility support to add new columns(HRU-6831.) */
                    this.addExtensionColumns = function (columnHeaders, response) {
                        if (response && response.length > 0 && response.result && response.result[0].extensions) {
                            if (!_.find(columnHeaders, function (heading) { return (heading.name).indexOf("extension.") > -1;})) {
                                angular.forEach(response.result[0].extensions, function (extension) {
                                    var displayColumn;
                                    if (typeof xe !== 'undefined' && xe.extensionsFound) {
                                        var gridSectionExtns = _.find(xe.extensions.sections, function (section) {
                                            return section.name == $scope.xeSection;
                                        });
                                        if (gridSectionExtns) {
                                            var gridField = _.find(gridSectionExtns.fields, function (field) {
                                                return field.name == 'extension.' + extension.name;
                                            });
                                        }
                                        if (gridField) {
                                            if (gridField.exclude || typeof gridField.exclude === 'undefined') {
                                                displayColumn = false;
                                            } else {
                                                displayColumn = true;
                                            }
                                        }
                                    }
                                    if(displayColumn) {
                                        var desktopPosition = _.max(columnHeaders, function (columnHeader) {
                                            return columnHeader.position.desktop;
                                        }).position.desktop + 1;
                                        var mobilePosition = _.max(columnHeaders, function (columnHeader) {
                                            return columnHeader.position.mobile;
                                        }).position.mobile + 1;
                                        var column = {
                                            position: {desktop: desktopPosition, mobile: mobilePosition},
                                            name: "extension." + extension.name,
                                            title: extension.prompt,
                                            options: {
                                                visible: true,
                                                sortable: false
                                            },
                                            width: '10%'
                                        };
                                        columnHeaders.push(column);
                                    }
                                });
                            }
                            $scope.populateHeaderWidths(angular.element('#' + $scope.tableId));
                            var maxTableWidth = _.reduce(_.pluck(columnHeaders, 'dynamicWidth'), function (memo, num) {
                                return memo + num;
                            }, 0);
                            angular.element('#' + $scope.tableId).find('.thead, .tbody').width(maxTableWidth);
                        }
                        return columnHeaders;
                    };

                    var defaultOptions = {visible: true, sortable: false};

                    angular.forEach($scope.header, function (value, index) {
                        if (angular.isUndefined(value.width)) {
                            value.width = '';
                        }

                        $scope.$watch(function () {
                            return $scope.header[index].options.visible;
                        }, function (newValue, oldValue) {
                            if (newValue !== oldValue) {
                                $timeout(function () {
                                    $scope.populateHeaderWidths(angular.element('#' + $scope.tableId));
                                }, 0);
                            }
                        });

                        if (angular.isDefined(value.options)) {
                            if (angular.isDefined(value.options.ascending)) {
                                $scope.sortArray[value.name] = {
                                    ascending: value.options.ascending,
                                    decending: !value.options.ascending
                                };
                                previousSortColumn = value.name;
                                _this.ascending = value.options.ascending;
                                _this.sortColumnName = value.name;
                            } else {
                                $scope.sortArray[value.name] = {ascending: false, decending: false};
                            }

                            if (!angular.isDefined(value.options.visible)) {
                                value.options.visible = true;
                            }

                            if (!angular.isDefined(value.options.sortable)) {
                                value.options.sortable = false;
                            }
                        } else {
                            value.options = defaultOptions;
                        }
                    });

                    // As endsWith is not supported by IE and opera using userDefined funtion
                    function endsWith(str, suffix) {
                        return str.indexOf(suffix, str.length - suffix.length) !== -1;
                    }

                    function calculateWidth(width, parentWidth, headerFontSize) {
                        if (endsWith(width, '%')) {
                            width = Math.floor(((parentWidth * width.substr(0, width.indexOf('%'))) / 100));
                        } else if (endsWith(width, 'em')) {
                            width = Math.floor((headerFontSize * width.substr(0, width.indexOf('em'))));
                        } else if (endsWith(width, 'px')) {
                            width = Math.floor(width.substr(0, width.indexOf('px')));
                        } else {
                            width = 0;
                        }
                        return width;
                    }

                    // Populating the header widths based on it's visibility
                    $scope.populateHeaderWidths = function (table) {
                        table.find('.thead, .tbody').width('');

                        var dynamicWidthColumnCount = 0,
                            undefinedWidthCount = 0,
                            headerWidth = table.find('.tbody thead').width(),
                            headerFontSize = parseFloat(table.find('.tbody thead').css('font-size')) || 16,
                            availableWidth = headerWidth,
                            invisibleColumnWidths = 0,
                            scrollableContainerWidth = table.find('.hr-scrollable-content')[0] ? table.find('.hr-scrollable-content')[0].scrollWidth : 0,
                            scrollableContentWidth = table.find('.tbody')[0] ? table.find('.tbody').width() : 0;

                        if (scrollableContentWidth < scrollableContainerWidth) {
                            // Setting width to display overflowed contents incase of overflow-x
                            // This is needed because when overflow-y is enabled, as per browser standard it hides overflowed x-content
                            table.find('.thead, .tbody').width(scrollableContainerWidth - 1);
                        }

                        // Calculating 'px' value of the column widths specified in header configuration
                        angular.forEach($scope.header, function (heading) {
                            var width = heading.width;

                            if ($window.innerWidth < mobileMaxWidth) {
                                heading.dynamicWidth = '';
                                availableWidth = 0;
                            } else if (heading.options.visible) {
                                width = calculateWidth(width, headerWidth, headerFontSize);

                                if (width) {
                                    heading.dynamicWidth = width;
                                    availableWidth = availableWidth - heading.dynamicWidth;
                                } else {
                                    undefinedWidthCount++;
                                }

                                if (endsWith(heading.width, '%')) {
                                    dynamicWidthColumnCount++;
                                }
                            } else {
                                width = calculateWidth(width, headerWidth, headerFontSize);

                                if (width) {
                                    invisibleColumnWidths += width;
                                }
                            }
                        });

                        if (undefinedWidthCount || invisibleColumnWidths) {
                            var undefinedWidth = Math.floor(availableWidth / undefinedWidthCount),
                                availableWidthPerColumn = Math.floor(invisibleColumnWidths / dynamicWidthColumnCount);

                            angular.forEach($scope.header, function (heading) {
                                if (heading.options.visible) {
                                    if (undefinedWidth && heading.width.trim() === '') {
                                        heading.dynamicWidth = undefinedWidth;
                                    } else if (endsWith(heading.width, '%')) {
                                        heading.dynamicWidth += availableWidthPerColumn;
                                    }
                                }
                            });
                        }
                    };

                    // This block loads the data for data table if its not provided by the user.
                    // Also checks whether application specific search is available or not. if not available calls directive search method.
                    // This mainly works on model data.
                    function loadData() {
                        if (!$attrs.fetch && !$scope.emptyTableMsg) {
                            $scope.fetch = function (data) {
                                if (!content) {
                                    content = $scope.content;
                                }
                                $scope.content = orderBy(
                                    filter(content, data.query.searchString, false),
                                    _this.sortColumnName,
                                    _this.ascending
                                );
                                $scope.resultsFound = $scope.content.length;
                                if(angular.isDefined($scope.content) && angular.isDefined($scope.content.totals) && Object.keys($scope.content.totals).length !== 0){
                                    $scope.totalValue = $scope.content.totals;
                                }
                                _this.loadingDataIndicator(false);
                                _this.addExtensionColumns($scope.header, data);
                            };

                            if (!$scope.pagination && !$attrs.endPoint) {
                                //console.error("Provide either end-point or fetch attribute");
                            } else if (!$scope.pagination) {
                                _this.loadingDataIndicator(true);
                                $http.get($scope.endPoint + "?searchString=" + $scope.searchConfig.searchString + "&sortColumnName=" + (_this.sortColumnName || "") + "&ascending=" + (_this.ascending || ""))
                                .then(function onSuccess(data) {
                                    $scope.postFetch({response: data, oldResult: $scope.content});
                                    $scope.content = data.result;
                                    $scope.resultsFound = $scope.content.length;
                                    if(angular.isDefined($scope.content) && angular.isDefined($scope.content.totals) && Object.keys($scope.content.totals).length !== 0){
                                        $scope.totalValue = $scope.content.totals;
                                    }
                                    _this.loadingDataIndicator(false);
                                    _this.addExtensionColumns($scope.header, data);
                                }).catch(function onError(data) {
                                    // Handle error
                                    console.error(data);
                                    $scope.postFetch({response: data, oldResult: $scope.content});
                                    _this.loadingDataIndicator(false);
                                    _this.addExtensionColumns($scope.header, data);
                                });
                            }
                        } else if (!$scope.pagination && !$scope.emptyTableMsg) {
                            _this.loadingDataIndicator(true);
                            $scope.fetch({
                                query: {
                                    searchString: $scope.searchConfig.searchString,
                                    sortColumnName: _this.sortColumnName,
                                    ascending: _this.ascending
                                }
                            }).then(function onSuccess(data) {
                                $scope.postFetch({response: data, oldResult: $scope.content});
                                $scope.content = data.result;
                                if(angular.isDefined($scope.content) && angular.isDefined($scope.content.totals) && Object.keys($scope.content.totals).length !== 0){
                                    $scope.totalValue = $scope.content.totals;
                                }
                                _this.loadingDataIndicator(false);
                            }).catch(function onError(data) {
                                // Handle error
                                console.error(data);
                                $scope.postFetch({response: data, oldResult: $scope.content});
                                _this.loadingDataIndicator(false);
                            });

                        }
                    }

                    loadData();

                    // TODO: This is just a temporary arrangement to change the search string. Ideally two-way data-binding should this job for us.
                    // Right now with nested directive two-way data-biding is not working. Need to revisit this.
                    $scope.fetchSpecial = function (searchString) {

                        if (!$scope.pagination) {
                            var promise = $scope.fetch({
                                query: {
                                    searchString: searchString,
                                    sortColumnName: _this.sortColumnName,
                                    ascending: _this.ascending
                                }
                            });

                            _this.loadingDataIndicator(true);
                            _this.addExtensionColumns($scope.header, data);

                            if (promise) {
                                promise.then(function onSuccess(data) {
                                    $scope.postFetch({response: data, oldResult: $scope.content});
                                    $scope.content = data.result;
                                    if(angular.isDefined($scope.content) && angular.isDefined($scope.content.totals) && Object.keys($scope.content.totals).length !== 0){
                                        $scope.totalValue = $scope.content.totals;
                                    }
                                    _this.loadingDataIndicator(false);
                                }).catch(function onError(data) {
                                    // Handle error
                                    console.error(data);
                                    $scope.postFetch({response: data, oldResult: $scope.content});
                                    _this.loadingDataIndicator(false);
                                });

                            }
                        } else {
                            _this.fetchData(1);
                        }
                    };
                    // END TODO: May be use Factory pattern

                    // Method to store html objects added during data table declaration
                    this.registerTransclude = function (directiveTransclude) {
                        var id = directiveTransclude.id;
                        $scope.transcludes[id] = directiveTransclude;
                    };

                    // Method to store heading html objects added during data table declaration
                    this.registerHeadingTransclude = function (directiveTransclude) {
                        var id = directiveTransclude.id;
                        $scope.headingTranscludes[id] = directiveTransclude;
                    };

                    $scope.onSearchfocus = function (event) {
                        $scope.hideContainer = !$scope.hideContainer;
                    };

                    $scope.onSearchBlur = function (event) {
                        $scope.hideContainer = !$scope.hideContainer;
                        angular.element(event.target).val($scope.searchConfig.searchString);
                    };

                    $scope.sortOnHeading = function (heading, headerIndex) {

                        if (heading.options.sortable) {
                            var columnName = heading.name;

                            if (previousSortColumn == columnName) {
                                $scope.sortArray[columnName] = {
                                    ascending: !$scope.sortArray[columnName].ascending,
                                    decending: !$scope.sortArray[columnName].decending
                                };
                            } else {
                                previousSortColumn = columnName;
                                for (var obj in $scope.sortArray) {
                                    if (obj == columnName) {
                                        $scope.sortArray[obj] = {ascending: false, decending: true};
                                    }
                                    else {
                                        $scope.sortArray[obj] = {ascending: false, decending: false};
                                    }
                                }
                            }
                        }
                    };

                    if (document.doctype && navigator.appVersion.indexOf("MSIE 9") > -1) {
                        document.addEventListener('selectstart', function (e) {
                            for (var el = e.target; el; el = el.parentNode) {
                                if (el.attributes && el.attributes.draggable) {
                                    e.preventDefault();
                                    e.stopImmediatePropagation();
                                    el.dragDrop();
                                    return false;
                                }
                            }
                        });
                    }

                    $scope.getObjectValue = function getter(object, key) {
                        var value;
                        if (typeof object === 'object' && typeof key === 'string'){
                            //value = eval('object' + '.' + key);
                            value = object[key];
                        }
                        return value;
                    };

                    $scope.getTotalValue = function (obj) {
                        if (angular.isDefined(obj.totalLabel) && ($window.innerWidth > mobileMaxWidth)){
                            return obj.totalLabel;
                        }

                        if (typeof $scope.totalValue === 'object' && $scope.totalValue !== null) {
                            if (angular.isDefined($scope.totalValue['total'+obj.name])) {
                                return $scope.totalValue['total'+obj.name];
                            }

                            return '';
                        }
                    };

                    $scope.isExtendedField = function (row, fieldName) {
                        if (fieldName.indexOf("extension.") > -1) {
                            $scope.extensionValue = $scope.getObjectValueForExtendedField(row, fieldName);
                            $scope.isEditable = $scope.isEditableField(fieldName);
                            if($scope.isEditable) {
                                $scope.dataType = $scope.getDataType(row, fieldName);
                            }
                            return true;
                        }
                    };

                    $scope.isEditableField = function(fieldName) {
                        var isEditable;
                        if (typeof xe !== 'undefined' && xe.extensionsFound) {
                            var gridSectionExtns = _.find(xe.extensions.sections, function (section) {
                                return section.name == $scope.xeSection;
                            });
                            if (gridSectionExtns) {
                                gridSectionExtns.fields.forEach(function (field, key) {
                                    if (field.name === fieldName && !field.exclude) {
                                        if (field.editable) {
                                            isEditable = true;
                                        }
                                    }
                                });
                            }
                        }
                        return isEditable;
                    };

                    $scope.getDataType = function(row, fieldName) {
                        var ret;
                        if (typeof xe !== 'undefined' && xe.extensionsFound) {
                            row.extensions.forEach(function (extension) {
                                if ('extension.' + extension.name === fieldName) {
                                    ret = extension.datatype;
                                }
                            });
                        }
                        return ret;
                    };

                    $scope.getObjectValueForExtendedField = function (object, key) {
                        var value;
                        var key_array = key.split('.');
                        var extensionArray = object.extensions;
                        if (extensionArray) {
                            extensionArray.forEach(function (extension) {
                                if (extension.name === key_array[1]) {
                                    value = extension.value;
                                    if (typeof xe !== 'undefined' && xe.extensionsFound) {
                                        var gridSectionExtns = _.find(xe.extensions.sections, function (section) {
                                            return section.name == $scope.xeSection;
                                        });
                                        if (gridSectionExtns) {
                                            var gridField = _.find(gridSectionExtns.fields, function (field) {
                                                return field.name == key;
                                            });
                                        }
                                    }
                                }
                            });
                        }
                        return value;
                    }

                    $scope.refreshContent = function (refresh) {
                        if (refresh) {
                            if (!$scope.pagination) {
                                loadData();
                            } else if (_this.refreshContent) {
                                _this.refreshContent(1);
                            }
                            $scope.populateHeaderWidths(angular.element('#' + $scope.tableId));
                        }
                    };
                }],
                templateUrl: function (element, attr) {
                    return 'templates/dataTable.html';
                },
                compile: function compile(tElement, tAttrs) {
                    // Setting opacity of table to 0 till html rendering completes(to avoid displaying UI distortions)
                    tElement.css('opacity', 0);

                    if (tAttrs.paginate === "true" || tAttrs.continuousScrolling === "true") {
                        var paginationObject = tElement.find("xe-pagination");

                        if (angular.isDefined(tAttrs.fetch)) {
                            paginationObject.attr('fetch', 'fetch({query: query})');
                        }

                        if (angular.isDefined(tAttrs.postFetch)) {
                            paginationObject.attr('post-fetch', 'postFetch({response: response, oldResult: oldResult})');
                        }

                        if (angular.isDefined(tAttrs.paginationConfig)) {
                            paginationObject.attr('pagination-config', 'paginationConfig');
                        }

                        if (tAttrs.endPoint) {
                            paginationObject.attr('end-point', 'endPoint');
                        }

                        paginationObject.attr('total-value', 'totalValue');
                    } else {
                        // Removing pagination if its not set to true, to avoid getting executed even when its not needed.
                        tElement.find("xe-pagination").remove();
                    }

                    return function postLink(scope, element, attrs, controller) {
                        if (tAttrs.paginate === "false" || tAttrs.continuousScrolling === "true") {
                            element.find(".tfoot").remove();
                        }

                        $timeout(function () {
                            // Resetting opacity of table after html rendering completes
                            element.css('opacity', 1);

                            // removing aria-describedby for the columns which don't have sorting, or else in accessibility tools will throw broken aria reference error.
                            angular.forEach(scope.header, function (header) {
                                if (!header.options.sortable && !header.ariaLabel) {
                                    element.find("> .hr-scrollable-content > .thead > .data-table > thead > tr > th[data-name="+header.name+"]").removeAttr("aria-describedby");
                                }
                            });

                            scope.populateHeaderWidths(element);

                            accessibility.provideAccessibilityForTable(element, angular.element('#' + scope.continuousScrollParent));

                            scope.nextPage = function () {
                                if(scope.loadingData) return;
                                if(scope.continuousScrolling){
                                    if (scope.pagination &&
                                        !scope.showPagination &&
                                        controller.next) {
                                        controller.next(true);
                                    }
                                }else{
                                    if (scope.pagination &&
                                        element.find(".pagination-container").is(':hidden') &&
                                        controller.next) {
                                        controller.next(true);
                                    }
                                }

                            };
                        });
                    };
                }
            };
        }])
        .directive('xeCellInjector', [function () {
            return {
                require: '^xeTableGrid',
                restrict: 'A',
                replace: true,
                scope: true,
                /*
                 This block to provide DOM manipulation methods if any.
                 */
                link: function (scope, element, attrs, controllerInstance, $transclude) {
                    var id = attrs.name;
                    element.attr("tabindex", 0);
                    var transclude = scope.transcludes[id];
                    if (transclude) {
                        var scopeRowValue = scope.row[attrs.name];
                        if (angular.isUndefined(scopeRowValue)) {
                            var newScopeObj = transclude.scope.$new();
                            transclude.transclude(newScopeObj, function (transcludeEl, transcludeScope) {
                                transcludeScope.row = scope.row;
                                element.append(transcludeEl);
                            });
                        } else {
                            transclude.transclude(scope, function (clone, scope) {
                                element.html(clone);
                            });
                        }
                    }
                }
            };
        }])
        .directive('xeRowInjector', [function () {
            var previousElement;
            return {
                restrict: 'A',
                replace: true,
                require: '^xeTableGrid',
                scope: true,
                link: function (scope, element, attrs, controllerInstance, $transclude) {
                    element.on("click", function (event) {
                        if (previousElement) {
                            previousElement.removeClass("active-row");
                        }
                        element.addClass("active-row");
                        previousElement = element;
                    });
                }
            };
        }])
        .directive('xeHeadingInjector', [function () {
            return {
                restrict: 'A',
                replace: true,
                require: '^xeTableGrid',
                scope: true,
                link: function (scope, element, attrs, controllerInstance, $transclude) {
                    var id = attrs.name;
                    var transclude = scope.headingTranscludes[id];
                    if (transclude) {
                        var newScopeObj = transclude.scope.$new();
                        transclude.transclude(newScopeObj, function (transcludeEl, transcludeScope) {
                            if (element.find('.data').length) {
                                element.find('.data').append(transcludeEl);
                            } else {
                                element.append(transcludeEl);
                            }
                        });
                    }
                }
            };
        }])
        .directive('xeCellMarkup', [function () {
            return {
                restrict: 'EA',
                transclude: 'element',
                replace: true,
                scope: true,
                require: "^xeTableGrid",
                link: function (scope, element, attrs, controllerInstance, $transclude) {
                    var directiveTransclude;

                    if (attrs.columnName && controllerInstance.registerTransclude) {
                        directiveTransclude = {
                            id: attrs.columnName,
                            transclude: $transclude,
                            element: element,
                            scope: scope
                        };
                        controllerInstance.registerTransclude(directiveTransclude);
                    } else if (attrs.headingName && controllerInstance.registerHeadingTransclude) {
                        directiveTransclude = {
                            id: attrs.headingName,
                            transclude: $transclude,
                            element: element,
                            scope: scope
                        };
                        controllerInstance.registerHeadingTransclude(directiveTransclude);
                    }

                }
            };
        }])
        .directive('attainMobileLayout', function () {
            // TODO: Check if using number as object name best practice. Its valid according to JS spec.
            var columnClasses = {1: "single-column", 2: "two-columns", 3: "all-columns"};
            return {
                restrict: "A",
                scope: true,
                link: function (scope, element, attrs) {
                    element.addClass(columnClasses[parseInt(attrs.attainMobileLayout)]);
                }
            };
        })
        .directive('dragDrop', function () {
            return {
                link: function (scope, element, attr) {
                    var enterTarget = null,
                        index = element.index();

                    // Draggable column check
                    if (scope.draggableColumnNames.indexOf(scope.header[index].name) === -1) {
                        return;
                    }
                    element.attr("draggable", true);

                    function dragstart(event) {
                        angular.element(event.target).addClass('dragged');
                        index = angular.element(event.target).closest('th').index() + 1;
                        element.closest('.table-container').find("td:nth-child(" + index + ")").addClass('dragged');

                        var sendData = angular.element(event.target).data('name');
                        event.originalEvent.dataTransfer.setData('text', sendData);
                    }

                    function dragend(event) {
                        angular.element(event.target).removeClass('dragged');
                        index = angular.element(event.target).closest('th').index() + 1;
                        element.closest('.table-container').find("td:nth-child(" + index + ")").removeClass('dragged');
                        angular.element(".drag-enter").removeClass('drag-enter');
                        angular.element('#dragtable').hide();
                    }

                    function dragenter(event) {
                        angular.element(event.target).closest('th').addClass('drag-enter');
                        index = angular.element(event.target).closest('th').index() + 1;
                        element.closest('.table-container').find("td:nth-child(" + index + ")").addClass('drag-enter');
                        enterTarget = event.target;
                        event.preventDefault();
                    }

                    function dragleave(event) {
                        if (enterTarget == event.target) {
                            angular.element(event.target).closest('th').removeClass('drag-enter');
                            index = angular.element(event.target).closest('th').index() + 1;
                            element.closest('.table-container').find("td:nth-child(" + index + ")").removeClass('drag-enter');
                        }
                    }

                    function onDragOver(event) {
                        processEvent(event);

                        event = event || window.event;
                        var dragX = event.originalEvent.pageX, dragY = event.originalEvent.pageY - 170;

                        angular.element('#dragtable').show();

                        angular.element('#dragtable').css({
                            left: dragX,
                            top: dragY
                        });
                        event.originalEvent.dataTransfer.dropEffect = 'move';

                        if (event.preventDefault) {
                            event.preventDefault();
                        }
                        return false;
                    }

                    function onDrop(event) {
                        angular.element('#dragtable').hide();
                        processEvent(event);

                        var fromHeader = event.originalEvent.dataTransfer.getData('text');
                        var toHeader = angular.element(event.target).closest('th').data('name');
                        var dropfn = attr.dragDrop;

                        scope.$apply(function () {
                            scope[dropfn](fromHeader, toHeader);
                        });
                    }

                    function processEvent(e) {
                        if (e.preventDefault) {
                            e.preventDefault();
                        }
                        if (e.stopPropagation) {
                            e.stopPropagation();
                        }
                    }

                    element.bind("dragover", onDragOver);
                    element.bind("drop", onDrop);
                    element.bind("dragstart", dragstart);
                    element.bind("dragend", dragend);
                    element.bind("dragenter", dragenter);
                    element.bind("dragleave", dragleave);
                }
            };
        })

        /*
         DataTable resize handlers
         */
        .directive('resize', ['$timeout', '$window', '$filter', 'Language', 'mobileMaxWidth', function ($timeout, $window, $filter, Language, mobileMaxWidth) {
            return function ($scope, element, attr) {
                $timeout(function () {
                    // Watch to resize headers & populate their widths based on visibility on window/table resize
                    $scope.$watch(
                        function () {
                            return element.closest('.table-container').width();
                        },
                        function (newValue, oldValue) {
                            if (newValue !== oldValue) {
                                if ($window.innerWidth > mobileMaxWidth) {
                                    $scope.header = $filter('orderBy')($scope.header, 'position.desktop', false);

                                    // Adjust dataTable header widths on window resize
                                    $scope.populateHeaderWidths(element.closest('.table-container'));
                                    adjustHeader();
                                } else {
                                    $scope.header = $filter('orderBy')($scope.header, 'position.mobile', false);
                                }
                            }
                        }
                    );

                    // Watch to resize headers on resolve of each search result
                    $scope.$watch(
                        function () {
                            return element[0].scrollHeight;
                        },
                        function (newValue, oldValue) {
                            if ($window.innerWidth > mobileMaxWidth) {
                                adjustHeader();
                            }
                        }
                    );
                });

                function adjustHeader() {
                    var adjustHeader = (element[0].scrollHeight > element[0].clientHeight) && (element[0].clientWidth !== element[0].offsetWidth);
                    if (adjustHeader) {
                        var headerPadding = (element.width() - element[0].scrollWidth) + 'px';
                        $scope.headerPadding = Language.isRtl() ? {'padding-left': headerPadding} : {'padding-right': headerPadding};
                    } else {
                        $scope.headerPadding = {};
                    }
                }

                // Debouncing window resize trigger within every 500ms
                var w = angular.element($window);
                var applyScope = _.debounce(function () {
                    $scope.$apply();
                }, 500);

                w.bind('resize', applyScope);

            };
        }])

        /*
         Directive xeFocus is for keyBoard Navigation of Angular Grid component.
         Important point to note - Binding events to each gridCell and moving the focus to next element.
         JIRA's HRU-6719 and HRU-7041

         editableMode is the flag used to indicate whether the user has entered editable-mode in grid. this is set on press of ENTER and cleared on click of ESCAPE
         focus-ring is the class which provides the border of blue and showcase as the element is in focus.

         Few API of jquery used are $.inArray and $(elem).index(); to get the index of the element.

         On Click of Enter - Select entire row adding class 'active-row' and same class when navigating next row.
         Events handled in this directives are -
         LEFT
         RIGHT
         ENTER
         ESCAPE
         TAB
         SHIFT+TAB
         UP-ARROW
         DOWN-ARROW

         paginationPreviousGridCell is the variable to store the previous element where the focus was and when user clicks shift+tab then it should come back to paginationPreviousGridCell.
         */
        .directive('xeFocus', ['xeFocusUtility', function (xeFocusUtility) {
            var COLUMNHEADER = 'columnheader';
            var FOCUSRING = 'focus-ring';
            var ACTIVEROW = 'active-row';
            return {
                restrict: 'A',
                link: function ($scope, elem) {
                    elem.bind('keydown', function (e) {
                        var code = e.keyCode || e.which;

                        var parent = $(elem).parents('.table-container').last();
                        var hasPagination = parent.attr('paginate') === 'true';
                        var isSearchEnabled = parent.attr('toolbar') === 'true' && !!parent.find('.toolbar .search-container input:visible').length;
                        var isTotalEnabled = parent.attr('total-row');
                        var hasData = !parent.hasClass('no-data');

                        if (!editableMode) {
                            if (e.target.id !== 'undefined' && e.target.classList.contains('search')) {
                                switch (code) {
                                    case keys.tab:
                                        if (e.shiftKey) {
                                            xeFocusUtility.clearFocusRing(elem);
                                            return true;
                                        } else {
                                            xeFocusUtility.clearFocusRing(elem);
                                            if (hasData) {
                                                var gridFirstRow = $(elem).closest('.table-container').find('.tbody tbody tr:first');
                                                var gridFirstRowFirstCell = $(elem).closest('.table-container').find('.tbody tbody tr:first td:first');
                                                parent.find('tr.active-row').removeClass(ACTIVEROW);
                                                $(gridFirstRow).addClass(ACTIVEROW);
                                                $(gridFirstRowFirstCell).addClass(FOCUSRING);
                                                $(gridFirstRowFirstCell).focus();
                                                e.preventDefault();
                                                return false;
                                            }
                                        }
                                }
                                return true;
                            } else {
                                switch (code) {
                                    case keys.left:
                                        if ($(this).is('td') && $(this).closest("td").is(":first-child")) {
                                            $(elem).addClass(FOCUSRING);
                                        } else if ($(this).is('th') && $(this).closest("th").is(":first-child")) {
                                            $(elem).addClass(FOCUSRING);
                                        } else {
                                            if ($(elem).hasClass(FOCUSRING)) {
                                                $(elem).removeClass(FOCUSRING);
                                            }
                                            $(elem).prev().focus();
                                            $(elem).prev().addClass(FOCUSRING);
                                        }
                                        e.preventDefault();
                                        return false;
                                        break;
                                    case keys.right:
                                        if ($(this).is('td') && $(this).closest("td").is(":last-child")) {
                                            $(elem).addClass(FOCUSRING);

                                        } else if ($(this).is('th') && $(this).closest("th").is(":last-child")) {
                                            $(elem).addClass(FOCUSRING);
                                        }
                                        else {
                                            if ($(elem).hasClass(FOCUSRING)) {
                                                $(elem).removeClass(FOCUSRING);
                                            }
                                            $(elem).next().focus();
                                            $(elem).next().addClass(FOCUSRING);
                                        }
                                        e.preventDefault();
                                        return false;
                                        break;
                                    case keys.enter:
                                        var inputElem = $(elem).find(xeFocusUtility.focusableElements());
                                        if(inputElem[0]!=undefined && inputElem[0].classList[0]=='select2-choice')
                                        {
                                            inputElem.parent().find('input')[1].focus();
                                        }
                                        if (inputElem.length > 0) {
                                            editableMode = true;
                                            parent.find('tr.active-row').removeClass(ACTIVEROW);
                                            $(elem).parent().addClass(ACTIVEROW);
                                            $(elem).addClass(FOCUSRING);
                                            $(inputElem[0]).focus();
                                            return false;
                                        }
                                        break;
                                    case keys.escape:
                                        editableMode = false;
                                        if ($(elem).hasClass(FOCUSRING)) {
                                            $(elem).removeClass(FOCUSRING);
                                        }
                                        if ($(elem).is(':input') || $(elem).is('a')) {
                                            $(elem).parent().focus();
                                            $(elem).parent().addClass(FOCUSRING);
                                        } else {
                                            $(elem).focus();
                                            $(elem).addClass(FOCUSRING);
                                        }
                                        e.preventDefault();
                                        return false;
                                        break;
                                    case keys.tab:
                                        var elementToFocus;
                                        var lastColumn, lastColumnTabbableContent, lastDataColumn, lastHeaderColumn;
                                        var expandParent, expandViewLastColumn, expandViewLastColumnTabbableContent, expandViewLastDataColumn;
                                        if (e.shiftKey) {
                                            var firstHeaderColumn = parent.find('> .hr-scrollable-content > .thead:visible tr th[tabindex="0"]:first-child')[0];
                                            if ($(e.target).is('th') || $(e.target).is('td')) {
                                                paginationPreviousGridCell = null;
                                                if (isSearchEnabled) {
                                                    xeFocusUtility.clearFocusRing(elem);
                                                    parent.find('tr.active-row').removeClass(ACTIVEROW);
                                                    parent.find('.toolbar .search-container input:visible').select().focus();
                                                } else {
                                                    elementToFocus = xeFocusUtility.getPreviousTabbableElement(firstHeaderColumn);
                                                }
                                            }
                                        }
                                        else {
                                            if (hasPagination) {
                                                var paginationControlDiv = $(elem).closest('.table-container').children().find('div.pagination-controls');
                                                var moveFocusToFirstElement = $(paginationControlDiv).find('input, button , select').not(':disabled');
                                                elementToFocus = $(moveFocusToFirstElement[0]);
                                                paginationPreviousGridCell = e.currentTarget;
                                            } else if ($(e.target).is('th') || $(e.target).is('td')) {
                                                paginationPreviousGridCell = null;
                                                lastColumn = parent.find('> .hr-scrollable-content > .tbody > table > tbody > tr[xe-row-injector]:last > td[xe-cell-injector][tabindex="0"]:last');
                                                lastColumnTabbableContent = lastColumn.find('[tabindex="0"]:last');
                                                lastDataColumn = lastColumnTabbableContent.length ? lastColumnTabbableContent[0] : lastColumn[0];
                                                if ($(e.target).is('th')) {
                                                    lastHeaderColumn = parent.find('.thead:visible tr th[tabindex="0"]:last-child')[0];
                                                    lastDataColumn = lastDataColumn || lastHeaderColumn;
                                                }
                                                elementToFocus = xeFocusUtility.getNextTabbableElement(lastDataColumn);
                                                expandParent = angular.element(elementToFocus).closest('.expand-view td');
                                                if (expandParent.length) {
                                                    expandViewLastColumn = expandParent.find('> .hr-scrollable-content > .tbody > table > tbody > tr[xe-row-injector]:last > td[xe-cell-injector][tabindex="0"]:last');
                                                    expandViewLastColumnTabbableContent = expandViewLastColumn.find('[tabindex="0"]:last');
                                                    expandViewLastDataColumn = expandViewLastColumnTabbableContent.length ? expandViewLastColumnTabbableContent[0] : expandViewLastColumn[0];
                                                    if (!expandViewLastDataColumn && !hasData) {
                                                        expandViewLastDataColumn = expandParent.find('.tbody[tabindex]')[0];
                                                    }
                                                    elementToFocus = xeFocusUtility.getNextTabbableElement(expandViewLastDataColumn);
                                                }
                                            }
                                        }
                                        if (elementToFocus) {
                                            xeFocusUtility.clearFocusRing(elem);
                                            parent.find('tr.active-row').removeClass(ACTIVEROW);
                                            elementToFocus.focus();
                                        }
                                        e.preventDefault();
                                        return false;
                                        break;
                                    case keys.PAGE_UP:
                                        xeFocusUtility.clearFocusRing(elem);
                                        var currentIndex = $(elem).index();
                                        var gridFirstRow = $(elem).closest('.table-container').find('.tbody tbody tr:first');
                                        var selectedCell = $(gridFirstRow).children()[currentIndex];
                                        $(selectedCell).focus();
                                        $(selectedCell).addClass(FOCUSRING);
                                        return false;
                                        break;
                                    case keys.PAGE_DOWN:
                                        xeFocusUtility.clearFocusRing(elem);
                                        if(isTotalEnabled){
                                            var currentIndex = $(elem).index();
                                            var lastRow = $(elem).closest('.table-container').find('.trDesktop thead tr');
                                            var selectedCell = $(lastRow).children()[currentIndex];
                                            $(selectedCell).focus();
                                            $(selectedCell).addClass(FOCUSRING);
                                        } else {
                                            var currentIndex = $(elem).index();
                                            var gridLasttRow = $(elem).closest('.table-container').find('.tbody tbody tr:last');
                                            var selectedCell = $(gridLasttRow).children()[currentIndex];
                                            $(selectedCell).focus();
                                            $(selectedCell).addClass(FOCUSRING);
                                        }
                                        return false;
                                        break;
                                    case keys.HOME:
                                        xeFocusUtility.clearFocusRing(elem);
                                        var firstColumnCell = $(elem).parent().find('td:first');
                                        if(firstColumnCell.length === 0){
                                            firstColumnCell = $(elem).parent().find('th:first');
                                        }
                                        $(firstColumnCell).focus();
                                        $(firstColumnCell).addClass(FOCUSRING);
                                        return false;
                                        break;
                                    case keys.END:
                                        xeFocusUtility.clearFocusRing(elem);
                                        var lastColumnCell = $(elem).parent().find('td:last');
                                        if(lastColumnCell.length === 0){
                                            lastColumnCell = $(elem).parent().find('th:last');
                                        }
                                        $(lastColumnCell).focus();
                                        $(lastColumnCell).addClass(FOCUSRING);
                                        return false;
                                        break;
                                    case (keys.downArrow):
                                        if (undefined === e.target.attributes['role'] || COLUMNHEADER !== e.target.attributes['role'].nodeValue) {
                                            var allElements = $(elem).parent().find('td');
                                            if ($(allElements).hasClass(FOCUSRING)) {
                                                $(allElements).removeClass(FOCUSRING);
                                            }
                                            if (allElements.length > 0) {
                                                var colIndex = $(elem).index();
                                                var nextRow = $(elem).parent().nextAll('tr:visible:first');
                                                if (nextRow.length > 0) {
                                                    parent.find('tr.active-row').removeClass(ACTIVEROW);
                                                    $(nextRow).addClass(ACTIVEROW);
                                                    var nextColums = $(nextRow).find('> td');
                                                    if ($(nextColums[colIndex]).is(':input') || elem.is('a')) {
                                                        $(nextColums[colIndex]).parent().focus();
                                                        $(nextColums[colIndex]).parent().addClass(FOCUSRING);

                                                    } else {
                                                        $(nextColums[colIndex]).focus();
                                                        $(nextColums[colIndex]).addClass(FOCUSRING);
                                                    }
                                                } else {
                                                    // Check if there is any total row in the grid clearFocusRing(elem);
                                                    if(isTotalEnabled){
                                                        xeFocusUtility.clearFocusRing(elem);
                                                        parent.find('tr.active-row').removeClass(ACTIVEROW);
                                                        $(elem).removeClass(FOCUSRING);
                                                        var colIndex = $(elem).index();
                                                        var totalRowFirstRow = $(elem).closest('.table-container').find('.trDesktop thead tr:first');
                                                        var totalRowCols = $(totalRowFirstRow).find('th');
                                                        $(totalRowFirstRow).addClass(ACTIVEROW);
                                                        $(totalRowCols[colIndex]).focus();
                                                        $(totalRowCols[colIndex]).addClass(FOCUSRING);
                                                        paginationPreviousGridCell = e.currentTarget;
                                                    } else {
                                                        $(elem).addClass(FOCUSRING);
                                                    }
                                                }
                                            }
                                            e.preventDefault();
                                            return false;
                                        } else {
                                            var allElements = $(elem).parent().find('th');
                                            xeFocusUtility.clearFocusRing(elem);
                                            if (allElements.length > 0 && hasData) {
                                                parent.find('tr.active-row').removeClass(ACTIVEROW);
                                                var colIndex = $(elem).index();
                                                var gridTableBody = $(elem).closest('.table-container').find('tbody');
                                                var focusGridCell = gridTableBody.find('tr:first td')[colIndex];
                                                $(focusGridCell).parent().addClass(ACTIVEROW);
                                                var newtd = $(focusGridCell).parent().find('td');
                                                $(newtd[colIndex]).addClass(FOCUSRING);
                                                $(focusGridCell).focus();
                                            } else if (!hasData) {
                                                parent.find('.tbody[tabindex]').focus();
                                            }
                                            return false;
                                        }
                                        break;
                                    case (keys.upArrow):
                                        var colIndex;
                                        if (elem.closest('tr').index() > 0) {
                                            parent.find('tr.active-row').removeClass(ACTIVEROW);
                                            var allElements = $(elem).parent().find('td');
                                            if ($(allElements).hasClass(FOCUSRING)) {
                                                $(allElements).removeClass(FOCUSRING);
                                            }
                                            if (allElements.length > 0) {
                                                colIndex = $(elem).index();
                                                var prevRow = $(elem).parent().prevAll('tr:visible:first');
                                                var prevColums = $(prevRow).find('> td');
                                                if ($(prevColums[colIndex]).is(':input') || $(elem).is('a')) {
                                                    $(prevColums[colIndex]).parent().focus();
                                                    $(prevColums[colIndex]).parent().addClass(FOCUSRING);
                                                } else {
                                                    $(prevColums[colIndex]).focus();
                                                    $(prevColums[colIndex]).addClass(FOCUSRING);
                                                }
                                                $(prevRow).addClass(ACTIVEROW);
                                                $(prevRow[colIndex]).removeClass(FOCUSRING);
                                            }
                                            e.preventDefault();
                                            return false;
                                        } else if ($(elem).closest('tr').index() === 0) {
                                            // Check if there is any total row in the grid clearFocusRing(elem);
                                            var isTotal = $(elem).closest('.tbody').length === 0 && $(elem).closest('.thead').length === 0;
                                            if(isTotalEnabled && isTotal){
                                                $('td.focus-ring').removeClass(FOCUSRING);
                                                var tdPosition = $(elem).closest('th').index();
                                                if (tdPosition !== -1) {
                                                    $('th.focus-ring').removeClass(FOCUSRING);
                                                    var bodyArr = $(elem).closest('.table-container').find('tbody');
                                                    $(bodyArr[0]).find('tr:last').find('td')[tdPosition].focus();
                                                    var newtd = $(bodyArr[0]).find('tr:last').find('td')[tdPosition];
                                                    $(newtd).addClass(FOCUSRING);
                                                }

                                            } else {
                                                parent.find('tr.active-row').removeClass(ACTIVEROW);
                                                $('td.focus-ring').removeClass(FOCUSRING);
                                                var tdPosition = $(elem).is('td') ? $(elem).closest('td').index() : -1;
                                                if (tdPosition !== -1) {
                                                    var headArr = $(elem).closest('.table-container').find('thead');
                                                    $(headArr[0]).find('tr').find('th')[tdPosition].focus();
                                                    var newtd = $(headArr[0]).find('tr').find('th')[tdPosition];
                                                    $(newtd).addClass(FOCUSRING);
                                                }
                                            }
                                            e.preventDefault();
                                            return false;
                                        }
                                        break;
                                }
                            }
                        } else if (editableMode) {
                            switch (code) {
                                case keys.enter:
                                    var inputElem = $(elem).find(xeFocusUtility.focusableElements());
                                    if (inputElem.length > 0) {
                                        editableMode = true;
                                        $(elem).addClass(FOCUSRING);
                                        $(inputElem[0]).focus();
                                        return false;
                                    }
                                    break;
                                case keys.escape:
                                    editableMode = false;
                                    if ($(elem).hasClass(FOCUSRING)) {
                                        $(elem).removeClass(FOCUSRING);
                                    }
                                    if ($(elem).is(':input') || $(elem).is('a')) {
                                        $(elem).parent.focus();
                                        $(elem).parent().addClass(FOCUSRING);
                                    } else {
                                        $(elem).focus();
                                        $(elem).addClass(FOCUSRING);
                                    }
                                    e.preventDefault();
                                    return false;
                                    break;
                                case keys.tab:
                                    if (e.shiftKey) {
                                        var closestColumn;
                                        var allActionableElementInRow = $(elem).parent().find(xeFocusUtility.focusableElements());
                                        var currentFocussedElement = e.target;
                                        var inputElementIndex = $.inArray(currentFocussedElement, allActionableElementInRow);
                                        if (inputElementIndex > 0) {
                                            if ($(elem).hasClass(FOCUSRING)) {
                                                $(elem).removeClass(FOCUSRING);
                                            }
                                            var moveFocus = allActionableElementInRow[inputElementIndex - 1];
                                            inputElementIndex--;
                                            closestColumn = $(moveFocus).closest('td');
                                            $(closestColumn).addClass(FOCUSRING);
                                            if($(moveFocus)[0]!=undefined && $(moveFocus)[0].classList[0]=='select2-choice')
                                            {
                                                var focusShiftTabUiSelect = allActionableElementInRow[inputElementIndex - 1];
                                                $(focusShiftTabUiSelect).focus();
                                            }
                                            else {
                                                moveFocus.focus();
                                            }
                                        } else {
                                            var prevParent = elem.parent().prev();
                                            if (prevParent.length > 0) {
                                                if (elem.hasClass(FOCUSRING)) {
                                                    elem.removeClass(FOCUSRING);
                                                }
                                                var allActionableElementInRow = prevParent.find(xeFocusUtility.focusableElements());
                                                if (allActionableElementInRow.length > 0) {
                                                    var moveFocus = allActionableElementInRow[allActionableElementInRow.length - 1];
                                                    closestColumn = $(moveFocus).closest('td');
                                                    $(closestColumn).addClass(FOCUSRING);
                                                    $(moveFocus).focus();
                                                }
                                            }
                                        }
                                        return false;
                                    } else {
                                        var closestColumn;
                                        var allActionableElementInRow = $(elem).parent().find(xeFocusUtility.focusableElements());
                                        var currentFocussedElement = e.target;
                                        var inputElementIndex = $.inArray(currentFocussedElement, allActionableElementInRow);
                                        if (inputElementIndex < allActionableElementInRow.length - 1) {
                                            if ($(elem).hasClass(FOCUSRING)) {
                                                $(elem).removeClass(FOCUSRING);
                                            }
                                            var moveFocus = allActionableElementInRow[inputElementIndex + 1];
                                            closestColumn = $(moveFocus).closest('td');
                                            $(closestColumn).addClass(FOCUSRING);
                                            inputElementIndex++;
                                            if($(moveFocus)[0]!=undefined && $(moveFocus)[0].classList[0]=='select2-choice')
                                            {
                                                $(moveFocus).parent().find('input')[1].focus();
                                            }
                                            else
                                            {
                                                $(moveFocus).focus();
                                            }
                                        } else {
                                            var nextParent = $(elem).parent().next();
                                            if (nextParent.length > 0) {
                                                if ($(elem).hasClass(FOCUSRING)) {
                                                    $(elem).removeClass(FOCUSRING);
                                                }
                                                var allActionableElementInRow = nextParent.find(xeFocusUtility.focusableElements());
                                                if (allActionableElementInRow.length > 0) {
                                                    var moveFocus = allActionableElementInRow[0];
                                                    closestColumn = $(moveFocus).closest('td');
                                                    $(closestColumn).addClass(FOCUSRING);
                                                    $(moveFocus).focus();
                                                }
                                            } else {
                                                if ($(elem).hasClass(FOCUSRING)) {
                                                    $(elem).removeClass(FOCUSRING);
                                                }
                                                var allPreviousRows = $(elem).parent().prevAll();
                                                if (allPreviousRows.length > 0) {
                                                    var firstRow = allPreviousRows[allPreviousRows.length - 1];
                                                    var allActionableElements = $(firstRow).find(':input, a');
                                                    if (allActionableElements.length > 0) {
                                                        $(allActionableElements[0]).focus();
                                                    }
                                                    closestColumn = $(allActionableElements[0]).closest('td');
                                                    $(closestColumn).addClass(FOCUSRING);
                                                }
                                            }
                                        }
                                    }
                                    return false;
                                    break;
                                case (keys.downArrow):
                                    //do nothing
                                    return false;
                                    break;
                                case (keys.upArrow):
                                    //do nothing
                                    return false;
                                    break;
                            }
                        }
                    });
                }
            }
        }])
        .directive('xeFocusNoDataMsg', ['$timeout', 'xeFocusUtility', function($timeout, xeFocusUtility) {
            var FOCUSRING = 'focus-ring';
            return {
                restrict: 'A',
                link: function (scope, elem) {
                    $timeout(function () {
                        var parent = elem.parents('.table-container').last();
                        var hasData = !parent.hasClass('no-data');
                        if (!hasData) {
                            elem.bind('keydown', function (e) {
                                var code = e.keyCode || e.which;
                                var isSearchEnabled = parent.attr('toolbar') === 'true' && !!parent.find('.toolbar .search-container input:visible').length;

                                if (code === keys.tab) {
                                    if (e.shiftKey) {
                                        if (isSearchEnabled) {
                                            parent.find('.toolbar .search-container input:visible').select().focus();
                                            e.preventDefault();
                                            return false;
                                        } else {
                                            var elementToFocus = parent.find('> .hr-scrollable-content > .thead:visible tr th[tabindex="0"]:first-child')[0];
                                            if (!elementToFocus) {
                                                elementToFocus = xeFocusUtility.getPreviousTabbableElement(elem[0]);
                                            }
                                            elementToFocus.focus();
                                            e.preventDefault();
                                            return false;
                                        }
                                    }
                                } else if (code === keys.upArrow) {
                                    if (!hasData) {
                                        var firstHeaderColumn = parent.find('> .hr-scrollable-content > .thead:visible tr th[tabindex="0"]:first-child')[0];
                                        firstHeaderColumn.focus();
                                        $(firstHeaderColumn).addClass(FOCUSRING);
                                    }
                                }
                            });
                        }
                    });
                }
            };
        }])
        .directive('xeClickGrid', ['xeFocusUtility', function(xeFocusUtility){
            return{
                restrict:'A',
                link: function ($scope, elem) {
                    //Binding Click event for removing focus-ring class.
                    elem.bind('click', function (e) {
                        xeFocusUtility.clearFocusRing(elem);
                        $('tr.active-row').removeClass('active-row');
                        editableMode = false;
                        $(elem).addClass('focus-ring');
                        $(elem).parent().addClass('active-row');
                    });
                }

            }
        }])
        .directive('xeGridPaginationControl', ['xeFocusUtility', function(xeFocusUtility) {
            var FOCUSRING = 'focus-ring';
            return {
                restrict: 'A',
                link: function ($scope, elem) {
                    //Binding Click event for removing focus-ring class.
                    elem.bind('keydown', function (e) {
                        xeFocusUtility.clearFocusRing(elem);
                        var code = e.keyCode || e.which;
                        var parent = elem.parents('.table-container').last();
                        var hasData = !parent.hasClass('no-data');
                        var paginationControlDiv =$(elem).closest('.table-container').children().find('div.pagination-controls');
                        var moveFocusToFirstElement = $(paginationControlDiv).find('input, button , select').not(':disabled');
                        var inputElementIndex = $.inArray(e.target, moveFocusToFirstElement);
                        if (inputElementIndex === 0) {
                            if (e.shiftKey) {
                                switch (code) {
                                    case keys.tab:
                                        if (!hasData) {
                                            var firstHeaderColumn = parent.find('> .hr-scrollable-content > .thead:visible tr th[tabindex="0"]:first-child')[0];
                                            firstHeaderColumn.focus();
                                            $(firstHeaderColumn).addClass(FOCUSRING);
                                        } else if ($(paginationPreviousGridCell).is(':visible') && $(elem).parent('.table-container').find(paginationPreviousGridCell)) {
                                            $(paginationPreviousGridCell).focus();
                                            if ($(paginationPreviousGridCell).is('td')) {
                                                $(paginationPreviousGridCell).parent().addClass('active-row');
                                                $(paginationPreviousGridCell).addClass('focus-ring');
                                            }
                                        } else {
                                            var associatedTable = $(elem).parent('.table-container');
                                            var gridFirstRow = $(associatedTable).find('tbody tr:first');
                                            var gridFirstRowFirstCell = $(associatedTable).find('tbody tr:first td:first');
                                            $(gridFirstRow).addClass('active-row');
                                            $(gridFirstRowFirstCell).focus();
                                            $(gridFirstRowFirstCell).addClass('focus-ring');
                                        }
                                        e.preventDefault();
                                        return false;
                                        break;
                                    case keys.downArrow:
                                        return true;
                                        break;
                                    case keys.upArrow:
                                        return true;
                                        break;
                                }
                            } else {
                                return true;
                            }
                        }
                    });
                }
            }
        }]);
}());


(function () {
    'use strict';

    // The about Modal consumes aboutService which has business logic. We can share same data to entire application
    // aboutService has two configurable settings. Those are method and url
    // And the about Modal has configurable api object with title, name, version, general category, plugin category, other plugin category and copyright
    // Which is enable to configure your api key name's to this component.

    angular.module('aboutModal', [])
        .provider('aboutService', function () {
            this.method = "GET";
            this.backendUrl = "";
            this.setMethod = function (method) {
                if (method) {
                    this.method = method;
                }
            };
            this.setBackendUrl = function (newUrl) {
                if (newUrl) {
                    this.backendUrl = newUrl;
                }
            };
            this.$get = ['$http', '$templateCache', function ($http, $templateCache) {
                var self = this,
                    service;

                service = {
                    aboutInfo: function () {
                        return $http({method: self.method, url: self.backendUrl, cache: $templateCache});
                    }
                };

                return service;
            }];
        })
        .directive('xeAboutModal', ['aboutService', function (aboutService) {
            return {
                restrict: 'EA',
                scope: {
                    show: '=',
                    api: '=',
                    focusbackelement:'@'
                },
                replace: true, // Replace with the template below
                transclude: true, // we want to insert custom content inside the directive
                templateUrl: 'templates/dialog_default.html',
                controller: ['$scope', function ($scope) {
                    $scope.hide = function () {
                        $scope.show = false;
                        if ($scope.focusBackElement) {
                            angular.element('#' + $scope.focusBackElement).focus();
                        }
                    };
                    $scope.focusBackElement = $scope.focusbackelement;
                    aboutService.aboutInfo()
                        .then(function (response) {
                            $scope.status = response.status;
                            $scope.about = response.data;
                            $scope.hidePlatformVersion = false;
                            if ($scope.about["about.banner.platform.version"] === undefined){
                                $scope.hidePlatformVersion = true;
                            }
                        }, function (response) {
                            if (response.status === 500) {
                                aboutService.aboutInfo()
                                    .then(function (response) {
                                        $scope.status = response.status;
                                        $scope.about = response.data;
                                    }, function (response) {
                                        $scope.about = response.data || "Request failed";
                                        $scope.status = response.status;
                                    });
                            } else {
                                $scope.about = response.data || "Request failed";
                                $scope.status = response.status;
                            }
                        });
                }],
                link: function (scope, ele) {
                    ele.on('keydown', function (event) {
                        if (event.keyCode === 27 || (document.activeElement.className === "xe-modal-close" && event.keyCode === 13)) {
                            scope.show = false;
                            scope.$apply();
                            if(scope.focusBackElement) {
                                angular.element("#" + scope.focusBackElement).focus();
                            }
                        }
                        if (!event.shiftKey && event.keyCode === 9) {
                            if ("xeModalPrivacyLink" === document.activeElement.id) {
                                event.preventDefault();
                                angular.element('#xeModalClose').focus();
                            }
                            else if ("xe-modal-close" === document.activeElement.className) {
                                event.preventDefault();
                                angular.element('#xeModalPrivacyLink').focus();
                            }
                        }
                        if (event.shiftKey && event.keyCode === 9) {
                            if ("xeModalPrivacyLink" === document.activeElement.id) {
                                event.preventDefault();
                                angular.element('#xeModalClose').focus();
                            }
                            else if ("xe-modal-close" === document.activeElement.className) {
                                event.preventDefault();
                                angular.element('#xeModalPrivacyLink').focus();
                            }
                        }

                    });
                }
            };
        }]);
}());

/*****************************************************
 *  © 2016-2022 Ellucian Company L.P. and its affiliates. *
 *****************************************************/

; // safe for iife
(function () {

    'use strict';

    angular.module('pieChartModule', [])
        .factory('d3', ['$window', '$log', function ($window, $log) {
            if (!$window.d3) {
                $log.error('D3 must be present');
            }
            return $window.d3;
        }])
        .directive('xePieChart', ['d3', '$window', '$log', '$timeout', 'Language', function (d3, $window, $log, $timeout, Language) {

            var uniqueId = 0;

            function draw(tooltip, table, svg, radius, scope, options, element) {

                // var declaration
                var subdata = [], other, subdatatotal, total,
                    subPieStartAngle, subPieEndAngle,
                    pie, subPie,
                    arc, lineArc, lineOuterArc, subArc, lineSubArc, lineSubOuterArc,
                    color, subColor,
                    slice, text, polyline, bgSubSlice, subslice, subtext, subpolyline, ua, msie, trident, edge;

                // remove the old data
                if (table) {
                    table.select('thead').remove();
                    table.select('tbody').remove();
                    table.append('thead').attr('class', 'xe-pie-table-head');
                    table.append('tbody').attr('class', 'xe-pie-table-body');
                }

                svg.selectAll('g').remove();

                svg.append("text")
                    .attr("text-anchor", "middle")
                    .attr('font-size', '4em')
                    .attr('y', 20)
                   .text(110);

                 svg.append("g").attr({
                    "role": "presentation",
                    "class": "xe-pie-slices"
                });
                svg.append("g").attr({
                    "role": "listitem",
                    "class": "xe-pie-labels",
                    'id': "main-group-" + uniqueId,
                    'aria-live': "polite",
                    'aria-relevant': "additions removals"
                });
                svg.append("g").attr({
                    "role": "presentation",
                    "class": "xe-pie-lines"
                });

                // render when if needed
                if (scope.data.length > 7) {
                    svg.append('g').attr({
                        'role': 'presentation',
                        'class': 'xe-pie-bg-sub-slice'
                    });
                    svg.append("g").attr({
                        'role': 'presentation',
                        "class": "xe-pie-sub-slices"
                    });
                    svg.append("g").attr({
                        'role': 'listitem',
                        "class": "xe-pie-sub-labels",
                        'id': "other-group-" + uniqueId,
                        'aria-live': "polite",
                        'aria-relevant': "additions removals"
                    });
                    svg.append("g").attr({
                        'role': 'presentation',
                        "class": "xe-pie-sub-lines"
                    });
                }

                function tabulate(data, columns) {
                    // var declaration
                    var thead, tbody, rows, dtLabel = columns[0], dtValue = columns[1], dtPercentage = columns[2];

                    thead = table.select('thead.xe-pie-table-head');
                    tbody = table.select('tbody.xe-pie-table-body');

                    // append the header row
                    thead.append("tr")
                        .selectAll("th")
                        .data(columns)
                        .enter()
                        .append("th")
                        .text(function (column) {
                            return column;
                        });

                    // create a row for each object in the data
                    rows = tbody.selectAll("tr")
                        .data(data)
                        .enter()
                        .append("tr");

                    // create a cell in each row for each column
                    rows.selectAll("td")
                        .data(function (row) {
                            return columns.map(function (column) {
                                row[dtLabel] = row.label;
                                row[dtValue] = row.value;
                                if (!Language.isRtl()) {
                                    if (subdatatotal || row[dtValue]) {
                                        row[dtPercentage] = (Math.round(1000 * row[dtValue] / subdatatotal) / 10).toFixed(2) + '%';
                                    } else {
                                        row[dtPercentage] = '0.00%';
                                    }
                                }
                                if (Language.isRtl()) {
                                    if (subdatatotal || row[dtValue]) {
                                        row[dtPercentage] = '%' + (Math.round(1000 * row[dtValue] / subdatatotal) / 10).toFixed(2);
                                    } else {
                                        row[dtPercentage] = '%0.00';
                                    }
                                }
                                return { column: column, value: row[column] };
                            });
                        })
                        .enter()
                        .append("td")
                        .html(function (d) {
                            return d.value;
                        });

                    return table;
                }
                function detectIE() {
                    ua = window.navigator.userAgent;
                    msie = ua.indexOf('MSIE ');
                    trident = ua.indexOf('Trident/');
                    if (msie > 0 || trident > 0) {
                        return true;
                    }
                    return false;
                }
                function detectEdge() {
                    edge = ua.indexOf('Edge/');
                    if (edge > 0) {
                        return true;
                    }
                    return false;
                }
                function mouseover(d) {

                    scope.valueforclick=d;
                     if (tooltip && d3.select(this).style("opacity") !== '0') {
                        tooltip.select('.xe-pie-tooltip-label').html(d.data.label);
                        tooltip.select('.xe-pie-tooltip-value').html(d.data.value);
                        tooltip.select('.xe-pie-tooltip-percent').html(d.data.percentage);
                        tooltip.style('display', 'block');
                    }
                }
                 function mouseout(d) {
                    if (tooltip) {
                        tooltip.style('display', 'none');
                    }
                }
                 function mousemove(d) {
                    if (tooltip) {
                        var te = angular.element(element).find('.xe-pie-tooltip')[0],
                            width = te.clientWidth,
                            height = te.clientHeight;
                        if (Language.isRtl() && detectIE()) {
                            tooltip.style('top', (d3.event.layerY - height - 10) + 'px').style('left', ((d3.event.layerX - width + 10) / 2) + 'px');
                        } else {
                            tooltip.style('top', (d3.event.layerY - height - 10) + 'px').style('left', (d3.event.layerX - width / 2) + 'px');
                        }
                    }
                }

                function toggle(d) {
                    if (tooltip) {
                        var te = angular.element(element).find('.xe-pie-tooltip')[0],
                            width = te.clientWidth,
                            height = te.clientHeight;
                        if (Language.isRtl() && detectIE()) {
                            tooltip.style('top', (d3.event.layerY - height - 10) + 'px').style('left', ((d3.event.layerX - width + 10) / 2) + 'px');
                        } else {
                            tooltip.style('top', (d3.event.layerY - height - 10) + 'px').style('left', (d3.event.layerX - width / 2) + 'px');
                        }
                    }
                }

                function key(d) {
                    return d.data.label;
                }

                function midAngle(d) {
                    return d.startAngle + (d.endAngle - d.startAngle) / 2;
                }

                function wrap(textWrap) {
                    textWrap.each(function () {
                        var t = d3.select(this),
                            si = 0,
                            ei = 10,
                            w = t.text(),
                            l = w.substring(si, ei),
                            y = t.attr("y"),
                            dy = parseFloat(textWrap.attr("dy")),
                            tspan = t.text(null).append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em");

                        while (l) {
                            if (si === 0) {
                                tspan.text(l.trim());
                            } else {
                                tspan = t.append("tspan").attr("x", 0).attr("y", y).attr("dy", dy + "em").text(l.trim());
                            }
                            si += 10;
                            ei += 10;
                            l = w.substring(si, ei);
                        }
                    });
                }

                function relaxSub() {
                    // var declaration
                    var again, labelElements;

                    again = false;

                    if (subtext) {

                        subtext.each(function (d1) {

                            var that = this,
                                a = this.getBoundingClientRect();

                            subtext.each(function (d2) {

                                if (this !== that) {
                                    var b = this.getBoundingClientRect(), dy, tt, to;
                                    if ((Math.abs(a.left - b.left) * 2 < (a.width + b.width)) && (Math.abs(a.top - b.top) * 2 < (a.height + b.height))) {
                                        // overlap, move labels
                                        dy = (Math.max(0, a.bottom - b.top) + Math.min(0, a.top - b.bottom)) * 0.01;
                                        tt = d3.transform(d3.select(this).attr("transform"));
                                        to = d3.transform(d3.select(that).attr("transform"));
                                        again = true;

                                        to.translate = [radius * 0.65 * (midAngle(d1) < Math.PI ? 1 : -1), to.translate[1] + dy];
                                        tt.translate = [radius * 0.65 * (midAngle(d2) < Math.PI ? 1 : -1), tt.translate[1] - dy];
                                        d3.select(this).attr("transform", "translate(" + tt.translate + ")");
                                        d3.select(that).attr("transform", "translate(" + to.translate + ")");
                                    }
                                }
                            });
                        });

                        if (again) {
                            labelElements = subtext[0];
                            if (subpolyline) {
                                subpolyline.attr('points', function (d, i) {
                                    var labelForLine = d3.select(labelElements[i]),
                                        t = d3.transform(labelForLine.attr("transform")),
                                        tx = t.translate[0],
                                        ty = t.translate[1];
                                    return [lineSubArc.centroid(d), lineSubOuterArc.centroid(d), tx, ty];
                                });
                            }
                            $timeout(relaxSub);
                        }
                    }
                }

                function toggle_donut_chart(d, i) {
                    d3.event.preventDefault();
                    d3.event.stopPropagation();
                    if (i === 6 && subdata.length > 7) {
                        slice.style('opacity', function (d, i) {
                            if (i === 6) {
                                return 1.0;
                            }
                            return 0.1; // 10% of opacity
                        });
                        text.style('display', 'none').attr('aria-hidden', true);
                        polyline.style('display', 'none').attr('aria-hidden', true);
                        if (bgSubSlice || subslice || subtext || subpolyline) {
                            bgSubSlice.style('display', 'block').attr('aria-hidden', false);
                            subslice.style('display', 'block').attr('aria-hidden', false);
                            subtext.style('display', 'block').attr('aria-hidden', false);
                            subpolyline.style('display', 'block').attr('aria-hidden', false);
                            subtext.selectAll('.xe-pie-light-text').call(wrap);
                            relaxSub();
                        }
                    } else {
                        if (bgSubSlice || subslice || subtext || subpolyline) {
                            bgSubSlice.style('display', 'none').attr('aria-hidden', true);
                            subslice.style('display', 'none').attr('aria-hidden', true);
                            subtext.style('display', 'none').attr('aria-hidden', true);
                            subpolyline.style('display', 'none').attr('aria-hidden', true);
                        }
                        slice.style('opacity', 1.0);
                        text.style('display', 'block').attr('aria-hidden', false);
                        polyline.style('display', 'block').attr('aria-hidden', false);
                    }
                }

                function touchTarget() {
                    d3.select(this).classed("xe-pie-touch", !d3.select(this).classed("xe-pie-touch"));
                }

                function relax() {
                    // var declaration
                    var again, labelElements;

                    again = false;

                    if (text) {

                        text.selectAll("text").each(function (d1) {

                            var that = this,
                                a = this.getBoundingClientRect();

                            text.selectAll("text").each(function (d2, i) {

                                if (this !== that) {
                                    var b = this.getBoundingClientRect(), dy, tt, to;
                                    if ((Math.abs(a.left - b.left) * 2 < (a.width + b.width)) && (Math.abs(a.top - b.top) * 2 < (a.height + b.height))) {
                                        // overlap, move labels
                                        // dx = (Math.max(0, a.left - b.right) + Math.min(0, a.right - b.left)) * 0.01;
                                        dy = (Math.max(0, a.bottom - b.top) + Math.min(0, a.top - b.bottom)) * 0.01;
                                        tt = d3.transform(d3.select(this).attr("transform"));
                                        to = d3.transform(d3.select(that).attr("transform"));
                                        again = true;

                                        to.translate = [radius * 0.55 * (midAngle(d1) < Math.PI ? 1 : -1), to.translate[1] + dy];
                                        tt.translate = [radius * 0.55 * (midAngle(d2) < Math.PI ? 1 : -1), tt.translate[1] - dy];

                                        d3.select(this).attr("transform", "translate(" + tt.translate + ")");
                                        d3.select(that).attr("transform", "translate(" + to.translate + ")");
                                    }
                                }
                            });
                        });

                        if (again) {
                            labelElements = text[0];
                            if (polyline) {
                                polyline.attr('points', function (d, i) {
                                    var labelForLine = d3.select(labelElements[i]).select('text'),
                                        t = d3.transform(labelForLine.attr("transform")),
                                        tx = t.translate[0],
                                        ty = t.translate[1];
                                    return [lineArc.centroid(d), lineOuterArc.centroid(d), tx, ty];
                                });
                            }
                            $timeout(relax);
                        }
                    }
                }

                function change(data) {

                    /* ------- PIE SLICES -------*/
                    slice = svg.select(".xe-pie-slices").selectAll("path.xe-pie-slice")
                        .data(pie(data), key);

                    slice.enter()
                        .insert("path")
                        .style("fill", function (d, i) {
                            if (i === 6) {
                                subPieStartAngle = d.startAngle;
                                subPieEndAngle = d.endAngle;
                            }
                            return color(i);
                        })
                        .attr("class", "xe-pie-slice")
                        .on('click', toggle_donut_chart)
                        .on('touchstart', toggle_donut_chart)
                        .on('mouseover', mouseover)
                        .on('touchstart', mouseover)
                        .on('touchstart', touchTarget)
                        .on('mouseout', mouseout)
                        .on('touchend', mouseout)
                        .on('touchend', touchTarget)
                        .on('mousemove', mousemove)
                        .on('touchmove', mousemove);

                    slice.transition().duration(1000)
                        .attrTween("d", function (d) {
                            this.d3current = this.d3current || d;
                            var interpolate = d3.interpolate(this.d3current, d);
                            this.d3current = interpolate(0);
                            return function (t) {
                                return arc(interpolate(t));
                            };
                        });

                    slice.exit()
                        .remove();

                    /* ------- TEXT LABELS -------*/

                    text = svg.select(".xe-pie-labels").selectAll("text")
                        .data(pie(data), key);

                    text.enter()
                        .append('a')
                        .attr({
                            'xlink:href': function (d, i) {
                                if (d.data.label === options.pie.otherLabel) {
                                    return '#other-group-' + uniqueId;
                                }
                                return;
                            },
                            'tabindex': function (d, i) {
                                if (d.data.label === options.pie.otherLabel) {
                                    return 0;
                                }
                                return;
                            },
                            'aria-controls': function (d, i) {
                                if (d.data.label === options.pie.otherLabel) {
                                    return 'other-group-' + uniqueId;
                                }
                                return;
                            },
                            'aria-label': function (d, i) {
                                if (d.data.label === options.pie.otherLabel) {
                                    return options.pie.group.otherAriaLabel;
                                }
                                return;
                            }
                        })
                        .on('click', toggle_donut_chart)
                        .on('touchstart', toggle_donut_chart)
                        .append("text")
                        .attr({
                            'class': function (d, i) {
                                if (d.data.label === options.pie.otherLabel) {
                                    return 'xe-pie-large-text xe-pie-other-text';
                                }
                                return 'xe-pie-large-text';
                            }
                        })
                        .on('click', toggle_donut_chart)
                        .on('touchstart', toggle_donut_chart)
                        .on('mouseover', mouseover)
                        .on('touchstart', mouseover)
                        .on('mouseout', mouseout)
                        .on('touchend', mouseout)
                        .on('mousemove', mousemove)
                        .on('touchmove', mousemove);

                    text.selectAll("text").append('tspan')
                        .attr('x', '0')
                        .attr('dy', function (d) {
                            if ((d.startAngle + d.endAngle) / 2 > Math.PI / 2 && (d.startAngle + d.endAngle) / 2 < Math.PI * 1.5) {
                                return '1em';
                            }
                            return '-1em';
                        })
                        .attr('class', 'xe-pie-bold-text')
                        .text(function (d) {
                            return d.data.percentage;
                        });
                    text.on("click", function(d) {
                    });
                    text.selectAll("text").append('tspan')
                        .attr('x', '0')
                        .attr('dy', '1em')
                        .attr('class', 'xe-pie-light-text')
                        .text(function (d) {
                            return d.data.label;
                        });

                    text.selectAll('text').transition().duration(1000)
                        .attrTween("transform", function (d) {
                            this.d3current = this.d3current || d;
                            var interpolate = d3.interpolate(this.d3current, d);
                            this.d3current = interpolate(0);
                            return function (t) {
                                var d2 = interpolate(t),
                                    pos = lineOuterArc.centroid(d2);
                                // pos[0] = radius * 0.6 * (midAngle(d2) < Math.PI ? 1 : -1);
                                return "translate(" + pos + ")";
                            };
                        })
                        .attrTween("text-anchor", function (d) {
                            this.d3current = this.d3current || d;
                            var interpolate = d3.interpolate(this.d3current, d);
                            this.d3current = interpolate(0);
                            return function (t) {
                                var d2 = interpolate(t);
                                if (!Language.isRtl()) {
                                    return midAngle(d2) < Math.PI ? "start" : "end";
                                }
                                if (detectIE() || detectEdge()) {
                                    return midAngle(d2) < Math.PI ? "start" : "end";
                                }
                                return midAngle(d2) < Math.PI ? "end" : "start";
                            };
                        });

                    text.exit()
                        .remove();

                    text.selectAll('.xe-pie-light-text').call(wrap);

                    /* ------- SLICE TO TEXT POLYLINES -------*/

                    polyline = svg.select(".xe-pie-lines").selectAll("polyline")
                        .data(pie(data), key);

                    polyline.enter()
                        .append("polyline")
                        .style('stroke', function (d, i) {
                            return color(i);
                        });

                    polyline.transition().duration(1000)
                        .attrTween("points", function (d) {
                            this.d3current = this.d3current || d;
                            var interpolate = d3.interpolate(this.d3current, d);
                            this.d3current = interpolate(0);
                            return function (t) {
                                var d2 = interpolate(t),
                                    pos = lineOuterArc.centroid(d2);
                                // pos[0] = radius * 0.5 * (midAngle(d2) < Math.PI ? 1 : -1);
                                return [lineArc.centroid(d2), lineOuterArc.centroid(d2), pos];
                            };
                        });

                    polyline.exit()
                        .remove();

                    relax();
                }

                function changeSub(other) {

                    /* ------- SUB PIE SLICES -------*/
                    bgSubSlice = svg.select(".xe-pie-bg-sub-slice")
                        .append('a')
                        .attr({
                            'xlink:href': function (d, i) {
                                return '#main-group-' + uniqueId;
                            },
                            'tabindex': function (d, i) {
                                return 0;
                            },
                            'aria-controls': function (d, i) {
                                return 'main-group-' + uniqueId;
                            },
                            'aria-label': options.pie.group.mainAriaLabel
                        })
                        .on('click', toggle_donut_chart)
                        .on('touchstart', toggle_donut_chart)
                        .append('path')
                        .attr('aria-hidden', true)
                        .style('display', 'none')
                        .datum({
                            startAngle: 0,
                            endAngle: 2 * Math.PI
                        })
                        .style('fill', '#e3e3e3')
                        .attr('d', subArc)
                        .on('click', toggle_donut_chart)
                        .on('touchstart', toggle_donut_chart);

                    subslice = svg.select(".xe-pie-sub-slices").selectAll("path.xe-pie-sub-slice")
                        .data(subPie(other), key);

                    subslice.enter()
                        .insert("path")
                        .attr('aria-hidden', true)
                        .style('display', 'none')
                        .style("fill", function (d, i) {
                            return subColor(i);
                        })
                        .attr("class", "xe-pie-sub-slice")
                        .on('mouseover', mouseover)
                        .on('touchstart', mouseover)
                        .on('mouseout', mouseout)
                        .on('touchend', mouseout)
                        .on('mousemove', mousemove)
                        .on('touchmove', mousemove);


                    subslice.transition().duration(1000)
                        .attrTween("d", function (d) {
                            this.d3current = this.d3current || d;
                            var interpolate = d3.interpolate(this.d3current, d);
                            this.d3current = interpolate(0);
                            return function (t) {
                                return subArc(interpolate(t));
                            };
                        });

                    subslice.exit()
                        .remove();

                    /* ------- SUB TEXT LABELS -------*/

                    subtext = svg.select(".xe-pie-sub-labels").selectAll("text")
                        .data(subPie(other), key);

                    subtext.enter()
                        .append("text")
                        .attr('class', function (d, i) {
                            if (other.length > 7) {
                                return 'xe-pie-small-text';
                            }
                            return 'xe-pie-large-text';
                        })
                        .attr('aria-hidden', true)
                        .style('display', 'none')
                        .on('mouseover', mouseover)
                        .on('touchstart', mouseover)
                        .on('mouseout', mouseout)
                        .on('touchend', mouseout)
                        .on('mousemove', mousemove)
                        .on('touchmove', mousemove);

                    subtext.append('tspan')
                        .attr('x', '0')
                        .attr('dy', '.35em')
                        .attr('class', 'xe-pie-bold-text')
                        .text(function (d) {
                            return d.data.percentage;
                        });

                    subtext.append('tspan')
                        .attr('x', '0')
                        .attr('dy', '1em')
                        .attr('class', 'xe-pie-light-text')
                        .text(function (d) {
                            return d.data.label;
                        });

                    subtext.transition().duration(1000)
                        .attrTween("transform", function (d) {
                            this.d3current = this.d3current || d;
                            var interpolate = d3.interpolate(this.d3current, d);
                            this.d3current = interpolate(0);
                            return function (t) {
                                var d2 = interpolate(t),
                                    pos = lineSubOuterArc.centroid(d2);
                                pos[0] = radius * 0.65 * (midAngle(d2) < Math.PI ? 1 : -1);
                                return "translate(" + pos + ")";
                            };
                        })
                        .attrTween("text-anchor", function (d) {
                            this.d3current = this.d3current || d;
                            var interpolate = d3.interpolate(this.d3current, d);
                            this.d3current = interpolate(0);
                            return function (t) {
                                var d2 = interpolate(t);
                                if (!Language.isRtl()) {
                                    return midAngle(d2) < Math.PI ? "start" : "end";
                                }
                                return midAngle(d2) < Math.PI ? "end" : "start";
                            };
                        });

                    subtext.exit()
                        .remove();

                    /* ------- SUB SLICE TO TEXT POLYLINES -------*/

                    subpolyline = svg.select(".xe-pie-sub-lines").selectAll("polyline")
                        .data(subPie(other), key);

                    subpolyline.enter()
                        .append("polyline")
                        .attr('aria-hidden', true)
                        .style('display', 'none')
                        .style('stroke', function (d, i) {
                            return subColor(i);
                        });

                    subpolyline.transition().duration(1000)
                        .attrTween("points", function (d) {
                            this.d3current = this.d3current || d;
                            var interpolate = d3.interpolate(this.d3current, d);
                            this.d3current = interpolate(0);
                            return function (t) {
                                var d2 = interpolate(t),
                                    pos = lineSubOuterArc.centroid(d2);
                                pos[0] = radius * 0.6 * (midAngle(d2) < Math.PI ? 1 : -1);
                                return [lineSubArc.centroid(d2), lineSubOuterArc.centroid(d2), pos];
                            };
                        });

                    subpolyline.exit()
                        .remove();

                }


                total = 0;

                // Polyfill for Number.isFinite

                Number.isFinite = Number.isFinite || function (value) {
                    return typeof value === "number" && isFinite(value);
                };

                subdata = angular.copy(scope['data']);

                angular.forEach(subdata, function (d, key) {
                    d.value = Number.isFinite(d.value) ? Math.abs(d.value) : 0;
                });

                subdata.sort(function (a, b) {
                    return d3.descending(a.value, b.value);
                });

                subdatatotal = d3.sum(subdata, function (d) {
                    return d.value;
                });

                // render the table
                if (table) {
                    tabulate(subdata, [options.table.label, options.table.value, options.table.percentage]);
                }

                angular.forEach(subdata, function (value, key) {
                    if (key < 6 || subdata.length < 8) {
                        value.origin = "main";
                    } else {
                        value.origin = "sub";
                        total += +value.value;
                    }
                });

                if (subdata.length > 7) {
                    subdata.splice(7, 0, { label: options.pie.otherLabel, value: total, origin: 'main' });
                }

                subdata.forEach(function (d) {
                    if (!Language.isRtl()) {
                        if (subdatatotal || d.value) {
                            d.percentage = (Math.round(1000 * d.value / subdatatotal) / 10).toFixed(2) + '%';
                        } else {
                            d.percentage = '0.00%';
                        }
                    }
                    if (Language.isRtl()) {
                        if (subdatatotal || d.value) {
                            d.percentage = '%' + (Math.round(1000 * d.value / subdatatotal) / 10).toFixed(2);
                        } else {
                            d.percentage = '%0.00';
                        }
                    }
                });

                other = d3.nest()
                    .key(function (d) {
                        return d.origin;
                    })
                    .entries(subdata);

                pie = d3.layout.pie()
                    .sort(function (a, b) {
                        if (!Language.isRtl()) {
                            return d3.descending(a.value, b.value);
                        }
                        if (Language.isRtl()) {
                            return d3.ascending(a.value, b.value);
                        }
                        return d3.descending(a.value, b.value);
                    })
                    .value(function (d) {
                        return d.value;
                    });

                subPie = d3.layout.pie()
                    .value(function (d) {
                        return d.value;
                    })
                    .startAngle(function (d) {
                        return subPieStartAngle;
                    })
                    .endAngle(function (d) {
                        return subPieEndAngle;
                    });

                arc = d3.svg.arc()
                    .innerRadius(radius * 0.25)
                    .outerRadius(radius * 0.5);

                lineArc = d3.svg.arc()
                    .innerRadius(radius * 0.5)
                    .outerRadius(radius * 0.5);

                lineOuterArc = d3.svg.arc()
                    .innerRadius(radius * 0.5)
                    .outerRadius(radius * 0.6);

                subArc = d3.svg.arc()
                    .innerRadius(radius * 0.5)
                    .outerRadius(radius * 0.6);

                lineSubArc = d3.svg.arc()
                    .innerRadius(radius * 0.6)
                    .outerRadius(radius * 0.6);

                lineSubOuterArc = d3.svg.arc()
                    .innerRadius(radius * 0.6)
                    .outerRadius(radius * 0.7);

                color = d3.scale.ordinal()
                    .range([
                        '#783084',
                        '#810c33',
                        '#8073ce',
                        '#c28041',
                        '#008241',
                        '#f39fba',
                        '#6bafa6'
                    ]);

                subColor = d3.scale.ordinal()
                    .range([
                        '#eef6f5',
                        '#ddedeb',
                        '#bcdbd7',
                        '#9ac9c3',
                        '#67aea5',
                        '#56a59b',
                        '#4d948b',
                        '#45847d',
                        '#3c746d',
                        '#33635d',
                        '#2b524d',
                        '#23423e',
                        '#1a312e',
                        '#11201f',
                        '#07100f'
                    ]);

                if (subdata.length > 7) {
                    change(other[0].values);
                    changeSub(other[1].values);
                } else {
                    change(other[0].values);
                }
                     $(".xe-pie-slice").click(function(d){
                           scope.ngclickfunction({
                            names: scope.valueforclick
                        });
                    });
             }

            return {
                restrict: 'E',
                scope: {
                    data: '=xePieData',
                    config: '=xePieConfig',
                    ngclickfunction: "&",
                },
                link: function (scope, element, attrs) {

                    uniqueId += 1;

                    element.addClass("xe-pie-chart");

                    var w = element[0].clientWidth,
                        margin = 10,
                        width,
                        height,
                        radius,
                        defaultOptions = {
                            tooltip: false,
                            hiddenTable: false,
                            svg: {
                                title: '',
                                desc: ''
                            },
                            pie: {
                                otherLabel: 'Other'
                            },
                            table: {
                                ariaLabel: '',
                                label: 'label',
                                value: 'value',
                                percentage: 'percentage'
                            }
                        },
                        options = angular.merge({}, defaultOptions, scope.config),
                        table,
                        s,
                        svg,
                        tooltip;

                    if (options.hiddenTable) {
                        table = d3.select(element[0]).append("table")
                            .attr({
                                'aria-label': options.table.ariaLabel,
                                'class': 'xe-pie-table-hidden'
                            });
                    }

                    width = w - margin;
                    height = width + width / 2;
                    radius = Math.min(width, height) / 2;

                    s = d3.select(element[0]).append('svg')
                        .attr({
                            'xmlns': "http://www.w3.org/2000/svg",
                            'xmlns:xlink': "http://www.w3.org/1999/xlink",
                            'version': 1.1,
                            'width': width + 'px',
                            'height': height + 'px',
                            'viewBox': '0 0 ' + Math.min(width, height) + ' ' + Math.min(width, height),
                            'preserveAspectRatio': 'xMinYMid meet',
                            'role': 'group',
                            'aria-labelledby': 'title' + uniqueId + ' ' + 'desc' + uniqueId
                        });

                    s.append('title').attr('id', 'title' + uniqueId).text(options.svg.title);
                    s.append('desc').attr('id', 'desc' + uniqueId).text(options.svg.desc);

                    svg = s.append('g')
                        .attr({
                            'role': 'list',
                            'aria-label': options.pie.ariaLabel,
                            'class': 'xe-pie-svg',
                            'transform': 'translate(' + radius + ', ' + radius + ')' // For better readability used 12'o clock as starting point for pie chart
                        });


                    if (options.tooltip) {
                        tooltip = d3.select(element[0])
                            .append('div')
                            .attr('class', 'xe-pie-tooltip');

                        tooltip.append('p').attr('class', 'xe-pie-tooltip-label');
                        tooltip.append('p').attr('class', 'xe-pie-tooltip-value');
                        tooltip.append('p').attr('class', 'xe-pie-tooltip-percent xe-pie-bold-text');
                    }

                    // on window resize, re-render d3
                    window.onresize = function () {
                        return scope.$apply();
                    };
                    scope.$watch(function () {
                        return angular.element(window)[0].innerWidth;
                    }, function () {
                        w = element[0].clientWidth;
                        width = w - margin;
                        height = width + width / 2;
                        radius = Math.min(width, height) / 2;
                        s.attr({
                            'width': width + 'px',
                            'height': height + 'px',
                            'viewBox': '0 0 ' + Math.min(width, height) + ' ' + Math.min(width, height)
                        });
                        svg.attr({
                            'transform': 'translate(' + radius + ', ' + radius + ')'
                        });
                        draw(tooltip, table, svg, radius, scope, options, element);
                    });

                    // Watch the data attribute of the scope
                    scope.$watch('data', function (newVal, oldVal, scope) {

                        // Update the chart
                        if (newVal) {
                            draw(tooltip, table, svg, radius, scope, options, element);
                        }
                    }, true);
                 }
            };
        }]);
}());
/*****************************************************
 *  © 2016-2018 Ellucian Company L.P. and its affiliates. *
 *****************************************************/

; // safe for iife
(function () {

    angular.module('pieChartModule', [])
        .factory('d3', ['$window', '$log', function ($window, $log) {
            if (!$window.d3) {
                $log.error('D3 must be present');
            }
            return $window.d3;
        }])
        .directive('xePieChart', ['d3', '$window', '$log', '$timeout', 'Language','$filter','getlocale', function (d3, $window, $log, $timeout, Language,$filter,getlocale) {

            var uniqueId = 0;

            function localizedNumber(input){
                if(Language.isRtl()) {
                    return input;
                }
                else {
                    return (+input).toLocaleString(getlocale.getUserLocale().replace('_', '-'));
                }
            }

            function draw(tooltip, table, svg, radius, scope, options, element) {

                // var declaration
                var subdata = [], other, subdatatotal, total, chartTotal,
                    subPieStartAngle, subPieEndAngle,
                    pie, subPie,
                    arc, lineArc, lineOuterArc, subArc, lineSubArc, lineSubOuterArc,
                    color, subColor,
                    slice, text, polyline, bgSubSlice, subslice, subtext, subpolyline, ua, msie, trident, edge;

                // remove the old data
                if (table) {
                    table.select('thead').remove();
                    table.select('tbody').remove();
                    // append new element
                    table.append('thead').attr('class', 'xe-pie-table-head');
                    table.append('tbody').attr('class', 'xe-pie-table-body');
                }

                svg.selectAll('g').remove();
                svg.selectAll("text").remove();

                if(options.innerRadiusFactor>0) {
                    chartTotal = d3.sum(scope.data, function (d) {
                        return d.value;
                    });
                    var innerText = svg.append("text")
                        .attr("text-anchor", "middle");
                    innerText.append("tspan")
                        .attr("class","xe-pie-total-value")
                        .attr("y",0).attr("x",0).attr("tabindex","0")
                        .text(localizedNumber(chartTotal));
                    innerText.append("tspan")
                        .attr("class", "xe-pie-total-label")
                        .attr("y", 20).attr("x", 0).attr("tabindex","0")
                        .text(options.pie.totalLabel);
                }

                svg.append("g").attr({
                    "role": "presentation",
                    "class": "xe-pie-slices"
                });
                svg.append("g").attr({
                    "role": "listitem",
                    "class": "xe-pie-labels",
                    'id': "main-group-" + uniqueId,
                    'aria-live': "polite",
                    'aria-relevant': "additions removals"
                });
                svg.append("g").attr({
                    "role": "presentation",
                    "class": "xe-pie-lines"
                });

                // render when if needed
                if (scope.data.length > 7) {
                    svg.append('g').attr({
                        'role': 'presentation',
                        'class': 'xe-pie-bg-sub-slice'
                    });
                    svg.append("g").attr({
                        'role': 'presentation',
                        "class": "xe-pie-sub-slices"
                    });
                    svg.append("g").attr({
                        'role': 'listitem',
                        "class": "xe-pie-sub-labels",
                        'id': "other-group-" + uniqueId,
                        'aria-live': "polite",
                        'aria-relevant': "additions removals"
                    });
                    svg.append("g").attr({
                        'role': 'presentation',
                        "class": "xe-pie-sub-lines"
                    });
                }

                function tabulate(data, columns) {
                    // var declaration
                    var thead, tbody, rows, dtLabel = columns[0], dtValue = columns[1], dtPercentage = columns[2];

                    thead = table.select('thead.xe-pie-table-head');
                    tbody = table.select('tbody.xe-pie-table-body');

                    // append the header row
                    thead.append("tr")
                        .selectAll("th")
                        .data(columns)
                        .enter()
                        .append("th")
                        .text(function (column) {
                            return column;
                        });

                    // create a row for each object in the data
                    rows = tbody.selectAll("tr")
                        .data(data)
                        .enter()
                        .append("tr");

                    // create a cell in each row for each column
                    rows.selectAll("td")
                        .data(function (row) {
                            return columns.map(function (column) {
                                row[dtLabel] = row.label;
                                row[dtValue] = row.value;
                                if (subdatatotal || row[dtValue]) {
                                    row[dtPercentage] = (Math.round(1000 * row[dtValue] / subdatatotal) / 10).toFixed(2);
                                } else {
                                    row[dtPercentage] = '0.00';
                                }

                                return {column: column, value: row[column]};
                            });
                        })
                        .enter()
                        .append("td")
                        .html(function (d) {
                            return d.value;
                        });

                    return table;
                }
                function detectIE() {
                    ua = window.navigator.userAgent;
                    msie = ua.indexOf('MSIE ');
                    trident = ua.indexOf('Trident/');
                    if (msie > 0 || trident > 0) {
                        return true;
                    }
                    return false;
                }
                function detectEdge() {
                    edge = ua.indexOf('Edge/');
                    if (edge > 0) {
                        return true;
                    }
                    return false;
                }
                function mouseover(d) {
                    if (tooltip && d3.select(this).style("opacity") !== '0') {
                        tooltip.select('.xe-pie-tooltip-label').html(d.data.label);
                        tooltip.select('.xe-pie-tooltip-value').html(localizedNumber(d.data.value));
                        if(Language.isRtl())
                            tooltip.select('.xe-pie-tooltip-percent').html( $filter('xei18n')('default.percent')+localizedNumber(d.data.percentage));
                        else
                            tooltip.select('.xe-pie-tooltip-percent').html(localizedNumber(d.data.percentage)+ $filter('xei18n')('default.percent'));
                        tooltip.style('display', 'block');
                    }
                }

                function mouseout(d) {
                    if (tooltip) {
                        tooltip.style('display', 'none');
                    }
                }

                function mousemove(d) {
                    if (tooltip) {
                        var te = angular.element(element).find('.xe-pie-tooltip')[0],
                            width = te.clientWidth,
                            height = te.clientHeight;
                        if (Language.isRtl() && detectIE()) {
                            tooltip.style('top', (d3.event.layerY - height - 10) + 'px').style('left', ((d3.event.layerX - width + 10) / 2) + 'px');
                        } else {
                            tooltip.style('top', (d3.event.layerY - height - 10) + 'px').style('left', (d3.event.layerX - width / 2) + 'px');
                        }
                    }
                }

                function key(d) {
                    return d.data.label;
                }

                function midAngle(d) {
                    return d.startAngle + (d.endAngle - d.startAngle) / 2;
                }

                function wrap(text) {
                    var width = 45  ;
                    text.each(function() {
                        var text = d3.select(this),
                            words = text.text().split(/\s+/).reverse(),
                            word,
                            line = [],
                            y = text.attr("y"),
                            dy = parseFloat(text.attr("dy")),
                            tspan = text.text("").append("tspan").attr("x", 0).attr("dy", dy + "em");
                        while (word = words.pop()) {
                            line.push(word);
                            tspan.text(line.join(" "));
                            if ((tspan.node().getComputedTextLength()>0? tspan.node().getComputedTextLength():(tspan.text().length*5)) > width) {
                                if(line.length>1)
                                {
                                    line.pop();
                                    tspan.text(line.join(" "));
                                    line = [word];
                                    tspan = text.append("tspan").attr("x", 0).attr("dy", dy + "em").text(word);
                                }
                                else
                                {
                                    line=[];
                                    tspan = text.append("tspan").attr("x", 0).attr("dy", dy + "em").text("");
                                }

                            }
                        }
                    });
                }

                function relaxSub() {
                    // var declaration
                    var again, labelElements;

                    again = false;

                    if (subtext) {

                        subtext.each(function (d1) {

                            var that = this,
                                a = this.getBoundingClientRect();

                            subtext.each(function (d2) {

                                if (this !== that) {
                                    var b = this.getBoundingClientRect(), dy, tt, to;
                                    if ((Math.abs(a.left - b.left) * 2 < (a.width + b.width)) && (Math.abs(a.top - b.top) * 2 < (a.height + b.height))) {
                                        // overlap, move labels
                                        dy = (Math.max(0, a.bottom - b.top) + Math.min(0, a.top - b.bottom)) * 0.01;
                                        tt = d3.transform(d3.select(this).attr("transform"));
                                        to = d3.transform(d3.select(that).attr("transform"));
                                        again = true;

                                        to.translate = [radius * 0.65 * (midAngle(d1) < Math.PI ? 1 : -1), to.translate[1] + dy];
                                        tt.translate = [radius * 0.65 * (midAngle(d2) < Math.PI ? 1 : -1), tt.translate[1] - dy];
                                        d3.select(this).attr("transform", "translate(" + tt.translate + ")");
                                        d3.select(that).attr("transform", "translate(" + to.translate + ")");
                                    }
                                }
                            });
                        });

                        if (again) {
                            labelElements = subtext[0];
                            if (subpolyline) {
                                subpolyline.attr('points', function (d, i) {
                                    var labelForLine = d3.select(labelElements[i]),
                                        t = d3.transform(labelForLine.attr("transform")),
                                        tx = t.translate[0],
                                        ty = t.translate[1];
                                    return [lineSubArc.centroid(d), lineSubOuterArc.centroid(d), tx, ty];
                                });
                            }
                            $timeout(relaxSub);
                        }
                    }
                }

                function toggle(d, i) {

                    d3.event.preventDefault();
                    d3.event.stopPropagation();
                    if (i === 6 && subdata.length > 7) {
                        slice.style('opacity', function (d, i) {
                            if (i === 6) {
                                return 1.0;
                            }
                            return 0.1; // 10% of opacity
                        });
                        text.style('display', 'none').attr('aria-hidden', true);
                        polyline.style('display', 'none').attr('aria-hidden', true);
                        if (bgSubSlice || subslice || subtext || subpolyline) {
                            bgSubSlice.style('display', 'block').attr('aria-hidden', false);
                            subslice.style('display', 'block').attr('aria-hidden', false);
                            subtext.style('display', 'block').attr('aria-hidden', false);
                            subpolyline.style('display', 'block').attr('aria-hidden', false);
                            subtext.selectAll('.xe-pie-light-text').call(wrap);
                            relaxSub();
                        }
                    } else {
                        if (bgSubSlice || subslice || subtext || subpolyline) {
                            bgSubSlice.style('display', 'none').attr('aria-hidden', true);
                            subslice.style('display', 'none').attr('aria-hidden', true);
                            subtext.style('display', 'none').attr('aria-hidden', true);
                            subpolyline.style('display', 'none').attr('aria-hidden', true);
                        }
                        slice.style('opacity', 1.0);
                        text.style('display', 'block').attr('aria-hidden', false);
                        polyline.style('display', 'block').attr('aria-hidden', false);
                    }

                }

                function passSliceInfo(d,i) {
                    scope.ngclickfunction({
                        pieSliceData: d.data
                    });
                }

                function touchTarget() {
                    d3.select(this).classed("xe-pie-touch", !d3.select(this).classed("xe-pie-touch"));
                }

                function relax() {
                    // var declaration
                    var again, labelElements;

                    again = false;

                    if (text) {

                        text.selectAll("text").each(function (d1) {

                            var that = this,
                                a = this.getBoundingClientRect();

                            text.selectAll("text").each(function (d2, i) {

                                if (this !== that) {
                                    var b = this.getBoundingClientRect(), dy, tt, to;
                                    if ((Math.abs(a.left - b.left) * 2 < (a.width + b.width)) && (Math.abs(a.top - b.top) * 2 < (a.height + b.height))) {
                                        // overlap, move labels
                                        // dx = (Math.max(0, a.left - b.right) + Math.min(0, a.right - b.left)) * 0.01;
                                        dy = (Math.max(0, a.bottom - b.top) + Math.min(0, a.top - b.bottom)) * 0.01;
                                        tt = d3.transform(d3.select(this).attr("transform"));
                                        to = d3.transform(d3.select(that).attr("transform"));
                                        again = true;

                                        to.translate = [radius * 0.55 * (midAngle(d1) < Math.PI ? 1 : -1), to.translate[1] + dy];
                                        tt.translate = [radius * 0.55 * (midAngle(d2) < Math.PI ? 1 : -1), tt.translate[1] - dy];

                                        d3.select(this).attr("transform", "translate(" + tt.translate + ")");
                                        d3.select(that).attr("transform", "translate(" + to.translate + ")");
                                    }
                                }
                            });
                        });

                        if (again) {
                            labelElements = text[0];
                            if (polyline) {
                                polyline.attr('points', function (d, i) {
                                    var labelForLine = d3.select(labelElements[i]).select('text'),
                                        t = d3.transform(labelForLine.attr("transform")),
                                        tx = t.translate[0],
                                        ty = t.translate[1];
                                    return [lineArc.centroid(d), lineOuterArc.centroid(d), tx, ty];
                                });
                            }
                            $timeout(relax);
                        }
                    }
                }

                function change(data) {

                    /* ------- PIE SLICES -------*/
                    slice = svg.select(".xe-pie-slices").selectAll("path.xe-pie-slice")
                        .data(pie(data), key);

                    slice.enter()
                        .insert("path")
                        .style("fill", function (d, i) {
                            if (i === 6) {
                                subPieStartAngle = d.startAngle;
                                subPieEndAngle = d.endAngle;
                            }
                            return color(i);
                        })
                        .attr("class", "xe-pie-slice")
                        .attr("tabindex","0")
                        .attr("aria-label",function (d){
                            var ariaLabel;
                            if(Language.isRtl())
                                ariaLabel =  $filter('xei18n')('default.percent')+localizedNumber(d.data.percentage);
                            else
                                ariaLabel = localizedNumber(d.data.percentage)+ $filter('xei18n')('default.percent');
                            ariaLabel += " " + d.data.label + " " + d.data.value;
                            return ariaLabel;
                        })
                        .on('click', toggle)
                        .on('click',passSliceInfo)
                        .on('keydown',function (d,i) {
                            if(d3.event.keyCode==13) {
                                passSliceInfo(d,i);
                            }
                        })
                        .on('touchstart', toggle)
                        .on('mouseover', mouseover)
                        .on('touchstart', mouseover)
                        .on('touchstart', touchTarget)
                        .on('mouseout', mouseout)
                        .on('touchend', mouseout)
                        .on('touchend', touchTarget)
                        .on('mousemove', mousemove)
                        .on('touchmove', mousemove)
                        .on('focusin',function() {
                            d3.event.target.classList.add("xe-slice-on");
                        })
                        .on('focusout',function() {
                            d3.event.target.classList.remove("xe-slice-on");
                        });

                    slice.transition().duration(1000)
                        .attrTween("d", function (d) {
                            this.d3current = this.d3current || d;
                            var interpolate = d3.interpolate(this.d3current, d);
                            this.d3current = interpolate(0);
                            return function (t) {
                                return arc(interpolate(t));
                            };
                        });

                    slice.exit()
                        .remove();

                    /* ------- TEXT LABELS -------*/

                    text = svg.select(".xe-pie-labels").selectAll("text")
                        .data(pie(data), key);

                    text.enter()
                        .append('a')
                        .attr({
                            'xlink:href': function (d, i) {
                                if (d.data.label === options.pie.otherLabel) {
                                    return '#other-group-' + uniqueId;
                                }
                                return;
                            },
                            'tabindex': function (d, i) {
                                if (d.data.label === options.pie.otherLabel) {
                                    return 0;
                                }
                                return;
                            },
                            'aria-controls': function (d, i) {
                                if (d.data.label === options.pie.otherLabel) {
                                    return 'other-group-' + uniqueId;
                                }
                                return;
                            },
                            'aria-label': function (d, i) {
                                if (d.data.label === options.pie.otherLabel) {
                                    return options.pie.group.otherAriaLabel;
                                }
                                return;
                            }
                        })
                        .on('click', toggle)
                        .on('touchstart', toggle)
                        .append("text")
                        .attr({
                            'class': function (d, i) {
                                if (d.data.label === options.pie.otherLabel) {
                                    return 'xe-pie-large-text xe-pie-other-text';
                                }
                                return 'xe-pie-large-text';
                            }
                        })
                        .on('click', toggle)
                        .on('touchstart', toggle)
                        .on('mouseover', mouseover)
                        .on('touchstart', mouseover)
                        .on('mouseout', mouseout)
                        .on('touchend', mouseout)
                        .on('mousemove', mousemove)
                        .on('touchmove', mousemove);

                    text.selectAll("text").append('tspan')
                        .attr('x', '0')
                        .attr('dy', function (d) {
                            if ((d.startAngle + d.endAngle) / 2 > Math.PI / 2 && (d.startAngle + d.endAngle) / 2 < Math.PI * 1.5) {
                                return '1em';
                            }
                            return '-1em';
                        })
                        .attr('class', 'xe-pie-bold-text')
                        .text(function (d) {
                            if(Language.isRtl())
                                return  $filter('xei18n')('default.percent')+ localizedNumber(d.data.percentage);
                            else
                                return  localizedNumber(d.data.percentage) + $filter('xei18n')('default.percent');
                        });

                    text.selectAll("text").append('tspan')
                        .attr('x', '0')
                        .attr('dy', '1em')
                        .attr('class', 'xe-pie-light-text')
                        .text(function (d) {
                            return d.data.label;
                        });

                    text.selectAll('text').transition().duration(1000)
                        .attrTween("transform", function (d) {
                            this.d3current = this.d3current || d;
                            var interpolate = d3.interpolate(this.d3current, d);
                            this.d3current = interpolate(0);
                            return function (t) {
                                var d2 = interpolate(t),
                                    pos = lineOuterArc.centroid(d2);
                                // pos[0] = radius * 0.6 * (midAngle(d2) < Math.PI ? 1 : -1);
                                return "translate(" + pos + ")";
                            };
                        })
                        .attrTween("text-anchor", function (d) {
                            this.d3current = this.d3current || d;
                            var interpolate = d3.interpolate(this.d3current, d);
                            this.d3current = interpolate(0);
                            return function (t) {
                                var d2 = interpolate(t);
                                if (!Language.isRtl()) {
                                    return midAngle(d2) < Math.PI ? "start" : "end";
                                }
                                if (detectIE() || detectEdge()) {
                                    return midAngle(d2) < Math.PI ? "start" : "end";
                                }
                                return midAngle(d2) < Math.PI ? "end" : "start";
                            };
                        });

                    text.exit()
                        .remove();

                    text.selectAll('.xe-pie-light-text').call(wrap);

                    /* ------- SLICE TO TEXT POLYLINES -------*/

                    polyline = svg.select(".xe-pie-lines").selectAll("polyline")
                        .data(pie(data), key);

                    polyline.enter()
                        .append("polyline")
                        .style('stroke', function (d, i) {
                            return color(i);
                        });

                    polyline.transition().duration(1000)
                        .attrTween("points", function (d) {
                            this.d3current = this.d3current || d;
                            var interpolate = d3.interpolate(this.d3current, d);
                            this.d3current = interpolate(0);
                            return function (t) {
                                var d2 = interpolate(t),
                                    pos = lineOuterArc.centroid(d2);
                                // pos[0] = radius * 0.5 * (midAngle(d2) < Math.PI ? 1 : -1);
                                return [lineArc.centroid(d2), lineOuterArc.centroid(d2), pos];
                            };
                        });

                    polyline.exit()
                        .remove();

                    relax();
                }

                function changeSub(other) {

                    /* ------- SUB PIE SLICES -------*/
                    bgSubSlice = svg.select(".xe-pie-bg-sub-slice")
                        .append('a')
                        .attr({
                            'xlink:href': function (d, i) {
                                return '#main-group-' + uniqueId;
                            },
                            'tabindex': function (d, i) {
                                return 0;
                            },
                            'aria-controls': function (d, i) {
                                return 'main-group-' + uniqueId;
                            },
                            'aria-label': options.pie.group.mainAriaLabel
                        })
                        .on('click', toggle)
                        .on('touchstart', toggle)
                        .append('path')
                        .attr('aria-hidden', true)
                        .style('display', 'none')
                        .datum({
                            startAngle: 0,
                            endAngle: 2 * Math.PI
                        })
                        .style('fill', '#DBDBDD')
                        .attr('d', subArc)
                        .on('click', toggle)
                        .on('touchstart', toggle);

                    subslice = svg.select(".xe-pie-sub-slices").selectAll("path.xe-pie-sub-slice")
                        .data(subPie(other), key);

                    subslice.enter()
                        .insert("path")
                        .attr('aria-hidden', true)
                        .style('display', 'none')
                        .style("fill", function (d, i) {
                            return subColor(i);
                        })
                        .attr("class", "xe-pie-sub-slice")
                        .on('mouseover', mouseover)
                        .on('touchstart', mouseover)
                        .on('mouseout', mouseout)
                        .on('touchend', mouseout)
                        .on('mousemove', mousemove)
                        .on('touchmove', mousemove);

                    subslice.transition().duration(1000)
                        .attrTween("d", function (d) {
                            this.d3current = this.d3current || d;
                            var interpolate = d3.interpolate(this.d3current, d);
                            this.d3current = interpolate(0);
                            return function (t) {
                                return subArc(interpolate(t));
                            };
                        });

                    subslice.exit()
                        .remove();

                    /* ------- SUB TEXT LABELS -------*/

                    subtext = svg.select(".xe-pie-sub-labels").selectAll("text")
                        .data(subPie(other), key);

                    subtext.enter()
                        .append("text")
                        .attr('class', function (d, i) {
                            if (other.length > 7) {
                                return 'xe-pie-small-text';
                            }
                            return 'xe-pie-large-text';
                        })
                        .attr('aria-hidden', true)
                        .style('display', 'none')
                        .on('mouseover', mouseover)
                        .on('touchstart', mouseover)
                        .on('mouseout', mouseout)
                        .on('touchend', mouseout)
                        .on('mousemove', mousemove)
                        .on('touchmove', mousemove);

                    subtext.append('tspan')
                        .attr('x', '0')
                        .attr('dy', '.35em')
                        .attr('class', 'xe-pie-bold-text')
                        .text(function (d) {
                            if(Language.isRtl())
                                return  $filter('xei18n')('default.percent') + localizedNumber(d.data.percentage);
                            else
                                return localizedNumber(d.data.percentage) + $filter('xei18n')('default.percent');
                        });

                    subtext.append('tspan')
                        .attr('x', '0')
                        .attr('dy', '1em')
                        .attr('class', 'xe-pie-light-text')
                        .text(function (d) {
                            return d.data.label;
                        });

                    subtext.transition().duration(1000)
                        .attrTween("transform", function (d) {
                            this.d3current = this.d3current || d;
                            var interpolate = d3.interpolate(this.d3current, d);
                            this.d3current = interpolate(0);
                            return function (t) {
                                var d2 = interpolate(t),
                                    pos = lineSubOuterArc.centroid(d2);
                                pos[0] = radius * 0.65 * (midAngle(d2) < Math.PI ? 1 : -1);
                                return "translate(" + pos + ")";
                            };
                        })
                        .attrTween("text-anchor", function (d) {
                            this.d3current = this.d3current || d;
                            var interpolate = d3.interpolate(this.d3current, d);
                            this.d3current = interpolate(0);
                            return function (t) {
                                var d2 = interpolate(t);
                                if (!Language.isRtl()) {
                                    return midAngle(d2) < Math.PI ? "start" : "end";
                                }
                                return midAngle(d2) < Math.PI ? "end" : "start";
                            };
                        });

                    subtext.exit()
                        .remove();

                    /* ------- SUB SLICE TO TEXT POLYLINES -------*/

                    subpolyline = svg.select(".xe-pie-sub-lines").selectAll("polyline")
                        .data(subPie(other), key);

                    subpolyline.enter()
                        .append("polyline")
                        .attr('aria-hidden', true)
                        .style('display', 'none')
                        .style('stroke', function (d, i) {
                            return subColor(i);
                        });

                    subpolyline.transition().duration(1000)
                        .attrTween("points", function (d) {
                            this.d3current = this.d3current || d;
                            var interpolate = d3.interpolate(this.d3current, d);
                            this.d3current = interpolate(0);
                            return function (t) {
                                var d2 = interpolate(t),
                                    pos = lineSubOuterArc.centroid(d2);
                                pos[0] = radius * 0.6 * (midAngle(d2) < Math.PI ? 1 : -1);
                                return [lineSubArc.centroid(d2), lineSubOuterArc.centroid(d2), pos];
                            };
                        });

                    subpolyline.exit()
                        .remove();

                }


                total = 0;

                // Polyfill for Number.isFinite

                Number.isFinite = Number.isFinite || function (value) {
                    return typeof value === "number" && isFinite(value);
                };

                subdata = angular.copy(scope['data']);

                angular.forEach(subdata, function (d, key) {
                    d.value = Number.isFinite(d.value) ? Math.abs(d.value) : 0;
                });

                subdata.sort(function (a, b) {
                    return d3.descending(a.value, b.value);
                });

                subdatatotal = d3.sum(subdata, function (d) {
                    return d.value;
                });

                // render the table
                if (table) {
                    tabulate(subdata, [options.table.label, options.table.value, options.table.percentage]);
                }

                angular.forEach(subdata, function (value, key) {
                    if (key < 6 || subdata.length < 8) {
                        value.origin = "main";
                    } else {
                        value.origin = "sub";
                        total += +value.value;
                    }
                });

                if (subdata.length > 7) {
                    subdata.splice(7, 0, { label: options.pie.otherLabel, value: total, origin: 'main' });
                }

                subdata.forEach(function (d) {
                    if (subdatatotal || d.value) {
                        d.percentage = (Math.round(1000 * d.value / subdatatotal) / 10).toFixed(2);
                    }
                    else {
                        d.percentage = '0.00';
                    }
                });

                other = d3.nest()
                    .key(function (d) {
                        return d.origin;
                    })
                    .entries(subdata);

                pie = d3.layout.pie()
                    .sort(function (a, b) {
                        if (!Language.isRtl()) {
                            return d3.descending(a.value, b.value);
                        }
                        if (Language.isRtl()) {
                            return d3.ascending(a.value, b.value);
                        }
                        return d3.descending(a.value, b.value);
                    })
                    .value(function (d) {
                        return d.value;
                    });

                subPie = d3.layout.pie()
                    .value(function (d) {
                        return d.value;
                    })
                    .startAngle(function (d) {
                        return subPieStartAngle;
                    })
                    .endAngle(function (d) {
                        return subPieEndAngle;
                    });

                arc = d3.svg.arc()
                    .innerRadius(radius* 0.5 * options.innerRadiusFactor)
                    .outerRadius(radius * 0.5);

                lineArc = d3.svg.arc()
                    .innerRadius(radius * 0.5)
                    .outerRadius(radius * 0.5);

                lineOuterArc = d3.svg.arc()
                    .innerRadius(radius * 0.5)
                    .outerRadius(radius * 0.6);

                subArc = d3.svg.arc()
                    .innerRadius(radius * 0.5)
                    .outerRadius(radius * 0.6);

                lineSubArc = d3.svg.arc()
                    .innerRadius(radius * 0.6)
                    .outerRadius(radius * 0.6);

                lineSubOuterArc = d3.svg.arc()
                    .innerRadius(radius * 0.6)
                    .outerRadius(radius * 0.7);

                color = d3.scale.ordinal()
                    .range([
                        '#BA46A6',
                        '#5353d1',
                        '#51ABFF',
                        '#1ABF96',
                        '#95D162',
                        '#F5DB75',
                        '#FFB581'
                    ]);

                subColor = d3.scale.ordinal()
                    .range([
                        '#FFF4EB',
                        '#FFDFC8',
                        '#FFCAA4',
                        '#FFB581',
                        '#FFA15D',
                        '#FF8C3A',
                        '#FF7513',
                        '#FE6A00',
                        '#EB6200',
                        '#C35100'
                    ]);

                if (subdata.length > 7) {
                    change(other[0].values);
                    changeSub(other[1].values);
                } else {
                    change(other[0].values);
                }
            }

            return {
                restrict: 'E',
                scope: {
                    data: '=xePieData',
                    config: '=xePieConfig',
                    ngclickfunction: "&"
                },
                link: function (scope, element, attrs) {

                    uniqueId += 1;

                    element.addClass("xe-pie-chart");

                    var w = element[0].clientWidth,
                        margin = 10,
                        width,
                        height,
                        radius,
                        defaultOptions = {
                            tooltip: false,
                            hiddenTable: false,
                            innerRadiusFactor:0,
                            svg: {
                                title: '',
                                desc: ''
                            },
                            pie: {
                                otherLabel: 'Other',
                                totalLabel: 'Units'
                            },
                            table: {
                                ariaLabel: '',
                                label: 'label',
                                value: 'value',
                                percentage: 'percentage'
                            }
                        },
                        options = angular.merge({}, defaultOptions, scope.config),
                        table,
                        s,
                        svg,
                        tooltip;

                    if (options.hiddenTable) {
                        table = d3.select(element[0]).append("table")
                            .attr({
                                'aria-label': options.table.ariaLabel,
                                'class': 'xe-pie-table-hidden'
                            });
                    }

                    width = w - margin;
                    height = width ;
                    radius = Math.min(width, height) / 2;

                    s = d3.select(element[0]).classed("svg-container", true).append('svg')
                        .attr({
                            'xmlns': "http://www.w3.org/2000/svg",
                            'xmlns:xlink': "http://www.w3.org/1999/xlink",
                            'version': 1.1,
                            'width': width,
                            'height': height,
                            'viewBox': '0 0 ' + Math.min(width, height) + ' ' + Math.min(width, height),
                            'preserveAspectRatio': 'xMinYMid meet',
                            'role': 'group',
                            'aria-labelledby': 'title' + uniqueId + ' ' + 'desc' + uniqueId
                        }).classed("svg-content-responsive", true);

                    s.append('title').attr('id', 'title' + uniqueId).text(options.svg.title);
                    s.append('desc').attr('id', 'desc' + uniqueId).text(options.svg.desc);

                    svg = s.append('g')
                        .attr({
                            'role': 'list',
                            'aria-label': options.pie.ariaLabel,
                            'class': 'xe-pie-svg',
                            'transform': 'translate(' + radius + ', ' + radius + ')' // For better readability used 12'o clock as starting point for pie chart
                        });

                    if (options.tooltip) {
                        tooltip = d3.select(element[0])
                            .append('div')
                            .attr('class', 'xe-pie-tooltip');

                        tooltip.append('p').attr('class', 'xe-pie-tooltip-label');
                        tooltip.append('p').attr('class', 'xe-pie-tooltip-value');
                        tooltip.append('p').attr('class', 'xe-pie-tooltip-percent xe-pie-bold-text');
                    }

                    // Watch the data attribute of the scope
                    scope.$watch('data', function (newVal, oldVal, scope) {

                        // Update the chart
                        if (newVal!=oldVal) {
                            draw(tooltip, table, svg, radius, scope, options, element);
                        }
                    }, true);

                    draw(tooltip, table, svg, radius, scope, options, element);
                }
            };
        }]);
}());
(function () {
    'use strict';

    angular.module('popupModal', ['xe-ui-components'])
        .directive('xePopupModal', ['$timeout', function ($timeout) {
            return {
                restrict: 'EA',
                scope: {
                    show: '=',
                    pageheader: '@',
                    focusbackelement:'@',
                    showCloseButton: '=',
                    xeId: '@?'
                },
                replace: true, // Replace with the template below
                transclude: {
                    popupContent:'?popupContent',
                    popupButtons:'?popupButtons'
                }, // we want to insert custom content inside the directive
                templateUrl: 'templates/modal.html',
                controller: ['$scope', function($scope) {
                    $scope.hide = function() {
                        $scope.show = false;
                        if ($scope.focusBackElement) {
                            angular.element('#' + $scope.focusBackElement).focus();
                        }
                    };
                    $scope.popupTitle = $scope.pageheader;
                    $scope.focusBackElement = $scope.focusbackelement;
                }],
                link: function(scope, elem, attrs) {
                    elem.attr('id', attrs.id);

                    //Keyboard Navigation
                    elem.attr('tabindex', 0).focus();

                    if (attrs.pageheaderXeField) {
                        elem.find('.xe-popup-header .xe-app-title').attr('xe-field', attrs.pageheaderXeField);
                    }

                    if (attrs.width) {
                        elem.find('.xe-popup-container').css({
                            'max-width': attrs.width,
                            'width': attrs.width
                        });
                    }

                    elem.on('keydown', function(e) {
                        //ESC Key and Enter
                        var showCloseButtonFlag= scope.showCloseButton==undefined ?true:scope.showCloseButton;
                        if ((e.keyCode === 27 || (document.activeElement.className === "xe-popup-close" && e.keyCode === 13))&& showCloseButtonFlag == true) {
                            scope.show = false;
                            scope.$apply();
                            if(scope.focusBackElement) {
                                angular.element("#" + scope.focusBackElement).focus();
                            }
                        } else if (e.keyCode === 9 && e.shiftKey && angular.element(document.activeElement).hasClass('xe-popup-mask')) {
                            elem.find('#buttonContainer xe-button: button:not(:disabled):not(:hidden)').focus();
                            e.preventDefault();
                            e.stopImmediatePropagation();
                        }

                    });

                    $timeout(function() {
                        elem.on('focus', '#tabOrdering', function() {
                            if (scope.showCloseButton === true) {
                                elem.find('#xePopupClose').focus();
                            }
                           else {
                                scope.focusableElements = $(elem).querySelectorAll('a, button, input, textarea, select, details,[tabindex]:not([tabindex="-1"])');
                                scope.actualFocusableElements = $(scope.focusableElements).not('[tabindex=-1], [disabled], :hidden').not('a.select2-choice.ui-select-match');

                                var focusableElements = scope.actualFocusableElements;
                                $(focusableElements)[0].focus();
                            }
                        });

                        elem.on('keydown', '#xePopupClose', function(e) {
                            if (e.keyCode === 9 && e.shiftKey) {
                                elem.find('#buttonContainer xe-button button:not(:disabled):not(:hidden)').focus();
                            } else if (e.keyCode === 9) {
                                return true;
                            }
                            if (e.keyCode === 27 || e.keyCode === 13) {
                                scope.show = false;
                                scope.$apply();
                                if(scope.focusBackElement) {
                                    angular.element("#" + scope.focusBackElement).focus();
                                }
                            }
                            e.preventDefault();
                            e.stopImmediatePropagation();
                        });

                    }, 100);

                }

            };
        }]);
}());

(function () {
    'use strict';
    angular
        .module('tabnav', [])
        .directive('ngRepeatComplete', ['$timeout', function ($timeout) {
            return {
                restrict: 'A',
                link: function (scope, ele, attr) {
                    scope.keyboardNav = function () {
                        var tabItems = angular.element(ele[0].parentElement),
                            currentItemPos = parseInt(tabItems.find('li.active a').attr('id').split("tab")[1], 10),
                            firstItem = tabItems[0].firstElementChild,
                            lastItem = tabItems[0].lastElementChild,
                            currentItem = tabItems[0].querySelector('li.active'),
                            item,
                            switchTab = (function () {
                                return function (dir) {
                                    if ((currentItem === lastItem) && dir) {
                                        currentItemPos = scope.tabnav.tabs.length;
                                    } else if ((currentItem === firstItem) && dir) {
                                        currentItemPos = 1;
                                    }
                                    if ((currentItemPos === scope.tabnav.tabs.length) && (dir === 'right')) {
                                        currentItem = firstItem;
                                        item = angular.element(currentItem.querySelector('a'));
                                        currentItemPos = 1;
                                        item.focus();
                                    } else if ((currentItemPos === 1) && (dir === 'left')) {
                                        currentItem = lastItem;
                                        item = angular.element(currentItem.querySelector('a'));
                                        currentItemPos = scope.tabnav.tabs.length;
                                        item.focus();
                                    } else if (dir === 'right') {
                                        currentItem = currentItem.nextElementSibling;
                                        item = angular.element(currentItem.querySelector('a'));
                                        currentItemPos = parseInt(item.attr('id').split("tab")[1], 10);
                                        item.focus();
                                    } else if (dir === 'left') {
                                        currentItem = currentItem.previousElementSibling;
                                        item = angular.element(currentItem.querySelector('a'));
                                        currentItemPos = parseInt(item.attr('id').split("tab")[1], 10);
                                        item.focus();
                                    } else {
                                        scope.activeElement = scope.activeElement || document.activeElement.parentElement;
                                        currentItem = scope.activeElement;
                                        currentItemPos = parseInt(angular.element(currentItem).find('a').attr('id').split("tab")[1], 10);
                                        scope.activeElement = null;
                                    }
                                    scope.$apply(function () {
                                        currentItem.focus();
                                        scope.tabnav.activate(scope.tabnav.tabs[currentItemPos - 1]);
                                    });
                                };
                            }());
                        scope.keydownEventHandler = function (event) {
                            var keyCode = event.keyCode || event.which || event.originalEvent.keyCode;
                            if (keyCode === 39 || keyCode === 40) { // down arrow or right arrow
                                switchTab('right');
                                return false;
                            }
                            if (keyCode === 37 || keyCode === 38) { // top arrow or left arrow
                                switchTab('left');
                                return false;
                            }
                            return true;
                        };
                        scope.keyupEventHandler = function (event) {
                            var keyCode = event.keyCode || event.which || event.originalEvent.keyCode,
                                enterPressed = false;
                            if (keyCode === 13 && !enterPressed) {
                                enterPressed = true;
                                switchTab();
                                return false;
                            }
                        };
                        tabItems.on('keydown', scope.keydownEventHandler);
                        tabItems.on('keyup', scope.keyupEventHandler);
                    };
                    if (scope.$last === true) {
                        $timeout(scope.keyboardNav);
                    }
                }
            };
        }])
        .directive('xeTabNav', function () {
            return {
                restrict: 'EA',
                scope: {
                    xeSection: '@?'
                },
                transclude: true,
                templateUrl: 'templates/tabNav.html',
                controllerAs: 'tabnav',
                controller: ['$compile', '$sce', '$q', '$scope', '$state', function ($compile, $sce, $q, $scope, $state) {
                    var self = this;
                    self.currentActive = null;
                    self.tabs = [];
                    self.extendTab = function(attr, tabScope) {
                        var hideTab;
                        if (typeof xe !== 'undefined' && xe.extensionsFound) {
                            var tabSectionExtns = _.find(xe.extensions.sections, function (section) {
                                return section.name == $scope.xeSection;
                            });
                            if (tabSectionExtns) {
                                tabSectionExtns.fields.forEach(function (field, key) {
                                    if (field.name === tabScope.xeField) {
                                        if (field.label) {
                                            attr.heading = xe.i18n(field.label);
                                        }
                                        if (field.exclude) {
                                            hideTab = true;
                                        }
                                    }
                                });
                            }
                        }
                        if(!hideTab) {
                            self.tabs.push(tabScope);
                        }
                    };
                    self.loadDynamicContent = function (userMethod, selectedTab) {
                        if (Object.prototype.toString.call(userMethod) === '[object Function]' && !selectedTab.hasTranscludedContent && !selectedTab.dynamicContent) {
                            userMethod().then(function (data) {
                                selectedTab.dynamicContent = data;
                                selectedTab.dynamic(data);
                            }, function(error){
                                console.error(error);
                            });
                        }
                    };
                    self.activate = function (selectedTab) {
                        self.currentActive.active = false;
                        selectedTab.active = true;
                        self.currentActive = selectedTab;
                        if (selectedTab.state) {
                            $state.go(selectedTab.state, selectedTab.stateParams);
                        } else {
                            self.loadDynamicContent(selectedTab.loadDataOnClick, selectedTab);
                        }
                    };
                }]
            };
        })
        .directive('xeTabPanel', ['$compile', '$state', function ($compile, $state) {
            return {
                restrict: 'EA',
                transclude: true,
                scope: {
                    heading: '@',
                    state: '@',
                    loadDataOnClick: '&',
                    jsLazyLoad: '@',
                    xeField: '@?',
                    stateParams: '='
                },
                templateUrl: 'templates/tabPanel.html',
                require: '^xeTabNav',
                link: function (scope, ele, attr, xeTabNavCtrl, $transclude) {
                    xeTabNavCtrl.extendTab(attr, scope);
                    scope.element = ele;
                    scope.tabIndex = xeTabNavCtrl.tabs.indexOf(scope) + 1;
                    scope.lazyLoadJs = function (activeTab) {
                        var script = document.createElement('script');
                        script.src = activeTab.jsLazyLoad;
                        document.head.appendChild(script);
                    };
                    $transclude(scope, function (clone, scope) {
                        var elementTo;
                        if (clone.text().trim().length) {
                            scope.hasTranscludedContent = true;
                            elementTo = angular.element(ele[0].querySelector('[content]'));
                            elementTo.append(clone);
                        }
                    });
                    if (attr.hasOwnProperty('active') || scope.state === $state.current.name) {
                        scope.active = true;
                        xeTabNavCtrl.currentActive = scope;
                        loadContent();
                    } else if (ele.is(':last-child') && !xeTabNavCtrl.currentActive) {
                        xeTabNavCtrl.tabs[0].active = true;
                        xeTabNavCtrl.currentActive = xeTabNavCtrl.tabs[0];
                        xeTabNavCtrl.currentActive.element.attr('active', '');
                        loadContent();
                    }
                    scope.dynamic = function (data) {
                        var htmlTemplate, content, elementTo;
                        htmlTemplate = angular.element(data);
                        content = $compile(htmlTemplate)(scope);
                        elementTo = angular.element(ele[0].querySelector('[content]'));
                        elementTo.append(content);
                        if (scope.jsLazyLoad && scope.active) {
                            scope.lazyLoadJs(scope);
                        }
                    };

                    function loadContent() {
                        if (attr.loadDataOnClick) {
                            xeTabNavCtrl.loadDynamicContent(xeTabNavCtrl.currentActive.loadDataOnClick, xeTabNavCtrl.currentActive);
                        } else {
                            xeTabNavCtrl.activate(xeTabNavCtrl.currentActive);
                        }
                    }
                }
            };
        }]);
}());
/*jslint browser: true*/
(function () {
    'use strict';

    angular.module('timePicker', ['xe-ui-components', 'ngMessages','dateParser'])
        .directive('xeTimePicker', ['$timeout', '$filter', '$window', '$document', 'Language', 'keyCodes', '$dateParser','dateFilter', function ($timeout, $filter, $window, $document, Language, keyCodes, $dateParser,$timeFilter) {
            return {
                restrict: 'E',
                scope: {
                    displayFormat: '@?',
                    xeConfigstep: '@?',
                    xeId: '@',
                    xeName: '@',
                    xePlaceholder: '@?',
                    modelScope: '=?xeModel',
                    returnFormat: '@?',
                    returnTranslatedMeridian:'@?',
                    xeWidth: '@?'
                },
                replace: true, // Replace with the template below
                templateUrl: Language.isRtl() ? 'templates/timePicker_rtl.html' : 'templates/timePicker.html',
                controller: ['$scope', function ($scope) {
                    $scope.timeObject = {};
                    $scope.toggleContainer = false;
                    $scope.hours = [];
                    $scope.minutes = [];
                    if (!$scope.displayFormat) {
                        $scope.displayFormat = $filter('xei18n')('default.timepicker.time.format');
                        if ('default.time.watermark.format' != $filter('xei18n')('default.time.watermark.format')) {
                            $scope.xeTimePlaceholder = $filter('xei18n')('default.time.watermark.format');
                        }
                    } else {
                        $scope.xeTimePlaceholder = $scope.xePlaceholder;
                        //$scope.displayModel = $scope.modelScope;
                    }
                    if ($scope.modelScope === undefined || $scope.modelScope === null ){
                        $scope.modelScope="";
                    }
                    $scope.displayModel = $scope.modelScope;
                    $scope.minFocusElem = "";
                    $scope.hrsFocusElem = "";
                    $scope.showError = false;
                    $scope._12hrFormat = 'hh:mm a';
                    $scope._24hrFormat = 'HH:mm';

                    $scope.formatNumberTwoDecimal = function (num) {
                        if (num != "") {
                            num = new Intl.NumberFormat('en-US', {minimumIntegerDigits: 2}).format(num);
                        }
                        return num;
                    };

                    $scope.formatTimeTo12Hours = function (inputValue, returnTranslated) {
                        var formattedValue;
                        if (inputValue) {
                            var meridian = inputValue.split(" ")[1];;
                            if ( inputValue.split ( " " ).length > 2 ) {
                                meridian = inputValue.split ( " " ) [1] + inputValue.split ( " " ) [2];
                            }
                            if (returnTranslated) {
                                if (meridian === "PM") {
                                    meridian = $scope.meridiansList[1];
                                } else if (meridian === "AM") {
                                    meridian = $scope.meridiansList[0];
                                }
                            } else {
                                if (meridian === $scope.meridiansList[1]) {
                                    meridian = "PM";
                                } else if (meridian === $scope.meridiansList[0]) {
                                    meridian = "AM";
                                }
                            }
                            formattedValue = inputValue.split(" ")[0] + " " + meridian;
                        }
                        return formattedValue;
                    };

                    $scope.formatEnteredTime = function (timeData, inputformat, returnformat) {
                            var formattedDate = $dateParser(timeData, inputformat);
                        return $timeFilter(formattedDate, returnformat);
                    };


                    var userAgent = $window.navigator.userAgent;
                    var browsers = {
                        chrome: /chrome/i,
                        safari: /safari/i,
                        firefox: /firefox/i,
                        ie: /internet explorer/i
                    };

                    $scope.getBrowser = function () {
                        for (var key in browsers) {
                            if (browsers[key].test(userAgent)) {
                                return key;
                            }
                        }
                    };

                    if (!$scope.xeConfigstep) {
                        var num = new Intl.NumberFormat('en-US', {minimumIntegerDigits: 2}).format(1);
                        $scope.xeConfigstep = num;
                    }
                    function timepickerConstructor() {
                        $scope.timeObject.hours = [];
                        $scope.timeObject.minutes = [];
                        $scope.timeObject.configstep;
                        $scope.timeObject.is24Hrformat;
                        $scope.timeObject.returnFormat;
                    }

                    $scope.timeObject = new timepickerConstructor();
                    $scope.timeObject.displayFormat = $scope.displayFormat;
                    $scope.timeObject.returnFormat = $scope.returnFormat;


                    if (null != $scope.timeObject.displayFormat && "undefined" != $scope.timeObject.displayFormat) {
                        var lengthOfFormat = $scope.timeObject.displayFormat.split(" ").length;
                        if (lengthOfFormat === 2) {
                            //12 hours format
                            $scope.maxHrs = 12;
                            $scope.minHr = 1;
                            $scope.timeObject.is24Hrformat = false;
                        } else {
                            //24 hours format
                            $scope.maxHrs = 23;
                            $scope.minHr = 0;
                            $scope.timeObject.is24Hrformat = true;
                        }
                        $scope.maxMinutes = 59;
                        $scope.timeObject.configstep = $scope.xeConfigstep;
                        populateTimeObject();
                    }

                    if (null != $scope.returnFormat && "undefined" != $scope.returnFormat) {
                        var lengthOfFormat = $scope.returnFormat.split(" ").length;
                        if (lengthOfFormat === 2) {
                            //12 hours format
                            $scope.timeObject.returnFormat = 12;
                        } else {
                            //24 hours format
                            $scope.timeObject.returnFormat = 24;
                        }
                    }

                    if (null != $scope.displayModel && "undefined" != $scope.displayModel) {
                        var formatLength = $scope.displayModel.split(" ").length;
                        if (formatLength === 2) {
                            //12 hours format
                            $scope.timeObject.format12 = "Y";
                        } else {
                            $scope.timeObject.format12 = "N";
                            //24 hours format
                        }
                    } else {
                        $scope.timeObject.format12 = null;
                    }

                    if($scope.timeObject.is24Hrformat==false && $scope.timeObject.format12 == 'Y'){
                        $scope.timeObject.format12 = 'Y';
                    }else if($scope.timeObject.is24Hrformat==true && $scope.timeObject.format12 == 'N'){
                        $scope.timeObject.format12 = 'N';
                    }

                    function populateTimeObject() {
                        var defaultHoursConfigStep = 1;
                        $scope.timeObject.hours = creatingTimeData($scope.maxHrs, defaultHoursConfigStep);
                        $scope.timeObject.minutes = creatingTimeData($scope.maxMinutes, $scope.timeObject.configstep);
                    }

                    function creatingTimeData(maxcount, configstep) {
                        var listofItems = [];
                        var maxElement = parseInt(0);
                        configstep = parseInt(configstep);
                        if (maxcount === 12) {
                            maxElement = 1;
                        }
                        if (configstep) {
                            if (configstep > 60 || configstep < 0) {
                                configstep = 1
                            }
                        } else {
                            configstep = 1;
                        }
                        while (maxElement <= maxcount) {
                            var num = new Intl.NumberFormat('en-US', {minimumIntegerDigits: 2}).format(maxElement);
                            listofItems.push(num);
                            maxElement = maxElement + configstep;
                        }
                        return listofItems;
                    }

                    $scope.meridiansList = [$filter('xei18n')('default.time.am'), $filter('xei18n')('default.time.pm')];

                    $scope.commonIncrement = function (currentIndex, currentObj, isHours) {
                        if (!isHours) {
                            if (parseInt(currentIndex) === 0 || parseInt(currentIndex) === -1) {
                                nextCommonIncrement(currentIndex, currentObj, $scope.timeObject.minutes, isHours);
                                setPreviousValues(currentIndex, currentObj);
                            } else if (parseInt(currentIndex) > 0 && parseInt(currentIndex) < $scope.timeObject.minutes.length - 2) {
                                nextCommonIncrement(currentIndex, currentObj, $scope.timeObject.minutes, isHours);
                                setPreviousValues(currentIndex, currentObj)
                            } else if (parseInt(currentIndex) > $scope.timeObject.minutes.length - 2 || parseInt(currentIndex) === $scope.timeObject.minutes.length - 2) {
                                nextCommonIncrement(currentIndex, currentObj, $scope.timeObject.minutes, isHours);
                                var prevElementInDiv = parseInt(currentIndex); //doesn't go below scope.hours[0]
                                if (parseInt(currentIndex) !== $scope.timeObject.minutes.length - 1) {
                                    var prevMinUL = angular.element(currentObj).closest('ul');
                                    var prevContent = angular.element(prevMinUL).find('li')[prevElementInDiv].innerText;
                                    var wrapDiv = angular.element(currentObj).closest('div');
                                    angular.element(wrapDiv).find('div.previousDiv').text("");
                                    angular.element(wrapDiv).find('div.previousDiv').text(prevContent);
                                }

                            }
                        } else {
                            if (parseInt(currentIndex) === 0 || parseInt(currentIndex) === -1) {
                                nextCommonIncrement(currentIndex, currentObj, $scope.timeObject.hours, isHours);
                                setPreviousValues(currentIndex, currentObj);
                            } else if (parseInt(currentIndex) > 0 && parseInt(currentIndex) < $scope.timeObject.hours.length - 2) {
                                nextCommonIncrement(currentIndex, currentObj, $scope.timeObject.hours, isHours);
                                setPreviousValues(currentIndex, currentObj);
                            } else if (parseInt(currentIndex) > $scope.timeObject.hours.length - 2 || parseInt(currentIndex) === $scope.timeObject.hours.length - 2) {
                                nextCommonIncrement(currentIndex, currentObj, $scope.timeObject.hours, isHours);
                                var prevElementInDiv = parseInt(currentIndex); //doesn't go below scope.hours[0]
                                if (parseInt(currentIndex) !== $scope.timeObject.hours.length - 1) {
                                    var prevHRUL = angular.element(currentObj).closest('ul');
                                    var prevContent = angular.element(prevHRUL).find('li')[prevElementInDiv].innerText;
                                    var wrapDiv = angular.element(currentObj).closest('div');
                                    angular.element(wrapDiv).find('div.previousDiv').text("");
                                    angular.element(wrapDiv).find('div.previousDiv').text(prevContent);
                                }
                            }
                        }
                    };

                    function nextCommonIncrement(currentIndex, currentObj, arrayList, isHours) {
                        // nextElementFocus shouldn't exceed 24 or 12 that is length of the scope.hours.
                        var nextElementFocus = parseInt(currentIndex) + 1;
                        if (nextElementFocus < arrayList.length) {
                            var nextHRUL = angular.element(currentObj).closest('ul');
                            angular.element(nextHRUL).find('li').each(function (ind, eachLi) {
                                $(eachLi).attr('tabindex', -1);
                            });
                            angular.element(nextHRUL).find('li').siblings().removeClass('active-timepicker');
                            var setTabToFocus = angular.element(nextHRUL).find('li')[nextElementFocus];
                            if (isHours) {
                                $scope.hrsFocusElem = setTabToFocus;
                            } else {
                                $scope.minFocusElem = setTabToFocus;
                            }
                            angular.element(setTabToFocus).addClass('active-timepicker');
                            angular.element(setTabToFocus).attr('tabindex', 0);
                            angular.element(setTabToFocus).focus();
                        }
                        var nextElementInDiv = parseInt(nextElementFocus) + 1;
                        var wrapDiv = angular.element(currentObj).closest('div');
                        angular.element(wrapDiv).find('div.nextDiv').text("");
                        if (parseInt(currentIndex) > arrayList.length - 2 || parseInt(currentIndex) === arrayList.length - 2) {
                            angular.element(wrapDiv).find('div.nextDiv').text("");
                        } else {
                            var nextHRUL = angular.element(currentObj).closest('ul');
                            angular.element(wrapDiv).find('div.nextDiv').text("");
                            if (angular.element(nextHRUL).find('li')) {
                                var nextContent = angular.element(nextHRUL).find('li')[nextElementInDiv].innerText;
                                angular.element(wrapDiv).find('div.nextDiv').text(nextContent);
                            }
                        }
                    }

                    $scope.commonDecrement = function (currentIndex, currentObj, isHours) {
                        var focusIndex = currentIndex - 1;
                        var wrapDiv = angular.element(currentObj).closest('div');
                        if (parseInt(focusIndex) < 0) {
                            //retain the focus
                        } else {
                            var prevHRUL = angular.element(currentObj).closest('ul');
                            var setTabToFocus = angular.element(prevHRUL).find('li')[focusIndex];
                            if (isHours) {
                                $scope.hrsFocusElem = angular.element(prevHRUL).find('li')[focusIndex];
                            } else {
                                $scope.minFocusElem = angular.element(prevHRUL).find('li')[focusIndex];
                            }
                            angular.element(prevHRUL).find('li').each(function (ind, eachLi) {
                                $(eachLi).attr('tabindex', -1);
                            });
                            angular.element(prevHRUL).find('li').siblings().removeClass('active-timepicker');
                            angular.element(setTabToFocus).addClass('active-timepicker');
                            angular.element(setTabToFocus).attr('tabindex', 0);
                            angular.element(setTabToFocus).focus();
                            angular.element(wrapDiv).find('div.nextDiv').text("");
                            if (isHours) {
                                var incValue = $scope.timeObject.hours[focusIndex + 1];
                            } else {
                                var incValue = $scope.timeObject.minutes[focusIndex + 1];
                            }
                            angular.element(wrapDiv).find('div.nextDiv').text(incValue);
                            if (focusIndex < 1 || focusIndex === 0) {
                                angular.element(wrapDiv).find('div.previousDiv').text("");
                            } else {
                                angular.element(wrapDiv).find('div.previousDiv').text("");
                                if (isHours) {
                                    var decValue = $scope.timeObject.hours[focusIndex - 1];
                                } else {
                                    var decValue = $scope.timeObject.minutes[focusIndex - 1];
                                }
                                angular.element(wrapDiv).find('div.previousDiv').text(decValue);
                            }

                        }
                    };

                    function setPreviousValues(currentIndex, currentObj) {
                        var prevElementInDiv = parseInt(currentIndex); //doesn't go below scope.hours[0]
                        var prevHRUL = angular.element(currentObj).closest('ul');
                        var wrapDiv = angular.element(currentObj).closest('div');
                        if (angular.element(prevHRUL).find('li')[prevElementInDiv] !== undefined) {
                            var prevContent = angular.element(prevHRUL).find('li')[prevElementInDiv].innerText;
                            angular.element(wrapDiv).find('div.previousDiv').text(prevContent);
                        } else {
                            angular.element(wrapDiv).find('div.previousDiv').text("");
                        }
                    };

                    $scope.disableInput = function (ele) {
                        ele.find('input.input-field').attr('disabled', 'disabled');
                        ele.find('input.input-field').attr('readonly', 'readonly');
                        ele.find('input.input-field').attr('tabindex', -1);
                    };

                    $scope.enableInput = function (ele) {
                        ele.find('input.input-field').removeAttr('readonly');
                        ele.find('input.input-field').removeAttr('disabled');
                        ele.find('input.input-field').attr('tabindex', 0);
                    };
                }],

                link: function (scope, ele) {

                    $document.bind('click', function (event) {
                        var isClickedElementChildOfPopup = ele
                                .find(event.target)
                                .length > 0;
                        if (!isClickedElementChildOfPopup) {
                            scope.toggleContainer = false;
                            ele.removeClass("time-picker-position");
                            scope.enableInput(ele);
                            scope.$digest();
                        }
                    });

                    // Keyboard Navigation
                    $timeout(function () {
                        var elem = ele.find('.input-outerContainer');
                        elem.css('width', scope.xeWidth);
                        angular.element(ele.find('div.timepickerContainer')).on('keydown', function (event) {
                            if (event.keyCode === keyCodes.F9) {
                                scope.toggleContainer = false;
                                ele.removeClass("time-picker-position");
                                scope.$digest();
                                scope.enableInput(ele);
                                ele.find('div.input-container input.input-field').focus();
                                removeMinsAndHoursAriaLabel();
                            }
                        });

                        function stopEventsDefault(event) {
                            event.preventDefault();
                            event.stopPropagation();
                            event.cancelBubble = true;
                        };

                        if(scope.displayModel){
                            convertTimeOnPageLoad(scope.displayModel);
                        }

                        var browser = scope.getBrowser();
                        var eventtype;
                        if (browser == "chrome") {
                            eventtype = "wheel"
                        } else if (browser == "firefox") {
                            eventtype = "DOMMouseScroll"
                        } else {
                            eventtype = "mousewheel"
                        }

                        ele.find('div.extraDiv').on('focus', function () {
                            angular.element(scope.hrsFocusElem).focus();
                            scope.focusPrevElement = ele.find('.hrsFocus');
                            angular.element(scope.focusPrevElement).addClass('active-timepickerFocus');
                        });
                        var timerButton = ele.find('div.input-container .inputicon');

                        angular.element(timerButton).on('click', function (event) {
                            removeallFocus();
                            scope.focusHrsElement = ele.find('.hrsFocus');
                            angular.element(scope.focusHrsElement).addClass('active-timepickerFocus');
                            scope.showError = false;
                            scope.toggleContainer = scope.toggleContainer ? false : true;
                            if (scope.toggleContainer) {
                                ele.addClass("time-picker-position");
                                scope.disableInput(ele);
                            } else {
                                ele.removeClass("time-picker-position");
                                scope.enableInput(ele);
                            }
                            var enteredContent = ele.find('input.input-field').val();

                            validateEnteredContent(enteredContent);
                            scope.$digest();
                            if (!scope.showError) {
                                if (scope.timeObject.is24Hrformat) {
                                    //24 hours
                                    var hrPreSelected = enteredContent.split(":")[0];
                                    var minPreSelected = enteredContent.split(":")[1];
                                    hrPreSelected = parseInt(hrPreSelected);
                                    minPreSelected = parseInt(minPreSelected);
                                    populateTimePicker(hrPreSelected, minPreSelected, ele);
                                } else {
                                    //12 hours
                                    var hrPreSelected = enteredContent.split(":")[0];
                                    hrPreSelected = parseInt(hrPreSelected) - 1;
                                    var minPreSelected = enteredContent.split(":")[1];
                                    if (minPreSelected !== undefined) {
                                        var minPreSelected1 = minPreSelected.split(" ")[0];
                                        var meridianEntered, nextDivMeridian;
                                        populateTimePicker(hrPreSelected, minPreSelected1, ele);
                                        var meridian = minPreSelected.split(" ")[1];
                                        if (meridian.toLocaleLowerCase() === $filter('xei18n')('default.time.am').toLocaleLowerCase()) {
                                            meridianEntered = scope.meridiansList[0];
                                            nextDivMeridian = scope.meridiansList[1];
                                        } else if (meridian.toLocaleLowerCase() === $filter('xei18n')('default.time.pm').toLocaleLowerCase()) {
                                            meridianEntered = scope.meridiansList[1];
                                            nextDivMeridian = scope.meridiansList[0];
                                        }
                                        ele.find('div.pushmeBorder').text(meridianEntered);
                                        ele.find('div.meridianPm').text(nextDivMeridian);
                                    } else {
                                        populateTimePicker(hrPreSelected, 0, ele, 1);
                                    }
                                }
                            } else {
                                var minutesUL = ele.find('ul:last li')[0];
                                var hourUL = ele.find('ul:first li')[0];
                                scope.commonDecrement(1, minutesUL, false);
                                scope.commonDecrement(1, hourUL, true);
                                ele.find('ul:first li')[0].focus();
                                angular.element(ele).find('input.input-field').val("");
                                scope.displayModel="";
                                scope.modelScope = "";
                                scope.$apply();
                            }
                            stopEventsDefault(event);
                        });

                        //close popup on escape key
                        var excapeKeyContainer = ele.find('div.timepickerContainer');

                        angular.element(excapeKeyContainer).on('keydown', function (event) {
                            if (event.keyCode === keyCodes.ESC) {
                                removeallFocus();
                                scope.enableInput(ele);
                                scope.showError = false;
                                scope.toggleContainer = false;
                                ele.removeClass("time-picker-position");
                                scope.$digest();
                                ele.find('div.input-container input.input-field').focus();
                                stopEventsDefault(event);
                            }
                        });

                        //open timepicker on f9 shortcut press
                        var shortcutElement = ele.find('div.input-container input.input-field');

                        angular.element(shortcutElement).on('focusout', function (event) {
                            var enteredContent = ele.find('input.input-field').val();
                            scope.enableInput(ele);
                            validateEnteredContent(enteredContent);
                            stopEventsDefault(event);
                            if (scope.showError) {
                                ele.find('input.input-field').val("");
                                scope.displayModel = "";
                                scope.modelScope = "";
                            } else {
                                enteredContent = formatTimeEntered(enteredContent);
                                timeFormatConvertor(enteredContent);
                            }
                            scope.$apply();
                        });

                        angular.element(shortcutElement).on('keydown', function (event) {
                            if (event.keyCode === keyCodes.F9) {
                                removeallFocus();
                                var hrsFocusElem = ele.find('.hrsFocus');
                                angular.element(hrsFocusElem).addClass('active-timepickerFocus');
                                scope.showError = false;
                                var enteredContent = angular.element(ele).find('input.input-field').val();
                                scope.toggleContainer = true;
                                ele.addClass("time-picker-position");
                                validateEnteredContent(enteredContent);
                                scope.$digest();
                                scope.disableInput(ele);
                                removeMinsAndHoursAriaLabel();
                                addHoursAriaLabel();
                                if (!scope.showError) {
                                    var decrementCount;
                                    if (scope.timeObject.is24Hrformat) {
                                        //24 hours
                                        var hrPreSelected = enteredContent.split(":")[0];
                                        var minPreSelected = enteredContent.split(":")[1];
                                        hrPreSelected = parseInt(hrPreSelected);
                                        minPreSelected = parseInt(minPreSelected);
                                        decrementCount = 1;
                                        populateTimePicker(hrPreSelected, minPreSelected, ele, decrementCount);
                                    } else {
                                        //12 hours
                                        var hrPreSelected = enteredContent.split(":")[0];
                                        hrPreSelected = parseInt(hrPreSelected) - 1;
                                        var minPreSelected = enteredContent.split(":")[1];
                                        if (minPreSelected !== undefined) {
                                            decrementCount = 0;
                                            var minPreSelected1 = minPreSelected.split(" ")[0];
                                            var meridianEntered;
                                            var nextDivMeridian = scope.meridiansList[1];
                                            populateTimePicker(hrPreSelected, minPreSelected1, ele, decrementCount);
                                            var meridian = minPreSelected.split(" ")[1];
                                            if (meridian !== undefined) {
                                                if (meridian.toLocaleLowerCase() === $filter('xei18n')('default.time.am').toLocaleLowerCase()) {
                                                    meridianEntered = scope.meridiansList[0];
                                                    nextDivMeridian = scope.meridiansList[1];
                                                } else if (meridian.toLocaleLowerCase() === $filter('xei18n')('default.time.pm').toLocaleLowerCase()) {
                                                    meridianEntered = scope.meridiansList[1];
                                                    nextDivMeridian = scope.meridiansList[0];
                                                }
                                                ele.find('div.pushmeBorder').text(meridianEntered);
                                                ele.find('div.meridianPm').text(nextDivMeridian);
                                            }
                                        } else {
                                            populateTimePicker(hrPreSelected, 0, ele, 1);
                                        }
                                    }
                                } else {
                                    var minutesUL = ele.find('ul:last li')[0];
                                    var hourUL = ele.find('ul:first li')[0];
                                    scope.commonDecrement(1, minutesUL, false);
                                    scope.commonDecrement(1, hourUL, true);
                                    ele.find('ul:first li')[0].focus();
                                    angular.element(ele).find('input.input-field').val("");
                                }
                                stopEventsDefault(event);
                            }
                            if (event.keyCode === keyCodes.TAB) {
                                validateEnteredContent(this.value);
                                enteredContent = formatTimeEntered(this.value);
                                timeFormatConvertor(enteredContent);
                                scope.$apply();
                                return true;
                            }
                        });

                        function populateTimePicker(hrPreSelected, minPreSelected, ele) {
                            var hrcurrent;
                            var mincurrent;
                            var setToFirstElement = parseInt(-1);
                            var isHours = true;
                            if (scope.timeObject.is24Hrformat) {
                                hrcurrent = scope.timeObject.hours[parseInt(hrPreSelected)];
                                var minIndex;
                                scope.timeObject.minutes.map(function (elementInArray, index) {
                                    if (elementInArray == minPreSelected) {
                                        minIndex = index;
                                    }
                                });
                                minPreSelected = minIndex;
                                mincurrent = scope.timeObject.minutes[parseInt(minPreSelected)];
                            } else {
                                hrcurrent = scope.timeObject.hours[parseInt(hrPreSelected) - 1];
                                var minIndex;
                                scope.timeObject.minutes.map(function (elementInArray, index) {
                                    if (elementInArray == minPreSelected) {
                                        minIndex = index;
                                    }
                                });
                                minPreSelected = minIndex;
                                mincurrent = scope.timeObject.minutes[parseInt(minPreSelected) - 1];
                            }
                            var minutesUL = ele.find('ul:last li')[parseInt(minPreSelected)];
                            var hourUL = ele.find('ul:first li')[parseInt(hrPreSelected)];
                            if (mincurrent && hrcurrent) {
                                ele.find('ul:last li')[parseInt(minPreSelected)].focus();
                                scope.commonIncrement(parseInt(minPreSelected) - 1, minutesUL, !isHours);
                                scope.commonIncrement(parseInt(hrPreSelected) - 1, hourUL, isHours);
                                ele.find('ul:first li')[parseInt(hrPreSelected)].focus();
                            } else if (hrPreSelected === 0 && hrcurrent === undefined && mincurrent !== undefined) {
                                ele.find('ul:last li')[parseInt(minPreSelected)].focus();
                                scope.commonIncrement(parseInt(minPreSelected) - 1, minutesUL, !isHours);
                                scope.commonIncrement(setToFirstElement, hourUL, true);
                            } else if (mincurrent === undefined && hrcurrent !== undefined) {
                                minutesUL = ele.find('ul:last li')[0];
                                scope.commonIncrement(setToFirstElement, minutesUL, !isHours);
                                scope.commonIncrement(parseInt(hrPreSelected - 1), hourUL, isHours);
                            } else {
                                minutesUL = ele.find('ul:last li')[0];
                                hourUL = ele.find('ul:first li')[0];
                                scope.commonIncrement(setToFirstElement, minutesUL, !isHours);
                                scope.commonIncrement(setToFirstElement, hourUL, isHours);
                            }
                        };

                        function validateEnteredContent(enteredContent) {
                            scope.showError = false;
                            var isInvalidTime = false;
                            if (null != enteredContent && "" != enteredContent) {
                                isInvalidTime = validateTimeWithFormat(enteredContent);
                            }
                            if (isInvalidTime) {
                                scope.showError = true;
                                scope.$emit('time-picker-error', $filter('xei18n')('timepicker.error.format.validation'), scope.xeId);
                            }
                        }

                        function validateTimeWithFormat(timeData) {
                            var formattedTime = "";
                            var isInvalidTime = false;
                            formattedTime = formatTimeEntered(timeData);
                            if (!formattedTime) {
                                isInvalidTime = true;
                            }
                            return isInvalidTime
                        }

                        function formatTimeEntered(timeData) {
                            var formattedTime;
                            if (scope.timeObject.is24Hrformat) {
                                var timeArray = splitInputData(timeData);
                                var hours = scope.formatNumberTwoDecimal(timeArray[0]);
                                var minutes = scope.formatNumberTwoDecimal(timeArray[1]);
                                var formattedValue = hours + ":" + minutes;
                                formattedTime = scope.formatEnteredTime(formattedValue, scope._24hrFormat, scope.timeObject.displayFormat);
                            } else {
                                if(timeData){
                                    var format12WithMeridian = scope.formatTimeTo12Hours(timeData,false);
                                    formattedTime = scope.formatEnteredTime(format12WithMeridian, scope._12hrFormat, scope._12hrFormat);
                                }

                            }
                            return formattedTime;
                        }

                        function splitInputData(inputData){
                            return inputData.split(":");
                        }

                        var cancelElement = ele.find('footer.timerFooter .footercancelButton');
                        ele.find('footer.timerFooter .footercancelButton').on('click', function (event) {
                            removeallFocus();
                            scope.showError = false;
                            scope.enableInput(ele);
                            scope.toggleContainer = false;
                            ele.removeClass("time-picker-position");
                            scope.$digest();
                            ele.find('div.input-container input.input-field').focus();
                            stopEventsDefault(event);
                        });

                        ele.find('footer.timerFooter .footercancelButton').on('keydown', function (event) {
                            if (event.shiftKey && event.keyCode === keyCodes.TAB) {
                                removeMinsAndHoursAriaLabel();
                                if (scope.timeObject.is24Hrformat) {
                                    addMinutesAriaLabel();
                                    removeallFocus();
                                    var minFocus = ele.find('ul.minFocus');
                                    toggleFocus(minFocus);
                                } else {
                                    removeallFocus();
                                    var meridianFocus = ele.find('div.meridianFocus');
                                    toggleFocus(meridianFocus);
                                }
                            }
                            return true;
                        });

                        ele.find('footer.timerFooter xe-button button.primary').on('keydown, click', function (event) {
                            setTimePickerValue();
                            stopEventsDefault(event);
                        });


                        ele.find('footer.timerFooter xe-button button.primary').on('keydown', function (event) {
                            if ((!event.shiftKey) && event.keyCode === keyCodes.TAB) {
                                removeMinsAndHoursAriaLabel();
                                addHoursAriaLabel();
                            }
                        });

                        function setTimePickerValue() {
                            var parentDiv = angular.element("#" + scope.xeId).closest('div').next();
                            scope.toggleContainer = false;
                            ele.removeClass("time-picker-position");
                            var hrLiSelected = angular.element(parentDiv).find('ul:first li.active-timepicker').text();
                            var minLiSelected = angular.element(parentDiv).find('ul:last li.active-timepicker').text();
                            var meridianValue = angular.element(parentDiv).find('div.pushmeBorder').text();
                            var timeFormatValueSelect = hrLiSelected + ":" + minLiSelected;
                            var v = !scope.timeObject.is24Hrformat ? timeFormatValueSelect + " " + meridianValue : timeFormatValueSelect;
                            timeFormatConvertor(v);
                            scope.enableInput(ele);
                            ele.find('input.input-field').focus();
                            scope.displayModel = v;
                            angular.element(ele.find('input.input-field')).controller('ngModel').$setDirty();
                            scope.$apply();
                        }

                        function convertTimeOnPageLoad(timeOnLoad) {
                            var returnData = scope.formatEnteredTime(timeOnLoad, scope.returnFormat, scope.returnFormat);
                            var displayData = scope.formatEnteredTime(timeOnLoad, scope.returnFormat, scope.displayFormat);
                            if (scope.timeObject.returnFormat == 12) {
                                if (scope.timeObject.is24Hrformat) {
                                    returnData = returnData
                                } else {
                                    returnData = scope.formatTimeTo12Hours(displayData, false);
                                    returnData = scope.formatEnteredTime(returnData, scope._12hrFormat, scope.returnFormat);
                                }
                            }
                            if (!scope.timeObject.is24Hrformat) {
                                displayData = scope.formatTimeTo12Hours(displayData, true);
                            }
                            scope.displayModel = displayData;
                            scope.modelScope = returnData;
                        }

                        function timeFormatConvertor(timeToConvert) {
                            var displayData, returnData;
                            if (scope.timeObject.format12 === 'Y' || scope.timeObject.format12 === 'N') {
                                if (scope.timeObject.is24Hrformat) {
                                    returnData = scope.formatEnteredTime(timeToConvert, scope.displayFormat, scope.returnFormat);
                                } else {
                                    var returnDataInEnglish = scope.formatTimeTo12Hours(timeToConvert, false);
                                    returnData = scope.formatEnteredTime(returnDataInEnglish, scope.displayFormat, scope.returnFormat);
                                }

                            }
                            if (scope.timeObject.format12 === 'Y' || scope.timeObject.format12 === 'N') {
                                if (scope.timeObject.is24Hrformat) {
                                    displayData = scope.formatEnteredTime(timeToConvert, scope.displayFormat, scope.displayFormat);
                                } else {
                                    var displayDataInEnglish = scope.formatTimeTo12Hours(timeToConvert, false);
                                    displayData = scope.formatEnteredTime(displayDataInEnglish, scope.displayFormat, scope.displayFormat);
                                    displayData = scope.formatTimeTo12Hours(displayData, true);
                                }

                            }
                            scope.displayModel = displayData;
                            scope.modelScope = returnData;
                        }

                        function ChangeAMPM(result) {
                            var amMeridian = $filter('xei18n')('default.time.am');
                            var pmMeridian = $filter('xei18n')('default.time.pm');
                            $(result).text(function (i, v) {
                                return v === amMeridian ? pmMeridian : amMeridian
                            });
                            $(result).next().text(function (i, v) {
                                return v === amMeridian ? pmMeridian : amMeridian
                            });
                        }

                        //Meridian Button add on 12 hrs format
                        if (!scope.timeObject.is24Hrformat) {
                            var tickerContainer = ele.find('div.timepickerContainer .mainContainer .tickerContainer')[0].classList[1];
                            var meridianElement = ele.find('div.timepickerContainer .mainContainer .pushmeBorder')[0];
                            var meridianFocus = ele.find('.meridianFocus');
                            $("." + tickerContainer).on(eventtype, function (event) {
                                removeallFocus();
                                toggleFocus(meridianFocus);
                                ChangeAMPM(meridianElement);
                            });
                            $("." + tickerContainer).on('click', function (event) {
                                removeallFocus();
                                toggleFocus(meridianFocus);

                            });
                            $("." + tickerContainer).on('keydown', function (event) {
                                if (event.keyCode === keyCodes.UP || event.keyCode === keyCodes.DOWN) {
                                    ChangeAMPM(meridianElement);
                                }
                                if (event.shiftKey && event.keyCode === keyCodes.TAB) {
                                    removeMinsAndHoursAriaLabel();
                                    addMinutesAriaLabel();
                                }

                                if ((!event.shiftKey) && event.keyCode === keyCodes.TAB) {
                                    removeMinsAndHoursAriaLabel();
                                }
                            });
                            $("." + tickerContainer).on("touchend", function (event) {
                                removeallFocus();
                                toggleFocus(meridianFocus);
                                ChangeAMPM(meridianElement);
                            });
                        }

                        scope.hrsFocusElem = ele.find('ul:first li')[0];
                        scope.minFocusElem = ele.find('ul:last li')[0];
                        var hrsElement = ele.find('ul:first li');
                        var firstElem = hrsElement[0];
                        var wrapHRDiv = angular.element(firstElem).closest('div');
                        var nextHRUL = angular.element(firstElem).closest('ul');
                        var nextContent = angular.element(nextHRUL).find('li')[1].innerText;
                        angular.element(wrapHRDiv).find('div.nextDiv').text(nextContent);
                        angular.element(firstElem).attr('tabindex', 0);


                        $(nextHRUL).on('click', function () {
                            removeallFocus();
                            toggleFocus(nextHRUL);
                        });

                        angular.element(wrapHRDiv).find('div.nextDiv').on(eventtype, function (event) {
                            var isHours = true;
                            var mouseEvt = event.originalEvent;
                            var currentElement = this;
                            var activeLi = $(currentElement.parentElement).find('ul li.active-timepicker');
                            removeallFocus();
                            var setHrsElement = ele.find('.hrsFocus');
                            toggleFocus(setHrsElement);
                            var currentIndex = parseInt(activeLi[0].classList[0].split("_")[1]);
                            scrollFunctionality(mouseEvt, currentIndex, activeLi, isHours);
                            stopEventsDefault(event);
                            return false;
                        });

                        angular.element(wrapHRDiv).find('div.previousDiv').on(eventtype, function (event) {
                            var isHours = true;
                            var mouseEvt = event.originalEvent;
                            var currentElement = this;
                            var activeLi = $(currentElement.parentElement).find('ul li.active-timepicker');
                            removeallFocus();
                            var setHrsElement = ele.find('.hrsFocus');
                            toggleFocus(setHrsElement);
                            var currentIndex = parseInt(activeLi[0].classList[0].split("_")[1]);
                            scrollFunctionality(mouseEvt, currentIndex, activeLi, isHours);
                            stopEventsDefault(event);
                            return false;
                        });

                        function scrollFunctionality(evt, currentIndex, currentObj, isHours) {
                            var delta = Math.max(-1, Math.min(1, (evt.wheelDelta || -evt.detail)));
                            if (delta < 0) {
                                scope.commonIncrement(currentIndex, currentObj, isHours);
                                return false;
                            } else if (delta > 0) {
                                scope.commonDecrement(currentIndex, currentObj, isHours);
                            }
                        }

                        function toggleFocus(setfocus) {
                            angular.element(setfocus).addClass('active-timepickerFocus');
                        }

                        hrsElement.on('keydown', function (event) {
                            var currentIndex = parseInt(this.classList[0].split("_")[1]);
                            var currentElement = this;
                            var isHours = true;
                            scope.focusPrevElement = ele.find('.minFocus');
                            scope.focusCurrentElement = ele.find('.hrsFocus');
                            hrsElement.each(function (ind, eachLi) {
                                $(eachLi).attr('tabindex', -1);
                            });
                            angular.element("." + this.classList[0]).attr('tabindex', 0);
                            if (event.keyCode === keyCodes.DOWN) {
                                scope.commonIncrement(currentIndex, currentElement, isHours);
                                removeMinsAndHoursAriaLabel();
                                stopEventsDefault(event);
                                return false;
                            }
                            if (event.keyCode === keyCodes.UP) {
                                scope.commonDecrement(currentIndex, currentElement, isHours);
                                removeMinsAndHoursAriaLabel();
                                stopEventsDefault(event);
                                return false;
                            }
                            if (event.keyCode === keyCodes.RIGHT) {
                                angular.element(scope.minFocusElem).focus();
                                removeallFocus();
                                toggleFocus(scope.focusPrevElement);
                                removeMinsAndHoursAriaLabel();
                                addMinutesAriaLabel();
                                angular.element(scope.minFocusElem).focus();
                                stopEventsDefault(event);
                                return false;
                            }

                            if (event.keyCode === keyCodes.ENTER) {
                                removeMinsAndHoursAriaLabel();
                                setTimePickerValue();
                                stopEventsDefault(event);
                                return false;
                            }

                            if (!event.shiftKey && event.keyCode === keyCodes.TAB) {
                                angular.element(scope.minFocusElem).focus();
                                removeallFocus();
                                toggleFocus(scope.focusPrevElement);
                                removeMinsAndHoursAriaLabel();
                                addMinutesAriaLabel();
                                angular.element(scope.minFocusElem).focus();
                                stopEventsDefault(event);
                                return false;
                            }

                            if (event.shiftKey && event.keyCode === keyCodes.TAB) {
                                var setButton = ele.find('footer.timerFooter xe-button button.primary');
                                angular.element(setButton).focus();
                                removeallFocus();
                                toggleFocus(setButton);
                                removeMinsAndHoursAriaLabel();
                                stopEventsDefault(event);
                                return false;
                            }
                            return true;
                        });


                        hrsElement.on(eventtype, function (event) {
                            var mouseEvt = event.originalEvent;
                            var _this = $(this).closest('ul');
                            var currentElement = $(_this).find('li.active-timepicker');
                            var currentIndex = parseInt(currentElement[0].classList[0].split("_")[1]);
                            var isHours = true;
                            removeallFocus();
                            var setHrsElement = ele.find('.hrsFocus');
                            toggleFocus(setHrsElement);
                            scrollFunctionality(mouseEvt, currentIndex, currentElement, isHours);
                            stopEventsDefault(event);
                            return false;

                        });

                        var minElements = ele.find('ul:last li');
                        var firstMinElem = minElements[0];
                        var wrapMinDiv = angular.element(firstMinElem).closest('div');
                        var nextMinUL = angular.element(firstMinElem).closest('ul');
                        var nextContent = angular.element(nextMinUL).find('li')[1].innerText;
                        angular.element(firstMinElem).attr('tabindex', 0);
                        angular.element(wrapMinDiv).find('div.nextDiv').text(nextContent);

                        $(nextMinUL).on('click', function () {
                            removeallFocus();
                            toggleFocus(nextMinUL);
                        });

                        angular.element(wrapMinDiv).find('div.nextDiv').on(eventtype, function (event) {
                            var isHours = false;
                            var mouseEvt = event.originalEvent;
                            var activeLi = $(this.parentElement).find('ul li.active-timepicker');
                            removeallFocus();
                            var minFocus = ele.find('.minFocus');
                            toggleFocus(minFocus);
                            var currentIndex = parseInt(activeLi[0].classList[0].split("_")[1]);
                            scrollFunctionality(mouseEvt, currentIndex, activeLi, isHours);
                            stopEventsDefault(event);
                            return false;
                        });

                        angular.element(wrapMinDiv).find('div.previousDiv').on(eventtype, function (event) {
                            var isHours = false;
                            var mouseEvt = event.originalEvent;
                            var activeLi = $(this.parentElement).find('ul li.active-timepicker');
                            removeallFocus();
                            var minFocus = ele.find('.minFocus');
                            toggleFocus(minFocus);
                            var currentIndex = parseInt(activeLi[0].classList[0].split("_")[1]);
                            scrollFunctionality(mouseEvt, currentIndex, activeLi, isHours);
                            stopEventsDefault(event);
                            return false;
                        });


                        addHoursAriaLabel();

                        minElements.on('keydown', function (event) {
                            var currentIndex = parseInt(this.classList[0].split("_")[1]);
                            var currentElement = this;
                            var isHours = false;
                            scope.focusPrevElement = ele.find('.hrsFocus');
                            scope.focusNextElement = ele.find('.meridianFocus');
                            scope.focusCurrentElement = ele.find('.minFocus');
                            minElements.each(function (ind, eachLi) {
                                $(eachLi).attr('tabindex', -1);
                            });
                            angular.element("." + this.classList[0]).attr('tabindex', 0);
                            if (event.keyCode === keyCodes.DOWN) {
                                removeMinsAndHoursAriaLabel();
                                scope.commonIncrement(currentIndex, currentElement, isHours);
                                stopEventsDefault(event);
                                return false;
                            }
                            if (event.keyCode === keyCodes.UP) {
                                removeMinsAndHoursAriaLabel();
                                scope.commonDecrement(currentIndex, currentElement, isHours);
                                stopEventsDefault(event);
                                return false;
                            }
                            if (event.keyCode === keyCodes.LEFT) {
                                removeMinsAndHoursAriaLabel();
                                addHoursAriaLabel();
                                angular.element(scope.hrsFocusElem).attr('tabindex', 0);
                                angular.element(scope.hrsFocusElem).focus();
                                removeallFocus();
                                toggleFocus(scope.focusPrevElement);
                                stopEventsDefault(event);
                                return false;
                            }
                            if (event.keyCode === keyCodes.RIGHT) {
                                removeMinsAndHoursAriaLabel();
                                scope.ampmEle = ele.find('div.pushmeBorder');
                                angular.element(scope.ampmEle).attr('tabindex', 0);
                                angular.element(scope.ampmEle).focus();
                                if (!scope.timeObject.is24Hrformat) {
                                    var meridianFocus = ele.find('div.meridianFocus');
                                    var minFocus = ele.find('.minFocus');
                                    removeallFocus();
                                    toggleFocus(meridianFocus);
                                }
                                stopEventsDefault(event);
                                return false;
                            }

                            if (event.keyCode === keyCodes.ENTER) {
                                removeMinsAndHoursAriaLabel();
                                setTimePickerValue();
                                stopEventsDefault(event);
                                return false;
                            }

                            if ((!event.shiftKey) && event.keyCode === keyCodes.TAB) {
                                var cancelfocus = ele.find('.footercancelButton');
                                var minfocus = ele.find('.minFocus');
                                var meridianFocus = ele.find('.meridianFocus');
                                if (Language.isRtl()) {
                                    angular.element(cancelfocus).addClass('active-timepickerFocus');
                                    angular.element(minfocus).removeClass('active-timepickerFocus');
                                } else {
                                    if (!scope.timeObject.is24Hrformat) {
                                        removeallFocus();
                                        toggleFocus(meridianFocus);

                                    } else {
                                        removeallFocus();
                                    }
                                }
                                angular.element(cancelfocus).removeClass('active-timepickerFocus');
                                removeMinsAndHoursAriaLabel();
                            }
                            if (event.shiftKey && event.keyCode === keyCodes.TAB) {
                                angular.element(scope.hrsFocusElem).attr('tabindex', 0);
                                angular.element(scope.hrsFocusElem).focus();
                                removeallFocus();
                                toggleFocus(scope.focusPrevElement);
                                removeMinsAndHoursAriaLabel();
                                addHoursAriaLabel();
                                angular.element(scope.hrsFocusElem).focus();
                                stopEventsDefault(event);
                                return false;
                            }

                            return true;
                        });

                        var meridianElem = ele.find('div.mainContainer .pushmeBorder');
                        meridianElem.on('keydown', function (event) {
                            scope.focusCurrentElement = ele.find('.meridianFocus');
                            scope.focusPrevElement = ele.find('.minFocus');
                            if (event.keyCode === keyCodes.LEFT) {
                                angular.element(scope.minFocusElem).focus();
                                removeallFocus();
                                toggleFocus(scope.focusPrevElement);
                                removeMinsAndHoursAriaLabel();
                                addMinutesAriaLabel();
                                angular.element(scope.minFocusElem).focus();
                                stopEventsDefault(event);
                                return false;
                            }

                            if (event.keyCode === keyCodes.RIGHT) {
                                return false;
                            }

                            if (event.keyCode === keyCodes.ENTER) {
                                removeMinsAndHoursAriaLabel();
                                setTimePickerValue();
                                stopEventsDefault(event);
                                return false;
                            }
                            if ((!event.shiftKey) && event.keyCode === keyCodes.TAB) {
                                removeallFocus();
                            }
                            if (event.shiftKey && event.keyCode === keyCodes.TAB) {
                                removeallFocus();
                                toggleFocus(scope.focusPrevElement);
                                $('.meridianFocus').removeClass('active-timepickerFocus');
                            }

                        });

                        function removeMinsAndHoursAriaLabel() {
                            angular.element(scope.hrsFocusElem).parent().removeAttr('aria-label');
                            angular.element(scope.minFocusElem).parent().removeAttr('aria-label');
                        }

                        function removeallFocus() {
                            var minFocus = ele.find('.minFocus');
                            var hrsFocus = ele.find('.hrsFocus');
                            var meridianFocus = ele.find('.meridianFocus');
                            var cancelFocus = ele.find('.footercancelButton');
                            angular.element(meridianFocus).removeClass('active-timepickerFocus');
                            angular.element(minFocus).removeClass('active-timepickerFocus');
                            angular.element(hrsFocus).removeClass('active-timepickerFocus');
                            angular.element(cancelFocus).removeClass('active-timepickerFocus');
                        }

                        function addHoursAriaLabel() {
                            angular.element(scope.hrsFocusElem).parent().attr('aria-label', $filter('xei18n')('timepicker.hour.aria.label') + " " + $filter('xei18n')('timepicker.shortcuts.aria.label'));
                        }

                        function addMinutesAriaLabel() {
                            if (!scope.timeObject.is24Hrformat)
                                angular.element(scope.minFocusElem).parent().attr('aria-label', $filter('xei18n')('timepicker.min.aria.label') + " " + $filter('xei18n')('timepicker.shortcuts.aria.label'));
                            else
                                angular.element(scope.minFocusElem).parent().attr('aria-label', $filter('xei18n')('timepicker.min.aria.24hrs.label') + " " + $filter('xei18n')('timepicker.shortcuts.aria.label'));
                        }

                        minElements.on(eventtype, function (event) {
                            var mouseEvt = event.originalEvent;
                            var isHours = false;
                            var _this = $(this).closest('ul');
                            var currentElement = $(_this).find('li.active-timepicker');
                            var currentIndex = parseInt(currentElement[0].classList[0].split("_")[1]);
                            removeallFocus();
                            var minFocus = ele.find('.minFocus');
                            toggleFocus(minFocus);
                            scrollFunctionality(mouseEvt, currentIndex, currentElement, isHours);
                            stopEventsDefault(event);
                            return false;
                        });

                        var start = {};
                        var stop = {};

                        function touchmove(event) {
                            if (!start) {
                                return;
                            }

                            var data = event.originalEvent.touches ?
                                event.originalEvent.touches[0] :
                                event;
                            stop = {
                                time: (new Date).getTime(),
                                coords: [data.pageX, data.pageY]
                            };

                            // prevent scrolling
                            if (Math.abs(start.coords[1] - stop.coords[1]) > 10) {
                                stopEventsDefault(event);
                            }

                        }

                        //Drag Feature in Desktop for Hrs Container
                        var yDown;
                        var yUp;
                        angular.element(wrapHRDiv).on("mousedown", function (e) {
                            yDown = e.pageY;
                        }).on('mouseup', function (e) {
                            removeallFocus();
                            var setHrsElement = ele.find('.hrsFocus');
                            angular.element(setHrsElement).addClass('active-timepickerFocus');
                            var isHours = true;
                            var activeLi = $(this.parentElement).find('.hrsContainer  ul li.active-timepicker');
                            var currentIndex = parseInt(activeLi[0].classList[0].split("_")[1]);
                            yUp = e.pageY;
                            if (yDown < yUp) {
                                scope.commonDecrement(currentIndex, activeLi, isHours);
                            }
                            else if (yDown > yUp) {
                                scope.commonIncrement(currentIndex, activeLi, isHours);
                            }
                            stopEventsDefault(e);
                            return false;
                        });

                        //Drag Feature in Desktop for Mins Container
                        var yMinDown;
                        var yMinUp;
                        angular.element(wrapMinDiv).on("mousedown", function (e) {
                            yMinDown = e.pageY;
                        }).on('mouseup', function (e) {
                            removeallFocus();
                            var setHrsElement = ele.find('.minFocus');
                            angular.element(setHrsElement).addClass('active-timepickerFocus');
                            var isHours = false;
                            var activeLi = $(this.parentElement).find('.minContainer  ul li.active-timepicker');
                            var currentIndex = parseInt(activeLi[0].classList[0].split("_")[1]);
                            yMinUp = e.pageY;
                            if (yMinDown < yMinUp) {
                                scope.commonDecrement(currentIndex, activeLi, isHours);
                            }
                            else if (yMinDown > yMinUp) {
                                scope.commonIncrement(currentIndex, activeLi, isHours);
                            }
                            stopEventsDefault(e);
                            return false;
                        });

                        function touchStart(touchEvent, elementClass) {
                            removeallFocus();
                            var setElement = ele.find('.' + elementClass);
                            angular.element(setElement).addClass('active-timepickerFocus');
                            var touches = touchEvent.originalEvent.touches ? touchEvent.originalEvent.touches[0] : touchEvent;
                            start = {
                                time: (new Date).getTime(),
                                coords: [touches.pageX, touches.pageY],
                                origin: $(touchEvent.target)
                            }
                        }

                        function touchEnd(currentIndex, ulElement, isHours, evt) {
                            if (start && stop) {
                                if (stop.time - start.time < 1000 &&
                                    Math.abs(start.coords[1] - stop.coords[1]) > 30 &&
                                    Math.abs(start.coords[0] - stop.coords[0]) < 75) {
                                    if (start.coords[1] > stop.coords[1]) {
                                        scope.commonIncrement(parseInt(currentIndex), ulElement, isHours);
                                    } else {
                                        scope.commonDecrement(parseInt(currentIndex), ulElement, isHours);
                                    }
                                    start = stop = undefined;
                                    stopEventsDefault(evt);
                                    return false;
                                }
                            }
                        }

                        $(wrapHRDiv).find('div.nextDiv').on({
                            'touchstart': function (event) {
                                var elementClass = "hrsFocus";
                                touchStart(event, elementClass);
                                $(this).on('touchmove', touchmove);
                                event.preventDefault();
                            },
                            'touchend': function (event) {
                                $(this).off('touchmove');
                                var isHours = true;
                                var wrapDiv = this.closest('div');
                                var ulElement = $(wrapDiv).prev();
                                var currentIndex = $(ulElement).find('li.active-timepicker').val();
                                touchEnd(currentIndex, ulElement, isHours, event);
                            }
                        });


                        $(wrapHRDiv).find('div.previousDiv').on({
                            'touchstart': function (event) {
                                var elementClass = "hrsFocus";
                                touchStart(event, elementClass);
                                $(this).on('touchmove', touchmove);
                                event.preventDefault();
                            },
                            'touchend': function (event) {
                                $(this).off('touchmove');
                                var isHours = true;
                                var wrapDiv = this.closest('div');
                                var ulElement = $(wrapDiv).next();
                                var currentIndex = $(ulElement).find('li.active-timepicker').val();
                                touchEnd(currentIndex, ulElement, isHours, event);
                            }
                        });

                        $(hrsElement).on({
                            'touchstart': function (event) {
                                var elementClass = "hrsFocus";
                                touchStart(event, elementClass);
                                $(this).on('touchmove', touchmove);
                                event.preventDefault();
                            },
                            'touchend': function (event) {
                                $(this).off('touchmove');
                                var isHours = true;
                                var currentIndex = (this.classList[0]).split("_")[1];
                                var ulElement = this;
                                touchEnd(currentIndex, ulElement, isHours, event);
                            }
                        });

                        $(minElements).on({
                            'touchstart': function (event) {
                                var elementClass = "minFocus";
                                touchStart(event, elementClass);
                                $(this).on('touchmove', touchmove);
                                stopEventsDefault(event);
                            },
                            'touchend': function (event) {
                                $(this).off('touchmove');
                                var isHours = false;
                                var ulElement = this;
                                var currentIndex = (this.classList[0]).split("_")[1];
                                touchEnd(currentIndex, ulElement, isHours, event);
                            }
                        });

                        $(wrapMinDiv).find('div.previousDiv').on({
                            'touchstart': function (event) {
                                var elementClass = "minFocus";
                                touchStart(event, elementClass);
                                $(this).on('touchmove', touchmove);
                                event.preventDefault();
                            },
                            'touchend': function (event) {
                                $(this).off('touchmove');
                                var isHours = false;
                                var wrapDiv = this.closest('div');
                                var ulElement = $(this.closest('div')).next();
                                var currentIndex = $(ulElement).find('li.active-timepicker')[0].classList[0].split("_")[1];
                                touchEnd(currentIndex, ulElement, isHours, event);
                            }
                        });

                        $(wrapMinDiv).find('div.nextDiv').on({
                            'touchstart': function (event) {
                                var elementClass = "minFocus";
                                touchStart(event, elementClass);
                                $(this).on('touchmove', touchmove);
                                event.preventDefault();
                            },
                            'touchend': function (event) {
                                $(this).off('touchmove');
                                var isHours = false;
                                var wrapDiv = this.closest('div');
                                var ulElement = $(this.closest('div')).prev();
                                var currentIndex = $(ulElement).find('li.active-timepicker')[0].classList[0].split("_")[1];
                                touchEnd(currentIndex, ulElement, isHours, event);
                            }
                        });
                    },10);
                }
            };
        }])
}());
//# sourceMappingURL=xe-ui-components.js.map
var process = process || {env: {NODE_ENV: "development"}};
/******************************************************************************
 *  Copyright 2020 Ellucian Company L.P. and its affiliates.                  *
 ******************************************************************************/

document.addEventListener( 'visibilitychange' , function() {
    if (!document.hidden && CommonContext.user !== null) {
        var contextPath = window.location.pathname.substring(0, window.location.pathname.indexOf("/",2))
        $.get(contextPath+'/customPage/userSessionValidationCheck', {}, function(data) {
            if(data === 'false'){
                var ele =  document.getElementById('signOut');
                if(ele) {
                    if($('meta[name=logoutEndpoint]').attr("content") === "") {
                        $('meta[name=logoutEndpoint]').attr("content",contextPath+'/logout')
                    }
                    ele.click();
                }
            }
        });
    }
}, false );

var process = process || {env: {NODE_ENV: "development"}};
//= require d3/d3.min.js
//= require xe-components/xe-ui-components.js
//= require userSessionValidationCheck.js

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2022 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
var mSsbUi = angular.module(
    'm-ssb-ui',
    ['ui.bootstrap', 'ui.bootstrap.tpls', 'I18n', 'xe-ui-components', 'numericApp', 'datePickerApp', 'xeSimpleTableModule']
);

mSsbUi.constant('m-ssb-ui-config', {
    // TIMEZONE - Sets time zone used to display dates. Valid values are:
    //     UTC .................. Display dates as UTC
    //     {+|-}HHMM ............ Display dates with given UTC offset (e.g. '+0430' for UTC + 4 hours and 30 minutes)
    //     empty or undefined ... Display dates in client browser defined time zone
    //
    "TIMEZONE" : "UTC",

    // CALENDAR_KEY - i18n key with calendar to use by m-ssb-edit-date
    "CALENDAR_KEY" : "default.calendar",

    // DATE_FORMAT_KEY - i18n key with format to use by m-ssb-value-date and m-ssb-edit-date
    "DATE_FORMAT_KEY" : "js.datepicker.dateFormat",

    // DATETIME_FORMAT_KEY - i18n key with format to use by m-ssb-value-datetime
    "DATETIME_FORMAT_KEY" : "default.dateshorttime.format",

    // DATE_WATERMARK_KEY - i18n key with watermark date format to use by m-ssb-edit-date
    "DATE_WATERMARK_KEY" : "default.date.format.watermark"

});


// This constant defines the alternate text to display when a value is not available.
mSsbUi.constant('CONTENT_NA', 'N/A');



var process = process || {env: {NODE_ENV: "development"}};
mSsbUi
.directive('xeTextBox', function() {
    return {
        restrict: "E",
        compile: function(elem, attrs) {

            if(attrs['mSsbMode'] == "true"){

                // remove unused label
                elem.find('xe-label').addClass('sr-only');
                elem.find('.xe-labeltext-margin').remove();

                // enforce length restrictions
                return {
                    post: function(scope, element, attr) {
                        const input = element.find('input');
                        input.attr('minlength', attr.xeMinlength);
                        input.attr('maxlength', attr.xeMaxlength);
                    }
                }
            }
        }
    }
})

.directive('xeTextArea', function() {
    return {
        restrict: "E",
        compile: function(elem, attrs) {
            if(attrs['mSsbMode'] == "true"){
                // remove unused label
                elem.find('xe-label').remove();
                // modify aria-labelledby
                elem.find('textarea').attr('aria-labelledby', '{{xeId}}Label');
            }
        }
    }
})

.directive('xeTableGrid', function() {
    return {
        restrict: "E",
        compile: function(elem, attrs) {
            if(attrs['mSsbMode'] == "true"){
                if (attrs.caption) {
                    // allow table title to be dynamically updated (replace "::caption" with "caption")
                    elem.find('#gridCaption').attr('ng-bind', 'caption');
                } else {
                    //remove aria-labelledby attribute which causes WAVE error
                    elem.removeAttr('aria-labelledby');
                }
            }
        }
    }
})

var process = process || {env: {NODE_ENV: "development"}};
mSsbUi.
filter('i18n', function () {
    return function (key, data) {
        //i18n
        let value = _.isUndefined(key) ? key : window.i18n[key];

        //Allow using non i18n keys
        if (!value) value = key;

        //Format
        if ((value) && (data)) {
            //Support old %NN% format
            //i18n.key: '... %01% ... %02% ...'
            //Usage in controller: $filter('i18n')('i18n.key', ['R0', 'R1'])
            //Usage in view: {{ 'i18n.key' | i18n : ['R0', 'R1'] }}
            //Result: '... R0 ... R1 ...'
            for (let i=0; i < data.length; i++) {
                let regexp = new RegExp('\\%(0?'+(i+1)+')\\%', "g");
                let newValue = arguments.callee(data[i]);
                value = value.replace(regexp, newValue);
            }

            //Support new {N} format
            //i18n.key: '... {0} ... {1} ...'
            //Usage in controller: $filter('i18n')('i18n.key', ['R0', 'R1'])
            //Usage in view: {{ 'i18n.key' | i18n : ['R0', 'R1'] }}
            //Result: '... R0 ... R1 ...'
            for (let i=0; i < data.length; i++) {
                let regexp = new RegExp('\\{('+i+')\\}', "g");
                let newValue = arguments.callee(data[i]);
                value = value.replace(regexp, newValue);
            }
        }

        return value;
    };
});
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

mSsbUi.
filter('isEmpty', [function() {
    return function(object) {
        return _.isEmpty(object);
    }
}])
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2023 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

mSsbUi.service('commonUtilService',
['$rootScope', '$filter', '$timeout', '$window','$http', '$translate',
function ($rootScope, $filter, $timeout, $window,  $http, $translate) {

    const util = this;

    const NOTIFY_INFO = "success";
    const NOTIFY_WARN = "warning";
    const NOTIFY_ERROR = "error";


    /**
     * Clears all notifications
     */
    this.clearNotifications = function() {
        notifications.clearNotifications();
    };


    /**
     * Displays notification
     *
     * @param  msg Notification message (optionally an i18n key)
     * @param  type 'success' | 'warning' | 'error' (default is success)
     * @param  flash Whether to auto close notification if another one is shown (default is true)
     * @param  append Whether to append to the list of notifications (default is true)
     */
    this.showMessage = function(msg, type=NOTIFY_INFO, flash=false, append=true) {
        if (!append) {
            util.clearNotifications();
        }

        if (type === NOTIFY_INFO) {
            flash = true
        }

        var notification = new Notification({
            "message": $filter('i18n')(msg),
            "type": type,
            "flash": flash,
            "promptMessage": ""
        });
        if (type === NOTIFY_WARN) {

            notification.addPromptAction($filter('i18n')('m.ssb.alert.button'), function() {
                //Problem: notifications added after alert with flash=true aren't cleared
                notifications.forEach( (n) => {
                    if (n.attributes.type !== NOTIFY_WARN && n.flash) {
                        notifications.remove(n);
                    }
                });
                notifications.remove(notification);
                $rootScope.$broadcast("warningPromptOkClicked");
            });
        }
        $timeout( function(){
            notifications.addNotification(notification);
            let errorContainer = angular.element(".notification-center-flyout-displayed .error-container");
            if(errorContainer.find('.notification-item-message:first').length){
                errorContainer.attr("tabindex","0");
                errorContainer.focus();
            }
        });
    }

    /** Displays info notification */
    this.showInfo = function(msg, flash, append) {
        util.showMessage(msg, NOTIFY_INFO, flash, append);
    }

    /** Displays warning notification */
    this.showWarn = function(msg, flash, append) {
        util.showMessage(msg, NOTIFY_WARN, flash, append);
    }

    /** Displays error notification */
    this.showError = function(msg, flash, append) {
        util.showMessage(msg, NOTIFY_ERROR, flash, append);
    }


    /** Converts server message type to client notification type */
    var msgType2NotifyType = function(msgType) {
        switch (msgType) {
            case 1: return NOTIFY_ERROR;
            case 2: return NOTIFY_WARN;
            case 3:
            default:
                return NOTIFY_INFO;
        }
    }


    /** Displays server messages */
    this.displayMessages = function(messages) {
        util.clearNotifications();
        if (angular.isDefined(messages)) {
            messages.forEach( (m) => util.showMessage(m.message, msgType2NotifyType(m.type)) );
        }
    }

    /** Processes messages in server response */
    this.processResponseMessages = function(response) {
        if (angular.isDefined(response)) {
            util.displayMessages(response.messages);
        }
    }


    /** Processes a server request error */
    this.processResponseError = function(e) {
        if (angular.isDefined(e) && angular.isDefined(e.config) && angular.isDefined(e.config.url)) {
            console.warn("Call to '", e.config.url, "' returned error:", e);
        }
        else {
            console.warn("Call returned error:", e);
        }
        var msg = $filter('i18n')('default.unknown.banner.api.exception');
        util.showError(msg, false, false);
    }



    /**
     * Checks whether form is valid.
     * Displays notification when form is invalid and moves focus to first invalid control.
     *
     * Supported components:
     *     m-ssb-edit-text
     *     m-ssb-edit-text-area
     *     m-ssb-edit-numeric
     *     m-ssb-edit-date
     *     m-ssb-edit-radiobox
     *
     * Unsupported components (validation must be done manually):
     *     m-ssb-edit-checkbox
     *     m-ssb-edit-select
     *
     * @param formName Name of the form ('pageForm' by default)
     * @return true if form is valid, false otherwise.
     */
    this.validateForm = function(formName='pageForm') {

        util.clearNotifications();
        if ($rootScope[formName] && $rootScope[formName].$invalid) {
            const formControls = $rootScope[formName].$$controls;
            var controlError = null
            //1) check dirty inputs
            for (let i=0; i < formControls.length; i++) {
                const control = formControls[i];
                if (control.$dirty && !control.$valid) {
                    controlError = control
                    break
                }
            }

            //2) check required inputs
            if(!controlError){
                for (let i=0; i < formControls.length; i++) {
                    const control = formControls[i];
                    if (control.$error.required) {
                        controlError = control
                        break
                    }
                }
            }

            //3) check non-dirty inputs
//            if(!controlError){
//                for (let i=0; i < formControls.length; i++) {
//                    const control = formControls[i];
//                    if (!control.$valid) {
//                        controlError = control
//                        break
//                    }
//                }
//            }

            if (controlError) {
                $timeout(() => {
                    util.clearNotifications();
                    showValidationError(controlError);
                })
                return false;
            }
        }
        return true;
    }

    function showValidationError(control) {
        //display notification
        const elem = control.$$element;
        const errMsg = getValidationErrorMessage(elem);
        util.showError(errMsg);
        //focus control
        if (elem[0].tagName && elem[0].tagName === 'XE-RADIO-BUTTON') {
            elem.find('.radio-container').focus();
        } else {
            elem.focus();
        }
    }

    function getValidationErrorMessage(elem) {
        while (elem[0]) {
            const tagName = elem[0].tagName;
            if (tagName && tagName.startsWith('M-SSB-EDIT')) {
                switch(tagName) {
                    case 'M-SSB-EDIT-TEXT':
                        return elem.data().$mSsbEditTextController.getValidationErrorMessage();
                    case 'M-SSB-EDIT-TEXT-AREA':
                        return elem.data().$mSsbEditTextAreaController.getValidationErrorMessage();
                    case 'M-SSB-EDIT-NUMERIC':
                        return elem.data().$mSsbEditNumericController.getValidationErrorMessage();
                    case 'M-SSB-EDIT-DATE':
                        return elem.data().$mSsbEditDateController.getValidationErrorMessage();
                    case 'M-SSB-EDIT-RADIOBOX':
                        return elem.data().$mSsbEditRadioboxController.getValidationErrorMessage();
                    case 'M-SSB-EDIT-PASSWORD':
                        return elem.data().$mSsbEditPasswordController.getValidationErrorMessage();
                    default:
                        return $filter('i18n')('m.ssb.edit.invalid');
                }
            } else {
                elem = elem.parent();
            }
        }

        //fallback
        return $filter('i18n')('m.ssb.edit.invalid');
    }


    /** @return base application URL */
    let baseUrl = undefined;
    this.getBaseUrl = function() {
        if (baseUrl === undefined) {
            //TODO? we're relying on aboutUrlContextPath meta... maybe there's a better way
            baseUrl = $('meta[name=aboutUrlContextPath]').attr("content");
            baseUrl = baseUrl.substring(0, baseUrl.lastIndexOf('ssb'));
        }
        return baseUrl;
    }


    /** @return full URL for retrieving image */
    this.getImageUrl = function(imageFileName) {
        return util.getBaseUrl() + 'assets/' + imageFileName;
    }


    /**
     * Navigates to form generated by specified endpoint with specified parameters
     *
     * @param endpoint - server endpoint (in "controller/method" format)
     * @param params - endpoint parameters (optional, default is none)
     * @param newTab - whether to open form in a new tab (optional, default is false)
     */
    this.showForm = function(endpoint, params, newTab=false) {
        let url = util.getBaseUrl() + 'ssb/' + endpoint;
        if (angular.isDefined(params)) {
            let first = true;
            angular.forEach(Object.keys(params), (key) => {
                if (first) {
                    url += '?';
                    first = false;
                } else {
                    url += '&';
                }
                if (params[key] != undefined) {
                    var myArray= params[key];
                    if(myArray instanceof Array){
                        let first1 = true;

                        for (var i=0;i< myArray.length;i++)
                        {
                            if (first1) {
                                first1 = false;
                            } else {
                                url += '&';
                            }
                            url +=key+"="+encodeURIComponent(myArray[i]);
                        }
                    }else{
                        url += key + "="+encodeURIComponent(params[key]);
                    }

                }
            });
        }
        util.goURL(url, newTab);
    }


    /**
     * Navigates to external URL
     *
     * @param url - external URL to navigate to
     * @param newTab - whether to open URL in a new tab (optional, default is false)
     */
    this.goURL = function(url, newTab=false) {
        //Ensure URL is absolute and starts with protocol
        if (!url.startsWith('http') && !url.startsWith('/')) {
            url = 'https://' + url;
        }
        if (newTab) {
            $window.open(url, '_blank');
        } else {
            $window.location.href = url;
        }
    }

    /** Navigates to previous URL in browser history */
    this.goPreviousPage = function() {
        $window.history.back();
    }


    /**
     * Round the number to the defined accuracy
     *
     * @param  number The number to round
     * @param  accuracy The number of the decimal digits to apply
     * @return rounded number
     */
    this.roundAccuracy = (number, accuracy) => {
        const factor = Math.pow(10, accuracy)
        return Math.round((number+ Number.EPSILON) * factor) / factor
    }

    /**
     * Sums all the values of the specified property object inside an array
     * Usage example: totalsArray: [ { total : 10 } , { total : 20 } ] --> sumArrayProp(totalsArray, 'total') = 30
     *
     * @param  items - array of objects
     * @param  prop - property to search and sum inside each object of the array
     * @return sum of values
    */
    this.sumArrayProp = (items, prop) => items.reduce((sum, obj) => obj[prop] ? sum + obj[prop] : sum , 0)

    /**
     * Sets undefined or null values of an object to an empty string
     * Also checks for properties of inner objects of an array
     *
     * @param params - object of parameters to check
     * @return object of params without undefined or empty values
    */
    this.checkUndefinedParams = (params) => {
        if (angular.isDefined(params)) {
            Object.entries(params).forEach(([key, value]) => {
                if (Array.isArray(value)) {
                    value.forEach((value, idx) => {
                        if (value == undefined) {
                            // Also catches null but not 0 or false
                            params[key][idx] = value || ""
                        } else if (typeof value == 'object') {
                            // Invoke function recursively if value is object
                            this.checkUndefinedParams(value)
                        }
                    })
                }
                if (value == undefined) {
                    // Also catches null but not 0 or false
                    params[key] = value || ""
                }
            })
        }
        return params
    }

    /**
     * Check if a field is defined/exists on the specified table
     *
     * @param table - represent the table that we want to checked if the field is defined
     * @param field - name of the field that we want to checked if exists on the table
     * @return boolean value to indicate either the field are defined or not on the table
    */
    this.hasTableField = function(table, field) {
        return table && table.length && table[0][field] !== undefined
    }


    /**
     * @deprecated Use m-ssb-table instead
     *
     * Creates model structure for use with a xe-table-grid
     *
     * @param  caption The title of the table (i18n key)
     * @param  columns List of column labels (i18n keys) followed by field names in content rows
     * @param  content Content rows (optional, can be set latter directly in returned structure)
     * @return xe-table-grid model
     */
    this.createXeTableModel = function(caption, columns, content) {

        var header = [];
        var fieldNames = [];
        for(var i=0; i<columns.length; i+=2) {
            header.push({
                position: { desktop: (i+1), mobile: (i+1) },
                title: $filter('i18n')(columns[i]),
                name: columns[i+1],
                options: { visible: true, sortable:true, /*ascending: false,*/ }
            });
            fieldNames.push(columns[i+1]);
        }

        return {
            "caption" : $filter('i18n')(caption),
            "header" : header,
            "draggableColumnNames" : fieldNames,
            "content" : content,
            "paginate" : false,
        }
    }

    this.openPDF = function(urlIn, paramsIn, filename='document.pdf') {
            $http({
                 method: 'GET',
                 url: './'+urlIn,
                 params: paramsIn,
                 responseType: 'arraybuffer'
            }).then( (response) => {
                var blob = new Blob([response.data], {type: "application/pdf"});
                var header = unescape(response.headers()['content-disposition']);
                if (header) {
                    var startIndex = header.indexOf('filename=');
                    if (startIndex >= 0) {
                        filename = header.slice(startIndex + 9);
                    }
                }
                var anchor = angular.element('<a/>');
                    anchor.css({display: 'none'}); // Make sure it's not visible
                    angular.element(document.body).append(anchor); // Attach to document for FireFox
                    anchor.attr({
                        href: window.URL.createObjectURL(blob),
                        target: '_blank',
                        download: filename
                })[0].click();
                anchor.remove();
            });
        }

    this.openZIP = function(urlIn, paramsIn, filename='document.zip') {
           return $http({
                 method: 'GET',
                  url: './'+urlIn,
                  params: paramsIn,
                 responseType: 'blob'
            }).then( (response) => {
                if(response.data.size > 70){
                    var blob = new Blob([response.data], {type: "application/zip"});
                    var header = unescape(response.headers()['content-disposition']);
                    if (header) {
                        var startIndex = header.indexOf('filename=');
                        if (startIndex >= 0) {
                            filename = header.slice(startIndex + 9);
                        }
                    }
                    var anchor = angular.element('<a/>');
                        anchor.css({display: 'none'}); // Make sure it's not visible
                        angular.element(document.body).append(anchor); // Attach to document for FireFox
                        anchor.attr({
                            href: window.URL.createObjectURL(blob),
                            target: '_blank',
                            download: filename
                    })[0].click();
                    anchor.remove();
                    return true
                }else{
                    return false
                }
            });
        }

    /**
     * Check if the current language is RTL
     *
     * @return true if rtl and false otherwise
     */
     this.isRTL = function() {
        return $filter('i18n')('default.language.direction') == 'rtl';
     }

     this.isArabic = function() {
        return ($translate.use() && $translate.use().startsWith('ar')) || ($translate.proposedLanguage() && $translate.proposedLanguage().startsWith('ar'));
     }

    this.convertISODateToUTCDate = function(isoDate) {
        const input_date = new Date(isoDate);
        return new Date(input_date.getTime() + input_date.getTimezoneOffset() * 60000);
    }

    this.convertIsoDateToCDateString = function(isoDate, format, calendarType) {
        const utc_date = util.convertISODateToUTCDate(isoDate);
        const cDate = $.calendars.newDate(utc_date.getFullYear(), utc_date.getMonth() + 1, utc_date.getDate(), calendarType);
        return cDate.formatDate(format);
    }

}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - type: font's size (small, medium or default large)
        - label: header label

    Mandatory Attributes:
        -label

    Usage Example:
		<m-ssb-header
            label="{{model.pCondensedHeaderTitle}}"
            type="small">
		</m-ssb-header>
**/

mSsbUi.directive('mSsbHeader',
function () {
    return {
        scope: {
            type: '@?',          // small, medium or large (default)
            label: '@'
        },
        template: function(elem, attrs) {
          if (attrs.type == "small") {
              return`
                   <div class="row">
                       <div class="col-xs-12 small-padding-top small-padding-bottom dashboard-section-padding">
                           <div class="no-margin break-word">
                               <p role="heading" aria-level="3" class="m-ssb-small font-semibold" tabindex="-1">{{label | i18n}}</p>
                           </div>
                       </div>
                   </div>
                `
        } else if (attrs.type == "medium") {
            return `
                <div class="row">
                   <div class="col-xs-12 small-padding-top small-padding-bottom dashboard-section-padding">
                       <div class="no-margin break-word">
                           <p role="heading" aria-level="2" class="m-ssb-medium font-semibold" tabindex="-1">{{label | i18n}}</p>
                       </div>
                   </div>
               </div>
           `
        } else {
            return `
                 <header class="page-header clearfix m-ssb-header">
                    <h1 class="pull-left no-margin page-heading" tabindex="-1">{{label | i18n}}</h1>
                </header>
           `
           //TODO: needed?
//                    <div class="proxy-link-cirtify-effort hidden-xs">
//                        <div class="cirtify-proxyicon">
//                            <div class="proxyicon"></div>
//                            <a class="proxylink">Proxy Super User</a>
//                        </div>
//                    </div>
//
//                    <div class="col-xs-2 pull-right hidden-sm hidden-md hidden-lg">
//                        <span class="dropdown dropdown-preview-approval form-control-menu-link">
//                            <button aria-haspopup="true" data-toggle="dropdown" title="{{'timeEntry.approval.actionMenu'|i18n}}" aria-label="{{'timeEntry.approval.actionMenu'|i18n}}" class="dropbutton">
//                                <span hidden="true" aria-hidden="true">{{'timeEntry.approval.actionMenu'|i18n}}</span>
//                            </button>
//                            <ul role="menu" class="dropdown-menu form-control-menu-contents ellipsis-menu pull-right" list-navigation>
//                                <li role="menuitem">
//                                    <div class="cirtify-proxyicon">
//                                        <div class="proxyicon"></div>
//                                        <a class="proxylink">Proxy Super User</a>
//                                    </div>
//                                </li>
//                            </ul>
//                        </span>
//                    </div>
        }
    },

        /*
        //TODO: needed?
        controller: ['$scope', function ($scope) {

            $(".proxylink").click(function(){
                var key="ER"
                window.location.href = "../ssb/proxy?moduleCode=" + key + "#/proxy";
            });

            $scope.dropdownText=function(key, val){
                window.location.href = "../ssb/proxy?moduleCode="+key+"#/proxy";
            }

            $scope.entAccess = loggedInUserResolve.exterpriseAccess;
            if(!$scope.entAccess) {
                $('.proxy-link-cirtify-effort').addClass('hidden-lg hidden-md hidden-sm')
                $('.dropdown-preview-approval').hide()
            }
        }]
        */
    }
});
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - infos: i18n label

    Mandatory Attributes:
        - infos

    Usage Example:
        <m-ssb-infobar
            infos="infos">
        </m-ssb-infobar>
**/

mSsbUi.directive("mSsbInfobar",
function () {
    return {
        scope: {
            infos : '=',
        },
        template: `
            <div class="m-ssb-infobar" ng-repeat = "info in infos track by $index">
                <p> <m-ssb-icon image="{{info.image}}.png"></m-ssb-icon> <span ng-bind-html="info.text"></span></p>
            </div>
        `,
    }
});
var process = process || {env: {NODE_ENV: "development"}};
/* Copyright 2021-2023 Ellucian Company L.P. and its affiliates. */

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: xe-button
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - type: available types tabs, buttons or text
        - buttonType: property to control the CSS classes that change the button visual (2 themes available: primary and secondary)

    Usage Example:
    <m-ssb-links type="buttons">
        <m-ssb-link label="bwdkpcnt.bwdkpcn10105" on-click="onSubmit()"></m-ssb-link>
    </m-ssb-links>

    <m-ssb-links type="text">
        <m-ssb-link label="{{record.scrollIds.label}}" ng-repeat="record in model.links" scroll-to="{{record.scrollIds.destPage}}"></m-ssb-link>
    </m-ssb-links>
**/

mSsbUi
.directive("mSsbLinks",
[
function () {
    return {
        transclude: true,
        scope: {
            type: '@?',          // tabs, buttons or text (default)
            buttonType: '@?'     // primary or secondary (default is secondary)
        },
        template: function(elem, attrs) {
            if (attrs.type == "tabs") {
                return `
                    <div ng-transclude></div>
                    <nav ng-if="show()" class="navigation-section m-ssb-links m-ssb-links-tabs" role="navigation">
                        <ul class="nav nav-pills clearfix">
                            <li
                                ng-repeat="link in links | filter : linkVisible"
                                ng-class="{disabled: link.disabled}"
                            >
                                <a
                                    href=""
                                    ng-class="getLinkClass(link)"
                                    ng-click="linkClick(link)"
                                    title="{{link.tooltip}}"
                                    role="menuitem"
                                >{{link.label |i18n}}</a>
                            </li>
                        </ul>
                    </nav>
               `
            } else if (attrs.type == "buttons") {
                return `
                    <div ng-transclude></div>
                    <div ng-if="show()" class="nav nav-pills clearfix m-ssb-links m-ssb-links-buttons">
                        <xe-button
                            xe-id="{{link.xeId}}"
                            ng-repeat="link in links | filter : linkVisible"
                            xe-type="{{buttonType ? buttonType : 'secondary'}}"
                            xe-label="{{link.label | i18n}}"
                            xe-disabled="link.disabled"
                            xe-btn-click="linkClick(link)"
                            title="{{link.tooltip}}"
                        ></xe-button>
                    </div>
               `
            } else {
                return `
                    <div ng-transclude></div>
                    <ul ng-if="show()" class="nav nav-pills clearfix m-ssb-links m-ssb-links-text">
                        <li
                            ng-repeat="link in links | filter : linkVisible"
                            ng-class="{disabled: link.disabled}"
                        >
                            <a
                                href=""
                                ng-class="getLinkClass(link)"
                                ng-click="linkClick(link)"
                                title="{{link.tooltip}}"
                            >{{link.label |i18n}}</a>
                        </li>
                    </ul>
               `
            }
        },
        controller: ['$scope', '$state', '$stateParams', 'commonUtilService', function ($scope, $state, $stateParams, util) {
            $scope.links = [];
            this.addLink = function(link) {
                $scope.links.push(link);
            }

            $scope.linkVisible = function(link) {
                // visible is optional
                if (link.visibleDefined) {
                    if (!link.visible) {
                        return false;
                    }
                }
                // ensure exists text to display
                return link.label;
            }

            //only display when at least one link is visible
            $scope.show = function() {
                for(let i=0; i<$scope.links.length; i++) {
                    if ($scope.linkVisible($scope.links[i])) {
                        return true;
                    }
                }
                return false;
            }

            $scope.getLinkClass = function(link) {
                return $state.current.name == link.state ? 'active' : '';
            }

            $scope.getLinkUrl = function(link) {
                if (link.state) {
                    let nextStateParams = Object.assign({}, $stateParams, link.stateParams);
                    return $state.href(link.state, nextStateParams);
                } else {
                    return "";
                }
            }

            $scope.linkClick = function (link) {
                if (link.disabled) {
                    return false;
                }
                if (link.scrollTo) {
                    let target = angular.element('#' + link.scrollTo);
                    if (target.length) {
                        target[0].scrollIntoView();
                    }
                    if (link.scrollTo == 'bottom') {
                        $('#bottom button').focus();
                    } else if (link.scrollTo == 'top') {
                        $('#top button').focus();
                    } else if(link.scrollTo != 'bottom' && link.scrollTo != 'top'){
                        let target = angular.element('#' + link.scrollTo);
                        if (target.length) {
                            let active = document.activeElement;
                            target.focus();
                            if(active === document.activeElement){
                                try{
                                    let ele = target[0].querySelector("[tabindex]");
                                    ele.focus();
                                }catch (err){
                                    active.focus();
                                }
                            }
                        }
                    }
                }
                if (link.onClick) {
                    link.onClick();
                }
                if (link.state) {
                    let nextStateParams = Object.assign({}, $stateParams, link.stateParams);
                    $state.go(link.state, nextStateParams);
                }
                if (link.form) {
                    util.showForm(link.form, link.formParams, link.newTab);
                }
                if (link.href) {
                    util.goURL(link.href, link.newTab);
                }
            }
        }],
    }
}])
.directive('mSsbLink', function() {
    return {
        require: '^^mSsbLinks',
        scope: {
            xeId: '@',          // unique id
            label: '@',         // Link label (i18n)
            tooltip : '@?',     // Tooltip (i18n)
            scrollTo : '@?',    // ID of element to scroll to when link is clicked
            onClick : '&?',     // Callback to invoke when link is clicked (before navigating to state)
            state: '@?',        // State to go when link is clicked
            stateParams: '=?',  // Next state parameters
            form: '@?',         // Form to go when link is clicked (in "controller/method" format)
            formParams: '=?',   // Form parameters
            href: '@?',         // External URL to go when link is clicked
            newTab: '@?',       // Whether link should open in a new tab (only applies to form and href, default is false)
            disabled : '=?',    // Whether link is disabled (default is false)
            visible: '=?',      // Whether link is visible (default is true)
        },
        link: function($scope, element, attrs, container) {
            $scope.visibleDefined = attrs.visible;
            container.addLink($scope);
        },
    }
});
var process = process || {env: {NODE_ENV: "development"}};
/* Copyright 2021-2023 Ellucian Company L.P. and its affiliates. */
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: xe-popup-modal
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - show: determines if the user can or cannot see the component (true or default false)
        - label: modal title

    Mandatory Attributes:
        - show

    Usage Example:
        <m-ssb-modal unique-id="{{generatedId}}" show="showModal" label="flac.breadcrumb.crseInfoWindow">
            <div>
                Modal logic...
            <div>
        </m-ssb-modal>
**/

/**
 * Directive to display a modal
 */
mSsbUi.directive("mSsbModal",
[
function () {
    let nextId = 1;
    return {
        scope: {
            show : '=',         // Whether to display the modal
            label : '@?',       // Modal title (i18n)
        },
        transclude: true,
        template: `
            <div class="m-ssb-panel">
                <xe-popup-modal xe-id="{{generatedId}}" show="show" pageheader="{{pageHeader}}">
                    <popup-content tabindex="0">
                        <div ng-if="show" ng-transclude></div>
                    </popup-content>
                </xe-popup-modal>
            </div>
        `,
        controller: ['$scope', '$filter', '$document', '$element', '$timeout', function ($scope, $filter, $document, $element, $timeout) {
            $scope.pageHeader = $scope.label ? $filter('i18n')($scope.label) : '';
            $scope.generatedId = 'modal' + (nextId++);
            //move focus to dialog when open and back to previous focused element when closed
            let activeElement;
            $scope.$watch('show', (newValue) => {
                if (newValue) {
                    activeElement = $document[0].activeElement;
                    $timeout(() => $element.find('popup-content')[0].focus());
                } else if (activeElement) {
                    activeElement.focus();
                }
            });
        }],
     }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/* Copyright 2021-2023 Ellucian Company L.P. and its affiliates. */
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    It's behaviour is similar to html tag div, but puts a white panel as background

    Attributes: None

    Usage Example:
        <m-ssb-panel>
            <div>
                Page logic...
            <div>
        </m-ssb-panel>
**/

mSsbUi.directive("mSsbPanel",
[
function () {
    return {
        scope: {
        },
        transclude: true,
        template: `
            <div class="content-wrapper m-ssb-panel">
                <div class="panel">
                    <div class="panel-body">
                        <div ng-transclude></div>
                    </div>
                </div>
            </div>
        `,
     }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/* Copyright 2021-2023 Ellucian Company L.P. and its affiliates. */

/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - label: collapsible panel title

    Mandatory Attributes:
        - label

    Usage Example:
        <m-ssb-panel-collapsible label="messageProp.key">
            <div>
                Page logic...
            <div>
        </m-ssb-modal>
**/

mSsbUi.directive("mSsbPanelCollapsible",
[
function () {
    return {
        scope: {
            label : '@label',
        },
        transclude: true,
        template: `
            <div class="content-wrapper m-ssb-panel-collapsible">
                <div class="panel panel-primary">
                    <div class="panel-heading" ng-class="{collapsed:!collapseTwo}" ng-click="collapseTwo=!collapseTwo" ng-keyup="$event.keyCode === 13  ? collapseTwo=!collapseTwo : null" tabindex="0"  role="button" aria-expanded="{{!collapseTwo ? true : false}}">
                         <span class="panel-title">
                            <span role="heading" aria-level="2" ng-bind="label|i18n"></span>
                            <div ng-if="!collapseTwo" class="pull-right arrow-up" aria-label="{{'m.ssb.panel.expandAndCollapase.button' | i18n}}"></div>
                            <div ng-if="collapseTwo" class="pull-right arrow-down" aria-label="{{'m.ssb.panel.expandAndCollapase.button' | i18n}}"></div>
                         </span>
                    </div>
                    <div class="panel-body" ng-class="{collapse:collapseTwo}">
                        <div ng-transclude></div>
                    </div>
                </div>
            </div>
        `,
     }
}]);



var process = process || {env: {NODE_ENV: "development"}};
/* Copyright 2021-2024 Ellucian Company L.P. and its affiliates. */

/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: xe-table-grid
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    The m-ssb-table has the following attributes:
        label - Table title (i18n)
        rows - Row data
        height - Table fixed height (by default it adjusts to content size)
        sortable - Whether columns are sortable (default is true)
        paginate - Whether to display results in pages (default is false)
        show-totals-if - Whether to display 1st table totals row (default is true if any total or total-label is defined)
        show-totals2-if - Whether to display 2nd table totals row (default is true if any total2 or total2-label is defined)

    Column types:
        m-ssb-column-value-text - Displays text value
        m-ssb-column-value-numeric - Displays numeric value
        m-ssb-column-value-date - Displays date value
        m-ssb-column-value-datetime - Displays date & time value
        m-ssb-column-value-button - Displays text value as button (column not sortable)
        m-ssb-column-edit-text - Displays text input
        m-ssb-column-edit-numeric - Displays numeric input
        m-ssb-column-edit-date - Displays date input
        m-ssb-column-edit-checkbox - Displays checkbox input
        m-ssb-column-edit-radiobox - Displays radiobox input
        m-ssb-column-edit-select - Displays select input
        m-ssb-column-custom - Displays custom column markup

    All m-ssb-column have the following attributes:
        visible - Whether column is visible (default is true)
        label - Column title (i18n)
        label-tooltip - Column title tooltip (i18n)
        width - Column width
        total-label - Label to display in 1st totals row (i18n, displayed at the bottom of the column)
        total - Value to display in 1st totals row (model value to display at the bottom of the column)
        total-decimal-length - Decimal places displayed for total (default is numeric column decimal-length, 0 if not defined)
        total2-label - Label to display in 2nd totals row (i18n, displayed at the bottom of the column)
        total2 - Value to display in 2nd totals row (model value to display at the bottom of the column)
        total2-decimal-length - Decimal places displayed for total2 (default is numeric column decimal-length, 0 if not defined)

    All m-ssb-column (except custom) have the following attributes evaluated per row:
        value - Name of property used to retrieve value from row model
                The exception is m-ssb-column-value-button where value can be anything (static text for e.g.)

    All m-ssb-column (except custom) are based on m-ssb-horizontal and support the following attributes (evaluated per row):
        icon-visible - Whether icon is shown (default is true)
        icon-image - Path of image to be displayed aside input (default is none)
        icon-tooltip - Icon tooltip (i18n, default is none)
        icon-scroll-to - ID of element to scroll to when icon is clicked
        icon-click - Callback to invoke when icon is clicked
        icon-state - State to go when icon is clicked
        icon-state-params - Next state parameters

    m-ssb-column-custom attributes:
        sort-value - (Optional) Name of row model property used to sort column.
        sort-function - (Optional) Callback function that must return rows sorted in ascending order.
                        A "rows" containing row list is injected in scope.
                        Sorting is disabled if neither sort-value nor sort-function are defined.

    Usage Example:
    <m-ssb-table class="hide-table-label" id="advIndividual" label="bwdklibs.bwdklib10035" paginate="false" rows="model.advIndividualInfo" sortable="false">
    				<m-ssb-column-value-text label="bwdkpcnt.bwdkpcnt10205" value="labelColumn"></m-ssb-column-value-text>
    				<m-ssb-column-value-text label="bwdklibs.bwdklib10393" value="individual"></m-ssb-column-value-text>
    				<m-ssb-column-value-text label="bwdklibs.bwdklib10394" value="spouse"></m-ssb-column-value-text>
    </m-ssb-table>

**/

mSsbUi
.directive("mSsbTable",
['mSsbTableService',
function(svc) {
    const MAX_COLUMNS = 40;                 // Maximum number of columns supported
    const PAGER_OPTIONS = [25, 50, 100];    // Options available in pager
    const DEFAULT_PAGE_ROWS = 25;           // Default number of rows per page
    let nextId = 1;
    return {
        scope: {
            label: '@?',        // Table title (i18n)
            rows: '=',          // Row data
            height: '@?',       // Table fixed height (by default it adjusts to content size)
            sortable: '@?',     // Whether columns are sortable (default is true)
            paginate: '@?',     // Whether to display results in pages (default is false)
            showTotalsIf: '=?', // Whether to display 1st table totals row (default is true if any total or total-label is defined)
            showTotals2If: '=?',// Whether to display 2nd table totals row (default is true if any total2 or total2-label is defined)
            cols: '@?',         // Number of columns (only required if other tables exist on same page with different number of columns)
        },
        transclude: true,
        template: function(element, attrs) {
            //Problem: xe-table-grid aria-labelledby attribute causes WAVE error when table title not set
            //Solution: only specify caption when label exists (to allow aria-labelledby to be removed in xe-ui-extensions)
            let caption = attrs.label ? 'caption="{{label | i18n}}"' : '';
            //Problem: if paginate="false" or continuous-scrolling="true" then table footer is removed...
            //         but we need it to display additional content at the end of the table!
            //Solution: process paginate so that it's never "false"
            let paginate = attrs.paginate === "true" ? 'paginate="true"' : '';
            let tpl = `
                <xe-table-grid
                    table-id="{{generatedId}}"
                    ` + caption + `
                    height="{{height}}"
                    header="model.header"
                    mobile-layout="model.mobileConfig"
                    draggable-column-names="model.draggableColumnNames"
                    content="[]"
                    results-found="totalRowsFound"
                    no-data-msg="{{'m.ssb.table.empty'|i18n}}"
                    search-config="model.searchConfig"
                    pagination-config="model.paginationConfig"
                    fetch="model.fetch(query)"
                    refresh-grid="model.refresh"
                    ` + paginate + `
                    continuous-scroll-parent="content"
                    m-ssb-mode="true"
                >
                    <div ng-transclude></div>
                </xe-table-grid>
            `;
            return tpl;
        },
        controller: ['$scope', '$element', '$compile', '$filter', '$q', '$timeout', 'CONTENT_NA', function ($scope, $element, $compile, $filter, $q, $timeout, CONTENT_NA) {
            $scope.generatedId = 'mSsbTable' + (nextId++);

            // Internal state
            let rowsCopy = $scope.rows && $scope.rows.length ? $scope.rows.slice() : [];
            let lastSortColumn = undefined;
            let lastSortAscending = undefined;

            // Keep internal rowsCopy (used to sort) in sync with external rows model
            $scope.$watchCollection("rows", (newRowsValue) => {
                rowsCopy = newRowsValue && newRowsValue.length ? newRowsValue.slice() : [];

                //Update totalRowsFound
                if (rowsCopy && rowsCopy.length) {
                    $scope.totalRowsFound = rowsCopy.length;
                } else if ($scope.totalsDisplayed()) {
                    $scope.totalRowsFound = 1;
                } else {
                    $scope.totalRowsFound = 0;
                }

                // Refresh table
                //Problem: xeTableGrid is not updating refresh-grid="model.refresh"...
                //$scope.model.refresh(true);
                //Solution: HACK
                let ssbTableElement = angular.element('#' + $scope.generatedId);
                if (ssbTableElement[0]) {
                    let xeTableScope = ssbTableElement.children().first().next().scope();
                    xeTableScope.refreshContent(true);

                    //force sort on next fetch
                    lastSortColumn = undefined;
                }

            });

//            $timeout( () => {
//                if (angular.isUndefined($scope.mSsbMode)) {
//                    $scope.mSsbMode = true;
//                }
//            });

            /** @return current page rows */
            function getData(query, deferred) {
                let data = {
                   "result": getPageRows(query),
                   "length" : rowsCopy.length,
                };
                deferred.resolve(data);
            }

            function getPageRows(query) {
                if (!rowsCopy.length) {
                    return [];
                }

                //sort
                if (lastSortColumn != query.sortColumnName) {
                    lastSortColumn = query.sortColumnName;

                    let col = columns[lastSortColumn];
                    rowsCopy = col.sortAscending(rowsCopy);

                    //Problem: when another column is sorted, icon indicates it's ascending
                    //but query.ascending can be false (probably the last value toggled)
                    //lastSortAscending = true;
                    //Solution: let's just use query.ascending like a direction toggle...
                    lastSortAscending = query.ascending;
                }

                //direction
                if (lastSortAscending != query.ascending) {
                    lastSortAscending = query.ascending;
                    rowsCopy.reverse();
                }

                //pagination
                if (query.offset >= 0) {
                    return rowsCopy.slice(query.offset, query.offset + query.pageSize);
                } else {
                    return rowsCopy;
                }
            }


            //xe-table requires columns headers to be fully defined on creation.
            //Therefore we create them here and modify afterwards...
            let headers = [];
            let draggableColumns = [];
            let mobileConfig = {};
            for (let i=0; i<MAX_COLUMNS; i++) {
                headers.push({
                    position: {
                        "desktop": (i+1),
                        "mobile": (i+1)
                    },
                    name: i.toString(),     //columns are named "0", "1", ...
                    options: {
                        "visible": false,   //modified later
                        "sortable": false,  //modified later
                    },
                });
                mobileConfig[i.toString()] = 3;
                //draggableColumns.push(headers[i].name);
            }

            //xe-table model
            $scope.model = {
                "header" : headers,
                "mobileConfig" : mobileConfig,
                "draggableColumnNames" : draggableColumns,
                "content" : rowsCopy,
                "searchConfig" : {
                    "searchString" : '',
                },
                "paginationConfig" : {
                    "pageLengths" : PAGER_OPTIONS,
                    "offset" : DEFAULT_PAGE_ROWS,
                },
                "fetch" : function(query) {
                    let deferred = $q.defer();
                    //problem: fetch may execute before column registration occurs!
                    //solution: use timeout
                    if (columns.length) {
                        getData(query, deferred);
                    } else {
                        $timeout(() => getData(query, deferred));
                    }
                    return deferred.promise;
                },
            }


            //column registration
            let columns = [];
            let colIndex = 0;
            let totalColumns = 0;
            let svcReset = true;
            this.addColumn = function(column) {
                //Reset service counter, to allow other m-ssb-tables to coexist
                if (svcReset) {
                    let svcResetCol = svc.resetCol()
                    totalColumns = $scope.cols ? parseInt($scope.cols) : svcResetCol;
                    svcReset = false;
                }

                //Check MAX_COLUMNS
                if (colIndex >= MAX_COLUMNS) {
                    throw new Error("m-ssb-table MAX_COLUMNS (" + MAX_COLUMNS + ") exceeded. Please increase it.");
                }

                columns.push(column);
                if (column.label) {
                    $scope.model.header[colIndex].title = $filter('i18n')(column.label);
                }
                else{
                     $scope.model.header[colIndex].title = CONTENT_NA
                }
                if (column.labelTooltip) {
                    $scope.model.header[colIndex].label = $filter('i18n')(column.labelTooltip);
                }
                if (column.width) {
                    $scope.model.header[colIndex].width = column.width;
                }
                if (column.visible) {
                    let headerOptions = $scope.model.header[colIndex].options;
                    column.watchVisible( (visible) => headerOptions.visible = visible ? true : false );
                } else {
                    $scope.model.header[colIndex].options.visible = true;
                }
                if ( ($scope.sortable !== 'false') && column.sortable) {
                    $scope.model.header[colIndex].options.sortable = true;
                }

                colIndex++;

                //Inject table totals
                if (colIndex === totalColumns) {
                    injectTableTotals();
                }
            }

            //Problem: xe-table-grid displays totals in a separate table and columns do not line up
            //Problem: xe-table-grid only supports 1 totals row
            //Solution: inject custom table footer and support 2 totals rows
            //Problem: at this point we don't know which columns will end up visible
            //Solution: add all with conditional display and dynamic colspan
            function injectTableTotals() {
                let hasTotals = columns.some(c => c.totalLabel || c.total);
                let hasTotals2 = columns.some(c => c.total2Label || c.total2);
                if (hasTotals || hasTotals2) {
                    let tfoot = '<tfoot role="rowgroup">';
                    if (hasTotals) {
                        tfoot += '<tr role="row"';
                        tfoot += $element.attr('show-totals-if') ? ' ng-if="!(showTotalsIf  | isEmpty)">' : '>';
                        for (idx=0; idx<totalColumns; idx++) {
                            tfoot += '<td class="totals-col" ng-if="getColumnVisible(' + idx + ')" role="gridcell" xe-focus tabindex="0">' +
                                        '<div ng-class="{\'totals-col-label\': getTotalLabelVisible(' + idx + ')}" ng-if="getTotalVisible(' + idx + ')">' +
                                            '<label ng-if="!getTotalLabelVisible(' + idx + ')" class="sr-only" ng-bind="getTotalLabel(' + idx + ')+\' \'"></label>' +
                                            '<span  ng-bind="getTotalContent(' + idx + ')"></span>' +
                                        '</div>' +
                                    '</td>';
                        }
                        tfoot += '</tr>';
                    }

                    if (hasTotals2) {
                        tfoot += '<tr role="row"';
                        tfoot += $element.attr('show-totals2-if') ? ' ng-if="!(showTotals2If  | isEmpty)">' : '>';
                        for (idx=0; idx<totalColumns; idx++) {
                            tfoot += '<td class="totals-col" ng-if="getColumnVisible(' + idx + ')" role="gridcell" xe-focus tabindex="0">' +
                                        '<div ng-class="{\'totals-col-label\': getTotal2LabelVisible(' + idx + ')}" ng-if="getTotal2Visible(' + idx + ')">' +
                                            '<label ng-if="!getTotal2LabelVisible(' + idx + ')" class="sr-only" ng-bind="getTotal2Label(' + idx + ')+\' \'"></label>' +
                                            '<span  ng-bind="getTotal2Content(' + idx + ')"></span>' +
                                        '</div>' +
                                    '</td>';
                        }
                        tfoot += '</tr>';
                    }

                    tfoot += '</tfoot>';
                    tfoot = $compile(tfoot)($scope);
                    $element.find('.hr-scrollable-content tbody').after(tfoot);
                }
            }

            $scope.getColumnVisible = function(idx) {
                return $scope.model.header[idx].options.visible;
            }

            $scope.getTotalLabel = function(idx) {
                let column = columns[idx];
                return column.getTotalLabel();
            }

            $scope.getTotalLabelVisible = function(idx) {
                return $scope.model.header[idx].options.visible && columns[idx].totalLabel && !columns[idx].total;
            }

            $scope.getTotalVisible = function(idx) {
                return $scope.model.header[idx].options.visible && (columns[idx].totalLabel || columns[idx].total);
            }

            $scope.getTotalContent = function(idx) {
                let column = columns[idx];
                if (column.total) {
                    return column.getTotalValue();
                }
                if (column.totalLabel) {
                    return column.getTotalLabel();
                }
                return '';
            }

            $scope.getTotal2Label = function(idx) {
                let column = columns[idx];
                return column.getTotal2Label();
            }

            $scope.getTotal2LabelVisible = function(idx) {
                return $scope.model.header[idx].options.visible && columns[idx].total2Label && !columns[idx].total2;
            }

            $scope.getTotal2Visible = function(idx) {
                return $scope.model.header[idx].options.visible && (columns[idx].total2Label || columns[idx].total2);
            }

            $scope.getTotal2Content = function(idx) {
                let column = columns[idx];
                if (column.total2) {
                    return column.getTotal2Value();
                }
                if (column.total2Label) {
                    return column.getTotal2Label();
                }
                return '';
            }

            // $scope.getTotalColspan = function(idx) {
            //     let colspan = 1;
            //     for (idx-=1; idx>=0; idx--) {
            //         if ($scope.model.header[idx].options.visible) {
            //             if (columns[idx].totalLabel || columns[idx].total) {
            //                 break;
            //             }
            //             colspan++;
            //         }
            //     }
            //     return colspan;
            // }

            // $scope.getTotal2Colspan = function(idx) {
            //     let colspan = 1;
            //     for (idx-=1; idx>=0; idx--) {
            //         if ($scope.model.header[idx].options.visible) {
            //             if (columns[idx].total2Label || columns[idx].total2) {
            //                 break;
            //             }
            //             colspan++;
            //         }
            //     }
            //     return colspan;
            // }

            //Problem: no-data-msg displayed when table has totals
            //Solution: add extra check
            $scope.totalsDisplayed = function () {
                let hasTotals = columns.some(c => c.totalLabel || c.total);
                if (hasTotals) {
                    if ($element.attr('show-totals-if')) {
                        if ($scope.showTotalsIf) {
                            return true;
                        }
                    } else {
                        return true;
                    }
                }
                let hasTotals2 = columns.some(c => c.total2Label || c.total2);
                if (hasTotals2) {
                    if ($element.attr('show-totals2-if')) {
                        if ($scope.showTotals2If) {
                            return true;
                        }
                    } else {
                        return true;
                    }
                }
                return false;
            }

        }],
    }
}])


/** Internal helper service */
.service('mSsbTableService',
['$filter', function($filter) {
    let svc = this;

    // provides column name (=index) during template construction
    let col = 0;
    let registeredCols = 0;
    this.resetCol = function() {
        if (col != 0) {
            registeredCols = col;
        }
        col = 0;
        return registeredCols;
    }
    this.getCol = function() { return col.toString() }
    this.nextCol = function() { col++ }

    /** @return common m-ssb-horizontal attributes template */
    this.getCommonHorizontalTemplate = function(attrs) {
        function attr(name) {
            let value = attrs[name];
            return value ? value : "";
        }
        return `
            icon-visible="` + attr('iconVisible') + `"
            icon-image="` + attr('iconImage') + `"
            icon-tooltip="` + attr('iconTooltip') + `"
            icon-scroll-to="` + attr('iconScrollTo') + `"
            icon-click="` + attr('iconClick') + `"
            icon-state="` + attr('iconState') + `"
            icon-state-params="` + attr('iconStateParams') + `"
            tag-empty="` + (attrs['value'] ? 'true': 'false') + `"
        `;
    }

    /** @return common table column information structure */
    this.createColumn = function(type, $scope, attrs) {
        return {
            "type": type,
            "label" : attrs.label,
            "labelTooltip" : attrs.labelTooltip,
            "width" : attrs.width,
            "totalLabel" : attrs.totalLabel,
            "total" : attrs.total,
            "getTotalLabel" : () => {
                return $filter('i18n')(attrs.totalLabel);
            },
            "getTotalValue" : () => {
                return $filter('number')($scope.$eval(attrs.total), attrs.totalDecimalLength ? attrs.totalDecimalLength : attrs.decimalLength);
            },
            "total2Label" : attrs.total2Label,
            "total2" : attrs.total2,
            "getTotal2Label" : () => {
                return $filter('i18n')(attrs.total2Label);
            },
            "getTotal2Value" : () => {
                return $filter('number')($scope.$eval(attrs.total2), attrs.total2DecimalLength ? attrs.total2DecimalLength : attrs.decimalLength);
            },
            "visible" : attrs.visible,
            "watchVisible" : (setColumnVisible) => {
                if (attrs.visible === "false") {
                    setColumnVisible(false);
                } else if (attrs.visible === "true") {
                    setColumnVisible(true);
                } else {
                    $scope.$watch(attrs.visible, (newValue) => {
                        setColumnVisible( $scope.$eval(attrs.visible) );
                    });
                }
            },
            "sortable" : true,
            "sortAscending" : function (rows) {
                return svc.sortAscending(rows, (r) => svc.getPropertyValue(r, attrs.value) );
            }
        }
    }

    /** @return value of property (using dot notation) in obj  or (required for sorting) empty string if undefined or null */
    this.getPropertyValue = function(obj, property) {
        if (!property) {
            return '';
        }
        property = property.replace(/\[(\w+)\]/g, '.$1'); //array support
        let path = property.split('.');
        for (let i = 0; i < path.length; i++) {
            if (obj === undefined || obj === null) {
                return '';
            }
            obj = obj[path[i]];
        }
        if (obj === undefined || obj === null) {
            return '';
        }
        return obj;
    }

    /** @return rows sorted in ascending order of value returned by sortValueGetter(row) */
    this.sortAscending = function(rows, sortValueGetter) {
        let rowMap = rows.map( (row, idx) => {
            return { idx, value: sortValueGetter(row) }
        });
        rowMap.sort( (r1, r2) => {
            if (r1.value < r2.value) return -1;
            else if (r1.value > r2.value) return 1;
            else return 0;
        });
        return rowMap.map(r => rows[r.idx]);
    }
}])


.directive('mSsbColumnValueText',
['mSsbTableService', 'mSsbValueTextService',
function(svc, ctrlSvc) {
    return {
        require: '^^mSsbTable',
        scope: true,
        template: function(element, attrs) {
            let tpl = `
                <xe-cell-markup column-name="` + svc.getCol() + `">
                    <m-ssb-horizontal-value-text
                        ` + svc.getCommonHorizontalTemplate(attrs) + `
                        value="{{row.` + attrs.value + `}}"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                    ></m-ssb-horizontal-value-text>
                </xe-cell-markup>
            `;
            svc.nextCol();
            return tpl;
        },
        link: function($scope, element, attrs, container) {
            container.addColumn(svc.createColumn('mSsbColumnValueText', $scope, attrs));
        },
    }
}])


.directive('mSsbColumnEditText',
['mSsbTableService', 'mSsbEditTextService',
function(svc, ctrlSvc) {
    return {
        require: '^^mSsbTable',
        scope: true,
        template: function(element, attrs) {
            let tpl = `
                <xe-cell-markup column-name="` + svc.getCol() + `">
                    <m-ssb-horizontal-edit-text
                        ` + svc.getCommonHorizontalTemplate(attrs) + `
                        value="row.` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                    ></m-ssb-horizontal-edit-text>
                </xe-cell-markup>
            `;
             svc.nextCol();
             return tpl;
        },
        link: function($scope, element, attrs, container) {
            container.addColumn(svc.createColumn('mSsbColumnEditText', $scope, attrs));
        },
    }
}])


.directive('mSsbColumnValueNumeric',
['$filter', 'mSsbTableService', 'mSsbValueNumericService',
function($filter, svc, ctrlSvc) {
    return {
        require: '^^mSsbTable',
        scope: true,
        template: function(element, attrs) {
            let tpl = `
                <xe-cell-markup column-name="` + svc.getCol() + `">
                    <m-ssb-horizontal-value-numeric
                        ` + svc.getCommonHorizontalTemplate(attrs) + `
                        value="{{row.` + attrs.value + `}}"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                    ></m-ssb-horizontal-value-numeric>
                </xe-cell-markup>
            `;
             svc.nextCol();
             return tpl;
        },
        link: function($scope, element, attrs, container) {
            container.addColumn(svc.createColumn('mSsbColumnValueNumeric', $scope, attrs));
        },
    }
}])


.directive('mSsbColumnEditNumeric',
['$filter', 'mSsbTableService', 'mSsbEditNumericService',
function($filter, svc, ctrlSvc) {
    return {
        require: '^^mSsbTable',
        scope: true,
        template: function(element, attrs) {
            let tpl = `
                <xe-cell-markup column-name="` + svc.getCol() + `">
                    <m-ssb-horizontal-edit-numeric
                        ` + svc.getCommonHorizontalTemplate(attrs) + `
                        value="row.` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                    ></m-ssb-horizontal-edit-numeric>
                </xe-cell-markup>
            `;
             svc.nextCol();
             return tpl;
        },
        link: function($scope, element, attrs, container) {
            container.addColumn(svc.createColumn('mSsbColumnEditNumeric', $scope, attrs));
        },
    }
}])


.directive('mSsbColumnValueDate',
['mSsbTableService', 'mSsbValueDateService',
function(svc, ctrlSvc) {
    return {
        require: '^^mSsbTable',
        scope: true,
        template: function(element, attrs) {
            let tpl = `
                <xe-cell-markup column-name="` + svc.getCol() + `">
                    <m-ssb-horizontal-value-date
                        ` + svc.getCommonHorizontalTemplate(attrs) + `
                        value="{{row.` + attrs.value + `}}"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                    ></m-ssb-horizontal-value-date>
                </xe-cell-markup>
            `;
            svc.nextCol();
            return tpl;
        },
        link: function($scope, element, attrs, container) {
            container.addColumn(svc.createColumn('mSsbColumnValueDate', $scope, attrs));
        },
    }
}])


.directive('mSsbColumnValueDatetime',
['mSsbTableService', 'mSsbValueDatetimeService',
function(svc, ctrlSvc) {
    return {
        require: '^^mSsbTable',
        scope: true,
        template: function(element, attrs) {
            let tpl = `
                <xe-cell-markup column-name="` + svc.getCol() + `">
                    <m-ssb-horizontal-value-datetime
                        ` + svc.getCommonHorizontalTemplate(attrs) + `
                        value="{{row.` + attrs.value + `}}"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                    ></m-ssb-horizontal-value-datetime>
                </xe-cell-markup>
            `;
            svc.nextCol();
            return tpl;
        },
        link: function($scope, element, attrs, container) {
            container.addColumn(svc.createColumn('mSsbColumnValueDatetime', $scope, attrs));
        },
    }
}])


.directive('mSsbColumnEditDate',
['mSsbTableService', 'mSsbEditDateService',
function(svc, ctrlSvc) {
    return {
        require: '^^mSsbTable',
        scope: true,
        template: function(element, attrs) {
            let tpl = `
                <xe-cell-markup column-name="` + svc.getCol() + `">
                    <m-ssb-horizontal-edit-date
                        ` + svc.getCommonHorizontalTemplate(attrs) + `
                        value="row.` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                    ></m-ssb-horizontal-edit-date>
                </xe-cell-markup>
            `;
             svc.nextCol();
             return tpl;
        },
        link: function($scope, element, attrs, container) {
            container.addColumn(svc.createColumn('mSsbColumnEditDate', $scope, attrs));
        },
    }
}])


.directive('mSsbColumnEditCheckbox',
['mSsbTableService', 'mSsbEditCheckboxService',
function(svc, ctrlSvc) {
    return {
        require: '^^mSsbTable',
        scope: true,
        template: function(element, attrs) {
            let tpl = `
                <xe-cell-markup column-name="` + svc.getCol() + `">
                    <m-ssb-horizontal-edit-checkbox
                        ` + svc.getCommonHorizontalTemplate(attrs) + `
                        value="row.` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                    ></m-ssb-horizontal-edit-checkbox>
                </xe-cell-markup>
            `;
             svc.nextCol();
             return tpl;
        },
        link: function($scope, element, attrs, container) {
            container.addColumn(svc.createColumn('mSsbColumnEditCheckbox', $scope, attrs));
        },
    }
}])


.directive('mSsbColumnEditRadiobox',
['mSsbTableService', 'mSsbEditRadioboxService',
function(svc, ctrlSvc) {
    return {
        require: '^^mSsbTable',
        scope: true,
        template: function(element, attrs) {
            let tpl = `
                <xe-cell-markup column-name="` + svc.getCol() + `">
                    <m-ssb-horizontal-edit-radiobox
                        ` + svc.getCommonHorizontalTemplate(attrs) + `
                        value="row.` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                    ></m-ssb-horizontal-edit-radiobox>
                </xe-cell-markup>
            `;
             svc.nextCol();
             return tpl;
        },
        link: function($scope, element, attrs, container) {
            container.addColumn(svc.createColumn('mSsbColumnEditRadiobox', $scope, attrs));
        },
    }
}])


.directive('mSsbColumnEditSelect',
['mSsbTableService', 'mSsbEditSelectService',
function(svc, ctrlSvc) {
    let nextId = 1;
    return {
        require: '^^mSsbTable',
        scope: true,
        template: function(element, attrs) {
            //Fix dropdown not shown inside xe-table-grid (by default overflow is hidden)
            attrs.appendToBody = 'true';
            let tpl = `
                <xe-cell-markup column-name="` + svc.getCol() + `">
                    <m-ssb-horizontal-edit-select
                        ` + svc.getCommonHorizontalTemplate(attrs) + `
                        value="row.` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                    ></m-ssb-horizontal-edit-select>
                </xe-cell-markup>
            `;
            svc.nextCol();
            return tpl;
        },
        link: function($scope, element, attrs, container) {
            container.addColumn(svc.createColumn('mSsbColumnEditSelect', $scope, attrs));
        },
    }
}])


.directive('mSsbColumnValueButton',
['mSsbTableService', 'mSsbValueButtonService',
function(svc, ctrlSvc) {
    return {
        require: '^^mSsbTable',
        scope: true,
        template: function(element, attrs) {
            let tpl = `
                <xe-cell-markup column-name="` + svc.getCol() + `">
                    <m-ssb-horizontal-value-button
                        ` + svc.getCommonHorizontalTemplate(attrs) + `
                        value="` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                    ></m-ssb-horizontal-value-button>
                </xe-cell-markup>
            `;
            svc.nextCol();
            return tpl;
        },
        link: function($scope, element, attrs, container) {
            let column = svc.createColumn('mSsbColumnValueButton', $scope, attrs);
            column.sortable = false;
            container.addColumn(column);
        },
    }
}])


.directive('mSsbColumnCustom',
['mSsbTableService',
function(svc) {
    return {
        require: '^^mSsbTable',
        scope: true,
        template: function(element, attrs) {
            let customMarkup = element[0].innerHTML;
            let tpl = `
                <xe-cell-markup column-name="` + svc.getCol() + `">
                ` + customMarkup + `
                </xe-cell-markup>
            `;
             svc.nextCol();
             return tpl;
        },
        link: function($scope, element, attrs, container) {
            let column = svc.createColumn('mSsbColumnCustom', $scope, attrs);
            column.sortable = attrs.sortValue || attrs.sortFunction ? true : false;
            if (attrs.sortValue) {
                column.sortAscending = function (rows) {
                    return svc.sortAscending(rows, (r) => svc.getPropertyValue(r, attrs.sortValue) );
                }
            } else if (attrs.sortFunction) {
                column.sortAscending = function(rows) {
                    return $scope.$eval(attrs.sortFunction, {"rows" : rows} );
                }
            }
            container.addColumn(column);
        },
    }
}])

.directive('closeDropdownOnScroll', function() {
    return {
        restrict: 'A',
        link: function(scope) {
            // hiding already opened select2(appended to body) on table scroll
            function hideOpenedDropdown() {
                if (angular.element('body > .ui-select-container.select2-dropdown-open').length) {
                    angular.element('#content[ng-app="flacApp"]').click();
                }
            }

            angular.element('#content[ng-app="flacApp"]').off('scroll', hideOpenedDropdown)
                .on('scroll', hideOpenedDropdown);

            scope.$on('$destroy', function() {
                angular.element('#content[ng-app="flacApp"]').off('scroll', hideOpenedDropdown);
            });
        }
    };
});

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: xe-pagination (xe-table-grid)
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - model: The total records displayed in page (the total records of the JSON object array)
        - resultsFound: number of records found
        - currentPaged: number of the current page
        - numPerPaged: number of records per page

    Mandatory Attributes:
        - model
        - resultsFound
        - currentPaged
        - numPerPaged

    Usage Example:
        <m-ssb-pagination
            current-paged="pagination.currentPage"
            model="model.totalRecords"
            num-per-paged="pagination.numPerPage"
            results-found="model.totalRecords.length">
        </m-ssb-pagination>
**/

mSsbUi.directive('mSsbPagination', ["$http", "$q", function($http, $q) {
    var fetch = function(query) {

        return model;
    };
    var reassignRange = function(pageNumber, offset) {
        var pageEnd = offset * pageNumber;
        return {
            max: pageEnd,
            offset: pageEnd === 0 ? 0 :(pageEnd - offset)
        };
    };

    return {
        scope: {
            model: "=",
            resultsFound: "=",
            currentPaged: "=",
            numPerPaged: "=",
        },
        template: "<div ng-show=\"showPagination\" class=\"tfoot pagination-container visible-lg\" role=\"navigation\" ng-cloak><div id=\"resultsFound\" aria-live=\"assertive\" class=\"results-container\" ng-bind=\"('pagination.record.found' | xei18n) + ': ' + resultsFound\"></div><div class=\"pagination-controls\"><xe-button xe-type=\"secondary\" xe-btn-class=\"first\" xe-aria-label=\"{{::'pagination.first.label' | xei18n}}\" title=\"{{::'pagination.first.label' | xei18n}}\" xe-btn-click=\"first()\" xe-disabled=\"firstPrev\" ng-cloak></xe-button><xe-button xe-type=\"secondary\" xe-btn-class=\"previous\" xe-aria-label=\"{{::'pagination.previous.label' | xei18n}}\" title=\"{{::'pagination.previous.label' | xei18n}}\" xe-btn-click=\"prev()\" xe-disabled=\"firstPrev\" ng-cloak></xe-button><xe-label xe-value=\"{{::'pagination.page.label' | xei18n}}\" role=\"presentation\" aria-hidden=\"true\"></xe-label><span title=\"{{::'pagination.page.shortcut.label' | xei18n}}\" role=\"presentation\"><input id=\"pageInput\" type=\"number\" ng-model=\"onPage\" aria-valuenow=\"{{onPage}}\" aria-valuemax=\"{{numberOfPages}}\" aria-valuemin=\"{{!numberOfPages ? 0 : 1}}\" max=\"{{numberOfPages}}\" min=\"{{!numberOfPages ? 0 : 1}}\" ng-model-options=\"{ debounce: {'default': 200, 'blur': 0} }\" ng-change=\"paggeNumberChange()\" ng-blur=\"focusOut($event)\" aria-label=\"{{::'pagination.page.aria.label' | xei18n}}. {{::'pagination.page.label' | xei18n}} {{onPage}} {{::'pagination.page.of.label' | xei18n}} {{numberOfPages}}\" ng-cloak></span><xe-label xe-value=\"{{::'pagination.page.of.label' | xei18n}} {{numberOfPages}}\" role=\"presentation\"></xe-label><xe-button xe-type=\"secondary\" xe-btn-class=\"next\" xe-aria-label=\"{{::'pagination.next.label' | xei18n}}\" title=\"{{::'pagination.next.label' | xei18n}}\" xe-btn-click=\"next()\" xe-disabled=\"nextLast\" ng-cloak></xe-button><xe-button xe-type=\"secondary\" xe-btn-class=\"last\" xe-aria-label=\"{{::'pagination.last.label' | xei18n}}\" title=\"{{::'pagination.last.label' | xei18n}}\" xe-btn-click=\"last()\" xe-disabled=\"nextLast\" ng-cloak></xe-button><xe-label xe-id=\"perPage\" xe-value=\"{{::'pagination.per.page.label' | xei18n}}\" role=\"presentation\" aria-hidden=\"true\"></xe-label><select class=\"per-page-select\" aria-labelledby=\"perPage\" ng-model=\"offset\" ng-options=\"pageOffset for pageOffset in ::pageOffsets\" ng-change=\"offsetChanged(true)\" ng-disabled=\"resultsFound === 0\"></select></div></div>",
        controller: ['$scope', '$timeout', function($scope, $timeout) {
            var oldPageValue = 1;
            $scope.displayItems = [];
            $scope.firstPrev = false;
            $scope.nextLast = false;
            $scope.onPage = 1;
            $scope.showPagination = false;
            $scope.currentPaged = $scope.onPage;
//            if (angular.isObject($scope.paginationConfig) && !$scope.paginationConfig.pageLengths) {
//                $scope.pageOffsets = [10, 20, 50, 100];
//            } else {
//                $scope.pageOffsets = $scope.paginationConfig.pageLengths;
//            }
            $scope.pageOffsets = [25, 50, 100];
//            if (angular.isObject($scope.paginationConfig) && $scope.paginationConfig.offset) {
//                $scope.offset = $scope.paginationConfig.offset;
//            } else {
//                $scope.offset = $scope.pageOffsets[0];
//            }
            $scope.offset = $scope.pageOffsets[0];
            $scope.numPerPaged = $scope.offset;
            if ($scope.pageOffsets.indexOf($scope.offset) < 0) {
                $scope.pageOffsets.push($scope.offset);
                $scope.pageOffsets.sort(function(a, b){ return a-b; });
            }

            $scope.offsetChanged = function(doFetch) {
                calculateNumberOfPages();
                $scope.numPerPaged = $scope.offset;
                disableButtons($scope.onPage, $scope.numberOfPages);
                if (doFetch) {
                    $scope.fetchData($scope.onPage, $scope.offset);
                }
            };

            $scope.first = function() {
                if ($scope.firstPrev) {
                    return;
                }

                setPageValue(1);

                $scope.fetchData($scope.onPage, $scope.offset);
                disableButtons($scope.onPage, $scope.numberOfPages);
                focusPageInput();
            };

            $scope.prev = function(append) {
                if ($scope.firstPrev) {
                    return;
                }

                var onPage = parseInt($scope.onPage);
                onPage--;
                setPageValue(onPage);

                $scope.fetchData($scope.onPage, $scope.offset, append);
                disableButtons($scope.onPage, $scope.numberOfPages);
                //if ($scope.firstPrev) {
                    focusPageInput();
                //}
            };

            $scope.next = function(append) {
                if ($scope.nextLast) {
                    return;
                }

                var onPage = parseInt($scope.onPage);
                onPage++;
                setPageValue(onPage);

                $scope.fetchData($scope.onPage, $scope.offset, append);
                disableButtons($scope.onPage, $scope.numberOfPages);
                //if ($scope.nextLast) {
                    focusPageInput();
                //}
            };

            $scope.last = function() {
                if ($scope.nextLast) {
                    return;
                }

                setPageValue($scope.numberOfPages);

                $scope.fetchData($scope.onPage, $scope.offset);
                disableButtons($scope.onPage, $scope.numberOfPages);
                focusPageInput();
            };

            $scope.paggeNumberChange = function() {
                if ($scope.onPage) {
                    focusPageInput();
                }

                if (($scope.onPage !== null) && (oldPageValue != $scope.onPage)) {
                    if (angular.isUndefined($scope.onPage) || ($scope.onPage <= 0) || ($scope.onPage > $scope.numberOfPages)){
                        $scope.onPage = oldPageValue;
                    } else {
                        setPageValue($scope.onPage);
                        $scope.fetchData($scope.onPage, $scope.offset);
                        disableButtons($scope.onPage, $scope.numberOfPages);
                    }
                }
            };

            $scope.focusOut = function(event) {
                angular.element(event.target).val(oldPageValue);
            };

            $scope.$watch("resultsFound", function(newValue, oldValue) {
                $timeout(function() {
                    if (newValue === 0) {
                        setPageValue(0);
                    } else if ($scope.onPage === 0) {
                        setPageValue(1);
                    }

                    calculateNumberOfPages();
                    disableButtons($scope.onPage, $scope.numberOfPages);
                    if(angular.isDefined(newValue)){
                        $scope.showPagination = true;
                    }

                });
            });

            // Private functions
            var setPageValue = function(onPage) {
                $scope.onPage = onPage;
                oldPageValue = onPage;
                $scope.currentPaged = onPage;
                calculateNumberOfPages();
                disableButtons($scope.onPage, $scope.numberOfPages);
            };

            // Private functions
            var focusPageInput = function() {
//                $timeout(function() {
//                    angular.element('#pageInput').select().focus();
//                }, 500);

                let pageElement = angular.element('div[ui-view]');
                if (pageElement.length) {
                    pageElement[0].scrollIntoView()
                }
            };

            var calculateNumberOfPages = function() {
                $scope.numberOfPages = Math.ceil($scope.resultsFound / $scope.offset);
                $scope.numberOfPages = $scope.numberOfPages < 1 ? 0 : $scope.numberOfPages;

                if ($scope.onPage > $scope.numberOfPages) {
                    setPageValue($scope.numberOfPages);
                }
            };

            var disableButtons = function(pageNumber, numberOfPages) {
                pageNumber = parseInt(pageNumber);
                numberOfPages = parseInt(numberOfPages);
                var reminder = numberOfPages / pageNumber;

                if (numberOfPages === 1) { // Only one page
                    $scope.firstPrev = true;
                    $scope.nextLast = true;
                } else if(reminder === 1) { // On last page
                    $scope.nextLast = true;
                    $scope.firstPrev = false;
                } else if(reminder === numberOfPages) { // On first page
                    $scope.firstPrev = true;
                    $scope.nextLast = false;
                } else if(pageNumber <= 0 || (pageNumber > numberOfPages)) { // Out of range
                    $scope.firstPrev = true;
                    $scope.nextLast = true;
                } else { // Between first and last page
                    $scope.nextLast = false;
                    $scope.firstPrev = false;
                }
            };
            var calculatedisplay = function() {
                var begin = (($scope.currentPage - 1) * $scope.numPerPage)
                , end = begin + $scope.numPerPage;

            return $scope.model.slice(begin, end);
          };

            /*
                boolean append variable is used to check if we need append to the result set or not.
                This is because on tablet we will not show the pagination but it components can still use pagination
                code to make the continuous scroll happen.
            */
            $scope.fetchData = function(onPage, offset, append) {
                if (!angular.isNumber(onPage)) {
                    onPage = parseInt(onPage);
                }

                setPageValue(onPage);

                // Show Load indicator
                //$scope.loading(true);

                if (true) {
                    // Call clients fetch method

                    //.log("onSussec")
                        //$scope.postFetch({response: data, oldResult: $scope.model});
                        $scope.resultsFound = $scope.model.length
                        $scope.displayItems = calculatedisplay();
                        //.length;
//                        if(angular.isDefined(data.totals) && Object.keys(data.totals).length !== 0){
//                            $scope.totalValue = data.totals;
//                        }

                       // $scope.loading(false);
                       // $scope.addExtensionColumns($scope.header, $scope.model);

                }
//                else {
//                    fetch(query).then(function onSuccess(data){
//                            $scope.postFetch({response: data, oldResult: $scope.model});
//                            $scope.model = append ? $scope.model.concat(data.result) : data.result;
//                            $scope.resultsFound = data.length;
//                            if(angular.isDefined(data.totals) && Object.keys(data.totals).length !== 0){
//                                $scope.totalValue = data.totals;
//                            }
//
//                            $scope.loading(false);
//                            $scope.addExtensionColumns($scope.header, data);
//                        }).catch(function (data) {
//                            if (data) console.error(data);
//                            $scope.postFetch({response: data, oldResult: $scope.model});
//                            $scope.loading(false);
//                        });
//                }
            };

//            $scope.offsetChanged(false);
        }],
//        link: function(scope, elem, attributes, parentController) {
//            // Assigning values from parentCOntroller to be used later in paginations controller.
//            //scope.loading = parentController.loadingDataIndicator;
//            //scope.emptyTableMsg = parentController.emptyTableMsg;
//            //scope.sortColumnName = parentController.sortColumnName;
//            //scope.ascending = parentController.ascending;
//            scope.header =  parentController.header;
//            scope.addExtensionColumns = parentController.addExtensionColumns;
//
//            if(!scope.emptyTableMsg) {
//                scope.fetchData(1, scope.offset);
//            }
//
//            // If continuous scrolling is true then we can to hide paginations across devices and desktop.
//            if (parentController.hidePaginationIfContinuousScroll) {
//                parentController.hidePaginationIfContinuousScroll();
//            }
//
//            // Injecting next(), previous() and sort() function to parent controller so that it can invoke them later as per the need.
//            // For example for continuous scrolling.
//            parentController.next = function(append) {
//                scope.next(append);
//            };
//
//            parentController.previous = function(append) {
//                scope.prev(append);
//            };
//
//            parentController.fetchData = function(onPage, offset) {
//                onPage = angular.isDefined(onPage) ? onPage : scope.onPage;
//                offset = angular.isDefined(offset) ? offset : scope.offset;
//
//                scope.fetchData(onPage, offset);
//            };
//
//            parentController.sort = function(sortColumnName, order) {
//                scope.sortColumnName = sortColumnName;
//                scope.ascending = order;
//                scope.fetchData(scope.onPage, scope.offset);
//            };
//        }
    };
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component type: Wrapper to platform component
    Platform Component(s) used: <label>
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - xeId: component ID
        - label: text to display (i18n)
        - tooltip: label tooltip (i18n, default none)
        - required: if true the label is required and the indicator is shown(the default value is false)

    Usage Example:
        <m-ssb-label
            xe-id="label1"
            label="{{record.zipfromlabel}}">
        </m-ssb-label>
**/

mSsbUi.directive("mSsbLabel",
function () {
    return {
        scope: {
            xeId : '@?',        // Xe component id
            label : '@?',       // Text to display (i18n)
            tooltip : '@?',     // Label tooltip (i18n, default is none)
            required : '=?',    // Whether required indicator is shown (default is false)
        },
        template: function(element, attrs) {
            var id = attrs.xeId ? 'id="{{xeId}}Label" for="{{xeId}}"' : '';
            var tpl = `
                <label
                    ` + id + `
                    title="{{tooltip | i18n}}"
                    class="m-ssb-label"
                >
                    <span ng-if="!required" class="m-ssb-label-text" aria-label="{{ label | i18n }}">{{ label | i18n }}</span>
                    <span ng-if="required" class="m-ssb-label-text" aria-label="{{ label | i18n }} *">{{ label | i18n }}</span>
                    <span class="m-ssb-label-required" aria-label="{{'flac.required.label'|i18n}}" ng-if="required" aria-hidden="true">*</span>

                </label>
            `;
            return tpl;
        },
    }
});
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - visible, determines if the user can or cannot see the component (true or default false)
        - image, path to the icon image (default is none)
        - tooltip - when the mouse passes in the icon it will display a message (i18n)
        - scrollTo, ID of element to scroll to when icon is clicked
        - onClick, function callback when clicking the icon
        - state, state name to go when clicking the icon
        - stateParams, state parameters necessary

    Usage Example:
        <m-ssb-icon
            tooltip="{{'m.ssb.infobar.icon.tooltip' | i18n}}"
            image="{{info.image}}.png">
        </m-ssb-icon>
**/

/**
 * Directive for displaying a small clickable icon
 */
angular.module('m-utils', [])
.directive("mSsbIcon",
function () {
    return {
        scope: {
            visible : '=?',     // Whether icon is shown (default is true)
            image : '@?',       // Path of image to be displayed (default is none)
            tooltip : '@?',     // Icon tooltip (i18n, default is none)
            scrollTo : '@?',    // ID of element to scroll to when icon is clicked
            onClick : '&?',     // Callback to invoke when icon is clicked
            state: '@?',        // State to go when icon is clicked
            stateParams: '=?',  // Next state parameters
        },
        template: function(element, attrs) {
            var tpl = `
                <img
                    ng-src="{{getImageUrl(image)}}"
                    alt="{{ tooltip ? (tooltip == 'self' ? 'icon: ' + imageAlt() : 'icon: ' + (tooltip | i18n)) : '' }}"
                    title="{{tooltip | i18n}}"
                    class="m-ssb-icon"
                />
            `;

                tpl = `
                    <a href ng-if="showIcon() && isClickable()" ng-click="iconClick($event)" ng-keypress="iconClick($event)" class="m-ssb-icon">
` + tpl + `
                    </a>
                    <span ng-if="showIcon() && !isClickable()" class="m-ssb-icon">
` + tpl + `
                    </span>
                `;

            return tpl;
        },
        controller: ['$scope', '$attrs', '$state', '$stateParams', 'commonUtilService', function ($scope, $attrs, $state, $stateParams, util) {

            $scope.isClickable = function() {
                return $scope.scrollTo || $scope.onClick  || $scope.state;
            }

            $scope.showIcon = function() {
                // visible is optional
                if ($attrs.visible && !$scope.visible) {
                    return false;
                }
                // ensure image name exists
                var imageExists =
                    $scope.image
                    && typeof $scope.image === 'string'
                    && $scope.image.length
                    && !$scope.image.startsWith('.');    //support image="{{someVar}}.png"
                return imageExists;
            }

            $scope.imageAlt = function() {
                if($scope.showIcon()){
                    return $scope.image.substring($scope.image.lastIndexOf("/")+1,$scope.image.indexOf("."));
                }
                return "N/A";
            }
            /** @return full URL for retrieving image */
            $scope.getImageUrl = util.getImageUrl;

            $scope.iconClick = function(event) {
                if(event.type === 'click' || event.which === 13 || event.which === 32){
                    if ($scope.scrollTo) {
                        let target = angular.element('#' + $scope.scrollTo);
                        if (target.length) {
                            target[0].scrollIntoView();
                        }
                    }
                    if ($scope.onClick) {
                        $scope.onClick();
                    }
                    if ($scope.state) {
                        let nextStateParams = Object.assign({}, $stateParams, $scope.stateParams);
                        $state.go($scope.state, nextStateParams);
                    }
                }
            }

        }],
    }
});
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: xe-button (used for a text link)
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - xeId: component ID
        - value: text value (i18n)
        - valueSeparator: property to split the text by the valueSeparator and show the text as a list
        - tooltip: property to add a text to be shown in tooltip when the cursor is over the text (the default value is none)
        - link: Display the text value as a link, when is true (the default value is false)
        - scrollTo: property to scroll to an page element using the given id
        - onClick: Call a function when the text link is clicked
        - state: App.js State to go when the text link is clicked
        - stateParams: The parameters needed to the state given on the last feature
        - tagEmpty: Default text to display when the text value is empty

    Mandatory Attributes:
        - value

    Usage Examples:
        <m-ssb-value-text
            xe-id= textId
            value="{{row.text}}"
            link="true"
            state="{{row.destPage}}"
            state-params="row.urlParams">
        </m-ssb-value-text>

    NOTE:
        -This component can be oriented: horizontally (the label appears at the left of the text field)
                                         vertically (the label appears at the top of the text field)
**/

mSsbUi.directive("mSsbValueText",
function () {
    return {
        scope: {
            xeId : '@?',            // Xe component id
            value : '@',            // Text value (i18n)
            valueSeparator : '@?',  // When set value is split and shown as a list
            tooltip : '@?',         // Tooltip (i18n)
            link : '=?',            // Display as link (default is false)
            scrollTo : '@?',        // ID of element to scroll to when link is clicked
            onClick : '&?',         // Callback to invoke when link is clicked
            state: '@?',            // State to go when link is clicked
            stateParams: '=?',      // Next state parameters
            tagEmpty: '@?',         // Whether to display alternate text when value is empty
        },
        template: function(element, attrs) {
            var id = attrs.xeId ? 'id="{{xeId}}"' : '';
            var tpl = `
                <span ng-if="!valueSeparator"  aria-label="{{ getValue(value | i18n) }}">
                    {{ getValue(value | i18n) }}
                </span>
                <span ng-if="valueSeparator">
                    <span ng-repeat="v in valueList track by $index"  class="m-ssb-value-text-element" aria-label="{{ v | i18n }}">
                        {{ v | i18n }}
                    </span>
                    <span ng-if="!value" class="m-ssb-value-text-element" aria-label="{{ getValue('' | i18n) }}">
                        {{ getValue('' | i18n) }}
                    </span>
                </span>
            `;
            tpl = `
                <span
                    ` + id + `
                    title="{{tooltip | i18n}}"
                    class="m-ssb-value-text"
                >
                    <xe-button
                        ng-click="click($event)"
                        ng-keypress="click($event)"
                        ng-if="link && scrollTo"
                        xe-id="{{xeId}}"
                        xe-type="primary"
                        xe-label="{{value | i18n}}"
                        class="m-ssb-link-button"
                    >
                    </xe-button>
                    <a href ng-click="click($event)" ng-keypress="click($event)" ng-if="link && !scrollTo" id="{{xeId}}">
` + tpl + `
                    </a>
                    <span ng-if="!link">
` + tpl + `
                    </span>
                </span>
            `;
            return tpl;
        },
        controller: ['$scope', '$state', '$stateParams', 'CONTENT_NA', function ($scope, $state, $stateParams, CONTENT_NA) {
            $scope.valueList = [];
            $scope.$watch('value', (newValue) => {
                if (newValue && $scope.valueSeparator) {
                    //remove separators at begin/end of the string
                    if (newValue.startsWith($scope.valueSeparator)) {
                        newValue = newValue.substring($scope.valueSeparator.length);
                    }
                    if (newValue.endsWith($scope.valueSeparator)) {
                        newValue = newValue.substring(0, newValue.length - $scope.valueSeparator.length);
                    }
                    //split values
                    $scope.valueList = newValue.split($scope.valueSeparator);
                } else {
                    $scope.valueList = [];
                }
            });

            $scope.click = function(event) {
                if (event.type === 'click' || event.which === 13 || event.which === 32) {
                    if (!$scope.link) {
                        return false;
                    }

                    if ($scope.scrollTo) {
                        let target = angular.element('#' + $scope.scrollTo);
                        if (target.length) {
                            target[0].scrollIntoView();
                        }
                        if ($scope.scrollTo == 'bottom') {
                            $('#bottom button').focus();
                        } else if ($scope.scrollTo == 'top') {
                            $('#top button').focus();
                        } else if($scope.scrollTo != 'bottom' && $scope.scrollTo != 'top'){
                            let target = angular.element('#' + $scope.scrollTo);
                            if (target.length) {
                                let active = document.activeElement;
                                target.focus();
                                if(active === document.activeElement){
                                    try{
                                        let ele = target[0].querySelector("[tabindex]");
                                        ele.focus();
                                    }catch (err){
                                        active.focus();
                                    }
                                }
                            }
                        }
                    }

                    if ($scope.onClick) {
                        $scope.onClick();
                    }
                    if ($scope.state) {
                        let nextStateParams = Object.assign({}, $stateParams, $scope.stateParams);
                        $state.go($scope.state, nextStateParams);
                    }
                }
            }

            $scope.getValue = function(v) {
                if ($scope.tagEmpty == 'true' && v == '') {
                    return CONTENT_NA;
                }
                return v;
            }
        }],
    }
})

/** Internal helper service */
.service('mSsbValueTextService',
function() {
    /** @return common attributes template */
    this.getAttributeTemplate = function(attrs) {
        function attr(name) {
            var value = attrs[name];
            return value ? value : "";
        }
        return `
            value-separator="` + attr('valueSeparator') + `"
            tooltip="` + attr('tooltip') + `"
            link="` + attr('link') + `"
            scroll-to="` + attr('scrollTo') + `"
            on-click="` + attr('onClick') + `"
            state="` + attr('state') + `"
            state-params="` + attr('stateParams') + `"
            tag-empty="` + attr('tagEmpty') + `"
        `;
    }
})

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - xeId: component ID
        - value: html text value
        - tooltip: property to add a text to be shown in tooltip when the cursor is over the date (the default value is none)

    Mandatory Attributes:
        -value

    Usage Examples:
        <m-ssb-value-html
            xe-id="htmlId"
            value="{{row.htmlNotes}}">
        </m-ssb-value-html>

    NOTE:
        -This component can be oriented: horizontally (the label appears at the left of the html field)
                                         vertically (the label appears at the top of the html field)
**/

mSsbUi.directive("mSsbValueHtml",
function () {
    return {
        scope: {
            xeId : '@?',            // Xe component id
            value : '@',            // Text value
            tooltip : '@?',         // Tooltip (i18n)
        },
        template: function(element, attrs) {
            var id = attrs.xeId ? 'id="{{xeId}}"' : '';
            var tpl = `
                <div ng-bind-html="value"></div>
            `;
            tpl = `
                <span
                    ` + id + `
                    title="{{tooltip | i18n}}"
                    class="m-ssb-value-text"
                >
                    <span>
` + tpl + `
                    </span>
                </span>
            `;
            return tpl;
        },
    }
})

/** Internal helper service */
.service('mSsbValueHtmlService',
function() {
    /** @return common attributes template */
    this.getAttributeTemplate = function(attrs) {
        function attr(name) {
            var value = attrs[name];
            return value ? value : "";
        }
        return `
            tooltip="` + attr('tooltip') + `"
        `;
    }
})

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attribute:
        - xeId: component ID
        - value: numeric value
        - decimalLength: Fixed number of decimal digits to display (default is dynamic, as required by value)
        - tooltip: property to add a text to be shown in tooltip when the cursor is over the number (the default value is none)
        - link: Display the numeric value as a link, when is true (the default value is false)
        - scrollTo: property to scroll to an page element using the given id
        - onClick: Call a function when the numeric link is clicked
        - state: App.js State to go when the numeric link is clicked
        - stateParams: The parameters needed to the state given on the last feature
        - tagEmpty: Default text to display when the numeric value is empty

    Mandatory Attribute:
        - value

    Usage Examples:
        <m-ssb-value-numeric
            xe-id= numId
            value="{{row.number}}"
            decimal-length="2">
        </m-ssb-value-numeric>

    NOTE:
        -This component can be oriented: horizontally (the label appears at the left of the numeric field)
                                         vertically (the label appears at the top of the numeric field)
**/

mSsbUi.directive("mSsbValueNumeric",
function () {
    return {
        scope: {
            xeId : '@?',            // Xe component id
            value : '@',            // Numeric value
            decimalLength : '@?',   // Fixed number of decimal digits to display (default is dynamic, as required by value)
            tooltip : '@?',         // Tooltip (i18n)
            link : '=?',            // Display as link (default is false)
            scrollTo : '@?',        // ID of element to scroll to when link is clicked
            onClick : '&?',         // Callback to invoke when link is clicked
            state: '@?',            // State to go when link is clicked
            stateParams: '=?',      // Next state parameters
            tagEmpty: '@?',         // Whether to display alternate text when value is empty
        },
        template: function(element, attrs) {
            var id = attrs.xeId ? 'id="{{xeId}}"' : '';
            var tpl = `
                <span
                    ` + id + `
                    ng-click="click($event)"
                    ng-keydown="click($event)"
                    title="{{tooltip | i18n}}"
                    class="m-ssb-value-numeric"
                >
                    <a href ng-if="link" aria-label="{{ getValue() }}">{{getValue()}}</a>
                    <span ng-if="!link" aria-label="{{ getValue() }}">{{getValue()}}</span>
                </span>
            `;
            return tpl;
        },
        controller: ['$scope', '$attrs', '$filter', '$state', '$stateParams', 'CONTENT_NA', function ($scope, $attrs, $filter, $state, $stateParams, CONTENT_NA) {
            $scope.getValue = function() {
                if ($scope.value) {
                    if ($attrs.decimalLength) {
                        return $filter('number')($scope.value, $scope.decimalLength);
                    } else {
                        return $filter('number')($scope.value);
                    }
                } else if ($scope.tagEmpty == 'true') {
                    return CONTENT_NA;
                } else {
                    return '';
                }
            }

            $scope.click = function(event) {
                if (event.type === 'click' || event.which === 13 || event.which === 32) {
                    if (!$scope.link) {
                        return false;
                    }
                    if ($scope.scrollTo) {
                        let target = angular.element('#' + $scope.scrollTo);
                        if (target.length) {
                            target[0].scrollIntoView();
                        }
                    }
                    if ($scope.onClick) {
                        $scope.onClick();
                    }
                    if ($scope.state) {
                        let nextStateParams = Object.assign({}, $stateParams, $scope.stateParams);
                        $state.go($scope.state, nextStateParams);
                    }
                }
            }
        }],
    }
})

/** Internal helper service */
.service('mSsbValueNumericService',
function() {
    /** @return common attributes template */
    this.getAttributeTemplate = function(attrs) {
        function attr(name) {
            var value = attrs[name];
            return value ? value : "";
        }
        return `
            decimal-length="` + attr('decimalLength') + `"
            tooltip="` + attr('tooltip') + `"
            link="` + attr('link') + `"
            scroll-to="` + attr('scrollTo') + `"
            on-click="` + attr('onClick') + `"
            state="` + attr('state') + `"
            state-params="` + attr('stateParams') + `"
            tag-empty="` + attr('tagEmpty') + `"
        `;
    }
})
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2022-2023 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - xeId: component ID
        - value: date value (ISO 8601 string)
        - tooltip: property to add a text to be shown in tooltip when the cursor is over the date (the default value is none)
        - link: Display the date value as a link, when is true (the default value is false)
        - scrollTo: property to scroll to an page element using the given id
        - onClick: Call a function when the date link is clicked
        - state: App.js State to go when the date link is clicked
        - stateParams: The parameters needed to the state given on the last feature
        - tagEmpty: Default text to display when the date value is empty

    Mandatory Attributes:
        - value

    Usage Example:
        <m-ssb-value-date
            xe-id="dateID"
            value="{{row.date}}">
        </m-ssb-value-date>

    NOTE:
        -This component can be oriented: horizontally (the label appears at the left of the date field)
                                         vertically (the label appears at the top of the date field)
**/

mSsbUi.directive("mSsbValueDate",
['m-ssb-ui-config', '$filter', 'commonUtilService',
function (cfg, $filter, util) {
    return {
        scope: {
            xeId : '@?',            // Xe component id
            value : '@',            // Date value (ISO 8601 string)
            tooltip : '@?',         // Tooltip (i18n)
            link : '=?',            // Display as link (default is false)
            scrollTo : '@?',        // ID of element to scroll to when link is clicked
            onClick : '&?',         // Callback to invoke when link is clicked
            state: '@?',            // State to go when link is clicked
            stateParams: '=?',      // Next state parameters
            tagEmpty: '@?',         // Whether to display alternate text when value is empty
        },
        template: function(element, attrs) {
            var id = attrs.xeId ? 'id="{{xeId}}"' : '';
            let classRtl = util.isRTL() ? "" : ""
            var tpl = `
                <span
                    ` + id + `
                    ng-click="click()"
                    title="{{tooltip | i18n}}"
                    class="m-ssb-value-date ` + classRtl + `"
                >
                    <a href ng-if="link">
                        {{formattedValue()}}
                    </a>
                    <span ng-if="!link" aria-label="{{formattedValue()}}">
                        {{formattedValue()}}
                    </span>
                </span>
            `;
            return tpl;
        },
        controller: ['$scope', '$state', '$stateParams', 'CONTENT_NA', function ($scope, $state, $stateParams, CONTENT_NA) {
            $scope.formattedValue = function() {
                if ($scope.value) {
                    let format = $filter('i18n')(cfg.DATE_FORMAT_KEY);
                    let calendarType = $.i18n.prop(cfg.CALENDAR_KEY);
                    if (util.isArabic()){
                        try{
                            const utc_date = util.convertISODateToUTCDate($scope.value);
                            const cDate = $.calendars.newDate(utc_date.getFullYear(), utc_date.getMonth() + 1, utc_date.getDate() , "gregorian", "en")
                            const calendarIslamic = $.calendars.instance(calendarType||'islamic');
                            return calendarIslamic.fromJD(cDate.toJD()).formatDate();
                        }catch(e){
                            return util.convertIsoDateToCDateString($scope.value, format, calendarType);
                        }
                    }else{
                        return util.convertIsoDateToCDateString($scope.value, format, calendarType);
                    }
                } else if ($scope.tagEmpty == 'true') {
                    return CONTENT_NA;
                } else {
                    return '';
                }
            }

            $scope.click = function() {
                if (!$scope.link) {
                    return false;
                }
                if ($scope.scrollTo) {
                    let target = angular.element('#' + $scope.scrollTo);
                    if (target.length) {
                        target[0].scrollIntoView();
                    }
                }
                if ($scope.onClick) {
                    $scope.onClick();
                }
                if ($scope.state) {
                    let nextStateParams = Object.assign({}, $stateParams, $scope.stateParams);
                    $state.go($scope.state, nextStateParams);
                }
            }
        }],
    }
}])

/** Internal helper service */
.service('mSsbValueDateService',
function() {
    /** @return common attributes template */
    this.getAttributeTemplate = function(attrs) {
        function attr(name) {
            var value = attrs[name];
            return value ? value : "";
        }
        return `
            tooltip="` + attr('tooltip') + `"
            link="` + attr('link') + `"
            scroll-to="` + attr('scrollTo') + `"
            on-click="` + attr('onClick') + `"
            state="` + attr('state') + `"
            state-params="` + attr('stateParams') + `"
            tag-empty="` + attr('tagEmpty') + `"
        `;
    }
})

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021-2023 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - xeId: component ID
        - value: Date value (ISO 8601 string)
        - format: property to control the datetime format can be a string value or a i18n key (the default value is specified by DATETIME_FORMAT_KEY in m-ssb-ui-config)
        - tooltip: property to add a text to be shown in tooltip when the cursor is over the date (the default value is none)
        - link: Display the datetime value as a link, when is true (the default value is false)
        - scrollTo: property to scroll to an page element using the given id
        - onClick: Call a function when the datetime link is clicked
        - state: App.js State to go when the datetime link is clicked
        - stateParams: The parameters needed to the state given on the last feature
        - tagEmpty: Default text to display when the datetime value is empty

    Mandatory Attributes:
        - value

    Usage Examples:
        <m-ssb-value-datetime
            xe-id="dateId"
            value="{{n.date}}"
            format="default.datetime.format">
        </m-ssb-value-datetime>

    NOTE:
        -This component can be oriented: horizontally (the label appears at the left of the datetime field)
                                         vertically (the label appears at the top of the datetime field)
**/

mSsbUi.directive("mSsbValueDatetime",
['m-ssb-ui-config', '$filter', 'commonUtilService',
function (cfg, $filter, util) {
    return {
        scope: {
            xeId : '@?',            // Xe component id
            value : '@',            // Date value (ISO 8601 string)
            format : '@?',          // Date format (string or i18n key, default is specified by DATETIME_FORMAT_KEY in m-ssb-ui-config)
            tooltip : '@?',         // Tooltip (i18n)
            link : '=?',            // Display as link (default is false)
            scrollTo : '@?',        // ID of element to scroll to when link is clicked
            onClick : '&?',         // Callback to invoke when link is clicked
            state: '@?',            // State to go when link is clicked
            stateParams: '=?',      // Next state parameters
            tagEmpty: '@?',         // Whether to display alternate text when value is empty
        },
        template: function(element, attrs) {
            let id = attrs.xeId ? 'id="{{xeId}}"' : '';

            let classRtl = util.isRTL() ? "" : ""

            let tpl = `
                <span
                    ` + id + `
                    ng-click="click()"
                    title="{{tooltip | i18n}}"
                    class="m-ssb-value-datetime ` + classRtl + `"
                >
                    <a href ng-if="link">
                        {{formattedValue()}}
                    </a>
                    <span ng-if="!link" aria-label="{{formattedValue()}}">
                        {{formattedValue()}}
                    </span>
                </span>
            `;
            return tpl;
        },
        controller: ['$scope', '$filter', '$state', '$stateParams', 'CONTENT_NA', function ($scope, $filter, $state, $stateParams, CONTENT_NA) {


            $scope.formattedValue = function() {
                if ($scope.value) {
                    let format = $filter('i18n')($scope.format ? $scope.format : cfg.DATETIME_FORMAT_KEY);
                    let calendarType = $.i18n.prop(cfg.CALENDAR_KEY);
                    if (util.isArabic()){
                        try{
                            const utc_date = util.convertISODateToUTCDate($scope.value);
                            const cDate = $.calendars.newDate(utc_date.getFullYear(), utc_date.getMonth() + 1, utc_date.getDate() , "gregorian", "en");
                            const calendarIslamic = $.calendars.instance(calendarType||'islamic');
                            return calendarIslamic.fromJD(cDate.toJD()).formatDate()+" "+$filter('date')($scope.value, "hh:mm:ss a", cfg.TIMEZONE).replace("AM","صباحا").replace("PM","مساء");
                        }catch(e){
                            return $filter('date')($scope.value, format, cfg.TIMEZONE);
                        }
                    }else{
                        return $filter('date')($scope.value, format, cfg.TIMEZONE);
                    }

                } else if ($scope.tagEmpty == 'true') {
                    return CONTENT_NA;
                } else {
                    return '';
                }
            }

            $scope.click = function() {
                if (!$scope.link) {
                    return false;
                }
                if ($scope.scrollTo) {
                    let target = angular.element('#' + $scope.scrollTo);
                    if (target.length) {
                        target[0].scrollIntoView();
                    }
                }
                if ($scope.onClick) {
                    $scope.onClick();
                }
                if ($scope.state) {
                    let nextStateParams = Object.assign({}, $stateParams, $scope.stateParams);
                    $state.go($scope.state, nextStateParams);
                }
            }
        }],
    }
}])

/** Internal helper service */
.service('mSsbValueDatetimeService',
function() {
    /** @return common attributes template */
    this.getAttributeTemplate = function(attrs) {
        function attr(name) {
            let value = attrs[name];
            return value ? value : "";
        }
        return `
            format="` + attr('format') + `"
            tooltip="` + attr('tooltip') + `"
            link="` + attr('link') + `"
            scroll-to="` + attr('scrollTo') + `"
            on-click="` + attr('onClick') + `"
            state="` + attr('state') + `"
            state-params="` + attr('stateParams') + `"
            tag-empty="` + attr('tagEmpty') + `"
        `;
    }
})

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: xe-button
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - xeId: component ID
        - value: button text(i18n)
        - type: property to control the CSS classes that change the button visual (2 themes available: primary and secondary)
        - tooltip: property to add a text to be shown in tooltip when the cursor is over the button (the default value is none)
        - disabled: if true don't let the user use the button (the default value is false)
        - scrollTo: property to scroll to an page element using the given id
        - onClick: Call a function when the button is clicked
        - state: App.js State to go when the button is clicked
        - stateParams: The parameters needed to the state given on the last feature

    Usage Example:
        <m-ssb-value-button
            xe-id= buttonId
            value="bwaklibs.bwaklib10005"
            on-click="call(row)">
        </m-ssb-horizontal-value-button>

    Equivalent Usage Example:
        <xe-button
            xe-id="{{buttonId}}"
            xe-type="{{primary}}"
            xe-label="{{bwaklibs.bwaklib10005 | i18n}}"
            xe-disabled="false"
            xe-btn-click="call(row)"
            class="m-ssb-value-button"
        ></xe-button>
**/

mSsbUi.directive("mSsbValueButton",
function () {
    return {
        scope: {
            xeId : '@?',            // Xe component id
            value : '@?',           // Button text (i18n)
            type :  '@?',           // Button type: primary or secondary (default is primary)
            tooltip : '@?',         // Button tooltip (i18n, default is none)
            disabled : '=?',        // Whether component is disabled (default is false)
            scrollTo : '@?',        // ID of element to scroll to when button is clicked
            onClick : '&?',         // Callback to invoke when button is clicked
            state: '@?',            // State to go when button is clicked
            stateParams: '=?',      // Next state parameters
        },
        template: `
            <xe-button
                xe-id="{{xeId}}"
                xe-type="{{type ? type : 'primary'}}"
                xe-label="{{value | i18n}}"
                xe-disabled="disabled"
                xe-btn-click="click()"
                title="{{tooltip | i18n}}"
                class="m-ssb-value-button"
            ></xe-button>
        `,
        controller: ['$scope', '$state', '$stateParams', function ($scope, $state, $stateParams) {
            $scope.click = function() {
                if ($scope.scrollTo) {
                    let target = angular.element('#' + $scope.scrollTo);
                    if (target.length) {
                        target[0].scrollIntoView();
                    }
                }
                if ($scope.onClick) {
                    $scope.onClick();
                }
                if ($scope.state) {
                    let nextStateParams = Object.assign({}, $stateParams, $scope.stateParams);
                    $state.go($scope.state, nextStateParams);
                }
            }
        }],
    }
})

/** Internal helper service */
.service('mSsbValueButtonService',
function() {
    /** @return common attributes template */
    this.getAttributeTemplate = function(attrs) {
        function attr(name) {
            var value = attrs[name];
            return value ? value : "";
        }
        return `
            type="` + attr('type') + `"
            tooltip="` + attr('tooltip') + `"
            disabled="` + attr('disabled') + `"
            scroll-to="` + attr('scrollTo') + `"
            on-click="` + attr('onClick') + `"
            state="` + attr('state') + `"
            state-params="` + attr('stateParams') + `"
        `;
    }
})

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: xe-text-box
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - xeId: component ID
        - xeLabel: component label
        - value: text value
        - minLength: minimum number of characters that can be written in the text area (numeric)
        - maxLength: maximum number of characters that can be written in the text area (numeric)
        - readOnly: whether component is disabled or not (true or false)
        - required: when required the page will only render if the checkbox is checked (true and default false)
        - onValueChange: it allows the developer to add a function that is triggered when something change in the component

    Mandatory Attributes:
        -value

    Usage Example:
        <m-ssb-edit-text
            xe-id="model.xeId"
            xe-label="model.xeLabel"
            max-length="9"
            value="model.prosId">
        </m-ssb-edit-text>

    Equivalent Usage Example:
        <xe-text-box
            xe-id="{{xeId}}"
            xe-label ="{{xeLabel|i18n}}"
            ng-model="model.value"
            xe-type="text"
            xe-minlength="{{minLength}}"
            xe-maxlength="{{maxLength}}"
        ></xe-text-box>

    NOTE:
        -This component can be oriented: horizontally (the label appears at the left of the text field)
                                         vertically (the label appears at the top of the text field)

**/

mSsbUi.directive("mSsbEditText",
function () {
    return {
        scope: {
            xeId : '@?',            // Xe component id
            xeLabel :'@?',
            value : '=',            // Value
            minLength : '@?',       // Minimum number of characters
            maxLength : '@?',       // Maximum number of characters
            readOnly : '=?',        // Whether component is disabled (default is false)
            required : '=?',        // Whether value is required (default is false)
            onValueChange : '&?',   // Callback to call when value changes
        },
        template: `
            <xe-text-box
                xe-id="{{xeId}}_text"
                xe-label ="{{xeLabel|i18n}}"
                ng-model="value"
                xe-type="text"
                xe-minlength="{{minLength}}"
                xe-maxlength="{{maxLength}}"
                xe-readonly="readOnly"
                xe-required="required"
                m-ssb-mode = "true"
                class="m-ssb-edit m-ssb-edit-text"
            ></xe-text-box>
        `,
        controller: ['$scope', '$element', '$timeout', '$filter', 'commonUtilService', function ($scope, $element, $timeout, $filter, util) {

            let prevValue;
            $timeout( () => {
                const input = $element.find('input');
//                if (angular.isUndefined($scope.mSsbMode)) {
//                    $scope.mSsbMode = true;
//                }
                input.on('focusin', function () {
                    prevValue = $scope.value;
                });
                input.on('focusout', function () {
                    //display validation error on blur
                    let errMsg = getValidationErrorMessage();
                    if (errMsg) {
                        util.clearNotifications();
                        util.showError(errMsg);
                    }
                    //on-value-change must fire only once, after focus lost
                    if ($scope.onValueChange) {
                        if (!_.isEqual(prevValue, $scope.value)) {
                            $scope.onValueChange();
                        }
                    }
                });
            });


            function getValidationErrorMessage() {
                const ngModelController = $element.find('input').data().$ngModelController;
                if (ngModelController.$invalid) {
                    if (ngModelController.$error.minlength || ngModelController.$error.maxlength) {
                        if ($scope.minLength && $scope.maxLength) {
                            return $filter('i18n')('m.ssb.edit.text.between', [$scope.minLength, $scope.maxLength]);
                        } else if ($scope.minLength) {
                            return $filter('i18n')('m.ssb.edit.text.min', [$scope.minLength]);
                        } else if ($scope.maxLength) {
                            return $filter('i18n')('m.ssb.edit.text.max', [$scope.maxLength]);
                        }
                    } else if (ngModelController.$error.required) {
                        return $filter('i18n')('m.ssb.edit.required');
                    } else {
                        return $filter('i18n')('m.ssb.edit.invalid');
                    }
                }

                return '';
            }


            /** @return Validation error message (see commonUtilService.validateForm) */
            this.getValidationErrorMessage = function () {
                return getValidationErrorMessage();
            }

        }],
    }
})

/** Internal helper service */
.service('mSsbEditTextService',
function() {
    /** @return common attributes template */
    this.getAttributeTemplate = function(attrs) {
        function attr(name) {
            let value = attrs[name];
            return value ? value : "";
        }
        return `
            min-length="` + attr('minLength') + `"
            max-length="` + attr('maxLength') + `"
            read-only="` + attr('readOnly') + `"
            required="` + attr('required') + `"
            on-value-change="` + attr('onValueChange') + `"
            xe-label="` + attr('xeLabel') + `"
        `;
    }
})

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: xe-text-area
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - xeId: component ID
        - value: text value
        - placeholder: the default message that appears in the edit text area (i18n)
        - readOnly: whether component is disabled or not (true or false)
        - required: when required the page will only render if the checkbox is checked (true and default false)
        - onValueChange: it allows the developer to add a function that is triggered when something change in the component
        - maxLength: maximum number of characters that can be written in the text area (numeric)

    Mandatory Attributes:
        -value

    Usage Example:
        <h4 id="textAreaId5Label">Text Area</h4> NOTE: needed to attribute a label to aria-labelledby

        <m-ssb-edit-text-area
            xe-id= "textAreaId5"
            value= "textAreaChangeValue"
            placeholder= i18nKey
            on-value-change= textAreaChange()>
        </m-ssb-edit-text-area>

    Equivalent Usage Example:
        <xe-text-area
            xe-id="{{xeId}}"
            ng-model="value"
            xe-placeholder="{{placeholder | i18n}}">
        </xe-text-area>

    NOTE:
        -This component can be oriented: horizontally (the label appears at the left of the text-area field)
                                         vertically (the label appears at the top of the text-area field)

**/

mSsbUi.directive("mSsbEditTextArea",
function () {
    return {
        scope: {
            xeId : '@?',            // Xe component id
            value : '=',            // Value
            placeholder : '@?',     // Placeholder text (i18n)
            maxLength : '@?',       // Maximum number of characters
            readOnly : '=?',        // Whether component is disabled (default is false)
            required : '=?',        // Whether value is required (default is false)
            onValueChange : '&?',   // Callback to call when value changes
        },
        template: function(element, attrs) {
            let charCounter = attrs.maxLength ? 'xe-char-counter="{{maxLength}}"' : '';
            let tpl = `
                <xe-text-area
                    xe-id="{{xeId}}"
                    ng-model="value"
                    xe-placeholder="{{placeholder | i18n}}"
                    ` + charCounter + `
                    xe-readonly="readOnly"
                    xe-required="required"
                    aria-labelledby="{{xeId}}Label"
                    m-ssb-mode = "true"
                    class="m-ssb-edit m-ssb-edit-text-area"
                ></xe-text-area>
            `;
            return tpl;
        },
        controller: ['$scope', '$element', '$timeout', '$filter', 'commonUtilService', function ($scope, $element, $timeout, $filter, util) {
            let prevValue;
            $timeout( () => {
                let input = $element.find('textarea');
//                if (angular.isUndefined($scope.mSsbMode)) {
//                    $scope.mSsbMode = true;
//                }
                input.on('focusin', function () {
                    prevValue = $scope.value;
                });
                input.on('focusout', function () {
                    //display validation error on blur
                    let errMsg = getValidationErrorMessage();
                    if (errMsg) {
                        util.clearNotifications();
                        util.showError(errMsg);
                    }
                    //on-value-change must fire only once, after focus lost
                    if ($scope.onValueChange) {
                        if (!_.isEqual(prevValue, $scope.value)) {
                            $scope.onValueChange();
                        }
                    }
                });
            });


            function getValidationErrorMessage() {
                if ($scope.required && !$scope.value) {
                    return $filter('i18n')('m.ssb.edit.required');
                } else {
                    return '';
                }
            }


            /** @return Validation error message (see commonUtilService.validateForm) */
            this.getValidationErrorMessage = function () {
                return getValidationErrorMessage();
            }

        }],
    }
})

/** Internal helper service */
.service('mSsbEditTextAreaService',
function() {
    /** @return common attributes template */
    this.getAttributeTemplate = function(attrs) {
        function attr(name) {
            let value = attrs[name];
            return value ? value : "";
        }
        return `
            placeholder="` + attr('placeholder') + `"
            max-length="` + attr('maxLength') + `"
            read-only="` + attr('readOnly') + `"
            required="` + attr('required') + `"
            on-value-change="` + attr('onValueChange') + `"
        `;
    }
})

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component type: Wrapper to platform component
    Platform Component(s) used: xe-text-box
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - xeId: component id
        - xeLabel: component label
        - value: numeric value
        - min: Minimum number accepted by the component
        - max: Maximum number accepted by the component
        - integerLength: Maximum number of integer digits
        - decimalLength: Maximum number of decimal digits (default is 0, maximum is 20)
        - readOnly: if true don't let the user change the numeric value (the default value is false)
        - required: if true the field is required and the user must change the numeric field(the default value is false)
        - onValueChange: Call a function when the numeric value change

    Mandatory Attributes:
        - value

    Usage Examples:
        <m-ssb-edit-numeric
            xe-id = "xeId"
            xe-label="bwdksrch.bwdksrc10115"
            max="row.maxLength"
            min="row.minLength"
            integer-length="row.integerLength"
            decimal-length="row.decimalLength"
            value="row.value">
        </m-ssb-edit-numeric>

    Equivalent Usage Example:
        <xe-text-box
            xe-id="{{xeId}}_numeric"
            xe-label ="{{bwdksrch.bwdksrc10115|i18n}}"
            ng-model="row.value"
            xe-type="text"
            xe-readonly="readOnly"
            xe-required="required"
            xe-maxlength="{{maxLength()}}"
            class="m-ssb-edit m-ssb-edit-numeric"
            style="direction: ltr">
        </xe-text-box>

    NOTE:
        -This component can be oriented: horizontally (the label appears at the left of the numeric field)
                                         vertically (the label appears at the top of the numeric field)
**/

mSsbUi.directive("mSsbEditNumeric",
function () {
    return {
        scope: {
            xeId : '@?',            // Xe component id
            xeLabel :'@?',
            value : '=',            // Numeric value
            min : '@?',             // Minimum value
            max : '@?',             // Maximum value
            integerLength : '@?',   // Maximum number of integer digits
            decimalLength : '@?',   // Maximum number of decimal digits (default is 0, maximum is 20)
            readOnly : '=?',        // Whether component is disabled (default is false)
            required : '=?',        // Whether value is required (default is false)
            onValueChange : '&?',   // Callback to call when value changes
        },
        template: `
            <xe-text-box
                xe-id="{{xeId}}_numeric"
                xe-label ="{{xeLabel|i18n}}"
                ng-model="textValue"
                xe-type="text"
                xe-readonly="readOnly"
                xe-required="required"
                xe-maxlength="{{maxLength()}}"
                m-ssb-mode = "true"
                class="m-ssb-edit m-ssb-edit-numeric"
                style="direction: ltr"
            ></xe-text-box>
        `,
        controller: ['$scope', '$element', '$attrs', '$timeout', '$filter', 'commonUtilService', function ($scope, $element, $attrs, $timeout, $filter, util) {

            //internal state
            let state = {
                "parseValid": true,
                "minValid": true,
                "maxValid": true,
                "intLenValid": true,
                "decLenValid": true,
                "valueValid": true,     //whether all of the above are true
                "requiredValid": true,
                "value": undefined,
                "valid": true,          //= valueValid && requiredValid
                "errorMessage": '',
            }

            //Enforce max-length when integer-length is specified
            $scope.maxLength = function() {
                if ($attrs.integerLength) {
                    let intLen = parseInt($scope.integerLength);
                    let decLen = parseInt($scope.decimalLength);
                    let maxLength = intLen;
                    maxLength += Math.floor((intLen - 1)/ 3);    //thousand separators
                    if (decLen > 0) {
                        maxLength += 1 + decLen;            //decimal separator
                    }
                    if (!$attrs.min || parseInt($scope.min) < 0) {
                        maxLength += 1;                     //minus sign
                    }
                    return maxLength;
                }
                return '';
            }

            //Synchronize internal model with external model
            let updatingInternalModel = false;
            let updatingExternalModel = false;

            $scope.$watch('value', (newValue) => {
                if (updatingExternalModel) {
                    //event caused by internal update, nothing to do here
                    updatingExternalModel = false;
                } else {
                    updateInternalModel(newValue);
                    //assume newValue as previous value to consistently fire on-value-change if currently focused
                    prevValue = newValue;
                }
            });

            $scope.$watch('textValue', (newValue) => {
                if (updatingInternalModel) {
                    //event caused by external update, nothing to do here
                    updatingInternalModel = false;
                } else {
                    updateExternalModel(newValue);
                }
            });

//            $timeout( () => {
//                if (angular.isUndefined($scope.mSsbMode)) {
//                    $scope.mSsbMode = true;
//                }
//            });

            function updateInternalModel(newValue) {
                updateState(newValue);
                let newTextValue = state.valid ? formatNumber(state.value, true) : newValue;
                if (!_.isEqual($scope.textValue, newTextValue)) {
                    updatingInternalModel = true;
                    $scope.textValue = newTextValue
                }
            }

            function updateExternalModel(newValue) {
                updateState(newValue);
                if (!_.isEqual($scope.value, state.value)) {
                    updatingExternalModel = true;
                    $scope.value = state.value;
                }
            }


            //parses newValue and updates state
            function updateState(newValue) {

                //convert to string & ignore whitespace
                if (newValue === null) {
                    newValue = '';
                } else if (newValue !== undefined) {
                    newValue = newValue.toString().trim();
                }

                //compute new state
                let parsed = parse(newValue);
                let newState = {
                    "parseValid": true,
                    "minValid": true,
                    "maxValid": true,
                    "intLenValid": true,
                    "decLenValid": true,
                    "valueValid": true,
                    "requiredValid": true,
                    "value": undefined,
                    "valid": true,
                    "errorMessage": '',
                }
                updateStateFlags(parsed, newState);
                updateErrorMessage(newState);

                //set input validity
                $timeout( () => {
                    const ngModelController = $element.find('input').data().$ngModelController;
                    ngModelController.$setValidity('parse', newState.parseValid);
                    ngModelController.$setValidity('min', newState.minValid);
                    ngModelController.$setValidity('max', newState.maxValid);
                    ngModelController.$setValidity('integer-length', newState.intLenValid);
                    ngModelController.$setValidity('decimal-length', newState.decLenValid);
                    ngModelController.$setValidity('value', newState.valueValid);
                    ngModelController.$setValidity('required', newState.requiredValid);
                });

                //update state
                state = newState;
            }


            //parses numeric value
            function parse(text) {
                let THOUSAND_SEPARATOR = ',';
                let DECIMAL_SEPARATOR = '.';
                let negative = false;
                let integerDigits = 0;
                let integerPart = '';
                let decimalDigits = 0;
                let decimalPart = '';
                let parsedValue = undefined;
                let valid = true;

                //parse
                if (text) {
                    let commaFound = text.match(',')
                    if(commaFound && commaFound.length==1 && text.indexOf('.')==-1){
                        THOUSAND_SEPARATOR = '.';
                        DECIMAL_SEPARATOR = ',';
                    }
                    let parsingIntegerDigits = true;

                    for (let i=0; i < text.length; i++) {
                        const chr = text[i];
                        if (i === 0 && text[0] === '-') {
                            negative = true;
                        } else if (parsingIntegerDigits) {
                            if (chr === THOUSAND_SEPARATOR) {
                                //ignore
                            } else if (chr === DECIMAL_SEPARATOR) {
                                parsingIntegerDigits = false;
                                if (integerDigits == 0) {
                                    integerDigits = 1;
                                    integerPart = '0';
                                }
                            } else if (isDigit(chr)) {
                                integerDigits ++;
                                integerPart += chr;
                            } else {
                                valid = false;
                                break;
                            }
                        } else {
                            if (isDigit(chr)) {
                                decimalDigits ++;
                                decimalPart += chr;
                            } else {
                                valid = false;
                                break;
                            }
                        }
                    }

                    //ensure at least a digit was entered
                    if (valid) {
                        if ( (parsingIntegerDigits && !integerDigits) || (!parsingIntegerDigits && !decimalDigits) ) {
                            valid = false;
                        }
                    }

                    //convert to numeric
                    if (valid) {
                        parsedValue = parseFloat(integerPart + "." + decimalPart);
                        if (negative) {
                            parsedValue = -parsedValue;
                        }
                    }
                }

                return {
                    "negative": negative,
                    "integerDigits": integerDigits,
                    "integerPart": integerPart,
                    "decimalDigits": decimalDigits,
                    "decimalPart": decimalPart,
                    "value": parsedValue,
                    "valid": valid,
                }
            }

            function isDigit(chr) {
                return !![1,1,1,1,1,1,1,1,1,1][chr];
            }


            function updateStateFlags(parsed, newState) {
                if (parsed.value !== undefined) {
                    if ($scope.min && parsed.value < parseFloat($scope.min)) {
                        newState.minValid = false;
                    }
                    if ($scope.max && parsed.value > parseFloat($scope.max)) {
                        newState.maxValid = false;
                    }
                    if ($scope.integerLength && parsed.integerDigits > parseFloat($scope.integerLength)) {
                        newState.intLenValid = false;
                    }
                    if (parsed.decimalDigits > ($scope.decimalLength ? parseFloat($scope.decimalLength) : 0) ) {
                        newState.decLenValid = false;
                    }
                }

                newState.parseValid = parsed.valid;
                newState.valueValid =
                        newState.parseValid &&
                        newState.minValid &&
                        newState.maxValid &&
                        newState.intLenValid &&
                        newState.decLenValid;

                newState.value = newState.valueValid ? parsed.value : undefined;

                if ($scope.required && newState.value === undefined) {
                    newState.requiredValid = false;
                }

                newState.valid =
                        newState.valueValid &&
                        newState.requiredValid;
            }


            function updateErrorMessage(newState) {
                if (!newState.valueValid) {
                    if (!newState.parseValid) {
                        newState.errorMessage = $filter('i18n')('m.ssb.edit.numeric.invalid');
                    } else if (!newState.minValid || !newState.maxValid) {
                        if ($scope.min && $scope.max) {
                            newState.errorMessage = $filter('i18n')('m.ssb.edit.numeric.between', [$scope.min, $scope.max]);
                        } else if ($scope.min) {
                            newState.errorMessage = $filter('i18n')('m.ssb.edit.numeric.min', [$scope.min]);
                        } else {
                            newState.errorMessage = $filter('i18n')('m.ssb.edit.numeric.max', [$scope.max]);
                        }
                    } else {
                        let fmt;
                        if ($scope.integerLength) {
                            fmt = '9'.repeat($scope.integerLength);
                        } else {
                            fmt = '(9)';
                        }

                        if ($scope.decimalLength && $scope.decimalLength > 0) {
                            fmt += $.i18n.prop("js.number.decimal");
                            fmt += '9'.repeat($scope.decimalLength);
                        }
                        newState.errorMessage = $filter('i18n')('m.ssb.edit.numeric.format', [fmt]);
                    }
                } else if (!newState.requiredValid) {
                    newState.errorMessage = $filter('i18n')('m.ssb.edit.required');
                }
            }



            //focus & blur
            let focus=false
            let prevValue;
            $timeout( () => {
                let input = $element.find('input');
                input.on('focusin', function () {
                    //enter in xe-table-grid triggers focusin 2 times
                    if(!focus){
                        prevValue = $scope.value;
                        focus=true
                    }

                    if (state.valid) {
                        //change display to unformatted value
                        let fmtValue = formatNumber(state.value, false);
                        if (!_.isEqual($scope.textValue, fmtValue)) {
                            $timeout(() => {
                                updatingInternalModel = true;
                                $scope.textValue = fmtValue;
                            });
                        }
                    }
                });
                input.on('focusout', function () {
                    focus=false
                    if (state.valid) {
                        //change display to formatted value
                        let fmtValue = formatNumber(state.value, true);
                        if (!_.isEqual($scope.textValue, fmtValue)) {
                            $timeout(() => {
                                updatingInternalModel = true;
                                $scope.textValue = fmtValue;
                            });
                        }
                    } else {
                        //display validation error on blur
                        util.clearNotifications();
                        util.showError(state.errorMessage);
                    }

                    //on-value-change must fire only once, after focus lost
                    if ($scope.onValueChange) {
                        if (!_.isEqual(prevValue, $scope.value)) {
                            $scope.$apply($scope.onValueChange);
                        }
                    }
                });

                input.on('keypress',function(e){
                        if (e.which === 13){
                            if ($scope.onValueChange) {
                                if (!_.isEqual(prevValue, $scope.value)) {
                                    $scope.$apply($scope.onValueChange);
                                    prevValue = $scope.value
                                }
                            }

                        }
                });

            });




            /**
             * Formats number.
             *
             * @param n Number to format
             * @param useGrouping Whether to display thousand separators
             * @return formatted number
             */
            function formatNumber(n, useGrouping) {
                //angular number filter may use scientific notation...
                //return $filter('number')(n, $scope.decimalLength);

                if (n === undefined) {
                    return '';
                }

                let decimalLength = $scope.decimalLength ? parseInt($scope.decimalLength) : 0;
                if (decimalLength < 0) decimalLength = 0;
                else if (decimalLength > 20) decimalLength = 20;
                let options = {
                    useGrouping: useGrouping,
                    minimumFractionDigits: decimalLength,
                    maximumFractionDigits: decimalLength,
                }
                return new Intl.NumberFormat('en-US', options).format(n);
            }



            /** @return Validation error message (see commonUtilService.validateForm) */
            this.getValidationErrorMessage = function () {
                return state.errorMessage;
            }

        }],
    }
})

/** Internal helper service */
.service('mSsbEditNumericService',
function() {
    /** @return common attributes template */
    this.getAttributeTemplate = function(attrs) {
        function attr(name) {
            let value = attrs[name];
            return value ? value : "";
        }
        return `
            min="` + attr('min') + `"
            max="` + attr('max') + `"
            integer-length="` + attr('integerLength') + `"
            decimal-length="` + attr('decimalLength') + `"
            read-only="` + attr('readOnly') + `"
            required="` + attr('required') + `"
            on-value-change="` + attr('onValueChange') + `"
            xe-label="` + attr('xeLabel') + `"
        `;
    }
})
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2022-2023 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component type: Wrapper to platform component
    Platform Component(s) used: input date-picker
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - xeId: component id
        - value: Date with the format ISO 8601 string
        - readOnly: if true don't let the user change the date value (the default value is false)
        - required: if true the field is required and the user must enter a new date (the default value is false)
        - onValueChange: Call a function when the date field change

    Mandatory Attributes:
        - value

    Usage Examples:
        <h4 id="editDateId1Label">Date Example</h4> NOTE: needed to attribute a label to aria-labelledby
        <m-ssb-edit-date
            xe-id= "editDateId1"
            value= "dateValue">
        </m-ssb-edit-date>

    Equivalent Usage Example:
        <input
            date-picker
            id="{{xeId}}"
            name="{{xeId}}"
            type="text"
            placeholder="{{('default.date.format.watermark'|i18n).toUpperCase()}}"
            m-ssb-edit-date-helper
            ng-model="row.date"
            ng-disabled="false"
            aria-label="{{'default.date.format.watermark'|i18n}}"
            aria-labelledby="{{xeId}}Label"
            ng-required="true"
            on-select="onDateSelected"
            class="date-picker m-ssb-edit m-ssb-edit-date ` + classRtl + `">
        </input>

    NOTE:
        -This component can be oriented: horizontally (the label appears at the left of the date field)
                                         vertically (the label appears at the top of the date field)
**/

mSsbUi.directive("mSsbEditDate",
['m-ssb-ui-config', '$filter', '$translate','commonUtilService',
function (cfg, $filter, $translate,util) {
    const dateFormat = ($filter('i18n')(cfg.DATE_FORMAT_KEY)).toUpperCase();
    const dateWatermark = ($filter('i18n')(cfg.DATE_WATERMARK_KEY)).toUpperCase();

    return {
        scope: {
            xeId : '@?',            // Xe component id
            value : '=',            // Value (ISO 8601 string)
            readOnly : '=?',        // Whether component is disabled (default is false)
            required : '=?',        // Whether value is required (default is false)
            onValueChange : '&?',   // Callback to call when value changes
        },
         template: function(element, attrs) {

            let classRtl = util.isRTL() ? "rtl" : ""

            let tpl = `
             <input
                    date-picker
                    id="{{xeId}}"
                    name="{{xeId}}"
                    type="text"
                    placeholder="{{('default.date.format.watermark'|i18n).toUpperCase()}}"
                    m-ssb-edit-date-helper
                    ng-model="value"
                    ng-disabled="readOnly"
                    aria-label="{{'default.date.format.watermark'|i18n}}"
                    aria-labelledby="{{xeId}}Label"
                    ng-required="required"
                    on-select="onDateSelected"
                    class="date-picker m-ssb-edit m-ssb-edit-date ` + classRtl + `"
             />
             `
            return tpl;
        },
        controller: ['$scope', '$element', '$timeout', 'mSsbEditDateService', 'commonUtilService', function ($scope, $element, $timeout, svc, util) {

            // Checks conditions and fires onValueChange
            let valueOnFocusIn = undefined;
            function checkValueChange() {
                if ($scope.onValueChange && !_.isEqual(valueOnFocusIn, $scope.value)) {
                    $timeout($scope.onValueChange);
                }
                //ensure onValueChange doesn't fire twice
                valueOnFocusIn = $scope.value;
            }


            // User selected date from calendar
            let notificationTimeOut;
            $scope.onDateSelected = function(data, element) {
                //problem: focus out fires before onDateSelected and required notification is shown
                //solution: add a small timeout to prevent notification to be shown
                if (notificationTimeOut != null) {
                    $timeout.cancel(notificationTimeOut);
                    notificationTimeOut = null;
                }

                $scope.$apply(function () {
                    $scope.value = svc.toISO(data);

                    //Problem: input does not get valid immediately
                    //Solution: force valid
                    const input = $element.find('input');
                    const ngModelController = input.data().$ngModelController;
                    ngModelController.$setValidity('date', true);
                    ngModelController.$setValidity('parse', true);

                    //Problem: clicking calendar triggers blur =>
                    //         user selects date in calendar and onValueChange is not fired...
                    //         user opens calendar again and onValueChange fires!
                    //Solution: fire onValueChange when user selects date in calendar
                    checkValueChange();
                });
            }

            //Problem: calendar button available when read-only
            //Solution: hide it
            $scope.$watch('readOnly', (newValue) => {
                const calendarIcon = $element.find('span.calendar-icon');
                if (calendarIcon[0]) {
                    calendarIcon.css({"display": newValue ? "none" : "inline-block"});
                }
            });


            //focus & blur
            let focus=false
            $timeout( () => {
                //Problem: clicking calendar after focusin triggers focusout and (when required) error notification is shown
                //Solution: cancel error notification (click occurs after focusout)
                const calendarIcon = $element.find('span.calendar-icon');
                if (calendarIcon[0]) {
                    calendarIcon.on("click", function() {
                        if (notificationTimeOut != null) {
                            $timeout.cancel(notificationTimeOut);
                            notificationTimeOut = null;
                        }
                    });
                }

                const input = $element.find('input');
                const ngModelController = input.data().$ngModelController;
                input.on('focusin', function () {
                    //Problem: enter in xe-table-grid triggers focusin 2 times and on-value-change is not fired
                    //Solution: add extra flag
                    if(!focus){
                        valueOnFocusIn = $scope.value;
                        focus=true
                    }

                });
                input.on('focusout', function (evt) {
                    //Problem: calendar arrow navigation triggers focusout and (when required) error notification is shown
                    //Solution: ignore event when relatedTarget contains class 'ui-datepicker-cmd'.
                    //However this does not prevent the input from getting ng-touched and still gets a red border...
                    if (evt.relatedTarget && evt.relatedTarget.classList.contains('ui-datepicker-cmd')) {
                        return;
                    }

                      focus=false
                    //Problem: (xe) date-picker directive autocorrects value after blur, and ngModel is not updated...
                    //         - if user enters 01-01-2021, directive auto corrects value to 01/01/2021
                    //         - if user enters 1, directive auto corrects value to 01/<current day>/<current year>
                    //         - if user enters x, directive auto corrects value to current date
                    //Solution: delay processing
                    $timeout( () => {
                        //apply auto corrections
                        try {
                            $scope.value = svc.toISO(input[0].value);
                            ngModelController.$setValidity('date', true);
                            ngModelController.$setValidity('parse', true);
                        } catch (e) {
                            //ignore
                        }

                        //Problem: sometimes required validation does not work...
                        ngModelController.$setValidity('required', !$scope.required || $scope.value !== undefined);

                        //display validation error on blur
                        notificationTimeOut = $timeout( () => {
                            notificationTimeOut = null;
                            let errMsg = getValidationErrorMessage();
                            if (errMsg) {
                                util.clearNotifications();
                                util.showError(errMsg);
                            }
                        }, 500);

                        //check on-value-change should fire
                        checkValueChange();
                    });
                });
            });


            function getValidationErrorMessage() {
                const inputElement = $element.find('input');
                const ngModelController = inputElement.data().$ngModelController;
                if (ngModelController && ngModelController.$error) {
                    if (ngModelController.$error.date || ngModelController.$error.parse) {
                        return $filter('i18n')('m.ssb.edit.date.invalid', [dateWatermark]);
                    } else if (ngModelController.$error.required) {
                        return $filter('i18n')('m.ssb.edit.required');
                    }
                }
                return '';
            }



            /** @return Validation error message (see commonUtilService.validateForm) */
            this.getValidationErrorMessage = function () {
                return getValidationErrorMessage();
            }

        }],
    }
}])

/** Internal helper directive */
.directive('mSsbEditDateHelper',
['$timeout', 'mSsbEditDateService',
function ($timeout, svc) {
    return {
        require: 'ngModel',
        link: function(scope, element, attrs, ngModelController) {

            ngModelController.$formatters.push(function(isoDate) {
                //ISO 8601 -> date format
                return svc.toDateFormat(isoDate);
            });

            ngModelController.$parsers.push(function(fmtDate) {
                //date format -> ISO 8601 & input validity
                try {
                    const isoDate = svc.toISO(fmtDate);
                    ngModelController.$setValidity('date', true);

                    //Problem: if user clears input it gets ng-invalid-parse AFTER this function returns...
                    //Solution: remove it
                    if (!isoDate) {
                        $timeout( () => ngModelController.$setValidity('parse', true) );
                    }

                    return isoDate;
                } catch (e) {
                    ngModelController.$setValidity('date', false);
                    return undefined;
                }
            });
        }
    }
}])

/** Internal helper service */
.service('mSsbEditDateService',
['m-ssb-ui-config', '$filter','commonUtilService',
function (cfg, $filter,util) {

    /**
     * @param isoDate Date string in ISO 8601 format
     * @return Date string in configured date format (see cfg.DATE_FORMAT_KEY, adjusted to cfg.TIMEZONE)
     */
    const dateFormat = $filter('i18n')(cfg.DATE_FORMAT_KEY);
    let calendarType = $.i18n.prop(cfg.CALENDAR_KEY);
    this.toDateFormat = function(isoDate) {
        if (!isoDate) {
            return '';
        }
        if (util.isArabic()) {
            try {
                const utc_date = util.convertISODateToUTCDate(isoDate);
                const cDate = $.calendars.newDate(utc_date.getFullYear(), utc_date.getMonth() + 1, utc_date.getDate(), "gregorian", "en");
               const calendarIslamic = $.calendars.instance(calendarType||'islamic');
                return calendarIslamic.fromJD(cDate.toJD()).formatDate();
            } catch (e) {
                return util.convertIsoDateToCDateString(isoDate, dateFormat, calendarType);
            }
        } else {
            return util.convertIsoDateToCDateString(isoDate, dateFormat, calendarType);
        }
    }

    /**
     * @param fmtDate Date string in configured date format (see cfg.DATE_FORMAT_KEY, in cfg.TIMEZONE)
     * @return Date string in ISO 8601 format
     * @throws exception if fmtDate is invalid
     */
    const calendar = $filter('i18n')(cfg.CALENDAR_KEY);
    this.toISO = function(fmtDate) {
        if (fmtDate) {
            //following line either throws exception (invalid date) or creates local date
            let date = $.multicalendar.parse(fmtDate, calendar).toJSDate();
            if (cfg.TIMEZONE) {
                //Convert to UTC
                date.setMinutes(date.getMinutes() - date.getTimezoneOffset());
                //Convert to configured timezone
                if (cfg.TIMEZONE !== 'UTC') {
                    throw new Error("mSsbEditDateService TIMEZONE offset: not implemented yet");
                }
            }
            return date.toISOString();
        } else {
            return undefined;
        }
    }

    /** @return common attributes template */
    this.getAttributeTemplate = function(attrs) {
        function attr(name) {
            const value = attrs[name];
            return value ? value : "";
        }
        return `
            read-only="` + attr('readOnly') + `"
            required="` + attr('required') + `"
            on-value-change="` + attr('onValueChange') + `"
        `;
    }

}])

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021-2023 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: xe-checkbox
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - xeId: component ID
        - value: current check-box value
        - value-label: component label
        - checkedValue: the default value to pick the checkbox is true, but can be other value for example: 'A'
        - uncheckedValue: the default value to not pick the checkbox is false, but can be other value for example: 'B'
        - readOnly: if true don't let the user change the checkbox value (the default value is false)
        - required: if true the field is required and the user must change the checkbox value (the default value is false)
        - onValueChange: Call a function when the checkbox value change
        - labelHidden: property to control the CSS classes that hide label

    Mandatory Attributes:
        - value

    Usage Examples:
        <m-ssb-edit-checkbox
            xe-id="row.id"
            value-label="bwpkfsem.bwpkfse10056"
            label-hidden="true"
            label='bwpkfsem.bwpkfse10056'
            value="row.value"
            on-value-change="call()">
        </m-ssb-edit-checkbox>

    Equivalent Usage Example:
        <xe-checkbox
            xe-id="{{row.id}}"
            xe-model="row.value"
            xe-value="{{row.value}}"
            xe-label="{{bwpkfsem.bwpkfse10056|i18n}}"
            class="m-ssb-edit m-ssb-edit-checkbox hide-xe-label">
        </xe-checkbox>

    NOTE:
        -This component can be oriented: horizontally (the label appears at the left of the checkbox)
                                         vertically (the label appears at the top of the checkbox)
**/

mSsbUi.directive("mSsbEditCheckbox",
function () {
    return {
        scope: {
            xeId : '@?',            // Xe component id
            value : '=',            // Value
            valueLabel : '@?',      // Text shown next to the checkbox (i18n)
            checkedValue : '@?',    // Value for checked state (default is boolean true)
            uncheckedValue : '@?',  // Value for unchecked state (default is boolean false)
            unmatchedState : '@?',  // State when value does not match any of the above: 'checked' or 'unchecked' (default)
            readOnly : '=?',        // Whether component is disabled (default is false)
            required : '=?',        // Whether value is required (default is false)
            onValueChange : '&?',   // Callback to call when value changes
            labelHidden : '@?'
        },
        template: function(element, attrs) {
            var tpl = `<xe-checkbox
                             xe-id="{{xeId}}"
                             xe-model="internalValue"
                             xe-value="{{internalValue}}"
                             xe-label="{{valueLabel|i18n}}"
                             xe-aria-label="{{valueLabel|i18n}}"
                             xe-disabled="readOnly"
                             xe-required="required"
                             xe-on-click="onClick(checked, event)"`
            if(attrs.labelHidden) {

                tpl = tpl + `class="m-ssb-edit m-ssb-edit-checkbox hide-xe-label"></xe-checkbox>`;

            } else{
                tpl = tpl + `class="m-ssb-edit m-ssb-edit-checkbox"></xe-checkbox>`;
            }

            return tpl;
        },
        controller: ['$scope', '$attrs', '$timeout', function ($scope, $attrs, $timeout) {

            //Convert checked/unchecked/unmatched value <-> boolean
            let checkedValue = $attrs.checkedValue ? $scope.checkedValue : true;
            let uncheckedValue = $attrs.uncheckedValue ? $scope.uncheckedValue : false;

            function updateInternalValue() {
                if ($scope.value == checkedValue) {
                    $scope.internalValue = true;
                } else if ($scope.value == uncheckedValue) {
                    $scope.internalValue = false;
                } else if ($scope.unmatchedState == 'checked') {
                    $scope.internalValue = true;
                } else {
                    $scope.internalValue = false;
                }
            }

            let updatingExternalValue = false;
            function updateExternalValue() {
                updatingExternalValue = true;
                $scope.value = $scope.internalValue ? checkedValue : uncheckedValue;
            }

            $scope.$watch('value', (newValue) => {
                if (updatingExternalValue) {
                    //event caused by internal update, nothing to do here
                    updatingExternalValue = false;
                } else {
                    updateInternalValue();
                }
            });

            //Problem: click on external label for xe-checkbox fires onClick twice and does not toggle checkbox
            //Solution: when label is clicked, event src is INPUT...
            let inputEventAlreadyFired = false;
            $scope.onClick = function (value, event) {
                let enter = event.keyCode === 13;
                if(!enter){
                    let eventSrcIsInput = event.target.tagName === "INPUT";
                    if (eventSrcIsInput) {
                        if (inputEventAlreadyFired) {
                            $scope.internalValue = !$scope.internalValue;
                            inputEventAlreadyFired = false;
                        } else {
                            inputEventAlreadyFired = true;
                            return;
                        }
                    }
                }
                updateExternalValue();

                if ($scope.onValueChange) {
                    $timeout($scope.onValueChange);
                }
            }

        }],
    }
})

/** Internal helper service */
.service('mSsbEditCheckboxService',
function() {
    /** @return common attributes template */
    this.getAttributeTemplate = function(attrs) {
        function attr(name) {
            var value = attrs[name];
            return value ? value : "";
        }
        return `
            value-label="` + attr('valueLabel') + `"
            checked-value="` + attr('checkedValue') + `"
            unchecked-value="` + attr('uncheckedValue') + `"
            unmatched-state="` + attr('unmatchedState') + `"
            read-only="` + attr('readOnly') + `"
            required="` + attr('required') + `"
            on-value-change="` + attr('onValueChange') + `"
            label-hidden="` + attr('labelHidden') + `"
        `;
    }
})

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021-2023 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: xe-radio-button
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - xeId: component ID
        - value: current choice selected
        - choices: shows all the choices available for the checkbox
        - choiceLabel: field within choice used for Label (default is 'label')
        - choiceValue: field within choice used for value  (default is 'value')
        - layout: use to change the layout from the radio box (default 'horizontal' orientation, but it can be change to 'vertival' orientation)
        - readOnly: whether component is disabled or not (true or false)
        - required: when required the page will only render if the checkbox is checked (true and default false)
        - onValueChange: it allows the developer to add a function that is triggered when something change in the component

    Mandatory Attributes:
        -value
        -choices

    Usage Example:
        <h4 id="radioboxId1Label">Radio-box Example</h4> NOTE: needed to attribute a label to aria-labelledby

        <m-ssb-edit-radiobox
            xe-id= "radioboxId1"
            choices= "radioboxChoices"
            value= "radioboxValue"
            layout= "{{radioboxLayout}}">
        </m-ssb-edit-radiobox>

    Equivalent Usage Example:
         <xe-radio-button
             xe-id="{{getRadioId(choice)}}"
             xe-name="{{xeId}}"
             ng-model="model.selected"
             xe-label="{{choice[labelField]}}"
         ></xe-radio-button>

    NOTE:
        -This component can be oriented: horizontally (the label appears at the left of the radiobox field)
                                         vertically (the label appears at the top of the radiobox field)
**/

mSsbUi.directive("mSsbEditRadiobox",
function () {
    return {
        scope: {
            xeId : '@?',            // Xe component id
            value : '=?',            // Value
            xeAriaLabelRadiobox : '@?',  //Aria label for Radiobox
            choices : '=',          // Available choices
            choiceLabel : '@?',     // Field within choice used for Label (default is 'label')
            choiceValue : '@?',     // Field within choice used for value  (default is 'value')
            layout : '@?',          // How to display choices: 'vertical' or 'horizontal' (default)
            readOnly : '=?',        // Whether component is disabled (default is false)
            required : '=?',        // Whether value is required (default is false)
            onValueChange : '&?',   // Callback to call when value changes
        },
        template: function(element, attrs) {
            let tpl = `
                <xe-radio-button
                        xe-id="{{getRadioId(choice)}}"
                        xe-name="{{xeId}}"
                        ng-model="internalModel.selected"
                        xe-label="{{choice[labelField]}}"
                        ng-value="choice[valueField]"
                        xe-disabled="readOnly ? true : false"
                        ng-required="required && internalModel.selected === undefined ? true : false"
                        xe-aria-label-radio-button="{{xeAriaLabelRadiobox}}"
                ></xe-radio-button>
            `;
            tpl = `
                <div
                    id="{{xeId}}"
                    aria-labelledby="{{xeId}}Label"
                    class="m-ssb-edit m-ssb-edit-radiobox"
                    ng-class="requiredClass"
                >
                    <span
                        ng-if="layout !== 'vertical'"
                        ng-repeat="choice in choices"
                        class="m-ssb-edit-radiobox-horizontal-choice"
                    >
` + tpl + `
                    </span>
                    <p
                        ng-if="layout === 'vertical'"
                        ng-repeat="choice in choices"
                        class="m-ssb-edit-radiobox-vertical-choice"
                    >
` + tpl + `
                    </p>
                </div>
            `;
            return tpl;
        },
        controller: ['$scope', '$element', '$timeout', '$filter', function ($scope, $element, $timeout, $filter) {
            $scope.labelField = $scope.choiceLabel ? $scope.choiceLabel : 'label';
            $scope.valueField = $scope.choiceValue ? $scope.choiceValue : 'value';
            $scope.internalModel = {
                "selected" : $scope.value
            };

            $scope.getRadioId = function(choice) {
                return $scope.xeId + "_" + (choice[$scope.labelField].length == 0 ? choice["ID"] : choice[$scope.labelField].replace(/\W/g, '_'));
            }

            //Synchronize internal model with external model
            let updatingInternalModel = false;
            let updatingExternalModel = false;

            $scope.$watch('value', (newValue) => {
                if (updatingExternalModel) {
                    //event caused by internal update, nothing to do here
                    updatingExternalModel = false;
                } else {
                    updatingInternalModel = true;
                    $scope.internalModel.selected = newValue;
                }
            });

            $scope.$watch('internalModel.selected', (newValue) => {
                if (updatingInternalModel) {
                    //event caused by external update, nothing to do here
                    updatingInternalModel = false;
                } else {
                    updatingExternalModel = true;
                    $scope.value = newValue;

                    if ($scope.onValueChange) {
                        $timeout($scope.onValueChange);
                    }
                }
            });


            //Problem: xe-radio-button has no support for required indicator
            //Solution: use css class (note: the html input is hidden)
            //Problem: required indicator should only show when field is touched
            //Solution: only process requiredClass after focus
            function isValid() {
                //TODO? ensure value matches choices? currently only checks if value is set
                return $scope.value !== undefined;
            }
            $element.on('focusin', function () {
                $scope.$watch('value', (newValue) => {
                    $scope.requiredClass = $scope.required && !isValid() ? 'required' : '';
                });
                $element.off('focusin');
            });


            /** @return Validation error message (see commonUtilService.validateForm) */
            this.getValidationErrorMessage = function () {
                if ($scope.required && !isValid()) {
                    return $filter('i18n')('m.ssb.edit.required');
                } else {
                    return '';
                }
            }

        }],
    }
})

/** Internal helper service */
.service('mSsbEditRadioboxService',
function() {
    /** @return common attributes template */
    this.getAttributeTemplate = function(attrs) {
        function attr(name) {
            let value = attrs[name];
            return value ? value : "";
        }
        return `
            choices="` + attr('choices') + `"
            choice-label="` + attr('choiceLabel') + `"
            choice-value="` + attr('choiceValue') + `"
            layout="` + attr('layout') + `"
            read-only="` + attr('readOnly') + `"
            required="` + attr('required') + `"
            on-value-change="` + attr('onValueChange') + `"
        `;
    }
})

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021-2024 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: xe-ui-select
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - xeId: component ID
        - xeLabel: component Label
        - value: Selected choice(s) value(s)
                 WARN: do not bind directly to a $scope property, bind to a $scope object property.
        - choices: shows all the choices available for the select
        - choiceLabel: field within choice used for Label (default is 'label')
        - choiceValue: field within choice used for value  (default is 'value')
        - multi: whether multiple choices can be selected (true or default false)
        - allowClear: allows the user to clear all the entries or not (if multi=false, default is false)
        - readOnly: whether component is disabled or not (true or false)
        - required: when required the page will only render if a option is selected (default is false)
        - onValueChange: it allows the developer to add a function that is triggered when something change in the component
        - appendToBody: has to be use when inside a xe-table-grid (true or default false)

    Mandatory Attributes:
        -value
        -choices

    Usage Example:
        <h4 id="selectId1Label">Select Example</h4>  NOTE: needed to attribute a label to aria-labelledby

        <m-ssb-edit-select
            xe-id= "selectId1"
            choices= "selectChoices"
            value= "selectValue">
        </m-ssb-edit-select>

    Equivalent Usage Example:
        <xe-ui-select
            ng-if="multi != 'true'"
            id="{{xeId}}"
            ng-model="model.selected"
            ng-disabled="readOnly"
        </xe-ui-select>

    NOTE:
        -This component can be oriented: horizontally (the label appears at the left of the select field)
                                         vertically (the label appears at the top of the select field)
**/

mSsbUi.directive("mSsbEditSelect",
['commonUtilService',
function (util) {
    return {
        scope: {
            xeId : '@?',        // Xe component id
            xeLabel : '@?',
            value : '=',        // Selected choice(s) value(s)
                                // WARN: do not bind directly to a $scope property, bind to a $scope object property.
                                //       Ex. use value="model.selected" instead of value="selected".
            choices : '=',      // Available choices
            choiceLabel : '@?', // Field within choice used for Label (default is 'label')
            choiceValue : '@?', // Field within choice used for value  (default is 'value')
            multi : '@?',       // Whether multiple choices can be selected (default is false)
            allowClear : '=?',  // Whether user can clear entry (if multi=false, default is false)
            readOnly : '=?',    // Whether component is disabled (default is false)
            required : '=?',    // Whether value is required (default is false)
            onValueChange : '&?', // Callback to call when value changes
            appendToBody : '@?',// Whether dropdown should be appended to body instead of component
                                // This is required when used inside xe-table-grid (by default overflow is hidden)
                                // It's automatically enabled by m-ssb-column-edit-select
        },
        template: function(element, attrs) {

           let classRtl = util.isRTL() ? "rtl" : ""
            let tpl = `
                <div ng-style="tableCellStyle">
                    <xe-ui-select
                            ng-if="multi != 'true'"
                            id="{{xeId}}"
                            ng-model="selectModel.selected"
                            ng-disabled="readOnly"
                            append-to-body="{{appendToBody}}"
                            theme="select2"
                            class="select2-search ` + classRtl + ` input m-ssb-edit m-ssb-edit-select"
                            search-enabled="true"
                            ng-required="{{required}}"
                            aria-labelledby="{{xeId}}Label"
                            title="{{(xeLabel | i18n)+ ' ' +getChoiceLabel($select.selected, activeChoiceLabel)}}"
                            text-selected="{{activeChoiceLabel}}"
                    >
                        <xe-ui-select-match ng-attr-allow-clear="{{allowClear && !readOnly}}">{{getChoiceLabel($select.selected, activeChoiceLabel)}}</xe-ui-select-match>
                        <xe-ui-select-choices repeat="{{getRepeatExpression(activeChoiceLabel)}}">
                            <div ng-bind-html="getChoiceLabel(choice, activeChoiceLabel) | highlight: $select.search"></div>
                        </xe-ui-select-choices>
                    </xe-ui-select>
                    <xe-ui-select
                            ng-if="multi == 'true'"
                            multiple
                            id="{{xeId}}"
                            ng-model="selectModel.selected"
                            ng-disabled="readOnly"
                            append-to-body="{{appendToBody}}"
                            theme="select2"
                            class="select2-search ` + classRtl + ` input m-ssb-edit m-ssb-edit-select m-ssb-edit-select-multi"
                            search-enabled="true"
                            ng-required="{{required}}"
                            aria-labelledby="{{xeId}}Label"
                            title="{{(xeLabel | i18n)+ ' ' +getChoiceLabel($select.selected, activeChoiceLabel)}}"
                            text-selected="{{activeChoiceLabel}}">
                        <xe-ui-select-match>{{getChoiceLabel($item, activeChoiceLabel)}}</xe-ui-select-match>
                        <xe-ui-select-choices repeat="{{getRepeatExpression(activeChoiceLabel)}}">
                            <div ng-bind-html="getChoiceLabel(choice, activeChoiceLabel) | highlight: $select.search"></div>
                        </xe-ui-select-choices>
                    </xe-ui-select>
                </div>
            `
            return tpl;
        },
        controller: ['$scope', '$element', '$timeout', function ($scope, $element, $timeout) {

            //xe-ui-select model
            $scope.selectModel = {
                "selected": $scope.value
            }

            //Defaults
            $scope.activeChoiceLabel = $scope.choiceLabel ? $scope.choiceLabel : 'label';
            $scope.activeChoiceValue = $scope.choiceValue ? $scope.choiceValue : 'value';

            /** @return xe-ui-select-choices repeat expression */
            $scope.getRepeatExpression = function (choiceLabel) {
                if (choiceLabel) {
                    return "choice in choices | propsFilter: {" + choiceLabel + ": $select.search}";
                }
                else {
                    return "choice in choices | filter: $select.search";
                }
            }

            /** @return choice label to display */
            $scope.getChoiceLabel = function (choice, choiceLabel) {
                if (!choice) {
                    return '';
                }
                if (choiceLabel) {
                    return choice[choiceLabel];
                }
                return choice;
            }

            //TODO: should also use $watchCollection on both internal & external models...
            // Update our internal select model when user model changes
            let userModelValueChanged = false;
            $scope.$watch("value", (newValue) => {
                if ($scope.choices) {
                    let valueToApply = undefined;

                    if (!$scope.activeChoiceValue) {
                        valueToApply = newValue;
                    } else if (angular.isDefined(newValue)) {
                        if ($scope.multi == "true") {
                            valueToApply = [];
                            if (Array.isArray(newValue)) {
                                $scope.choices.forEach( (choice) => {
                                    if (newValue.includes(choice[$scope.activeChoiceValue])) {
                                        valueToApply.push(choice);
                                    }
                                });
                            }
                            else {
                                //Allow initializing multi-select with single-value
                                $scope.choices.some( (choice) => {
                                    if (choice[$scope.activeChoiceValue] == newValue) {
                                        valueToApply.push(choice);
                                        return true;    //exit some
                                    }
                                });
                            }
                        }
                        else {
                            $scope.choices.some( (choice) => {
                                if (choice[$scope.activeChoiceValue] == newValue) {
                                    valueToApply = choice;
                                    return true;    //exit some
                                }
                            });
                        }
                    }

                    if (!_.isEqual($scope.selectModel.selected, valueToApply)) {
                        userModelValueChanged = true;
                        $scope.selectModel.selected = valueToApply;
                    }
                }
            });


            // Update user model when our internal select model changes
            $scope.$watch("selectModel.selected", (newValue) => {

                if (userModelValueChanged) {
                    //user model already updated, nothing to do here
                    userModelValueChanged = false;
                    return;
                }

                let valueToApply = newValue;

                if (angular.isDefined(newValue) && $scope.activeChoiceValue) {
                    if ($scope.multi == "true") {
                        valueToApply = [];
                        newValue.forEach( (choice) => {
                            valueToApply.push(choice[$scope.activeChoiceValue]);
                        });
                    }
                    else {
                        valueToApply = newValue[$scope.activeChoiceValue];
                    }
                }

                if (!_.isEqual($scope.value,valueToApply)) {
                    $scope.value = valueToApply;
                    if ($scope.onValueChange) {
                        // call onValueChange after new value is applied
                        $timeout($scope.onValueChange);
                    }
                }
            });

            //Problem: ng-required not working on xe-ui-select
            //Solution: use css class
            //Problem: required indicator should only show when field is touched
            //Solution: only process requiredClass after focus
            function isValid() {
                //TODO? ensure value matches choices? currently only checks if value is set
                if ($scope.multi) {
                    return $scope.value && $scope.value.length;
                } else {
                    return $scope.value !== undefined;
                }
            }
            $element.on('focusin', function () {
                $scope.$watch('value', (newValue) => {
                    const selectClass = $scope.multi ? '.select2-choices' : '.ui-select-match';
                    const input = $element.find(selectClass);
                    if ($scope.required && !isValid()) {
                        input[0].setAttribute('required', 'true');
                    } else {
                        input[0].removeAttribute('required');
                    }
                });
                $element.off('focusin');
            });

        }],
    }
}])

/** Internal helper service */
.service('mSsbEditSelectService',
function() {
    /** @return common attributes template */
    this.getAttributeTemplate = function(attrs) {
        function attr(name) {
            let value = attrs[name];
            return value ? value : "";
        }
        return `
            choices="` + attr('choices') + `"
            choice-label="` + attr('choiceLabel') + `"
            choice-value="` + attr('choiceValue') + `"
            multi="` + attr('multi') + `"
            allow-clear="` + attr('allowClear') + `"
            read-only="` + attr('readOnly') + `"
            required="` + attr('required') + `"
            on-value-change="` + attr('onValueChange') + `"
            append-to-body="` + attr('appendToBody') + `"
        `;
    }
})
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component type: Wrapper to platform component
    Platform Component(s) used: xe-text-box
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - xeId: component id
        - xeLabel: component label
        - value: password value
        - minLength: Minimum number of characters
        - maxLength: Maximum number of characters
        - readOnly: if true don't let the user change the password value (the default value is false)
        - required: if true the field is required and the user must enter a password (the default value is false)
        - onValueChange: Call a function when the password value change

    Usage Examples:
        <m-ssb-edit-password
            xe-id="passId"
            xe-label="bwpkxw2s.bwpkxw210306"
            value="pin"
            min-length="pMin"
            max-length="pMax">
        </m-ssb-edit-password>

    Equivalent Usage Example:
        <xe-text-box
            xe-id="{{passId}}_text"
            xe-label ="{{xeLabel}}"
            ng-model="pin"
            xe-type="password"
            xe-minlength="{{pMin}}"
            xe-maxlength="{{pMax}}"
            xe-readonly="false"
            xe-required="false"
            class="m-ssb-edit m-ssb-edit-text"
        ></xe-text-box>

    NOTE:
        -This component can be oriented: horizontally (the label appears at the left of the password field)
                                         vertically (the label appears at the top of the password field)
**/

mSsbUi.directive("mSsbEditPassword",
function () {
    return {
        scope: {
            xeId : '@?',            // Xe component id
            xeLabel :'@?',
            value : '=',            // Value
            minLength : '@?',       // Minimum number of characters
            maxLength : '@?',       // Maximum number of characters
            readOnly : '=?',        // Whether component is disabled (default is false)
            required : '=?',        // Whether value is required (default is false)
            onValueChange : '&?',   // Callback to call when value changes
        },
        template: `
            <xe-text-box
                xe-id="{{xeId}}_text"
                xe-label ="{{xeLabel}}"
                ng-model="value"
                xe-type="password"
                xe-minlength="{{minLength}}"
                xe-maxlength="{{maxLength}}"
                xe-readonly="readOnly"
                xe-required="required"
                m-ssb-mode = "true"
                class="m-ssb-edit m-ssb-edit-text"
            ></xe-text-box>
        `,
        controller: ['$scope', '$element', '$timeout', '$filter', 'commonUtilService', function ($scope, $element, $timeout, $filter, util) {

            let prevValue;
            $timeout( () => {
                const input = $element.find('input');
//                if (angular.isUndefined($scope.mSsbMode)) {
//                    $scope.mSsbMode = true;
//                }
                input.on('focusin', function () {
                    prevValue = $scope.value;
                });
                input.on('focusout', function () {
                    //display validation error on blur
                    let errMsg = getValidationErrorMessage();
                    if (errMsg) {
                        util.clearNotifications();
                        util.showError(errMsg);
                    }
                    //on-value-change must fire only once, after focus lost
                    if ($scope.onValueChange) {
                        if (!_.isEqual(prevValue, $scope.value)) {
                            $scope.onValueChange();
                        }
                    }
                });
            });


            function getValidationErrorMessage() {
                const ngModelController = $element.find('input').data().$ngModelController;
                if (ngModelController.$invalid) {
                    if (ngModelController.$error.minlength || ngModelController.$error.maxlength) {
                        if ($scope.minLength && $scope.maxLength) {
                            return $filter('i18n')('m.ssb.edit.text.between', [$scope.minLength, $scope.maxLength]);
                        } else if ($scope.minLength) {
                            return $filter('i18n')('m.ssb.edit.text.min', [$scope.minLength]);
                        } else if ($scope.maxLength) {
                            return $filter('i18n')('m.ssb.edit.text.max', [$scope.maxLength]);
                        }
                    } else if (ngModelController.$error.required) {
                        return $filter('i18n')('m.ssb.edit.required');
                    } else {
                        return $filter('i18n')('m.ssb.edit.invalid');
                    }
                }

                return '';
            }


            /** @return Validation error message (see commonUtilService.validateForm) */
            this.getValidationErrorMessage = function () {
                return getValidationErrorMessage();
            }

        }],
    }
})

/** Internal helper service */
.service('mSsbEditPasswordService',
function() {
    /** @return common attributes template */
    this.getAttributeTemplate = function(attrs) {
        function attr(name) {
            let value = attrs[name];
            return value ? value : "";
        }
        return `
            min-length="` + attr('minLength') + `"
            max-length="` + attr('maxLength') + `"
            read-only="` + attr('readOnly') + `"
            required="` + attr('required') + `"
            on-value-change="` + attr('onValueChange') + `"
            xe-label="` + attr('xeLabel') + `"
        `;
    }
})

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - labelCols: number of bootstrap3 columns to use for label (default is 4)
        - valueCols: number of bootstrap3 columns to use for value (default is 8, or 12 if label not set)
                     if only labelCols or valueCols is set, the other uses the remaining columns
        - label: label text displayed aside input (i18n)
        - labelTooltip: when the mouse passes in the component it will display a message (i18n)
        - required: whether label required indicator is shown (default is false)
        - iconVisible: add or not an icon to the component (true or default false)
        - iconImage: path to the icon image (default is none)
        - iconTooltip: when the mouse passes in the icon it will display a message (i18n)
        - iconScrollTo: ID of element to scroll to when icon is clicked
        - iconClick: function callback when clicking the icon
        - iconState: state name to go when clicking the icon
        - iconStateParams: state parameters necessary
        - xeId: component Id (automatically set)

    Usage Example:
         - The examples are in <m-ssb-horizontal-edit-type-directive> and <m-ssb-horizontal-value-type-directive>
              The type can be on off the following:
                -For m-ssb-horizontal-edit and m-ssb-vertical-value
                    -date
                    -numeric
                    -text
                -For m-ssb-horizontal-edit
                    -checkbox
                    -password
                    -radiobox
                    -select
                -For m-ssb-horizontal-value
                    -button
                    -html
                    -datetime
**/
mSsbUi.directive("mSsbHorizontal",
function () {
    return {
        scope:{
            labelCols : '@?',       // Number of bootstrap3 columns to use for label (default is 4)
            valueCols : '@?',       // Number of bootstrap3 columns to use for value (default is 8, or 12 if label not set)
                                    // If only labelCols or valueCols is set, the other uses the remaining columns
            label : '@?',           // Label text displayed aside input (i18n)
            labelTooltip : '@?',    // Label tooltip (i18n, default is none)
            labelRequired : '=?',   // Whether label required indicator is shown (default is false)
            iconVisible : '=?',     // Whether icon is shown (default is true)
            iconImage : '@?',       // Path of image to be displayed aside input (default is none)
            iconTooltip : '@?',     // Icon tooltip (i18n, default is none)
            iconScrollTo : '@?',    // ID of element to scroll to when icon is clicked
            iconClick : '&?',       // Callback to invoke when icon is clicked
            iconState: '@?',        // State to go when icon is clicked
            iconStateParams: '=?',  // Next state parameters
            xeId : '@',             // Xe component id (do not use, automatically set)
        },
        transclude: true,
        template: function(element, attrs) {
            let iconVisible = attrs.iconVisible ? 'visible="iconVisible"' : '';
            let iconClick = attrs.iconClick ? 'on-click="iconClick()"' : '';
            let tpl = `
                <div class="row m-ssb-horizontal">
                    <div ng-if="label" ng-class="labelColClass">
                        <m-ssb-label
                            xe-id="{{xeId}}"
                            label="{{label}}"
                            tooltip="{{labelTooltip}}"
                            required="labelRequired"
                            class="m-ssb-horizontal-label"
                        ></m-ssb-label>
                    </div>
                    <div ng-if="!label" id="{{xeId}}Label"></div>
                    <div ng-class="valueColClass" class="m-ssb-horizontal-content">
                        <m-ssb-icon
                            id="{{xeId}}Icon"
                            ` + iconVisible + `
                            image="{{iconImage}}"
                            tooltip="{{iconTooltip}}"
                            scroll-to="{{iconScrollTo}}"
                            ` + iconClick + `
                            state="{{iconState}}"
                            state-params="iconStateParams"
                        ></m-ssb-icon>
                        <div class="m-ssb-horizontal-control" ng-style="getControlStyle()">
                            <ng-transclude/>
                        </div>
                    </div>
                </div>
            `;
            return tpl;
        },
        controller: ['$scope', function ($scope) {

            let labelCols;
            let valueCols;
            //if ($scope.label) {
                if ($scope.labelCols && $scope.valueCols) {
                    labelCols = $scope.labelCols;
                    valueCols = $scope.valueCols;
                } else if ($scope.labelCols) {
                    labelCols = $scope.labelCols;
                    valueCols = 12 - $scope.labelCols;
                } else if ($scope.valueCols) {
                    labelCols = 12 - $scope.valueCols;
                    valueCols = $scope.valueCols;
                } else {
                    if ($scope.label) {
                        labelCols = 4;
                        valueCols = 8;
                    } else {
                        labelCols = 0;
                        if ($scope.valueCols) {
                            valueCols = $scope.valueCols;
                        } else {
                            valueCols = 12;
                        }
                    }
                }


            $scope.labelColClass = "col-sm-" + labelCols;
            $scope.valueColClass = "col-sm-" + valueCols;

            $scope.getControlStyle = function() {
                if ($scope.iconImage) {
                    let iconWidth = angular.element('#' + $scope.xeId + 'Icon').children().first().width();
                    iconWidth += 5;
                    return {
                        "display": "inline-block",
                        "width": "calc(100% - " + iconWidth + "px",
                    }
                } else {
                    return {
                        "display": "inline-block",
                        "width": "100%",
                    }
                }
            }

        }],
    }
})


/** Internal helper service */
.service('mSsbHorizontalService',
function() {

    /**
        @return m-ssb-horizontal-* directives template
        Note: assumes each instance has declared xeId in $scope
        Note: 'label-required' gets the 'required' control attribute value
    */
    this.getHorizontalTemplate = function(attrs, controlTemplate) {
        function attr(name) {
            let value = attrs[name];
            return value ? value : "";
        }
        return `
            <m-ssb-horizontal
                    xe-id="{{xeId}}"
                    label-cols="` + attr('labelCols') + `"
                    value-cols="` + attr('valueCols') + `"
                    label="` + attr('label') + `"
                    label-tooltip="` + attr('labelTooltip') + `"
                    label-required="` + attr('required') + `"
                    icon-visible="` + attr('iconVisible') + `"
                    icon-image="` + attr('iconImage') + `"
                    icon-tooltip="` + attr('iconTooltip') + `"
                    icon-scroll-to="` + attr('iconScrollTo') + `"
                    icon-click="` + attr('iconClick') + `"
                    icon-state="` + attr('iconState') + `"
                    icon-state-params="` + attr('iconStateParams') + `"
            >
` + controlTemplate + `
            </m-ssb-horizontal>
        `;
    }

})

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: xe-button (used for a text link)
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-value-text-directive> and <m-ssb-horizontal-directive>,
                so it inherits their attributes.

        VALUE-TEXT DIRECTIVE:
                    - value: numeric value
                    - decimalLength: Fixed number of decimal digits to display (default is dynamic, as required by value)
                    - tooltip: property to add a text to be shown in tooltip when the cursor is over the number (the default value is none)
                    - link: Display the numeric value as a link, when is true (the default value is false)
                    - scrollTo: property to scroll to an page element using the given id
                    - onClick: Call a function when the numeric link is clicked
                    - state: App.js State to go when the numeric link is clicked
                    - stateParams: The parameters needed to the state given on the last feature
                    - tagEmpty: Default text to display when the numeric value is empty

        HORIZONTAL DIRECTIVE:
                    - labelCols: number of bootstrap3 columns to use for label (default is 4)
                    - valueCols: number of bootstrap3 columns to use for value (default is 8, or 12 if label not set)
                                 if only labelCols or valueCols is set, the other uses the remaining columns
                    - label: label text displayed aside input (i18n)
                    - labelTooltip: when the mouse passes in the component it will display a message (i18n)
                    - required: whether label required indicator is shown (default is false)
                    - iconVisible: add or not an icon to the component (true or default false)
                    - iconImage: path to the icon image (default is none)
                    - iconTooltip: when the mouse passes in the icon it will display a message (i18n)
                    - iconScrollTo: ID of element to scroll to when icon is clicked
                    - iconClick: function callback when clicking the icon
                    - iconState: state name to go when clicking the icon
                    - iconStateParams: state parameters necessary
                    - xeId: component Id (automatically set)

    Mandatory Attributes:
        - value

    Usage Example:
       <m-ssb-horizontal-value-text
           link="true"
           scroll-to="topOfPage"
           value="bwdkcprf.bwdkcpr10289">
       </m-ssb-horizontal-value-text>
**/

mSsbUi.directive("mSsbHorizontalValueText",
['mSsbHorizontalService', 'mSsbValueTextService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-value-text
                        xe-id="{{xeId}}"
                        value="` + (attrs.value ? attrs.value : '') + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-value-text>
            `;
            return svc.getHorizontalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbHorizontalValueText' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-value-html-directive> and <m-ssb-horizontal-directive>,
                so it inherits their attributes.

        VALUE-HTML DIRECTIVE:
                    - value: text value
                    - tooltip: property to add a text to be shown in tooltip when the cursor is over the date (the default value is none)

        HORIZONTAL DIRECTIVE:
                    - labelCols: number of bootstrap3 columns to use for label (default is 4)
                    - valueCols: number of bootstrap3 columns to use for value (default is 8, or 12 if label not set)
                                 if only labelCols or valueCols is set, the other uses the remaining columns
                    - label: label text displayed aside input (i18n)
                    - labelTooltip: when the mouse passes in the component it will display a message (i18n)
                    - required: whether label required indicator is shown (default is false)
                    - iconVisible: add or not an icon to the component (true or default false)
                    - iconImage: path to the icon image (default is none)
                    - iconTooltip: when the mouse passes in the icon it will display a message (i18n)
                    - iconScrollTo: ID of element to scroll to when icon is clicked
                    - iconClick: function callback when clicking the icon
                    - iconState: state name to go when clicking the icon
                    - iconStateParams: state parameters necessary
                    - xeId: component Id (automatically set)


    Mandatory Attributes:
        - value

    Usage Example:
       <m-ssb-horizontal-value-html
            value="All pages (in the template gsp) already have a <code>div</code> with <code>class=container-fluid</code> as required by bootstrap">
       </m-ssb-horizontal-value-html>
**/

mSsbUi.directive("mSsbHorizontalValueHtml",
['mSsbHorizontalService', 'mSsbValueHtmlService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-value-html
                        xe-id="{{xeId}}"
                        value="` + (attrs.value ? attrs.value : '') + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-value-html>
            `;
            return svc.getHorizontalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbHorizontalValueHtml' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-value-numeric-directive> and <m-ssb-horizontal-directive>,
                so it inherits their attributes.

        VALUE-NUMERIC DIRECTIVE:
                    - xeId: component ID
                    - value: text value (i18n)
                    - valueSeparator: property to split the text by the valueSeparator and show the text as a list
                    - tooltip: property to add a text to be shown in tooltip when the cursor is over the text (the default value is none)
                    - link: Display the text value as a link, when is true (the default value is false)
                    - scrollTo: property to scroll to an page element using the given id
                    - onClick: Call a function when the text link is clicked
                    - state: App.js State to go when the text link is clicked
                    - stateParams: The parameters needed to the state given on the last feature
                    - tagEmpty: Default text to display when the text value is empty

        HORIZONTAL DIRECTIVE:
                    - labelCols: number of bootstrap3 columns to use for label (default is 4)
                    - valueCols: number of bootstrap3 columns to use for value (default is 8, or 12 if label not set)
                                 if only labelCols or valueCols is set, the other uses the remaining columns
                    - label: label text displayed aside input (i18n)
                    - labelTooltip: when the mouse passes in the component it will display a message (i18n)
                    - required: whether label required indicator is shown (default is false)
                    - iconVisible: add or not an icon to the component (true or default false)
                    - iconImage: path to the icon image (default is none)
                    - iconTooltip: when the mouse passes in the icon it will display a message (i18n)
                    - iconScrollTo: ID of element to scroll to when icon is clicked
                    - iconClick: function callback when clicking the icon
                    - iconState: state name to go when clicking the icon
                    - iconStateParams: state parameters necessary
                    - xeId: component Id (automatically set)

    Mandatory Attributes:
        - value

    Usage Example:
       <m-ssb-horizontal-value-numeric
           label="bwdkmove.bwdkmov10029"
           label-cols="2"
           value="{{record.amrplanWaitDays}}"
           value-cols="4" >
       </m-ssb-horizontal-value-numeric>
**/

mSsbUi.directive("mSsbHorizontalValueNumeric",
['mSsbHorizontalService', 'mSsbValueNumericService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-value-numeric
                        xe-id="{{xeId}}"
                        value="` + (attrs.value ? attrs.value : '') + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-value-numeric>
            `;
            return svc.getHorizontalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbHorizontalValueNumeric' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-value-date-directive> and <m-ssb-horizontal-directive>,
                so it inherits their attributes.

        VALUE-DATE DIRECTIVE:
                    - value: date value (ISO 8601 string)
                    - tooltip: property to add a text to be shown in tooltip when the cursor is over the date (the default value is none)
                    - link: Display the date value as a link, when is true (the default value is false)
                    - scrollTo: property to scroll to an page element using the given id
                    - onClick: Call a function when the date link is clicked
                    - state: App.js State to go when the date link is clicked
                    - stateParams: The parameters needed to the state given on the last feature
                    - tagEmpty: Default text to display when the date value is empty

        HORIZONTAL DIRECTIVE:
                    - labelCols: number of bootstrap3 columns to use for label (default is 4)
                    - valueCols: number of bootstrap3 columns to use for value (default is 8, or 12 if label not set)
                                 if only labelCols or valueCols is set, the other uses the remaining columns
                    - label: label text displayed aside input (i18n)
                    - labelTooltip: when the mouse passes in the component it will display a message (i18n)
                    - required: whether label required indicator is shown (default is false)
                    - iconVisible: add or not an icon to the component (true or default false)
                    - iconImage: path to the icon image (default is none)
                    - iconTooltip: when the mouse passes in the icon it will display a message (i18n)
                    - iconScrollTo: ID of element to scroll to when icon is clicked
                    - iconClick: function callback when clicking the icon
                    - iconState: state name to go when clicking the icon
                    - iconStateParams: state parameters necessary
                    - xeId: component Id (automatically set)

    Mandatory Attributes:
        - value

    Usage Example:
       <m-ssb-horizontal-value-date
           ng-if="record.plannedDate"
           label="bwdkmove.bwdkmov10130"
           label-cols="2"
           value="{{record.plannedDate}}"
           value-cols="4" >
       </m-ssb-horizontal-value-date>
**/

mSsbUi.directive("mSsbHorizontalValueDate",
['mSsbHorizontalService', 'mSsbValueDateService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-value-date
                        xe-id="{{xeId}}"
                        value="` + (attrs.value ? attrs.value : '') + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-value-date>
            `;
            return svc.getHorizontalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbHorizontalValueDate' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-value-datetime-directive> and <m-ssb-horizontal-directive>,
                so it inherits their attributes.

        VALUE-DATETIME DIRECTIVE:
                    - value: Date value (ISO 8601 string)
                    - format: property to control the datetime format can be a string value or a i18n key (the default value is specified by DATETIME_FORMAT_KEY in m-ssb-ui-config)
                    - tooltip: property to add a text to be shown in tooltip when the cursor is over the date (the default value is none)
                    - link: Display the datetime value as a link, when is true (the default value is false)
                    - scrollTo: property to scroll to an page element using the given id
                    - onClick: Call a function when the datetime link is clicked
                    - state: App.js State to go when the datetime link is clicked
                    - stateParams: The parameters needed to the state given on the last feature
                    - tagEmpty: Default text to display when the datetime value is empty

        HORIZONTAL DIRECTIVE:
                    - labelCols: number of bootstrap3 columns to use for label (default is 4)
                    - valueCols: number of bootstrap3 columns to use for value (default is 8, or 12 if label not set)
                                 if only labelCols or valueCols is set, the other uses the remaining columns
                    - label: label text displayed aside input (i18n)
                    - labelTooltip: when the mouse passes in the component it will display a message (i18n)
                    - required: whether label required indicator is shown (default is false)
                    - iconVisible: add or not an icon to the component (true or default false)
                    - iconImage: path to the icon image (default is none)
                    - iconTooltip: when the mouse passes in the icon it will display a message (i18n)
                    - iconScrollTo: ID of element to scroll to when icon is clicked
                    - iconClick: function callback when clicking the icon
                    - iconState: state name to go when clicking the icon
                    - iconStateParams: state parameters necessary
                    - xeId: component Id (automatically set)

    Mandatory Attributes:
        - value

    Usage Example:
        <m-ssb-horizontal-value-datetime
            label="bwpkfmsc.bwpkfms10036"
            format="default.datetime.format"
            value="{{n.date}}"
            label-cols="3"
            value-cols="4">
        </m-ssb-horizontal-value-datetime>
**/

mSsbUi.directive("mSsbHorizontalValueDatetime",
['mSsbHorizontalService', 'mSsbValueDatetimeService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-value-datetime
                        xe-id="{{xeId}}"
                        value="` + (attrs.value ? attrs.value : '') + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-value-datetime>
            `;
            return svc.getHorizontalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbHorizontalValueDatetime' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: xe-button
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-value-button-directive> and <m-ssb-horizontal-directive>,
                so it inherits their attributes.

        VALUE-BUTTON DIRECTIVE:
                    - value: button text(i18n)
                    - type: property to control the CSS classes that change the button visual (2 themes available: primary and secondary)
                    - tooltip: property to add a text to be shown in tooltip when the cursor is over the button (the default value is none)
                    - disable: if true don't let the user use the button (the default value is false)
                    - scrollTo: property to scroll to an page element using the given id
                    - onClick: Call a function when the button is clicked
                    - state: App.js State to go when the button is clicked
                    - stateParams: The parameters needed to the state given on the last feature

        HORIZONTAL DIRECTIVE:
                    - labelCols: number of bootstrap3 columns to use for label (default is 4)
                    - valueCols: number of bootstrap3 columns to use for value (default is 8, or 12 if label not set)
                                 if only labelCols or valueCols is set, the other uses the remaining columns
                    - label: label text displayed aside input (i18n)
                    - labelTooltip: when the mouse passes in the component it will display a message (i18n)
                    - required: whether label required indicator is shown (default is false)
                    - iconVisible: add or not an icon to the component (true or default false)
                    - iconImage: path to the icon image (default is none)
                    - iconTooltip: when the mouse passes in the icon it will display a message (i18n)
                    - iconScrollTo: ID of element to scroll to when icon is clicked
                    - iconClick: function callback when clicking the icon
                    - iconState: state name to go when clicking the icon
                    - iconStateParams: state parameters necessary
                    - xeId: component Id (automatically set)

    Mandatory Attributes:
        - value

    Usage Example:
       <m-ssb-horizontal-value-button
           ng-if="row.linkChoice"
           on-click="go(row)"
           value="bwaklibs.bwaklib10005">
       </m-ssb-horizontal-value-button>
**/

mSsbUi.directive("mSsbHorizontalValueButton",
['mSsbHorizontalService', 'mSsbValueButtonService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-value-button
                        xe-id="{{xeId}}"
                        value="` + (attrs.value ? attrs.value : '') + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-value-button>
            `;
            return svc.getHorizontalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbHorizontalValueButton' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: xe-text-box
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-edit-text-directive> and <m-ssb-horizontal-directive>,
                so it inherits their attributes.

        EDIT-TEXT DIRECTIVE:
                    - value: text value
                    - minLength: minimum number of characters that can be written in the text area (numeric)
                    - maxLength: maximum number of characters that can be written in the text area (numeric)
                    - readOnly: whether component is disabled or not (true or false)
                    - required: when required the page will only render if the checkbox is checked (true and default false)
                    - onValueChange: it allows the developer to add a function that is triggered when something change in the component

        HORIZONTAL DIRECTIVE:
                    - labelCols: number of bootstrap3 columns to use for label (default is 4)
                    - valueCols: number of bootstrap3 columns to use for value (default is 8, or 12 if label not set)
                                 if only labelCols or valueCols is set, the other uses the remaining columns
                    - label: label text displayed aside input (i18n)
                    - labelTooltip: when the mouse passes in the component it will display a message (i18n)
                    - required: whether label required indicator is shown (default is false)
                    - iconVisible: add or not an icon to the component (true or default false)
                    - iconImage: path to the icon image (default is none)
                    - iconTooltip: when the mouse passes in the icon it will display a message (i18n)
                    - iconScrollTo: ID of element to scroll to when icon is clicked
                    - iconClick: function callback when clicking the icon
                    - iconState: state name to go when clicking the icon
                    - iconStateParams: state parameters necessary
                    - xeId: component Id (automatically set)

    Mandatory Attributes:
        - value

    Usage Example:
       <m-ssb-horizontal-edit-text
           label="bwaklibs.bwaklib10004"
           label-cols="2" max-length="9"
           value="model.prosId"
           value-cols="4">
       </m-ssb-horizontal-edit-text>
**/

mSsbUi.directive("mSsbHorizontalEditText",
['mSsbHorizontalService', 'mSsbEditTextService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-edit-text
                        xe-id="{{xeId}}"
                        xe-label ="` + attrs.xeLabel + `"
                        value="` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-edit-text>
            `;
            return svc.getHorizontalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbHorizontalEditText' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: xe-text-area
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-edit-text-area-directive> and <m-ssb-horizontal-directive>,
                so it inherits their attributes.

        EDIT-TEXT-AREA DIRECTIVE:
                    - value: text value
                    - placeholder: the default message that appears in the edit text area (i18n)
                    - readOnly: whether component is disabled or not (true or false)
                    - required: when required the page will only render if the checkbox is checked (true and default false)
                    - onValueChange: it allows the developer to add a function that is triggered when something change in the component
                    - maxLength: maximum number of characters that can be written in the text area (numeric)

        HORIZONTAL DIRECTIVE:
                    - labelCols: number of bootstrap3 columns to use for label (default is 4)
                    - valueCols: number of bootstrap3 columns to use for value (default is 8, or 12 if label not set)
                                 if only labelCols or valueCols is set, the other uses the remaining columns
                    - label: label text displayed aside input (i18n)
                    - labelTooltip: when the mouse passes in the component it will display a message (i18n)
                    - required: whether label required indicator is shown (default is false)
                    - iconVisible: add or not an icon to the component (true or default false)
                    - iconImage: path to the icon image (default is none)
                    - iconTooltip: when the mouse passes in the icon it will display a message (i18n)
                    - iconScrollTo: ID of element to scroll to when icon is clicked
                    - iconClick: function callback when clicking the icon
                    - iconState: state name to go when clicking the icon
                    - iconStateParams: state parameters necessary
                    - xeId: component Id (automatically set)

    Mandatory Attributes:
        - value

    Usage Example:
       <m-ssb-horizontal-edit-text-area
           label="bwdkmove.bwdkmov10047"
           label-cols="2"
           max-length="180"
           placeholder="{{model.commentText}}"
           value="model.commentText"
           value-cols="6">
       </m-ssb-horizontal-edit-text-area>
**/

mSsbUi.directive("mSsbHorizontalEditTextArea",
['mSsbHorizontalService', 'mSsbEditTextAreaService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-edit-text-area
                        xe-id="{{xeId}}"
                        value="` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-edit-text-area>
            `;
            return svc.getHorizontalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbHorizontalEditTextArea' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: xe-text-box
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-edit-numeric-directive> and <m-ssb-horizontal-directive>,
                so it inherits their attributes.

           EDIT-NUMERIC DIRECTIVE:
           - value: numeric value
           - min: Minimum number accepted by the component
           - max: Maximum number accepted by the component
           - integerLength: Maximum number of integer digits
           - decimalLength: Maximum number of decimal digits (default is 0, maximum is 20)
           - readOnly: if true don't let the user change the numeric value (the default value is false)
           - required: if true the field is required and the user must change the numeric field(the default value is false)
           - onValueChange: Call a function when the numeric value change

           HORIZONTAL DIRECTIVE:
           - labelCols: number of bootstrap3 columns to use for label (default is 4)
           - valueCols: number of bootstrap3 columns to use for value (default is 8, or 12 if label not set)
                        if only labelCols or valueCols is set, the other uses the remaining columns
           - label: label text displayed aside input (i18n)
           - labelTooltip: when the mouse passes in the component it will display a message (i18n)
           - required: whether label required indicator is shown (default is false)
           - iconVisible: add or not an icon to the component (true or default false)
           - iconImage: path to the icon image (default is none)
           - iconTooltip: when the mouse passes in the icon it will display a message (i18n)
           - iconScrollTo: ID of element to scroll to when icon is clicked
           - iconClick: function callback when clicking the icon
           - iconState: state name to go when clicking the icon
           - iconStateParams: state parameters necessary
           - xeId: component Id (automatically set)

    Mandatory Attributes:
           - value

    Usage Example:
           <m-ssb-horizontal-edit-numeric
               label="bwdkpcnt.bwdkpcn10127"
               label-cols="2" value="model.askAmt1"
               value-cols="3" integer-length="9"
               decimal-length="2"
               min="0"
               max="999999999.99">
           </m-ssb-horizontal-edit-numeric>
**/

mSsbUi.directive("mSsbHorizontalEditNumeric",
['mSsbHorizontalService', 'mSsbEditNumericService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-edit-numeric
                        xe-id="{{xeId}}"
                        xe-label ="` + attrs.xeLabel + `"
                        value="` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-edit-numeric>
            `;
            return svc.getHorizontalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbHorizontalEditNumeric' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: input date-picker
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-edit-date-directive> and <m-ssb-horizontal-directive>,
                so it inherits their attributes.

        EDIT-DATE DIRECTIVE:
        - value: Date with the format ISO 8601 string
        - readOnly: if true don't let the user change the date value (the default value is false)
        - required: if true the field is required and the user must enter a new date (the default value is false)
        - onValueChange: Call a function when the date field change

        HORIZONTAL DIRECTIVE:
        - labelCols: number of bootstrap3 columns to use for label (default is 4)
        - valueCols: number of bootstrap3 columns to use for value (default is 8, or 12 if label not set)
                    if only labelCols or valueCols is set, the other uses the remaining columns
        - label: label text displayed aside input (i18n)
        - labelTooltip: when the mouse passes in the component it will display a message (i18n)
        - required: whether label required indicator is shown (default is false)
        - iconVisible: add or not an icon to the component (true or default false)
        - iconImage: path to the icon image (default is none)
        - iconTooltip: when the mouse passes in the icon it will display a message (i18n)
        - iconScrollTo: ID of element to scroll to when icon is clicked
        - iconClick: function callback when clicking the icon
        - iconState: state name to go when clicking the icon
        - iconStateParams: state parameters necessary
        - xeId: component Id (automatically set)

    Mandatory Attributes:
        - value

    Usage Example:
        <m-ssb-horizontal-edit-date
            label="bwdkpcnt.bwdkpcn10096"
            label-cols="2" required="true"
            value="model.scntDate"
            value-cols="4">
        </m-ssb-horizontal-edit-date>
**/

mSsbUi.directive("mSsbHorizontalEditDate",
['mSsbHorizontalService', 'mSsbEditDateService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-edit-date
                        xe-id="{{xeId}}"
                        value="` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-edit-date>
            `;
            return svc.getHorizontalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbHorizontalEditDate' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: xe-checkbox
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-edit-checkbox-directive> and <m-ssb-horizontal-directive>,
                so it inherits their attributes.

            EDIT-CHECKBOX DIRECTIVE:
            - value: current check-box value
            - value-label: component label
            - checkedValue: the default value to pick the checkbox is true, but can be other value for example: 'A'
            - uncheckedValue: the default value to not pick the checkbox is false, but can be other value for example: 'B'
            - readOnly: if true don't let the user change the checkbox value (the default value is false)
            - required: if true the field is required and the user must change the checkbox value (the default value is false)
            - onValueChange: Call a function when the checkbox value change
            - labelHidden: property to control the CSS classes that hide label

            HORIZONTAL DIRECTIVE:
            - labelCols: number of bootstrap3 columns to use for label (default is 4)
            - valueCols: number of bootstrap3 columns to use for value (default is 8, or 12 if label not set)
                         if only labelCols or valueCols is set, the other uses the remaining columns
            - label: label text displayed aside input (i18n)
            - labelTooltip: when the mouse passes in the component it will display a message (i18n)
            - required: whether label required indicator is shown (default is false)
            - iconVisible: add or not an icon to the component (true or default false)
            - iconImage: path to the icon image (default is none)
            - iconTooltip: when the mouse passes in the icon it will display a message (i18n)
            - iconScrollTo: ID of element to scroll to when icon is clicked
            - iconClick: function callback when clicking the icon
            - iconState: state name to go when clicking the icon
            - iconStateParams: state parameters necessary
            - xeId: component Id (automatically set)

    Mandatory Attributes:
            - value

    Usage Example:
            <m-ssb-horizontal-edit-checkbox
                ng-if="model.hasOwnProperty('addProjInd')"
                checked-value="Y" unchecked-value="N"
                label="bwdkpcnt.bwdkpcn10129"
                label-cols="2"
                value="model.addProjInd">
            </m-ssb-horizontal-edit-checkbox>
**/

mSsbUi.directive("mSsbHorizontalEditCheckbox",
['mSsbHorizontalService', 'mSsbEditCheckboxService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-edit-checkbox
                        xe-id="{{xeId}}"
                        value="` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-edit-checkbox>
            `;
            return svc.getHorizontalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbHorizontalEditCheckbox' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: xe-radio-button
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-edit-radiobox-directive> and <m-ssb-horizontal-directive>,
                so it inherits their attributes.

           EDIT-RADIOBOX DIRECTIVE:
           - value: current choice selected
           - choices: shows all the choices available for the checkbox
           - choiceLabel: field within choice used for Label (default is 'label')
           - choiceValue: field within choice used for value  (default is 'value')
           - layout: use to change the layout from the radio box (default 'horizontal' orientation, but it can be change to 'vertival' orientation)
           - readOnly: whether component is disabled or not (true or false)
           - required: when required the page will only render if the checkbox is checked (true and default false)
           - onValueChange: it allows the developer to add a function that is triggered when something change in the component

           HORIZONTAL DIRECTIVE:
           - labelCols: number of bootstrap3 columns to use for label (default is 4)
           - valueCols: number of bootstrap3 columns to use for value (default is 8, or 12 if label not set)
                        if only labelCols or valueCols is set, the other uses the remaining columns
           - label: label text displayed aside input (i18n)
           - labelTooltip: when the mouse passes in the component it will display a message (i18n)
           - required: whether label required indicator is shown (default is false)
           - iconVisible: add or not an icon to the component (true or default false)
           - iconImage: path to the icon image (default is none)
           - iconTooltip: when the mouse passes in the icon it will display a message (i18n)
           - iconScrollTo: ID of element to scroll to when icon is clicked
           - iconClick: function callback when clicking the icon
           - iconState: state name to go when clicking the icon
           - iconStateParams: state parameters necessary
           - xeId: component Id (automatically set)

    Mandatory Attributes:
           - value
           - choices

    Usage Example:
       <m-ssb-horizontal-edit-radiobox
           label="bwdkpref.bwdkpre10039"
           choices="lists.headerPref"
           value="model.headerPref"
           layout="vertical"
           label-cols="3"
           value-cols="5">
       </m-ssb-horizontal-edit-radiobox>
**/

mSsbUi.directive("mSsbHorizontalEditRadiobox",
['mSsbHorizontalService', 'mSsbEditRadioboxService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-edit-radiobox
                        xe-id="{{xeId}}"
                        value="` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-edit-radiobox>
            `;
            return svc.getHorizontalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbHorizontalEditRadiobox' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021-2024 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: xe-ui-select
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-edit-select-directive> and <m-ssb-horizontal-directive>,
                so it inherits their attributes.

        EDIT-SELECT DIRECTIVE:
        - value: Selected choice(s) value(s)
                 WARN: do not bind directly to a $scope property, bind to a $scope object property.
        - choices: shows all the choices available for the select
        - choiceLabel: field within choice used for Label (default is 'label')
        - choiceValue: field within choice used for value  (default is 'value')
        - multi: whether multiple choices can be selected (true or default false)
        - allowClear: allows the user to clear all the entries or not (if multi=false, default is false)
        - readOnly: whether component is disabled or not (true or false)
        - required: when required the page will only render if a option is selected
        - onValueChange: it allows the developer to add a function that is triggered when something change in the component
        - appendToBody: has to be use when inside a xe-table-grid (true or default false)

        HORIZONTAL DIRECTIVE:
        - labelCols: number of bootstrap3 columns to use for label (default is 4)
        - valueCols: number of bootstrap3 columns to use for value (default is 8, or 12 if label not set)
                     if only labelCols or valueCols is set, the other uses the remaining columns
        - label: label text displayed aside input (i18n)
        - labelTooltip: when the mouse passes in the component it will display a message (i18n)
        - required: whether label required indicator is shown (default is false)
        - iconVisible: add or not an icon to the component (true or default false)
        - iconImage: path to the icon image (default is none)
        - iconTooltip: when the mouse passes in the icon it will display a message (i18n)
        - iconScrollTo: ID of element to scroll to when icon is clicked
        - iconClick: function callback when clicking the icon
        - iconState: state name to go when clicking the icon
        - iconStateParams: state parameters necessary
        - xeId: component Id (automatically set)
        - xeLabel: component Label text bind with the input select box

    Mandatory Attributes:
        - value
        - choices

    Usage Example:
       <m-ssb-horizontal-edit-select
           ng-if="record.collCodeLabel != undefined"
           choices="lists.coll_code"
           multi="true"
           label="{{record.collCodeLabel}}"
           label-cols="3"
           value="model.coll_code"
           value-cols="3">
       </m-ssb-horizontal-edit-select>
**/

mSsbUi.directive("mSsbHorizontalEditSelect",
['mSsbHorizontalService', 'mSsbEditSelectService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-edit-select
                        xe-id="{{xeId}}"
                        xe-label ="` + attrs.xeLabel + `"
                        value="` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-edit-select>
            `;
            return svc.getHorizontalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbHorizontalEditSelect' + (nextId++);
        }],
    }
}]);

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/
/**
    Component Type: Wrapper to platform Component
    Platform Component(s) used: xe-text-box
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-edit-password-directive> and <m-ssb-horizontal-directive>,
                so it inherits their attributes.

           EDIT-PASSWORD DIRECTIVE:
           - value: password value
           - minLength: Minimum number of characters
           - maxLength: Maximum number of characters
           - readOnly: if true don't let the user change the password value (the default value is false)
           - required: if true the field is required and the user must enter a password (the default value is false)
           - onValueChange: Call a function when the password value change

           HORIZONTAL DIRECTIVE:
           - labelCols: number of bootstrap3 columns to use for label (default is 4)
           - valueCols: number of bootstrap3 columns to use for value (default is 8, or 12 if label not set)
                        if only labelCols or valueCols is set, the other uses the remaining columns
           - label: label text displayed aside input (i18n)
           - labelTooltip: when the mouse passes in the component it will display a message (i18n)
           - required: whether label required indicator is shown (default is false)
           - iconVisible: add or not an icon to the component (true or default false)
           - iconImage: path to the icon image (default is none)
           - iconTooltip: when the mouse passes in the icon it will display a message (i18n)
           - iconScrollTo: ID of element to scroll to when icon is clicked
           - iconClick: function callback when clicking the icon
           - iconState: state name to go when clicking the icon
           - iconStateParams: state parameters necessary
           - xeId: component Id (automatically set)

    Mandatory Attributes:
           - value

    Usage Example:
           <m-ssb-horizontal-edit-password
               label-tooltip="taxes.pin"
               label="bwpkxw2s.bwpkxw210306"
               value="pin">
           </m-ssb-horizontal-edit-password>
**/

mSsbUi.directive("mSsbHorizontalEditPassword",
['mSsbHorizontalService', 'mSsbEditPasswordService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-edit-password
                        xe-id="{{xeId}}"
                        xe-label ="` + attrs.xeLabel + `"
                        value="` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-edit-password>
            `;
            return svc.getHorizontalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbHorizontalEditPassword' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes:
        - cols: property to change the number of bootstrap3 columns to be used by the component (default is 4)
        - label: component label
        - labelTooltip: property to add a text to be shown in tooltip when the cursor is over the label (the default value is none)
        - required: property to add a label required indicator, when the value is true (the default value is false)
        - iconVisible: property to hidde or show the icon, when the value is true shows the icon (the default vaue is true)
        - iconImage: property to receive an image path to display aside the input (default is none)
        - iconTooltip: property to add a text to be shown in tooltip when the cursor is over the icon (the default value is none)
        - iconScrollTo: property to scroll to an page element when the icon is clicked
        - iconClick: Call a function when the icon is clicked
        - iconState: App.js State to go when the icon is clicked
        - iconStateParams: The parameters needed to the state given on the last feature
        - xeId: Component Id (automatically set)

    Usage Examples:
        - The examples are in <m-ssb-vertical-edit-type-directive> and <m-ssb-vertical-value-type-directive>
          The type can be on off the following:
            -For m-ssb-vertical-edit and m-ssb-vertical-value
                -date
                -numeric
                -text
            -For m-ssb-vertical-edit
                -checkbox
                -password
                -radiobox
                -select
            -For m-ssb-vertical-value
                -button
                -html
                -datetime
**/

/**
    m-ssb-vertical directive - provides structure for m-ssb-vertical-* directives
*/
mSsbUi.directive("mSsbVertical",
function () {
    return {
        scope:{
            cols : '@?',            // Number of bootstrap3 columns to use (default is 4)
            label : '@?',           // Label text displayed above input (i18n)
            labelTooltip : '@?',    // Label tooltip (i18n, default is none)
            labelRequired : '=?',   // Whether label required indicator is shown (default is false)
            iconVisible : '=?',     // Whether icon is shown (default is true)
            iconImage : '@?',       // Path of image to be displayed aside input (default is none)
            iconTooltip : '@?',     // Icon tooltip (i18n, default is none)
            iconScrollTo : '@?',    // ID of element to scroll to when icon is clicked
            iconClick : '&?',       // Callback to invoke when icon is clicked
            iconState: '@?',        // State to go when icon is clicked
            iconStateParams: '=?',  // Next state parameters
            xeId : '@',             // Xe component id (do not use, automatically set)
        },
        transclude: true,
        template: function(element, attrs) {
            let iconVisible = attrs.iconVisible ? 'visible="iconVisible"' : '';
            let iconClick = attrs.iconClick ? 'on-click="iconClick()"' : '';
            let tpl = `
                <div ng-class="colClass" class="m-ssb-vertical">
                    <m-ssb-label
                        ng-if="label"
                        xe-id="{{xeId}}"
                        label="{{label}}"
                        tooltip="{{labelTooltip}}"
                        required="labelRequired"
                        class="m-ssb-vertical-label"
                    ></m-ssb-label>
                    <div ng-if="!label" id="{{xeId}}Label"></div>
                    <div
                        ng-if="!label"
                        class="m-ssb-vertical-without-label"
                    >
                        <span class="m-ssb-label">&nbsp;</span>
                    </div>
                    <div class="m-ssb-vertical-content">
                        <m-ssb-icon
                            id="{{xeId}}Icon"
                            ` + iconVisible + `
                            image="{{iconImage}}"
                            tooltip="{{iconTooltip}}"
                            scroll-to="{{iconScrollTo}}"
                            ` + iconClick + `
                            state="{{iconState}}"
                            state-params="iconStateParams"
                        ></m-ssb-icon>
                        <div class="m-ssb-vertical-control" ng-style="getControlStyle()">
                            <ng-transclude/>
                        </div>
                    </div>
                </div>
            `;
            return tpl;
        },
        controller: ['$scope', function ($scope) {
            $scope.colClass = $scope.cols ? "col-sm-" + $scope.cols : "col-sm-4";

            $scope.getControlStyle = function() {
                if ($scope.iconImage) {
                    let iconWidth = angular.element('#' + $scope.xeId + 'Icon').children().first().width();
                    iconWidth += 5;
                    return {
                        "display": "inline-block",
                        "width": "calc(100% - " + iconWidth + "px",
                    }
                } else {
                    return {
                        "display": "inline-block",
                        "width": "100%",
                    }
                }
            }

        }],
    }
})


/** Internal helper service */
.service('mSsbVerticalService',
function() {

    /**
        @return m-ssb-vertical-* directives template
        Note: assumes each instance has declared xeId in $scope
        Note: 'label-required' gets the 'required' control attribute value
    */
    this.getVerticalTemplate = function(attrs, controlTemplate) {
        function attr(name) {
            let value = attrs[name];
            return value ? value : "";
        }
        return `
            <m-ssb-vertical
                    xe-id="{{xeId}}"
                    cols="` + attr('cols') + `"
                    label="` + attr('label') + `"
                    label-tooltip="` + attr('labelTooltip') + `"
                    label-required="` + attr('required') + `"
                    icon-visible="` + attr('iconVisible') + `"
                    icon-image="` + attr('iconImage') + `"
                    icon-tooltip="` + attr('iconTooltip') + `"
                    icon-scroll-to="` + attr('iconScrollTo') + `"
                    icon-click="` + attr('iconClick') + `"
                    icon-state="` + attr('iconState') + `"
                    icon-state-params="` + attr('iconStateParams') + `"
            >
` + controlTemplate + `
            </m-ssb-vertical>
        `;
    }

})

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: xe-button (used for a text link)
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-value-text-directive> and <m-ssb-vertical-directive>,
                so it inherits their attributes.

        VALUE-TEXT DIRECTIVE:
        - value: text value (i18n)
        - valueSeparator: property to split the text by the valueSeparator and show the text as a list
        - tooltip: property to add a text to be shown in tooltip when the cursor is over the text (the default value is none)
        - link: Display the text value as a link, when is true (the default value is false)
        - scrollTo: property to scroll to an page element using the given id
        - onClick: Call a function when the text link is clicked
        - state: App.js State to go when the text link is clicked
        - stateParams: The parameters needed to the state given on the last feature
        - tagEmpty: Default text to display when the text value is empty

        VERTICAL DIRECTIVE:
        - cols: property to change the number of bootstrap3 columns to be used by the component (default is 4)
        - label: component label
        - labelTooltip: property to add a text to be shown in tooltip when the cursor is over the label (the default value is none)
        - required: property to add a label required indicator, when the value is true (the default value is false)
        - iconVisible: property to hidde or show the icon, when the value is true shows the icon (the default vaue is true)
        - iconImage: property to receive an image path to display aside the input (default is none)
        - iconTooltip: property to add a text to be shown in tooltip when the cursor is over the icon (the default value is none)
        - iconScrollTo: property to scroll to an page element when the icon is clicked
        - iconClick: Call a function when the icon is clicked
        - iconState: App.js State to go when the icon is clicked
        - iconStateParams: The parameters needed to the state given on the last feature
        - xeId: Component Id (automatically set)

    Mandatory Attributes:
        - value
    Usage Examples:
        <m-ssb-vertical-value-text
            label="bwdkmove.bwdkmov10008"
            cols="3"
            value="{{row.text}}"
            link="true"
            state="{{row.destPage}}"
            state-params="row.urlParams">
        </m-ssb-vertical-value-text>
**/

mSsbUi.directive("mSsbVerticalValueText",
['mSsbVerticalService', 'mSsbValueTextService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-value-text
                        xe-id="{{xeId}}"
                        value="` + (attrs.value ? attrs.value : '') + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-value-text>
            `;
            return svc.getVerticalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbVerticalValueText' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-value-html-directive> and <m-ssb-vertical-directive>,
                so it inherits their attributes.

        VALUE-HTML DIRECTIVE:
        - value: html text value
        - tooltip: property to add a text to be shown in tooltip when the cursor is over the date (the default value is none)

        VERTICAL DIRECTIVE:
        - cols: property to change the number of bootstrap3 columns to be used by the component (default is 4)
        - label: component label
        - labelTooltip: property to add a text to be shown in tooltip when the cursor is over the label (the default value is none)
        - required: property to add a label required indicator, when the value is true (the default value is false)
        - iconVisible: property to hidde or show the icon, when the value is true shows the icon (the default vaue is true)
        - iconImage: property to receive an image path to display aside the input (default is none)
        - iconTooltip: property to add a text to be shown in tooltip when the cursor is over the icon (the default value is none)
        - iconScrollTo: property to scroll to an page element when the icon is clicked
        - iconClick: Call a function when the icon is clicked
        - iconState: App.js State to go when the icon is clicked
        - iconStateParams: The parameters needed to the state given on the last feature
        - xeId: Component Id (automatically set)

    Mandatory Attributes:
        - value

    Usage Examples:
        <m-ssb-vertical-value-html
            label="bwpkfmsc.bwpkfms10023"
            value="{{row.htmlNotes}}">
        </m-ssb-vertical-value-html>
**/

mSsbUi.directive("mSsbVerticalValueHtml",
['mSsbVerticalService', 'mSsbValueHtmlService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-value-html
                        xe-id="{{xeId}}"
                        value="` + (attrs.value ? attrs.value : '') + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-value-html>
            `;
            return svc.getVerticalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbVerticalValueHtml' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-value-numeric-directive> and <m-ssb-vertical-directive>,
                so it inherits their attributes.

        VALUE-NUMERIC DIRECTIVE:
        - value: numeric value
        - decimalLength: Fixed number of decimal digits to display (default is dynamic, as required by value)
        - tooltip: property to add a text to be shown in tooltip when the cursor is over the number (the default value is none)
        - link: Display the numeric value as a link, when is true (the default value is false)
        - scrollTo: property to scroll to an page element using the given id
        - onClick: Call a function when the numeric link is clicked
        - state: App.js State to go when the numeric link is clicked
        - stateParams: The parameters needed to the state given on the last feature
        - tagEmpty: Default text to display when the numeric value is empty

        VERTICAL DIRECTIVE:
        - cols: property to change the number of bootstrap3 columns to be used by the component (default is 4)
        - label: component label
        - labelTooltip: property to add a text to be shown in tooltip when the cursor is over the label (the default value is none)
        - required: property to add a label required indicator, when the value is true (the default value is false)
        - iconVisible: property to hidde or show the icon, when the value is true shows the icon (the default vaue is true)
        - iconImage: property to receive an image path to display aside the input (default is none)
        - iconTooltip: property to add a text to be shown in tooltip when the cursor is over the icon (the default value is none)
        - iconScrollTo: property to scroll to an page element when the icon is clicked
        - iconClick: Call a function when the icon is clicked
        - iconState: App.js State to go when the icon is clicked
        - iconStateParams: The parameters needed to the state given on the last feature
        - xeId: Component Id (automatically set)

    Mandatory Attributes:
        - value

    Usage Examples:
        <m-ssb-vertical-value-numeric
            label='bwpkfcrn.bwpkfcr10004'
            value="{{row.number}}"
            decimal-length="2">
        </m-ssb-vertical-value-numeric>
**/

mSsbUi.directive("mSsbVerticalValueNumeric",
['mSsbVerticalService', 'mSsbValueNumericService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-value-numeric
                        xe-id="{{xeId}}"
                        value="` + (attrs.value ? attrs.value : '') + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-value-numeric>
            `;
            return svc.getVerticalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbVerticalValueNumeric' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-value-date-directive> and <m-ssb-vertical-directive>,
                so it inherits their attributes.

        VALUE-DATE DIRECTIVE:
        - value: date value (ISO 8601 string)
        - tooltip: property to add a text to be shown in tooltip when the cursor is over the date (the default value is none)
        - link: Display the date value as a link, when is true (the default value is false)
        - scrollTo: property to scroll to an page element using the given id
        - onClick: Call a function when the date link is clicked
        - state: App.js State to go when the date link is clicked
        - stateParams: The parameters needed to the state given on the last feature
        - tagEmpty: Default text to display when the date value is empty

        VERTICAL DIRECTIVE:
        - cols: property to change the number of bootstrap3 columns to be used by the component (default is 4)
        - label: component label
        - labelTooltip: property to add a text to be shown in tooltip when the cursor is over the label (the default value is none)
        - required: property to add a label required indicator, when the value is true (the default value is false)
        - iconVisible: property to hidde or show the icon, when the value is true shows the icon (the default vaue is true)
        - iconImage: property to receive an image path to display aside the input (default is none)
        - iconTooltip: property to add a text to be shown in tooltip when the cursor is over the icon (the default value is none)
        - iconScrollTo: property to scroll to an page element when the icon is clicked
        - iconClick: Call a function when the icon is clicked
        - iconState: App.js State to go when the icon is clicked
        - iconStateParams: The parameters needed to the state given on the last feature
        - xeId: Component Id (automatically set)

    Mandatory Attributes:
        - value

    Usage Examples:
        <m-ssb-vertical-value-date
            label="bwpksala.bwpksal10028"
            value="{{row.date}}">
        </m-ssb-vertical-value-date>
**/

mSsbUi.directive("mSsbVerticalValueDate",
['mSsbVerticalService', 'mSsbValueDateService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-value-date
                        xe-id="{{xeId}}"
                        value="` + (attrs.value ? attrs.value : '') + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-value-date>
            `;
            return svc.getVerticalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbVerticalValueDate' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: None
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-value-datetime-directive> and <m-ssb-vertical-directive>,
                so it inherits their attributes.

        VALUE-DATETIME DIRECTIVE:
        - value: Date value (ISO 8601 string)
        - format: property to control the datetime format can be a string value or a i18n key (the default value is specified by DATETIME_FORMAT_KEY in m-ssb-ui-config)
        - tooltip: property to add a text to be shown in tooltip when the cursor is over the date (the default value is none)
        - link: Display the datetime value as a link, when is true (the default value is false)
        - scrollTo: property to scroll to an page element using the given id
        - onClick: Call a function when the datetime link is clicked
        - state: App.js State to go when the datetime link is clicked
        - stateParams: The parameters needed to the state given on the last feature
        - tagEmpty: Default text to display when the datetime value is empty

        VERTICAL DIRECTIVE:
        - cols: property to change the number of bootstrap3 columns to be used by the component (default is 4)
        - label: component label
        - labelTooltip: property to add a text to be shown in tooltip when the cursor is over the label (the default value is none)
        - required: property to add a label required indicator, when the value is true (the default value is false)
        - iconVisible: property to hidde or show the icon, when the value is true shows the icon (the default vaue is true)
        - iconImage: property to receive an image path to display aside the input (default is none)
        - iconTooltip: property to add a text to be shown in tooltip when the cursor is over the icon (the default value is none)
        - iconScrollTo: property to scroll to an page element when the icon is clicked
        - iconClick: Call a function when the icon is clicked
        - iconState: App.js State to go when the icon is clicked
        - iconStateParams: The parameters needed to the state given on the last feature
        - xeId: Component Id (automatically set)

    Mandatory Attributes:
        - value

    Usage Examples:
        <m-ssb-vertical-value-datetime
            label="bwpkfmsc.bwpkfms10036"
            format="default.datetime.format"
            value="{{n.date}}"
            cols="3">
        </m-ssb-vertical-value-datetime>
**/

mSsbUi.directive("mSsbVerticalValueDatetime",
['mSsbVerticalService', 'mSsbValueDatetimeService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-value-datetime
                        xe-id="{{xeId}}"
                        value="` + (attrs.value ? attrs.value : '') + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-value-datetime>
            `;
            return svc.getVerticalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbVerticalValueDatetime' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: xe-button
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-value-button-directive> and <m-ssb-vertical-directive>,
                so it inherits their attributes.

        VALUE-BUTTON DIRECTIVE:
        - value: button text(i18n)
        - type: property to control the CSS classes that change the button visual (2 themes available: primary and secondary)
        - tooltip: property to add a text to be shown in tooltip when the cursor is over the button (the default value is none)
        - disable: if true don't let the user use the button (the default value is false)
        - scrollTo: property to scroll to an page element using the given id
        - onClick: Call a function when the button is clicked
        - state: App.js State to go when the button is clicked
        - stateParams: The parameters needed to the state given on the last feature

        VERTICAL DIRECTIVE:
        - cols: property to change the number of bootstrap3 columns to be used by the component (default is 4)
        - label: component label
        - labelTooltip: property to add a text to be shown in tooltip when the cursor is over the label (the default value is none)
        - required: property to add a label required indicator, when the value is true (the default value is false)
        - iconVisible: property to hidde or show the icon, when the value is true shows the icon (the default vaue is true)
        - iconImage: property to receive an image path to display aside the input (default is none)
        - iconTooltip: property to add a text to be shown in tooltip when the cursor is over the icon (the default value is none)
        - iconScrollTo: property to scroll to an page element when the icon is clicked
        - iconClick: Call a function when the icon is clicked
        - iconState: App.js State to go when the icon is clicked
        - iconStateParams: The parameters needed to the state given on the last feature
        - xeId: Component Id (automatically set)

    Usage Examples:
        <m-ssb-vertical-value-button
            on-click="call(row)"
            value="bwaklibs.bwaklib10005">
        </m-ssb-horizontal-value-button>
**/

mSsbUi.directive("mSsbVerticalValueButton",
['mSsbVerticalService', 'mSsbValueButtonService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-value-button
                        xe-id="{{xeId}}"
                        value="` + (attrs.value ? attrs.value : '') + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-value-button>
            `;
            return svc.getVerticalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbVerticalValueButton' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: xe-text-box
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-edit-text-directive> and <m-ssb-vertical-directive>,
                so it inherits their attributes.

        EDIT-TEXT DIRECTIVE:
        - value: text value
        - minLength: minimum number of characters that can be written in the text area (numeric)
        - maxLength: maximum number of characters that can be written in the text area (numeric)
        - readOnly: whether component is disabled or not (true or false)
        - required: when required the page will only render if the checkbox is checked (true and default false)
        - onValueChange: it allows the developer to add a function that is triggered when something change in the component

        VERTICAL DIRECTIVE:
        - cols: property to change the number of bootstrap3 columns to be used by the component (default is 4)
        - label: component label
        - labelTooltip: property to add a text to be shown in tooltip when the cursor is over the label (the default value is none)
        - required: property to add a label required indicator, when the value is true (the default value is false)
        - iconVisible: property to hidde or show the icon, when the value is true shows the icon (the default vaue is true)
        - iconImage: property to receive an image path to display aside the input (default is none)
        - iconTooltip: property to add a text to be shown in tooltip when the cursor is over the icon (the default value is none)
        - iconScrollTo: property to scroll to an page element when the icon is clicked
        - iconClick: Call a function when the icon is clicked
        - iconState: App.js State to go when the icon is clicked
        - iconStateParams: The parameters needed to the state given on the last feature
        - xeId: Component Id (automatically set)

    Mandatory Attributes:
        - value

    Usage Examples:
        <m-ssb-vertical-edit-text
            cols="3"
            label="bwdksrch.bwdksrc10116"
            value="row.value"
            max-length="row.maxLength">
        </m-ssb-vertical-edit-text>
 **/

mSsbUi.directive("mSsbVerticalEditText",
['mSsbVerticalService', 'mSsbEditTextService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-edit-text
                        xe-id="{{xeId}}"
                        xe-label ="` + attrs.xeLabel + `"
                        value="` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-edit-text>
            `;
            return svc.getVerticalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbVerticalEditText' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: xe-text-box
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-edit-numeric-directive> and <m-ssb-vertical-directive>,
                so it inherits their attributes.

        EDIT-NUMERIC DIRECTIVE:
        - value: numeric value
        - min: Minimum number accepted by the component
        - max: Maximum number accepted by the component
        - integerLength: Maximum number of integer digits
        - decimalLength: Maximum number of decimal digits (default is 0, maximum is 20)
        - readOnly: if true don't let the user change the numeric value (the default value is false)
        - required: if true the field is required and the user must change the numeric field(the default value is false)
        - onValueChange: Call a function when the numeric value change

        VERTICAL DIRECTIVE:
        - cols: property to change the number of bootstrap3 columns to be used by the component (default is 4)
        - label: component label
        - labelTooltip: property to add a text to be shown in tooltip when the cursor is over the label (the default value is none)
        - required: property to add a label required indicator, when the value is true (the default value is false)
        - iconVisible: property to hidde or show the icon, when the value is true shows the icon (the default vaue is true)
        - iconImage: property to receive an image path to display aside the input (default is none)
        - iconTooltip: property to add a text to be shown in tooltip when the cursor is over the icon (the default value is none)
        - iconScrollTo: property to scroll to an page element when the icon is clicked
        - iconClick: Call a function when the icon is clicked
        - iconState: App.js State to go when the icon is clicked
        - iconStateParams: The parameters needed to the state given on the last feature
        - xeId: Component Id (automatically set)

    Mandatory Attributes:
        - value

    Usage Examples:
        <m-ssb-vertical-edit-numeric
            cols="3"
            label="bwdksrch.bwdksrc10115"
            max="row.maxLength"
            min="row.minLength"
            integer-length="row.integerLength"
            decimal-length="row.decimalLength"
            value="row.value">
        </m-ssb-vertical-edit-numeric>
**/

mSsbUi.directive("mSsbVerticalEditNumeric",
['mSsbVerticalService', 'mSsbEditNumericService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-edit-numeric
                        xe-id="{{xeId}}"
                        value="` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-edit-numeric>
            `;
            return svc.getVerticalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbVerticalEditNumeric' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: input date-picker
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-edit-date-directive> and <m-ssb-vertical-directive>,
                so it inherits their attributes.

        EDIT-DATE DIRECTIVE:
        - value: Date with the format ISO 8601 string
        - readOnly: if true don't let the user change the date value (the default value is false)
        - required: if true the field is required and the user must enter a new date (the default value is false)
        - onValueChange: Call a function when the date field change

        VERTICAL DIRECTIVE:
        - cols: property to change the number of bootstrap3 columns to be used by the component (default is 4)
        - label: component label
        - labelTooltip: property to add a text to be shown in tooltip when the cursor is over the label (the default value is none)
        - required: property to add a label required indicator, when the value is true (the default value is false)
        - iconVisible: property to hidde or show the icon, when the value is true shows the icon (the default vaue is true)
        - iconImage: property to receive an image path to display aside the input (default is none)
        - iconTooltip: property to add a text to be shown in tooltip when the cursor is over the icon (the default value is none)
        - iconScrollTo: property to scroll to an page element when the icon is clicked
        - iconClick: Call a function when the icon is clicked
        - iconState: App.js State to go when the icon is clicked
        - iconStateParams: The parameters needed to the state given on the last feature
        - xeId: Component Id (automatically set)

    Mandatory Attributes:
        - value

    Usage Examples:
        <m-ssb-vertical-edit-date
            label="{{'messageProp.key'|i18n}}"
            value="row.date"
            required="true">
        </m-ssb-vertical-edit-date>
**/

mSsbUi.directive("mSsbVerticalEditDate",
['mSsbVerticalService', 'mSsbEditDateService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-edit-date
                        xe-id="{{xeId}}"
                        value="` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-edit-date>
            `;
            return svc.getVerticalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbVerticalEditDate' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: xe-checkbox
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-edit-checkbox-directive> and <m-ssb-vertical-directive>,
                so it inherits their attributes.

        EDIT-CHECKBOX DIRECTIVE:
        - value: current check-box value
        - value-label: component label
        - checkedValue: the default value to pick the checkbox is true, but can be other value for example: 'A'
        - uncheckedValue: the default value to not pick the checkbox is false, but can be other value for example: 'B'
        - readOnly: if true don't let the user change the checkbox value (the default value is false)
        - required: if true the field is required and the user must change the checkbox value (the default value is false)
        - onValueChange: Call a function when the checkbox value change
        - labelHidden: property to control the CSS classes that hide label

        VERTICAL DIRECTIVE:
        - cols: property to change the number of bootstrap3 columns to be used by the component (default is 4)
        - label: component label
        - labelTooltip: property to add a text to be shown in tooltip when the cursor is over the label (the default value is none)
        - required: property to add a label required indicator, when the value is true (the default value is false)
        - iconVisible: property to hidde or show the icon, when the value is true shows the icon (the default vaue is true)
        - iconImage: property to receive an image path to display aside the input (default is none)
        - iconTooltip: property to add a text to be shown in tooltip when the cursor is over the icon (the default value is none)
        - iconScrollTo: property to scroll to an page element when the icon is clicked
        - iconClick: Call a function when the icon is clicked
        - iconState: App.js State to go when the icon is clicked
        - iconStateParams: The parameters needed to the state given on the last feature
        - xeId: Component Id (automatically set)

    Mandatory Attributes:
            - value

    Usage Examples:
        <m-ssb-vertical-edit-checkbox
            value-label="bwpkfsem.bwpkfse10056"
            label-hidden="true"
            cols="1"
            label='bwpkfsem.bwpkfse10056'
            value="row.value"
            on-value-change="call()">
        </m-ssb-vertical-edit-checkbox>

    NOTE:   -the checked value can be other values than true or false.
**/

mSsbUi.directive("mSsbVerticalEditCheckbox",
['mSsbVerticalService', 'mSsbEditCheckboxService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-edit-checkbox
                        xe-id="{{xeId}}"
                        value="` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-edit-checkbox>
            `;
            return svc.getVerticalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbVerticalEditCheckbox' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: xe-radio-button
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-edit-radiobox-directive> and <m-ssb-vertical-directive>,
                so it inherits their attributes.

        EDIT-RADIOBOX DIRECTIVE:
        - value: current choice selected
        - choices: shows all the choices available for the checkbox
        - choiceLabel: field within choice used for Label (default is 'label')
        - choiceValue: field within choice used for value  (default is 'value')
        - layout: use to change the layout from the radio box (default 'horizontal' orientation, but it can be change to 'vertival' orientation)
        - readOnly: whether component is disabled or not (true or false)
        - required: when required the page will only render if the checkbox is checked (true and default false)
        - onValueChange: it allows the developer to add a function that is triggered when something change in the component

        VERTICAL DIRECTIVE:
        - cols: property to change the number of bootstrap3 columns to be used by the component (default is 4)
        - label: component label
        - labelTooltip: property to add a text to be shown in tooltip when the cursor is over the label (the default value is none)
        - required: property to add a label required indicator, when the value is true (the default value is false)
        - iconVisible: property to hidde or show the icon, when the value is true shows the icon (the default vaue is true)
        - iconImage: property to receive an image path to display aside the input (default is none)
        - iconTooltip: property to add a text to be shown in tooltip when the cursor is over the icon (the default value is none)
        - iconScrollTo: property to scroll to an page element when the icon is clicked
        - iconClick: Call a function when the icon is clicked
        - iconState: App.js State to go when the icon is clicked
        - iconStateParams: The parameters needed to the state given on the last feature
        - xeId: Component Id (automatically set)

    Mandatory Attributes:
        - value
        - choices

    Usage Examples:
        <m-ssb-vertical-edit-radiobox
            label="bwdkpref.bwdkpre10039"
            choices="row.choices"
            value="row.value"
            layout="horizontal"
            cols="5">
        </m-ssb-vertical-edit-radiobox>
**/

mSsbUi.directive("mSsbVerticalEditRadiobox",
['mSsbVerticalService', 'mSsbEditRadioboxService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-edit-radiobox
                        xe-id="{{xeId}}"
                        value="` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-edit-radiobox>
            `;
            return svc.getVerticalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbVerticalEditRadiobox' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021-2024 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: xe-ui-select
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-edit-select-directive> and <m-ssb-vertical-directive>,
                so it inherits their attributes.

        EDIT-SELECT DIRECTIVE:
        - value: Selected choice(s) value(s)
                 WARN: do not bind directly to a $scope property, bind to a $scope object property.
        - choices: shows all the choices available for the checkbox
        - choiceLabel: field within choice used for Label (default is 'label')
        - choiceValue: field within choice used for value  (default is 'value')
        - multi: whether multiple choices can be selected (true or default false)
        - allowClear: allows the user to clear all the entries or not (true or default false)
        - layout: use to change the layout from the radio box (default 'horizontal' orientation, but it can be change to 'vertival' orientation)
        - readOnly: whether component is disabled or not (true or false)
        - required: when required the page will only render if the checkbox is checked (true and default false)
        - onValueChange: it allows the developer to add a function that is triggered when something change in the component
        - appendToBody: has to be use when inside a xe-table-grid (true or default false)

        VERTICAL DIRECTIVE:
        - cols: property to change the number of bootstrap3 columns to be used by the component (default is 4)
        - label: component label
        - labelTooltip: property to add a text to be shown in tooltip when the cursor is over the label (the default value is none)
        - required: property to add a label required indicator, when the value is true (the default value is false)
        - iconVisible: property to hidde or show the icon, when the value is true shows the icon (the default vaue is true)
        - iconImage: property to receive an image path to display aside the input (default is none)
        - iconTooltip: property to add a text to be shown in tooltip when the cursor is over the icon (the default value is none)
        - iconScrollTo: property to scroll to an page element when the icon is clicked
        - iconClick: Call a function when the icon is clicked
        - iconState: App.js State to go when the icon is clicked
        - iconStateParams: The parameters needed to the state given on the last feature
        - xeId: Component Id (automatically set)
        - xeLabel: Component label text bind with input (i18n)

    Mandatory Attributes:
        - value
        - choices

    Usage Examples:
        <m-ssb-vertical-edit-select
            label="row.label"
            choices="row.choices"
            value="row.value"
            cols="3">
        </m-ssb-vertical-edit-select>
**/

mSsbUi.directive("mSsbVerticalEditSelect",
['mSsbVerticalService', 'mSsbEditSelectService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-edit-select
                        xe-id="{{xeId}}"
                        xe-label ="` + attrs.xeLabel + `"
                        value="` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-edit-select>
            `;
            return svc.getVerticalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbVerticalEditSelect' + (nextId++);
        }],
    }
}]);

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    Component type: Wrapper to platform component
    Platform Component(s) used: xe-text-box
    Confluence Link: https://confluence.ellucian.com/display/banner/Morphis+Components+-+m-ssb-ui/

    Attributes: This component was made using directives <m-ssb-edit-password-directive> and <m-ssb-vertical-directive>,
                so it inherits their attributes.

        EDIT-PASSWORD DIRECTIVE:
        - value: numeric value
        - min: Minimum number accepted by the component
        - max: Maximum number accepted by the component
        - integerLength: Maximum number of integer digits
        - decimalLength: Maximum number of decimal digits (default is 0, maximum is 20)
        - readOnly: if true don't let the user change the numeric value (the default value is false)
        - required: if true the field is required and the user must change the numeric field(the default value is false)
        - onValueChange: Call a function when the numeric value change

        VERTICAL DIRECTIVE:
        - cols: property to change the number of bootstrap3 columns to be used by the component (default is 4)
        - label: component label
        - labelTooltip: property to add a text to be shown in tooltip when the cursor is over the label (the default value is none)
        - required: property to add a label required indicator, when the value is true (the default value is false)
        - iconVisible: property to hidde or show the icon, when the value is true shows the icon (the default vaue is true)
        - iconImage: property to receive an image path to display aside the input (default is none)
        - iconTooltip: property to add a text to be shown in tooltip when the cursor is over the icon (the default value is none)
        - iconScrollTo: property to scroll to an page element when the icon is clicked
        - iconClick: Call a function when the icon is clicked
        - iconState: App.js State to go when the icon is clicked
        - iconStateParams: The parameters needed to the state given on the last feature
        - xeId: Component Id (automatically set)

    Mandatory Attributes:
        - value

    Usage Examples:
        <m-ssb-vertical-edit-password
            label="bwdksrch.bwdksrc10115"
            max-length="row.maxLength"
            min-length="row.minLength"
            value="row.passValue">
        </m-ssb-vertical-edit-numeric>
**/

mSsbUi.directive("mSsbVerticalEditPassword",
['mSsbVerticalService', 'mSsbEditPasswordService',
function (svc, ctrlSvc) {
    var nextId = 1;
    return {
        scope: true,
        template: function(element, attrs) {
            var controlTemplate = `
                <m-ssb-edit-password
                        xe-id="{{xeId}}"
                        value="` + attrs.value + `"
                        ` + ctrlSvc.getAttributeTemplate(attrs) + `
                ></m-ssb-edit-password>
            `;
            return svc.getVerticalTemplate(attrs, controlTemplate);
        },
        controller: ['$scope', function ($scope) {
            $scope.xeId = 'mSsbVerticalEditPassword' + (nextId++);
        }],
    }
}]);
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
    This component was developed by Ellucian to correct a specific performance issue (phase1).
    Employee forms that used the simple-table-directive:
        -FlacApp- Employee Summary
        -FlacApp- Organization Summary
**/

(function () {
    'use strict';
    angular.module('xeSimpleTableModule', ['m-utils'])
        .run(["$templateCache", function ($templateCache) {
            $templateCache.put("templates/simpleDataTable.html",
            "<div id=\"{{tableId}}\" class=\"simple-data-table\" role=\"grid\" aria-labelledby=\"{{tableId}}\">\n" +
                "    <table class=\"xe-table xe-table-type-box xe-table-xs\" role=\"presentation\">\n" +
                "        <caption id=\"gridCaption-{{tableId}}\" class=\"sr-only\"><span class=\"caption-container font-semibold\"  ng-bind=\"::caption\"></span></caption>\n" +
                "        <thead role=\"rowgroup\">\n" +
                "        <tr role=\"row\">\n" +
                "            <th class=\"header-org {{::heading.name}}\" ng-repeat=\"heading in ::header\" data-name=\"{{::heading.name}}\" role=\"columnheader\" id=\"dataTableHead-{{heading.name}}\" class=\"{{::heading.className}}\">\n" +
                "                <div ng-if=\"::heading.name != 'crnSession'\" class=\"data\" title=\"{{heading.label}}\">\n" +
                "                    <span class='header-org' aria-hidden=\"false\" ng-bind=\"::heading.title\"></span>\n" +
                "                </div>" +
                "                <div ng-if=\"::heading.name == 'crnSession'\" class=\"data\" title=\"{{::'flac.tooltip.crn' | i18n}}\">\n" +
                "                    <span class='header-org' aria-hidden=\"false\" ng-bind=\"::heading.title\"></span>\n" +
                "                </div>\n" +
                "            </th>" +
                "        </tr>\n" +
                "        </thead>\n" +
                "        <tbody role=\"rowgroup\">\n" +
                "        <tr ng-repeat=\"row in content\" role=\"row\">\n" +
                "            <td ng-repeat=\"heading in ::header\" data-name=\"{{::heading.name}}\" data-title=\"{{::heading.title}}\" class=\"{{::heading.className}}\" role=\"gridcell\" headers=\"dataTableHead-{{heading.name}}\">\n" +
                "                <div ng-if=\"::page == 'orgSummary'\">\n" +
                "                    <div ng-if=\"::heading.type == 'name'\ && row[heading.name].destPage && row[heading.name].destPage != ''\">\n" +
                "                        <a ng-bind=\"::heading.key ? row[heading.name][heading.key] : row[heading.name]\" href=\"javascript:void(0);\" ng-click=\"changeState(row[heading.name].destPage, row[heading.name].urlParams) \"></a>\n" +
                "                    </div>\n" +
                "                    <div ng-if=\"::heading.type == 'name' && row[heading.name].destPage == ''\">\n" +
                "                        <div ng-bind=\"::heading.key ? row[heading.name][heading.key] : row[heading.name]\" ></div>\n" +
                "                    </div>\n" +
                "                    \n" +
                "                    <div data-ng-if=\"row.name !=null && row.pgRestartInd== 'true'\">\n" +
                "                        <m-ssb-horizontal-edit-checkbox\n" +
                "                                xe-id=\"chk_{{$index}}\" value-label=\"{{'bwpkfsor.bwpkfso10053'}}\" label-hidden=\"true\" ng-if=\"::heading.type == 'checkbox'\" value=\"row.isChecked\"\n" +
                "                                on-value-change=\"checkPidm(row.isChecked,row.name.urlParams)\"></m-ssb-horizontal-edit-checkbox>\n" +
                "                    </div>\n" +
                "                </div>\n" +
                "                <div ng-bind=\"::heading.key ? row[heading.name][heading.key] : row[heading.name]\" ng-if=\"::!heading.type\"></div>\n" +
                "                <div ng-bind=\"::heading.key ? row[heading.name][heading.key] : row[heading.name]\" ng-if=\"::heading.type == 'tooltip'\" title=\"{{::row[heading.name] == 'NIST' ? ('flac.tooltip.nist' | i18n) : ''}}\"></div>\n" +
                "                <div ng-if=\"::heading.type == 'number'\" ng-bind=\"::heading.key ? (row[heading.name][heading.key] | number:2) : (row[heading.name] | number:2)\"></div>\n" +
                "                <m-ssb-icon\n" +
                "                        ng-if=\"::heading.type == 'icon' && row.lstrLinks1\" state=\"pDispCommentsAdmin\"\n" +
                "                        state-params=\"::row.lstrLinks1.urlParams\" tooltip=\"flac.tooltip.note\"\n" +
                "                        image=\"flac_icons/web-comments.svg\"></m-ssb-icon>\n" +
                "                <m-ssb-icon state=\"compensationSummary\"\n" +
                "                            ng-if=\"::heading.type == 'icon' && row.lstrLinks3\" state-params=\"::row.lstrLinks3.urlParams\"\n" +
                "                            tooltip=\"flac.tooltip.acknowledgement\" image=\"flac_icons/web-clipBoard.svg\"></m-ssb-icon>\n" +
                "                <m-ssb-icon state=\"pDisperrors\"\n" +
                "                            ng-if=\"::heading.type == 'icon' && row.lstrLinks2\" state-params=\"::row.lstrLinks2.urlParams\"\n" +
                "                            tooltip=\"flac.tooltip.errors\" image=\"flac_icons/web-erros.svg\"></m-ssb-icon>\n" +
                "                <m-ssb-icon state=\"employeeStatusSummary\"\n" +
                "                            ng-if=\"::heading.type == 'icon' && row.lstrLinks4\" state-params=\"::row.lstrLinks4.urlParams\"\n" +
                "                            tooltip=\"flac.tooltip.locks\" image=\"flac_icons/web-lock.svg\"></m-ssb-icon>\n" +
                "                <div ng-if=\"::heading.type == 'link' && row[heading.name][heading.urlParam]\">\n" +
                "                    <a ng-bind=\"::heading.key ? row[heading.name][heading.key] : row[heading.name]\"  href=\"javascript:void(0);\" ui-sref=\"crseCalculationDetl(row[heading.name].urlParams)\"></a>\n" +
                "                </div>\n" +
                "                <div ng-if=\"::heading.type == 'link' && !row[heading.name][heading.urlParam]\" ng-bind=\"::heading.key ? row[heading.name][heading.key] : row[heading.name]\">\n" +
                "                    <div ng-bind=\"::heading.key ? row[heading.name][heading.key] : row[heading.name]\" ></div>\n" +
                "                </div>\n" +
                "                <div ng-if=\"::(heading.type == 'icon' || heading.type == 'checkbox') && (row.pgRestartInd !='true')\" ng-bind=\"('simple.table.directive.noDataMessage' | i18n)\"></div></n>"+
                "                <div ng-if=\"::(heading.type != 'icon' && heading.type !='checkbox') && row[heading.name]==null\" ng-bind=\"('simple.table.directive.noDataMessage' | i18n)\"></div></n>"+
                "            </td>\n" +
                "        </tr>\n" +
                "        </tbody>\n" +
                "    </table>\n" +
                "</div>");
        }])
        .directive('xeSimpleTableGrid', [function () {
            return {
                restrict: 'E',
                transclude: true,
                replace: true,
                scope: {
                    tableId: '@',
                    caption: '@?',
                    header: '=?',
                    page: '@?',
                    content: '=',
                    showTotalsIf: '=?', // Whether to display 1st table totals row (default is true if any total or total-label is defined)
                    showTotals2If: '=?',// Whether to display 2nd table totals row (default is true if any total2 or total2-label is defined)'
                },
                templateUrl: function () {
                    return 'templates/simpleDataTable.html';
                },
                controller: ['$scope', '$element', '$compile','$state', function ($scope, $element, $compile, $state) {
                    let hasTotals = $scope.header.some(c => c.totalLabel || c.total);
                    let hasTotals2 = $scope.header.some(c => c.total2Label || c.total2);
                    if (hasTotals || hasTotals2) {
                        let tfoot = '<tfoot class="total-col-group" role="rowgroup">';

                        if (hasTotals && !_.isEmpty($scope.showTotalsIf)) {
                            tfoot += '<tr role="row"';
                            tfoot += $element.attr('show-totals-if') ? 'ng-if="showTotalsIf">' : '>';
                            for (let idx = 0; idx < $scope.header.length; idx++) {
                                if ($scope.header[idx].totalLabel && !_.isEmpty($scope.showTotalsIf)) {
                                    tfoot += '<td class="total-col" role="gridcell"><span class="total-col-label" aria-hidden="true" ng-bind="showTotalsIf.calculatedCompensationTotal"></span></td>';
                                    tfoot += '<td class="number-col total-col" role="gridcell"><div><label class="sr-only" ng-bind="showTotalsIf.calculatedCompensationTotal+\' \'"></label><span ng-bind="showTotalsIf.calculatedCompensationTotalValue | number:2"></span></div></td>';
                                } else if (!$scope.header[idx].skipColumnForTotals) {
                                    tfoot += '<td class="hidden-xs" role="gridcell"></td>';
                                }
                            }
                            tfoot += '</tr>';
                        }

                        if (hasTotals && !_.isEmpty($scope.showTotals2If)) {
                            tfoot += '<tr role="row"';
                            tfoot += $element.attr('show-totals-if') ? 'ng-if="showTotals2If">' : '>';
                            for (let idx = 0; idx < $scope.header.length; idx++) {
                                if ($scope.header[idx].totalLabel && !_.isEmpty($scope.showTotals2If)) {
                                    tfoot += '<td class="total-col" role="gridcell"><span class="total-col-label" aria-hidden="true" ng-bind="showTotals2If.jobAssignmentCompensationTotal"></span></td>';
                                    tfoot += '<td class="number-col total-col" role="gridcell"><div><label class="sr-only" ng-bind="showTotals2If.jobAssignmentCompensationTotal+\' \'">></label><span ng-bind="showTotals2If.jobAssignmentCompensationTotalValue | number:2"></span></div></td>';
                                } else if (!$scope.header[idx].skipColumnForTotals) {
                                    tfoot += '<td class="hidden-xs" role="gridcell"></td>';
                                }
                            }
                            tfoot += '</tr>';
                        }

                        tfoot += '</tfoot>';
                        tfoot = $compile(tfoot)($scope);
                        $element.find('.xe-table tbody').after(tfoot);


                    }

                    $scope.getTotalColspan = function(idx) {
                        let colspan = 1;
                        for (idx-=1; idx>=0; idx--) {
                            if ($scope.model.header[idx].options.visible) {
                                if (columns[idx].totalLabel || columns[idx].total) {
                                    break;
                                }
                                colspan++;
                            }
                        }
                        return colspan;
                    }

                    $scope.changeState = function(uiState, stateParameters){

                        $state.go(uiState,stateParameters);
                    }

                    $scope.checkPidm = function(checkBox,pPidm){
                        $scope.$parent.checkPidm(checkBox,pPidm);
                    }
                }]
            };
        }])
}());
var process = process || {env: {NODE_ENV: "development"}};
//Common Modules
//= require commonComponents-mf.js

//Module
//= require m-ssb-ui/m-ssb-ui.js

//Extensions
//= require m-ssb-ui/extensions/xe-ui-extensions.js

//Filters
//= require m-ssb-ui/filters/i18n-filter.js
//= require m-ssb-ui/filters/e-empty-filter.js

//Services
//= require m-ssb-ui/services/commonUtil-service.js

//Directives
//= require m-ssb-ui/directives/m-ssb-header-directive.js
//= require m-ssb-ui/directives/m-ssb-infobar-directive.js
//= require m-ssb-ui/directives/m-ssb-links-directive.js
//= require m-ssb-ui/directives/m-ssb-modal-directive.js
//= require m-ssb-ui/directives/m-ssb-panel-directive.js
//= require m-ssb-ui/directives/m-ssb-panel-collapsible-directive.js
//= require m-ssb-ui/directives/m-ssb-table-directive.js
//= require m-ssb-ui/directives/m-ssb-pagination-directive.js
//= require m-ssb-ui/directives/m-ssb-label-directive.js
//= require m-ssb-ui/directives/m-ssb-icon-directive.js
//= require m-ssb-ui/directives/m-ssb-value-text-directive.js
//= require m-ssb-ui/directives/m-ssb-value-html-directive.js
//= require m-ssb-ui/directives/m-ssb-value-numeric-directive.js
//= require m-ssb-ui/directives/m-ssb-value-date-directive.js
//= require m-ssb-ui/directives/m-ssb-value-datetime-directive.js
//= require m-ssb-ui/directives/m-ssb-value-button-directive.js
//= require m-ssb-ui/directives/m-ssb-edit-text-directive.js
//= require m-ssb-ui/directives/m-ssb-edit-text-area-directive.js
//= require m-ssb-ui/directives/m-ssb-edit-numeric-directive.js
//= require m-ssb-ui/directives/m-ssb-edit-date-directive.js
//= require m-ssb-ui/directives/m-ssb-edit-checkbox-directive.js
//= require m-ssb-ui/directives/m-ssb-edit-radiobox-directive.js
//= require m-ssb-ui/directives/m-ssb-edit-select-directive.js
//= require m-ssb-ui/directives/m-ssb-edit-password-directive.js
//= require m-ssb-ui/directives/m-ssb-horizontal-directive.js
//= require m-ssb-ui/directives/m-ssb-horizontal-value-text-directive.js
//= require m-ssb-ui/directives/m-ssb-horizontal-value-html-directive.js
//= require m-ssb-ui/directives/m-ssb-horizontal-value-numeric-directive.js
//= require m-ssb-ui/directives/m-ssb-horizontal-value-date-directive.js
//= require m-ssb-ui/directives/m-ssb-horizontal-value-datetime-directive.js
//= require m-ssb-ui/directives/m-ssb-horizontal-value-button-directive.js
//= require m-ssb-ui/directives/m-ssb-horizontal-edit-text-directive.js
//= require m-ssb-ui/directives/m-ssb-horizontal-edit-text-area-directive.js
//= require m-ssb-ui/directives/m-ssb-horizontal-edit-numeric-directive.js
//= require m-ssb-ui/directives/m-ssb-horizontal-edit-date-directive.js
//= require m-ssb-ui/directives/m-ssb-horizontal-edit-checkbox-directive.js
//= require m-ssb-ui/directives/m-ssb-horizontal-edit-radiobox-directive.js
//= require m-ssb-ui/directives/m-ssb-horizontal-edit-select-directive.js
//= require m-ssb-ui/directives/m-ssb-horizontal-edit-password-directive.js
//= require m-ssb-ui/directives/m-ssb-vertical-directive.js
//= require m-ssb-ui/directives/m-ssb-vertical-value-text-directive.js
//= require m-ssb-ui/directives/m-ssb-vertical-value-html-directive.js
//= require m-ssb-ui/directives/m-ssb-vertical-value-numeric-directive.js
//= require m-ssb-ui/directives/m-ssb-vertical-value-date-directive.js
//= require m-ssb-ui/directives/m-ssb-vertical-value-datetime-directive.js
//= require m-ssb-ui/directives/m-ssb-vertical-value-button-directive.js
//= require m-ssb-ui/directives/m-ssb-vertical-edit-text-directive.js
//= require m-ssb-ui/directives/m-ssb-vertical-edit-numeric-directive.js
//= require m-ssb-ui/directives/m-ssb-vertical-edit-date-directive.js
//= require m-ssb-ui/directives/m-ssb-vertical-edit-checkbox-directive.js
//= require m-ssb-ui/directives/m-ssb-vertical-edit-radiobox-directive.js
//= require m-ssb-ui/directives/m-ssb-vertical-edit-select-directive.js
//= require m-ssb-ui/directives/m-ssb-vertical-edit-password-directive.js
//= require m-ssb-ui/directives/simple-table-directive.js
var process = process || {env: {NODE_ENV: "development"}};
//= require angular/angular.min.js
//= require angular/load-angular-locale.js
//= require angular/angular-resource.min.js
//= require angular/angular-route.min.js
//= require angular/angular-sanitize.min.js
//= require angular/angular-animate.min.js
//= require angular/angular-ui-router.min.js
//= require angular/angular-messages.min.js
//= require angular/angular-translate.min.js
//= require angular/ui-bootstrap-tpls.min.js
//= require angular/lrInfiniteScroll.js
//= require moment.js
//= require angular/angular-common.js
//= require angular/angular-dateparser.min.js
//= require angular-components/locale-numeric-input/custom-number-input.js
//= require angular-components/locale-numeric-input/directives/currency-directive.js
//= require angular-components/locale-numeric-input/directives/decimal-directive.js
//= require angular-components/locale-numeric-input/directives/percent-directive.js
//= require angular-components/locale-numeric-input/directives/only-number.js
//= require angular-components/locale-numeric-input/services/readonly-service.js
//= require angular-components/date-picker/directives/date-picker-directive.js
//= require angular-components/i18n/i18n-filter.js
//= require angular/hotkeys.js
//= require shortcuts/bannershortcuts.js
//= require json2.js
//= require modules/m-ssb-ui-mf.js


var process = process || {env: {NODE_ENV: "development"}};
/*
 AngularJS
 (c) 2010-2020 Google LLC. http://angularjs.org
 License: MIT
 XLTS for AngularJS v1.9.6
 (c) 2022 XLTS.dev All Rights Reserved. https://xlts.dev/angularjs
 License: Obtain a commercial license from XLTS.dev before using this software.
*/
(function(t,l){'use strict';var c="BUTTON A INPUT TEXTAREA SELECT DETAILS SUMMARY".split(" "),m=function(a,e){if(-1!==e.indexOf(a[0].nodeName))return!0};l.module("ngAria",["ng"]).info({angularVersion:"1.9.6"}).provider("$aria",function(){function a(a,c,n,g){return function(d,f,b){if(!b.hasOwnProperty("ngAriaDisable")){var p=b.$normalize(c);!e[p]||m(f,n)||b[p]||d.$watch(b[a],function(b){b=g?!b:!!b;f.attr(c,b)})}}}var e={ariaHidden:!0,ariaChecked:!0,ariaReadonly:!0,ariaDisabled:!0,ariaRequired:!0,ariaInvalid:!0,
ariaValue:!0,tabindex:!0,bindKeydown:!0,bindRoleForClick:!0};this.config=function(a){e=l.extend(e,a)};this.$get=function(){return{config:function(a){return e[a]},$$watchExpr:a}}}).directive("ngShow",["$aria",function(a){return a.$$watchExpr("ngShow","aria-hidden",[],!0)}]).directive("ngHide",["$aria",function(a){return a.$$watchExpr("ngHide","aria-hidden",[],!1)}]).directive("ngValue",["$aria",function(a){return a.$$watchExpr("ngValue","aria-checked",c,!1)}]).directive("ngChecked",["$aria",function(a){return a.$$watchExpr("ngChecked",
"aria-checked",c,!1)}]).directive("ngReadonly",["$aria",function(a){return a.$$watchExpr("ngReadonly","aria-readonly",c,!1)}]).directive("ngRequired",["$aria",function(a){return a.$$watchExpr("ngRequired","aria-required",c,!1)}]).directive("ngModel",["$aria",function(a){function e(e,g,d,f){return a.config(g)&&!d.attr(e)&&(f||!m(d,c))&&("hidden"!==d.attr("type")||"INPUT"!==d[0].nodeName)}function k(a,e){return!e.attr("role")&&e.attr("type")===a&&!m(e,c)}function h(a,e){var d=a.type,f=a.role;return"checkbox"===
(d||f)||"menuitemcheckbox"===f?"checkbox":"radio"===(d||f)||"menuitemradio"===f?"radio":"range"===d||"progressbar"===f||"slider"===f?"range":""}return{restrict:"A",require:"ngModel",priority:200,compile:function(c,g){if(!g.hasOwnProperty("ngAriaDisable")){var d=h(g,c);return{post:function(f,b,c,g){function h(){return g.$modelValue}function m(a){b.attr("aria-checked",c.value==g.$viewValue)}function n(){b.attr("aria-checked",!g.$isEmpty(g.$viewValue))}var l=e("tabindex","tabindex",b,!1);switch(d){case "radio":case "checkbox":k(d,
b)&&b.attr("role",d);e("aria-checked","ariaChecked",b,!1)&&f.$watch(h,"radio"===d?m:n);l&&b.attr("tabindex",0);break;case "range":k(d,b)&&b.attr("role","slider");if(a.config("ariaValue")){var q=!b.attr("aria-valuemin")&&(c.hasOwnProperty("min")||c.hasOwnProperty("ngMin")),r=!b.attr("aria-valuemax")&&(c.hasOwnProperty("max")||c.hasOwnProperty("ngMax")),s=!b.attr("aria-valuenow");q&&c.$observe("min",function(a){b.attr("aria-valuemin",a)});r&&c.$observe("max",function(a){b.attr("aria-valuemax",a)});
s&&f.$watch(h,function(a){b.attr("aria-valuenow",a)})}l&&b.attr("tabindex",0)}!c.hasOwnProperty("ngRequired")&&g.$validators.required&&e("aria-required","ariaRequired",b,!1)&&c.$observe("required",function(){b.attr("aria-required",!!c.required)});e("aria-invalid","ariaInvalid",b,!0)&&f.$watch(function(){return g.$invalid},function(a){b.attr("aria-invalid",!!a)})}}}}}}]).directive("ngDisabled",["$aria",function(a){return a.$$watchExpr("ngDisabled","aria-disabled",c,!1)}]).directive("ngMessages",function(){return{restrict:"A",
require:"?ngMessages",link:function(a,c,k,h){k.hasOwnProperty("ngAriaDisable")||c.attr("aria-live")||c.attr("aria-live","assertive")}}}).directive("ngClick",["$aria","$parse",function(a,e){return{restrict:"A",compile:function(k,h){if(!h.hasOwnProperty("ngAriaDisable")){var l=e(h.ngClick);return function(e,d,f){if(!m(d,c)&&(a.config("bindRoleForClick")&&!d.attr("role")&&d.attr("role","button"),a.config("tabindex")&&!d.attr("tabindex")&&d.attr("tabindex",0),a.config("bindKeydown")&&!f.ngKeydown&&!f.ngKeypress&&
!f.ngKeyup))d.on("keydown",function(a){function d(){l(e,{$event:a})}var f=a.which||a.keyCode;if(13===f||32===f)-1!==c.indexOf(a.target.nodeName)||a.target.isContentEditable||a.preventDefault(),e.$apply(d)})}}}}}]).directive("ngDblclick",["$aria",function(a){return function(e,k,h){h.hasOwnProperty("ngAriaDisable")||!a.config("tabindex")||k.attr("tabindex")||m(k,c)||k.attr("tabindex",0)}}])})(window,window.angular);
//# sourceMappingURL=angular-aria.min.js.map

var process = process || {env: {NODE_ENV: "development"}};
﻿/* http://keith-wood.name/calendars.html
   Calendars for jQuery v1.1.4.
   Written by Keith Wood (kbwood{at}iinet.com.au) August 2009.
   Dual licensed under the GPL (http://dev.jquery.com/browser/trunk/jquery/GPL-LICENSE.txt) and 
   MIT (http://dev.jquery.com/browser/trunk/jquery/MIT-LICENSE.txt) licenses. 
   Please attribute the author if you use it. */

(function($) { // Hide scope, no $ conflict

/* Calendars - generic date access and manipulation. */
function Calendars() {
	this.regional = {
		'': {invalidCalendar: 'Calendar {0} not found',
			invalidDate: 'Invalid {0} date',
			invalidMonth: 'Invalid {0} month',
			invalidYear: 'Invalid {0} year',
			differentCalendars: 'Cannot mix {0} and {1} dates'}
	};
	this.local = this.regional[''];
	this.calendars = {};
	this._localCals = {};
}

$.extend(Calendars.prototype, {

	/* Obtain a calendar implementation and localisation.
	   @param  name      (string) the name of the calendar,
	                     e.g. 'gregorian' (default), 'persian', 'islamic' (optional)
	   @param  language  (string) the language code to use for localisation
	                     (optional, default English = 'en')
	   @return  the calendar and localisation
	   @throws  error if calendar not found */
	instance: function(name, language) {
		name = (name || 'gregorian').toLowerCase();
		language = language || '';
		var cal = this._localCals[name + '-' + language];
		if (!cal && this.calendars[name]) {
			cal = new this.calendars[name](language);
			this._localCals[name + '-' + language] = cal;
		}
		if (!cal) {
			throw (this.local.invalidCalendar || this.regional[''].invalidCalendar).
				replace(/\{0\}/, name);
		}
		return cal;
	},

	/* Create a new date - for today if no other parameters given.
	   @param  year      (CDate) the date to copy or
	                     (number) the year for the date
	   @param  month     (number, optional) the month for the date
	   @param  day       (number, optional) the day for the date
	   @param  calendar  (*Calendar) the underlying calendar
	                     or (string) the name of the calendar (optional, default Gregorian)
	   @param  language  (string) the language to use for localisation (optional, default English)
	   @return  (CDate) the new date
	   @throws  error if an invalid date */
	newDate: function(year, month, day, calendar, language) {
		calendar = (year != null && year.year ? year.calendar() : (typeof calendar == 'string' ?
			this.instance(calendar, language) : calendar)) || this.instance();
		return calendar.newDate(year, month, day);
	}
});

/* Generic date, based on a particular calendar.
   @param  calendar  (*Calendar) the underlying calendar implementation
   @param  year      (number) the year for this date
   @param  month     (number) the month for this date
   @param  day       (number) the day for this date
   @return  (CDate) the date object
   @throws  error if an invalid date */
function CDate(calendar, year, month, day) {
	this._calendar = calendar;
	this._year = year;
	this._month = month;
	this._day = day;
	if (this._calendar._validateLevel == 0 &&
			!this._calendar.isValid(this._year, this._month, this._day)) {
		throw ($.calendars.local.invalidDate || $.calendars.regional[''].invalidDate).
			replace(/\{0\}/, this._calendar.local.name);
	}
}

/* Pad a numeric value with leading zeroes.
   @param  value   (number) the number to format
   @param  length  (number) the minimum length
   @return  (string) the formatted number */
function pad(value, length) {
	value = '' + value;
	return '000000'.substring(0, length - value.length) + value;
}

$.extend(CDate.prototype, {

	/* Create a new date.
	   @param  year   (CDate) the date to copy or
	                  (number) the year for the date (optional, default this date)
	   @param  month  (number) the month for the date (optional)
	   @param  day    (number) the day for the date (optional)
	   @return  (CDate) the new date
	   @throws  error if an invalid date */
	newDate: function(year, month, day) {
		return this._calendar.newDate((year == null ? this : year), month, day);
	},

	/* Set or retrieve the year for this date.
	   @param  year  (number) the year for the date (optional)
	   @return  (number) the date's year (if no parameter) or
	            (CDate) the updated date
	   @throws  error if an invalid date */
	year: function(year) {
		return (arguments.length == 0 ? this._year : this.set(year, 'y'));
	},

	/* Set or retrieve the month for this date.
	   @param  month  (number) the month for the date (optional)
	   @return  (number) the date's month (if no parameter) or
	            (CDate) the updated date
	   @throws  error if an invalid date */
	month: function(month) {
		return (arguments.length == 0 ? this._month : this.set(month, 'm'));
	},

	/* Set or retrieve the day for this date.
	   @param  day  (number) the day for the date (optional)
	   @return  (number) the date's day (if no parameter) or
	            (CDate) the updated date
	   @throws  error if an invalid date */
	day: function(day) {
		return (arguments.length == 0 ? this._day : this.set(day, 'd'));
	},

	/* Set new values for this date.
	   @param  year   (number) the year for the date
	   @param  month  (number) the month for the date
	   @param  day    (number) the day for the date
	   @return  (CDate) the updated date
	   @throws  error if an invalid date */
	date: function(year, month, day) {
		if (!this._calendar.isValid(year, month, day)) {
			throw ($.calendars.local.invalidDate || $.calendars.regional[''].invalidDate).
				replace(/\{0\}/, this._calendar.local.name);
		}
		this._year = year;
		this._month = month;
		this._day = day;
		return this;
	},

	/* Determine whether this date is in a leap year.
	   @return  (boolean) true if this is a leap year, false if not */
	leapYear: function() {
		return this._calendar.leapYear(this);
	},

	/* Retrieve the epoch designator for this date, e.g. BCE or CE.
	   @return  (string) the current epoch */
	epoch: function() {
		return this._calendar.epoch(this);
	},

	/* Format the year, if not a simple sequential number.
	   @return  (string) the formatted year */
	formatYear: function() {
		return this._calendar.formatYear(this);
	},

	/* Retrieve the month of the year for this date,
	   i.e. the month's position within a numbered year.
	   @return  (number) the month of the year: minMonth to months per year */
	monthOfYear: function() {
		return this._calendar.monthOfYear(this);
	},

	/* Retrieve the week of the year for this date.
	   @return  (number) the week of the year: 1 to weeks per year */
	weekOfYear: function() {
		return this._calendar.weekOfYear(this);
	},

	/* Retrieve the number of days in the year for this date.
	   @return  (number) the number of days in this year */
	daysInYear: function() {
		return this._calendar.daysInYear(this);
	},

	/* Retrieve the day of the year for this date.
	   @return  (number) the day of the year: 1 to days per year */
	dayOfYear: function() {
		return this._calendar.dayOfYear(this);
	},

	/* Retrieve the number of days in the month for this date.
	   @return  (number) the number of days */
	daysInMonth: function() {
		return this._calendar.daysInMonth(this);
	},

	/* Retrieve the day of the week for this date.
	   @return  (number) the day of the week: 0 to number of days - 1 */
	dayOfWeek: function() {
		return this._calendar.dayOfWeek(this);
	},

	/* Determine whether this date is a week day.
	   @return  (boolean) true if a week day, false if not */
	weekDay: function() {
		return this._calendar.weekDay(this);
	},

	/* Retrieve additional information about this date.
	   @return  (object) additional information - contents depends on calendar */
	extraInfo: function() {
		return this._calendar.extraInfo(this);
	},

	/* Add period(s) to a date.
	   @param  offset  (number) the number of periods to adjust by
	   @param  period  (string) one of 'y' for year, 'm' for month, 'w' for week, 'd' for day
	   @return  (CDate) the updated date */
	add: function(offset, period) {
		return this._calendar.add(this, offset, period);
	},

	/* Set a portion of the date.
	   @param  value   (number) the new value for the period
	   @param  period  (string) one of 'y' for year, 'm' for month, 'd' for day
	   @return  (CDate) the updated date
	   @throws  error if not a valid date */
	set: function(value, period) {
		return this._calendar.set(this, value, period);
	},

	/* Compare this date to another date.
	   @param  date  (CDate) the other date
	   @return  (number) -1 if this date is before the other date,
	            0 if they are equal, or +1 if this date is after the other date */
	compareTo: function(date) {
		if (this._calendar.name != date._calendar.name) {
			throw ($.calendars.local.differentCalendars || $.calendars.regional[''].differentCalendars).
				replace(/\{0\}/, this._calendar.local.name).replace(/\{1\}/, date._calendar.local.name);
		}
		var c = (this._year != date._year ? this._year - date._year :
			this._month != date._month ? this.monthOfYear() - date.monthOfYear() :
			this._day - date._day);
		return (c == 0 ? 0 : (c < 0 ? -1 : +1));
	},

	/* Retrieve the calendar backing this date.
	   @return  (*Calendar) the calendar implementation */
	calendar: function() {
		return this._calendar;
	},

	/* Retrieve the Julian date equivalent for this date,
	   i.e. days since January 1, 4713 BCE Greenwich noon.
	   @return  (number) the equivalent Julian date */
	toJD: function() {
		return this._calendar.toJD(this);
	},

	/* Create a new date from a Julian date.
	   @param  jd  (number) the Julian date to convert
	   @return  (CDate) the equivalent date */
	fromJD: function(jd) {
		return this._calendar.fromJD(jd);
	},

	/* Convert this date to a standard (Gregorian) JavaScript Date.
	   @return  (Date) the equivalent JavaScript date */
	toJSDate: function() {
		return this._calendar.toJSDate(this);
	},

	/* Create a new date from a standard (Gregorian) JavaScript Date.
	   @param  jsd  (Date) the JavaScript date to convert
	   @return  (CDate) the equivalent date */
	fromJSDate: function(jsd) {
		return this._calendar.fromJSDate(jsd);
	},

	/* Convert to a string for display.
	   @return  (string) this date as a string */
	toString: function() {
		return (this.year() < 0 ? '-' : '') + pad(Math.abs(this.year()), 4) +
			'-' + pad(this.month(), 2) + '-' + pad(this.day(), 2);
	}
});

/* Basic functionality for all calendars.
   Other calendars should extend this:
   OtherCalendar.prototype = new BaseCalendar; */
function BaseCalendar() {
	this.shortYearCutoff = '+10';
}

$.extend(BaseCalendar.prototype, {
	_validateLevel: 0, // "Stack" to turn validation on/off

	/* Create a new date within this calendar - today if no parameters given.
	   @param  year   (CDate) the date to duplicate or
	                  (number) the year for the date
	   @param  month  (number) the month for the date
	   @param  day    (number) the day for the date
	   @return  (CDate) the new date
	   @throws  error if not a valid date or a different calendar used */
	newDate: function(year, month, day) {
		if (year == null) {
			return this.today();
		}
		if (year.year) {
			this._validate(year, month, day,
				$.calendars.local.invalidDate || $.calendars.regional[''].invalidDate);
			day = year.day();
			month = year.month();
			year = year.year();
		}
		return new CDate(this, year, month, day);
	},

	/* Create a new date for today.
	   @return  (CDate) today's date */
	today: function() {
		return this.fromJSDate(new Date());
	},

	/* Retrieve the epoch designator for this date.
	   @param  year  (CDate) the date to examine or
	                 (number) the year to examine
	   @return  (string) the current epoch
	   @throws  error if an invalid year or a different calendar used */
	epoch: function(year) {
		var date = this._validate(year, this.minMonth, this.minDay,
			$.calendars.local.invalidYear || $.calendars.regional[''].invalidYear);
		return (date.year() < 0 ? this.local.epochs[0] : this.local.epochs[1]);
	},

	/* Format the year, if not a simple sequential number
	   @param  year  (CDate) the date to format or
	                 (number) the year to format
	   @return  (string) the formatted year
	   @throws  error if an invalid year or a different calendar used */
	formatYear: function(year) {
		var date = this._validate(year, this.minMonth, this.minDay,
			$.calendars.local.invalidYear || $.calendars.regional[''].invalidYear);
		return (date.year() < 0 ? '-' : '') + pad(Math.abs(date.year()), 4)
	},

	/* Retrieve the number of months in a year.
	   @param  year  (CDate) the date to examine or
	                 (number) the year to examine
	   @return  (number) the number of months
	   @throws  error if an invalid year or a different calendar used */
	monthsInYear: function(year) {
		this._validate(year, this.minMonth, this.minDay,
			$.calendars.local.invalidYear || $.calendars.regional[''].invalidYear);
		return 12;
	},

	/* Calculate the month's ordinal position within the year -
	   for those calendars that don't start at month 1!
	   @param  year   (CDate) the date to examine or
	                  (number) the year to examine
	   @param  month  (number) the month to examine
	   @return  (number) the ordinal position, starting from minMonth
	   @throws  error if an invalid year/month or a different calendar used */
	monthOfYear: function(year, month) {
		var date = this._validate(year, month, this.minDay,
			$.calendars.local.invalidMonth || $.calendars.regional[''].invalidMonth);
		return (date.month() + this.monthsInYear(date) - this.firstMonth) %
			this.monthsInYear(date) + this.minMonth;
	},

	/* Calculate actual month from ordinal position, starting from minMonth.
	   @param  year  (number) the year to examine
	   @param  ord   (number) the month's ordinal position
	   @return  (number) the month's number
	   @throws  error if an invalid year/month */
	fromMonthOfYear: function(year, ord) {
		var m = (ord + this.firstMonth - 2 * this.minMonth) %
			this.monthsInYear(year) + this.minMonth;
		this._validate(year, m, this.minDay,
			$.calendars.local.invalidMonth || $.calendars.regional[''].invalidMonth);
		return m;
	},

	/* Retrieve the number of days in a year.
	   @param  year   (CDate) the date to examine or
	                  (number) the year to examine
	   @return  (number) the number of days
	   @throws  error if an invalid year or a different calendar used */
	daysInYear: function(year) {
		var date = this._validate(year, this.minMonth, this.minDay,
			$.calendars.local.invalidYear || $.calendars.regional[''].invalidYear);
		return (this.leapYear(date) ? 366 : 365);
	},

	/* Retrieve the day of the year for a date.
	   @param  year   (CDate) the date to convert or
	                  (number) the year to convert
	   @param  month  (number) the month to convert
	   @param  day    (number) the day to convert
	   @return  (number) the day of the year
	   @throws  error if an invalid date or a different calendar used */
	dayOfYear: function(year, month, day) {
		var date = this._validate(year, month, day,
			$.calendars.local.invalidDate || $.calendars.regional[''].invalidDate);
		return date.toJD() - this.newDate(date.year(),
			this.fromMonthOfYear(date.year(), this.minMonth), this.minDay).toJD() + 1;
	},

	/* Retrieve the number of days in a week.
	   @return  (number) the number of days */
	daysInWeek: function() {
		return 7;
	},

	/* Retrieve the day of the week for a date.
	   @param  year   (CDate) the date to examine or
	                  (number) the year to examine
	   @param  month  (number) the month to examine
	   @param  day    (number) the day to examine
	   @return  (number) the day of the week: 0 to number of days - 1
	   @throws  error if an invalid date or a different calendar used */
	dayOfWeek: function(year, month, day) {
		var date = this._validate(year, month, day,
			$.calendars.local.invalidDate || $.calendars.regional[''].invalidDate);
		return (Math.floor(this.toJD(date)) + 2) % this.daysInWeek();
	},

	/* Retrieve additional information about a date.
	   @param  year   (CDate) the date to examine or
	                  (number) the year to examine
	   @param  month  (number) the month to examine
	   @param  day    (number) the day to examine
	   @return  (object) additional information - contents depends on calendar
	   @throws  error if an invalid date or a different calendar used */
	extraInfo: function(year, month, day) {
		this._validate(year, month, day,
			$.calendars.local.invalidDate || $.calendars.regional[''].invalidDate);
		return {};
	},

	/* Add period(s) to a date.
	   Cater for no year zero.
	   @param  date    (CDate) the starting date
	   @param  offset  (number) the number of periods to adjust by
	   @param  period  (string) one of 'y' for year, 'm' for month, 'w' for week, 'd' for day
	   @return  (CDate) the updated date
	   @throws  error if a different calendar used */
	add: function(date, offset, period) {
		this._validate(date, this.minMonth, this.minDay,
			$.calendars.local.invalidDate || $.calendars.regional[''].invalidDate);
		return this._correctAdd(date, this._add(date, offset, period), offset, period);
	},

	/* Add period(s) to a date.
	   @param  date    (CDate) the starting date
	   @param  offset  (number) the number of periods to adjust by
	   @param  period  (string) one of 'y' for year, 'm' for month, 'w' for week, 'd' for day
	   @return  (CDate) the updated date */
	_add: function(date, offset, period) {
		this._validateLevel++;
		if (period == 'd' || period == 'w') {
			var jd = date.toJD() + offset * (period == 'w' ? this.daysInWeek() : 1);
			var d = date.calendar().fromJD(jd);
			this._validateLevel--;
			return [d.year(), d.month(), d.day()];
		}
		try {
			var y = date.year() + (period == 'y' ? offset : 0);
			var m = date.monthOfYear() + (period == 'm' ? offset : 0);
			var d = date.day();// + (period == 'd' ? offset : 0) +
				//(period == 'w' ? offset * this.daysInWeek() : 0);
			var resyncYearMonth = function(calendar) {
				while (m < calendar.minMonth) {
					y--;
					m += calendar.monthsInYear(y);
					}
				var yearMonths = calendar.monthsInYear(y);
				while (m > yearMonths - 1 + calendar.minMonth) {
					y++;
					m -= yearMonths;
					yearMonths = calendar.monthsInYear(y);
				}
			};
			if (period == 'y') {
				if (date.month() != this.fromMonthOfYear(y, m)) { // Hebrew
					m = this.newDate(y, date.month(), this.minDay).monthOfYear();
				}
				m = Math.min(m, this.monthsInYear(y));
				d = Math.min(d, this.daysInMonth(y, this.fromMonthOfYear(y, m)));
			}
			else if (period == 'm') {
				resyncYearMonth(this);
				d = Math.min(d, this.daysInMonth(y, this.fromMonthOfYear(y, m)));
			}
			var ymd = [y, this.fromMonthOfYear(y, m), d];
			this._validateLevel--;
			return ymd;
		}
		catch (e) {
			this._validateLevel--;
			throw e;
		}
	},

	/* Correct a candidate date after adding period(s) to a date.
	   Handle no year zero if necessary.
	   @param  date    (CDate) the starting date
	   @param  ymd     (number[3]) the added date
	   @param  offset  (number) the number of periods to adjust by
	   @param  period  (string) one of 'y' for year, 'm' for month, 'w' for week, 'd' for day
	   @return  (CDate) the updated date */
	_correctAdd: function(date, ymd, offset, period) {
		if (!this.hasYearZero && (period == 'y' || period == 'm')) {
			if (ymd[0] == 0 || // In year zero
					(date.year() > 0) != (ymd[0] > 0)) { // Crossed year zero
				var adj = {y: [1, 1, 'y'], m: [1, this.monthsInYear(-1), 'm'],
					w: [this.daysInWeek(), this.daysInYear(-1), 'd'],
					d: [1, this.daysInYear(-1), 'd']}[period];
				var dir = (offset < 0 ? -1 : +1);
				ymd = this._add(date, offset * adj[0] + dir * adj[1], adj[2]);
			}
		}
		return date.date(ymd[0], ymd[1], ymd[2]);
	},

	/* Set a portion of the date.
	   @param  date    (CDate) the starting date
	   @param  value   (number) the new value for the period
	   @param  period  (string) one of 'y' for year, 'm' for month, 'd' for day
	   @return  (CDate) the updated date
	   @throws  error if an invalid date or a different calendar used */
	set: function(date, value, period) {
		this._validate(date, this.minMonth, this.minDay,
			$.calendars.local.invalidDate || $.calendars.regional[''].invalidDate);
		var y = (period == 'y' ? value : date.year());
		var m = (period == 'm' ? value : date.month());
		var d = (period == 'd' ? value : date.day());
		if (period == 'y' || period == 'm') {
			d = Math.min(d, this.daysInMonth(y, m));
		}
		return date.date(y, m, d);
	},

	/* Determine whether a date is valid for this calendar.
	   @param  year   (number) the year to examine
	   @param  month  (number) the month to examine
	   @param  day    (number) the day to examine
	   @return  (boolean) true if a valid date, false if not */
	isValid: function(year, month, day) {
		this._validateLevel++;
		var valid = (this.hasYearZero || year != 0);
		if (valid) {
			var date = this.newDate(year, month, this.minDay);
			valid = (month >= this.minMonth && month - this.minMonth < this.monthsInYear(date)) &&
				(day >= this.minDay && day - this.minDay < this.daysInMonth(date));
		}
		this._validateLevel--;
		return valid;
	},

	/* Convert the date to a standard (Gregorian) JavaScript Date.
	   @param  year   (CDate) the date to convert or
	                  (number) the year to convert
	   @param  month  (number) the month to convert
	   @param  day    (number) the day to convert
	   @return  (Date) the equivalent JavaScript date
	   @throws  error if an invalid date or a different calendar used */
	toJSDate: function(year, month, day) {
		var date = this._validate(year, month, day,
			$.calendars.local.invalidDate || $.calendars.regional[''].invalidDate);
		return $.calendars.instance().fromJD(this.toJD(date)).toJSDate();
	},

	/* Convert the date from a standard (Gregorian) JavaScript Date.
	   @param  jsd  (Date) the JavaScript date
	   @return  (CDate) the equivalent DateUtils date */
	fromJSDate: function(jsd) {
		return this.fromJD($.calendars.instance().fromJSDate(jsd).toJD());
	},

	/* Check that a candidate date is from the same calendar and is valid.
	   @param  year   (CDate) the date to validate or
	                  (number) the year to validate
	   @param  month  (number) the month to validate
	   @param  day    (number) the day to validate
	   @param  error  (string) error message if invalid
	   @throws  error if different calendars used or invalid date */
	_validate: function(year, month, day, error) {
		if (year.year) {
			if (this._validateLevel == 0 && this.name != year.calendar().name) {
				throw ($.calendars.local.differentCalendars || $.calendars.regional[''].differentCalendars).
					replace(/\{0\}/, this.local.name).replace(/\{1\}/, year.calendar().local.name);
			}
			return year;
		}
		try {
			this._validateLevel++;
			if (this._validateLevel == 1 && !this.isValid(year, month, day)) {
				throw error.replace(/\{0\}/, this.local.name);
			}
			var date = this.newDate(year, month, day);
			this._validateLevel--;
			return date;
		}
		catch (e) {
			this._validateLevel--;
			throw e;
		}
	}
});

/* Implementation of the Proleptic Gregorian Calendar.
   See http://en.wikipedia.org/wiki/Gregorian_calendar
   and http://en.wikipedia.org/wiki/Proleptic_Gregorian_calendar.
   @param  language  (string) the language code (default English) for localisation (optional) */
function GregorianCalendar(language) {
	this.local = this.regional[language || ''] || this.regional[''];
}

GregorianCalendar.prototype = new BaseCalendar;

$.extend(GregorianCalendar.prototype, {
	name: 'Gregorian', // The calendar name
	jdEpoch: 1721425.5, // Julian date of start of Gregorian epoch: 1 January 0001 CE
	daysPerMonth: [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31], // Days per month in a common year
	hasYearZero: false, // True if has a year zero, false if not
	minMonth: 1, // The minimum month number
	firstMonth: 1, // The first month in the year
	minDay: 1, // The minimum day number

	regional: { // Localisations
		'': {
			name: 'Gregorian', // The calendar name
			epochs: ['BCE', 'CE'],
			monthNames: ['January', 'February', 'March', 'April', 'May', 'June',
			'July', 'August', 'September', 'October', 'November', 'December'],
			monthNamesShort: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],
			dayNames: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],
			dayNamesShort: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],
			dayNamesMin: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],
			dateFormat: 'mm/dd/yyyy', // See format options on parseDate
			firstDay: 0, // The first day of the week, Sun = 0, Mon = 1, ...
			isRTL: false // True if right-to-left language, false if left-to-right
		}
	},
	
	/* Determine whether this date is in a leap year.
	   @param  year  (CDate) the date to examine or
	                 (number) the year to examine
	   @return  (boolean) true if this is a leap year, false if not
	   @throws  error if an invalid year or a different calendar used */
	leapYear: function(year) {
		var date = this._validate(year, this.minMonth, this.minDay,
			$.calendars.local.invalidYear || $.calendars.regional[''].invalidYear);
		var year = date.year() + (date.year() < 0 ? 1 : 0); // No year zero
		return year % 4 == 0 && (year % 100 != 0 || year % 400 == 0);
	},

	/* Determine the week of the year for a date - ISO 8601.
	   @param  year   (CDate) the date to examine or
	                  (number) the year to examine
	   @param  month  (number) the month to examine
	   @param  day    (number) the day to examine
	   @return  (number) the week of the year
	   @throws  error if an invalid date or a different calendar used */
	weekOfYear: function(year, month, day) {
		// Find Thursday of this week starting on Monday
		var checkDate = this.newDate(year, month, day);
		checkDate.add(4 - (checkDate.dayOfWeek() || 7), 'd');
		return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;
	},

	/* Retrieve the number of days in a month.
	   @param  year   (CDate) the date to examine or
	                  (number) the year of the month
	   @param  month  (number) the month
	   @return  (number) the number of days in this month
	   @throws  error if an invalid month/year or a different calendar used */
	daysInMonth: function(year, month) {
		var date = this._validate(year, month, this.minDay,
			$.calendars.local.invalidMonth || $.calendars.regional[''].invalidMonth);
		return this.daysPerMonth[date.month() - 1] +
			(date.month() == 2 && this.leapYear(date.year()) ? 1 : 0);
	},

	/* Determine whether this date is a week day.
	   @param  year   (CDate) the date to examine or
	                  (number) the year to examine
	   @param  month  (number) the month to examine
	   @param  day    (number) the day to examine
	   @return  (boolean) true if a week day, false if not
	   @throws  error if an invalid date or a different calendar used */
	weekDay: function(year, month, day) {
		return (this.dayOfWeek(year, month, day) || 7) < 6;
	},

	/* Retrieve the Julian date equivalent for this date,
	   i.e. days since January 1, 4713 BCE Greenwich noon.
	   @param  year   (CDate) the date to convert or
	                  (number) the year to convert
	   @param  month  (number) the month to convert
	   @param  day    (number) the day to convert
	   @return  (number) the equivalent Julian date
	   @throws  error if an invalid date or a different calendar used */
	toJD: function(year, month, day) {
		var date = this._validate(year, month, day,
			$.calendars.local.invalidDate || $.calendars.regional[''].invalidDate);
		year = date.year();
		month = date.month();
		day = date.day();
		if (year < 0) { year++; } // No year zero
		// Jean Meeus algorithm, "Astronomical Algorithms", 1991
		if (month < 3) {
			month += 12;
			year--;
		}
		var a = Math.floor(year / 100);
		var b = 2 - a + Math.floor(a / 4);
		return Math.floor(365.25 * (year + 4716)) +
			Math.floor(30.6001 * (month + 1)) + day + b - 1524.5;
	},

	/* Create a new date from a Julian date.
	   @param  jd  (number) the Julian date to convert
	   @return  (CDate) the equivalent date */
	fromJD: function(jd) {
		// Jean Meeus algorithm, "Astronomical Algorithms", 1991
		var z = Math.floor(jd + 0.5);
		var a = Math.floor((z - 1867216.25) / 36524.25);
		a = z + 1 + a - Math.floor(a / 4);
		var b = a + 1524;
		var c = Math.floor((b - 122.1) / 365.25);
		var d = Math.floor(365.25 * c);
		var e = Math.floor((b - d) / 30.6001);
		var day = b - d - Math.floor(e * 30.6001);
		var month = e - (e > 13.5 ? 13 : 1);
		var year = c - (month > 2.5 ? 4716 : 4715);
		if (year <= 0) { year--; } // No year zero
		return this.newDate(year, month, day);
	},

	/* Convert this date to a standard (Gregorian) JavaScript Date.
	   @param  year   (CDate) the date to convert or
	                  (number) the year to convert
	   @param  month  (number) the month to convert
	   @param  day    (number) the day to convert
	   @return  (Date) the equivalent JavaScript date
	   @throws  error if an invalid date or a different calendar used */
	toJSDate: function(year, month, day) {
		var date = this._validate(year, month, day,
			$.calendars.local.invalidDate || $.calendars.regional[''].invalidDate);
		var jsd = new Date(date.year(), date.month() - 1, date.day());
		jsd.setHours(0);
		jsd.setMinutes(0);
		jsd.setSeconds(0);
		jsd.setMilliseconds(0);
		// Hours may be non-zero on daylight saving cut-over:
		// > 12 when midnight changeover, but then cannot generate
		// midnight datetime, so jump to 1AM, otherwise reset.
		jsd.setHours(jsd.getHours() > 12 ? jsd.getHours() + 2 : 0);
		return jsd;
	},

	/* Create a new date from a standard (Gregorian) JavaScript Date.
	   @param  jsd  (Date) the JavaScript date to convert
	   @return  (CDate) the equivalent date */
	fromJSDate: function(jsd) {
		return this.newDate(jsd.getFullYear(), jsd.getMonth() + 1, jsd.getDate());
	}
});

// Singleton manager
$.calendars = new Calendars();

// Date template
$.calendars.cdate = CDate;

// Base calendar template
$.calendars.baseCalendar = BaseCalendar;

// Gregorian calendar implementation
$.calendars.calendars.gregorian = GregorianCalendar;

})(jQuery);

var process = process || {env: {NODE_ENV: "development"}};
﻿/* http://keith-wood.name/calendars.html
   Calendars extras for jQuery v1.1.4.
   Written by Keith Wood (kbwood{at}iinet.com.au) August 2009.
   Dual licensed under the GPL (http://dev.jquery.com/browser/trunk/jquery/GPL-LICENSE.txt) and 
   MIT (http://dev.jquery.com/browser/trunk/jquery/MIT-LICENSE.txt) licenses. 
   Please attribute the author if you use it. */

(function($) { // Hide scope, no $ conflict

$.extend($.calendars.regional[''], {
	invalidArguments: 'Invalid arguments',
	invalidFormat: 'Cannot format a date from another calendar',
	missingNumberAt: 'Missing number at position {0}',
	unknownNameAt: 'Unknown name at position {0}',
	unexpectedLiteralAt: 'Unexpected literal at position {0}',
	unexpectedText: 'Additional text found at end'
});
$.calendars.local = $.calendars.regional[''];

$.extend($.calendars.cdate.prototype, {

	/* Format this date.
	   @param  format  (string) the date format to use (see BaseCalendar.formatDate) (optional)
	   @return  (string) the formatted date */
	formatDate: function(format) {
		return this._calendar.formatDate(format || '', this);
	}
});

$.extend($.calendars.baseCalendar.prototype, {

	UNIX_EPOCH: $.calendars.instance().newDate(1970, 1, 1).toJD(),
	SECS_PER_DAY: 24 * 60 * 60,
	TICKS_EPOCH: $.calendars.instance().jdEpoch, // 1 January 0001 CE
	TICKS_PER_DAY: 24 * 60 * 60 * 10000000,

	ATOM: 'yyyy-mm-dd', // RFC 3339/ISO 8601
	COOKIE: 'D, dd M yyyy',
	FULL: 'DD, MM d, yyyy',
	ISO_8601: 'yyyy-mm-dd',
	JULIAN: 'J',
	RFC_822: 'D, d M yy',
	RFC_850: 'DD, dd-M-yy',
	RFC_1036: 'D, d M yy',
	RFC_1123: 'D, d M yyyy',
	RFC_2822: 'D, d M yyyy',
	RSS: 'D, d M yy', // RFC 822
	TICKS: '!',
	TIMESTAMP: '@',
	W3C: 'yyyy-mm-dd', // ISO 8601

	/* Format a date object into a string value.
	   The format can be combinations of the following:
	   d  - day of month (no leading zero)
	   dd - day of month (two digit)
	   o  - day of year (no leading zeros)
	   oo - day of year (three digit)
	   D  - day name short
	   DD - day name long
	   w  - week of year (no leading zero)
	   ww - week of year (two digit)
	   m  - month of year (no leading zero)
	   mm - month of year (two digit)
	   M  - month name short
	   MM - month name long
	   yy - year (two digit)
	   yyyy - year (four digit)
	   YYYY - formatted year
	   J  - Julian date (days since January 1, 4713 BCE Greenwich noon)
	   @  - Unix timestamp (s since 01/01/1970)
	   !  - Windows ticks (100ns since 01/01/0001)
	   '...' - literal text
	   '' - single quote
	   @param  format    (string) the desired format of the date (optional, default calendar format)
	   @param  date      (CDate) the date value to format
	   @param  settings  (object) attributes include:
	                     dayNamesShort    (string[]) abbreviated names of the days from Sunday (optional)
	                     dayNames         (string[]) names of the days from Sunday (optional)
	                     monthNamesShort  (string[]) abbreviated names of the months (optional)
	                     monthNames       (string[]) names of the months (optional)
						 calculateWeek    (function) function that determines week of the year (optional)
	   @return  (string) the date in the above format
	   @throws  errors if the date is from a different calendar */
	formatDate: function(format, date, settings) {
		if (typeof format != 'string') {
			settings = date;
			date = format;
			format = '';
		}
		if (!date) {
			return '';
		}
		if (date.calendar() != this) {
			throw $.calendars.local.invalidFormat || $.calendars.regional[''].invalidFormat;
		}
		format = format || this.local.dateFormat;
		settings = settings || {};
		var dayNamesShort = settings.dayNamesShort || this.local.dayNamesShort;
		var dayNames = settings.dayNames || this.local.dayNames;
		var monthNamesShort = settings.monthNamesShort || this.local.monthNamesShort;
		var monthNames = settings.monthNames || this.local.monthNames;
		var calculateWeek = settings.calculateWeek || this.local.calculateWeek;
		// Check whether a format character is doubled
		var doubled = function(match, step) {
			var matches = 1;
			while (iFormat + matches < format.length && format.charAt(iFormat + matches) == match) {
				matches++;
			}
			iFormat += matches - 1;
			return Math.floor(matches / (step || 1)) > 1;
		};
		// Format a number, with leading zeroes if necessary
		var formatNumber = function(match, value, len, step) {
			var num = '' + value;
			if (doubled(match, step)) {
				while (num.length < len) {
					num = '0' + num;
				}
			}
			return num;
		};
		// Format a name, short or long as requested
		var formatName = function(match, value, shortNames, longNames) {
			return (doubled(match) ? longNames[value] : shortNames[value]);
		};
		var output = '';
		var literal = false;
		for (var iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal) {
				if (format.charAt(iFormat) == "'" && !doubled("'")) {
					literal = false;
				}
				else {
					output += format.charAt(iFormat);
				}
			}
			else {
				switch (format.charAt(iFormat)) {
					case 'd': output += formatNumber('d', date.day(), 2); break;
					case 'D': output += formatName('D', date.dayOfWeek(),
						dayNamesShort, dayNames); break;
					case 'o': output += formatNumber('o', date.dayOfYear(), 3); break;
					case 'w': output += formatNumber('w', date.weekOfYear(), 2); break;
					case 'm': output += formatNumber('m', date.month(), 2); break;
					case 'M': output += formatName('M', date.month() - this.minMonth,
						monthNamesShort, monthNames); break;
					case 'y':
						output += (doubled('y', 2) ? date.year() :
							(date.year() % 100 < 10 ? '0' : '') + date.year() % 100);
						break;
					case 'Y':
						doubled('Y', 2);
						output += date.formatYear();
						break;
					case 'J': output += date.toJD(); break;
					case '@': output += (date.toJD() - this.UNIX_EPOCH) * this.SECS_PER_DAY; break;
					case '!': output += (date.toJD() - this.TICKS_EPOCH) * this.TICKS_PER_DAY; break;
					case "'":
						if (doubled("'")) {
							output += "'";
						}
						else {
							literal = true;
						}
						break;
					default:
						output += format.charAt(iFormat);
				}
			}
		}
		return output;
	},

	/* Parse a string value into a date object.
	   See formatDate for the possible formats, plus:
	   * - ignore rest of string
	   @param  format    (string) the expected format of the date ('' for default calendar format)
	   @param  value     (string) the date in the above format
	   @param  settings  (object) attributes include:
	                     shortYearCutoff  (number) the cutoff year for determining the century (optional)
	                     dayNamesShort    (string[]) abbreviated names of the days from Sunday (optional)
	                     dayNames         (string[]) names of the days from Sunday (optional)
	                     monthNamesShort  (string[]) abbreviated names of the months (optional)
	                     monthNames       (string[]) names of the months (optional)
	   @return  (CDate) the extracted date value or null if value is blank
	   @throws  errors if the format and/or value are missing,
	            if the value doesn't match the format,
	            or if the date is invalid */
	parseDate: function(format, value, settings) {
		if (value == null) {
			throw $.calendars.local.invalidArguments || $.calendars.regional[''].invalidArguments;
		}
		value = (typeof value == 'object' ? value.toString() : value + '');
		if (value == '') {
			return null;
		}
		format = format || this.local.dateFormat;
		settings = settings || {};
		var shortYearCutoff = settings.shortYearCutoff || this.shortYearCutoff;
		shortYearCutoff = (typeof shortYearCutoff != 'string' ? shortYearCutoff :
			this.today().year() % 100 + parseInt(shortYearCutoff, 10));
		var dayNamesShort = settings.dayNamesShort || this.local.dayNamesShort;
		var dayNames = settings.dayNames || this.local.dayNames;
		var monthNamesShort = settings.monthNamesShort || this.local.monthNamesShort;
		var monthNames = settings.monthNames || this.local.monthNames;
		var jd = -1;
		var year = -1;
		var month = -1;
		var day = -1;
		var doy = -1;
		var shortYear = false;
		var literal = false;
		// Check whether a format character is doubled
		var doubled = function(match, step) {
			var matches = 1;
			while (iFormat + matches < format.length && format.charAt(iFormat + matches) == match) {
				matches++;
			}
			iFormat += matches - 1;
			return Math.floor(matches / (step || 1)) > 1;
		};
		// Extract a number from the string value
		var getNumber = function(match, step) {
			var isDoubled = doubled(match, step);
			var size = [2, 3, isDoubled ? 4 : 2, isDoubled ? 4 : 2, 10, 11, 20]['oyYJ@!'.indexOf(match) + 1];
			var digits = new RegExp('^-?\\d{1,' + size + '}');
			var num = value.substring(iValue).match(digits);
			if (!num) {
				throw ($.calendars.local.missingNumberAt || $.calendars.regional[''].missingNumberAt).
					replace(/\{0\}/, iValue);
			}
			iValue += num[0].length;
			return parseInt(num[0], 10);
		};
		// Extract a name from the string value and convert to an index
		var calendar = this;
		var getName = function(match, shortNames, longNames, step) {
			var names = (doubled(match, step) ? longNames : shortNames);
			for (var i = 0; i < names.length; i++) {
				if ((value.substr(iValue, names[i].length)).toLowerCase() == names[i].toLowerCase()) {
					iValue += names[i].length;
					return i + calendar.minMonth;
				}
			}
			throw ($.calendars.local.unknownNameAt || $.calendars.regional[''].unknownNameAt).
				replace(/\{0\}/, iValue);
		};
		// Confirm that a literal character matches the string value
		var checkLiteral = function() {
			if (value.charAt(iValue) != format.charAt(iFormat)) {
				throw ($.calendars.local.unexpectedLiteralAt ||
					$.calendars.regional[''].unexpectedLiteralAt).replace(/\{0\}/, iValue);
			}
			iValue++;
		};
		var iValue = 0;
		for (var iFormat = 0; iFormat < format.length; iFormat++) {
			if (literal) {
				if (format.charAt(iFormat) == "'" && !doubled("'")) {
					literal = false;
				}
				else {
					checkLiteral();
				}
			}
			else {
				switch (format.charAt(iFormat)) {
					case 'd': day = getNumber('d'); break;
					case 'D': getName('D', dayNamesShort, dayNames); break;
					case 'o': doy = getNumber('o'); break;
					case 'w': getNumber('w'); break;
					case 'm': month = getNumber('m'); break;
					case 'M': month = getName('M', monthNamesShort, monthNames); break;
					case 'y':
						var iSave = iFormat;
						shortYear = !doubled('y', 2);
						iFormat = iSave;
						year = getNumber('y', 2);
						break;
					case 'Y': year = getNumber('Y', 2); break;
					case 'J':
						jd = getNumber('J') + 0.5;
						if (value.charAt(iValue) == '.') {
							iValue++;
							getNumber('J');
						}
						break;
					case '@': jd = getNumber('@') / this.SECS_PER_DAY + this.UNIX_EPOCH; break;
					case '!': jd = getNumber('!') / this.TICKS_PER_DAY + this.TICKS_EPOCH; break;
					case '*': iValue = value.length; break;
					case "'":
						if (doubled("'")) {
							checkLiteral();
						}
						else {
							literal = true;
						}
						break;
					default: checkLiteral();
				}
			}
		}
		if (iValue < value.length) {
			throw $.calendars.local.unexpectedText || $.calendars.regional[''].unexpectedText;
		}
		if (year == -1) {
			year = this.today().year();
		}
		else if (year < 100 && shortYear) {
			year += (shortYearCutoff == -1 ? 1900 : this.today().year() -
				this.today().year() % 100 - (year <= shortYearCutoff ? 0 : 100));
		}
		if (doy > -1) {
			month = 1;
			day = doy;
			for (var dim = this.daysInMonth(year, month); day > dim; dim = this.daysInMonth(year, month)) {
				month++;
				day -= dim;
			}
		}
		return (jd > -1 ? this.fromJD(jd) : this.newDate(year, month, day));
	},

	/* A date may be specified as an exact value or a relative one.
	   @param  dateSpec     (CDate or number or string) the date as an object or string
	                        in the given format or an offset - numeric days from today,
	                        or string amounts and periods, e.g. '+1m +2w'
	   @param  defaultDate  (CDate) the date to use if no other supplied, may be null
	   @param  currentDate  (CDate) the current date as a possible basis for relative dates,
	                        if null today is used (optional)
	   @param  dateFormat   (string) the expected date format - see formatDate above (optional)
	   @param  settings     (object) attributes include:
	                        shortYearCutoff  (number) the cutoff year for determining the century (optional)
	                        dayNamesShort    (string[7]) abbreviated names of the days from Sunday (optional)
	                        dayNames         (string[7]) names of the days from Sunday (optional)
	                        monthNamesShort  (string[12]) abbreviated names of the months (optional)
	                        monthNames       (string[12]) names of the months (optional)
	   @return  (CDate) the decoded date */
	determineDate: function(dateSpec, defaultDate, currentDate, dateFormat, settings) {
		if (currentDate && typeof currentDate != 'object') {
			settings = dateFormat;
			dateFormat = currentDate;
			currentDate = null;
		}
		if (typeof dateFormat != 'string') {
			settings = dateFormat;
			dateFormat = '';
		}
		var calendar = this;
		var offsetString = function(offset) {
			try {
				return calendar.parseDate(dateFormat, offset, settings);
			}
			catch (e) {
				// Ignore
			}
			offset = offset.toLowerCase();
			var date = (offset.match(/^c/) && currentDate ?
				currentDate.newDate() : null) || calendar.today();
			var pattern = /([+-]?[0-9]+)\s*(d|w|m|y)?/g;
			var matches = pattern.exec(offset);
			while (matches) {
				date.add(parseInt(matches[1], 10), matches[2] || 'd');
				matches = pattern.exec(offset);
			}
			return date;
		};
		defaultDate = (defaultDate ? defaultDate.newDate() : null);
		dateSpec = (dateSpec == null ? defaultDate :
			(typeof dateSpec == 'string' ? offsetString(dateSpec) : (typeof dateSpec == 'number' ?
			(isNaN(dateSpec) || dateSpec == Infinity || dateSpec == -Infinity ? defaultDate :
			calendar.today().add(dateSpec, 'd')) : calendar.newDate(dateSpec))));
		return dateSpec;
	}
});

})(jQuery);

var process = process || {env: {NODE_ENV: "development"}};
﻿/* http://keith-wood.name/calendars.html
   Calendars date picker for jQuery v1.1.4.
   Written by Keith Wood (kbwood{at}iinet.com.au) August 2009.
   Dual licensed under the GPL (http://dev.jquery.com/browser/trunk/jquery/GPL-LICENSE.txt) and 
   MIT (http://dev.jquery.com/browser/trunk/jquery/MIT-LICENSE.txt) licenses. 
   Please attribute the author if you use it. */

(function($) { // Hide scope, no $ conflict

/* Calendar picker manager. */
function CalendarsPicker() {
	this._defaults = {
		calendar: $.calendars.instance(), // The calendar to use
		pickerClass: '', // CSS class to add to this instance of the datepicker
		showOnFocus: true, // True for popup on focus, false for not
		showTrigger: null, // Element to be cloned for a trigger, null for none
		showAnim: 'show', // Name of jQuery animation for popup, '' for no animation
		showOptions: {}, // Options for enhanced animations
		showSpeed: 'normal', // Duration of display/closure
		popupContainer: null, // The element to which a popup calendar is added, null for body
		alignment: 'bottom', // Alignment of popup - with nominated corner of input:
			// 'top' or 'bottom' aligns depending on language direction,
			// 'topLeft', 'topRight', 'bottomLeft', 'bottomRight'
		fixedWeeks: false, // True to always show 6 weeks, false to only show as many as are needed
		firstDay: null, // First day of the week, 0 = Sunday, 1 = Monday, ...
			// defaults to calendar local setting if null
		calculateWeek: null, // Calculate week of the year from a date, null for calendar default
		monthsToShow: 1, // How many months to show, cols or [rows, cols]
		monthsOffset: 0, // How many months to offset the primary month by
		monthsToStep: 1, // How many months to move when prev/next clicked
		monthsToJump: 12, // How many months to move when large prev/next clicked
		useMouseWheel: true, // True to use mousewheel if available, false to never use it
		changeMonth: true, // True to change month/year via drop-down, false for navigation only
		yearRange: 'c-10:c+10', // Range of years to show in drop-down: 'any' for direct text entry
			// or 'start:end', where start/end are '+-nn' for relative to today
			// or 'c+-nn' for relative to the currently selected date
			// or 'nnnn' for an absolute year
		showOtherMonths: false, // True to show dates from other months, false to not show them
		selectOtherMonths: false, // True to allow selection of dates from other months too
		defaultDate: null, // Date to show if no other selected
		selectDefaultDate: false, // True to pre-select the default date if no other is chosen
		minDate: null, // The minimum selectable date
		maxDate: null, // The maximum selectable date
		dateFormat: null, // Format for dates, defaults to calendar setting if null
		autoSize: false, // True to size the input field according to the date format
		rangeSelect: false, // Allows for selecting a date range on one date picker
		rangeSeparator: ' - ', // Text between two dates in a range
		multiSelect: 0, // Maximum number of selectable dates, zero for single select
		multiSeparator: ',', // Text between multiple dates
		onDate: null, // Callback as a date is added to the datepicker
		onShow: null, // Callback just before a datepicker is shown
		onChangeMonthYear: null, // Callback when a new month/year is selected
		onSelect: null, // Callback when a date is selected
		onClose: null, // Callback when a datepicker is closed
		altField: null, // Alternate field to update in synch with the datepicker
		altFormat: null, // Date format for alternate field, defaults to dateFormat
		constrainInput: true, // True to constrain typed input to dateFormat allowed characters
		commandsAsDateFormat: false, // True to apply formatDate to the command texts
		commands: this.commands // Command actions that may be added to a layout by name
	};
	this.regional = {
		'': {
			renderer: this.defaultRenderer, // The rendering templates
			prevText: '&lt;Prev', // Text for the previous month command
			prevStatus: 'Show the previous month', // Status text for the previous month command
			prevJumpText: '&lt;&lt;', // Text for the previous year command
			prevJumpStatus: 'Show the previous year', // Status text for the previous year command
			nextText: 'Next&gt;', // Text for the next month command
			nextStatus: 'Show the next month', // Status text for the next month command
			nextJumpText: '&gt;&gt;', // Text for the next year command
			nextJumpStatus: 'Show the next year', // Status text for the next year command
			currentText: 'Current', // Text for the current month command
			currentStatus: 'Show the current month', // Status text for the current month command
			todayText: 'Today', // Text for the today's month command
			todayStatus: 'Show today\'s month', // Status text for the today's month command
			clearText: 'Clear', // Text for the clear command
			clearStatus: 'Clear all the dates', // Status text for the clear command
			closeText: 'Close', // Text for the close command
			closeStatus: 'Close the datepicker', // Status text for the close command
			yearStatus: 'Change the year', // Status text for year selection
			monthStatus: 'Change the month', // Status text for month selection
			weekText: 'Wk', // Text for week of the year column header
			weekStatus: 'Week of the year', // Status text for week of the year column header
			dayStatus: 'Select DD, M d, yyyy', // Status text for selectable days
			defaultStatus: 'Select a date', // Status text shown by default
			isRTL: false // True if language is right-to-left
		}};
	$.extend(this._defaults, this.regional['']);
	this._disabled = [];
}

$.extend(CalendarsPicker.prototype, {
	dataName: 'calendarsPicker',
	
	/* Class name added to elements to indicate already configured with calendar picker. */
	markerClass: 'hasCalendarsPicker',

	_popupClass: 'calendars-popup', // Marker for popup division
	_triggerClass: 'calendars-trigger', // Marker for trigger element
	_disableClass: 'calendars-disable', // Marker for disabled element
	_coverClass: 'calendars-cover', // Marker for iframe backing element
	_monthYearClass: 'calendars-month-year', // Marker for month/year inputs
	_curMonthClass: 'calendars-month-', // Marker for current month/year
	_anyYearClass: 'calendars-any-year', // Marker for year direct input
	_curDoWClass: 'calendars-dow-', // Marker for day of week
	
	commands: { // Command actions that may be added to a layout by name
		// name: { // The command name, use '{button:name}' or '{link:name}' in layouts
		//		text: '', // The field in the regional settings for the displayed text
		//		status: '', // The field in the regional settings for the status text
		//      // The keystroke to trigger the action
		//		keystroke: {keyCode: nn, ctrlKey: boolean, altKey: boolean, shiftKey: boolean},
		//		enabled: fn, // The function that indicates the command is enabled
		//		date: fn, // The function to get the date associated with this action
		//		action: fn} // The function that implements the action
		prev: {text: 'prevText', status: 'prevStatus', // Previous month
			keystroke: {keyCode: 33}, // Page up
			enabled: function(inst) {
				var minDate = inst.curMinDate();
				return (!minDate || inst.drawDate.newDate().
					add(1 - inst.get('monthsToStep') - inst.get('monthsOffset'), 'm').
					day(inst.get('calendar').minDay).add(-1, 'd').compareTo(minDate) != -1); },
			date: function(inst) {
				return inst.drawDate.newDate().
					add(-inst.get('monthsToStep') - inst.get('monthsOffset'), 'm').
					day(inst.get('calendar').minDay); },
			action: function(inst) {
				$.calendars.picker.changeMonth(this, -inst.get('monthsToStep')); }
		},
		/*prevJump: {text: 'prevJumpText', status: 'prevJumpStatus', // Previous year
			keystroke: {keyCode: 33, ctrlKey: true}, // Ctrl + Page up
			enabled: function(inst) {
				var minDate = inst.curMinDate();
				return (!minDate || inst.drawDate.newDate().
					add(1 - inst.get('monthsToJump') - inst.get('monthsOffset'), 'm').
					day(inst.get('calendar').minDay).add(-1, 'd').compareTo(minDate) != -1); },
			date: function(inst) {
				return inst.drawDate.newDate().
					add(-inst.get('monthsToJump') - inst.get('monthsOffset'), 'm').
					day(inst.get('calendar').minDay); },
			action: function(inst) {
				$.calendars.picker.changeMonth(this, -inst.get('monthsToJump')); }
		},*/
		next: {text: 'nextText', status: 'nextStatus', // Next month
			keystroke: {keyCode: 34}, // Page down
			enabled: function(inst) {
				var maxDate = inst.get('maxDate');
				return (!maxDate || inst.drawDate.newDate().
					add(inst.get('monthsToStep') - inst.get('monthsOffset'), 'm').
					day(inst.get('calendar').minDay).compareTo(maxDate) != +1); },
			date: function(inst) {
				return inst.drawDate.newDate().
					add(inst.get('monthsToStep') - inst.get('monthsOffset'), 'm').
					day(inst.get('calendar').minDay); },
			action: function(inst) {
				$.calendars.picker.changeMonth(this, inst.get('monthsToStep')); }
		},
		nextJump: {text: 'nextJumpText', status: 'nextJumpStatus', // Next year
			keystroke: {keyCode: 34, ctrlKey: true}, // Ctrl + Page down
			enabled: function(inst) {
				var maxDate = inst.get('maxDate');
				return (!maxDate || inst.drawDate.newDate().
					add(inst.get('monthsToJump') - inst.get('monthsOffset'), 'm').
					day(inst.get('calendar').minDay).compareTo(maxDate) != +1);	},
			date: function(inst) {
				return inst.drawDate.newDate().
					add(inst.get('monthsToJump') - inst.get('monthsOffset'), 'm').
					day(inst.get('calendar').minDay); },
			action: function(inst) {
				$.calendars.picker.changeMonth(this, inst.get('monthsToJump')); }
		},
		current: {text: 'currentText', status: 'currentStatus', // Current month
			keystroke: {keyCode: 36, ctrlKey: true}, // Ctrl + Home
			enabled: function(inst) {
				var minDate = inst.curMinDate();
				var maxDate = inst.get('maxDate');
				var curDate = inst.selectedDates[0] || inst.get('calendar').today();
				return (!minDate || curDate.compareTo(minDate) != -1) &&
					(!maxDate || curDate.compareTo(maxDate) != +1); },
			date: function(inst) {
				return inst.selectedDates[0] || inst.get('calendar').today(); },
			action: function(inst) {
				var curDate = inst.selectedDates[0] || inst.get('calendar').today();
				$.calendars.picker.showMonth(this, curDate.year(), curDate.month()); }
		},
		today: {text: 'todayText', status: 'todayStatus', // Today's month
			keystroke: {keyCode: 36, ctrlKey: true}, // Ctrl + Home
			enabled: function(inst) {
				var minDate = inst.curMinDate();
				var maxDate = inst.get('maxDate');
				return (!minDate || inst.get('calendar').today().compareTo(minDate) != -1) &&
					(!maxDate || inst.get('calendar').today().compareTo(maxDate) != +1); },
			date: function(inst) { return inst.get('calendar').today(); },
			action: function(inst) { $.calendars.picker.showMonth(this); }
		},
		clear: {text: 'clearText', status: 'clearStatus', // Clear the datepicker
			keystroke: {keyCode: 35, ctrlKey: true}, // Ctrl + End
			enabled: function(inst) { return true; },
			date: function(inst) { return null; },
			action: function(inst) { $.calendars.picker.clear(this); }
		},
		close: {text: 'closeText', status: 'closeStatus', // Close the datepicker
			keystroke: {keyCode: 27}, // Escape
			enabled: function(inst) { return true; },
			date: function(inst) { return null; },
			action: function(inst) { $.calendars.picker.hide(this); }
		},
		prevWeek: {text: 'prevWeekText', status: 'prevWeekStatus', // Previous week
			keystroke: {keyCode: 38, ctrlKey: true}, // Ctrl + Up
			enabled: function(inst) {
				var minDate = inst.curMinDate();
				return (!minDate || inst.drawDate.newDate().
					add(-inst.get('calendar').daysInWeek(), 'd').compareTo(minDate) != -1); },
			date: function(inst) { return inst.drawDate.newDate().
				add(-inst.get('calendar').daysInWeek(), 'd'); },
			action: function(inst) { $.calendars.picker.changeDay(
				this, -inst.get('calendar').daysInWeek()); }
		},
		prevDay: {text: 'prevDayText', status: 'prevDayStatus', // Previous day
			keystroke: {keyCode: 37, ctrlKey: true}, // Ctrl + Left
			enabled: function(inst) {
				var minDate = inst.curMinDate();
				return (!minDate || inst.drawDate.newDate().add(-1, 'd').
					compareTo(minDate) != -1); },
			date: function(inst) { return inst.drawDate.newDate().add(-1, 'd'); },
			action: function(inst) { $.calendars.picker.changeDay(this, -1); }
		},
		nextDay: {text: 'nextDayText', status: 'nextDayStatus', // Next day
			keystroke: {keyCode: 39, ctrlKey: true}, // Ctrl + Right
			enabled: function(inst) {
				var maxDate = inst.get('maxDate');
				return (!maxDate || inst.drawDate.newDate().add(1, 'd').
					compareTo(maxDate) != +1); },
			date: function(inst) { return inst.drawDate.newDate().add(1, 'd'); },
			action: function(inst) { $.calendars.picker.changeDay(this, 1); }
		},
		nextWeek: {text: 'nextWeekText', status: 'nextWeekStatus', // Next week
			keystroke: {keyCode: 40, ctrlKey: true}, // Ctrl + Down
			enabled: function(inst) {
				var maxDate = inst.get('maxDate');
				return (!maxDate || inst.drawDate.newDate().
					add(inst.get('calendar').daysInWeek(), 'd').compareTo(maxDate) != +1); },
			date: function(inst) { return inst.drawDate.newDate().
				add(inst.get('calendar').daysInWeek(), 'd'); },
			action: function(inst) { $.calendars.picker.changeDay(
				this, inst.get('calendar').daysInWeek()); }
		}
	},

	/* Default template for generating a calendar picker. */
	defaultRenderer: {
		// Anywhere: '{l10n:name}' to insert localised value for name,
		// '{link:name}' to insert a link trigger for command name,
		// '{button:name}' to insert a button trigger for command name,
		// '{popup:start}...{popup:end}' to mark a section for inclusion in a popup datepicker only,
		// '{inline:start}...{inline:end}' to mark a section for inclusion in an inline datepicker only
		// Overall structure: '{months}' to insert calendar months
		picker: '<div class="calendars">' +
		'<div class="calendars-nav">{link:prev}{link:today}{link:next}</div>{months}' +
		'{popup:start}<div class="calendars-ctrl">{link:clear}{link:close}</div>{popup:end}' +
		'<div class="calendars-clear-fix"></div></div>',
		// One row of months: '{months}' to insert calendar months
		monthRow: '<div class="calendars-month-row">{months}</div>',
		// A single month: '{monthHeader:dateFormat}' to insert the month header -
		// dateFormat is optional and defaults to 'MM yyyy',
		// '{weekHeader}' to insert a week header, '{weeks}' to insert the month's weeks
		month: '<div class="calendars-month"><div class="calendars-month-header">{monthHeader}</div>' +
		'<table><thead>{weekHeader}</thead><tbody>{weeks}</tbody></table></div>',
		// A week header: '{days}' to insert individual day names
		weekHeader: '<tr class="ui-datepicker-daynames">{days}</tr>',
		// Individual day header: '{day}' to insert day name
		dayHeader: '<th>{day}</th>',
		// One week of the month: '{days}' to insert the week's days, '{weekOfYear}' to insert week of year
		week: '<tr>{days}</tr>',
		// An individual day: '{day}' to insert day value
		day: '<td>{day}</td>',
		// jQuery selector, relative to picker, for a single month
		monthSelector: '.calendars-month',
		// jQuery selector, relative to picker, for individual days
		daySelector: 'td',
		// Class for right-to-left (RTL) languages
		rtlClass: 'calendars-rtl',
		// Class for multi-month datepickers
		multiClass: 'calendars-multi',
		// Class for selectable dates
		defaultClass: '',
		// Class for currently selected dates
		selectedClass: 'calendars-selected',
		// Class for highlighted dates
		highlightedClass: 'calendars-highlight',
		// Class for today
		todayClass: 'calendars-today',
		// Class for days from other months
		otherMonthClass: 'calendars-other-month',
		// Class for days on weekends
		weekendClass: 'calendars-weekend',
		// Class prefix for commands
		commandClass: 'calendars-cmd',
		// Extra class(es) for commands that are buttons
		commandButtonClass: '',
		// Extra class(es) for commands that are links
		commandLinkClass: '',
		// Class for disabled commands
		disabledClass: 'calendars-disabled'
	},

	/* Override the default settings for all calendar picker instances.
	   @param  settings  (object) the new settings to use as defaults
	   @return  (CalendarPicker) this object */
	setDefaults: function(settings) {
		$.extend(this._defaults, settings || {});
		return this;
	},

	/* Attach the calendar picker functionality to an input field.
	   @param  target    (element) the control to affect
	   @param  settings  (object) the custom options for this instance */
	_attachPicker: function(target, settings) {
		target = $(target);
		if (target.hasClass(this.markerClass)) {
			return;
		}
		target.addClass(this.markerClass);
		var inst = {target: target, selectedDates: [], drawDate: null, pickingRange: false,
			inline: ($.inArray(target[0].nodeName.toLowerCase(), ['div', 'span']) > -1),
			get: function(name) { // Get a setting value, defaulting if necessary
				var value = this.settings[name] !== undefined ?
					this.settings[name] : $.calendars.picker._defaults[name];
				if ($.inArray(name, ['defaultDate', 'minDate', 'maxDate']) > -1) { // Decode date settings
					value = this.get('calendar').determineDate(
						value, null, this.selectedDates[0], this.get('dateFormat'), inst.getConfig());
				}
				else if (name == 'dateFormat') {
					value = value || this.get('calendar').local.dateFormat;
				}
				return value;
			},
			curMinDate: function() {
				return (this.pickingRange ? this.selectedDates[0] : this.get('minDate'));
			},
			getConfig: function() {
				return {dayNamesShort: this.get('dayNamesShort'), dayNames: this.get('dayNames'),
					monthNamesShort: this.get('monthNamesShort'), monthNames: this.get('monthNames'),
					calculateWeek: this.get('calculateWeek'),
					shortYearCutoff: this.get('shortYearCutoff')};
			}
		};
		$.data(target[0], this.dataName, inst);
		var inlineSettings = ($.fn.metadata ? target.metadata() : {});
		inst.settings = $.extend({}, settings || {}, inlineSettings || {});
		if (inst.inline) {
			this._update(target[0]);
			if ($.fn.mousewheel) {
				target.mousewheel(this._doMouseWheel);
			}
		}
		else {
			this._attachments(target, inst);
			target.bind('keydown.' + this.dataName, this._keyDown).
				bind('keypress.' + this.dataName, this._keyPress).
				bind('keyup.' + this.dataName, this._keyUp);
			if (target.attr('disabled')) {
				this.disable(target[0]);
			}
		}
	},

	/* Retrieve the settings for a calendar picker control.
	   @param  target  (element) the control to affect
	   @param  name    (string) the name of the setting (optional)
	   @return  (object) the current instance settings (name == 'all') or
	            (object) the default settings (no name) or
	            (any) the setting value (name supplied) */
	options: function(target, name) {
		var inst = $.data(target, this.dataName);
		return (inst ? (name ? (name == 'all' ?
			inst.settings : inst.settings[name]) : $.calendars.picker._defaults) : {});
	},

	/* Reconfigure the settings for a calendar picker control.
	   @param  target    (element) the control to affect
	   @param  settings  (object) the new options for this instance or
	                     (string) an individual property name
	   @param  value     (any) the individual property value (omit if settings is an object) */
	option: function(target, settings, value) {
		target = $(target);
		if (!target.hasClass(this.markerClass)) {
			return;
		}
		settings = settings || {};
		if (typeof settings == 'string') {
			var name = settings;
			settings = {};
			settings[name] = value;
		}
		var inst = $.data(target[0], this.dataName);
		if (settings.calendar && settings.calendar != inst.get('calendar')) {
			var discardDate = function(name) {
				return (typeof inst.settings[name] == 'object' ? null : inst.settings[name]);
			};
			settings = $.extend({defaultDate: discardDate('defaultDate'),
				minDate: discardDate('minDate'), maxDate: discardDate('maxDate')}, settings);
			inst.selectedDates = [];
			inst.drawDate = null;
		}
		var dates = inst.selectedDates;
		extendRemove(inst.settings, settings);
		this.setDate(target[0], dates, null, false, true);
		inst.pickingRange = false;
		var calendar = inst.get('calendar');
		inst.drawDate = this._checkMinMax(
			(settings.defaultDate ? inst.get('defaultDate') : inst.drawDate) ||
			inst.get('defaultDate') || calendar.today(), inst).newDate();
		if (!inst.inline) {
			this._attachments(target, inst);
		}
		if (inst.inline || inst.div) {
			this._update(target[0]);
		}
	},

	/* Attach events and trigger, if necessary.
	   @param  target  (jQuery) the control to affect
	   @param  inst    (object) the current instance settings */
	_attachments: function(target, inst) {
		target.unbind('focus.' + this.dataName);
		if (inst.get('showOnFocus')) {
			target.bind('focus.' + this.dataName, this.show);
		}
		if (inst.trigger) {
			inst.trigger.remove();
		}
		var trigger = inst.get('showTrigger');
		inst.trigger = (!trigger ? $([]) :
			$(trigger).clone().addClass(this._triggerClass)
				[inst.get('isRTL') ? 'insertBefore' : 'insertAfter'](target).
				click(function() {
					if (!$.calendars.picker.isDisabled(target[0])) {
						$.calendars.picker[$.calendars.picker.curInst == inst ?
							'hide' : 'show'](target[0]);
					}
				}));
		this._autoSize(target, inst);
		var dates = this._extractDates(inst, target.val());
		if (dates) {
			this.setDate(target[0], dates, null, true);
		}
		if (inst.get('selectDefaultDate') && inst.get('defaultDate') &&
				inst.selectedDates.length == 0) {
			var calendar = inst.get('calendar');
			this.setDate(target[0], 
				(inst.get('defaultDate') || calendar.today()).newDate());
		}
	},

	/* Apply the maximum length for the date format.
	   @param  inst  (object) the current instance settings */
	_autoSize: function(target, inst) {
		if (inst.get('autoSize') && !inst.inline) {
			var calendar = inst.get('calendar');
			var date = calendar.newDate(2009, 10, 20); // Ensure double digits
			var dateFormat = inst.get('dateFormat');
			if (dateFormat.match(/[DM]/)) {
				var findMax = function(names) {
					var max = 0;
					var maxI = 0;
					for (var i = 0; i < names.length; i++) {
						if (names[i].length > max) {
							max = names[i].length;
							maxI = i;
						}
					}
					return maxI;
				};
				date.month(findMax(calendar.local[dateFormat.match(/MM/) ? // Longest month
					'monthNames' : 'monthNamesShort']) + 1);
				date.day(findMax(calendar.local[dateFormat.match(/DD/) ? // Longest day
					'dayNames' : 'dayNamesShort']) + 20 - date.dayOfWeek());
			}
			inst.target.attr('size', date.formatDate(dateFormat).length);
		}
	},

	/* Remove the calendar picker functionality from a control.
	   @param  target  (element) the control to affect */
	destroy: function(target) {
		target = $(target);
		if (!target.hasClass(this.markerClass)) {
			return;
		}
		var inst = $.data(target[0], this.dataName);
		if (inst.trigger) {
			inst.trigger.remove();
		}
		target.removeClass(this.markerClass).empty().unbind('.' + this.dataName);
		if (inst.inline && $.fn.mousewheel) {
			target.unmousewheel();
		}
		if (!inst.inline && inst.get('autoSize')) {
			target.removeAttr('size');
		}
		$.removeData(target[0], this.dataName);
	},

	/* Apply multiple event functions.
	   Usage, for example: onShow: multipleEvents(fn1, fn2, ...)
	   @param  fns  (function...) the functions to apply */
	multipleEvents: function(fns) {
		var funcs = arguments;
		return function(args) {
			for (var i = 0; i < funcs.length; i++) {
				funcs[i].apply(this, arguments);
			}
		};
	},

	/* Enable the datepicker and any associated trigger.
	   @param  target  (element) the control to use */
	enable: function(target) {
		var $target = $(target);
		if (!$target.hasClass(this.markerClass)) {
			return;
		}
		var inst = $.data(target, this.dataName);
		if (inst.inline)
			$target.children('.' + this._disableClass).remove().end().
				find('button,select').attr('disabled', '').end().
				find('a').attr('href', 'javascript:void(0)');
		else {
			target.disabled = false;
			inst.trigger.filter('button.' + this._triggerClass).
				attr('disabled', '').end().
				filter('img.' + this._triggerClass).
				css({opacity: '1.0', cursor: ''});
		}
		this._disabled = $.map(this._disabled,
			function(value) { return (value == target ? null : value); }); // Delete entry
	},

	/* Disable the datepicker and any associated trigger.
	   @param  target  (element) the control to use */
	disable: function(target) {
		var $target = $(target);
		if (!$target.hasClass(this.markerClass))
			return;
		var inst = $.data(target, this.dataName);
		if (inst.inline) {
			var inline = $target.children(':last');
			var offset = inline.offset();
			var relOffset = {left: 0, top: 0};
			inline.parents().each(function() {
				if ($(this).css('position') == 'relative') {
					relOffset = $(this).offset();
					return false;
				}
			});
			var zIndex = $target.css('zIndex');
			zIndex = (zIndex == 'auto' ? 0 : parseInt(zIndex, 10)) + 1;
			$target.prepend('<div class="' + this._disableClass + '" style="' +
				'width: ' + inline.outerWidth() + 'px; height: ' + inline.outerHeight() +
				'px; left: ' + (offset.left - relOffset.left) + 'px; top: ' +
				(offset.top - relOffset.top) + 'px; z-index: ' + zIndex + '"></div>').
				find('button,select').attr('disabled', 'disabled').end().
				find('a').removeAttr('href');
		}
		else {
			target.disabled = true;
			inst.trigger.filter('button.' + this._triggerClass).
				attr('disabled', 'disabled').end().
				filter('img.' + this._triggerClass).
				css({opacity: '0.5', cursor: 'default'});
		}
		this._disabled = $.map(this._disabled,
			function(value) { return (value == target ? null : value); }); // Delete entry
		this._disabled.push(target);
	},

	/* Is the first field in a jQuery collection disabled as a datepicker?
	   @param  target  (element) the control to examine
	   @return  (boolean) true if disabled, false if enabled */
	isDisabled: function(target) {
		return (target && $.inArray(target, this._disabled) > -1);
	},

	/* Show a popup datepicker.
	   @param  target  (event) a focus event or
	                   (element) the control to use */
	show: function(target) {
		target = target.target || target;
		var inst = $.data(target, $.calendars.picker.dataName);
		if ($.calendars.picker.curInst == inst) {
			return;
		}
		if ($.calendars.picker.curInst) {
			$.calendars.picker.hide($.calendars.picker.curInst, true);
		}
		if (inst) {
			// Retrieve existing date(s)
			inst.lastVal = null;
			inst.selectedDates = $.calendars.picker._extractDates(inst, $(target).val());
			inst.pickingRange = false;
			inst.drawDate = $.calendars.picker._checkMinMax((inst.selectedDates[0] ||
				inst.get('defaultDate') || inst.get('calendar').today()).newDate(), inst);
			$.calendars.picker.curInst = inst;
			// Generate content
			$.calendars.picker._update(target, true);
			// Adjust position before showing
			var offset = $.calendars.picker._checkOffset(inst);
			inst.div.css({left: offset.left, top: offset.top});
			// And display
			var showAnim = inst.get('showAnim');
			var showSpeed = inst.get('showSpeed');
			showSpeed = (showSpeed == 'normal' && $.ui && $.ui.version >= '1.8' ?
				'_default' : showSpeed);
			var postProcess = function() {
				var cover = inst.div.find('.' + $.calendars.picker._coverClass); // IE6- only
				if (cover.length) {
					var borders = $.calendars.picker._getBorders(inst.div);
					cover.css({left: -borders[0], top: -borders[1],
						width: inst.div.outerWidth() + borders[0],
						height: inst.div.outerHeight() + borders[1]});
				}
			};
			if ($.effects && $.effects[showAnim]) {
				var data = inst.div.data(); // Update old effects data
				for (var key in data) {
					if (key.match(/^ec\.storage\./)) {
						data[key] = inst._mainDiv.css(key.replace(/ec\.storage\./, ''));
					}
				}
				inst.div.data(data).show(showAnim, inst.get('showOptions'), showSpeed, postProcess);
			}
			else {
				inst.div[showAnim || 'show']((showAnim ? showSpeed : ''), postProcess);
			}
			if (!showAnim) {
				postProcess();
			}
		}
	},

	/* Extract possible dates from a string.
	   @param  inst  (object) the current instance settings
	   @param  text  (string) the text to extract from
	   @return  (CDate[]) the extracted dates */
	_extractDates: function(inst, datesText) {
		if (datesText == inst.lastVal) {
			return;
		}
		inst.lastVal = datesText;
		var calendar = inst.get('calendar');
		var dateFormat = inst.get('dateFormat');
		var multiSelect = inst.get('multiSelect');
		var rangeSelect = inst.get('rangeSelect');
		datesText = datesText.split(multiSelect ? inst.get('multiSeparator') :
			(rangeSelect ? inst.get('rangeSeparator') : '\x00'));
		var dates = [];
		for (var i = 0; i < datesText.length; i++) {
			try {
				var date = calendar.parseDate(dateFormat, datesText[i]);
				if (date) {
					var found = false;
					for (var j = 0; j < dates.length; j++) {
						if (dates[j].compareTo(date) == 0) {
							found = true;
							break;
						}
					}
					if (!found) {
						dates.push(date);
					}
				}
			}
			catch (e) {
				// Ignore
			}
		}
		dates.splice(multiSelect || (rangeSelect ? 2 : 1), dates.length);
		if (rangeSelect && dates.length == 1) {
			dates[1] = dates[0];
		}
		return dates;
	},

	/* Update the datepicker display.
	   @param  target  (event) a focus event or
	                   (element) the control to use
	   @param  hidden  (boolean) true to initially hide the datepicker */
	_update: function(target, hidden) {
		target = $(target.target || target);
		var inst = $.data(target[0], $.calendars.picker.dataName);
		if (inst) {
			if (inst.inline || $.calendars.picker.curInst == inst) {
				var onChange = inst.get('onChangeMonthYear');
				if (onChange && (!inst.prevDate || inst.prevDate.year() != inst.drawDate.year() ||
						inst.prevDate.month() != inst.drawDate.month())) {
					onChange.apply(target[0], [inst.drawDate.year(), inst.drawDate.month()]);
				}
			}
			if (inst.inline) {
				target.html(this._generateContent(target[0], inst));
			}
			else if ($.calendars.picker.curInst == inst) {
				if (!inst.div) {
					inst.div = $('<div></div>').addClass(this._popupClass).
						css({display: (hidden ? 'none' : 'static'), position: 'absolute',
							left: target.offset().left,
							top: target.offset().top + target.outerHeight()}).
						appendTo($(inst.get('popupContainer') || 'body'));
					if ($.fn.mousewheel) {
						inst.div.mousewheel(this._doMouseWheel);
					}
				}
				inst.div.html(this._generateContent(target[0], inst));
				target.focus();
			}
		}
	},

	/* Update the input field and any alternate field with the current dates.
	   @param  target  (element) the control to use
	   @param  keyUp   (boolean, internal) true if coming from keyUp processing */
	_updateInput: function(target, keyUp) {
		var inst = $.data(target, this.dataName);
		if (inst) {
			var value = '';
			var altValue = '';
			var sep = (inst.get('multiSelect') ? inst.get('multiSeparator') :
				inst.get('rangeSeparator'));
			var calendar = inst.get('calendar');
			var dateFormat = inst.get('dateFormat') || calendar.local.dateFormat;
			var altFormat = inst.get('altFormat') || dateFormat;
			for (var i = 0; i < inst.selectedDates.length; i++) {
				value += (keyUp ? '' : (i > 0 ? sep : '') +
					calendar.formatDate(dateFormat, inst.selectedDates[i]));
				altValue += (i > 0 ? sep : '') +
					calendar.formatDate(altFormat, inst.selectedDates[i]);
			}
			if (!inst.inline && !keyUp) {
				$(target).val(value);
			}
			$(inst.get('altField')).val(altValue);
			var onSelect = inst.get('onSelect');
			if (onSelect && !keyUp && !inst.inSelect) {
				inst.inSelect = true; // Prevent endless loops
				onSelect.apply(target, [inst.selectedDates]);
				inst.inSelect = false;
			}
		}
	},

	/* Retrieve the size of left and top borders for an element.
	   @param  elem  (jQuery) the element of interest
	   @return  (number[2]) the left and top borders */
	_getBorders: function(elem) {
		var convert = function(value) {
			//var extra = ($.browser.msie ? 1 : 0);
			//return {thin: 1 + extra, medium: 3 + extra, thick: 5 + extra}[value] || value;
			return {thin: 1, medium: 3, thick: 5}[value] || value;
		};
		return [parseFloat(convert(elem.css('border-left-width'))),
			parseFloat(convert(elem.css('border-top-width')))];
	},

	/* Check positioning to remain on the screen.
	   @param  inst  (object) the current instance settings
	   @return  (object) the updated offset for the datepicker */
	_checkOffset: function(inst) {
		var base = (inst.target.is(':hidden') && inst.trigger ? inst.trigger : inst.target);
		var offset = base.offset();
		var isFixed = false;
		$(inst.target).parents().each(function() {
			isFixed |= $(this).css('position') == 'fixed';
			return !isFixed;
		});
		/*if (isFixed && $.browser.opera) { // Correction for Opera when fixed and scrolled
			offset.left -= document.documentElement.scrollLeft;
			offset.top -= document.documentElement.scrollTop;
		}
		var browserWidth = (!$.browser.mozilla || document.doctype ?
			document.documentElement.clientWidth : 0) || document.body.clientWidth;
		var browserHeight = (!$.browser.mozilla || document.doctype ?
			document.documentElement.clientHeight : 0) || document.body.clientHeight;
		 */
		var browserWidth = $(window).width();
		var browserHeight = $(window).height();
		if (browserWidth == 0) {
			return offset;
		}
		var alignment = inst.get('alignment');
		var isRTL = inst.get('isRTL');
		var scrollX = document.documentElement.scrollLeft || document.body.scrollLeft;
		var scrollY = document.documentElement.scrollTop || document.body.scrollTop;
		//var above = offset.top - inst.div.outerHeight() -
		//	(isFixed && $.browser.opera ? document.documentElement.scrollTop : 0);
		var above = offset.top - (isFixed ? scrollY : 0) - inst.div.outerHeight();
		var below = offset.top + base.outerHeight();
		var alignL = offset.left;
		//var alignR = offset.left + base.outerWidth() - inst.div.outerWidth() -
		//	(isFixed && $.browser.opera ? document.documentElement.scrollLeft : 0);
		var alignR = offset.left - (isFixed ? scrollX : 0) + base.outerWidth() - inst.div.outerWidth();
		var tooWide = (offset.left + inst.div.outerWidth() - scrollX) > browserWidth;
		var tooHigh = (offset.top + inst.target.outerHeight() + inst.div.outerHeight() -
			scrollY) > browserHeight;
		if (alignment == 'topLeft') {
			offset = {left: alignL, top: above};
		}
		else if (alignment == 'topRight') {
			offset = {left: alignR, top: above};
		}
		else if (alignment == 'bottomLeft') {
			offset = {left: alignL, top: below};
		}
		else if (alignment == 'bottomRight') {
			offset = {left: alignR, top: below};
		}
		else if (alignment == 'top') {
			offset = {left: (isRTL || tooWide ? alignR : alignL), top: above};
		}
		else { // bottom
			offset = {left: (isRTL || tooWide ? alignR : alignL),
				top: (tooHigh ? above : below)};
		}
		offset.left = Math.max((isFixed ? 0 : scrollX), offset.left - (isFixed ? scrollX : 0));
		offset.top = Math.max((isFixed ? 0 : scrollY), offset.top - (isFixed ? scrollY : 0));
		return offset;
	},

	/* Close date picker if clicked elsewhere.
	   @param  event  (MouseEvent) the mouse click to check */
	_checkExternalClick: function(event) {
		if (!$.calendars.picker.curInst) {
			return;
		}
		var target = $(event.target);
		if (!target.parents().andSelf().hasClass($.calendars.picker._popupClass) &&
				!target.hasClass($.calendars.picker.markerClass) &&
				!target.parents().andSelf().hasClass($.calendars.picker._triggerClass)) {
			$.calendars.picker.hide($.calendars.picker.curInst);
		}
	},

	/* Hide a popup datepicker.
	   @param  target     (element) the control to use or
	                      (object) the current instance settings
	   @param  immediate  (boolean) true to close immediately without animation */
	hide: function(target, immediate) {
                if ( !target ) { return; }
		var inst = $.data(target, this.dataName) || target;
		if (inst && inst == $.calendars.picker.curInst) {
			var showAnim = (immediate ? '' : inst.get('showAnim'));
			var showSpeed = inst.get('showSpeed');
			showSpeed = (showSpeed == 'normal' && $.ui && $.ui.version >= '1.8' ?
				'_default' : showSpeed);
			var postProcess = function() {
				inst.div.remove();
				inst.div = null;
				$.calendars.picker.curInst = null;
				var onClose = inst.get('onClose');
				if (onClose) {
					onClose.apply(target, [inst.selectedDates]);

				}
			};
			inst.div.stop();
			if ($.effects && $.effects[showAnim]) {
				inst.div.hide(showAnim, inst.get('showOptions'), showSpeed, postProcess);
			}
			else {
				var hideAnim = (showAnim == 'slideDown' ? 'slideUp' :
					(showAnim == 'fadeIn' ? 'fadeOut' : 'hide'));
				inst.div[hideAnim]((showAnim ? showSpeed : ''), postProcess);
			}
			if (!showAnim) {
				postProcess();
			}
		}
	},

	/* Handle keystrokes in the datepicker.
	   @param  event  (KeyEvent) the keystroke
	   @return  (boolean) true if not handled, false if handled */
	_keyDown: function(event) {
		var target = event.target;
		var inst = $.data(target, $.calendars.picker.dataName);
		var handled = false;
		if (inst.div) {
			if (event.keyCode == 9) { // Tab - close
				$.calendars.picker.hide(target);
			}
			else if (event.keyCode == 13) { // Enter - select
				$.calendars.picker.selectDate(target,
					$('a.' + inst.get('renderer').highlightedClass, inst.div)[0]);
				handled = true;
			}
			else { // Command keystrokes
				var commands = inst.get('commands');
				for (var name in commands) {
					var command = commands[name];
					if (command.keystroke.keyCode == event.keyCode &&
							!!command.keystroke.ctrlKey == !!(event.ctrlKey || event.metaKey) &&
							!!command.keystroke.altKey == event.altKey &&
							!!command.keystroke.shiftKey == event.shiftKey) {
						$.calendars.picker.performAction(target, name);
						handled = true;
						break;
					}
				}
			}
		}
		else { // Show on 'current' keystroke
			var command = inst.get('commands').current;
			if (command.keystroke.keyCode == event.keyCode &&
					!!command.keystroke.ctrlKey == !!(event.ctrlKey || event.metaKey) &&
					!!command.keystroke.altKey == event.altKey &&
					!!command.keystroke.shiftKey == event.shiftKey) {
				$.calendars.picker.show(target);
				handled = true;
			}
		}
		inst.ctrlKey = ((event.keyCode < 48 && event.keyCode != 32) ||
			event.ctrlKey || event.metaKey);
		if (handled) {
			event.preventDefault();
			event.stopPropagation();
		}
		return !handled;
	},

	/* Filter keystrokes in the datepicker.
	   @param  event  (KeyEvent) the keystroke
	   @return  (boolean) true if allowed, false if not allowed */
	_keyPress: function(event) {
		var target = event.target;
		var inst = $.data(target, $.calendars.picker.dataName);
		if (inst && inst.get('constrainInput')) {
			var ch = String.fromCharCode(event.keyCode || event.charCode);
			var allowedChars = $.calendars.picker._allowedChars(inst);
			return (event.metaKey || inst.ctrlKey || ch < ' ' ||
				!allowedChars || allowedChars.indexOf(ch) > -1);
		}
		return true;
	},

	/* Determine the set of characters allowed by the date format.
	   @param  inst  (object) the current instance settings
	   @return  (string) the set of allowed characters, or null if anything allowed */
	_allowedChars: function(inst) {
		var dateFormat = inst.get('dateFormat');
		var allowedChars = (inst.get('multiSelect') ? inst.get('multiSeparator') :
			(inst.get('rangeSelect') ? inst.get('rangeSeparator') : ''));
		var literal = false;
		var hasNum = false;
		for (var i = 0; i < dateFormat.length; i++) {
			var ch = dateFormat.charAt(i);
			if (literal) {
				if (ch == "'" && dateFormat.charAt(i + 1) != "'") {
					literal = false;
				}
				else {
					allowedChars += ch;
				}
			}
			else {
				switch (ch) {
					case 'd': case 'm': case 'o': case 'w':
						allowedChars += (hasNum ? '' : '0123456789'); hasNum = true; break;
					case 'y': case '@': case '!':
						allowedChars += (hasNum ? '' : '0123456789') + '-'; hasNum = true; break;
					case 'J':
						allowedChars += (hasNum ? '' : '0123456789') + '-.'; hasNum = true; break;
					case 'D': case 'M': case 'Y':
						return null; // Accept anything
					case "'":
						if (dateFormat.charAt(i + 1) == "'") {
							allowedChars += "'";
						}
						else {
							literal = true;
						}
						break;
					default:
						allowedChars += ch;
				}
			}
		}
		return allowedChars;
	},

	/* Synchronise datepicker with the field.
	   @param  event  (KeyEvent) the keystroke
	   @return  (boolean) true if allowed, false if not allowed */
	_keyUp: function(event) {
		var target = event.target;
		var inst = $.data(target, $.calendars.picker.dataName);
		if (inst && !inst.ctrlKey && inst.lastVal != inst.target.val()) {
			try {
				var dates = $.calendars.picker._extractDates(inst, inst.target.val());
				if (dates.length > 0) {
					$.calendars.picker.setDate(target, dates, null, true);
				}
			}
			catch (event) {
				// Ignore
			}
		}
		return true;
	},

	/* Increment/decrement month/year on mouse wheel activity.
	   @param  event  (event) the mouse wheel event
	   @param  delta  (number) the amount of change */
	_doMouseWheel: function(event, delta) {
		var target = ($.calendars.picker.curInst && $.calendars.picker.curInst.target[0]) ||
			$(event.target).closest('.' + $.calendars.picker.markerClass)[0];
		if ($.calendars.picker.isDisabled(target)) {
			return;
		}
		var inst = $.data(target, $.calendars.picker.dataName);
		if (inst.get('useMouseWheel')) {
			//delta = ($.browser.opera ? -delta : delta);
			delta = (delta < 0 ? -1 : +1);
			$.calendars.picker.changeMonth(target,
				-inst.get(event.ctrlKey ? 'monthsToJump' : 'monthsToStep') * delta);
		}
		event.preventDefault();
	},

	/* Clear an input and close a popup datepicker.
	   @param  target  (element) the control to use */
	clear: function(target) {
		var inst = $.data(target, this.dataName);
		if (inst) {
			inst.selectedDates = [];
			this.hide(target);
			if (inst.get('selectDefaultDate') && inst.get('defaultDate')) {
				var calendar = inst.get('calendar');
				this.setDate(target, (inst.get('defaultDate') || calendar.today()).newDate());
			}
			else {
				this._updateInput(target);
			}
		}
	},

	/* Retrieve the selected date(s) for a calendar picker.
	   @param  target  (element) the control to examine
	   @return  (CDate[]) the selected date(s) */
	getDate: function(target) {
		var inst = $.data(target, this.dataName);
		return (inst ? inst.selectedDates : []);
	},

	/* Set the selected date(s) for a calendar picker.
	   @param  target   (element) the control to examine
	   @param  dates    (CDate or number or string or [] of these) the selected date(s)
	   @param  endDate  (CDate or number or string) the ending date for a range (optional)
	   @param  keyUp    (boolean, internal) true if coming from keyUp processing
	   @param  setOpt   (boolean, internal) true if coming from option processing */
	setDate: function(target, dates, endDate, keyUp, setOpt) {
		var inst = $.data(target, this.dataName);
		if (inst) {
			if (!$.isArray(dates)) {
				dates = [dates];
				if (endDate) {
					dates.push(endDate);
				}
			}
			var calendar = inst.get('calendar');
			var dateFormat = inst.get('dateFormat');
			var minDate = inst.get('minDate');
			var maxDate = inst.get('maxDate');
			var curDate = inst.selectedDates[0];
			inst.selectedDates = [];
			for (var i = 0; i < dates.length; i++) {
				var date = calendar.determineDate(
					dates[i], null, curDate, dateFormat, inst.getConfig());
				if (date) {
					if ((!minDate || date.compareTo(minDate) != -1) &&
							(!maxDate || date.compareTo(maxDate) != +1)) {
						var found = false;
						for (var j = 0; j < inst.selectedDates.length; j++) {
							if (inst.selectedDates[j].compareTo(date) == 0) {
								found = true;
								break;
							}
						}
						if (!found) {
							inst.selectedDates.push(date);
						}
					}
				}
			}
			var rangeSelect = inst.get('rangeSelect');
			inst.selectedDates.splice(inst.get('multiSelect') ||
				(rangeSelect ? 2 : 1), inst.selectedDates.length);
			if (rangeSelect) {
				switch (inst.selectedDates.length) {
					case 1: inst.selectedDates[1] = inst.selectedDates[0]; break;
					case 2: inst.selectedDates[1] =
						(inst.selectedDates[0].compareTo(inst.selectedDates[1]) == +1 ?
						inst.selectedDates[0] : inst.selectedDates[1]); break;
				}
				inst.pickingRange = false;
			}
			inst.prevDate = (inst.drawDate ? inst.drawDate.newDate() : null);
			inst.drawDate = this._checkMinMax((inst.selectedDates[0] ||
				inst.get('defaultDate') || calendar.today()).newDate(), inst);
			if (!setOpt) {
				this._update(target);
				this._updateInput(target, keyUp);
			}
		}
	},

	/* Determine whether a date is selectable for this datepicker.
	   @param  target  (element) the control to check
	   @param  date    (Date or string or number) the date to check
	   @return  (boolean) true if selectable, false if not */
	isSelectable: function(target, date) {
		var inst = $.data(target, this.dataName);
		if (!inst) {
			return false;
		}
		date = inst.get('calendar').determineDate(date,
			inst.selectedDates[0] || inst.get('calendar').today(), null,
			inst.get('dateFormat'), inst.getConfig());
		return this._isSelectable(target, date, inst.get('onDate'),
			inst.get('minDate'), inst.get('maxDate'));
	},

	/* Internally determine whether a date is selectable for this datepicker.
	   @param  target   (element) the control to check
	   @param  date     (Date) the date to check
	   @param  onDate   (function or boolean) any onDate callback or callback.selectable
	   @param  mindate  (Date) the minimum allowed date
	   @param  maxdate  (Date) the maximum allowed date
	   @return  (boolean) true if selectable, false if not */
	_isSelectable: function(target, date, onDate, minDate, maxDate) {
		var dateInfo = (typeof onDate == 'boolean' ? {selectable: onDate} :
			(!onDate ? {} : onDate.apply(target, [date, true])));
		return (dateInfo.selectable != false) &&
			(!minDate || date.toJD() >= minDate.toJD()) &&
			(!maxDate || date.toJD() <= maxDate.toJD());
	},

	/* Perform a named action for a calendar picker.
	   @param  target  (element) the control to affect
	   @param  action  (string) the name of the action */
	performAction: function(target, action) {
		var inst = $.data(target, this.dataName);
		if (inst && !this.isDisabled(target)) {
			var commands = inst.get('commands');
			if (commands[action] && commands[action].enabled.apply(target, [inst])) {
				commands[action].action.apply(target, [inst]);
			}
		}
	},

	/* Set the currently shown month, defaulting to today's.
	   @param  target  (element) the control to affect
	   @param  year    (number) the year to show (optional)
	   @param  month   (number) the month to show (optional)
	   @param  day     (number) the day to show (optional) */
	showMonth: function(target, year, month, day) {
		var inst = $.data(target, this.dataName);
		if (inst && (day != null ||
				(inst.drawDate.year() != year || inst.drawDate.month() != month))) {
			inst.prevDate = inst.drawDate.newDate();
			var calendar = inst.get('calendar');
			var show = this._checkMinMax((year != null ?
				calendar.newDate(year, month, 1) : calendar.today()), inst);
			inst.drawDate.date(show.year(), show.month(), 
				(day != null ? day : Math.min(inst.drawDate.day(),
				calendar.daysInMonth(show.year(), show.month()))));
			this._update(target);
		}
	},

	/* Adjust the currently shown month.
	   @param  target  (element) the control to affect
	   @param  offset  (number) the number of months to change by */
	changeMonth: function(target, offset) {
		var inst = $.data(target, this.dataName);
		if (inst) {
			var date = inst.drawDate.newDate().add(offset, 'm');
			this.showMonth(target, date.year(), date.month());
		}
	},

	/* Adjust the currently shown day.
	   @param  target  (element) the control to affect
	   @param  offset  (number) the number of days to change by */
	changeDay: function(target, offset) {
		var inst = $.data(target, this.dataName);
		if (inst) {
			var date = inst.drawDate.newDate().add(offset, 'd');
			this.showMonth(target, date.year(), date.month(), date.day());
		}
	},

	/* Restrict a date to the minimum/maximum specified.
	   @param  date  (CDate) the date to check
	   @param  inst  (object) the current instance settings */
	_checkMinMax: function(date, inst) {
		var minDate = inst.get('minDate');
		var maxDate = inst.get('maxDate');
		date = (minDate && date.compareTo(minDate) == -1 ? minDate.newDate() : date);
		date = (maxDate && date.compareTo(maxDate) == +1 ? maxDate.newDate() : date);
		return date;
	},

	/* Retrieve the date associated with an entry in the datepicker.
	   @param  target  (element) the control to examine
	   @param  elem    (element) the selected datepicker element
	   @return  (CDate) the corresponding date, or null */
	retrieveDate: function(target, elem) {
		var inst = $.data(target, this.dataName);
		return (!inst ? null : inst.get('calendar').fromJD(
			parseFloat(elem.className.replace(/^.*jd(\d+\.5).*$/, '$1'))));
	},

	/* Select a date for this datepicker.
	   @param  target  (element) the control to examine
	   @param  elem    (element) the selected datepicker element */
	selectDate: function(target, elem) {
		var inst = $.data(target, this.dataName);
		if (inst && !this.isDisabled(target)) {
			var date = this.retrieveDate(target, elem);
			var multiSelect = inst.get('multiSelect');
			var rangeSelect = inst.get('rangeSelect');
			if (multiSelect) {
				var found = false;
				for (var i = 0; i < inst.selectedDates.length; i++) {
					if (date.compareTo(inst.selectedDates[i]) == 0) {
						inst.selectedDates.splice(i, 1);
						found = true;
						break;
					}
				}
				if (!found && inst.selectedDates.length < multiSelect) {
					inst.selectedDates.push(date);
				}
			}
			else if (rangeSelect) {
				if (inst.pickingRange) {
					inst.selectedDates[1] = date;
				}
				else {
					inst.selectedDates = [date, date];
				}
				inst.pickingRange = !inst.pickingRange;
			}
			else {
				inst.selectedDates = [date];
			}
			this._updateInput(target);
			if (inst.inline || inst.pickingRange || inst.selectedDates.length <
					(multiSelect || (rangeSelect ? 2 : 1))) {
				this._update(target);
			}
			else {
				this.hide(target);
			}
		}
	},

	/* Generate the datepicker content for this control.
	   @param  target  (element) the control to affect
	   @param  inst    (object) the current instance settings
	   @return  (jQuery) the datepicker content */
	_generateContent: function(target, inst) {
		var calendar = inst.get('calendar');
		var renderer = inst.get('renderer');
		var monthsToShow = inst.get('monthsToShow');
		monthsToShow = ($.isArray(monthsToShow) ? monthsToShow : [1, monthsToShow]);
		inst.drawDate = this._checkMinMax(
			inst.drawDate || inst.get('defaultDate') || calendar.today(), inst);
		var drawDate = inst.drawDate.newDate().add(-inst.get('monthsOffset'), 'm');
		// Generate months
		var monthRows = '';
		for (var row = 0; row < monthsToShow[0]; row++) {
			var months = '';
			for (var col = 0; col < monthsToShow[1]; col++) {
				months += this._generateMonth(target, inst, drawDate.year(),
					drawDate.month(), calendar, renderer, (row == 0 && col == 0));
				drawDate.add(1, 'm');
			}
			monthRows += this._prepare(renderer.monthRow, inst).replace(/\{months\}/, months);
		}
		/*var picker = this._prepare(renderer.picker, inst).replace(/\{months\}/, monthRows).
			replace(/\{weekHeader\}/g, this._generateDayHeaders(inst, calendar, renderer)) +
			($.browser.msie && parseInt($.browser.version, 10) < 7 && !inst.inline ?
			'<iframe src="javascript:void(0);" class="' + this._coverClass + '"></iframe>' : '');
		 */
		var picker = this._prepare(inst.options.renderer.picker, inst).replace(/\{months\}/, monthRows).
		replace(/\{weekHeader\}/g, this._generateDayHeaders(inst, inst.options.calendar, inst.options.renderer));
		// Add commands
		var commands = inst.get('commands');
		var asDateFormat = inst.get('commandsAsDateFormat');
		var addCommand = function(type, open, close, name, classes) {
			if (picker.indexOf('{' + type + ':' + name + '}') == -1) {
				return;
			}
			var command = commands[name];
			var date = (asDateFormat ? command.date.apply(target, [inst]) : null);
			picker = picker.replace(new RegExp('\\{' + type + ':' + name + '\\}', 'g'),
				'<' + open +
				(command.status ? ' title="' + inst.get(command.status) + '"' : '') +
				' class="' + renderer.commandClass + ' ' +
				renderer.commandClass + '-' + name + ' ' + classes +
				(command.enabled(inst) ? '' : ' ' + renderer.disabledClass) + '">' +
				(date ? date.formatDate(inst.get(command.text)) : inst.get(command.text)) +
				'</' + close + '>');
		};
		for (var name in commands) {
			addCommand('button', 'button type="button"', 'button', name,
				renderer.commandButtonClass);
			addCommand('link', 'a href="javascript:void(0)"', 'a', name,
				renderer.commandLinkClass);
		}
		picker = $(picker);
		if (monthsToShow[1] > 1) {
			var count = 0;
			$(renderer.monthSelector, picker).each(function() {
				var nth = ++count % monthsToShow[1];
				$(this).addClass(nth == 1 ? 'first' : (nth == 0 ? 'last' : ''));
			});
		}
		// Add calendar behaviour
		var self = this;
		picker.find(renderer.daySelector + ' a').hover(
				function() { $(this).addClass(renderer.highlightedClass); },
				function() {
					(inst.inline ? $(this).parents('.' + self.markerClass) : inst.div).
						find(renderer.daySelector + ' a').
						removeClass(renderer.highlightedClass);
				}).
			click(function() {
				self.selectDate(target, this);
			}).end().
			find('select.' + this._monthYearClass + ':not(.' + this._anyYearClass + ')').change(function() {
				var monthYear = $(this).val().split('/');
				self.showMonth(target, parseInt(monthYear[1], 10), parseInt(monthYear[0], 10));
			}).end().
			find('select.' + this._anyYearClass).click(function() {
				$(this).next('input').css({left: this.offsetLeft, top: this.offsetTop,
					width: this.offsetWidth, height: this.offsetHeight}).show().focus();
			}).end().
			find('input.' + self._monthYearClass).change(function() {
				try {
					var year = parseInt($(this).val(), 10);
					year = (isNaN(year) ? inst.drawDate.year() : year);
					self.showMonth(target, year, inst.drawDate.month(), inst.drawDate.day());
				}
				catch (e) {
					alert(e);
				}
			}).keydown(function(event) {
				if (event.keyCode == 27) { // Escape
					$(event.target).hide();
					inst.target.focus();
				}
			});
		// Add command behaviour
		picker.find('.' + renderer.commandClass).click(function() {
				if (!$(this).hasClass(renderer.disabledClass)) {
					var action = this.className.replace(
						new RegExp('^.*' + renderer.commandClass + '-([^ ]+).*$'), '$1');
					$.calendars.picker.performAction(target, action);
				}
			});
		// Add classes
		if (inst.get('isRTL')) {
			picker.addClass(renderer.rtlClass);
		}
		if (monthsToShow[0] * monthsToShow[1] > 1) {
			picker.addClass(renderer.multiClass);
		}
		var pickerClass = inst.get('pickerClass');
		if (pickerClass) {
			picker.addClass(pickerClass);
		}
		// Resize
		$('body').append(picker);
		var width = 0;
		picker.find(renderer.monthSelector).each(function() {
			width += $(this).outerWidth();
		});
		picker.width(width / monthsToShow[0]);
		// Pre-show customisation
		var onShow = inst.get('onShow');
		if (onShow) {
			onShow.apply(target, [picker, calendar, inst]);
		}
		return picker;
	},

	/* Generate the content for a single month.
	   @param  target    (element) the control to affect
	   @param  inst      (object) the current instance settings
	   @param  year      (number) the year to generate
	   @param  month     (number) the month to generate
	   @param  calendar  (*Calendar) the current calendar
	   @param  renderer  (object) the rendering templates
	   @param  first     (boolean) true if first of multiple months
	   @return  (string) the month content */
	_generateMonth: function(target, inst, year, month, calendar, renderer, first) {
		var daysInMonth = calendar.daysInMonth(year, month);
		var monthsToShow = inst.get('monthsToShow');
		monthsToShow = ($.isArray(monthsToShow) ? monthsToShow : [1, monthsToShow]);
		var fixedWeeks = inst.get('fixedWeeks') || (monthsToShow[0] * monthsToShow[1] > 1);
		var firstDay = inst.get('firstDay');
		firstDay = (firstDay == null ? calendar.local.firstDay : firstDay);
		var leadDays = (calendar.dayOfWeek(year, month, calendar.minDay) -
			firstDay + calendar.daysInWeek()) % calendar.daysInWeek();
		var numWeeks = (fixedWeeks ? 6 : Math.ceil((leadDays + daysInMonth) / calendar.daysInWeek()));
		var showOtherMonths = inst.get('showOtherMonths');
		var selectOtherMonths = inst.get('selectOtherMonths') && showOtherMonths;
		var dayStatus = inst.get('dayStatus');
		var minDate = (inst.pickingRange ? inst.selectedDates[0] : inst.get('minDate'));
		var maxDate = inst.get('maxDate');
		var rangeSelect = inst.get('rangeSelect');
		var onDate = inst.get('onDate');
		var showWeeks = renderer.week.indexOf('{weekOfYear}') > -1;
		var calculateWeek = inst.get('calculateWeek');
		var today = calendar.today();
		var drawDate = calendar.newDate(year, month, calendar.minDay);
		drawDate.add(-leadDays - (fixedWeeks &&
			(drawDate.dayOfWeek() == firstDay || drawDate.daysInMonth() < calendar.daysInWeek())?
			calendar.daysInWeek() : 0), 'd');
		var jd = drawDate.toJD();
		// Generate weeks
		var weeks = '';
		for (var week = 0; week < numWeeks; week++) {
			var weekOfYear = (!showWeeks ? '' : '<span class="jd' + jd + '">' +
				(calculateWeek ? calculateWeek(drawDate) : drawDate.weekOfYear()) + '</span>');
			var days = '';
			for (var day = 0; day < calendar.daysInWeek(); day++) {
				var selected = false;
				if (rangeSelect && inst.selectedDates.length > 0) {
					selected = (drawDate.compareTo(inst.selectedDates[0]) != -1 &&
						drawDate.compareTo(inst.selectedDates[1]) != +1)
				}
				else {
					for (var i = 0; i < inst.selectedDates.length; i++) {
						if (inst.selectedDates[i].compareTo(drawDate) == 0) {
							selected = true;
							break;
						}
					}
				}
				var dateInfo = (!onDate ? {} :
					onDate.apply(target, [drawDate, drawDate.month() == month]));
				var selectable = (selectOtherMonths || drawDate.month() == month) &&
					this._isSelectable(target, drawDate, dateInfo.selectable, minDate, maxDate);
				days += this._prepare(renderer.day, inst).replace(/\{day\}/g,
					(selectable ? '<a href="javascript:void(0)"' : '<span') +
					' class="jd' + jd + ' ' + (dateInfo.dateClass || '') +
					(selected && (selectOtherMonths || drawDate.month() == month) ?
					' ' + renderer.selectedClass : '') +
					(selectable ? ' ' + renderer.defaultClass : '') +
					(drawDate.weekDay() ? '' : ' ' + renderer.weekendClass) +
					(drawDate.month() == month ? '' : ' ' + renderer.otherMonthClass) +
					(drawDate.compareTo(today) == 0 && drawDate.month() == month ?
					' ' + renderer.todayClass : '') +
					(drawDate.compareTo(inst.drawDate) == 0 && drawDate.month() == month ?
					' ' + renderer.highlightedClass : '') + '"' +
					(dateInfo.title || (dayStatus && selectable) ? ' title="' +
					(dateInfo.title || drawDate.formatDate(dayStatus)) + '"' : '') + '>' +
					(showOtherMonths || drawDate.month() == month ?
					dateInfo.content || drawDate.day() : '&nbsp;') +
					(selectable ? '</a>' : '</span>'));
				drawDate.add(1, 'd');
				jd++;
			}
			weeks += this._prepare(renderer.week, inst).replace(/\{days\}/g, days).
				replace(/\{weekOfYear\}/g, weekOfYear);
		}
		var monthHeader = this._prepare(renderer.month, inst).match(/\{monthHeader(:[^\}]+)?\}/);
		monthHeader = (monthHeader[0].length <= 13 ? 'MM yyyy' :
			monthHeader[0].substring(13, monthHeader[0].length - 1));
		monthHeader = (first ? this._generateMonthSelection(
			inst, year, month, minDate, maxDate, monthHeader, calendar, renderer) :
			calendar.formatDate(monthHeader, calendar.newDate(year, month, calendar.minDay)));
		var weekHeader = this._prepare(renderer.weekHeader, inst).
			replace(/\{days\}/g, this._generateDayHeaders(inst, calendar, renderer));
		return this._prepare(renderer.month, inst).replace(/\{monthHeader(:[^\}]+)?\}/g, monthHeader).
			replace(/\{weekHeader\}/g, weekHeader).replace(/\{weeks\}/g, weeks);
	},

	/* Generate the HTML for the day headers.
	   @param  inst      (object) the current instance settings
	   @param  calendar  (*Calendar) the current calendar
	   @param  renderer  (object) the rendering templates
	   @return  (string) a week's worth of day headers */
	_generateDayHeaders: function(inst, calendar, renderer) {
		var firstDay = inst.get('firstDay');
		firstDay = (firstDay == null ? calendar.local.firstDay : firstDay);
		var header = '';
		for (var day = 0; day < calendar.daysInWeek(); day++) {
			var dow = (day + firstDay) % calendar.daysInWeek();
			header += this._prepare(renderer.dayHeader, inst).replace(/\{day\}/g,
				'<span class="' + this._curDoWClass + dow + '" title="' +
				calendar.local.dayNames[dow] + '"><h5>' +
				calendar.local.dayNamesMin[dow] + '</h5></span>');

		}
		return header;
	},

	/* Generate selection controls for month.
	   @param  inst         (object) the current instance settings
	   @param  year         (number) the year to generate
	   @param  month        (number) the month to generate
	   @param  minDate      (CDate) the minimum date allowed
	   @param  maxDate      (CDate) the maximum date allowed
	   @param  monthHeader  (string) the month/year format
	   @param  calendar     (*Calendar) the current calendar
	   @return  (string) the month selection content */
	_generateMonthSelection: function(inst, year, month, minDate, maxDate, monthHeader, calendar) {
		if (!inst.get('changeMonth')) {
			return calendar.formatDate(monthHeader, calendar.newDate(year, month, 1));
		}
		// Months
		var monthNames = calendar.local[
			'monthNames' + (monthHeader.match(/mm/i) ? '' : 'Short')];
		var html = monthHeader.replace(/m+/i, '\\x2E').replace(/y+/i, '\\x2F');
		/*var selector = '<select class="' + this._monthYearClass +
			'" title="' + inst.get('monthStatus') + '">';
		var maxMonth = calendar.monthsInYear(year) + calendar.minMonth;
		for (var m = calendar.minMonth; m < maxMonth; m++) {
			if ((!minDate || calendar.newDate(year, m,
					calendar.daysInMonth(year, m) - 1 + calendar.minDay).
					compareTo(minDate) != -1) &&
					(!maxDate || calendar.newDate(year, m, calendar.minDay).
					compareTo(maxDate) != +1)) {
				selector += '<option value="' + m + '/' + year + '"' +
					(month == m ? ' selected="selected"' : '') + '>' +
					monthNames[m - calendar.minMonth] + '</option>';
			}
		}
		selector += '</select>';*/
		var selector = '<div class="' + this._monthYearClass +
			'">';
		var maxMonth = calendar.monthsInYear(year) + calendar.minMonth;
		for (var m = calendar.minMonth; m < maxMonth; m++) {
			if ((!minDate || calendar.newDate(year, m,
					calendar.daysInMonth(year, m) - 1 + calendar.minDay).
					compareTo(minDate) != -1) &&
				(!maxDate || calendar.newDate(year, m, calendar.minDay).
					compareTo(maxDate) != +1)) {
				if(month == m){
				selector += '<span id="' + m + '/' + year + '"' +
					'selected="selected" ><h5>' +
					monthNames[m - calendar.minMonth] + '</h5></span>' };
			}
		}
		selector += '</div>';

		html = html.replace(/\\x2E/, selector);
		// Years
		var yearRange = inst.get('yearRange');
		if (yearRange == 'any') {
			selector = '<select class="' + this._monthYearClass + ' ' + this._anyYearClass +
				'">' +
				'<option>' + year + '</option></select>' +
				'<input class="' + this._monthYearClass + ' ' + this._curMonthClass +
				month + '" value="' + year + '">';
		}
		else {
			yearRange = yearRange.split(':');
			var todayYear = calendar.today().year();
			var start = (yearRange[0].match('c[+-].*') ? year + parseInt(yearRange[0].substring(1), 10) :
				((yearRange[0].match('[+-].*') ? todayYear : 0) + parseInt(yearRange[0], 10)));
			var end = (yearRange[1].match('c[+-].*') ? year + parseInt(yearRange[1].substring(1), 10) :
				((yearRange[1].match('[+-].*') ? todayYear : 0) + parseInt(yearRange[1], 10)));
			selector = '<div class="' + this._monthYearClass +
				'">';
			start = calendar.newDate(start + 1, calendar.firstMonth, calendar.minDay).add(-1, 'd');
			end = calendar.newDate(end, calendar.firstMonth, calendar.minDay);
			var addYear = function(y) {
				if (y != 0 || calendar.hasYearZero) {
                    if(y == year) {
						selector += '<span id="' +
							Math.min(month, calendar.monthsInYear(y) - 1 + calendar.minMonth) +
							'/' + y + '"' + (year == y ? ' selected="selected"' : '') + '><h5>' +
							y + '</h5></span>';
					}
				}
			};
			if (start.toJD() < end.toJD()) {
				start = (minDate && minDate.compareTo(start) == +1 ? minDate : start).year();
				end = (maxDate && maxDate.compareTo(end) == -1 ? maxDate : end).year();
				for (var y = start; y <= end; y++) {
					addYear(y);
				}
			}
			else {
				start = (maxDate && maxDate.compareTo(start) == -1 ? maxDate : start).year();
				end = (minDate && minDate.compareTo(end) == +1 ? minDate : end).year();
				for (var y = start; y >= end; y--) {
					addYear(y);
				}
			}
			selector += '</div>';
		}
		html = html.replace(/\\x2F/, selector);
		return html;
	},

	/* Prepare a render template for use.
	   Exclude popup/inline sections that are not applicable.
	   Localise text of the form: {l10n:name}.
	   @param  text  (string) the text to localise
	   @param  inst  (object) the current instance settings
	   @return  (string) the localised text */
	_prepare: function(text, inst) {
		var replaceSection = function(type, retain) {
			while (true) {
				var start = text.indexOf('{' + type + ':start}');
				if (start == -1) {
					return;
				}
				var end = text.substring(start).indexOf('{' + type + ':end}');
				if (end > -1) {
					text = text.substring(0, start) +
						(retain ? text.substr(start + type.length + 8, end - type.length - 8) : '') +
						text.substring(start + end + type.length + 6);
				}
			}
		};
		replaceSection('inline', inst.inline);
		replaceSection('popup', !inst.inline);
		var pattern = /\{l10n:([^\}]+)\}/;
		var matches = null;
		while (matches = pattern.exec(text)) {
			text = text.replace(matches[0], inst.get(matches[1]));
		}
		return text;
	}
});

/* jQuery extend now ignores nulls!
   @param  target  (object) the object to extend
   @param  props   (object) the new settings
   @return  (object) the updated object */
function extendRemove(target, props) {
	$.extend(target, props);
	for (var name in props)
		if (props[name] == null || props[name] == undefined)
			target[name] = props[name];
	return target;
};

/* Attach the calendar picker functionality to a jQuery selection.
   @param  command  (string) the command to run (optional, default 'attach')
   @param  options  (object) the new settings to use for these instances (optional)
   @return  (jQuery) for chaining further calls */
$.fn.calendarsPicker = function(options) {
	var otherArgs = Array.prototype.slice.call(arguments, 1);
	if ($.inArray(options, ['getDate', 'isDisabled', 'isSelectable', 'options', 'retrieveDate']) > -1) {
		return $.calendars.picker[options].apply($.calendars.picker, [this[0]].concat(otherArgs));
	}
	return this.each(function() {
		if (typeof options == 'string') {
			$.calendars.picker[options].apply($.calendars.picker, [this].concat(otherArgs));
		}
		else {
			$.calendars.picker._attachPicker(this, options || {});
		}
	});
};

/* Initialise the calendar picker functionality. */
$.calendars.picker = new CalendarsPicker(); // singleton instance

$(function() {
	$(document).mousedown($.calendars.picker._checkExternalClick).
		resize(function() { $.calendars.picker.hide($.calendars.picker.curInst); });
});

})(jQuery);

var process = process || {env: {NODE_ENV: "development"}};
﻿/* http://keith-wood.name/calendars.html
   Calendars date picker extensions for jQuery v1.1.4.
   Written by Keith Wood (kbwood{at}iinet.com.au) August 2009.
   Dual licensed under the GPL (http://dev.jquery.com/browser/trunk/jquery/GPL-LICENSE.txt) and
   MIT (http://dev.jquery.com/browser/trunk/jquery/MIT-LICENSE.txt) licenses.
   Please attribute the author if you use it. */

(function($) { // Hide scope, no $ conflict

var themeRollerRenderer = {
	picker: '<div{popup:start} id="ui-datepicker-div"{popup:end} class="ui-datepicker ui-calendar-widget ' +
	'ui-widget-content ui-helper-clearfix ui-corner-all{inline:start} ui-datepicker-inline{inline:end}">' +
	'{months}' +
	'{popup:start}<div class="ui-datepicker-header ui-datepicker-footer ui-widget-header ui-helper-clearfix ' +
	'ui-corner-all">{button:clear}{button:close}</div>{popup:end}' +
	'<div class="ui-helper-clearfix"></div></div>',
	monthRow: '<div class="ui-datepicker-row-break">{months}</div>',
	month: '<div class="ui-datepicker-group">' +
	'<div class="ui-datepicker-header ui-widget-header ui-helper-clearfix ui-corner-all">{link:prevJump}<div class="vertical-line">|</div>{link:prev}<span>{monthHeader:MM yyyy}</span>{link:next}<div class="vertical-line">|</div>{link:nextJump}{link:close}</div>' +
	'<div class="ui-datepicker-weekheader">{weekHeader}</div><table class="ui-datepicker-calendar"><tbody>{weeks}</tbody></table></div>',
	weekHeader: '<table class=""><tbody><tr>{days}</tr></tbody></table>',
	dayHeader: '<td>{day}</td>',

	week: '<tr>{days}</tr>',
	day: '<td>{day}</td>',
	monthSelector: '.ui-datepicker-group',
	daySelector: 'td',
	rtlClass: 'ui-datepicker-rtl',
	multiClass: 'ui-datepicker-multi',
	defaultClass: 'ui-state-default',
	selectedClass: 'ui-state-active',
	highlightedClass: 'ui-state-hover',
	todayClass: 'ui-state-highlight',
	otherMonthClass: 'ui-datepicker-other-month',
	weekendClass: 'ui-datepicker-week-end',
	commandClass: 'ui-datepicker-cmd',
	commandButtonClass: 'ui-state-default ui-corner-all',
	commandLinkClass: '',
	disabledClass: 'ui-datepicker-disabled'
};

$.extend($.calendars.picker, {

	// Template for generating a calendar picker showing week of year.
	weekOfYearRenderer: $.extend({}, $.calendars.picker.defaultRenderer, {
		weekHeader: '<tr><th class="calendars-week">' +
		'<span title="{l10n:weekStatus}">{l10n:weekText}</span></th>{days}</tr>',
		week: '<tr><td class="calendars-week">{weekOfYear}</td>{days}</tr>'
	}),

	// ThemeRoller template for generating a calendar picker.
	themeRollerRenderer: themeRollerRenderer,

	// ThemeRoller template for generating a calendar picker showing week of year.
	themeRollerWeekOfYearRenderer: $.extend({}, themeRollerRenderer, {
		weekHeader: '<tr><th class="ui-state-hover"><span>{l10n:weekText}</span></th>{days}</tr>',
		week: '<tr><td class="ui-state-hover">{weekOfYear}</td>{days}</tr>'
	}),

	/* Don't allow weekends to be selected.
	   Usage: onDate: $.calendars.picker.noWeekends.
	   @param  date  (CDate) the current date
	   @return  (object) information about this date */
	noWeekends: function(date) {
		return {selectable: date.weekDay()};
	},

	/* Change the first day of the week by clicking on the day header.
	   Usage: onShow: $.calendars.picker.changeFirstDay.
	   @param  picker    (jQuery) the completed datepicker division
	   @param  calendar  (*Calendar) the calendar implementation
	   @param  inst      (object) the current instance settings */
	changeFirstDay: function(picker, calendar, inst) {
		var target = $(this);
		picker.find('th span').each(function() {
			if (this.parentNode.className.match(/.*calendars-week.*/)) {
				return;
			}
			$('<a href="javascript:void(0)" class="' + this.className +
					'" title="Change first day of the week">' + $(this).text() + '</a>').
				click(function() {
					var dow = parseInt(this.className.replace(/^.*calendars-dow-(\d+).*$/, '$1'), 10);
					target.calendarsPicker('option', {firstDay: dow});
				}).
				replaceAll(this);
		});
	},

	/* Add a callback when hovering over dates.
	   Usage: onShow: $.calendars.picker.hoverCallback(handleHover).
	   @param  onHover  (function) the callback when hovering,
	                    it receives the current date and a flag indicating selectability
	                    as parameters on entry, and no parameters on exit,
	                    this refers to the target input or division */
	hoverCallback: function(onHover) {
		return function(picker, calendar, inst) {
			var target = this;
			var renderer = inst.get('renderer');
			picker.find(renderer.daySelector + ' a, ' + renderer.daySelector + ' span').
				hover(function() {
					onHover.apply(target, [$.calendars.picker.retrieveDate(target, this),
						this.nodeName.toLowerCase() == 'a']);
				},
				function() { onHover.apply(target, []); });
		};
	},

	/* Highlight the entire week when hovering over it.
	   Usage: onShow: $.calendars.picker.highlightWeek.
	   @param  picker    (jQuery) the completed datepicker division
	   @param  calendar  (*Calendar) the calendar implementation
	   @param  inst      (object) the current instance settings */
	highlightWeek: function(picker, calendar, inst) {
		var target = this;
		var renderer = inst.get('renderer');
		picker.find(renderer.daySelector + ' a, ' + renderer.daySelector + ' span').
			hover(function() {
				$(this).parents('tr').find(renderer.daySelector + ' *').
					addClass(renderer.highlightedClass);
			},
			function() {
				$(this).parents('tr').find(renderer.daySelector + ' *').
					removeClass(renderer.highlightedClass);
			});
	},

	/* Show a status bar with messages.
	   Usage: onShow: $.calendars.picker.showStatus.
	   @param  picker    (jQuery) the completed datepicker division
	   @param  calendar  (*Calendar) the calendar implementation
	   @param  inst      (object) the current instance settings */
	showStatus: function(picker, calendar, inst) {
		var target = this;
		var renderer = inst.get('renderer');
		var isTR = (renderer.selectedClass == 'ui-state-active');
		var defaultStatus = inst.get('defaultStatus') || '&nbsp;';
		var status = $('<div class="' + (!isTR ? 'calendars-status' :
			'ui-datepicker-status ui-widget-header ui-helper-clearfix ui-corner-all') + '">' +
			defaultStatus + '</div>').
			insertAfter(picker.find('.calendars-month-row:last,.ui-datepicker-row-break:last'));
		picker.find('*[title]').each(function() {
				var title = $(this).attr('title');
				$(this).removeAttr('title').hover(
					function() { status.text(title || defaultStatus); },
					function() { status.text(defaultStatus); });
			});
	},

	/* Allow easier navigation by month.
	   Usage: onShow: $.calendars.picker.monthNavigation.
	   @param  picker    (jQuery) the completed datepicker division
	   @param  calendar  (*Calendar) the calendar implementation
	   @param  inst      (object) the current instance settings */
	monthNavigation: function(picker, calendar, inst) {
		var target = $(this);
		var renderer = inst.get('renderer');
		var isTR = (renderer.selectedClass == 'ui-state-active');
		var minDate = inst.curMinDate();
		var maxDate = inst.get('maxDate');
		var monthNames = calendar.local.monthNames;
		var monthNamesShort = calendar.local.monthNamesShort;
		var year = inst.drawDate.year();
		var html = '<div class="' + (!isTR ? 'calendars-month-nav' : 'ui-datepicker-month-nav') + '">';
		for (var i = 0; i < calendar.monthsInYear(year); i++) {
			var ord = calendar.fromMonthOfYear(year, i + calendar.minMonth) - calendar.minMonth;
			var inRange = ((!minDate || calendar.newDate(year, i + calendar.minMonth,
				calendar.daysInMonth(year, i + calendar.minMonth)).compareTo(minDate) > -1) && (!maxDate ||
				calendar.newDate(year, i + calendar.minMonth, calendar.minDay).compareTo(maxDate) < +1));
			html += '<div>' + (inRange ? '<a href="#" class="jd' +
				calendar.newDate(year, i + calendar.minMonth, calendar.minDay).toJD() + '"' : '<span') +
				' title="' + monthNames[ord] + '">' + monthNamesShort[ord] +
				(inRange ? '</a>' : '</span>') + '</div>';
		}
		html += '</div>';
		$(html).insertAfter(picker.find('div.calendars-nav,div.ui-datepicker-header:first')).
			find('a').click(function() {
				var date = $.calendars.picker.retrieveDate(target[0], this);
				target.calendarsPicker('showMonth', date.year(), date.month());
				return false;
			});
	},

	/* Select an entire week when clicking on a week number.
	   Use in conjunction with weekOfYearRenderer.
	   Usage: onShow: $.calendars.picker.selectWeek.
	   @param  picker    (jQuery) the completed datepicker division
	   @param  calendar  (*Calendar) the calendar implementation
	   @param  inst      (object) the current instance settings */
	selectWeek: function(picker, calendar, inst) {
		var target = $(this);
		picker.find('td.calendars-week span').each(function() {
			$('<a href="javascript:void(0)" class="' +
					this.className + '" title="Select the entire week">' +
					$(this).text() + '</a>').
				click(function() {
					var date = target.calendarsPicker('retrieveDate', this);
					var dates = [date];
					for (var i = 1; i < calendar.daysInWeek(); i++) {
						dates.push(date = date.newDate().add(1, 'd'));
					}
					if (inst.get('rangeSelect')) {
						dates.splice(1, dates.length - 2);
					}
					target.calendarsPicker('setDate', dates).calendarsPicker('hide');
				}).
				replaceAll(this);
		});
	},

	/* Select an entire month when clicking on the week header.
	   Use in conjunction with weekOfYearRenderer.
	   Usage: onShow: $.calendars.picker.selectMonth.
	   @param  picker    (jQuery) the completed datepicker division
	   @param  calendar  (*Calendar) the calendar implementation
	   @param  inst      (object) the current instance settings */
	selectMonth: function(picker, calendar, inst) {
		var target = $(this);
		picker.find('th.calendars-week').each(function() {
			$('<a href="javascript:void(0)" title="Select the entire month">' +
					$(this).text() + '</a>').
				click(function() {
					var date = target.calendarsPicker('retrieveDate', $(this).parents('table').
						find('td:not(.calendars-week) *:not(.calendars-other-month)')[0]);
					var dates = [date.day(1)];
					var dim = calendar.daysInMonth(date);
					for (var i = 1; i < dim; i++) {
						dates.push(date = date.newDate().add(1, 'd'));
					}
					if (inst.get('rangeSelect')) {
						dates.splice(1, dates.length - 2);
					}
					target.calendarsPicker('setDate', dates).calendarsPicker('hide');
				}).
				appendTo(this);
		});
	},

	/* Select a month only instead of a single day.
	   Usage: onShow: $.calendars.picker.monthOnly.
	   @param  picker    (jQuery) the completed datepicker division
	   @param  calendar  (*Calendar) the calendar implementation
	   @param  inst      (object) the current instance settings */
	monthOnly: function(picker, calendar, inst) {
		var target = $(this);
		var selectMonth = $('<div style="text-align: center;"><button type="button">Select</button></div>').
			insertAfter(picker.find('.calendars-month-row:last,.ui-datepicker-row-break:last')).
			children().click(function() {
				var monthYear = picker.find('.calendars-month-year:first').val().split('/');
				target.calendarsPicker('setDate', calendar.newDate(
					parseInt(monthYear[1], 10), parseInt(monthYear[0], 10), calendar.minDay)).
					calendarsPicker('hide');
			});
		picker.find('.calendars-month-row table,.ui-datepicker-row-break table').remove();
	}
});

})(jQuery);

var process = process || {env: {NODE_ENV: "development"}};
﻿/* http://keith-wood.name/calendars.html
   Islamic calendar for jQuery v1.1.4.
   Written by Keith Wood (kbwood{at}iinet.com.au) August 2009.
   Dual licensed under the GPL (http://dev.jquery.com/browser/trunk/jquery/GPL-LICENSE.txt) and 
   MIT (http://dev.jquery.com/browser/trunk/jquery/MIT-LICENSE.txt) licenses. 
   Please attribute the author if you use it. */

(function($) { // Hide scope, no $ conflict

/* Implementation of the Islamic or '16 civil' calendar.
   Based on code from http://www.iranchamber.com/calendar/converter/iranian_calendar_converter.php.
   See also http://en.wikipedia.org/wiki/Islamic_calendar.
   @param  language  (string) the language code (default English) for localisation (optional) */
function IslamicCalendar(language) {
	this.local = this.regional[language || ''] || this.regional[''];
}

IslamicCalendar.prototype = new $.calendars.baseCalendar;

$.extend(IslamicCalendar.prototype, {
	name: 'Islamic', // The calendar name
	jdEpoch: 1948439.5, // Julian date of start of Islamic epoch: 16 July 622 CE
	daysPerMonth: [30, 29, 30, 29, 30, 29, 30, 29, 30, 29, 30, 29], // Days per month in a common year
	hasYearZero: false, // True if has a year zero, false if not
	minMonth: 1, // The minimum month number
	firstMonth: 1, // The first month in the year
	minDay: 1, // The minimum day number

	regional: { // Localisations
		'': {
			name: 'Islamic', // The calendar name
			epochs: ['BH', 'AH'],
			monthNames: ['Muharram', 'Safar', 'Rabi\' al-awwal', 'Rabi\' al-thani', 'Jumada al-awwal', 'Jumada al-thani',
			'Rajab', 'Sha\'aban', 'Ramadan', 'Shawwal', 'Dhu al-Qi\'dah', 'Dhu al-Hijjah'],
			monthNamesShort: ['Muh', 'Saf', 'Rab1', 'Rab2', 'Jum1', 'Jum2', 'Raj', 'Sha\'', 'Ram', 'Shaw', 'DhuQ', 'DhuH'],
			dayNames: ['Yawm al-ahad', 'Yawm al-ithnayn', 'Yawm ath-thulaathaa\'',
			'Yawm al-arbi\'aa\'', 'Yawm al-khamīs', 'Yawm al-jum\'a', 'Yawm as-sabt'],
			dayNamesShort: ['Aha', 'Ith', 'Thu', 'Arb', 'Kha', 'Jum', 'Sab'],
			dayNamesMin: ['Ah','It','Th','Ar','Kh','Ju','Sa'],
			dateFormat: 'yyyy/mm/dd', // See format options on BaseCalendar.formatDate
			firstDay: 6, // The first day of the week, Sun = 0, Mon = 1, ...
			isRTL: false // True if right-to-left language, false if left-to-right
		}
	},

	/* Determine whether this date is in a leap year.
	   @param  year  (CDate) the date to examine or
	                 (number) the year to examine
	   @return  (boolean) true if this is a leap year, false if not
	   @throws  error if an invalid year or a different calendar used */
	leapYear: function(year) {
		var date = this._validate(year, this.minMonth, this.minDay, $.calendars.local.invalidYear);
		return (date.year() * 11 + 14) % 30 < 11;
	},

	/* Determine the week of the year for a date.
	   @param  year   (CDate) the date to examine or
	                  (number) the year to examine
	   @param  month  (number) the month to examine
	   @param  day    (number) the day to examine
	   @return  (number) the week of the year
	   @throws  error if an invalid date or a different calendar used */
	weekOfYear: function(year, month, day) {
		// Find Sunday of this week starting on Sunday
		var checkDate = this.newDate(year, month, day);
		checkDate.add(-checkDate.dayOfWeek(), 'd');
		return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;
	},

	/* Retrieve the number of days in a year.
	   @param  year   (CDate) the date to examine or
	                  (number) the year to examine
	   @return  (number) the number of days
	   @throws  error if an invalid year or a different calendar used */
	daysInYear: function(year) {
		return (this.leapYear(year) ? 355 : 354);
	},

	/* Retrieve the number of days in a month.
	   @param  year   (CDate) the date to examine or
	                  (number) the year of the month
	   @param  month  (number) the month
	   @return  (number) the number of days in this month
	   @throws  error if an invalid month/year or a different calendar used */
	daysInMonth: function(year, month) {
		var date = this._validate(year, month, this.minDay, $.calendars.local.invalidMonth);
		return this.daysPerMonth[date.month() - 1] +
			(date.month() == 12 && this.leapYear(date.year()) ? 1 : 0);
	},

	/* Determine whether this date is a week day.
	   @param  year   (CDate) the date to examine or
	                  (number) the year to examine
	   @param  month  (number) the month to examine
	   @param  day    (number) the day to examine
	   @return  (boolean) true if a week day, false if not
	   @throws  error if an invalid date or a different calendar used */
	weekDay: function(year, month, day) {
		return this.dayOfWeek(year, month, day) != 5;
	},

	/* Retrieve the Julian date equivalent for this date,
	   i.e. days since January 1, 4713 BCE Greenwich noon.
	   @param  year   (CDate) the date to convert or
	                  (number) the year to convert
	   @param  month  (number) the month to convert
	   @param  day    (number) the day to convert
	   @return  (number) the equivalent Julian date
	   @throws  error if an invalid date or a different calendar used */
	toJD: function(year, month, day) {
		var date = this._validate(year, month, day, $.calendars.local.invalidDate);
		year = date.year();
		month = date.month();
		day = date.day();
		year = (year <= 0 ? year + 1 : year);
		return day + Math.ceil(29.5 * (month - 1)) + (year - 1) * 354 +
			Math.floor((3 + (11 * year)) / 30) + this.jdEpoch - 1;
	},

	/* Create a new date from a Julian date.
	   @param  jd  (number) the Julian date to convert
	   @return  (CDate) the equivalent date */
	fromJD: function(jd) {
		jd = Math.floor(jd) + 0.5;
		var year = Math.floor((30 * (jd - this.jdEpoch) + 10646) / 10631);
		year = (year <= 0 ? year - 1 : year);
		var month = Math.min(12, Math.ceil((jd - 29 - this.toJD(year, 1, 1)) / 29.5) + 1);
		var day = jd - this.toJD(year, month, 1) + 1;
		return this.newDate(year, month, day);
	}
});

// Islamic (16 civil) calendar implementation
$.calendars.calendars.islamic = IslamicCalendar;

})(jQuery);
var process = process || {env: {NODE_ENV: "development"}};
/* http://keith-wood.name/timeEntry.html
   Time entry for jQuery v1.5.1.
   Written by Keith Wood (kbwood{at}iinet.com.au) June 2007.
   Licensed under the MIT (https://github.com/jquery/jquery/blob/master/MIT-LICENSE.txt) license.
   Please attribute the author if you use it. */

/* Turn an input field into an entry point for a time value.
   The time can be entered via directly typing the value,
   via the arrow keys, or via spinner buttons.
   It is configurable to show 12 or 24-hour time, to show or hide seconds,
   to enforce a minimum and/or maximum time, to change the spinner image,
   and to constrain the time to steps, e.g. only on the quarter hours.
   Attach it with $('input selector').timeEntry(); for default settings,
   or configure it with options like:
   $('input selector').timeEntry(
      {spinnerImage: 'spinnerSquare.png', spinnerSize: [20, 20, 0]}); */

(function($) { // Hide scope, no $ conflict

/* TimeEntry manager.
   Use the singleton instance of this class, $.timeEntry, to interact with the time entry
   functionality. Settings for (groups of) fields are maintained in an instance object,
   allowing multiple different settings on the same page. */
function TimeEntry() {
	this._disabledInputs = []; // List of time entry inputs that have been disabled
	this.regional = []; // Available regional settings, indexed by language code
	this.regional[''] = { // Default regional settings
		show24Hours: false, // True to use 24 hour time, false for 12 hour (AM/PM)
		separator: ':', // The separator between time fields
		ampmPrefix: '', // The separator before the AM/PM text
		ampmNames: ['AM', 'PM'], // Names of morning/evening markers
		spinnerTexts: ['Now', 'Previous field', 'Next field', 'Increment', 'Decrement']
		// The popup texts for the spinner image areas
	};
	this._defaults = {
		appendText: '', // Display text following the input box, e.g. showing the format
		showSeconds: false, // True to show seconds as well, false for hours/minutes only
		timeSteps: [1, 1, 1], // Steps for each of hours/minutes/seconds when incrementing/decrementing
		initialField: 0, // The field to highlight initially, 0 = hours, 1 = minutes, ...
		noSeparatorEntry: false, // True to move to next sub-field after two digits entry
		useMouseWheel: true, // True to use mouse wheel for increment/decrement if possible,
			// false to never use it
		defaultTime: null, // The time to use if none has been set, leave at null for now
		minTime: null, // The earliest selectable time, or null for no limit
		maxTime: null, // The latest selectable time, or null for no limit
		spinnerImage: 'spinnerDefault.png', // The URL of the images to use for the time spinner
			// Seven images packed horizontally for normal, each button pressed, and disabled
		spinnerSize: [20, 20, 8], // The width and height of the spinner image,
			// and size of centre button for current time
		spinnerBigImage: '', // The URL of the images to use for the expanded time spinner
			// Seven images packed horizontally for normal, each button pressed, and disabled
		spinnerBigSize: [40, 40, 16], // The width and height of the expanded spinner image,
			// and size of centre button for current time
		spinnerIncDecOnly: false, // True for increment/decrement buttons only, false for all
		spinnerRepeat: [500, 250], // Initial and subsequent waits in milliseconds
			// for repeats on the spinner buttons
		beforeShow: null, // Function that takes an input field and
			// returns a set of custom settings for the time entry
		beforeSetTime: null // Function that runs before updating the time,
			// takes the old and new times, and minimum and maximum times as parameters,
			// and returns an adjusted time if necessary
	};
	$.extend(this._defaults, this.regional['']);
}

$.extend(TimeEntry.prototype, {
	/* Class name added to elements to indicate already configured with time entry. */
	markerClassName: 'hasTimeEntry',
	/* Name of the data property for instance settings. */
	propertyName: 'timeEntry',

	/* Class name for the appended content. */
	_appendClass: 'timeEntry_append',
	/* Class name for the time entry control. */
	_controlClass: 'timeEntry_control',
	/* Class name for the expanded spinner. */
	_expandClass: 'timeEntry_expand',

	/* Override the default settings for all instances of the time entry.
	   @param  options  (object) the new settings to use as defaults (anonymous object)
	   @return  (DateEntry) this object */
	setDefaults: function(options) {
		$.extend(this._defaults, options || {});
		return this;
	},

	/* Attach the time entry handler to an input field.
	   @param  target   (element) the field to attach to
	   @param  options  (object) custom settings for this instance */
	_attachPlugin: function(target, options) {
		var input = $(target);
		if (input.hasClass(this.markerClassName)) {
			return;
		}
		var inst = {options: $.extend({}, this._defaults, options), input: input, _field: 0,
			_selectedHour: 0, _selectedMinute: 0, _selectedSecond: 0};
		input.data(this.propertyName, inst).addClass(this.markerClassName).
			bind('focus.' + this.propertyName, this._doFocus).
			bind('blur.' + this.propertyName, this._doBlur).
			bind('click.' + this.propertyName, this._doClick).
			bind('keydown.' + this.propertyName, this._doKeyDown).
			bind('keypress.' + this.propertyName, this._doKeyPress).
			bind('paste.' + this.propertyName, function(event) { // Check pastes
				setTimeout(function() { plugin._parseTime(inst); }, 1);
			});
		this._optionPlugin(target, options);
	},

	/* Retrieve or reconfigure the settings for a time entry control.
	   @param  target   (element) the control to affect
	   @param  options  (object) the new options for this instance or
	                    (string) an individual property name
	   @param  value    (any) the individual property value (omit if options
	                    is an object or to retrieve the value of a setting)
	   @return  (any) if retrieving a value  */
	_optionPlugin: function(target, options, value) {
		target = $(target);
		var inst = target.data(this.propertyName);
		if (!options || (typeof options == 'string' && value == null)) { // Get option
			var name = options;
			options = (inst || {}).options;
			return (options && name ? options[name] : options);
		}

		if (!target.hasClass(this.markerClassName)) {
			return;
		}
		options = options || {};
		if (typeof options == 'string') {
			var name = options;
			options = {};
			options[name] = value;
		}
		var currentTime = this._extractTime(inst);
		$.extend(inst.options, options);
		inst._field = 0;
		if (currentTime) {
			this._setTime(inst, new Date(0, 0, 0, currentTime[0], currentTime[1], currentTime[2]));
		}
		// Remove stuff dependent on old settings
		target.next('span.' + this._appendClass).remove();
		target.parent().find('span.' + this._controlClass).remove();
		if ($.fn.mousewheel) {
			target.unmousewheel();
		}
		// And re-add if requested
		var spinner = (!inst.options.spinnerImage ? null :
			$('<span class="' + this._controlClass + '" style="display: inline-block; ' +
			'background: url(\'' + inst.options.spinnerImage + '\') 0 0 no-repeat; width: ' +
			inst.options.spinnerSize[0] + 'px; height: ' + inst.options.spinnerSize[1] + 'px;"></span>'));
		target.after(inst.options.appendText ? '<span class="' + this._appendClass + '">' +
			inst.options.appendText + '</span>' : '').after(spinner || '');
		// Allow mouse wheel usage
		if (inst.options.useMouseWheel && $.fn.mousewheel) {
			target.mousewheel(this._doMouseWheel);
		}
		if (spinner) {
			spinner.mousedown(this._handleSpinner).mouseup(this._endSpinner).
				mouseover(this._expandSpinner).mouseout(this._endSpinner).
				mousemove(this._describeSpinner);
		}
	},

	/* Enable a time entry input and any associated spinner.
	   @param  target  (element) single input field */
	_enablePlugin: function(target) {
		this._enableDisable(target, false);
	},

	/* Disable a time entry input and any associated spinner.
	   @param  target  (element) single input field */
	_disablePlugin: function(target) {
		this._enableDisable(target, true);
	},

	/* Enable or disable a time entry input and any associated spinner.
	   @param  target   (element) single input field
	   @param  disable  (boolean) true to disable, false to enable */
	_enableDisable: function(target, disable) {
		var inst = $.data(target, this.propertyName);
		if (!inst) {
			return;
		}
		target.disabled = disable;
		if (target.nextSibling && target.nextSibling.nodeName.toLowerCase() == 'span') {
			plugin._changeSpinner(inst, target.nextSibling, (disable ? 5 : -1));
		}
		plugin._disabledInputs = $.map(plugin._disabledInputs,
			function(value) { return (value == target ? null : value); }); // Delete entry
		if (disable) {
			plugin._disabledInputs.push(target);
		}
	},

	/* Check whether an input field has been disabled.
	   @param  target  (element) input field to check
	   @return  (boolean) true if this field has been disabled, false if it is enabled */
	_isDisabledPlugin: function(target) {
		return $.inArray(target, this._disabledInputs) > -1;
	},

	/* Remove the time entry functionality from an input.
	   @param  target  (element) the control to affect */
	_destroyPlugin: function(target) {
		target = $(target);
		if (!target.hasClass(this.markerClassName)) {
			return;
		}
		target.removeClass(this.markerClassName).removeData(this.propertyName).
			unbind('.' + this.propertyName);
		if ($.fn.mousewheel) {
			target.unmousewheel();
		}
		this._disabledInputs = $.map(this._disabledInputs,
			function(value) { return (value == target[0] ? null : value); }); // Delete entry
		target.siblings('.' + this._appendClass + ',.' + this._controlClass).remove();
	},

	/* Initialise the current time for a time entry input field.
	   @param  target  (element) input field to update
	   @param  time    (Date) the new time (year/month/day ignored) or null for now */
	_setTimePlugin: function(target, time) {
		var inst = $.data(target, this.propertyName);
		if (inst) {
			if (time === null || time === '') {
				inst.input.val('');
			}
			else {
				this._setTime(inst, time ? (typeof time == 'object' ?
					new Date(time.getTime()) : time) : null);
			}
		}
	},

	/* Retrieve the current time for a time entry input field.
	   @param  target  (element) input field to examine
	   @return  (Date) current time (year/month/day zero) or null if none */
	_getTimePlugin: function(target) {
		var inst = $.data(target, this.propertyName);
		var currentTime = (inst ? this._extractTime(inst) : null);
		return (!currentTime ? null :
			new Date(0, 0, 0, currentTime[0], currentTime[1], currentTime[2]));
	},

	/* Retrieve the millisecond offset for the current time.
	   @param  target  (element) input field to examine
	   @return  (number) the time as milliseconds offset or zero if none */
	_getOffsetPlugin: function(target) {
		var inst = $.data(target, this.propertyName);
		var currentTime = (inst ? this._extractTime(inst) : null);
		return (!currentTime ? 0 :
			(currentTime[0] * 3600 + currentTime[1] * 60 + currentTime[2]) * 1000);
	},

	/* Initialise time entry.
	   @param  target  (element) the input field or
	                   (event) the focus event */
	_doFocus: function(target) {
		var input = (target.nodeName && target.nodeName.toLowerCase() == 'input' ? target : this);
		if (plugin._lastInput == input || plugin._isDisabledPlugin(input)) {
			plugin._focussed = false;
			return;
		}
		var inst = $.data(input, plugin.propertyName);
		plugin._focussed = true;
		plugin._lastInput = input;
		plugin._blurredInput = null;
		$.extend(inst.options, ($.isFunction(inst.options.beforeShow) ?
			inst.options.beforeShow.apply(input, [input]) : {}));
		plugin._parseTime(inst);
		setTimeout(function() { plugin._showField(inst); }, 10);
	},

	/* Note that the field has been exited.
	   @param  event  (event) the blur event */
	_doBlur: function(event) {
		plugin._blurredInput = plugin._lastInput;
		plugin._lastInput = null;
	},

	/* Select appropriate field portion on click, if already in the field.
	   @param  event  (event) the click event */
	_doClick: function(event) {
		var input = event.target;
		var inst = $.data(input, plugin.propertyName);
		if (!plugin._focussed) {
			var fieldSize = inst.options.separator.length + 2;
			inst._field = 0;
			if (input.selectionStart != null) { // Use input select range
				for (var field = 0; field <= Math.max(1, inst._secondField, inst._ampmField); field++) {
					var end = (field != inst._ampmField ? (field * fieldSize) + 2 :
						(inst._ampmField * fieldSize) + inst.options.ampmPrefix.length +
						inst.options.ampmNames[0].length);
					inst._field = field;
					if (input.selectionStart < end) {
						break;
					}
				}
			}
			else if (input.createTextRange) { // Check against bounding boxes
				var src = $(event.srcElement);
				var range = input.createTextRange();
				var convert = function(value) {
					return {thin: 2, medium: 4, thick: 6}[value] || value;
				};
				var offsetX = event.clientX + document.documentElement.scrollLeft -
					(src.offset().left + parseInt(convert(src.css('border-left-width')), 10)) -
					range.offsetLeft; // Position - left edge - alignment
				for (var field = 0; field <= Math.max(1, inst._secondField, inst._ampmField); field++) {
					var end = (field != inst._ampmField ? (field * fieldSize) + 2 :
						(inst._ampmField * fieldSize) + inst.options.ampmPrefix.length +
						inst.options.ampmNames[0].length);
					range.collapse();
					range.moveEnd('character', end);
					inst._field = field;
					if (offsetX < range.boundingWidth) { // And compare
						break;
					}
				}
			}
		}
		plugin._showField(inst);
		plugin._focussed = false;
	},

	/* Handle keystrokes in the field.
	   @param  event  (event) the keydown event
	   @return  (boolean) true to continue, false to stop processing */
	_doKeyDown: function(event) {
		if (event.keyCode >= 48) { // >= '0'
			return true;
		}
		var inst = $.data(event.target, plugin.propertyName);
		switch (event.keyCode) {
			case 9: return (event.shiftKey ?
						// Move to previous time field, or out if at the beginning
						plugin._changeField(inst, -1, true) :
						// Move to next time field, or out if at the end
						plugin._changeField(inst, +1, true));
			case 35: if (event.ctrlKey) { // Clear time on ctrl+end
						plugin._setValue(inst, '');
					}
					else { // Last field on end
						inst._field = Math.max(1, inst._secondField, inst._ampmField);
						plugin._adjustField(inst, 0);
					}
					break;
			case 36: if (event.ctrlKey) { // Current time on ctrl+home
						plugin._setTime(inst);
					}
					else { // First field on home
						inst._field = 0;
						plugin._adjustField(inst, 0);
					}
					break;
			case 37: plugin._changeField(inst, -1, false); break; // Previous field on left
			case 38: plugin._adjustField(inst, +1); break; // Increment time field on up
			case 39: plugin._changeField(inst, +1, false); break; // Next field on right
			case 40: plugin._adjustField(inst, -1); break; // Decrement time field on down
			case 46: plugin._setValue(inst, ''); break; // Clear time on delete
			default: return true;
		}
		return false;
	},

	/* Disallow unwanted characters.
	   @param  event  (event) the keypress event
	   @return  (boolean) true to continue, false to stop processing */
	_doKeyPress: function(event) {
		var chr = String.fromCharCode(event.charCode == undefined ? event.keyCode : event.charCode);
		if (chr < ' ') {
			return true;
		}
		var inst = $.data(event.target, plugin.propertyName);
		plugin._handleKeyPress(inst, chr);
		return false;
	},

	/* Increment/decrement on mouse wheel activity.
	   @param  event  (event) the mouse wheel event
	   @param  delta  (number) the amount of change */
	_doMouseWheel: function(event, delta) {
		if (plugin._isDisabledPlugin(event.target)) {
			return;
		}
		var inst = $.data(event.target, plugin.propertyName);
		inst.input.focus();
		if (!inst.input.val()) {
			plugin._parseTime(inst);
		}
		plugin._adjustField(inst, delta);
		event.preventDefault();
	},

	/* Expand the spinner, if possible, to make it easier to use.
	   @param  event  (event) the mouse over event */
	_expandSpinner: function(event) {
		var spinner = plugin._getSpinnerTarget(event);
		var inst = $.data(plugin._getInput(spinner), plugin.propertyName);
		if (plugin._isDisabledPlugin(inst.input[0])) {
			return;
		}
		if (inst.options.spinnerBigImage) {
			inst._expanded = true;
			var offset = $(spinner).offset();
			var relative = null;
			$(spinner).parents().each(function() {
				var parent = $(this);
				if (parent.css('position') == 'relative' ||
						parent.css('position') == 'absolute') {
					relative = parent.offset();
				}
				return !relative;
			});
			$('<div class="' + plugin._expandClass + '" style="position: absolute; left: ' +
				(offset.left - (inst.options.spinnerBigSize[0] - inst.options.spinnerSize[0]) / 2 -
				(relative ? relative.left : 0)) + 'px; top: ' +
				(offset.top - (inst.options.spinnerBigSize[1] - inst.options.spinnerSize[1]) / 2 -
				(relative ? relative.top : 0)) + 'px; width: ' +
				inst.options.spinnerBigSize[0] + 'px; height: ' +
				inst.options.spinnerBigSize[1] + 'px; background: transparent url(' +
				inst.options.spinnerBigImage + ') no-repeat 0px 0px; z-index: 10;"></div>').
				mousedown(plugin._handleSpinner).mouseup(plugin._endSpinner).
				mouseout(plugin._endExpand).mousemove(plugin._describeSpinner).
				insertAfter(spinner);
		}
	},

	/* Locate the actual input field from the spinner.
	   @param  spinner  (element) the current spinner
	   @return  (element) the corresponding input */
	_getInput: function(spinner) {
		return $(spinner).siblings('.' + plugin.markerClassName)[0];
	},

	/* Change the title based on position within the spinner.
	   @param  event  (event) the mouse move event */
	_describeSpinner: function(event) {
		var spinner = plugin._getSpinnerTarget(event);
		var inst = $.data(plugin._getInput(spinner), plugin.propertyName);
		spinner.title = inst.options.spinnerTexts[plugin._getSpinnerRegion(inst, event)];
	},

	/* Handle a click on the spinner.
	   @param  event  (event) the mouse click event */
	_handleSpinner: function(event) {
		var spinner = plugin._getSpinnerTarget(event);
		var input = plugin._getInput(spinner);
		if (plugin._isDisabledPlugin(input)) {
			return;
		}
		if (input == plugin._blurredInput) {
			plugin._lastInput = input;
			plugin._blurredInput = null;
		}
		var inst = $.data(input, plugin.propertyName);
		plugin._doFocus(input);
		var region = plugin._getSpinnerRegion(inst, event);
		plugin._changeSpinner(inst, spinner, region);
		plugin._actionSpinner(inst, region);
		plugin._timer = null;
		plugin._handlingSpinner = true;
		if (region >= 3 && inst.options.spinnerRepeat[0]) { // Repeat increment/decrement
			plugin._timer = setTimeout(
				function() { plugin._repeatSpinner(inst, region); },
				inst.options.spinnerRepeat[0]);
			$(spinner).one('mouseout', plugin._releaseSpinner).
				one('mouseup', plugin._releaseSpinner);
		}
	},

	/* Action a click on the spinner.
	   @param  inst    (object) the instance settings
	   @param  region  (number) the spinner "button" */
	_actionSpinner: function(inst, region) {
		if (!inst.input.val()) {
			plugin._parseTime(inst);
		}
		switch (region) {
			case 0: this._setTime(inst); break;
			case 1: this._changeField(inst, -1, false); break;
			case 2: this._changeField(inst, +1, false); break;
			case 3: this._adjustField(inst, +1); break;
			case 4: this._adjustField(inst, -1); break;
		}
	},

	/* Repeat a click on the spinner.
	   @param  inst    (object) the instance settings
	   @param  region  (number) the spinner "button" */
	_repeatSpinner: function(inst, region) {
		if (!plugin._timer) {
			return;
		}
		plugin._lastInput = plugin._blurredInput;
		this._actionSpinner(inst, region);
		this._timer = setTimeout(
			function() { plugin._repeatSpinner(inst, region); },
			inst.options.spinnerRepeat[1]);
	},

	/* Stop a spinner repeat.
	   @param  event  (event) the mouse event */
	_releaseSpinner: function(event) {
		clearTimeout(plugin._timer);
		plugin._timer = null;
	},

	/* Tidy up after an expanded spinner.
	   @param  event  (event) the mouse event */
	_endExpand: function(event) {
		plugin._timer = null;
		var spinner = plugin._getSpinnerTarget(event);
		var input = plugin._getInput(spinner);
		var inst = $.data(input, plugin.propertyName);
		$(spinner).remove();
		inst._expanded = false;
	},

	/* Tidy up after a spinner click.
	   @param  event  (event) the mouse event */
	_endSpinner: function(event) {
		plugin._timer = null;
		var spinner = plugin._getSpinnerTarget(event);
		var input = plugin._getInput(spinner);
		var inst = $.data(input, plugin.propertyName);
		if (!plugin._isDisabledPlugin(input)) {
			plugin._changeSpinner(inst, spinner, -1);
		}
		if (plugin._handlingSpinner) {
			plugin._lastInput = plugin._blurredInput;
		}
		if (plugin._lastInput && plugin._handlingSpinner) {
			plugin._showField(inst);
		}
		plugin._handlingSpinner = false;
	},

	/* Retrieve the spinner from the event.
	   @param  event  (event) the mouse click event
	   @return  (element) the target field */
	_getSpinnerTarget: function(event) {
		return event.target || event.srcElement;
	},

	/* Determine which "button" within the spinner was clicked.
	   @param  inst   (object) the instance settings
	   @param  event  (event) the mouse event
	   @return  (number) the spinner "button" number */
	_getSpinnerRegion: function(inst, event) {
		var spinner = this._getSpinnerTarget(event);
		var pos = $(spinner).offset();
		var scrolled = [document.documentElement.scrollLeft || document.body.scrollLeft,
			document.documentElement.scrollTop || document.body.scrollTop];
		var left = (inst.options.spinnerIncDecOnly ? 99 : event.clientX + scrolled[0] - pos.left);
		var top = event.clientY + scrolled[1] - pos.top;
		var spinnerSize = inst.options[inst._expanded ? 'spinnerBigSize' : 'spinnerSize'];
		var right = (inst.options.spinnerIncDecOnly ? 99 : spinnerSize[0] - 1 - left);
		var bottom = spinnerSize[1] - 1 - top;
		if (spinnerSize[2] > 0 && Math.abs(left - right) <= spinnerSize[2] &&
				Math.abs(top - bottom) <= spinnerSize[2]) {
			return 0; // Centre button
		}
		var min = Math.min(left, top, right, bottom);
		return (min == left ? 1 : (min == right ? 2 : (min == top ? 3 : 4))); // Nearest edge
	},

	/* Change the spinner image depending on button clicked.
	   @param  inst     (object) the instance settings
	   @param  spinner  (element) the spinner control
	   @param  region   (number) the spinner "button" */
	_changeSpinner: function(inst, spinner, region) {
		$(spinner).css('background-position', '-' + ((region + 1) *
			inst.options[inst._expanded ? 'spinnerBigSize' : 'spinnerSize'][0]) + 'px 0px');
	},

	/* Extract the time value from the input field, or default to now.
	   @param  inst  (object) the instance settings */
	_parseTime: function(inst) {
		var currentTime = this._extractTime(inst);
		if (currentTime) {
			inst._selectedHour = currentTime[0];
			inst._selectedMinute = currentTime[1];
			inst._selectedSecond = currentTime[2];
		}
		else {
			var now = this._constrainTime(inst);
			inst._selectedHour = now[0];
			inst._selectedMinute = now[1];
			inst._selectedSecond = (inst.options.showSeconds ? now[2] : 0);
		}
		inst._secondField = (inst.options.showSeconds ? 2 : -1);
		inst._ampmField = (inst.options.show24Hours ? -1 : (inst.options.showSeconds ? 3 : 2));
		inst._lastChr = '';
		inst._field = Math.max(0, Math.min(
			Math.max(1, inst._secondField, inst._ampmField), inst.options.initialField));
		if (inst.input.val() != '') {
			this._showTime(inst);
		}
	},

	/* Extract the time value from a string as an array of values, or default to null.
	   @param  inst   (object) the instance settings
	   @param  value  (string) the time value to parse
	   @return  (number[3]) the time components (hours, minutes, seconds)
	            or null if no value */
	_extractTime: function(inst, value) {
		value = value || inst.input.val();
		var currentTime = value.split(inst.options.separator);
		if (inst.options.separator == '' && value != '') {
			currentTime[0] = value.substring(0, 2);
			currentTime[1] = value.substring(2, 4);
			currentTime[2] = value.substring(4, 6);
		}
		if (currentTime.length >= 2) {
			var isAM = !inst.options.show24Hours && (value.indexOf(inst.options.ampmNames[0]) > -1);
			var isPM = !inst.options.show24Hours && (value.indexOf(inst.options.ampmNames[1]) > -1);
			var hour = parseInt(currentTime[0], 10);
			hour = (isNaN(hour) ? 0 : hour);
			hour = ((isAM || isPM) && hour == 12 ? 0 : hour) + (isPM ? 12 : 0);
			var minute = parseInt(currentTime[1], 10);
			minute = (isNaN(minute) ? 0 : minute);
			var second = (currentTime.length >= 3 ?
				parseInt(currentTime[2], 10) : 0);
			second = (isNaN(second) || !inst.options.showSeconds ? 0 : second);
			return this._constrainTime(inst, [hour, minute, second]);
		} 
		return null;
	},

	/* Constrain the given/current time to the time steps.
	   @param  inst    (object) the instance settings
	   @param  fields  (number[3]) the current time components (hours, minutes, seconds)
	   @return  (number[3]) the constrained time components (hours, minutes, seconds) */
	_constrainTime: function(inst, fields) {
		var specified = (fields != null);
		if (!specified) {
			var now = this._determineTime(inst.options.defaultTime, inst) || new Date();
			fields = [now.getHours(), now.getMinutes(), now.getSeconds()];
		}
		var reset = false;
		for (var i = 0; i < inst.options.timeSteps.length; i++) {
			if (reset) {
				fields[i] = 0;
			}
			else if (inst.options.timeSteps[i] > 1) {
				fields[i] = Math.round(fields[i] / inst.options.timeSteps[i]) *
					inst.options.timeSteps[i];
				reset = true;
			}
		}
		return fields;
	},

	/* Set the selected time into the input field.
	   @param  inst  (object) the instance settings */
	_showTime: function(inst) {
		var currentTime = (this._formatNumber(inst.options.show24Hours ? inst._selectedHour :
			((inst._selectedHour + 11) % 12) + 1) + inst.options.separator +
			this._formatNumber(inst._selectedMinute) +
			(inst.options.showSeconds ? inst.options.separator +
			this._formatNumber(inst._selectedSecond) : '') +
			(inst.options.show24Hours ?  '' : inst.options.ampmPrefix +
			inst.options.ampmNames[(inst._selectedHour < 12 ? 0 : 1)]));
		this._setValue(inst, currentTime);
		this._showField(inst);
	},

	/* Highlight the current time field.
	   @param  inst  (object) the instance settings */
	_showField: function(inst) {
		var input = inst.input[0];
		if (inst.input.is(':hidden') || plugin._lastInput != input) {
			return;
		}
		var fieldSize = inst.options.separator.length + 2;
		var start = (inst._field != inst._ampmField ? (inst._field * fieldSize) :
			(inst._ampmField * fieldSize) - inst.options.separator.length +
			inst.options.ampmPrefix.length);
		var end = start + (inst._field != inst._ampmField ? 2 : inst.options.ampmNames[0].length);
		if (input.setSelectionRange) { // Mozilla
			input.setSelectionRange(start, end);
		}
		else if (input.createTextRange) { // IE
			var range = input.createTextRange();
			range.moveStart('character', start);
			range.moveEnd('character', end - inst.input.val().length);
			range.select();
		}
		if (!input.disabled) {
			input.focus();
		}
	},

	/* Ensure displayed single number has a leading zero.
	   @param  value  (number) current value
	   @return  (string) number with at least two digits */
	_formatNumber: function(value) {
		return (value < 10 ? '0' : '') + value;
	},

	/* Update the input field and notify listeners.
	   @param  inst   (object) the instance settings
	   @param  value  (string) the new value */
	_setValue: function(inst, value) {
		if (value != inst.input.val()) {
			inst.input.val(value).trigger('change');
		}
	},

	/* Move to previous/next field, or out of field altogether if appropriate.
	   @param  inst     (object) the instance settings
	   @param  offset   (number) the direction of change (-1, +1)
	   @param  moveOut  (boolean) true if can move out of the field
	   @return  (boolean) true if exitting the field, false if not */
	_changeField: function(inst, offset, moveOut) {
		var atFirstLast = (inst.input.val() == '' || inst._field ==
			(offset == -1 ? 0 : Math.max(1, inst._secondField, inst._ampmField)));
		if (!atFirstLast) {
			inst._field += offset;
		}
		this._showField(inst);
		inst._lastChr = '';
		return (atFirstLast && moveOut);
	},

	/* Update the current field in the direction indicated.
	   @param  inst    (object) the instance settings
	   @param  offset  (number) the amount to change by */
	_adjustField: function(inst, offset) {
		if (inst.input.val() == '') {
			offset = 0;
		}
		this._setTime(inst, new Date(0, 0, 0,
			inst._selectedHour + (inst._field == 0 ? offset * inst.options.timeSteps[0] : 0) +
			(inst._field == inst._ampmField ? offset * 12 : 0),
			inst._selectedMinute + (inst._field == 1 ? offset * inst.options.timeSteps[1] : 0),
			inst._selectedSecond +
			(inst._field == inst._secondField ? offset * inst.options.timeSteps[2] : 0)));
	},

	/* Check against minimum/maximum and display time.
	   @param  inst  (object) the instance settings
	   @param  time  (Date) an actual time or
	                 (number) offset in seconds from now or
					 (string) units and periods of offsets from now */
	_setTime: function(inst, time) {
		time = this._determineTime(time, inst);
		var fields = this._constrainTime(inst, time ?
			[time.getHours(), time.getMinutes(), time.getSeconds()] : null);
		time = new Date(0, 0, 0, fields[0], fields[1], fields[2]);
		// Normalise to base date
		var time = this._normaliseTime(time);
		var minTime = this._normaliseTime(this._determineTime(inst.options.minTime, inst));
		var maxTime = this._normaliseTime(this._determineTime(inst.options.maxTime, inst));
		// Ensure it is within the bounds set
		time = (minTime && time < minTime ? minTime :
			(maxTime && time > maxTime ? maxTime : time));
		// Perform further restrictions if required
		if ($.isFunction(inst.options.beforeSetTime)) {
			time = inst.options.beforeSetTime.apply(inst.input[0],
				[this._getTimePlugin(inst.input[0]), time, minTime, maxTime]);
		}
		inst._selectedHour = time.getHours();
		inst._selectedMinute = time.getMinutes();
		inst._selectedSecond = time.getSeconds();
		this._showTime(inst);
	},

	/* A time may be specified as an exact value or a relative one.
	   @param  setting  (Date) an actual time or
	                    (number) offset in seconds from now or
	                    (string) units and periods of offsets from now
	   @param  inst     (object) the instance settings
	   @return  (Date) the calculated time */
	_determineTime: function(setting, inst) {
		var offsetNumeric = function(offset) { // E.g. +300, -2
			var time = new Date();
			time.setTime(time.getTime() + offset * 1000);
			return time;
		};
		var offsetString = function(offset) { // E.g. '+2m', '-4h', '+3h +30m' or '12:34:56PM'
			var fields = plugin._extractTime(inst, offset); // Actual time?
			var time = new Date();
			var hour = (fields ? fields[0] : time.getHours());
			var minute = (fields ? fields[1] : time.getMinutes());
			var second = (fields ? fields[2] : time.getSeconds());
			if (!fields) {
				var pattern = /([+-]?[0-9]+)\s*(s|S|m|M|h|H)?/g;
				var matches = pattern.exec(offset);
				while (matches) {
					switch (matches[2] || 's') {
						case 's' : case 'S' :
							second += parseInt(matches[1], 10); break;
						case 'm' : case 'M' :
							minute += parseInt(matches[1], 10); break;
						case 'h' : case 'H' :
							hour += parseInt(matches[1], 10); break;
					}
					matches = pattern.exec(offset);
				}
			}
			time = new Date(0, 0, 10, hour, minute, second, 0);
			if (/^!/.test(offset)) { // No wrapping
				if (time.getDate() > 10) {
					time = new Date(0, 0, 10, 23, 59, 59);
				}
				else if (time.getDate() < 10) {
					time = new Date(0, 0, 10, 0, 0, 0);
				}
			}
			return time;
		};
		return (setting ? (typeof setting == 'string' ? offsetString(setting) :
			(typeof setting == 'number' ? offsetNumeric(setting) : setting)) : null);
	},

	/* Normalise time object to a common date.
	   @param  time  (Date) the original time
	   @return  (Date) the normalised time */
	_normaliseTime: function(time) {
		if (!time) {
			return null;
		}
		time.setFullYear(1900);
		time.setMonth(0);
		time.setDate(0);
		return time;
	},

	/* Update time based on keystroke entered.
	   @param  inst  (object) the instance settings
	   @param  chr   (ch) the new character */
	_handleKeyPress: function(inst, chr) {
		if (chr == inst.options.separator) {
			this._changeField(inst, +1, false);
		}
		else if (chr >= '0' && chr <= '9') { // Allow direct entry of time
			var key = parseInt(chr, 10);
			var value = parseInt(inst._lastChr + chr, 10);
			var hour = (inst._field != 0 ? inst._selectedHour :
				(inst.options.show24Hours ? (value < 24 ? value : key) :
				(value >= 1 && value <= 12 ? value :
				(key > 0 ? key : inst._selectedHour)) % 12 +
				(inst._selectedHour >= 12 ? 12 : 0)));
			var minute = (inst._field != 1 ? inst._selectedMinute :
				(value < 60 ? value : key));
			var second = (inst._field != inst._secondField ? inst._selectedSecond :
				(value < 60 ? value : key));
			var fields = this._constrainTime(inst, [hour, minute, second]);
			this._setTime(inst, new Date(0, 0, 0, fields[0], fields[1], fields[2]));
			if (inst.options.noSeparatorEntry && inst._lastChr) {
				this._changeField(inst, +1, false);
			}
			else {
				inst._lastChr = chr;
			}
		}
		else if (!inst.options.show24Hours) { // Set am/pm based on first char of names
			chr = chr.toLowerCase();
			if ((chr == inst.options.ampmNames[0].substring(0, 1).toLowerCase() &&
					inst._selectedHour >= 12) ||
					(chr == inst.options.ampmNames[1].substring(0, 1).toLowerCase() &&
					inst._selectedHour < 12)) {
				var saveField = inst._field;
				inst._field = inst._ampmField;
				this._adjustField(inst, +1);
				inst._field = saveField;
				this._showField(inst);
			}
		}
	}
});

// The list of commands that return values and don't permit chaining
var getters = ['getOffset', 'getTime', 'isDisabled'];

/* Determine whether a command is a getter and doesn't permit chaining.
   @param  command    (string, optional) the command to run
   @param  otherArgs  ([], optional) any other arguments for the command
   @return  true if the command is a getter, false if not */
function isNotChained(command, otherArgs) {
	if (command == 'option' && (otherArgs.length == 0 ||
			(otherArgs.length == 1 && typeof otherArgs[0] == 'string'))) {
		return true;
	}
	return $.inArray(command, getters) > -1;
}

/* Attach the time entry functionality to a jQuery selection.
   @param  options  (object) the new settings to use for these instances (optional) or
                    (string) the command to run (optional)
   @return  (jQuery) for chaining further calls or
            (any) getter value */
$.fn.timeEntry = function(options) {
	var otherArgs = Array.prototype.slice.call(arguments, 1);
	if (isNotChained(options, otherArgs)) {
		return plugin['_' + options + 'Plugin'].
			apply(plugin, [this[0]].concat(otherArgs));
	}
	return this.each(function() {
		if (typeof options == 'string') {
			if (!plugin['_' + options + 'Plugin']) {
				throw 'Unknown command: ' + options;
			}
			plugin['_' + options + 'Plugin'].
				apply(plugin, [this].concat(otherArgs));
		}
		else {
			// Check for settings on the control itself
			var inlineSettings = ($.fn.metadata ? $(this).metadata() : {});
			plugin._attachPlugin(this, $.extend({}, inlineSettings, options || {}));
		}
	});
};

/* Initialise the time entry functionality. */
var plugin = $.timeEntry = new TimeEntry(); // Singleton instance

})(jQuery);

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2012-2024 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

(function($) {

    function MultiCalendarsPicker() {
        this.calendarContainer = 'multiCalendarContainer';
        this.calendarIdPrefix = 'multiCalendar';
        this.TO = 'To';
        this.CALENDAR_GREGORIAN = 'gregorian';
        this.DEFAULT_DATE_FORMAT = 'mm/dd/yyyy';
        this.JAVA_DATE_FORMAT = 'MM/dd/yyyy';
        this._CAL_LOCALE_PARAMS_THAT_ARE_ARRAYS = ['epochs', 'monthNames', 'monthNamesShort', 'dayNames', 'dayNamesShort', 'dayNamesMin'];
        this._isCalendarShown = false;
        this._isTimeBoxShown = false;
        this._currentObj = null;
        this.activeCalendar = 1;
        this.numberOfCalendars;
        this.timeBoxContainer = 'timeBoxContainer';
        this.currentDateBoxValue = '';

        this._defaults = {
            defaultCalendar: this.CALENDAR_GREGORIAN,
            defaultDateFormat: this.DEFAULT_DATE_FORMAT,
            displayDateFormat: this.DEFAULT_DATE_FORMAT,
            converters: [],
            dateFormats: {},
            orientation: 'horizontal',
            language: 'en',
            isRTL: false,
            calendars: this.CALENDAR_GREGORIAN,
            firstDayOfTheWeek: 0,
            todaysDates:[],
            buttonImage: '',
            buttonClass: '',
            showOn: 'focus',
            showTime: false,
            timeFormat: 'kk:mm:ss'

        };

        $(document).mousedown(this._checkExternalClick);
        $(document).mousedown(this._checkExternalClickForTimeBox);

    }

    $.extend(MultiCalendarsPicker.prototype, {
        _markerClass: 'hasMultiCalendarPicker',

        _createDatePickerDOMStructure : function(inst) {

            var calendarOptions = inst.settings;
            $('#' + this.calendarContainer).remove();
            var DOMStructure = '<div id="' + this.calendarContainer + '" class="' + calendarOptions.orientation + '" style="display:none;" ><div id="sceenReaderText" aria-live="rude" aria-atomic="true"></div>';
            var calendars = calendarOptions.calendars;
            var numberOfCalendars = calendars.length;
            if(calendars && numberOfCalendars > 0) {
                for(var i = 0; i < numberOfCalendars; i++) {
                    DOMStructure += '<div id="' + this.calendarIdPrefix  + (i + 1) + '"></div>';
                }
            }

            DOMStructure += '<div id="multiCalenderIdCheck">'+ $.i18n.prop("datepicker.toggle.text") +'<input id="checkId" name="Calendar" type="checkbox" checked onchange="hideCalender()"/></div></div>';


            $(inst).focus();

           $(document).find('body').append(DOMStructure);

            if(isRTLMode() && screen.width <768)
            {
                $('#multiCalendar2').addClass('activeCalendar');
                $('#multiCalendar1').addClass('activeCalendar');

            }
            else{
                $('#multiCalenderIdCheck').css('display','none');
            }




        },

        concatTimePart: function (inst, data) {
            var timeEntered = $.multicalendar.extractTimePart(inst);
            data = data + " " + timeEntered;
            return data.trim();
        },

        _addCalendarsToDOM : function (inst) {
            var calendarOptions = inst.settings;
            var calendars = calendarOptions.calendars;
            var numberOfCalendars = calendars.length;

            if(calendars && numberOfCalendars > 0) {
                for(var i = 0; i < numberOfCalendars; i++) {
                    var dateFormat = calendarOptions.dateFormats[calendars[i]];
                    dateFormat = dateFormat ? dateFormat : ( calendarOptions.displayDateFormat ? calendarOptions.displayDateFormat : calendarOptions.defaultDateFormat);

                    var isRTL = false;
                    if(calendarOptions.isRTL && calendarOptions.isRTL == true) {
                        isRTL = true;
                    }
                    $('#' + this.calendarIdPrefix + (i + 1)).calendarsPicker({
                        altField: '#' + inst.id,
                        calendar: $.calendars.instance(calendars[i]),
                        isRTL: isRTL,
                        firstDay: parseInt(calendarOptions.firstDayOfTheWeek),
                        dateFormat: dateFormat,
                        minDate: calendarOptions.minDate,
                        maxDate: calendarOptions.maxDate,
                        onSelect: function ( target ) {
                            if(target[0]) {
                                $(inst).focus();

                                var settings = inst.settings;
                                var calendarOrder = $.multicalendar._getCalendarOrder(this.id);
                                var onSelectExt = inst.settings.onSelect? inst.settings.onSelect : null;
                                if(settings.defaultCalendar != calendars[calendarOrder]) {
                                    if($.multicalendar._isFormatDateAServiceCall(calendarOrder, settings)) {
                                        $.multicalendar._formatDateAsAService(calendarOrder, inst, target[0].formatDate());
                                    }
                                    else if($.multicalendar._isFormatDateAFunctionCall(calendarOrder, settings)) {
                                        var data = target[0].formatDate();
                                        var formatDate = $.multicalendar._getFormatFn(calendarOrder, settings);
                                        data = formatDate(data);
                                        data = $.multicalendar.concatTimePart(inst, data);
                                        $(inst).val(data);
                                        if(onSelectExt) {
                                            onSelectExt(data,inst );
                                        }
                                    }
                                    else {
                                        //console.log('no change');
                                    }
                                }
                                else{
                                    var data = target[0].formatDate();
                                    data = $.multicalendar.concatTimePart(inst, data);
                                    $(inst).val(data);

                                    if(onSelectExt) {
                                        onSelectExt(data ,inst);
                                    }
                                }
                            }
                            $.multicalendar._hideCalendar(inst);
                        }
                    });
                    $.calendars.instance(calendars[i]).local.dateFormat = dateFormat;
                }
            }
        },

        _getConverterName : function (from, to) {
            return from + $.multicalendar.TO + to.charAt(0).toUpperCase() + to.substr(1).toLowerCase();
        },

        _isFormatDateAServiceCall : function (calendarOrder, calendarOptions) {
            var isServiceCall = false;
            var defaultCalendar = calendarOptions.defaultCalendar;
            var calendars = calendarOptions.calendars;
            var selectedCalendar = calendars[calendarOrder];
            var converterName = $.multicalendar._getConverterName(selectedCalendar, defaultCalendar);

            if(calendarOptions.converters[converterName]
                && calendarOptions.converters[converterName].format
                && calendarOptions.converters[converterName].format.url) {
                isServiceCall = true;
            }
            return isServiceCall;
        },

        unbind : function(inst) {
            $(inst).nextAll('.calendar-icon').remove();
            $(inst).get(0).isInstantiated = false;
        },

        _isFormatDateAFunctionCall : function (calendarOrder, calendarOptions) {
            var isFunctionCall = false;
            var defaultCalendar = calendarOptions.defaultCalendar;
            var calendars = calendarOptions.calendars;
            var selectedCalendar = calendars[calendarOrder];
            var converterName = $.multicalendar._getConverterName(selectedCalendar, defaultCalendar);

            if(calendarOptions.converters[converterName]
                && calendarOptions.converters[converterName].format
                && (typeof calendarOptions.converters[converterName].format) == 'function') {
                isFunctionCall = true;
            }
            return isFunctionCall;
        },

        _getFormatFn : function (calendarOrder, calendarOptions) {
            var defaultCalendar = calendarOptions.defaultCalendar;
            var calendars = calendarOptions.calendars;
            var selectedCalendar = calendars[calendarOrder];
            var converterName = $.multicalendar._getConverterName(selectedCalendar, defaultCalendar);

            return calendarOptions.converters[converterName].format;
        },

        _convertDateBetweenCalendarFormats_old : function(fromCalendar, toCalendar, date) {
            var toCalendarObj = $.calendars.calendars[toCalendar].prototype;

            var fromCalLocalProps = $.calendars._localCals[fromCalendar + '-'].local;
            var cDateObj = toCalendarObj.parseDate(fromCalLocalProps.dateFormat, date, toCalendarObj.regional['']);

            var toCalLocalProps = $.calendars._localCals[toCalendar + '-'].local;
            $.extend(toCalendarObj, toCalendarObj.local? {} : {local: toCalLocalProps});
            date = toCalendarObj.formatDate(toCalendarObj.local.dateFormat, cDateObj);
            return date;
        },

        _convertDateBetweenCalendarFormats : function(calendar, fromFormat, toFormat, date) {
            var calendarObj = $.calendars.calendars[calendar].prototype;

            var calLocalProps = $.calendars._localCals[calendar + '-'].local;
            var cDateObj = calendarObj.parseDate(fromFormat, date, calLocalProps);

            $.extend(calendarObj, calendarObj.local? {} : {local: calLocalProps});
            date = calendarObj.formatDate(toFormat, cDateObj);
            return date;
        },

        _getDateFormat : function (calendar) {
            var calendarProps = $.calendars._localCals[calendar + '-'].local;
            return calendarProps.dateFormat;
        },


        _formatDateAsAService : function(calendarOrder, inst, date) {
            var calendarOptions = inst.settings;
            var defaultCalendar = calendarOptions.defaultCalendar;
            var calendars = calendarOptions.calendars;
            var selectedCalendar = calendars[calendarOrder];
            var converterName = $.multicalendar._getConverterName(selectedCalendar, defaultCalendar);
            var formatProps = calendarOptions.converters[converterName].format;
            var nameOfDateParam = formatProps.nameOfDateParam;

            var fromFormat = $.multicalendar._getDateFormat(selectedCalendar);
            var toFormat = calendarOptions.defaultDateFormat;
            date = $.multicalendar._convertDateBetweenCalendarFormats(selectedCalendar, fromFormat, toFormat, date);

            fromFormat = calendarOptions.defaultDateFormat;
            toFormat = $.multicalendar._getDateFormat(defaultCalendar);

            var jsonString = '{"' + nameOfDateParam + '": "' + date +'"}';
            var data = $.parseJSON(jsonString);
            data = $.extend(data, formatProps.extraParams);
            $.ajax({
                url: formatProps.url,
                data: data,
                dataType: 'text',
                success: $.multicalendar._formatDateAsAServiceSuccess(defaultCalendar, fromFormat, toFormat, inst)
            });

        },

        _formatDateAsAServiceSuccess: function (selectedCalendar, fromFormat, toFormat, inst) {
            var calendarOptions = inst.settings;
            var onSelectExt = inst.settings.onSelect? inst.settings.onSelect : null;
            return function (date) {

                date = $.multicalendar._convertDateBetweenCalendarFormats(selectedCalendar, fromFormat, toFormat, date);

                date = $.multicalendar.concatTimePart(inst, date);
                $(inst).val(date);

                if(onSelectExt) {
                    onSelectExt(date ,inst );
                }
            }
        },

        adjustPositionOfCalendar: function (inst) {
            var screenHeightAvailable = $(window).height()
            var screenWidthAvailable = $(window).width();
            var instPosition = $(inst).offset();
            var instHeight = $(inst).outerHeight();
            var instWidth = $(inst).outerWidth();
            var pickerContainerHeight = $("#" + this.calendarContainer + "> #multiCalendar1").height();
            var firstPickerOuterWidth = $("#" + this.calendarContainer + " .hasCalendarsPicker:first .ui-datepicker").outerWidth();
            var lastPickerOuterWidth = $("#" + this.calendarContainer + " .hasCalendarsPicker:first .ui-datepicker").outerWidth();
            var pickerContainerWidth = $('.hasCalendarsPicker').length > 1 ? firstPickerOuterWidth + lastPickerOuterWidth : firstPickerOuterWidth;
            if ((screenHeightAvailable - instPosition.top) + instHeight - 30 >= pickerContainerHeight) {
                $("#" + this.calendarContainer).css({top: (instPosition.top) + "px"});
            }
            else {
                $("#" + this.calendarContainer).css({top: (screenHeightAvailable - pickerContainerHeight - 45) + "px"});
            }
            if ((screenWidthAvailable - instPosition.left - instWidth) > pickerContainerWidth) {
                $("#" + this.calendarContainer).css({left: (instPosition.left + instWidth) + "px"});
            }
            else if ((screenWidthAvailable - instPosition.left - 35) > lastPickerOuterWidth) {
                $("#" + this.calendarContainer).css({left: (screenWidthAvailable - instPosition.left) + "px"});
            } else {
                $("#" + this.calendarContainer).css({right: (screenWidthAvailable - instPosition.left) + "px"});
            }

            if (instPosition.left >= firstPickerOuterWidth && $('.hasCalendarsPicker').length > 1 && screenWidthAvailable - instPosition.left >= lastPickerOuterWidth) {
                $("#" + this.calendarContainer).css({left: (instPosition.left - firstPickerOuterWidth) + "px"});
            }

        },

        toggleCalendar: function(inst){
            if($.multicalendar._isCalendarShown && $.multicalendar._currentObj && $.multicalendar._currentObj.get(0) === inst) {
                $.multicalendar._hideCalendar(inst);
            }
            else {
                $.multicalendar._createDatePickerDOMStructure(inst);
                $.multicalendar._addCalendarsToDOM(inst);
                $.multicalendar._showDateInCalendar(inst);

                if(inst) {
                    $.multicalendar._showCalendar(inst);
                }
            }
        },

        _hideCalendar : function (inst) {
            $.multicalendar._isCalendarShown = false;
            $.multicalendar._removeAriaDescriptionFromCalendar();
            $("#" + this.calendarContainer).hide("slow");
            $.multicalendar.activeCalendar = null;

            var onClose = inst.settings.onClose || function(){};
            onClose.apply((inst.input ? inst.input[0] : null),
                          [(inst.input ? inst.input.val() : ''), inst]);
            $(inst).removeAttr('readOnly');
        },


        _showCalendar : function (inst) {

            $(inst).attr('readOnly','readnly');
            $(inst).focus();
            //input.focus()
            if(!$('#multiCalendarContainer').length){

                $.multicalendar._createDatePickerDOMStructure(inst);
                $.multicalendar._addCalendarsToDOM(inst);
                $.multicalendar._showDateInCalendar(inst);

            }
            $.multicalendar._addAriaDescriptionToCalendar();
            $("#" + this.calendarContainer).show("slow");
            $.multicalendar.activeCalendar = 1;
            $('#' + $.multicalendar.calendarIdPrefix + $.multicalendar.activeCalendar ).addClass('activeCalendar');



           if(screen.width>=768){
            this.adjustPositionOfCalendar(inst)};
            $.multicalendar._isCalendarShown = true;
            $.multicalendar._currentObj = $(inst);
        },

        _addAriaDescriptionToCalendar: function() {
            var calendarariaInfo = "<span id='calendarInfo' aria-live='polite' aria-atomic='false'>";
            calendarariaInfo += $.i18n.prop("js.datepicker.info");
            calendarariaInfo +="</span>";
            $('#' + this.calendarContainer).append(calendarariaInfo);
        },

        _removeAriaDescriptionFromCalendar: function() {
            $('#' + this.calendarContainer).children('#calendarInfo').remove();
        },

        _showDateInCalendarSuccessCallback : function (selectedCalendar, fromFormat, toFormat, calendarIndex, inputElementId, originalDate) {
            return function(date) {

                date = $.multicalendar._convertDateBetweenCalendarFormats(selectedCalendar, fromFormat, toFormat, date);
                try {
                    $.calendars.picker.setDate($('#' + $.multicalendar.calendarIdPrefix + (calendarIndex + 1) )[0], date, null, true);
                }
                catch (e) {
                    //do nothing
                }
                $('#' + inputElementId).val(originalDate);
            }
        },


        _showDateInCalendar : function(inst) {
            var date = $(inst).val();
            date = this.extractDatePart(inst);

            if(date != '') {

                var calendarOptions = inst.settings;
                var defaultCalendar = calendarOptions.defaultCalendar;
                var calendars = calendarOptions.calendars;
                var numberOfCalendars = calendars.length;
                var originalDate = $.multicalendar.currentDateBoxValue = date;

                if(calendars && numberOfCalendars > 0) {
                    for(var i = 0; i < numberOfCalendars; i++) {
                        if(calendars[i] == defaultCalendar) {
                            try {
                                $.calendars.picker.setDate($('#' + $.multicalendar.calendarIdPrefix + (i + 1) )[0], originalDate, null, true);
                            }
                            catch(e) {
                                //do nothing
                            }
                            $(inst).val($.multicalendar.currentDateBoxValue);
                        }
                        else {
                            var converterName = $.multicalendar._getConverterName(defaultCalendar, calendars[i]);
                            if($.multicalendar._isConverterDefined(calendarOptions, converterName)) {
                                var formatProps = calendarOptions.converters[converterName].format;
                                var nameOfDateParam = formatProps.nameOfDateParam;

                                var fromFormat = $.multicalendar._getDateFormat(defaultCalendar);
                                var toFormat = calendarOptions.defaultDateFormat;
                                date = $.multicalendar._convertDateBetweenCalendarFormats(defaultCalendar, fromFormat, toFormat, originalDate);

                                fromFormat = calendarOptions.defaultDateFormat;
                                toFormat = $.multicalendar._getDateFormat(calendars[i]);

                                var jsonString = '{"' + nameOfDateParam + '": "' + date +'"}';
                                var data = $.parseJSON(jsonString);
                                data = $.extend(data, formatProps.extraParams);
                                $.ajax({
                                    url: formatProps.url,
                                    data: data,
                                    dataType: 'text',
                                    success: $.multicalendar._showDateInCalendarSuccessCallback(calendars[i], fromFormat, toFormat, i, inst.id, $.multicalendar.currentDateBoxValue)
                                });
                            }
                            else {
                                $(inst).val($.multicalendar.currentDateBoxValue);
                            }
                        }
                    }
                }
            }
        },

        _isConverterDefined : function (calendarOptions, converter) {
            var isConverterDefined = false;
            if(calendarOptions.converters
                && calendarOptions.converters[converter]) {
                isConverterDefined = true;
            }
            return isConverterDefined;
        },

        _todaysDate : function(calendar) {
            var cDate = $.multicalendar._defaults.todaysDates[calendar.local.name.toLowerCase()];
            if(!cDate) {
                cDate = calendar.today();
            }
            return cDate;
        },

        _getTodayDates : function (calendarOptions) {
            var defaultCalendar = calendarOptions.defaultCalendar;
            var calendars = calendarOptions.calendars;
            var numberOfCalendars = calendars.length;

            var calendar = $.calendars.calendars[$.multicalendar.CALENDAR_GREGORIAN].prototype;
            var dateFormat = calendarOptions.defaultDateFormat;

            var cDateObj = calendar.parseDate(dateFormat, $.calendars.newDate().formatDate(dateFormat), calendar.regional[''])
            $.multicalendar._defaults.todaysDates[$.multicalendar.CALENDAR_GREGORIAN] = cDateObj;

            if(calendars && numberOfCalendars > 0) {
                for(var i = 0; i < numberOfCalendars; i++) {
                    if(this.CALENDAR_GREGORIAN != calendars[i]) {
                        var converterName = $.multicalendar._getConverterName(this.CALENDAR_GREGORIAN, calendars[i]);
                        if($.multicalendar._isConverterDefined(calendarOptions, converterName)) {
                            var formatProps = calendarOptions.converters[converterName].format;

                            var nameOfDateParam = formatProps.nameOfDateParam;
                            var jsonString = '{"' + nameOfDateParam + '": "' + $.calendars.newDate().formatDate(dateFormat) +'"}';
                            var data = $.parseJSON(jsonString);
                            data = $.extend(data, formatProps.extraParams);
                            $.ajax({
                                url: formatProps.url,
                                data: data,
                                dataType: 'text',
                                success: $.multicalendar._storeTodaysDateSuccessCallback(calendarOptions, calendars[i])
                            });
                        }
                    }
                }
            }
        },


        getCalendar : function(calendarName){
            var calendarObj = $.calendars.calendars[calendarName].prototype;
            var calLocalProps = $.calendars._localCals[calendarName + '-'].local;
            $.extend(calendarObj, calendarObj.local? {} : {local: calLocalProps});
            return calendarObj;
        },

        _storeTodaysDateSuccessCallback : function (calendarOptions, calendar) {
            return function(date) {
                var calendarObj = $.calendars.calendars[calendar].prototype;
                var dateFormat = calendarOptions.defaultDateFormat;

                var calLocalProps = $.calendars._localCals[calendar + '-'].local;
                $.extend(calendarObj, calendarObj.local? {} : {local: calLocalProps});
                var cDateObj = calendarObj.parseDate(dateFormat, date, calendarObj.regional['']);
                $.multicalendar._defaults.todaysDates[calendar] = cDateObj;
            }
        },

        _extractFullDate : function (dateString) {
            var format = $.i18n.prop('js.datepicker.dateFormat');

            var separator = '';

            if (format.indexOf('-') >= 0) {
                separator = '-';
            }
            else if (format.indexOf('/') >= 0) {
                separator = '/';
            }
            else if (format.indexOf('.') >= 0) {
                separator = '.';
            }

            if (dateString.indexOf(separator) >= 0)  {
                var dateArray = dateString.split(separator);
                var formatArray = format.split(separator);
                var yearIndex = 0;

                for(var i = 0; i < formatArray.length; i++) {
                    if(formatArray[i].toLowerCase().indexOf('y') != -1) {
                        yearIndex = i;
                        break;
                    }
                }

                if(dateArray.length > yearIndex)
                {
                    var year = dateArray[yearIndex];
                    if(year.length == 2) {
                        var yearEntered= parseInt(year);
                        year = Number($.multicalendar._getCentury(yearEntered)) + yearEntered;
                        dateArray[yearIndex] = year;
                        dateString = dateArray.join(separator);
                    }
                }
            }
            return dateString;
        },

        _registerEvents : function (inst) {
            var settings = inst.settings;
            var showOn = settings.showOn

            $(inst).change( function (evt) {
                try {
                    var valEntered = $(inst).val();
                    if (evt.target.settings.showTime) {
                        $(inst).val(valEntered);
                        return;
                    }
                    var cDateObj;

                    valEntered = $.multicalendar._extractFullDate(valEntered);
                    var defaultCalendar = settings.defaultCalendar;
                    if($.multicalendar.isValidDateFormat(defaultCalendar, valEntered)) {
                        $(inst).val(valEntered);
                        return;
                    }

                    var calendar = $.calendars.instance(defaultCalendar);

                    var displayFormat = $.i18n.prop("js.datepicker.dateFormat");

                    if (valEntered.length == 1 && isNaN(valEntered)){
                        // put system date
                        cDateObj = calendar.today();
                    } else {
                        var matches = valEntered.match( /\d+/g );
                        // no special characters
                        if (matches.length == 1){
                            if(valEntered.length > 2 ){
                                //slice by 2 characers
                                matches = valEntered.match(/.{2}/g);
                            }
                        }
                        if(cDateObj == null){
                            var dateFormat = $.i18n.prop("default.dateEntry.format").toLowerCase();//calendar.local.dateFormat.toLowerCase();
                            var dateArr = {
                                'd': dateFormat.indexOf("d"),
                                'm': dateFormat.indexOf("m"),
                                'y': dateFormat.indexOf("y")
                            };

                            var sortable = [];
                            for (var val in dateArr)
                                sortable.push([val, dateArr[val]]);
                            sortable.sort(function(a, b) {return a[1] - b[1]});

                            cDateObj = calendar.today();
                            var day = cDateObj.day();
                            var month = cDateObj.month();
                            var year = cDateObj.year();
                            for (i = 0; i < matches.length; i++){
                                if(sortable[i][0] == "y"){
                                    if(matches[i].length == 2) {
                                        var yearEntered= Number(matches[i]);
                                        year = yearEntered + Number($.multicalendar._getCentury(yearEntered));
                                    }
                                    else{
                                        year= matches[i];
                                    }
                                } else if (sortable[i][0] == "m") {
                                    month = matches[i];
                                } else {
                                    day = matches[i];
                                }
                            }

                            try {
                                cDateObj = cDateObj.newDate(year, month, day);
                            }
                            catch(e) {
                                cDateObj = null;
                                return;
                            }
                        }
                    }

                    if(cDateObj)
                        var dateStr = calendar.formatDate(calendar.local.dateFormat, cDateObj);

                    $(inst).val(dateStr);
                } catch(e) {
                }
            });

            if(showOn == "both" || showOn == "focus") {
                $(inst).focus( function (evt) {
                    if(!$.multicalendar._isCalendarShown || ($.multicalendar._currentObj && $.multicalendar._currentObj.get(0) !== $(evt.target).get(0))) {
                        $.multicalendar._createDatePickerDOMStructure(inst);
                        $.multicalendar._addCalendarsToDOM(inst);
                        $.multicalendar._showDateInCalendar(inst);
                        $.multicalendar._showCalendar(this);
                    }
                });
            }

            if(showOn == "both" || showOn == "button") {
                //var img = $(inst).next('img');
                //$(img).click( function (evt) {
                var span = $(inst).next('span');
                $(span).click( function (evt) {
                    var input = $(this).prev('input.' + $.multicalendar._markerClass);
                    if($.multicalendar._isCalendarShown && $.multicalendar._currentObj && $.multicalendar._currentObj.get(0) === input.get(0)) {
                        $.multicalendar._hideCalendar(inst);
                    }
                    else {
                        $.multicalendar.currentDateBoxValue = input.val();
                        $.multicalendar._createDatePickerDOMStructure(inst);
                        $.multicalendar._addCalendarsToDOM(inst);
                        $.multicalendar._showDateInCalendar(inst);

                        if(input) {
                            $.multicalendar._showCalendar(input);
                            input.attr('readOnly','readonly');

                            $('#' + this.timeBoxContainer)
                            //$.multicalendar.currentDateBoxValue = input.val();
                        }
                    }
                });

                if(settings.showTime) {
                    var timeSpan = $(inst).nextAll('.time-icon');
                    $(timeSpan).click(function(evt) {
                        var input = $(this).prevAll('input.' + $.multicalendar._markerClass);
                        if($.multicalendar._isTimeBoxShown && $.multicalendar._currentObj && $.multicalendar._currentObj.get(0) === input.get(0)) {
                            $.multicalendar._hideTimeBox();
                        }
                        else {
                            $.multicalendar.currentDateBoxValue = input.val();
                            $.multicalendar._showTimeBox(inst);
                        }
                    });
                }

                if(showOn == "button") {
                    $(inst).focus( function (evt) {
                        if($.multicalendar._currentObj && $.multicalendar._currentObj.get(0) !== $(evt.target).get(0)) {
                            $.multicalendar._hideCalendar(inst);
                        }
                    });
                }
            }

            $(inst).dblclick(function (evt) {
                $.multicalendar.toggleCalendar(evt.target);
            });

            $(inst).bind('keydown keypress', function (evt) {

                if(evt.type == 'keydown' && evt.keyCode == 120) {
                    $.multicalendar.toggleCalendar(evt.target);
                    evt.preventDefault();
                    evt.stopPropagation();

                }
                else if($.multicalendar._isCalendarShown){
                    var activeCalendar = $('#' + $.multicalendar.calendarIdPrefix + $.multicalendar.activeCalendar )[0];
                    if(evt.type == 'keydown') $.calendars.picker.keyDownMultipicker( evt, activeCalendar);
                    else $.calendars.picker.keyPressMultipicker( evt, activeCalendar);
                }
                else if($.multicalendar._isTimeBoxShown && evt.keyCode == 27){
                    $.multicalendar._hideTimeBox();
                    return false;
                }
            });


            $(document).on("mouseenter","#multiCalendarContainer .hasCalendarsPicker", function(){
                $('.hasCalendarsPicker').removeClass('activeCalendar');
                $(this).addClass('activeCalendar');
                $.multicalendar.activeCalendar =  $(this).attr('id').substring(13);
            });

        },

        _setTimeToInputBox : function(inst) {
            if(!$(inst).value) {
                inst = $(inst).get(0);
            }

            // var timeEntered = $(inst).val();
            var date = this.extractDatePart(inst);
            var newDate = date + " " + $('#_timebox_').val();
            $(inst).val(newDate.trim());
            $(inst).focus();
        },


        extractTimePart : function (inst) {
            var timeFormat = inst.settings.timeFormat;
            var dataToParse = $.multicalendar.currentDateBoxValue;
            var timePattern = this.getRegExForTimeFormat(timeFormat);
            var regEx = new RegExp("" + timePattern + "$", "g");
            var matches = dataToParse.match(regEx);
            if(matches) {
                return matches[0].trim();
            } else {
                return "";
            }
        },

        extractDatePart : function(inst) {
            var dataToParse = $(inst).val()

            if (inst.settings.showTime) {
                var timeFormat = inst.settings.timeFormat;
                var dataToParse = $(inst).val();
                var time = this.extractTimePart(inst);
                return dataToParse.replace(time, '').trim();
            } else {
                return dataToParse
            }

        },

        extractDateFromDateTime : function(data, dateFormat, timeFormat) {
            var time = this.extractTimeFromDateTime(data, dateFormat, timeFormat);
            return data.replace(time, '').trim();
        },

        extractTimeFromDateTime : function(data, dateFormat, timeFormat) {
            var timePattern = this.getRegExForTimeFormat(timeFormat);
            var regEx = new RegExp("" + timePattern + "$", "g");
            var matches = data.match(regEx);
            if(matches) {
                return matches[0].trim();
            } else {
                return "";
            }
        },

        getRegExForTimeFormat : function(timeFormat) {
            var timeFormatToPattern = timeFormat;
            var NUMBER_PATTERN = '\\d{1,2}';
            timeFormatToPattern = timeFormatToPattern.replace('kk', NUMBER_PATTERN);
            timeFormatToPattern = timeFormatToPattern.replace('k', NUMBER_PATTERN);
            timeFormatToPattern = timeFormatToPattern.replace('KK', NUMBER_PATTERN);
            timeFormatToPattern = timeFormatToPattern.replace('K', NUMBER_PATTERN);

            timeFormatToPattern = timeFormatToPattern.replace('hh', NUMBER_PATTERN);
            timeFormatToPattern = timeFormatToPattern.replace('h', NUMBER_PATTERN);
            timeFormatToPattern = timeFormatToPattern.replace('HH', NUMBER_PATTERN);
            timeFormatToPattern = timeFormatToPattern.replace('H', NUMBER_PATTERN);

            timeFormatToPattern = timeFormatToPattern.replace('mm', NUMBER_PATTERN);
            timeFormatToPattern = timeFormatToPattern.replace('ss', NUMBER_PATTERN);
            timeFormatToPattern = timeFormatToPattern.replace('SS', '\\d{1,3}');

            timeFormatToPattern = timeFormatToPattern.replace('a', '.+');
            return timeFormatToPattern;
        },

        _showTimeBox: function(inst) {
            this._createTimeBoxDOMStructure(inst);
            this._adjustPositionOfTimeBox(inst);

            $("#" + this.timeBoxContainer).show("slow");
            $.multicalendar._isTimeBoxShown = true;

            $.multicalendar._currentObj = $(inst);
            $('#_timebox_select_btn').click(function() {
                $.multicalendar._setTimeToInputBox($.multicalendar._currentObj);
                $.multicalendar._hideTimeBox();
            });

            var timeOptions = this._interpretTimeConfigOptions(inst);
            $('#_timebox_').timeEntry(timeOptions);

            var time = $.multicalendar.extractTimePart(inst);
            $('#_timebox_').timeEntry('setTime', time);
        },

        _hideTimeBox : function () {
            $.multicalendar._isTimeBoxShown = false;
            $("#" + this.timeBoxContainer).hide("slow");
        },

        _createTimeBoxDOMStructure: function(inst) {
            $('#' + this.timeBoxContainer).remove();
            var DOMStructure = '<div id="' + this.timeBoxContainer + '"><div id="sceenReaderText" aria-live="rude" aria-atomic="true"></div>';
            DOMStructure += 'Time: <input type="text" id="_timebox_"/>&nbsp;<input type="button" value="Select" id="_timebox_select_btn"/>';

            DOMStructure += '</div>';

            $(document).find('body').append(DOMStructure);
        },

        _adjustPositionOfTimeBox : function(inst) {
            var screenHeightAvailable = $(window).height()
            var screenWidthAvailable = $(window).width();
            var instPosition = $(inst).offset();
            var instHeight = $(inst).outerHeight();
            var instWidth = $(inst).outerWidth();
            var timeBoxContainerHeight = $("#" + this.timeBoxContainer).height();
            //var firstPickerOuterWidth = $("#" + this.calendarContainer + " .hasCalendarsPicker:first .ui-datepicker").outerWidth();
            //var lastPickerOuterWidth = $("#" + this.calendarContainer + " .hasCalendarsPicker:first .ui-datepicker").outerWidth();
            var timeBoxContainerWidth = $("#" + this.timeBoxContainer).outerWidth();
            if(instPosition.top + instHeight + timeBoxContainerHeight >= screenHeightAvailable && instPosition.top > timeBoxContainerHeight){
                $("#" + this.timeBoxContainer).css({top: (instPosition.top - timeBoxContainerHeight) + "px"});
            }
            else{
                $("#" + this.timeBoxContainer).css({top: (instPosition.top + instHeight) + "px"});
            }

            if(instPosition.left + timeBoxContainerWidth >= screenWidthAvailable){
                $("#" + this.timeBoxContainer).css({right: (screenWidthAvailable - instPosition.left -instWidth ) + "px"});
            }
            else {
                $("#" + this.timeBoxContainer).css({left: (instPosition.left ) + "px"});
            }

        },

        _checkExternalClick: function(event) {
            var inst = $.multicalendar._isCalendarShown && $.multicalendar._currentObj && $.multicalendar._currentObj.get(0);
            if (inst) {
                var clickedOutsideCalendar = $(event.target).parents('#' + $.multicalendar.calendarContainer).length == 0
                    && !$(event.target).hasClass($.multicalendar._markerClass);//,

                if(clickedOutsideCalendar) {
                    //if($(event.target).is('img')
                    if($(event.target).is('span')
                        && $(event.target).prev('input').hasClass($.multicalendar._markerClass)) {
                        clickedOutsideCalendar = false;
                    }
                }

                if(clickedOutsideCalendar) {
                    $.multicalendar._hideCalendar(inst);
                }
            }
        },

        _checkExternalClickForTimeBox: function(event) {
            var clickedOutsideTimeBox = true;

            if($(event.target).is('#' + $.multicalendar.timeBoxContainer)) {
                clickedOutsideTimeBox = false;
            }

            if(clickedOutsideTimeBox && $(event.target).parents('#timeBoxContainer').length > 0) {
                clickedOutsideTimeBox = false;
            }

            if(clickedOutsideTimeBox) {
                //if($(event.target).is('img')
                if($(event.target).is('span') && $(event.target).hasClass('time-icon')
                    && $(event.target).prevAll('input').hasClass($.multicalendar._markerClass)) {
                    clickedOutsideTimeBox = false;
                }
            }

            if(clickedOutsideTimeBox) {
                $.multicalendar._hideTimeBox();
            }
        },

        _getCalendarOrder: function (id) {
            return parseInt(id.replace($.multicalendar.calendarIdPrefix,'')) - 1;
        },

        setDefaults: function(settings) {
            if(settings.firstDayOfTheWeek && isNaN(settings.firstDayOfTheWeek)) {
                settings.firstDayOfTheWeek = $.multicalendar._defaults.firstDayOfTheWeek;
            }

            $.extend(this._defaults, settings || {});

            settings.calendars=this._defaults.calendars;
            if(settings.calendars && typeof settings.calendars == 'string') {
                settings.calendars = [settings.calendars];
            }
            else {
                var calendars = $.extend([], $.multicalendar._removeInvalidCalendars(settings.calendars));
                var newCalendarsList = new Array();
                for(var i = 0, j = 0; i < calendars.length; i++) {
                    if(calendars[i] && $.trim(calendars[i]) != '') {
                        newCalendarsList[j] = calendars[i];
                        j++;
                    }

                }
                settings.calendars = newCalendarsList;
            }
            /*settings.defaultDateFormat=this._defaults.defaultDateFormat;
             settings.displayDateFormat=this._defaults.displayDateFormat;
             */
            $.extend(this._defaults, settings || {});

            $.multicalendar._processCalendarLocaleProps(settings);
            $.multicalendar._getTodayDates(settings);
            $.multicalendar._processTimeLocaleProps(settings);
            return this;
        },

        _processTimeLocaleProps : function(options) {
            if(options.calendars && options.timeLocaleProps) {
                $.timeEntry.setDefaults(options.timeLocaleProps);
            }
        },

        _splitString: function(stringToSplit, charIdentifier) {
            var splitArr = stringToSplit;
            if(typeof stringToSplit == "string") {
                splitArr = stringToSplit.split(charIdentifier);
                for(var i = 0; i < splitArr.length; i++) {
                    splitArr[i] = $.trim(splitArr[i]);
                }
            }
            return splitArr;
        },

        parse: function (dateString, calendarType) {
            var calendar = $.calendars.calendars[calendarType].prototype;
            var dateFormat = $.multicalendar._getDateFormat(calendarType);
            var cDateObj = calendar.parseDate(dateFormat, dateString, calendar.regional['']);
            return cDateObj;
        },

        formatCDateObject:function (cDateObj, dateFormat, calendar) {
            var calendarObj = $.calendars.calendars[calendar].prototype;
            var calLocalProps = $.calendars._localCals[calendar + '-'].local;
            $.extend(calendarObj, calendarObj.local? {} : {local: calLocalProps});
            var formattedDate = calendarObj.formatDate(dateFormat, cDateObj);
            return formattedDate;
        },

        _processCalendarLocaleProps : function (options) {
            if(options.calendars && options.calendarLocaleProps) {
                for(var i = 0; i < options.calendars.length; i++) {
                    if(options.calendarLocaleProps[options.calendars[i]]) {
                        var calendarLocaleProps = options.calendarLocaleProps[options.calendars[i]];

                        for(var key in calendarLocaleProps) {
                            var calPropValues = calendarLocaleProps[key];
                            if($.inArray(key, $.multicalendar._CAL_LOCALE_PARAMS_THAT_ARE_ARRAYS) != -1 && calPropValues.indexOf(key) == -1) {
                                calendarLocaleProps[key] = this._splitString(calPropValues, ',');
                            }
                            else {
                                delete calendarLocaleProps[key];
                            }
                        }

                        var localeCalendar = $.calendars.calendars[options.calendars[i]];
                        $.extend(localeCalendar.prototype.regional[''], calendarLocaleProps);
                        $.calendars.instance(options.calendars[i]).local.dateFormat = options.displayDateFormat;
                    }
                }
            }
        },

        _removeInvalidCalendars: function (calendars) {
            for(var i = 0; i < calendars.length; i++) {
                if(!$.calendars.calendars[calendars[i]]) {
                    calendars.splice(i,1);
                    i--;
                }
            }
            return calendars;
        },

        isValidDateFormat: function(calendar, dateString) {
            var isValid = false;
            try {
                var calendarObj = $.calendars.calendars[calendar].prototype;
                var calLocalProps = $.calendars._localCals[calendar + '-'].local;
                var cDateObj = calendarObj.parseDate(calLocalProps.dateFormat, dateString, calLocalProps);
                isValid = true;
            } catch (e) {
                isValid = false;
            }
            return isValid;
        },

        _addCalendarImage: function(inst) {
            var options = inst.settings;
            //var img = $('<img>');

            /*var img = $('<img>'); //Equivalent: $(document.createElement('img'))
             img.attr('src', inst.settings.buttonImage);
             img.insertAfter($(inst));*/

            var span = $('<span>');
            span.attr('class', 'calendar-icon');
            if(options.buttonImage && options.buttonImage != '') {
                span.attr('style', 'background-image: url("' + options.buttonImage + '");');
            }
            else if(options.buttonClass && options.buttonClass != '') {
                if(options.showTime) {
                    $(span).addClass("time-" + options.buttonClass);
                } else {
                    $(span).addClass(options.buttonClass);
                }

            }
            span.insertAfter($(inst));

            if(options.showTime) {
                var timeSpan = $('<span>');
                timeSpan.attr('class', 'calendar-icon');
                /*if(options.buttonImage && options.buttonImage != '') {
                 timeSpan.attr('style', 'background-image: url("' + options.buttonImage + '");');
                 }
                 else if(options.buttonClass && options.buttonClass != '') {
                 $(timeSpan).addClass(options.buttonClass);
                 } */
                $(timeSpan).addClass('time-icon');
                timeSpan.insertAfter(span);
            }
        },

        _getCentury: function(val) {
            var century = 0;
            try{
                century = parseInt($.i18n.prop("default.century.below.pivot"));
                if (val > parseInt($.i18n.prop("default.century.pivot")))
                    century = parseInt($.i18n.prop("default.century.above.pivot"));
            }catch(e){
            }
            if(!Number(century))
                century = 0;
            return century;
        },

        _interpretTimeConfigOptions : function(inst) {
            var settings = inst.settings;
            if(!settings.timeFormat) {
                settings.timeFormat = $.multicalendar._defaults.timeFormat;
            }
            var regEx = new RegExp("\\w+", "g");
            var matches = settings.timeFormat.match(regEx);
            $.unique(matches);

            var options = "{";
            for(var counter = 0; counter < matches.length; counter++) {
                switch(matches[counter]) {
                    /*                case "hh":
                     case "h":
                     console.log("hh or h");
                     break;*/
                    case "HH":
                    case "H":
                        options += '"show24Hours": true,';
                        break;
                    case "ss":
                    case "s":
                        options += '"showSeconds": true,';
                        //console.log("ss or s");
                        break;
                    case "kk":
                    case "k":
                        options += '"show24Hours": true,'
                        //console.log("kk or k");
                        break;
                    /*                case "mm":
                     case "m":
                     console.log("mm or m");
                     break;*/
                    /*                case "KK":
                     case "K":
                     console.log("KK or K");
                     break;*/
                    /*                case "a":
                     console.log("a");
                     break;*/
                }
            }

            options += '"ampmPrefix": " ",';
            options += '"separator":":",';
            //options += '"spinnerImage": "../time/spinnerUpDown.png",';
            options += '"spinnerIncDecOnly": true,';
            options += '"spinnerTexts":["left", "right"],';
            options += '"spinnerSize": [15, 16, 0]';
            options += '}';

            return $.parseJSON(options);
        }
    });

    $.fn.multiCalendarPicker = function(opts) {
        var inst = $(this)[0];
        var dateariaLabel = $(inst).attr('aria-label');
        var dateFormat = $.i18n.prop("default.date.format");
        var datepickerInfo = $.i18n.prop("js.input.datepicker.info");
        //Aria workaround:Introduce blank space so that reader reads as abbreviations
        dateFormat = dateFormat.split("").join(" ");
        dateariaLabel=dateariaLabel+" "+$.i18n.prop("js.input.datepicker.dateformatinfo")+" "+dateFormat;
        $(inst).attr('aria-label',dateariaLabel);
        $(inst).attr('title',datepickerInfo);
        if (!inst.isInstantiated) {
            if(opts && opts.firstDayOfTheWeek && isNaN(opts.firstDayOfTheWeek)) {
                opts.firstDayOfTheWeek = $.multicalendar._defaults.firstDayOfTheWeek;
            }
            var options = $.extend([], $.multicalendar._defaults, opts);

            inst.settings = options;

            $(inst).addClass($.multicalendar._markerClass);

            if(inst.settings.showTime) {
                $(inst).addClass('hasTimePicker');
            }

            if((options.buttonImage && options.buttonImage != '') || options.buttonClass && options.buttonClass != '') {
                $.multicalendar._addCalendarImage(inst);
            }

            $.multicalendar._registerEvents(inst);

            inst.isInstantiated = true;
        }
    }

    $.multicalendar = new MultiCalendarsPicker(); // singleton instance

})(jQuery);
var hideCalender=function(){

    if($('#checkId').is(":checked")){

        $('#multiCalendar1').hide();
        $('#multiCalendar2').show();
    }
    else{
        $('#multiCalendar2').hide();
        $('#multiCalendar1').show();
    }
}

var process = process || {env: {NODE_ENV: "development"}};
// add :focus selector
jQuery.expr[':'].focus = function( elem ) {
  return elem === document.activeElement && ( elem.type || elem.href );
};

$(function() {
    // requires _ and jquery.editable to be initialized
    $.datepicker._doKeyDown = _.wrap( $.datepicker._doKeyDown, function(func, event) {
        if ( !this._pressedKeys && event.keyCode == 13 ) {
            // if ENTER is the first keypress in the open datepicker, just close it
            $.datepicker._hideDatepicker();
        } else {
            this._pressedKeys = true;
            return func( event );
        }
    });

$.editable.addInputType( 'datepicker', { // note that this hides banner_ui_ss jquery.jeditable.datepicker.js

        /* create input element */
        element: function( settings, original ) {
            var form = $( this ),
            input = $( '<input id="multiCalendarDestination"/>' );
            input.attr( 'autocomplete','off' );
            form.append( input );
            return input;
        },

        /* attach jquery.ui.datepicker to the input element */
        plugin: function( settings, original ) {
            var form = this,
            input = form.find( "input" );

            // Don't cancel inline editing onblur to allow clicking datepicker
            // this is the jeditable settings, not the datepicker options
            settings.onblur = 'nothing';


            var datepicker = jQuery.extend( {}, settings.datepicker, {
                onSelect: function() {
                    // clicking specific day in the calendar should
                    // submit the form and close the input field
                    form.submit();
                    var handler = settings.datepicker.onSelect;
                    return handler && handler.apply( this, arguments );
                },

                onClose: function() {
                    setTimeout( function() {
                        if ( !input.is( ':focus' ) ) {
                            // input has NO focus after 150ms which means
                            // calendar was closed due to click outside of it
                            // so let's close the input field without saving
                            original.reset( form );
                        } else {
                            // input still HAS focus after 150ms which means
                            // calendar was closed due to Enter in the input field
                            // so lets submit the form and close the input field
                            form.submit();
                        }
                        var handler = settings.datepicker.onClose;
                        return handler && handler.apply( this, arguments );

                        // the delay is necessary; calendar must be already
                        // closed for the above :focus checking to work properly;
                        // without a delay the form is submitted in all scenarios, which is wrong
                    }, 150 );
                }
            });

            if (settings.datepicker) {
                jQuery.extend(datepicker, settings.datepicker);
            }

            input.multiCalendarPicker(datepicker);
        }
    } );
});

var process = process || {env: {NODE_ENV: "development"}};
﻿(function(){
    $.extend($.calendars.picker.commands,

        { // Command actions that may be added to a layout by name
            // name: { // The command name, use '{button:name}' or '{link:name}' in layouts
            //		text: '', // The field in the regional settings for the displayed text
            //		status: '', // The field in the regional settings for the status text
            //      // The keystroke to trigger the action
            //		keystroke: {keyCode: nn, ctrlKey: boolean, altKey: boolean, shiftKey: boolean},
            //		enabled: fn, // The function that indicates the command is enabled
            //		date: fn, // The function to get the date associated with this action
            //		action: fn} // The function that implements the action
            prev: {text: 'prevText', status: 'prevStatus', // Previous month
                keystroke: {keyCode: 33}, // Page up
                enabled: function(inst) {
                    var minDate = inst.curMinDate();
                    return (!minDate || inst.drawDate.newDate().
                        add(1 - inst.get('monthsToStep') - inst.get('monthsOffset'), 'm').
                        day(inst.get('calendar').minDay).add(-1, 'd').compareTo(minDate) != -1); },
                date: function(inst) {
                    return inst.drawDate.newDate().
                        add(-inst.get('monthsToStep') - inst.get('monthsOffset'), 'm').
                        day(inst.get('calendar').minDay); },
                action: function(inst) {
                    $.calendars.picker.changeMonth(this, -inst.get('monthsToStep')); }
            },
            prevJump: {text: 'prevJumpText', status: 'prevJumpStatus', // Previous year
                keystroke: {keyCode: 33, ctrlKey: true, shiftKey:true}, // Ctrl + shift + Page up
                enabled: function(inst) {
                    var minDate = inst.curMinDate();
                    return (!minDate || inst.drawDate.newDate().
                        add(1 - inst.get('monthsToJump') - inst.get('monthsOffset'), 'm').
                        day(inst.get('calendar').minDay).add(-1, 'd').compareTo(minDate) != -1); },
                date: function(inst) {
                    return inst.drawDate.newDate().
                        add(-inst.get('monthsToJump') - inst.get('monthsOffset'), 'm').
                        day(inst.get('calendar').minDay); },
                action: function(inst) {
                    $.calendars.picker.changeMonth(this, -inst.get('monthsToJump')); }
            },
            next: {text: 'nextText', status: 'nextStatus', // Next month
                keystroke: {keyCode: 34}, // Page down
                enabled: function(inst) {
                    var maxDate = inst.get('maxDate');
                    return (!maxDate || inst.drawDate.newDate().
                        add(inst.get('monthsToStep') - inst.get('monthsOffset'), 'm').
                        day(inst.get('calendar').minDay).compareTo(maxDate) != +1); },
                date: function(inst) {
                    return inst.drawDate.newDate().
                        add(inst.get('monthsToStep') - inst.get('monthsOffset'), 'm').
                        day(inst.get('calendar').minDay); },
                action: function(inst) {
                    $.calendars.picker.changeMonth(this, inst.get('monthsToStep')); }
            },
            nextJump: {text: 'nextJumpText', status: 'nextJumpStatus', // Next year
                keystroke: {keyCode: 34, ctrlKey: true, shiftKey:true}, // Ctrl + shift + Page down
				enabled: function(inst) {
                    var maxDate = inst.get('maxDate');
                    return (!maxDate || inst.drawDate.newDate().
                        add(inst.get('monthsToJump') - inst.get('monthsOffset'), 'm').
                        day(inst.get('calendar').minDay).compareTo(maxDate) != +1);	},
                date: function(inst) {
                    return inst.drawDate.newDate().
                        add(inst.get('monthsToJump') - inst.get('monthsOffset'), 'm').
                        day(inst.get('calendar').minDay); },
                action: function(inst) {
					$.calendars.picker.changeMonth(this, inst.get('monthsToJump')); }
            },
			current: {text: 'currentText', status: 'currentStatus', // Current month
				keystroke: {keyCode: 36, ctrlKey: true, shiftKey:true}, // Ctrl + shift + Home
				enabled: function(inst) {
					var minDate = inst.curMinDate();
					var maxDate = inst.get('maxDate');
					var curDate = inst.selectedDates[0] || inst.get('calendar').today();
					return (!minDate || curDate.compareTo(minDate) != -1) &&
						(!maxDate || curDate.compareTo(maxDate) != +1); },
				date: function(inst) {
					return inst.selectedDates[0] || inst.get('calendar').today(); },
				action: function(inst) {
					var curDate = inst.selectedDates[0] || inst.get('calendar').today();
					$.calendars.picker.showMonth(this, curDate.year(), curDate.month()); }
			},
			today: {text: 'todayText', status: 'todayStatus', // Today's month
				keystroke: {keyCode: 36, ctrlKey: true, shiftKey:true}, // Ctrl + shift +Home
				enabled: function(inst) {
					var minDate = inst.curMinDate();
					var maxDate = inst.get('maxDate');
					return (!minDate || inst.get('calendar').today().compareTo(minDate) != -1) &&
						(!maxDate || inst.get('calendar').today().compareTo(maxDate) != +1); },
				date: function(inst) { return inst.get('calendar').today(); },
				action: function(inst) { $.calendars.picker.showMonth(this); }
			},
            clear: {text: 'clearText', status: 'clearStatus', // Clear the datepicker
                keystroke: {keyCode: 35, ctrlKey: true, shiftKey:true}, // Ctrl + shift + End
                enabled: function(inst) { return true; },
                date: function(inst) { return null; },
                action: function(inst) { $.calendars.picker.clear(this); }
            },
            close: {text: 'closeText', status: 'closeStatus', // Close the datepicker
                keystroke: {keyCode: 27}, // Escape
                enabled: function(inst) { return true; },
                date: function(inst) { return null; },
                action: function(inst) {
					$.multicalendar._hideCalendar(inst);}
            },
            prevWeek: {text: 'prevWeekText', status: 'prevWeekStatus', // Previous week
                keystroke: {keyCode: 38}, // Up
                enabled: function(inst) {
                    var minDate = inst.curMinDate();
                    return (!minDate || inst.drawDate.newDate().
                        add(-inst.get('calendar').daysInWeek(), 'd').compareTo(minDate) != -1); },
                date: function(inst) { return inst.drawDate.newDate().
                    add(-inst.get('calendar').daysInWeek(), 'd'); },
                action: function(inst) { $.calendars.picker.changeDay(
                    this, -inst.get('calendar').daysInWeek()); }
			},
            prevDay: {text: 'prevDayText', status: 'prevDayStatus', // Previous day
                keystroke: {keyCode: 37}, //  Left
                enabled: function(inst) {
                    var minDate = inst.curMinDate();
                    return (!minDate || inst.drawDate.newDate().add(-1, 'd').
                        compareTo(minDate) != -1); },
                date: function(inst) { return inst.drawDate.newDate().add(-1, 'd'); },
                action: function(inst) {
					if(isRTLMode()){
						$.calendars.picker.changeDay(this, 1);
					}
					else
						$.calendars.picker.changeDay(this, -1);
				}
            },
            nextDay: {text: 'nextDayText', status: 'nextDayStatus', // Next day
                keystroke: {keyCode: 39}, // Right
                enabled: function(inst) {
					var maxDate = inst.get('maxDate');
                    return (!maxDate || inst.drawDate.newDate().add(1, 'd').
                        compareTo(maxDate) != +1); },
                date: function(inst) { return inst.drawDate.newDate().add(1, 'd'); },
                action: function(inst) {
					if (isRTLMode()) {
						$.calendars.picker.changeDay(this, -1);
					}
					else
						$.calendars.picker.changeDay(this, 1);
				}
            },
            nextWeek: {text: 'nextWeekText', status: 'nextWeekStatus', // Next week
                keystroke: {keyCode: 40}, // Down
                enabled: function(inst) {
                    var maxDate = inst.get('maxDate');
                    return (!maxDate || inst.drawDate.newDate().
                        add(inst.get('calendar').daysInWeek(), 'd').compareTo(maxDate) != +1); },
                date: function(inst) { return inst.drawDate.newDate().
                    add(inst.get('calendar').daysInWeek(), 'd'); },
                action: function(inst) { $.calendars.picker.changeDay(
                    this, inst.get('calendar').daysInWeek()); }
            },

			firstDayOfMonth: {text: 'firstDayText', status: 'prevDayStatus', // first day of month
				keystroke: {keyCode: 36}, //  Home
				enabled: function(inst) {
					var target = $(this);
					var minDate = inst.curMinDate();
					console.info(inst.drawDate._day);

					return (!minDate || inst.drawDate.newDate().add(-1, 'd').
						compareTo(minDate) != -1); },
				date: function(inst) {

					return inst.drawDate.newDate().add(0, 'd'); },
				action: function(inst) { $.calendars.picker.changeDay(this, -inst.drawDate._day+1); }
			},
			lastDayOfMonth: {text: 'lastDayText', status: 'prevDayStatus', // last day of month
				keystroke: {keyCode: 35}, //  end

				enabled: function(inst) {
					var target = $(this);
					var minDate = inst.curMinDate();
					return (!minDate || inst.drawDate.newDate().add(-1, 'd').
						compareTo(minDate) != -1); },
				date: function(inst) {
					return inst.drawDate.newDate().add(0, 'd'); },
				action: function(inst) {
					var daysInMonth=$.calendars.picker._checkMinMax(inst.drawDate, inst).daysInMonth(inst.drawDate._year,inst.drawDate._month)
					$.calendars.picker.changeDay(this, daysInMonth-inst.drawDate._day); }
			},
            activateNextCalendar: {text: 'activateNextCalendarText', status: 'activateNextCalendarStatus',
                keystroke: {keyCode: 83,shiftKey:true }, // shift + s
                enabled: function(inst) {
                    return true;
                },
                date: function(inst) {
                },
                action: function(inst) {
                    $('#' + $.multicalendar.calendarIdPrefix + $.multicalendar.activeCalendar ).removeClass('activeCalendar');
                    $.multicalendar.activeCalendar = $.multicalendar.activeCalendar + 1;
                    if(!$('#' + $.multicalendar.calendarIdPrefix + $.multicalendar.activeCalendar ).length){$.multicalendar.activeCalendar = 1; }
                    $('#' + $.multicalendar.calendarIdPrefix + $.multicalendar.activeCalendar ).addClass('activeCalendar');
                }

            },
			showCalendar: {text: 'showCalendarText', status: 'showCalendarStatus',
                keystroke: {keyCode: 120 }, // F9
                enabled: function(inst) {
                    return true;
                },
                date: function(inst) {
                },
                action: function(inst) {
                    $.multicalendar._showCalendar(inst);
					$(inst).attr('readOnly','true');

                }

            }

        }

    );



    $.extend($.calendars.picker,{
	/* Generate the datepicker content for this control.
	   @param  target  (element) the control to affect
	   @param  inst    (object) the current instance settings
	   @return  (jQuery) the datepicker content */
	_generateContent: function(target, inst) {
		var calendar = inst.get('calendar');
		var renderer = inst.get('renderer');
		var monthsToShow = inst.get('monthsToShow');
		monthsToShow = ($.isArray(monthsToShow) ? monthsToShow : [1, monthsToShow]);
		inst.drawDate = this._checkMinMax(
			inst.drawDate || inst.get('defaultDate') || calendar.today(), inst);
		var drawDate = inst.drawDate.newDate().add(-inst.get('monthsOffset'), 'm');
		// Generate months
		var monthRows = '';
		for (var row = 0; row < monthsToShow[0]; row++) {
			var months = '';
			for (var col = 0; col < monthsToShow[1]; col++) {
				months += this._generateMonth(target, inst, drawDate.year(),
					drawDate.month(), calendar, renderer, (row == 0 && col == 0));
				drawDate.add(1, 'm');
			}
			monthRows += this._prepare(renderer.monthRow, inst).replace(/\{months\}/, months);
		}
		var picker = this._prepare(renderer.picker, inst).replace(/\{months\}/, monthRows).
			replace(/\{weekHeader\}/g, this._generateDayHeaders(inst, calendar, renderer)) +
			(!inst.inline ?
			'<iframe src="javascript:void(0);" class="' + this._coverClass + '"></iframe>' : '');
		// Add commands
		var commands = inst.get('commands');
		var asDateFormat = inst.get('commandsAsDateFormat');
		var addCommand = function(type, open, close, name, classes) {
			if (picker.indexOf('{' + type + ':' + name + '}') == -1) {
				return;
			}
			var command = commands[name];
			var date = (asDateFormat ? command.date.apply(target, [inst]) : null);
			picker = picker.replace(new RegExp('\\{' + type + ':' + name + '\\}', 'g'),
				'<' + open +
				(command.status ? ' title="' + inst.get(command.status) + '"' : '') +
				' class="' + renderer.commandClass + ' ' +
				renderer.commandClass + '-' + name + ' ' + classes +
				(command.enabled(inst) ? '' : ' ' + renderer.disabledClass) + '">' +
				(date ? date.formatDate(inst.get(command.text)) : inst.get(command.text)) +
				'</' + close + '>');
		};
		for (var name in commands) {
			addCommand('button', 'button type="button"', 'button', name,
				renderer.commandButtonClass);
			addCommand('link', 'a href="javascript:void(0)"', 'a', name,
				renderer.commandLinkClass);
		}
		picker = $(picker);
		if (monthsToShow[1] > 1) {
			var count = 0;
			$(renderer.monthSelector, picker).each(function() {
				var nth = ++count % monthsToShow[1];
				$(this).addClass(nth == 1 ? 'first' : (nth == 0 ? 'last' : ''));
			});
		}
		// Add calendar behaviour
		var self = this;
		picker.find(renderer.daySelector + ' a').hover(
				function() { $(this).addClass(renderer.highlightedClass); },
				function() {
					(inst.inline ? $(this).parents('.' + self.markerClass) : inst.div).
						find(renderer.daySelector + ' a').
						removeClass(renderer.highlightedClass);
				}).
			click(function() {
				self.selectDate(target, this);
			}).end().
			find('select.' + this._monthYearClass + ':not(.' + this._anyYearClass + ')').change(function() {
				var monthYear = $(this).val().split('/');
				self.showMonth(target, parseInt(monthYear[1], 10), parseInt(monthYear[0], 10));
			}).end().
			find('select.' + this._anyYearClass).click(function() {
				$(this).next('input').css({left: this.offsetLeft, top: this.offsetTop,
					width: this.offsetWidth, height: this.offsetHeight}).show().focus();
			}).end().
			find('input.' + self._monthYearClass).change(function() {
				try {
					var year = parseInt($(this).val(), 10);
					year = (isNaN(year) ? inst.drawDate.year() : year);
					self.showMonth(target, year, inst.drawDate.month(), inst.drawDate.day());
				}
				catch (e) {
					alert(e);
				}
			}).keydown(function(event) {
				if (event.keyCode == 27) { // Escape
					$(event.target).hide();
					inst.target.focus();
				}
			});
		// Add command behaviour
		picker.find('.' + renderer.commandClass).click(function() {
				if (!$(this).hasClass(renderer.disabledClass)) {
					var action = this.className.replace(
						new RegExp('^.*' + renderer.commandClass + '-([^ ]+).*$'), '$1');
					$.calendars.picker.performAction(target, action);
				}
            return false;
			});
		// Add classes
		if (inst.get('isRTL')) {
			picker.addClass(renderer.rtlClass);
		}
		if (monthsToShow[0] * monthsToShow[1] > 1) {
			picker.addClass(renderer.multiClass);
		}
		var pickerClass = inst.get('pickerClass');
		if (pickerClass) {
			picker.addClass(pickerClass);
		}
		// Resize
		$('body').append(picker);
		/*
		var width = 0;
		picker.find(renderer.monthSelector).each(function() {
			width += $(this).outerWidth();
		});
		picker.width(width / monthsToShow[0]);
		*/
		// Pre-show customisation
		var onShow = inst.get('onShow');
		if (onShow) {
			onShow.apply(target, [picker, calendar, inst]);
		}
		return picker;
	},

    _generateMonth : function(target, inst, year, month, calendar, renderer, first) {
		var daysInMonth = calendar.daysInMonth(year, month);
		var monthsToShow = inst.get('monthsToShow');
		monthsToShow = ($.isArray(monthsToShow) ? monthsToShow : [1, monthsToShow]);
		var fixedWeeks = inst.get('fixedWeeks') || (monthsToShow[0] * monthsToShow[1] > 1);
		var firstDay = inst.get('firstDay');
		firstDay = (firstDay == null ? calendar.local.firstDay : firstDay);
		var leadDays = (calendar.dayOfWeek(year, month, calendar.minDay) -
			firstDay + calendar.daysInWeek()) % calendar.daysInWeek();
		var numWeeks = (fixedWeeks ? 6 : Math.ceil((leadDays + daysInMonth) / calendar.daysInWeek()));
		var showOtherMonths = inst.get('showOtherMonths');
		var selectOtherMonths = inst.get('selectOtherMonths') && showOtherMonths;
		var dayStatus = inst.get('dayStatus');
		var minDate = (inst.pickingRange ? inst.selectedDates[0] : inst.get('minDate'));
		var maxDate = inst.get('maxDate');
		var rangeSelect = inst.get('rangeSelect');
		var onDate = inst.get('onDate');
		var showWeeks = renderer.week.indexOf('{weekOfYear}') > -1;
		var calculateWeek = inst.get('calculateWeek');
		var today = $.multicalendar._todaysDate(calendar);//calendar.today();
		var drawDate = calendar.newDate(year, month, calendar.minDay);
		drawDate.add(-leadDays - (fixedWeeks &&
			(drawDate.dayOfWeek() == firstDay || drawDate.daysInMonth() < calendar.daysInWeek())?
			calendar.daysInWeek() : 0), 'd');
		var jd = drawDate.toJD();
		// Generate weeks
		var weeks = '';
		for (var week = 0; week < numWeeks; week++) {
			var weekOfYear = (!showWeeks ? '' : '<span class="jd' + jd + '">' +
				(calculateWeek ? calculateWeek(drawDate) : drawDate.weekOfYear()) + '</span>');
			var days = '';
			for (var day = 0; day < calendar.daysInWeek(); day++) {
				var selected = false;
				if (rangeSelect && inst.selectedDates.length > 0) {
					selected = (drawDate.compareTo(inst.selectedDates[0]) != -1 &&
						drawDate.compareTo(inst.selectedDates[1]) != +1)
				}
				else {
					for (var i = 0; i < inst.selectedDates.length; i++) {
						if (inst.selectedDates[i].compareTo(drawDate) == 0) {
							selected = true;
							break;
						}
					}
				}
				var dateInfo = (!onDate ? {} :
					onDate.apply(target, [drawDate, drawDate.month() == month]));
				var selectable = (selectOtherMonths || drawDate.month() == month) &&
					this._isSelectable(target, drawDate, dateInfo.selectable, minDate, maxDate);
				days += this._prepare(renderer.day, inst).replace(/\{day\}/g,
					(selectable ? '<a href="javascript:void(0)" "onclick="return false;"' : '<span') +
					' class="jd' + jd + ' ' + (dateInfo.dateClass || '') +
					(selected && (selectOtherMonths || drawDate.month() == month) ?
					' ' + renderer.selectedClass : '') +
					(selectable ? ' ' + renderer.defaultClass : '') +
					(drawDate.weekDay() ? '' : ' ' + renderer.weekendClass) +
					(drawDate.month() == month ? '' : ' ' + renderer.otherMonthClass) +
					(drawDate.compareTo(today) == 0 && drawDate.month() == month ?
					' ' + renderer.todayClass : '') +
                    (drawDate.compareTo(inst.drawDate) == 0 && drawDate.month() == month && $.multicalendar._isCalendarShown?
					' ' + renderer.highlightedClass : '') + '"' +
					(dateInfo.title || (dayStatus && selectable) ? ' title="' +
					(dateInfo.title || $.i18n.prop("js.datepicker.selectText") +" "+ drawDate.formatDate(dayStatus)) + '"' : '') + '>' +
					(showOtherMonths || drawDate.month() == month ?
					dateInfo.content || drawDate.day() : '&nbsp;') +
					(selectable ? '</a>' : '</span>'));
				days =  days.replace(/<td>/g,
					'<td class="' +
					(drawDate.compareTo(today) == 0 && drawDate.month() == month ?
					' ' + renderer.todayClass : '') + '">');
				drawDate.add(1, 'd');
				jd++;
			}
			weeks += this._prepare(renderer.week, inst).replace(/\{days\}/g, days).
				replace(/\{weekOfYear\}/g, weekOfYear);
		}
		var monthHeader = this._prepare(renderer.month, inst).match(/\{monthHeader(:[^\}]+)?\}/);
		monthHeader = (monthHeader[0].length <= 13 ? 'MM yyyy' :
			monthHeader[0].substring(13, monthHeader[0].length - 1));
		monthHeader = (first ? this._generateMonthSelection(
			inst, year, month, minDate, maxDate, monthHeader, calendar, renderer) :
			calendar.formatDate(monthHeader, calendar.newDate(year, month, calendar.minDay)));
		var weekHeader = this._prepare(renderer.weekHeader, inst).
			replace(/\{days\}/g, this._generateDayHeaders(inst, calendar, renderer));
		return this._prepare(renderer.month, inst).replace(/\{monthHeader(:[^\}]+)?\}/g, monthHeader).
			replace(/\{weekHeader\}/g, weekHeader).replace(/\{weeks\}/g, weeks);
	},

    keyDownMultipicker : function(event, activeCalendar) {
		var target = activeCalendar;
		var inst = $.data(target, $.calendars.picker.dataName);
		var handled = false;
        var visibleInstance = $.multicalendar._isCalendarShown && $.multicalendar._currentObj && $.multicalendar._currentObj.get(0);

        if (event.keyCode == 9 ) { // Tab - close
	    $.multicalendar._hideCalendar(visibleInstance);
	}
	else if( event.keyCode == 27) { // Esc - close
            $.multicalendar._hideCalendar(visibleInstance);
            handled = true;
        }
        else if (event.keyCode == 13) { // Enter - select
            if(($('.ui-state-default.ui-state-hover').length !== 0)){
                $('.ui-state-default.ui-state-hover').click();
            }else if($('.ui-state-active.ui-state-default').length !== 0 ){
                $('.ui-state-active.ui-state-default').click();
            }else if ($('.ui-state-default.ui-state-highlight') !== 0){
                $('.ui-state-default.ui-state-highlight').click();
            }
            handled = true;
        }
		else if (event.keyCode == 32) { // Space Select date and close.
			$('#multiCalendarContainer .activeCalendar a.ui-state-hover').click();
			handled = true;
		}
        else { // Command keystrokes
            var commands = inst.get('commands');
			handled = true;
            for (var name in commands) {
                var command = commands[name];
                if (command.keystroke.keyCode == event.keyCode &&
                        !!command.keystroke.ctrlKey == !!(event.ctrlKey || event.metaKey) &&
                        !!command.keystroke.altKey == event.altKey &&
                        !!command.keystroke.shiftKey == event.shiftKey) {
                    $.calendars.picker.performAction(target, name);
                    break;
                }
            }
        }

		inst.ctrlKey = ((event.keyCode < 48 && event.keyCode != 32) ||
			event.ctrlKey || event.metaKey);
		if (handled) {
			event.preventDefault();
			event.stopPropagation();
            if($.multicalendar._isCalendarShown && $('.activeCalendar a.ui-state-hover')[0])
                $('#sceenReaderText').html($('.activeCalendar a.ui-state-hover')[0].title);
		}
		return !handled;
	},

	keyPressMultipicker: function(event, activeCalendar) {
		var target = activeCalendar;
		var inst = $.data(target, $.calendars.picker.dataName);
		if (inst && inst.get('constrainInput')) {
			var ch = String.fromCharCode(event.keyCode || event.charCode);
			var allowedChars = $.calendars.picker._allowedChars(inst);
			return (event.metaKey || inst.ctrlKey || ch < ' ' ||
				!allowedChars || allowedChars.indexOf(ch) > -1);
		}
		return true;
	}
    });
})(jQuery);

var process = process || {env: {NODE_ENV: "development"}};
$(document).ready(function() {

    $.calendars.picker.setDefaults({
        renderer:          $.calendars.picker.themeRollerRenderer,
        changeMonth:       true,
        showAnim:          "fadeIn",
        showOptions:       null,
        showSpeed:         500,
        useMouseWheel:     false,
        showOtherMonths:   true,
        selectOtherMonths: true,
        prevJumpText:      "<span class=\"ui-icon ui-icon-circle-triangle-ww\"></span>",
        nextJumpText:      "<span class=\"ui-icon ui-icon-circle-triangle-ee\"></span>",
        closeText:         "<span id='closeId' class=\"ui-icon ui-icon-close\"></span>",
        prevText:          "<span class=\"ui-icon ui-icon-circle-triangle-w\"> </span>",
        nextText:          "<span class=\"ui-icon ui-icon-circle-triangle-e\"> </span>",
        dayStatus:         $.i18n.prop("js.datepicker.tooltipDateFormat"),
        prevStatus:        $.i18n.prop("js.datepicker.prevStatus"),
        nextStatus:        $.i18n.prop("js.datepicker.nextStatus"),
        prevJumpStatus: $.i18n.prop("js.datepicker.prevJumpStatus"),
        nextJumpStatus:$.i18n.prop("js.datepicker.nextJumpStatus")
    });

    var default_calendar=$.i18n.prop("default.calendar");
    var default_calendar1=$.i18n.prop("default.calendar1");
    var default_calendar2=$.i18n.prop("default.calendar2");
    var firstDayOfTheWeek=$.i18n.prop("default.firstDayOfTheWeek");

    var islamicCalendarLocaleProps = {
        monthNames: $.i18n.prop("default.islamic.monthNames"),
		monthNamesShort: $.i18n.prop("default.islamic.monthNamesShort"),
		dayNames: $.i18n.prop("default.islamic.dayNames"),
		dayNamesShort: $.i18n.prop("default.islamic.dayNamesShort"),
        dayNamesMin: $.i18n.prop("default.islamic.dayNamesMin")
    };
    var ummalquraCalendarLocaleProps = {
        monthNames: $.i18n.prop("default.ummalqura.monthNames"),
        monthNamesShort: $.i18n.prop("default.ummalqura.monthNamesShort"),
        dayNames: $.i18n.prop("default.ummalqura.dayNames"),
        dayNamesShort: $.i18n.prop("default.ummalqura.dayNamesShort"),
        dayNamesMin: $.i18n.prop("default.ummalqura.dayNamesMin")
    };

    var gregorianCalendarLocaleProps = {
        monthNames: $.i18n.prop("default.gregorian.monthNames"),
		monthNamesShort: $.i18n.prop("default.gregorian.monthNamesShort"),
		dayNames: $.i18n.prop("default.gregorian.dayNames"),
		dayNamesShort: $.i18n.prop("default.gregorian.dayNamesShort"),
        dayNamesMin: $.i18n.prop("default.gregorian.dayNamesMin")
    };

    var calendarLocaleProps = {islamic: islamicCalendarLocaleProps, ummalqura: ummalquraCalendarLocaleProps, gregorian: gregorianCalendarLocaleProps};
    var timeLocaleProps = {
        ampmNames: [$.i18n.prop('default.time.am'), $.i18n.prop('default.time.pm')],
    	spinnerTexts: [$.i18n.prop('default.time.increment'), $.i18n.prop('default.time.decrement')]
    };

    var dateConverterURL = "dateConverter"
    if($('meta[name=menuBaseURL]').attr("content")){
           dateConverterURL = $('meta[name=menuBaseURL]').attr("content") + '/' + dateConverterURL;
    }

    var converters = {
        gregorianToIslamic: {
            format: {
                url: dateConverterURL,
                nameOfDateParam: 'date',
                extraParams: {
                    calendar: 'islamic-civil',
                    fromDateFormat: 'MM/dd/yyyy',
                    toDateFormat: 'MM/dd/yyyy',
                    toULocale: $.i18n.prop("default.calendar.islamic.ulocale"),
                    fromULocale: $.i18n.prop("default.calendar.gregorian.translation")
                }
            }
        },
        islamicToGregorian: {
            format: {
                url: dateConverterURL,
                nameOfDateParam: 'date',
                extraParams: {
                    calendar: 'islamic-civil',
                    fromDateFormat: 'MM/dd/yyyy',
                    toDateFormat: 'MM/dd/yyyy',
                    toULocale: $.i18n.prop("default.calendar.gregorian.translation"),
                    fromULocale: $.i18n.prop("default.calendar.islamic.ulocale")
                }
            }
        },
        gregorianToUmmalqura: {
            format: {
                url: dateConverterURL,
                nameOfDateParam: 'date',
                extraParams: {
                    calendar: 'islamic-umalqura',
                    fromDateFormat: 'MM/dd/yyyy',
                    toDateFormat: 'MM/dd/yyyy',
                    toULocale: $.i18n.prop("default.calendar.ummalqura.ulocale"),
                    fromULocale: $.i18n.prop("default.calendar.gregorian.translation")
                }
            }
        },

        ummalquraToGregorian: {
            format: {
                url: dateConverterURL,
                nameOfDateParam: 'date',
                extraParams: {
                    calendar: 'islamic-umalqura',
                    fromDateFormat: 'MM/dd/yyyy',
                    toDateFormat: 'MM/dd/yyyy',
                    toULocale: $.i18n.prop("default.calendar.gregorian.translation"),
                    fromULocale: $.i18n.prop("default.calendar.ummalqura.ulocale")
                }
            }
        }

    };

    $.multicalendar.setDefaults({
        defaultCalendar: default_calendar,
        converters: converters,
        defaultDateFormat: 'mm/dd/yyyy',
        displayDateFormat: $.i18n.prop("js.datepicker.dateFormat"),
        calendars:[ default_calendar1, default_calendar2 ],
        isRTL: $.i18n.prop("default.language.direction"),
        calendarLocaleProps: calendarLocaleProps,
        buttonClass: 'calendar-img',
        showOn: 'both',
        firstDayOfTheWeek: firstDayOfTheWeek,
        timeFormat: $.i18n.prop("default.time.format"),
        timeLocaleProps: timeLocaleProps
    });
});
var process = process || {env: {NODE_ENV: "development"}};
﻿/* http://keith-wood.name/calendars.html
   UmmAlQura calendar for jQuery v2.0.2.
   Written by Amro Osama March 2013.
   Modified by Binnooh.com & www.elm.sa - 2014 - Added dates back to 1276 Hijri year.
   Available under the MIT (http://keith-wood.name/licence.html) license. 
   Please attribute the author if you use it. */

(function ($) { // Hide scope, no $ conflict

	/** Implementation of the UmmAlQura or 'saudi' calendar.
		See also <a href="http://en.wikipedia.org/wiki/Islamic_calendar#Saudi_Arabia.27s_Umm_al-Qura_calendar">http://en.wikipedia.org/wiki/Islamic_calendar#Saudi_Arabia.27s_Umm_al-Qura_calendar</a>.
		<a href="http://www.ummulqura.org.sa/About.aspx">http://www.ummulqura.org.sa/About.aspx</a>
		<a href="http://www.staff.science.uu.nl/~gent0113/islam/ummalqura.htm">http://www.staff.science.uu.nl/~gent0113/islam/ummalqura.htm</a>
		@class UmmAlQuraCalendar
		@param [language=''] {string} The language code (default English) for localisation. */
	function UmmAlQuraCalendar(language) {
		this.local = this.regional[language || ''] || this.regional[''];
	}

	UmmAlQuraCalendar.prototype = new $.calendars.baseCalendar;

	$.extend(UmmAlQuraCalendar.prototype, {
		/** The calendar name.
			@memberof UmmAlQuraCalendar */
		name: 'UmmAlQura',
		//jdEpoch: 1948440, // Julian date of start of UmmAlQura epoch: 14 March 1937 CE
		//daysPerMonth: // Days per month in a common year, replaced by a method.
		/** <code>true</code> if has a year zero, <code>false</code> if not.
			@memberof UmmAlQuraCalendar */
		hasYearZero: false,
		/** The minimum month number.
			@memberof UmmAlQuraCalendar */
		minMonth: 1,
		/** The first month in the year.
			@memberof UmmAlQuraCalendar */
		firstMonth: 1,
		/** The minimum day number.
			@memberof UmmAlQuraCalendar */
		minDay: 1,

		/** Localisations for the plugin.
			Entries are objects indexed by the language code ('' being the default US/English).
			Each object has the following attributes.
			@memberof UmmAlQuraCalendar
			@property name {string} The calendar name.
			@property epochs {string[]} The epoch names.
			@property monthNames {string[]} The long names of the months of the year.
			@property monthNamesShort {string[]} The short names of the months of the year.
			@property dayNames {string[]} The long names of the days of the week.
			@property dayNamesShort {string[]} The short names of the days of the week.
			@property dayNamesMin {string[]} The minimal names of the days of the week.
			@property dateFormat {string} The date format for this calendar.
					See the options on <a href="BaseCalendar.html#formatDate"><code>formatDate</code></a> for details.
			@property firstDay {number} The number of the first day of the week, starting at 0.
			@property isRTL {number} <code>true</code> if this localisation reads right-to-left. */
		regional: { // Localisations
			'': {
				name: 'Umm al-Qura',
				epochs: ['BH', 'AH'],
				monthNames: ['Al-Muharram', 'Safar', 'Rabi\' al-awwal', 'Rabi\' Al-Thani', 'Jumada Al-Awwal', 'Jumada Al-Thani',
				'Rajab', 'Sha\'aban', 'Ramadan', 'Shawwal', 'Dhu al-Qi\'dah', 'Dhu al-Hijjah'],
				monthNamesShort: ['Muh', 'Saf', 'Rab1', 'Rab2', 'Jum1', 'Jum2', 'Raj', 'Sha\'', 'Ram', 'Shaw', 'DhuQ', 'DhuH'],
				dayNames: ['Yawm al-Ahad', 'Yawm al-Ithnain', 'Yawm al-Thalāthā’', 'Yawm al-Arba‘ā’', 'Yawm al-Khamīs', 'Yawm al-Jum‘a', 'Yawm al-Sabt'],
				dayNamesMin: ['Ah', 'Ith', 'Th', 'Ar', 'Kh', 'Ju', 'Sa'],
				digits: null,
				dateFormat: 'yyyy/mm/dd',
				firstDay: 6,
				isRTL: true
			}
		},

		/** Determine whether this date is in a leap year.
			@memberof UmmAlQuraCalendar
			@param year {CDate|number} The date to examine or the year to examine.
			@return {boolean} <code>true</code> if this is a leap year, <code>false</code> if not.
			@throws Error if an invalid year or a different calendar used. */
		leapYear: function (year) {
			var date = this._validate(year, this.minMonth, this.minDay, $.calendars.local.invalidYear);
			return (this.daysInYear(date.year()) === 355);
		},

		/** Determine the week of the year for a date.
			@memberof UmmAlQuraCalendar
			@param year {CDate|number} The date to examine or the year to examine.
			@param [month] {number} The month to examine.
			@param [day] {number} The day to examine.
			@return {number} The week of the year.
			@throws Error if an invalid date or a different calendar used. */
		weekOfYear: function (year, month, day) {
			// Find Sunday of this week starting on Sunday
			var checkDate = this.newDate(year, month, day);
			checkDate.add(-checkDate.dayOfWeek(), 'd');
			return Math.floor((checkDate.dayOfYear() - 1) / 7) + 1;
		},

		/** Retrieve the number of days in a year.
			@memberof UmmAlQuraCalendar
			@param year {CDate|number} The date to examine or the year to examine.
			@return {number} The number of days.
			@throws Error if an invalid year or a different calendar used. */
		daysInYear: function (year) {
			var daysCount = 0;
			for (var i = 1; i <= 12; i++) {
				daysCount += this.daysInMonth(year, i);
			}
			return daysCount;
		},

		/** Retrieve the number of days in a month.
			@memberof UmmAlQuraCalendar
			@param year {CDate|number} The date to examine or the year of the month.
			@param [month] {number} The month.
			@return {number} The number of days in this month.
			@throws Error if an invalid month/year or a different calendar used. */
		daysInMonth: function (year, month) {
			var date = this._validate(year, month, this.minDay, $.calendars.local.invalidMonth);
			var mcjdn = date.toJD() - 2400000 + 0.5; // Modified Chronological Julian Day Number (MCJDN)
			// the MCJDN's of the start of the lunations in the Umm al-Qura calendar are stored in the 'ummalqura_dat' array
			var index = 0;
			for (var i = 0; i < ummalqura_dat.length; i++) {
				if (ummalqura_dat[i] > mcjdn) {
					return (ummalqura_dat[index] - ummalqura_dat[index - 1]);
				}
				index++;
			}
			return 30; // Unknown outside
		},

		/** Determine whether this date is a week day.
			@memberof UmmAlQuraCalendar
			@param year {CDate|number} The date to examine or the year to examine.
			@param [month] {number} The month to examine.
			@param [day] {number} The day to examine.
			@return {boolean} <code>true</code> if a week day, <code>false</code> if not.
			@throws Error if an invalid date or a different calendar used. */
		weekDay: function (year, month, day) {
			return this.dayOfWeek(year, month, day) !== 5;
		},

		/** Retrieve the Julian date equivalent for this date,
			i.e. days since January 1, 4713 BCE Greenwich noon.
			@memberof UmmAlQuraCalendar
			@param year {CDate|number} The date to convert or the year to convert.
			@param [month] {number} The month to convert.
			@param [day] {number} The day to convert.
			@return {number} The equivalent Julian date.
			@throws Error if an invalid date or a different calendar used. */
		toJD: function (year, month, day) {
			var date = this._validate(year, month, day, $.calendars.local.invalidDate);
			var index = (12 * (date.year() - 1)) + date.month() - 15292;
			var mcjdn = date.day() + ummalqura_dat[index - 1] - 1;
			return mcjdn + 2400000 - 0.5; // Modified Chronological Julian Day Number (MCJDN)
		},

		/** Create a new date from a Julian date.
			@memberof UmmAlQuraCalendar
			@param jd {number} The Julian date to convert.
			@return {CDate} The equivalent date. */
		fromJD: function (jd) {
			var mcjdn = jd - 2400000 + 0.5; // Modified Chronological Julian Day Number (MCJDN)
			// the MCJDN's of the start of the lunations in the Umm al-Qura calendar 
			// are stored in the 'ummalqura_dat' array
			var index = 0;
			for (var i = 0; i < ummalqura_dat.length; i++) {
				if (ummalqura_dat[i] > mcjdn) break;
				index++;
			}
			var lunation = index + 15292; //UmmAlQura Lunation Number
			var ii = Math.floor((lunation - 1) / 12);
			var year = ii + 1;
			var month = lunation - 12 * ii;
			var day = mcjdn - ummalqura_dat[index - 1] + 1;
			return this.newDate(year, month, day);
		},

		/** Determine whether a date is valid for this calendar.
			@memberof UmmAlQuraCalendar
			@param year {number} The year to examine.
			@param month {number} The month to examine.
			@param day {number} The day to examine.
			@return {boolean} <code>true</code> if a valid date, <code>false</code> if not. */
		isValid: function(year, month, day) {
			var valid = $.calendars.baseCalendar.prototype.isValid.apply(this, arguments);
			if (valid) {
				year = (year.year != null ? year.year : year);
				valid = (year >= 1276 && year <= 1500);
			}
			return valid;
		},

		/** Check that a candidate date is from the same calendar and is valid.
			@memberof UmmAlQuraCalendar
			@private
			@param year {CDate|number} The date to validate or the year to validate.
			@param month {number} The month to validate.
			@param day {number} The day to validate.
			@param error {string} Error message if invalid.
			@throws Error if different calendars used or invalid date. */
		_validate: function(year, month, day, error) {
			var date = $.calendars.baseCalendar.prototype._validate.apply(this, arguments);
			if (date.year < 1276 || date.year > 1500) {
				throw error.replace(/\{0\}/, this.local.name);
			}
			return date;
		}
	});

	// UmmAlQura calendar implementation
	$.calendars.calendars.ummalqura = UmmAlQuraCalendar;

	var ummalqura_dat = [
		20,    50,    79,    109,   138,   168,   197,   227,   256,   286,   315,   345,   374,   404,   433,   463,   492,   522,   551,   581, 
		611,   641,   670,   700,   729,   759,   788,   818,   847,   877,   906,   936,   965,   995,   1024,  1054,  1083,  1113,  1142,  1172,
		1201,  1231,  1260,  1290,  1320,  1350,  1379,  1409,  1438,  1468,  1497,  1527,  1556,  1586,  1615,  1645,  1674,  1704,  1733,  1763,
		1792,  1822,  1851,  1881,  1910,  1940,  1969,  1999,  2028,  2058,  2087,  2117,  2146,  2176,  2205,  2235,  2264,  2294,  2323,  2353,
		2383,  2413,  2442,  2472,  2501,  2531,  2560,  2590,  2619,  2649,  2678,  2708,  2737,  2767,  2796,  2826,  2855,  2885,  2914,  2944,
		2973,  3003,  3032,  3062,  3091,  3121,  3150,  3180,  3209,  3239,  3268,  3298,  3327,  3357,  3386,  3416,  3446,  3476,  3505,  3535,
		3564,  3594,  3623,  3653,  3682,  3712,  3741,  3771,  3800,  3830,  3859,  3889,  3918,  3948,  3977,  4007,  4036,  4066,  4095,  4125,
		4155,  4185,  4214,  4244,  4273,  4303,  4332,  4362,  4391,  4421,  4450,  4480,  4509,  4539,  4568,  4598,  4627,  4657,  4686,  4716,
		4745,  4775,  4804,  4834,  4863,  4893,  4922,  4952,  4981,  5011,  5040,  5070,  5099,  5129,  5158,  5188,  5218,  5248,  5277,  5307,
		5336,  5366,  5395,  5425,  5454,  5484,  5513,  5543,  5572,  5602,  5631,  5661,  5690,  5720,  5749,  5779,  5808,  5838,  5867,  5897,
		5926,  5956,  5985,  6015,  6044,  6074,  6103,  6133,  6162,  6192,  6221,  6251,  6281,  6311,  6340,  6370,  6399,  6429,  6458,  6488,
		6517,  6547,  6576,  6606,  6635,  6665,  6694,  6724,  6753,  6783,  6812,  6842,  6871,  6901,  6930,  6960,  6989,  7019,  7048,  7078,
		7107,  7137,  7166,  7196,  7225,  7255,  7284,  7314,  7344,  7374,  7403,  7433,  7462,  7492,  7521,  7551,  7580,  7610,  7639,  7669,
		7698,  7728,  7757,  7787,  7816,  7846,  7875,  7905,  7934,  7964,  7993,  8023,  8053,  8083,  8112,  8142,  8171,  8201,  8230,  8260,
		8289,  8319,  8348,  8378,  8407,  8437,  8466,  8496,  8525,  8555,  8584,  8614,  8643,  8673,  8702,  8732,  8761,  8791,  8821,  8850,
		8880,  8909,  8938,  8968,  8997,  9027,  9056,  9086,  9115,  9145,  9175,  9205,  9234,  9264,  9293,  9322,  9352,  9381,  9410,  9440,
		9470,  9499,  9529,  9559,  9589,  9618,  9648,  9677,  9706,  9736,  9765,  9794,  9824,  9853,  9883,  9913,  9943,  9972,  10002, 10032,
		10061, 10090, 10120, 10149, 10178, 10208, 10237, 10267, 10297, 10326, 10356, 10386, 10415, 10445, 10474, 10504, 10533, 10562, 10592, 10621,
		10651, 10680, 10710, 10740, 10770, 10799, 10829, 10858, 10888, 10917, 10947, 10976, 11005, 11035, 11064, 11094, 11124, 11153, 11183, 11213,
		11242, 11272, 11301, 11331, 11360, 11389, 11419, 11448, 11478, 11507, 11537, 11567, 11596, 11626, 11655, 11685, 11715, 11744, 11774, 11803,
		11832, 11862, 11891, 11921, 11950, 11980, 12010, 12039, 12069, 12099, 12128, 12158, 12187, 12216, 12246, 12275, 12304, 12334, 12364, 12393,
		12423, 12453, 12483, 12512, 12542, 12571, 12600, 12630, 12659, 12688, 12718, 12747, 12777, 12807, 12837, 12866, 12896, 12926, 12955, 12984,
		13014, 13043, 13072, 13102, 13131, 13161, 13191, 13220, 13250, 13280, 13310, 13339, 13368, 13398, 13427, 13456, 13486, 13515, 13545, 13574,
		13604, 13634, 13664, 13693, 13723, 13752, 13782, 13811, 13840, 13870, 13899, 13929, 13958, 13988, 14018, 14047, 14077, 14107, 14136, 14166,
		14195, 14224, 14254, 14283, 14313, 14342, 14372, 14401, 14431, 14461, 14490, 14520, 14550, 14579, 14609, 14638, 14667, 14697, 14726, 14756,
		14785, 14815, 14844, 14874, 14904, 14933, 14963, 14993, 15021, 15051, 15081, 15110, 15140, 15169, 15199, 15228, 15258, 15287, 15317, 15347,
		15377, 15406, 15436, 15465, 15494, 15524, 15553, 15582, 15612, 15641, 15671, 15701, 15731, 15760, 15790, 15820, 15849, 15878, 15908, 15937,
		15966, 15996, 16025, 16055, 16085, 16114, 16144, 16174, 16204, 16233, 16262, 16292, 16321, 16350, 16380, 16409, 16439, 16468, 16498, 16528,
		16558, 16587, 16617, 16646, 16676, 16705, 16734, 16764, 16793, 16823, 16852, 16882, 16912, 16941, 16971, 17001, 17030, 17060, 17089, 17118,
		17148, 17177, 17207, 17236, 17266, 17295, 17325, 17355, 17384, 17414, 17444, 17473, 17502, 17532, 17561, 17591, 17620, 17650, 17679, 17709,
		17738, 17768, 17798, 17827, 17857, 17886, 17916, 17945, 17975, 18004, 18034, 18063, 18093, 18122, 18152, 18181, 18211, 18241, 18270, 18300,
		18330, 18359, 18388, 18418, 18447, 18476, 18506, 18535, 18565, 18595, 18625, 18654, 18684, 18714, 18743, 18772, 18802, 18831, 18860, 18890,
		18919, 18949, 18979, 19008, 19038, 19068, 19098, 19127, 19156, 19186, 19215, 19244, 19274, 19303, 19333, 19362, 19392, 19422, 19452, 19481,
		19511, 19540, 19570, 19599, 19628, 19658, 19687, 19717, 19746, 19776, 19806, 19836, 19865, 19895, 19924, 19954, 19983, 20012, 20042, 20071,
		20101, 20130, 20160, 20190, 20219, 20249, 20279, 20308, 20338, 20367, 20396, 20426, 20455, 20485, 20514, 20544, 20573, 20603, 20633, 20662,
		20692, 20721, 20751, 20780, 20810, 20839, 20869, 20898, 20928, 20957, 20987, 21016, 21046, 21076, 21105, 21135, 21164, 21194, 21223, 21253,
		21282, 21312, 21341, 21371, 21400, 21430, 21459, 21489, 21519, 21548, 21578, 21607, 21637, 21666, 21696, 21725, 21754, 21784, 21813, 21843,
		21873, 21902, 21932, 21962, 21991, 22021, 22050, 22080, 22109, 22138, 22168, 22197, 22227, 22256, 22286, 22316, 22346, 22375, 22405, 22434,
		22464, 22493, 22522, 22552, 22581, 22611, 22640, 22670, 22700, 22730, 22759, 22789, 22818, 22848, 22877, 22906, 22936, 22965, 22994, 23024,
		23054, 23083, 23113, 23143, 23173, 23202, 23232, 23261, 23290, 23320, 23349, 23379, 23408, 23438, 23467, 23497, 23527, 23556, 23586, 23616,
		23645, 23674, 23704, 23733, 23763, 23792, 23822, 23851, 23881, 23910, 23940, 23970, 23999, 24029, 24058, 24088, 24117, 24147, 24176, 24206,
		24235, 24265, 24294, 24324, 24353, 24383, 24413, 24442, 24472, 24501, 24531, 24560, 24590, 24619, 24648, 24678, 24707, 24737, 24767, 24796,
		24826, 24856, 24885, 24915, 24944, 24974, 25003, 25032, 25062, 25091, 25121, 25150, 25180, 25210, 25240, 25269, 25299, 25328, 25358, 25387,
		25416, 25446, 25475, 25505, 25534, 25564, 25594, 25624, 25653, 25683, 25712, 25742, 25771, 25800, 25830, 25859, 25888, 25918, 25948, 25977,
		26007, 26037, 26067, 26096, 26126, 26155, 26184, 26214, 26243, 26272, 26302, 26332, 26361, 26391, 26421, 26451, 26480, 26510, 26539, 26568,
		26598, 26627, 26656, 26686, 26715, 26745, 26775, 26805, 26834, 26864, 26893, 26923, 26952, 26982, 27011, 27041, 27070, 27099, 27129, 27159,
		27188, 27218, 27248, 27277, 27307, 27336, 27366, 27395, 27425, 27454, 27484, 27513, 27542, 27572, 27602, 27631, 27661, 27691, 27720, 27750,
		27779, 27809, 27838, 27868, 27897, 27926, 27956, 27985, 28015, 28045, 28074, 28104, 28134, 28163, 28193, 28222, 28252, 28281, 28310, 28340,
		28369, 28399, 28428, 28458, 28488, 28517, 28547, 28577,
		// From 1356
		28607, 28636, 28665, 28695, 28724, 28754, 28783, 28813, 28843, 28872, 28901, 28931, 28960, 28990, 29019, 29049, 29078, 29108, 29137, 29167,
		29196, 29226, 29255, 29285, 29315, 29345, 29375, 29404, 29434, 29463, 29492, 29522, 29551, 29580, 29610, 29640, 29669, 29699, 29729, 29759,
		29788, 29818, 29847, 29876, 29906, 29935, 29964, 29994, 30023, 30053, 30082, 30112, 30141, 30171, 30200, 30230, 30259, 30289, 30318, 30348,
		30378, 30408, 30437, 30467, 30496, 30526, 30555, 30585, 30614, 30644, 30673, 30703, 30732, 30762, 30791, 30821, 30850, 30880, 30909, 30939,
		30968, 30998, 31027, 31057, 31086, 31116, 31145, 31175, 31204, 31234, 31263, 31293, 31322, 31352, 31381, 31411, 31441, 31471, 31500, 31530,
		31559, 31589, 31618, 31648, 31676, 31706, 31736, 31766, 31795, 31825, 31854, 31884, 31913, 31943, 31972, 32002, 32031, 32061, 32090, 32120,
		32150, 32180, 32209, 32239, 32268, 32298, 32327, 32357, 32386, 32416, 32445, 32475, 32504, 32534, 32563, 32593, 32622, 32652, 32681, 32711,
		32740, 32770, 32799, 32829, 32858, 32888, 32917, 32947, 32976, 33006, 33035, 33065, 33094, 33124, 33153, 33183, 33213, 33243, 33272, 33302,
		33331, 33361, 33390, 33420, 33450, 33479, 33509, 33539, 33568, 33598, 33627, 33657, 33686, 33716, 33745, 33775, 33804, 33834, 33863, 33893,
		33922, 33952, 33981, 34011, 34040, 34069, 34099, 34128, 34158, 34187, 34217, 34247, 34277, 34306, 34336, 34365, 34395, 34424, 34454, 34483,
		34512, 34542, 34571, 34601, 34631, 34660, 34690, 34719, 34749, 34778, 34808, 34837, 34867, 34896, 34926, 34955, 34985, 35015, 35044, 35074,
		35103, 35133, 35162, 35192, 35222, 35251, 35280, 35310, 35340, 35370, 35399, 35429, 35458, 35488, 35517, 35547, 35576, 35605, 35635, 35665,
		35694, 35723, 35753, 35782, 35811, 35841, 35871, 35901, 35930, 35960, 35989, 36019, 36048, 36078, 36107, 36136, 36166, 36195, 36225, 36254,
		36284, 36314, 36343, 36373, 36403, 36433, 36462, 36492, 36521, 36551, 36580, 36610, 36639, 36669, 36698, 36728, 36757, 36786, 36816, 36845,
		36875, 36904, 36934, 36963, 36993, 37022, 37052, 37081, 37111, 37141, 37170, 37200, 37229, 37259, 37288, 37318, 37347, 37377, 37406, 37436,
		37465, 37495, 37524, 37554, 37584, 37613, 37643, 37672, 37701, 37731, 37760, 37790, 37819, 37849, 37878, 37908, 37938, 37967, 37997, 38027,
		38056, 38085, 38115, 38144, 38174, 38203, 38233, 38262, 38292, 38322, 38351, 38381, 38410, 38440, 38469, 38499, 38528, 38558, 38587, 38617,
		38646, 38676, 38705, 38735, 38764, 38794, 38823, 38853, 38882, 38912, 38941, 38971, 39001, 39030, 39059, 39089, 39118, 39148, 39178, 39208,
		39237, 39267, 39297, 39326, 39355, 39385, 39414, 39444, 39473, 39503, 39532, 39562, 39592, 39621, 39650, 39680, 39709, 39739, 39768, 39798,
		39827, 39857, 39886, 39916, 39946, 39975, 40005, 40035, 40064, 40094, 40123, 40153, 40182, 40212, 40241, 40271, 40300, 40330, 40359, 40389,
		40418, 40448, 40477, 40507, 40536, 40566, 40595, 40625, 40655, 40685, 40714, 40744, 40773, 40803, 40832, 40862, 40892, 40921, 40951, 40980,
		41009, 41039, 41068, 41098, 41127, 41157, 41186, 41216, 41245, 41275, 41304, 41334, 41364, 41393, 41422, 41452, 41481, 41511, 41540, 41570,
		41599, 41629, 41658, 41688, 41718, 41748, 41777, 41807, 41836, 41865, 41894, 41924, 41953, 41983, 42012, 42042, 42072, 42102, 42131, 42161,
		42190, 42220, 42249, 42279, 42308, 42337, 42367, 42397, 42426, 42456, 42485, 42515, 42545, 42574, 42604, 42633, 42662, 42692, 42721, 42751,
		42780, 42810, 42839, 42869, 42899, 42929, 42958, 42988, 43017, 43046, 43076, 43105, 43135, 43164, 43194, 43223, 43253, 43283, 43312, 43342,
		43371, 43401, 43430, 43460, 43489, 43519, 43548, 43578, 43607, 43637, 43666, 43696, 43726, 43755, 43785, 43814, 43844, 43873, 43903, 43932,
		43962, 43991, 44021, 44050, 44080, 44109, 44139, 44169, 44198, 44228, 44258, 44287, 44317, 44346, 44375, 44405, 44434, 44464, 44493, 44523,
		44553, 44582, 44612, 44641, 44671, 44700, 44730, 44759, 44788, 44818, 44847, 44877, 44906, 44936, 44966, 44996, 45025, 45055, 45084, 45114,
		45143, 45172, 45202, 45231, 45261, 45290, 45320, 45350, 45380, 45409, 45439, 45468, 45498, 45527, 45556, 45586, 45615, 45644, 45674, 45704,
		45733, 45763, 45793, 45823, 45852, 45882, 45911, 45940, 45970, 45999, 46028, 46058, 46088, 46117, 46147, 46177, 46206, 46236, 46265, 46295,
		46324, 46354, 46383, 46413, 46442, 46472, 46501, 46531, 46560, 46590, 46620, 46649, 46679, 46708, 46738, 46767, 46797, 46826, 46856, 46885,
		46915, 46944, 46974, 47003, 47033, 47063, 47092, 47122, 47151, 47181, 47210, 47240, 47269, 47298, 47328, 47357, 47387, 47417, 47446, 47476,
		47506, 47535, 47565, 47594, 47624, 47653, 47682, 47712, 47741, 47771, 47800, 47830, 47860, 47890, 47919, 47949, 47978, 48008, 48037, 48066,
		48096, 48125, 48155, 48184, 48214, 48244, 48273, 48303, 48333, 48362, 48392, 48421, 48450, 48480, 48509, 48538, 48568, 48598, 48627, 48657,
		48687, 48717, 48746, 48776, 48805, 48834, 48864, 48893, 48922, 48952, 48982, 49011, 49041, 49071, 49100, 49130, 49160, 49189, 49218, 49248,
		49277, 49306, 49336, 49365, 49395, 49425, 49455, 49484, 49514, 49543, 49573, 49602, 49632, 49661, 49690, 49720, 49749, 49779, 49809, 49838,
		49868, 49898, 49927, 49957, 49986, 50016, 50045, 50075, 50104, 50133, 50163, 50192, 50222, 50252, 50281, 50311, 50340, 50370, 50400, 50429,
		50459, 50488, 50518, 50547, 50576, 50606, 50635, 50665, 50694, 50724, 50754, 50784, 50813, 50843, 50872, 50902, 50931, 50960, 50990, 51019,
		51049, 51078, 51108, 51138, 51167, 51197, 51227, 51256, 51286, 51315, 51345, 51374, 51403, 51433, 51462, 51492, 51522, 51552, 51582, 51611,
		51641, 51670, 51699, 51729, 51758, 51787, 51816, 51846, 51876, 51906, 51936, 51965, 51995, 52025, 52054, 52083, 52113, 52142, 52171, 52200,
		52230, 52260, 52290, 52319, 52349, 52379, 52408, 52438, 52467, 52497, 52526, 52555, 52585, 52614, 52644, 52673, 52703, 52733, 52762, 52792,
		52822, 52851, 52881, 52910, 52939, 52969, 52998, 53028, 53057, 53087, 53116, 53146, 53176, 53205, 53235, 53264, 53294, 53324, 53353, 53383,
		53412, 53441, 53471, 53500, 53530, 53559, 53589, 53619, 53648, 53678, 53708, 53737, 53767, 53796, 53825, 53855, 53884, 53913, 53943, 53973,
		54003, 54032, 54062, 54092, 54121, 54151, 54180, 54209, 54239, 54268, 54297, 54327, 54357, 54387, 54416, 54446, 54476, 54505, 54535, 54564,
		54593, 54623, 54652, 54681, 54711, 54741, 54770, 54800, 54830, 54859, 54889, 54919, 54948, 54977, 55007, 55036, 55066, 55095, 55125, 55154,
		55184, 55213, 55243, 55273, 55302, 55332, 55361, 55391, 55420, 55450, 55479, 55508, 55538, 55567, 55597, 55627, 55657, 55686, 55716, 55745,
		55775, 55804, 55834, 55863, 55892, 55922, 55951, 55981, 56011, 56040, 56070, 56100, 56129, 56159, 56188, 56218, 56247, 56276, 56306, 56335,
		56365, 56394, 56424, 56454, 56483, 56513, 56543, 56572, 56601, 56631, 56660, 56690, 56719, 56749, 56778, 56808, 56837, 56867, 56897, 56926,
		56956, 56985, 57015, 57044, 57074, 57103, 57133, 57162, 57192, 57221, 57251, 57280, 57310, 57340, 57369, 57399, 57429, 57458, 57487, 57517,
		57546, 57576, 57605, 57634, 57664, 57694, 57723, 57753, 57783, 57813, 57842, 57871, 57901, 57930, 57959, 57989, 58018, 58048, 58077, 58107,
		58137, 58167, 58196, 58226, 58255, 58285, 58314, 58343, 58373, 58402, 58432, 58461, 58491, 58521, 58551, 58580, 58610, 58639, 58669, 58698,
		58727, 58757, 58786, 58816, 58845, 58875, 58905, 58934, 58964, 58994, 59023, 59053, 59082, 59111, 59141, 59170, 59200, 59229, 59259, 59288,
		59318, 59348, 59377, 59407, 59436, 59466, 59495, 59525, 59554, 59584, 59613, 59643, 59672, 59702, 59731, 59761, 59791, 59820, 59850, 59879,
		59909, 59939, 59968, 59997, 60027, 60056, 60086, 60115, 60145, 60174, 60204, 60234, 60264, 60293, 60323, 60352, 60381, 60411, 60440, 60469,
		60499, 60528, 60558, 60588, 60618, 60648, 60677, 60707, 60736, 60765, 60795, 60824, 60853, 60883, 60912, 60942, 60972, 61002, 61031, 61061,
		61090, 61120, 61149, 61179, 61208, 61237, 61267, 61296, 61326, 61356, 61385, 61415, 61445, 61474, 61504, 61533, 61563, 61592, 61621, 61651,
		61680, 61710, 61739, 61769, 61799, 61828, 61858, 61888, 61917, 61947, 61976, 62006, 62035, 62064, 62094, 62123, 62153, 62182, 62212, 62242,
		62271, 62301, 62331, 62360, 62390, 62419, 62448, 62478, 62507, 62537, 62566, 62596, 62625, 62655, 62685, 62715, 62744, 62774, 62803, 62832,
		62862, 62891, 62921, 62950, 62980, 63009, 63039, 63069, 63099, 63128, 63157, 63187, 63216, 63246, 63275, 63305, 63334, 63363, 63393, 63423,
		63453, 63482, 63512, 63541, 63571, 63600, 63630, 63659, 63689, 63718, 63747, 63777, 63807, 63836, 63866, 63895, 63925, 63955, 63984, 64014,
		64043, 64073, 64102, 64131, 64161, 64190, 64220, 64249, 64279, 64309, 64339, 64368, 64398, 64427, 64457, 64486, 64515, 64545, 64574, 64603,
		64633, 64663, 64692, 64722, 64752, 64782, 64811, 64841, 64870, 64899, 64929, 64958, 64987, 65017, 65047, 65076, 65106, 65136, 65166, 65195,
		65225, 65254, 65283, 65313, 65342, 65371, 65401, 65431, 65460, 65490, 65520, 65549, 65579, 65608, 65638, 65667, 65697, 65726, 65755, 65785,
		65815, 65844, 65874, 65903, 65933, 65963, 65992, 66022, 66051, 66081, 66110, 66140, 66169, 66199, 66228, 66258, 66287, 66317, 66346, 66376,
		66405, 66435, 66465, 66494, 66524, 66553, 66583, 66612, 66641, 66671, 66700, 66730, 66760, 66789, 66819, 66849, 66878, 66908, 66937, 66967,
		66996, 67025, 67055, 67084, 67114, 67143, 67173, 67203, 67233, 67262, 67292, 67321, 67351, 67380, 67409, 67439, 67468, 67497, 67527, 67557,
		67587, 67617, 67646, 67676, 67705, 67735, 67764, 67793, 67823, 67852, 67882, 67911, 67941, 67971, 68000, 68030, 68060, 68089, 68119, 68148,
		68177, 68207, 68236, 68266, 68295, 68325, 68354, 68384, 68414, 68443, 68473, 68502, 68532, 68561, 68591, 68620, 68650, 68679, 68708, 68738,
		68768, 68797, 68827, 68857, 68886, 68916, 68946, 68975, 69004, 69034, 69063, 69092, 69122, 69152, 69181, 69211, 69240, 69270, 69300, 69330,
		69359, 69388, 69418, 69447, 69476, 69506, 69535, 69565, 69595, 69624, 69654, 69684, 69713, 69743, 69772, 69802, 69831, 69861, 69890, 69919,
		69949, 69978, 70008, 70038, 70067, 70097, 70126, 70156, 70186, 70215, 70245, 70274, 70303, 70333, 70362, 70392, 70421, 70451, 70481, 70510,
		70540, 70570, 70599, 70629, 70658, 70687, 70717, 70746, 70776, 70805, 70835, 70864, 70894, 70924, 70954, 70983, 71013, 71042, 71071, 71101,
		71130, 71159, 71189, 71218, 71248, 71278, 71308, 71337, 71367, 71397, 71426, 71455, 71485, 71514, 71543, 71573, 71602, 71632, 71662, 71691,
		71721, 71751, 71781, 71810, 71839, 71869, 71898, 71927, 71957, 71986, 72016, 72046, 72075, 72105, 72135, 72164, 72194, 72223, 72253, 72282,
		72311, 72341, 72370, 72400, 72429, 72459, 72489, 72518, 72548, 72577, 72607, 72637, 72666, 72695, 72725, 72754, 72784, 72813, 72843, 72872,
		72902, 72931, 72961, 72991, 73020, 73050, 73080, 73109, 73139, 73168, 73197, 73227, 73256, 73286, 73315, 73345, 73375, 73404, 73434, 73464,
		73493, 73523, 73552, 73581, 73611, 73640, 73669, 73699, 73729, 73758, 73788, 73818, 73848, 73877, 73907, 73936, 73965, 73995, 74024, 74053,
		74083, 74113, 74142, 74172, 74202, 74231, 74261, 74291, 74320, 74349, 74379, 74408, 74437, 74467, 74497, 74526, 74556, 74586, 74615, 74645,
		74675, 74704, 74733, 74763, 74792, 74822, 74851, 74881, 74910, 74940, 74969, 74999, 75029, 75058, 75088, 75117, 75147, 75176, 75206, 75235,
		75264, 75294, 75323, 75353, 75383, 75412, 75442, 75472, 75501, 75531, 75560, 75590, 75619, 75648, 75678, 75707, 75737, 75766, 75796, 75826,
		75856, 75885, 75915, 75944, 75974, 76003, 76032, 76062, 76091, 76121, 76150, 76180, 76210, 76239, 76269, 76299, 76328, 76358, 76387, 76416,
		76446, 76475, 76505, 76534, 76564, 76593, 76623, 76653, 76682, 76712, 76741, 76771, 76801, 76830, 76859, 76889, 76918, 76948, 76977, 77007,
		77036, 77066, 77096, 77125, 77155, 77185, 77214, 77243, 77273, 77302, 77332, 77361, 77390, 77420, 77450, 77479, 77509, 77539, 77569, 77598,
		77627, 77657, 77686, 77715, 77745, 77774, 77804, 77833, 77863, 77893, 77923, 77952, 77982, 78011, 78041, 78070, 78099, 78129, 78158, 78188,
		78217, 78247, 78277, 78307, 78336, 78366, 78395, 78425, 78454, 78483, 78513, 78542, 78572, 78601, 78631, 78661, 78690, 78720, 78750, 78779,
		78808, 78838, 78867, 78897, 78926, 78956, 78985, 79015, 79044, 79074, 79104, 79133, 79163, 79192, 79222, 79251, 79281, 79310, 79340, 79369,
		79399, 79428, 79458, 79487, 79517, 79546, 79576, 79606, 79635, 79665, 79695, 79724, 79753, 79783, 79812, 79841, 79871, 79900, 79930, 79960,
		79990];

})(jQuery);

var process = process || {env: {NODE_ENV: "development"}};
//= require calendars/jquery.calendars.js
//= require calendars/jquery.calendars.plus.js
//= require calendars/jquery.calendars.picker.js
//= require calendars/jquery.calendars.picker.ext.js
//= require calendars/jquery.calendars.islamic.js
//= require time/jquery.timeentry.js
//= require jquery.multi.calendars.picker.js
//= require jquery.jeditable.multi.datepicker.js
//= require jquery.multi.calendars.picker.ext.js
//= require multi.calendar.init.js
//= require calendars/jquery.calendars.ummalqura.js
var process = process || {env: {NODE_ENV: "development"}};
// iepp v2.1pre @jon_neal & @aFarkas github.com/aFarkas/iepp
// html5shiv @rem remysharp.com/html5-enabling-script
// Dual licensed under the MIT or GPL Version 2 licenses
/*@cc_on(function(a,b){function r(a){var b=-1;while(++b<f)a.createElement(e[b])}if(!window.attachEvent||!b.createStyleSheet||!function(){var a=document.createElement("div");return a.innerHTML="<elem></elem>",a.childNodes.length!==1}())return;a.iepp=a.iepp||{};var c=a.iepp,d=c.html5elements||"abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|header|hgroup|mark|meter|nav|output|progress|section|subline|summary|time|video",e=d.split("|"),f=e.length,g=new RegExp("(^|\\s)("+d+")","gi"),h=new RegExp("<(/*)("+d+")","gi"),i=/^\s*[\{\}]\s*$/,j=new RegExp("(^|[^\\n]*?\\s)("+d+")([^\\n]*)({[\\n\\w\\W]*?})","gi"),k=b.createDocumentFragment(),l=b.documentElement,m=b.getElementsByTagName("script")[0].parentNode,n=b.createElement("body"),o=b.createElement("style"),p=/print|all/,q;c.getCSS=function(a,b){try{if(a+""===undefined)return""}catch(d){return""}var e=-1,f=a.length,g,h=[];while(++e<f){g=a[e];if(g.disabled)continue;b=g.media||b,p.test(b)&&h.push(c.getCSS(g.imports,b),g.cssText),b="all"}return h.join("")},c.parseCSS=function(a){var b=[],c;while((c=j.exec(a))!=null)b.push(((i.exec(c[1])?"\n":c[1])+c[2]+c[3]).replace(g,"$1.iepp-$2")+c[4]);return b.join("\n")},c.writeHTML=function(){var a=-1;q=q||b.body;while(++a<f){var c=b.getElementsByTagName(e[a]),d=c.length,g=-1;while(++g<d)c[g].className.indexOf("iepp-")<0&&(c[g].className+=" iepp-"+e[a])}k.appendChild(q),l.appendChild(n),n.className=q.className,n.id=q.id,n.innerHTML=q.innerHTML.replace(h,"<$1font")},c._beforePrint=function(){if(c.disablePP)return;o.styleSheet.cssText=c.parseCSS(c.getCSS(b.styleSheets,"all")),c.writeHTML()},c.restoreHTML=function(){if(c.disablePP)return;n.swapNode(q)},c._afterPrint=function(){c.restoreHTML(),o.styleSheet.cssText=""},r(b),r(k);if(c.disablePP)return;m.insertBefore(o,m.firstChild),o.media="print",o.className="iepp-printshim",a.attachEvent("onbeforeprint",c._beforePrint),a.attachEvent("onafterprint",c._afterPrint)})(this,document)@*/
var process = process || {env: {NODE_ENV: "development"}};
// Underscore.js 1.13.4
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
      typeof define === 'function' && define.amd ? define('underscore', factory) :
          (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (function () {
            var current = global._;
            var exports = global._ = factory();
            exports.noConflict = function () { global._ = current; return exports; };
          }()));
}(this, (function () {
  //     Underscore.js 1.13.4
  //     https://underscorejs.org
  //     (c) 2009-2022 Jeremy Ashkenas, Julian Gonggrijp, and DocumentCloud and Investigative Reporters & Editors
  //     Underscore may be freely distributed under the MIT license.

  // Current version.
  var VERSION = '1.13.4';

  // Establish the root object, `window` (`self`) in the browser, `global`
  // on the server, or `this` in some virtual machines. We use `self`
  // instead of `window` for `WebWorker` support.
  var root = (typeof self == 'object' && self.self === self && self) ||
      (typeof global == 'object' && global.global === global && global) ||
      Function('return this')() ||
      {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push,
      slice = ArrayProto.slice,
      toString = ObjProto.toString,
      hasOwnProperty = ObjProto.hasOwnProperty;

  // Modern feature detection.
  var supportsArrayBuffer = typeof ArrayBuffer !== 'undefined',
      supportsDataView = typeof DataView !== 'undefined';

  // All **ECMAScript 5+** native function implementations that we hope to use
  // are declared here.
  var nativeIsArray = Array.isArray,
      nativeKeys = Object.keys,
      nativeCreate = Object.create,
      nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;

  // Create references to these builtin functions because we override them.
  var _isNaN = isNaN,
      _isFinite = isFinite;

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  // The largest integer that can be represented exactly.
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;

  // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".
  function restArguments(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  }

  // Is a given variable an object?
  function isObject(obj) {
    var type = typeof obj;
    return type === 'function' || (type === 'object' && !!obj);
  }

  // Is a given value equal to null?
  function isNull(obj) {
    return obj === null;
  }

  // Is a given variable undefined?
  function isUndefined(obj) {
    return obj === void 0;
  }

  // Is a given value a boolean?
  function isBoolean(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  }

  // Is a given value a DOM element?
  function isElement(obj) {
    return !!(obj && obj.nodeType === 1);
  }

  // Internal function for creating a `toString`-based type tester.
  function tagTester(name) {
    var tag = '[object ' + name + ']';
    return function(obj) {
      return toString.call(obj) === tag;
    };
  }

  var isString = tagTester('String');

  var isNumber = tagTester('Number');

  var isDate = tagTester('Date');

  var isRegExp = tagTester('RegExp');

  var isError = tagTester('Error');

  var isSymbol = tagTester('Symbol');

  var isArrayBuffer = tagTester('ArrayBuffer');

  var isFunction = tagTester('Function');

  // Optimize `isFunction` if appropriate. Work around some `typeof` bugs in old
  // v8, IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
  var nodelist = root.document && root.document.childNodes;
  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
    isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  var isFunction$1 = isFunction;

  var hasObjectTag = tagTester('Object');

  // In IE 10 - Edge 13, `DataView` has string tag `'[object Object]'`.
  // In IE 11, the most common among them, this problem also applies to
  // `Map`, `WeakMap` and `Set`.
  var hasStringTagBug = (
          supportsDataView && hasObjectTag(new DataView(new ArrayBuffer(8)))
      ),
      isIE11 = (typeof Map !== 'undefined' && hasObjectTag(new Map));

  var isDataView = tagTester('DataView');

  // In IE 10 - Edge 13, we need a different heuristic
  // to determine whether an object is a `DataView`.
  function ie10IsDataView(obj) {
    return obj != null && isFunction$1(obj.getInt8) && isArrayBuffer(obj.buffer);
  }

  var isDataView$1 = (hasStringTagBug ? ie10IsDataView : isDataView);

  // Is a given value an array?
  // Delegates to ECMA5's native `Array.isArray`.
  var isArray = nativeIsArray || tagTester('Array');

  // Internal function to check whether `key` is an own property name of `obj`.
  function has$1(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  }

  var isArguments = tagTester('Arguments');

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  (function() {
    if (!isArguments(arguments)) {
      isArguments = function(obj) {
        return has$1(obj, 'callee');
      };
    }
  }());

  var isArguments$1 = isArguments;

  // Is a given object a finite number?
  function isFinite$1(obj) {
    return !isSymbol(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));
  }

  // Is the given value `NaN`?
  function isNaN$1(obj) {
    return isNumber(obj) && _isNaN(obj);
  }

  // Predicate-generating function. Often useful outside of Underscore.
  function constant(value) {
    return function() {
      return value;
    };
  }

  // Common internal logic for `isArrayLike` and `isBufferLike`.
  function createSizePropertyCheck(getSizeProperty) {
    return function(collection) {
      var sizeProperty = getSizeProperty(collection);
      return typeof sizeProperty == 'number' && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;
    }
  }

  // Internal helper to generate a function to obtain property `key` from `obj`.
  function shallowProperty(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  }

  // Internal helper to obtain the `byteLength` property of an object.
  var getByteLength = shallowProperty('byteLength');

  // Internal helper to determine whether we should spend extensive checks against
  // `ArrayBuffer` et al.
  var isBufferLike = createSizePropertyCheck(getByteLength);

  // Is a given value a typed array?
  var typedArrayPattern = /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
  function isTypedArray(obj) {
    // `ArrayBuffer.isView` is the most future-proof, so use it when available.
    // Otherwise, fall back on the above regular expression.
    return nativeIsView ? (nativeIsView(obj) && !isDataView$1(obj)) :
        isBufferLike(obj) && typedArrayPattern.test(toString.call(obj));
  }

  var isTypedArray$1 = supportsArrayBuffer ? isTypedArray : constant(false);

  // Internal helper to obtain the `length` property of an object.
  var getLength = shallowProperty('length');

  // Internal helper to create a simple lookup structure.
  // `collectNonEnumProps` used to depend on `_.contains`, but this led to
  // circular imports. `emulatedSet` is a one-off solution that only works for
  // arrays of strings.
  function emulatedSet(keys) {
    var hash = {};
    for (var l = keys.length, i = 0; i < l; ++i) hash[keys[i]] = true;
    return {
      contains: function(key) { return hash[key] === true; },
      push: function(key) {
        hash[key] = true;
        return keys.push(key);
      }
    };
  }

  // Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't
  // be iterated by `for key in ...` and thus missed. Extends `keys` in place if
  // needed.
  function collectNonEnumProps(obj, keys) {
    keys = emulatedSet(keys);
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (isFunction$1(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (has$1(obj, prop) && !keys.contains(prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`.
  function keys(obj) {
    if (!isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (has$1(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  }

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  function isEmpty(obj) {
    if (obj == null) return true;
    // Skip the more expensive `toString`-based type checks if `obj` has no
    // `.length`.
    var length = getLength(obj);
    if (typeof length == 'number' && (
        isArray(obj) || isString(obj) || isArguments$1(obj)
    )) return length === 0;
    return getLength(keys(obj)) === 0;
  }

  // Returns whether an object has a given set of `key:value` pairs.
  function isMatch(object, attrs) {
    var _keys = keys(attrs), length = _keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = _keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  }

  // If Underscore is called as a function, it returns a wrapped object that can
  // be used OO-style. This wrapper holds altered versions of all functions added
  // through `_.mixin`. Wrapped objects may be chained.
  function _$1(obj) {
    if (obj instanceof _$1) return obj;
    if (!(this instanceof _$1)) return new _$1(obj);
    this._wrapped = obj;
  }

  _$1.VERSION = VERSION;

  // Extracts the result from a wrapped and chained object.
  _$1.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxies for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _$1.prototype.valueOf = _$1.prototype.toJSON = _$1.prototype.value;

  _$1.prototype.toString = function() {
    return String(this._wrapped);
  };

  // Internal function to wrap or shallow-copy an ArrayBuffer,
  // typed array or DataView to a new view, reusing the buffer.
  function toBufferView(bufferSource) {
    return new Uint8Array(
        bufferSource.buffer || bufferSource,
        bufferSource.byteOffset || 0,
        getByteLength(bufferSource)
    );
  }

  // We use this string twice, so give it a name for minification.
  var tagDataView = '[object DataView]';

  // Internal recursive comparison function for `_.isEqual`.
  function eq(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
    return deepEq(a, b, aStack, bStack);
  }

  // Internal recursive comparison function for `_.isEqual`.
  function deepEq(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _$1) a = a._wrapped;
    if (b instanceof _$1) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    // Work around a bug in IE 10 - Edge 13.
    if (hasStringTagBug && className == '[object Object]' && isDataView$1(a)) {
      if (!isDataView$1(b)) return false;
      className = tagDataView;
    }
    switch (className) {
        // These types are compared by value.
      case '[object RegExp]':
        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN.
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
      case '[object Symbol]':
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
      case '[object ArrayBuffer]':
      case tagDataView:
        // Coerce to typed array so we can fall through.
        return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);
    }

    var areArrays = className === '[object Array]';
    if (!areArrays && isTypedArray$1(a)) {
      var byteLength = getByteLength(a);
      if (byteLength !== getByteLength(b)) return false;
      if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;
      areArrays = true;
    }
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor &&
              isFunction$1(bCtor) && bCtor instanceof bCtor)
          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var _keys = keys(a), key;
      length = _keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = _keys[length];
        if (!(has$1(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  }

  // Perform a deep comparison to check if two objects are equal.
  function isEqual(a, b) {
    return eq(a, b);
  }

  // Retrieve all the enumerable property names of an object.
  function allKeys(obj) {
    if (!isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  }

  // Since the regular `Object.prototype.toString` type tests don't work for
  // some types in IE 11, we use a fingerprinting heuristic instead, based
  // on the methods. It's not great, but it's the best we got.
  // The fingerprint method lists are defined below.
  function ie11fingerprint(methods) {
    var length = getLength(methods);
    return function(obj) {
      if (obj == null) return false;
      // `Map`, `WeakMap` and `Set` have no enumerable keys.
      var keys = allKeys(obj);
      if (getLength(keys)) return false;
      for (var i = 0; i < length; i++) {
        if (!isFunction$1(obj[methods[i]])) return false;
      }
      // If we are testing against `WeakMap`, we need to ensure that
      // `obj` doesn't have a `forEach` method in order to distinguish
      // it from a regular `Map`.
      return methods !== weakMapMethods || !isFunction$1(obj[forEachName]);
    };
  }

  // In the interest of compact minification, we write
  // each string in the fingerprints only once.
  var forEachName = 'forEach',
      hasName = 'has',
      commonInit = ['clear', 'delete'],
      mapTail = ['get', hasName, 'set'];

  // `Map`, `WeakMap` and `Set` each have slightly different
  // combinations of the above sublists.
  var mapMethods = commonInit.concat(forEachName, mapTail),
      weakMapMethods = commonInit.concat(mapTail),
      setMethods = ['add'].concat(commonInit, forEachName, hasName);

  var isMap = isIE11 ? ie11fingerprint(mapMethods) : tagTester('Map');

  var isWeakMap = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester('WeakMap');

  var isSet = isIE11 ? ie11fingerprint(setMethods) : tagTester('Set');

  var isWeakSet = tagTester('WeakSet');

  // Retrieve the values of an object's properties.
  function values(obj) {
    var _keys = keys(obj);
    var length = _keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[_keys[i]];
    }
    return values;
  }

  // Convert an object into a list of `[key, value]` pairs.
  // The opposite of `_.object` with one argument.
  function pairs(obj) {
    var _keys = keys(obj);
    var length = _keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [_keys[i], obj[_keys[i]]];
    }
    return pairs;
  }

  // Invert the keys and values of an object. The values must be serializable.
  function invert(obj) {
    var result = {};
    var _keys = keys(obj);
    for (var i = 0, length = _keys.length; i < length; i++) {
      result[obj[_keys[i]]] = _keys[i];
    }
    return result;
  }

  // Return a sorted list of the function names available on the object.
  function functions(obj) {
    var names = [];
    for (var key in obj) {
      if (isFunction$1(obj[key])) names.push(key);
    }
    return names.sort();
  }

  // An internal function for creating assigner functions.
  function createAssigner(keysFunc, defaults) {
    return function(obj) {
      var length = arguments.length;
      if (defaults) obj = Object(obj);
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  }

  // Extend a given object with all the properties in passed-in object(s).
  var extend = createAssigner(allKeys);

  // Assigns a given object with all the own properties in the passed-in
  // object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  var extendOwn = createAssigner(keys);

  // Fill in a given object with default properties.
  var defaults = createAssigner(allKeys, true);

  // Create a naked function reference for surrogate-prototype-swapping.
  function ctor() {
    return function(){};
  }

  // An internal function for creating a new object that inherits from another.
  function baseCreate(prototype) {
    if (!isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    var Ctor = ctor();
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  }

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  function create(prototype, props) {
    var result = baseCreate(prototype);
    if (props) extendOwn(result, props);
    return result;
  }

  // Create a (shallow-cloned) duplicate of an object.
  function clone(obj) {
    if (!isObject(obj)) return obj;
    return isArray(obj) ? obj.slice() : extend({}, obj);
  }

  // Invokes `interceptor` with the `obj` and then returns `obj`.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  function tap(obj, interceptor) {
    interceptor(obj);
    return obj;
  }

  // Normalize a (deep) property `path` to array.
  // Like `_.iteratee`, this function can be customized.
  function toPath$1(path) {
    return isArray(path) ? path : [path];
  }
  _$1.toPath = toPath$1;

  // Internal wrapper for `_.toPath` to enable minification.
  // Similar to `cb` for `_.iteratee`.
  function toPath(path) {
    return _$1.toPath(path);
  }

  // Internal function to obtain a nested property in `obj` along `path`.
  function deepGet(obj, path) {
    var length = path.length;
    for (var i = 0; i < length; i++) {
      if (obj == null) return void 0;
      obj = obj[path[i]];
    }
    return length ? obj : void 0;
  }

  // Get the value of the (deep) property on `path` from `object`.
  // If any property in `path` does not exist or if the value is
  // `undefined`, return `defaultValue` instead.
  // The `path` is normalized through `_.toPath`.
  function get(object, path, defaultValue) {
    var value = deepGet(object, toPath(path));
    return isUndefined(value) ? defaultValue : value;
  }

  // Shortcut function for checking if an object has a given property directly on
  // itself (in other words, not on a prototype). Unlike the internal `has`
  // function, this public version can also traverse nested properties.
  function has(obj, path) {
    path = toPath(path);
    var length = path.length;
    for (var i = 0; i < length; i++) {
      var key = path[i];
      if (!has$1(obj, key)) return false;
      obj = obj[key];
    }
    return !!length;
  }

  // Keep the identity function around for default iteratees.
  function identity(value) {
    return value;
  }

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  function matcher(attrs) {
    attrs = extendOwn({}, attrs);
    return function(obj) {
      return isMatch(obj, attrs);
    };
  }

  // Creates a function that, when passed an object, will traverse that object’s
  // properties down the given `path`, specified as an array of keys or indices.
  function property(path) {
    path = toPath(path);
    return function(obj) {
      return deepGet(obj, path);
    };
  }

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  function optimizeCb(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
        // The 2-argument case is omitted because we’re not using it.
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  }

  // An internal function to generate callbacks that can be applied to each
  // element in a collection, returning the desired result — either `_.identity`,
  // an arbitrary callback, a property matcher, or a property accessor.
  function baseIteratee(value, context, argCount) {
    if (value == null) return identity;
    if (isFunction$1(value)) return optimizeCb(value, context, argCount);
    if (isObject(value) && !isArray(value)) return matcher(value);
    return property(value);
  }

  // External wrapper for our callback generator. Users may customize
  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
  // This abstraction hides the internal-only `argCount` argument.
  function iteratee(value, context) {
    return baseIteratee(value, context, Infinity);
  }
  _$1.iteratee = iteratee;

  // The function we call internally to generate a callback. It invokes
  // `_.iteratee` if overridden, otherwise `baseIteratee`.
  function cb(value, context, argCount) {
    if (_$1.iteratee !== iteratee) return _$1.iteratee(value, context);
    return baseIteratee(value, context, argCount);
  }

  // Returns the results of applying the `iteratee` to each element of `obj`.
  // In contrast to `_.map` it returns an object.
  function mapObject(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var _keys = keys(obj),
        length = _keys.length,
        results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = _keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  }

  // Predicate-generating function. Often useful outside of Underscore.
  function noop(){}

  // Generates a function for a given object that returns a given property.
  function propertyOf(obj) {
    if (obj == null) return noop;
    return function(path) {
      return get(obj, path);
    };
  }

  // Run a function **n** times.
  function times(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  }

  // Return a random integer between `min` and `max` (inclusive).
  function random(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  }

  // A (possibly faster) way to get the current timestamp as an integer.
  var now = Date.now || function() {
    return new Date().getTime();
  };

  // Internal helper to generate functions for escaping and unescaping strings
  // to/from HTML interpolation.
  function createEscaper(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped.
    var source = '(?:' + keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  }

  // Internal list of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };

  // Function for escaping strings to HTML interpolation.
  var _escape = createEscaper(escapeMap);

  // Internal list of HTML entities for unescaping.
  var unescapeMap = invert(escapeMap);

  // Function for unescaping strings from HTML interpolation.
  var _unescape = createEscaper(unescapeMap);

  // By default, Underscore uses ERB-style template delimiters. Change the
  // following template settings to use alternative delimiters.
  var templateSettings = _$1.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // When customizing `_.templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  function escapeChar(match) {
    return '\\' + escapes[match];
  }

  // In order to prevent third-party code injection through
  // `_.templateSettings.variable`, we test it against the following regular
  // expression. It is intentionally a bit more liberal than just matching valid
  // identifiers, but still prevents possible loopholes through defaults or
  // destructuring assignment.
  var bareIdentifier = /^\s*(\w|\$)+\s*$/;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  function template(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = defaults({}, settings, _$1.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offset.
      return match;
    });
    source += "';\n";

    var argument = settings.variable;
    if (argument) {
      // Insure against third-party code injection. (CVE-2021-23358)
      if (!bareIdentifier.test(argument)) throw new Error(
          'variable is not a bare identifier: ' + argument
      );
    } else {
      // If a variable is not specified, place data values in local scope.
      source = 'with(obj||{}){\n' + source + '}\n';
      argument = 'obj';
    }

    source = "var __t,__p='',__j=Array.prototype.join," +
        "print=function(){__p+=__j.call(arguments,'');};\n" +
        source + 'return __p;\n';

    var render;
    try {
      render = new Function(argument, '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _$1);
    };

    // Provide the compiled source as a convenience for precompilation.
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  }

  // Traverses the children of `obj` along `path`. If a child is a function, it
  // is invoked with its parent as context. Returns the value of the final
  // child, or `fallback` if any child is undefined.
  function result(obj, path, fallback) {
    path = toPath(path);
    var length = path.length;
    if (!length) {
      return isFunction$1(fallback) ? fallback.call(obj) : fallback;
    }
    for (var i = 0; i < length; i++) {
      var prop = obj == null ? void 0 : obj[path[i]];
      if (prop === void 0) {
        prop = fallback;
        i = length; // Ensure we don't continue iterating.
      }
      obj = isFunction$1(prop) ? prop.call(obj) : prop;
    }
    return obj;
  }

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  function uniqueId(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  }

  // Start chaining a wrapped Underscore object.
  function chain(obj) {
    var instance = _$1(obj);
    instance._chain = true;
    return instance;
  }

  // Internal function to execute `sourceFunc` bound to `context` with optional
  // `args`. Determines whether to execute a function as a constructor or as a
  // normal function.
  function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (isObject(result)) return result;
    return self;
  }

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. `_` acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
  var partial = restArguments(function(func, boundArgs) {
    var placeholder = partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });

  partial.placeholder = _$1;

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally).
  var bind = restArguments(function(func, context, args) {
    if (!isFunction$1(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArguments(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // Internal helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object.
  // Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var isArrayLike = createSizePropertyCheck(getLength);

  // Internal implementation of a recursive `flatten` function.
  function flatten$1(input, depth, strict, output) {
    output = output || [];
    if (!depth && depth !== 0) {
      depth = Infinity;
    } else if (depth <= 0) {
      return output.concat(input);
    }
    var idx = output.length;
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (isArray(value) || isArguments$1(value))) {
        // Flatten current level of array or arguments object.
        if (depth > 1) {
          flatten$1(value, depth - 1, strict, output);
          idx = output.length;
        } else {
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  }

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  var bindAll = restArguments(function(obj, keys) {
    keys = flatten$1(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = bind(obj[key], obj);
    }
    return obj;
  });

  // Memoize an expensive function by storing its results.
  function memoize(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!has$1(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  }

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  var delay = restArguments(function(func, wait, args) {
    return setTimeout(function() {
      return func.apply(null, args);
    }, wait);
  });

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  var defer = partial(delay, _$1, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  function throttle(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function() {
      previous = options.leading === false ? 0 : now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function() {
      var _now = now();
      if (!previous && options.leading === false) previous = _now;
      var remaining = wait - (_now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = _now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };

    throttled.cancel = function() {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  }

  // When a sequence of calls of the returned function ends, the argument
  // function is triggered. The end of a sequence is defined by the `wait`
  // parameter. If `immediate` is passed, the argument function will be
  // triggered at the beginning of the sequence instead of at the end.
  function debounce(func, wait, immediate) {
    var timeout, previous, args, result, context;

    var later = function() {
      var passed = now() - previous;
      if (wait > passed) {
        timeout = setTimeout(later, wait - passed);
      } else {
        timeout = null;
        if (!immediate) result = func.apply(context, args);
        // This check is needed because `func` can recursively invoke `debounced`.
        if (!timeout) args = context = null;
      }
    };

    var debounced = restArguments(function(_args) {
      context = this;
      args = _args;
      previous = now();
      if (!timeout) {
        timeout = setTimeout(later, wait);
        if (immediate) result = func.apply(context, args);
      }
      return result;
    });

    debounced.cancel = function() {
      clearTimeout(timeout);
      timeout = args = context = null;
    };

    return debounced;
  }

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  function wrap(func, wrapper) {
    return partial(wrapper, func);
  }

  // Returns a negated version of the passed-in predicate.
  function negate(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  }

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  function compose() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  }

  // Returns a function that will only be executed on and after the Nth call.
  function after(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  }

  // Returns a function that will only be executed up to (but not including) the
  // Nth call.
  function before(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  }

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  var once = partial(before, 2);

  // Returns the first key on an object that passes a truth test.
  function findKey(obj, predicate, context) {
    predicate = cb(predicate, context);
    var _keys = keys(obj), key;
    for (var i = 0, length = _keys.length; i < length; i++) {
      key = _keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  }

  // Internal function to generate `_.findIndex` and `_.findLastIndex`.
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a truth test.
  var findIndex = createPredicateIndexFinder(1);

  // Returns the last index on an array-like that passes a truth test.
  var findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  function sortedIndex(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  }

  // Internal function to generate the `_.indexOf` and `_.lastIndexOf` functions.
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), isNaN$1);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  var indexOf = createIndexFinder(1, findIndex, sortedIndex);

  // Return the position of the last occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  var lastIndexOf = createIndexFinder(-1, findLastIndex);

  // Return the first value which passes a truth test.
  function find(obj, predicate, context) {
    var keyFinder = isArrayLike(obj) ? findIndex : findKey;
    var key = keyFinder(obj, predicate, context);
    if (key !== void 0 && key !== -1) return obj[key];
  }

  // Convenience version of a common use case of `_.find`: getting the first
  // object containing specific `key:value` pairs.
  function findWhere(obj, attrs) {
    return find(obj, matcher(attrs));
  }

  // The cornerstone for collection functions, an `each`
  // implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  function each(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var _keys = keys(obj);
      for (i = 0, length = _keys.length; i < length; i++) {
        iteratee(obj[_keys[i]], _keys[i], obj);
      }
    }
    return obj;
  }

  // Return the results of applying the iteratee to each element.
  function map(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var _keys = !isArrayLike(obj) && keys(obj),
        length = (_keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = _keys ? _keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  }

  // Internal helper to create a reducing function, iterating left or right.
  function createReduce(dir) {
    // Wrap code that reassigns argument variables in a separate function than
    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
    var reducer = function(obj, iteratee, memo, initial) {
      var _keys = !isArrayLike(obj) && keys(obj),
          length = (_keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      if (!initial) {
        memo = obj[_keys ? _keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = _keys ? _keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    };

    return function(obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  var reduce = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  var reduceRight = createReduce(-1);

  // Return all the elements that pass a truth test.
  function filter(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  }

  // Return all the elements for which a truth test fails.
  function reject(obj, predicate, context) {
    return filter(obj, negate(cb(predicate)), context);
  }

  // Determine whether all of the elements pass a truth test.
  function every(obj, predicate, context) {
    predicate = cb(predicate, context);
    var _keys = !isArrayLike(obj) && keys(obj),
        length = (_keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = _keys ? _keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  }

  // Determine if at least one element in the object passes a truth test.
  function some(obj, predicate, context) {
    predicate = cb(predicate, context);
    var _keys = !isArrayLike(obj) && keys(obj),
        length = (_keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = _keys ? _keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  }

  // Determine if the array or object contains a given item (using `===`).
  function contains(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return indexOf(obj, item, fromIndex) >= 0;
  }

  // Invoke a method (with arguments) on every item in a collection.
  var invoke = restArguments(function(obj, path, args) {
    var contextPath, func;
    if (isFunction$1(path)) {
      func = path;
    } else {
      path = toPath(path);
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }
    return map(obj, function(context) {
      var method = func;
      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }
        if (context == null) return void 0;
        method = context[path];
      }
      return method == null ? method : method.apply(context, args);
    });
  });

  // Convenience version of a common use case of `_.map`: fetching a property.
  function pluck(obj, key) {
    return map(obj, property(key));
  }

  // Convenience version of a common use case of `_.filter`: selecting only
  // objects containing specific `key:value` pairs.
  function where(obj, attrs) {
    return filter(obj, matcher(attrs));
  }

  // Return the maximum element (or element-based computation).
  function max(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {
      obj = isArrayLike(obj) ? obj : values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed > lastComputed || (computed === -Infinity && result === -Infinity)) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  }

  // Return the minimum element (or element-based computation).
  function min(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {
      obj = isArrayLike(obj) ? obj : values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed < lastComputed || (computed === Infinity && result === Infinity)) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  }

  // Safely create a real, live array from anything iterable.
  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  function toArray(obj) {
    if (!obj) return [];
    if (isArray(obj)) return slice.call(obj);
    if (isString(obj)) {
      // Keep surrogate pair characters together.
      return obj.match(reStrSymbol);
    }
    if (isArrayLike(obj)) return map(obj, identity);
    return values(obj);
  }

  // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `_.map`.
  function sample(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = values(obj);
      return obj[random(obj.length - 1)];
    }
    var sample = toArray(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = random(index, last);
      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }
    return sample.slice(0, n);
  }

  // Shuffle a collection.
  function shuffle(obj) {
    return sample(obj, Infinity);
  }

  // Sort the object's values by a criterion produced by an iteratee.
  function sortBy(obj, iteratee, context) {
    var index = 0;
    iteratee = cb(iteratee, context);
    return pluck(map(obj, function(value, key, list) {
      return {
        value: value,
        index: index++,
        criteria: iteratee(value, key, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  }

  // An internal function used for aggregate "group by" operations.
  function group(behavior, partition) {
    return function(obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);
      each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  }

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  var groupBy = group(function(result, value, key) {
    if (has$1(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `_.groupBy`, but for
  // when you know that your index values will be unique.
  var indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  var countBy = group(function(result, value, key) {
    if (has$1(result, key)) result[key]++; else result[key] = 1;
  });

  // Split a collection into two arrays: one whose elements all pass the given
  // truth test, and one whose elements all do not pass the truth test.
  var partition = group(function(result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true);

  // Return the number of elements in a collection.
  function size(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : keys(obj).length;
  }

  // Internal `_.pick` helper function to determine whether `key` is an enumerable
  // property name of `obj`.
  function keyInObj(value, key, obj) {
    return key in obj;
  }

  // Return a copy of the object only containing the allowed properties.
  var pick = restArguments(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    if (isFunction$1(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten$1(keys, false, false);
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

  // Return a copy of the object without the disallowed properties.
  var omit = restArguments(function(obj, keys) {
    var iteratee = keys[0], context;
    if (isFunction$1(iteratee)) {
      iteratee = negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = map(flatten$1(keys, false, false), String);
      iteratee = function(value, key) {
        return !contains(keys, key);
      };
    }
    return pick(obj, iteratee, context);
  });

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  function initial(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  }

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. The **guard** check allows it to work with `_.map`.
  function first(array, n, guard) {
    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
    if (n == null || guard) return array[0];
    return initial(array, array.length - n);
  }

  // Returns everything but the first entry of the `array`. Especially useful on
  // the `arguments` object. Passing an **n** will return the rest N values in the
  // `array`.
  function rest(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  }

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  function last(array, n, guard) {
    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
    if (n == null || guard) return array[array.length - 1];
    return rest(array, Math.max(0, array.length - n));
  }

  // Trim out all falsy values from an array.
  function compact(array) {
    return filter(array, Boolean);
  }

  // Flatten out an array, either recursively (by default), or up to `depth`.
  // Passing `true` or `false` as `depth` means `1` or `Infinity`, respectively.
  function flatten(array, depth) {
    return flatten$1(array, depth, false);
  }

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  var difference = restArguments(function(array, rest) {
    rest = flatten$1(rest, true, true);
    return filter(array, function(value){
      return !contains(rest, value);
    });
  });

  // Return a version of the array that does not contain the specified value(s).
  var without = restArguments(function(array, otherArrays) {
    return difference(array, otherArrays);
  });

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // The faster algorithm will not work with an iteratee if the iteratee
  // is not a one-to-one function, so providing an iteratee will disable
  // the faster algorithm.
  function uniq(array, isSorted, iteratee, context) {
    if (!isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted && !iteratee) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  }

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  var union = restArguments(function(arrays) {
    return uniq(flatten$1(arrays, true, true));
  });

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  function intersection(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (contains(result, item)) continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  }

  // Complement of zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices.
  function unzip(array) {
    var length = (array && max(array, getLength).length) || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = pluck(array, index);
    }
    return result;
  }

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  var zip = restArguments(unzip);

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values. Passing by pairs is the reverse of `_.pairs`.
  function object(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  }

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](https://docs.python.org/library/functions.html#range).
  function range(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    if (!step) {
      step = stop < start ? -1 : 1;
    }

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  }

  // Chunk a single array into multiple arrays, each containing `count` or fewer
  // items.
  function chunk(array, count) {
    if (count == null || count < 1) return [];
    var result = [];
    var i = 0, length = array.length;
    while (i < length) {
      result.push(slice.call(array, i, i += count));
    }
    return result;
  }

  // Helper function to continue chaining intermediate results.
  function chainResult(instance, obj) {
    return instance._chain ? _$1(obj).chain() : obj;
  }

  // Add your own custom functions to the Underscore object.
  function mixin(obj) {
    each(functions(obj), function(name) {
      var func = _$1[name] = obj[name];
      _$1.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_$1, args));
      };
    });
    return _$1;
  }

  // Add all mutator `Array` functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _$1.prototype[name] = function() {
      var obj = this._wrapped;
      if (obj != null) {
        method.apply(obj, arguments);
        if ((name === 'shift' || name === 'splice') && obj.length === 0) {
          delete obj[0];
        }
      }
      return chainResult(this, obj);
    };
  });

  // Add all accessor `Array` functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _$1.prototype[name] = function() {
      var obj = this._wrapped;
      if (obj != null) obj = method.apply(obj, arguments);
      return chainResult(this, obj);
    };
  });

  // Named Exports

  var allExports = {
    __proto__: null,
    VERSION: VERSION,
    restArguments: restArguments,
    isObject: isObject,
    isNull: isNull,
    isUndefined: isUndefined,
    isBoolean: isBoolean,
    isElement: isElement,
    isString: isString,
    isNumber: isNumber,
    isDate: isDate,
    isRegExp: isRegExp,
    isError: isError,
    isSymbol: isSymbol,
    isArrayBuffer: isArrayBuffer,
    isDataView: isDataView$1,
    isArray: isArray,
    isFunction: isFunction$1,
    isArguments: isArguments$1,
    isFinite: isFinite$1,
    isNaN: isNaN$1,
    isTypedArray: isTypedArray$1,
    isEmpty: isEmpty,
    isMatch: isMatch,
    isEqual: isEqual,
    isMap: isMap,
    isWeakMap: isWeakMap,
    isSet: isSet,
    isWeakSet: isWeakSet,
    keys: keys,
    allKeys: allKeys,
    values: values,
    pairs: pairs,
    invert: invert,
    functions: functions,
    methods: functions,
    extend: extend,
    extendOwn: extendOwn,
    assign: extendOwn,
    defaults: defaults,
    create: create,
    clone: clone,
    tap: tap,
    get: get,
    has: has,
    mapObject: mapObject,
    identity: identity,
    constant: constant,
    noop: noop,
    toPath: toPath$1,
    property: property,
    propertyOf: propertyOf,
    matcher: matcher,
    matches: matcher,
    times: times,
    random: random,
    now: now,
    escape: _escape,
    unescape: _unescape,
    templateSettings: templateSettings,
    template: template,
    result: result,
    uniqueId: uniqueId,
    chain: chain,
    iteratee: iteratee,
    partial: partial,
    bind: bind,
    bindAll: bindAll,
    memoize: memoize,
    delay: delay,
    defer: defer,
    throttle: throttle,
    debounce: debounce,
    wrap: wrap,
    negate: negate,
    compose: compose,
    after: after,
    before: before,
    once: once,
    findKey: findKey,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    sortedIndex: sortedIndex,
    indexOf: indexOf,
    lastIndexOf: lastIndexOf,
    find: find,
    detect: find,
    findWhere: findWhere,
    each: each,
    forEach: each,
    map: map,
    collect: map,
    reduce: reduce,
    foldl: reduce,
    inject: reduce,
    reduceRight: reduceRight,
    foldr: reduceRight,
    filter: filter,
    select: filter,
    reject: reject,
    every: every,
    all: every,
    some: some,
    any: some,
    contains: contains,
    includes: contains,
    include: contains,
    invoke: invoke,
    pluck: pluck,
    where: where,
    max: max,
    min: min,
    shuffle: shuffle,
    sample: sample,
    sortBy: sortBy,
    groupBy: groupBy,
    indexBy: indexBy,
    countBy: countBy,
    partition: partition,
    toArray: toArray,
    size: size,
    pick: pick,
    omit: omit,
    first: first,
    head: first,
    take: first,
    initial: initial,
    last: last,
    rest: rest,
    tail: rest,
    drop: rest,
    compact: compact,
    flatten: flatten,
    without: without,
    uniq: uniq,
    unique: uniq,
    union: union,
    intersection: intersection,
    difference: difference,
    unzip: unzip,
    transpose: unzip,
    zip: zip,
    object: object,
    range: range,
    chunk: chunk,
    mixin: mixin,
    'default': _$1
  };

  // Default Export

  // Add all of the Underscore functions to the wrapper object.
  var _ = mixin(allExports);
  // Legacy Node.js API.
  _._ = _;

  return _;

})));
//# sourceMappingURL=underscore-umd.js.map

var process = process || {env: {NODE_ENV: "development"}};
//  Underscore.string
//  (c) 2010 Esa-Matti Suuronen <esa-matti aet suuronen dot org>
//  Underscore.string is freely distributable under the terms of the MIT license.
//  Documentation: https://github.com/epeli/underscore.string
//  Some code is borrowed from MooTools and Alexandru Marasteanu.
//  Version '2.3.0'

!function(root, String){
  'use strict';

  // Defining helper functions.

  var nativeTrim = String.prototype.trim;
  var nativeTrimRight = String.prototype.trimRight;
  var nativeTrimLeft = String.prototype.trimLeft;

  var parseNumber = function(source) { return source * 1 || 0; };

  var strRepeat = function(str, qty){
    if (qty < 1) return '';
    var result = '';
    while (qty > 0) {
      if (qty & 1) result += str;
      qty >>= 1, str += str;
    }
    return result;
  };

  var slice = [].slice;

  var defaultToWhiteSpace = function(characters) {
    if (characters == null)
      return '\\s';
    else if (characters.source)
      return characters.source;
    else
      return '[' + _s.escapeRegExp(characters) + ']';
  };

  var escapeChars = {
    lt: '<',
    gt: '>',
    quot: '"',
    apos: "'",
    amp: '&'
  };

  var reversedEscapeChars = {};
  for(var key in escapeChars){ reversedEscapeChars[escapeChars[key]] = key; }

  // sprintf() for JavaScript 0.7-beta1
  // http://www.diveintojavascript.com/projects/javascript-sprintf
  //
  // Copyright (c) Alexandru Marasteanu <alexaholic [at) gmail (dot] com>
  // All rights reserved.

  var sprintf = (function() {
    function get_type(variable) {
      return Object.prototype.toString.call(variable).slice(8, -1).toLowerCase();
    }

    var str_repeat = strRepeat;

    var str_format = function() {
      if (!str_format.cache.hasOwnProperty(arguments[0])) {
        str_format.cache[arguments[0]] = str_format.parse(arguments[0]);
      }
      return str_format.format.call(null, str_format.cache[arguments[0]], arguments);
    };

    str_format.format = function(parse_tree, argv) {
      var cursor = 1, tree_length = parse_tree.length, node_type = '', arg, output = [], i, k, match, pad, pad_character, pad_length;
      for (i = 0; i < tree_length; i++) {
        node_type = get_type(parse_tree[i]);
        if (node_type === 'string') {
          output.push(parse_tree[i]);
        }
        else if (node_type === 'array') {
          match = parse_tree[i]; // convenience purposes only
          if (match[2]) { // keyword argument
            arg = argv[cursor];
            for (k = 0; k < match[2].length; k++) {
              if (!arg.hasOwnProperty(match[2][k])) {
                throw new Error(sprintf('[_.sprintf] property "%s" does not exist', match[2][k]));
              }
              arg = arg[match[2][k]];
            }
          } else if (match[1]) { // positional argument (explicit)
            arg = argv[match[1]];
          }
          else { // positional argument (implicit)
            arg = argv[cursor++];
          }

          if (/[^s]/.test(match[8]) && (get_type(arg) != 'number')) {
            throw new Error(sprintf('[_.sprintf] expecting number but found %s', get_type(arg)));
          }
          switch (match[8]) {
            case 'b': arg = arg.toString(2); break;
            case 'c': arg = String.fromCharCode(arg); break;
            case 'd': arg = parseInt(arg, 10); break;
            case 'e': arg = match[7] ? arg.toExponential(match[7]) : arg.toExponential(); break;
            case 'f': arg = match[7] ? parseFloat(arg).toFixed(match[7]) : parseFloat(arg); break;
            case 'o': arg = arg.toString(8); break;
            case 's': arg = ((arg = String(arg)) && match[7] ? arg.substring(0, match[7]) : arg); break;
            case 'u': arg = Math.abs(arg); break;
            case 'x': arg = arg.toString(16); break;
            case 'X': arg = arg.toString(16).toUpperCase(); break;
          }
          arg = (/[def]/.test(match[8]) && match[3] && arg >= 0 ? '+'+ arg : arg);
          pad_character = match[4] ? match[4] == '0' ? '0' : match[4].charAt(1) : ' ';
          pad_length = match[6] - String(arg).length;
          pad = match[6] ? str_repeat(pad_character, pad_length) : '';
          output.push(match[5] ? arg + pad : pad + arg);
        }
      }
      return output.join('');
    };

    str_format.cache = {};

    str_format.parse = function(fmt) {
      var _fmt = fmt, match = [], parse_tree = [], arg_names = 0;
      while (_fmt) {
        if ((match = /^[^\x25]+/.exec(_fmt)) !== null) {
          parse_tree.push(match[0]);
        }
        else if ((match = /^\x25{2}/.exec(_fmt)) !== null) {
          parse_tree.push('%');
        }
        else if ((match = /^\x25(?:([1-9]\d*)\$|\(([^\)]+)\))?(\+)?(0|'[^$])?(-)?(\d+)?(?:\.(\d+))?([b-fosuxX])/.exec(_fmt)) !== null) {
          if (match[2]) {
            arg_names |= 1;
            var field_list = [], replacement_field = match[2], field_match = [];
            if ((field_match = /^([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
              field_list.push(field_match[1]);
              while ((replacement_field = replacement_field.substring(field_match[0].length)) !== '') {
                if ((field_match = /^\.([a-z_][a-z_\d]*)/i.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else if ((field_match = /^\[(\d+)\]/.exec(replacement_field)) !== null) {
                  field_list.push(field_match[1]);
                }
                else {
                  throw new Error('[_.sprintf] huh?');
                }
              }
            }
            else {
              throw new Error('[_.sprintf] huh?');
            }
            match[2] = field_list;
          }
          else {
            arg_names |= 2;
          }
          if (arg_names === 3) {
            throw new Error('[_.sprintf] mixing positional and named placeholders is not (yet) supported');
          }
          parse_tree.push(match);
        }
        else {
          throw new Error('[_.sprintf] huh?');
        }
        _fmt = _fmt.substring(match[0].length);
      }
      return parse_tree;
    };

    return str_format;
  })();



  // Defining underscore.string

  var _s = {

    VERSION: '2.3.0',

    isBlank: function(str){
      if (str == null) str = '';
      return (/^\s*$/).test(str);
    },

    stripTags: function(str){
      if (str == null) return '';
      return String(str).replace(/<\/?[^>]+>/g, '');
    },

    capitalize : function(str){
      str = str == null ? '' : String(str);
      return str.charAt(0).toUpperCase() + str.slice(1);
    },

    chop: function(str, step){
      if (str == null) return [];
      str = String(str);
      step = ~~step;
      return step > 0 ? str.match(new RegExp('.{1,' + step + '}', 'g')) : [str];
    },

    clean: function(str){
      return _s.strip(str).replace(/\s+/g, ' ');
    },

    count: function(str, substr){
      if (str == null || substr == null) return 0;
      return String(str).split(substr).length - 1;
    },

    chars: function(str) {
      if (str == null) return [];
      return String(str).split('');
    },

    swapCase: function(str) {
      if (str == null) return '';
      return String(str).replace(/\S/g, function(c){
        return c === c.toUpperCase() ? c.toLowerCase() : c.toUpperCase();
      });
    },

    escapeHTML: function(str) {
      if (str == null) return '';
      return String(str).replace(/[&<>"']/g, function(m){ return '&' + reversedEscapeChars[m] + ';'; });
    },

    unescapeHTML: function(str) {
      if (str == null) return '';
      return String(str).replace(/\&([^;]+);/g, function(entity, entityCode){
        var match;

        if (entityCode in escapeChars) {
          return escapeChars[entityCode];
        } else if (match = entityCode.match(/^#x([\da-fA-F]+)$/)) {
          return String.fromCharCode(parseInt(match[1], 16));
        } else if (match = entityCode.match(/^#(\d+)$/)) {
          return String.fromCharCode(~~match[1]);
        } else {
          return entity;
        }
      });
    },

    escapeRegExp: function(str){
      if (str == null) return '';
      return String(str).replace(/([.*+?^=!:${}()|[\]\/\\])/g, '\\$1');
    },

    splice: function(str, i, howmany, substr){
      var arr = _s.chars(str);
      arr.splice(~~i, ~~howmany, substr);
      return arr.join('');
    },

    insert: function(str, i, substr){
      return _s.splice(str, i, 0, substr);
    },

    include: function(str, needle){
      if (needle === '') return true;
      if (str == null) return false;
      return String(str).indexOf(needle) !== -1;
    },

    join: function() {
      var args = slice.call(arguments),
        separator = args.shift();

      if (separator == null) separator = '';

      return args.join(separator);
    },

    lines: function(str) {
      if (str == null) return [];
      return String(str).split("\n");
    },

    reverse: function(str){
      return _s.chars(str).reverse().join('');
    },

    startsWith: function(str, starts){
      if (starts === '') return true;
      if (str == null || starts == null) return false;
      str = String(str); starts = String(starts);
      return str.length >= starts.length && str.slice(0, starts.length) === starts;
    },

    endsWith: function(str, ends){
      if (ends === '') return true;
      if (str == null || ends == null) return false;
      str = String(str); ends = String(ends);
      return str.length >= ends.length && str.slice(str.length - ends.length) === ends;
    },

    succ: function(str){
      if (str == null) return '';
      str = String(str);
      return str.slice(0, -1) + String.fromCharCode(str.charCodeAt(str.length-1) + 1);
    },

    titleize: function(str){
      if (str == null) return '';
      return String(str).replace(/(?:^|\s)\S/g, function(c){ return c.toUpperCase(); });
    },

    camelize: function(str){
      return _s.trim(str).replace(/[-_\s]+(.)?/g, function(match, c){ return c.toUpperCase(); });
    },

    underscored: function(str){
      return _s.trim(str).replace(/([a-z\d])([A-Z]+)/g, '$1_$2').replace(/[-\s]+/g, '_').toLowerCase();
    },

    dasherize: function(str){
      return _s.trim(str).replace(/([A-Z])/g, '-$1').replace(/[-_\s]+/g, '-').toLowerCase();
    },

    classify: function(str){
      return _s.titleize(String(str).replace(/_/g, ' ')).replace(/\s/g, '');
    },

    humanize: function(str){
      return _s.capitalize(_s.underscored(str).replace(/_id$/,'').replace(/_/g, ' '));
    },

    trim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrim) return nativeTrim.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp('\^' + characters + '+|' + characters + '+$', 'g'), '');
    },

    ltrim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrimLeft) return nativeTrimLeft.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp('^' + characters + '+'), '');
    },

    rtrim: function(str, characters){
      if (str == null) return '';
      if (!characters && nativeTrimRight) return nativeTrimRight.call(str);
      characters = defaultToWhiteSpace(characters);
      return String(str).replace(new RegExp(characters + '+$'), '');
    },

    truncate: function(str, length, truncateStr){
      if (str == null) return '';
      str = String(str); truncateStr = truncateStr || '...';
      length = ~~length;
      return str.length > length ? str.slice(0, length) + truncateStr : str;
    },

    /**
     * _s.prune: a more elegant version of truncate
     * prune extra chars, never leaving a half-chopped word.
     * @author github.com/rwz
     */
    prune: function(str, length, pruneStr){
      if (str == null) return '';

      str = String(str); length = ~~length;
      pruneStr = pruneStr != null ? String(pruneStr) : '...';

      if (str.length <= length) return str;

      var tmpl = function(c){ return c.toUpperCase() !== c.toLowerCase() ? 'A' : ' '; },
        template = str.slice(0, length+1).replace(/.(?=\W*\w*$)/g, tmpl); // 'Hello, world' -> 'HellAA AAAAA'

      if (template.slice(template.length-2).match(/\w\w/))
        template = template.replace(/\s*\S+$/, '');
      else
        template = _s.rtrim(template.slice(0, template.length-1));

      return (template+pruneStr).length > str.length ? str : str.slice(0, template.length)+pruneStr;
    },

    words: function(str, delimiter) {
      if (_s.isBlank(str)) return [];
      return _s.trim(str, delimiter).split(delimiter || /\s+/);
    },

    pad: function(str, length, padStr, type) {
      str = str == null ? '' : String(str);
      length = ~~length;

      var padlen  = 0;

      if (!padStr)
        padStr = ' ';
      else if (padStr.length > 1)
        padStr = padStr.charAt(0);

      switch(type) {
        case 'right':
          padlen = length - str.length;
          return str + strRepeat(padStr, padlen);
        case 'both':
          padlen = length - str.length;
          return strRepeat(padStr, Math.ceil(padlen/2)) + str
                  + strRepeat(padStr, Math.floor(padlen/2));
        default: // 'left'
          padlen = length - str.length;
          return strRepeat(padStr, padlen) + str;
        }
    },

    lpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr);
    },

    rpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr, 'right');
    },

    lrpad: function(str, length, padStr) {
      return _s.pad(str, length, padStr, 'both');
    },

    sprintf: sprintf,

    vsprintf: function(fmt, argv){
      argv.unshift(fmt);
      return sprintf.apply(null, argv);
    },

    toNumber: function(str, decimals) {
      if (str == null || str == '') return 0;
      str = String(str);
      var num = parseNumber(parseNumber(str).toFixed(~~decimals));
      return num === 0 && !str.match(/^0+$/) ? Number.NaN : num;
    },

    numberFormat : function(number, dec, dsep, tsep) {
      if (isNaN(number) || number == null) return '';

      number = number.toFixed(~~dec);
      tsep = tsep || ',';

      var parts = number.split('.'), fnums = parts[0],
        decimals = parts[1] ? (dsep || '.') + parts[1] : '';

      return fnums.replace(/(\d)(?=(?:\d{3})+$)/g, '$1' + tsep) + decimals;
    },

    strRight: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.indexOf(sep);
      return ~pos ? str.slice(pos+sep.length, str.length) : str;
    },

    strRightBack: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.lastIndexOf(sep);
      return ~pos ? str.slice(pos+sep.length, str.length) : str;
    },

    strLeft: function(str, sep){
      if (str == null) return '';
      str = String(str); sep = sep != null ? String(sep) : sep;
      var pos = !sep ? -1 : str.indexOf(sep);
      return ~pos ? str.slice(0, pos) : str;
    },

    strLeftBack: function(str, sep){
      if (str == null) return '';
      str += ''; sep = sep != null ? ''+sep : sep;
      var pos = str.lastIndexOf(sep);
      return ~pos ? str.slice(0, pos) : str;
    },

    toSentence: function(array, separator, lastSeparator, serial) {
      separator = separator || ', '
      lastSeparator = lastSeparator || ' and '
      var a = array.slice(), lastMember = a.pop();

      if (array.length > 2 && serial) lastSeparator = _s.rtrim(separator) + lastSeparator;

      return a.length ? a.join(separator) + lastSeparator + lastMember : lastMember;
    },

    toSentenceSerial: function() {
      var args = slice.call(arguments);
      args[3] = true;
      return _s.toSentence.apply(_s, args);
    },

    slugify: function(str) {
      if (str == null) return '';

      var from  = "ąàáäâãåæćęèéëêìíïîłńòóöôõøùúüûñçżź",
          to    = "aaaaaaaaceeeeeiiiilnoooooouuuunczz",
          regex = new RegExp(defaultToWhiteSpace(from), 'g');

      str = String(str).toLowerCase().replace(regex, function(c){
        var index = from.indexOf(c);
        return to.charAt(index) || '-';
      });

      return _s.dasherize(str.replace(/[^\w\s-]/g, ''));
    },

    surround: function(str, wrapper) {
      return [wrapper, str, wrapper].join('');
    },

    quote: function(str) {
      return _s.surround(str, '"');
    },

    exports: function() {
      var result = {};

      for (var prop in this) {
        if (!this.hasOwnProperty(prop) || prop.match(/^(?:include|contains|reverse)$/)) continue;
        result[prop] = this[prop];
      }

      return result;
    },

    repeat: function(str, qty, separator){
      if (str == null) return '';

      qty = ~~qty;

      // using faster implementation if separator is not needed;
      if (separator == null) return strRepeat(String(str), qty);

      // this one is about 300x slower in Google Chrome
      for (var repeat = []; qty > 0; repeat[--qty] = str) {}
      return repeat.join(separator);
    },

    levenshtein: function(str1, str2) {
      if (str1 == null && str2 == null) return 0;
      if (str1 == null) return String(str2).length;
      if (str2 == null) return String(str1).length;

      str1 = String(str1); str2 = String(str2);

      var current = [], prev, value;

      for (var i = 0; i <= str2.length; i++)
        for (var j = 0; j <= str1.length; j++) {
          if (i && j)
            if (str1.charAt(j - 1) === str2.charAt(i - 1))
              value = prev;
            else
              value = Math.min(current[j], current[j - 1], prev) + 1;
          else
            value = i + j;

          prev = current[j];
          current[j] = value;
        }

      return current.pop();
    }
  };

  // Aliases

  _s.strip    = _s.trim;
  _s.lstrip   = _s.ltrim;
  _s.rstrip   = _s.rtrim;
  _s.center   = _s.lrpad;
  _s.rjust    = _s.lpad;
  _s.ljust    = _s.rpad;
  _s.contains = _s.include;
  _s.q        = _s.quote;

  // CommonJS module is defined
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      // Export module
      module.exports = _s;
    }
    exports._s = _s;

  } else if (typeof define === 'function' && define.amd) {
    // Register as a named module with AMD.
    define('underscore.string', [], function() {
      return _s;
    });

  } else {
    // Integrate with Underscore.js if defined
    // or create our own underscore object.
    root._ = root._ || {};
    root._.string = root._.str = _s;
  }

}(this, String);


var _asset_pipeline_loaded_modules = _asset_pipeline_loaded_modules || {};
var _asset_pipeline_require = function(path) {
	var loadedModule = _asset_pipeline_loaded_modules[path];
	if(loadedModule != undefined) {
		return loadedModule.exports;
	}
	var module = _asset_pipeline_modules[path];
	if(module != undefined) {
		_asset_pipeline_loaded_modules[path] = module();
		return _asset_pipeline_loaded_modules[path].exports;
	}
	return null;
};

var _asset_pipeline_modules = _asset_pipeline_modules || {};
_asset_pipeline_modules['underscore.js'] = 
(function() {
  var module = {exports: {}};
  var exports = module.exports;

  var process = process || {env: {NODE_ENV: "development"}};
// Underscore.js 1.13.4
(function (global, factory) {
  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :
      typeof define === 'function' && define.amd ? define('underscore', factory) :
          (global = typeof globalThis !== 'undefined' ? globalThis : global || self, (function () {
            var current = global._;
            var exports = global._ = factory();
            exports.noConflict = function () { global._ = current; return exports; };
          }()));
}(this, (function () {
  //     Underscore.js 1.13.4
  //     https://underscorejs.org
  //     (c) 2009-2022 Jeremy Ashkenas, Julian Gonggrijp, and DocumentCloud and Investigative Reporters & Editors
  //     Underscore may be freely distributed under the MIT license.

  // Current version.
  var VERSION = '1.13.4';

  // Establish the root object, `window` (`self`) in the browser, `global`
  // on the server, or `this` in some virtual machines. We use `self`
  // instead of `window` for `WebWorker` support.
  var root = (typeof self == 'object' && self.self === self && self) ||
      (typeof global == 'object' && global.global === global && global) ||
      Function('return this')() ||
      {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype;
  var SymbolProto = typeof Symbol !== 'undefined' ? Symbol.prototype : null;

  // Create quick reference variables for speed access to core prototypes.
  var push = ArrayProto.push,
      slice = ArrayProto.slice,
      toString = ObjProto.toString,
      hasOwnProperty = ObjProto.hasOwnProperty;

  // Modern feature detection.
  var supportsArrayBuffer = typeof ArrayBuffer !== 'undefined',
      supportsDataView = typeof DataView !== 'undefined';

  // All **ECMAScript 5+** native function implementations that we hope to use
  // are declared here.
  var nativeIsArray = Array.isArray,
      nativeKeys = Object.keys,
      nativeCreate = Object.create,
      nativeIsView = supportsArrayBuffer && ArrayBuffer.isView;

  // Create references to these builtin functions because we override them.
  var _isNaN = isNaN,
      _isFinite = isFinite;

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
    'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  // The largest integer that can be represented exactly.
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;

  // Some functions take a variable number of arguments, or a few expected
  // arguments at the beginning and then a variable number of values to operate
  // on. This helper accumulates all remaining arguments past the function’s
  // argument length (or an explicit `startIndex`), into an array that becomes
  // the last argument. Similar to ES6’s "rest parameter".
  function restArguments(func, startIndex) {
    startIndex = startIndex == null ? func.length - 1 : +startIndex;
    return function() {
      var length = Math.max(arguments.length - startIndex, 0),
          rest = Array(length),
          index = 0;
      for (; index < length; index++) {
        rest[index] = arguments[index + startIndex];
      }
      switch (startIndex) {
        case 0: return func.call(this, rest);
        case 1: return func.call(this, arguments[0], rest);
        case 2: return func.call(this, arguments[0], arguments[1], rest);
      }
      var args = Array(startIndex + 1);
      for (index = 0; index < startIndex; index++) {
        args[index] = arguments[index];
      }
      args[startIndex] = rest;
      return func.apply(this, args);
    };
  }

  // Is a given variable an object?
  function isObject(obj) {
    var type = typeof obj;
    return type === 'function' || (type === 'object' && !!obj);
  }

  // Is a given value equal to null?
  function isNull(obj) {
    return obj === null;
  }

  // Is a given variable undefined?
  function isUndefined(obj) {
    return obj === void 0;
  }

  // Is a given value a boolean?
  function isBoolean(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  }

  // Is a given value a DOM element?
  function isElement(obj) {
    return !!(obj && obj.nodeType === 1);
  }

  // Internal function for creating a `toString`-based type tester.
  function tagTester(name) {
    var tag = '[object ' + name + ']';
    return function(obj) {
      return toString.call(obj) === tag;
    };
  }

  var isString = tagTester('String');

  var isNumber = tagTester('Number');

  var isDate = tagTester('Date');

  var isRegExp = tagTester('RegExp');

  var isError = tagTester('Error');

  var isSymbol = tagTester('Symbol');

  var isArrayBuffer = tagTester('ArrayBuffer');

  var isFunction = tagTester('Function');

  // Optimize `isFunction` if appropriate. Work around some `typeof` bugs in old
  // v8, IE 11 (#1621), Safari 8 (#1929), and PhantomJS (#2236).
  var nodelist = root.document && root.document.childNodes;
  if (typeof /./ != 'function' && typeof Int8Array != 'object' && typeof nodelist != 'function') {
    isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  var isFunction$1 = isFunction;

  var hasObjectTag = tagTester('Object');

  // In IE 10 - Edge 13, `DataView` has string tag `'[object Object]'`.
  // In IE 11, the most common among them, this problem also applies to
  // `Map`, `WeakMap` and `Set`.
  var hasStringTagBug = (
          supportsDataView && hasObjectTag(new DataView(new ArrayBuffer(8)))
      ),
      isIE11 = (typeof Map !== 'undefined' && hasObjectTag(new Map));

  var isDataView = tagTester('DataView');

  // In IE 10 - Edge 13, we need a different heuristic
  // to determine whether an object is a `DataView`.
  function ie10IsDataView(obj) {
    return obj != null && isFunction$1(obj.getInt8) && isArrayBuffer(obj.buffer);
  }

  var isDataView$1 = (hasStringTagBug ? ie10IsDataView : isDataView);

  // Is a given value an array?
  // Delegates to ECMA5's native `Array.isArray`.
  var isArray = nativeIsArray || tagTester('Array');

  // Internal function to check whether `key` is an own property name of `obj`.
  function has$1(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  }

  var isArguments = tagTester('Arguments');

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  (function() {
    if (!isArguments(arguments)) {
      isArguments = function(obj) {
        return has$1(obj, 'callee');
      };
    }
  }());

  var isArguments$1 = isArguments;

  // Is a given object a finite number?
  function isFinite$1(obj) {
    return !isSymbol(obj) && _isFinite(obj) && !isNaN(parseFloat(obj));
  }

  // Is the given value `NaN`?
  function isNaN$1(obj) {
    return isNumber(obj) && _isNaN(obj);
  }

  // Predicate-generating function. Often useful outside of Underscore.
  function constant(value) {
    return function() {
      return value;
    };
  }

  // Common internal logic for `isArrayLike` and `isBufferLike`.
  function createSizePropertyCheck(getSizeProperty) {
    return function(collection) {
      var sizeProperty = getSizeProperty(collection);
      return typeof sizeProperty == 'number' && sizeProperty >= 0 && sizeProperty <= MAX_ARRAY_INDEX;
    }
  }

  // Internal helper to generate a function to obtain property `key` from `obj`.
  function shallowProperty(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  }

  // Internal helper to obtain the `byteLength` property of an object.
  var getByteLength = shallowProperty('byteLength');

  // Internal helper to determine whether we should spend extensive checks against
  // `ArrayBuffer` et al.
  var isBufferLike = createSizePropertyCheck(getByteLength);

  // Is a given value a typed array?
  var typedArrayPattern = /\[object ((I|Ui)nt(8|16|32)|Float(32|64)|Uint8Clamped|Big(I|Ui)nt64)Array\]/;
  function isTypedArray(obj) {
    // `ArrayBuffer.isView` is the most future-proof, so use it when available.
    // Otherwise, fall back on the above regular expression.
    return nativeIsView ? (nativeIsView(obj) && !isDataView$1(obj)) :
        isBufferLike(obj) && typedArrayPattern.test(toString.call(obj));
  }

  var isTypedArray$1 = supportsArrayBuffer ? isTypedArray : constant(false);

  // Internal helper to obtain the `length` property of an object.
  var getLength = shallowProperty('length');

  // Internal helper to create a simple lookup structure.
  // `collectNonEnumProps` used to depend on `_.contains`, but this led to
  // circular imports. `emulatedSet` is a one-off solution that only works for
  // arrays of strings.
  function emulatedSet(keys) {
    var hash = {};
    for (var l = keys.length, i = 0; i < l; ++i) hash[keys[i]] = true;
    return {
      contains: function(key) { return hash[key] === true; },
      push: function(key) {
        hash[key] = true;
        return keys.push(key);
      }
    };
  }

  // Internal helper. Checks `keys` for the presence of keys in IE < 9 that won't
  // be iterated by `for key in ...` and thus missed. Extends `keys` in place if
  // needed.
  function collectNonEnumProps(obj, keys) {
    keys = emulatedSet(keys);
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (isFunction$1(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (has$1(obj, prop) && !keys.contains(prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !keys.contains(prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`.
  function keys(obj) {
    if (!isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (has$1(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  }

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  function isEmpty(obj) {
    if (obj == null) return true;
    // Skip the more expensive `toString`-based type checks if `obj` has no
    // `.length`.
    var length = getLength(obj);
    if (typeof length == 'number' && (
        isArray(obj) || isString(obj) || isArguments$1(obj)
    )) return length === 0;
    return getLength(keys(obj)) === 0;
  }

  // Returns whether an object has a given set of `key:value` pairs.
  function isMatch(object, attrs) {
    var _keys = keys(attrs), length = _keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = _keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  }

  // If Underscore is called as a function, it returns a wrapped object that can
  // be used OO-style. This wrapper holds altered versions of all functions added
  // through `_.mixin`. Wrapped objects may be chained.
  function _$1(obj) {
    if (obj instanceof _$1) return obj;
    if (!(this instanceof _$1)) return new _$1(obj);
    this._wrapped = obj;
  }

  _$1.VERSION = VERSION;

  // Extracts the result from a wrapped and chained object.
  _$1.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxies for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _$1.prototype.valueOf = _$1.prototype.toJSON = _$1.prototype.value;

  _$1.prototype.toString = function() {
    return String(this._wrapped);
  };

  // Internal function to wrap or shallow-copy an ArrayBuffer,
  // typed array or DataView to a new view, reusing the buffer.
  function toBufferView(bufferSource) {
    return new Uint8Array(
        bufferSource.buffer || bufferSource,
        bufferSource.byteOffset || 0,
        getByteLength(bufferSource)
    );
  }

  // We use this string twice, so give it a name for minification.
  var tagDataView = '[object DataView]';

  // Internal recursive comparison function for `_.isEqual`.
  function eq(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](https://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // `null` or `undefined` only equal to itself (strict comparison).
    if (a == null || b == null) return false;
    // `NaN`s are equivalent, but non-reflexive.
    if (a !== a) return b !== b;
    // Exhaust primitive checks
    var type = typeof a;
    if (type !== 'function' && type !== 'object' && typeof b != 'object') return false;
    return deepEq(a, b, aStack, bStack);
  }

  // Internal recursive comparison function for `_.isEqual`.
  function deepEq(a, b, aStack, bStack) {
    // Unwrap any wrapped objects.
    if (a instanceof _$1) a = a._wrapped;
    if (b instanceof _$1) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    // Work around a bug in IE 10 - Edge 13.
    if (hasStringTagBug && className == '[object Object]' && isDataView$1(a)) {
      if (!isDataView$1(b)) return false;
      className = tagDataView;
    }
    switch (className) {
        // These types are compared by value.
      case '[object RegExp]':
        // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN.
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
      case '[object Symbol]':
        return SymbolProto.valueOf.call(a) === SymbolProto.valueOf.call(b);
      case '[object ArrayBuffer]':
      case tagDataView:
        // Coerce to typed array so we can fall through.
        return deepEq(toBufferView(a), toBufferView(b), aStack, bStack);
    }

    var areArrays = className === '[object Array]';
    if (!areArrays && isTypedArray$1(a)) {
      var byteLength = getByteLength(a);
      if (byteLength !== getByteLength(b)) return false;
      if (a.buffer === b.buffer && a.byteOffset === b.byteOffset) return true;
      areArrays = true;
    }
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(isFunction$1(aCtor) && aCtor instanceof aCtor &&
              isFunction$1(bCtor) && bCtor instanceof bCtor)
          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var _keys = keys(a), key;
      length = _keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = _keys[length];
        if (!(has$1(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  }

  // Perform a deep comparison to check if two objects are equal.
  function isEqual(a, b) {
    return eq(a, b);
  }

  // Retrieve all the enumerable property names of an object.
  function allKeys(obj) {
    if (!isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  }

  // Since the regular `Object.prototype.toString` type tests don't work for
  // some types in IE 11, we use a fingerprinting heuristic instead, based
  // on the methods. It's not great, but it's the best we got.
  // The fingerprint method lists are defined below.
  function ie11fingerprint(methods) {
    var length = getLength(methods);
    return function(obj) {
      if (obj == null) return false;
      // `Map`, `WeakMap` and `Set` have no enumerable keys.
      var keys = allKeys(obj);
      if (getLength(keys)) return false;
      for (var i = 0; i < length; i++) {
        if (!isFunction$1(obj[methods[i]])) return false;
      }
      // If we are testing against `WeakMap`, we need to ensure that
      // `obj` doesn't have a `forEach` method in order to distinguish
      // it from a regular `Map`.
      return methods !== weakMapMethods || !isFunction$1(obj[forEachName]);
    };
  }

  // In the interest of compact minification, we write
  // each string in the fingerprints only once.
  var forEachName = 'forEach',
      hasName = 'has',
      commonInit = ['clear', 'delete'],
      mapTail = ['get', hasName, 'set'];

  // `Map`, `WeakMap` and `Set` each have slightly different
  // combinations of the above sublists.
  var mapMethods = commonInit.concat(forEachName, mapTail),
      weakMapMethods = commonInit.concat(mapTail),
      setMethods = ['add'].concat(commonInit, forEachName, hasName);

  var isMap = isIE11 ? ie11fingerprint(mapMethods) : tagTester('Map');

  var isWeakMap = isIE11 ? ie11fingerprint(weakMapMethods) : tagTester('WeakMap');

  var isSet = isIE11 ? ie11fingerprint(setMethods) : tagTester('Set');

  var isWeakSet = tagTester('WeakSet');

  // Retrieve the values of an object's properties.
  function values(obj) {
    var _keys = keys(obj);
    var length = _keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[_keys[i]];
    }
    return values;
  }

  // Convert an object into a list of `[key, value]` pairs.
  // The opposite of `_.object` with one argument.
  function pairs(obj) {
    var _keys = keys(obj);
    var length = _keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [_keys[i], obj[_keys[i]]];
    }
    return pairs;
  }

  // Invert the keys and values of an object. The values must be serializable.
  function invert(obj) {
    var result = {};
    var _keys = keys(obj);
    for (var i = 0, length = _keys.length; i < length; i++) {
      result[obj[_keys[i]]] = _keys[i];
    }
    return result;
  }

  // Return a sorted list of the function names available on the object.
  function functions(obj) {
    var names = [];
    for (var key in obj) {
      if (isFunction$1(obj[key])) names.push(key);
    }
    return names.sort();
  }

  // An internal function for creating assigner functions.
  function createAssigner(keysFunc, defaults) {
    return function(obj) {
      var length = arguments.length;
      if (defaults) obj = Object(obj);
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!defaults || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  }

  // Extend a given object with all the properties in passed-in object(s).
  var extend = createAssigner(allKeys);

  // Assigns a given object with all the own properties in the passed-in
  // object(s).
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  var extendOwn = createAssigner(keys);

  // Fill in a given object with default properties.
  var defaults = createAssigner(allKeys, true);

  // Create a naked function reference for surrogate-prototype-swapping.
  function ctor() {
    return function(){};
  }

  // An internal function for creating a new object that inherits from another.
  function baseCreate(prototype) {
    if (!isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    var Ctor = ctor();
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  }

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  function create(prototype, props) {
    var result = baseCreate(prototype);
    if (props) extendOwn(result, props);
    return result;
  }

  // Create a (shallow-cloned) duplicate of an object.
  function clone(obj) {
    if (!isObject(obj)) return obj;
    return isArray(obj) ? obj.slice() : extend({}, obj);
  }

  // Invokes `interceptor` with the `obj` and then returns `obj`.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  function tap(obj, interceptor) {
    interceptor(obj);
    return obj;
  }

  // Normalize a (deep) property `path` to array.
  // Like `_.iteratee`, this function can be customized.
  function toPath$1(path) {
    return isArray(path) ? path : [path];
  }
  _$1.toPath = toPath$1;

  // Internal wrapper for `_.toPath` to enable minification.
  // Similar to `cb` for `_.iteratee`.
  function toPath(path) {
    return _$1.toPath(path);
  }

  // Internal function to obtain a nested property in `obj` along `path`.
  function deepGet(obj, path) {
    var length = path.length;
    for (var i = 0; i < length; i++) {
      if (obj == null) return void 0;
      obj = obj[path[i]];
    }
    return length ? obj : void 0;
  }

  // Get the value of the (deep) property on `path` from `object`.
  // If any property in `path` does not exist or if the value is
  // `undefined`, return `defaultValue` instead.
  // The `path` is normalized through `_.toPath`.
  function get(object, path, defaultValue) {
    var value = deepGet(object, toPath(path));
    return isUndefined(value) ? defaultValue : value;
  }

  // Shortcut function for checking if an object has a given property directly on
  // itself (in other words, not on a prototype). Unlike the internal `has`
  // function, this public version can also traverse nested properties.
  function has(obj, path) {
    path = toPath(path);
    var length = path.length;
    for (var i = 0; i < length; i++) {
      var key = path[i];
      if (!has$1(obj, key)) return false;
      obj = obj[key];
    }
    return !!length;
  }

  // Keep the identity function around for default iteratees.
  function identity(value) {
    return value;
  }

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  function matcher(attrs) {
    attrs = extendOwn({}, attrs);
    return function(obj) {
      return isMatch(obj, attrs);
    };
  }

  // Creates a function that, when passed an object, will traverse that object’s
  // properties down the given `path`, specified as an array of keys or indices.
  function property(path) {
    path = toPath(path);
    return function(obj) {
      return deepGet(obj, path);
    };
  }

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  function optimizeCb(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
        // The 2-argument case is omitted because we’re not using it.
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  }

  // An internal function to generate callbacks that can be applied to each
  // element in a collection, returning the desired result — either `_.identity`,
  // an arbitrary callback, a property matcher, or a property accessor.
  function baseIteratee(value, context, argCount) {
    if (value == null) return identity;
    if (isFunction$1(value)) return optimizeCb(value, context, argCount);
    if (isObject(value) && !isArray(value)) return matcher(value);
    return property(value);
  }

  // External wrapper for our callback generator. Users may customize
  // `_.iteratee` if they want additional predicate/iteratee shorthand styles.
  // This abstraction hides the internal-only `argCount` argument.
  function iteratee(value, context) {
    return baseIteratee(value, context, Infinity);
  }
  _$1.iteratee = iteratee;

  // The function we call internally to generate a callback. It invokes
  // `_.iteratee` if overridden, otherwise `baseIteratee`.
  function cb(value, context, argCount) {
    if (_$1.iteratee !== iteratee) return _$1.iteratee(value, context);
    return baseIteratee(value, context, argCount);
  }

  // Returns the results of applying the `iteratee` to each element of `obj`.
  // In contrast to `_.map` it returns an object.
  function mapObject(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var _keys = keys(obj),
        length = _keys.length,
        results = {};
    for (var index = 0; index < length; index++) {
      var currentKey = _keys[index];
      results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  }

  // Predicate-generating function. Often useful outside of Underscore.
  function noop(){}

  // Generates a function for a given object that returns a given property.
  function propertyOf(obj) {
    if (obj == null) return noop;
    return function(path) {
      return get(obj, path);
    };
  }

  // Run a function **n** times.
  function times(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  }

  // Return a random integer between `min` and `max` (inclusive).
  function random(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  }

  // A (possibly faster) way to get the current timestamp as an integer.
  var now = Date.now || function() {
    return new Date().getTime();
  };

  // Internal helper to generate functions for escaping and unescaping strings
  // to/from HTML interpolation.
  function createEscaper(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped.
    var source = '(?:' + keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  }

  // Internal list of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };

  // Function for escaping strings to HTML interpolation.
  var _escape = createEscaper(escapeMap);

  // Internal list of HTML entities for unescaping.
  var unescapeMap = invert(escapeMap);

  // Function for unescaping strings from HTML interpolation.
  var _unescape = createEscaper(unescapeMap);

  // By default, Underscore uses ERB-style template delimiters. Change the
  // following template settings to use alternative delimiters.
  var templateSettings = _$1.templateSettings = {
    evaluate: /<%([\s\S]+?)%>/g,
    interpolate: /<%=([\s\S]+?)%>/g,
    escape: /<%-([\s\S]+?)%>/g
  };

  // When customizing `_.templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'": "'",
    '\\': '\\',
    '\r': 'r',
    '\n': 'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escapeRegExp = /\\|'|\r|\n|\u2028|\u2029/g;

  function escapeChar(match) {
    return '\\' + escapes[match];
  }

  // In order to prevent third-party code injection through
  // `_.templateSettings.variable`, we test it against the following regular
  // expression. It is intentionally a bit more liberal than just matching valid
  // identifiers, but still prevents possible loopholes through defaults or
  // destructuring assignment.
  var bareIdentifier = /^\s*(\w|\$)+\s*$/;

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  function template(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = defaults({}, settings, _$1.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escapeRegExp, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offset.
      return match;
    });
    source += "';\n";

    var argument = settings.variable;
    if (argument) {
      // Insure against third-party code injection. (CVE-2021-23358)
      if (!bareIdentifier.test(argument)) throw new Error(
          'variable is not a bare identifier: ' + argument
      );
    } else {
      // If a variable is not specified, place data values in local scope.
      source = 'with(obj||{}){\n' + source + '}\n';
      argument = 'obj';
    }

    source = "var __t,__p='',__j=Array.prototype.join," +
        "print=function(){__p+=__j.call(arguments,'');};\n" +
        source + 'return __p;\n';

    var render;
    try {
      render = new Function(argument, '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _$1);
    };

    // Provide the compiled source as a convenience for precompilation.
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  }

  // Traverses the children of `obj` along `path`. If a child is a function, it
  // is invoked with its parent as context. Returns the value of the final
  // child, or `fallback` if any child is undefined.
  function result(obj, path, fallback) {
    path = toPath(path);
    var length = path.length;
    if (!length) {
      return isFunction$1(fallback) ? fallback.call(obj) : fallback;
    }
    for (var i = 0; i < length; i++) {
      var prop = obj == null ? void 0 : obj[path[i]];
      if (prop === void 0) {
        prop = fallback;
        i = length; // Ensure we don't continue iterating.
      }
      obj = isFunction$1(prop) ? prop.call(obj) : prop;
    }
    return obj;
  }

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  function uniqueId(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  }

  // Start chaining a wrapped Underscore object.
  function chain(obj) {
    var instance = _$1(obj);
    instance._chain = true;
    return instance;
  }

  // Internal function to execute `sourceFunc` bound to `context` with optional
  // `args`. Determines whether to execute a function as a constructor or as a
  // normal function.
  function executeBound(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (isObject(result)) return result;
    return self;
  }

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. `_` acts
  // as a placeholder by default, allowing any combination of arguments to be
  // pre-filled. Set `_.partial.placeholder` for a custom placeholder argument.
  var partial = restArguments(function(func, boundArgs) {
    var placeholder = partial.placeholder;
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === placeholder ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  });

  partial.placeholder = _$1;

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally).
  var bind = restArguments(function(func, context, args) {
    if (!isFunction$1(func)) throw new TypeError('Bind must be called on a function');
    var bound = restArguments(function(callArgs) {
      return executeBound(func, bound, context, this, args.concat(callArgs));
    });
    return bound;
  });

  // Internal helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object.
  // Related: https://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var isArrayLike = createSizePropertyCheck(getLength);

  // Internal implementation of a recursive `flatten` function.
  function flatten$1(input, depth, strict, output) {
    output = output || [];
    if (!depth && depth !== 0) {
      depth = Infinity;
    } else if (depth <= 0) {
      return output.concat(input);
    }
    var idx = output.length;
    for (var i = 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (isArray(value) || isArguments$1(value))) {
        // Flatten current level of array or arguments object.
        if (depth > 1) {
          flatten$1(value, depth - 1, strict, output);
          idx = output.length;
        } else {
          var j = 0, len = value.length;
          while (j < len) output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  }

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  var bindAll = restArguments(function(obj, keys) {
    keys = flatten$1(keys, false, false);
    var index = keys.length;
    if (index < 1) throw new Error('bindAll must be passed function names');
    while (index--) {
      var key = keys[index];
      obj[key] = bind(obj[key], obj);
    }
    return obj;
  });

  // Memoize an expensive function by storing its results.
  function memoize(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!has$1(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  }

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  var delay = restArguments(function(func, wait, args) {
    return setTimeout(function() {
      return func.apply(null, args);
    }, wait);
  });

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  var defer = partial(delay, _$1, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  function throttle(func, wait, options) {
    var timeout, context, args, result;
    var previous = 0;
    if (!options) options = {};

    var later = function() {
      previous = options.leading === false ? 0 : now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };

    var throttled = function() {
      var _now = now();
      if (!previous && options.leading === false) previous = _now;
      var remaining = wait - (_now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = _now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };

    throttled.cancel = function() {
      clearTimeout(timeout);
      previous = 0;
      timeout = context = args = null;
    };

    return throttled;
  }

  // When a sequence of calls of the returned function ends, the argument
  // function is triggered. The end of a sequence is defined by the `wait`
  // parameter. If `immediate` is passed, the argument function will be
  // triggered at the beginning of the sequence instead of at the end.
  function debounce(func, wait, immediate) {
    var timeout, previous, args, result, context;

    var later = function() {
      var passed = now() - previous;
      if (wait > passed) {
        timeout = setTimeout(later, wait - passed);
      } else {
        timeout = null;
        if (!immediate) result = func.apply(context, args);
        // This check is needed because `func` can recursively invoke `debounced`.
        if (!timeout) args = context = null;
      }
    };

    var debounced = restArguments(function(_args) {
      context = this;
      args = _args;
      previous = now();
      if (!timeout) {
        timeout = setTimeout(later, wait);
        if (immediate) result = func.apply(context, args);
      }
      return result;
    });

    debounced.cancel = function() {
      clearTimeout(timeout);
      timeout = args = context = null;
    };

    return debounced;
  }

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  function wrap(func, wrapper) {
    return partial(wrapper, func);
  }

  // Returns a negated version of the passed-in predicate.
  function negate(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  }

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  function compose() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  }

  // Returns a function that will only be executed on and after the Nth call.
  function after(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  }

  // Returns a function that will only be executed up to (but not including) the
  // Nth call.
  function before(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  }

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  var once = partial(before, 2);

  // Returns the first key on an object that passes a truth test.
  function findKey(obj, predicate, context) {
    predicate = cb(predicate, context);
    var _keys = keys(obj), key;
    for (var i = 0, length = _keys.length; i < length; i++) {
      key = _keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  }

  // Internal function to generate `_.findIndex` and `_.findLastIndex`.
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a truth test.
  var findIndex = createPredicateIndexFinder(1);

  // Returns the last index on an array-like that passes a truth test.
  var findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  function sortedIndex(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  }

  // Internal function to generate the `_.indexOf` and `_.lastIndexOf` functions.
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
          i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
          length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), isNaN$1);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  var indexOf = createIndexFinder(1, findIndex, sortedIndex);

  // Return the position of the last occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  var lastIndexOf = createIndexFinder(-1, findLastIndex);

  // Return the first value which passes a truth test.
  function find(obj, predicate, context) {
    var keyFinder = isArrayLike(obj) ? findIndex : findKey;
    var key = keyFinder(obj, predicate, context);
    if (key !== void 0 && key !== -1) return obj[key];
  }

  // Convenience version of a common use case of `_.find`: getting the first
  // object containing specific `key:value` pairs.
  function findWhere(obj, attrs) {
    return find(obj, matcher(attrs));
  }

  // The cornerstone for collection functions, an `each`
  // implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  function each(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var _keys = keys(obj);
      for (i = 0, length = _keys.length; i < length; i++) {
        iteratee(obj[_keys[i]], _keys[i], obj);
      }
    }
    return obj;
  }

  // Return the results of applying the iteratee to each element.
  function map(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var _keys = !isArrayLike(obj) && keys(obj),
        length = (_keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = _keys ? _keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  }

  // Internal helper to create a reducing function, iterating left or right.
  function createReduce(dir) {
    // Wrap code that reassigns argument variables in a separate function than
    // the one that accesses `arguments.length` to avoid a perf hit. (#1991)
    var reducer = function(obj, iteratee, memo, initial) {
      var _keys = !isArrayLike(obj) && keys(obj),
          length = (_keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      if (!initial) {
        memo = obj[_keys ? _keys[index] : index];
        index += dir;
      }
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = _keys ? _keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    };

    return function(obj, iteratee, memo, context) {
      var initial = arguments.length >= 3;
      return reducer(obj, optimizeCb(iteratee, context, 4), memo, initial);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  var reduce = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  var reduceRight = createReduce(-1);

  // Return all the elements that pass a truth test.
  function filter(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  }

  // Return all the elements for which a truth test fails.
  function reject(obj, predicate, context) {
    return filter(obj, negate(cb(predicate)), context);
  }

  // Determine whether all of the elements pass a truth test.
  function every(obj, predicate, context) {
    predicate = cb(predicate, context);
    var _keys = !isArrayLike(obj) && keys(obj),
        length = (_keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = _keys ? _keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  }

  // Determine if at least one element in the object passes a truth test.
  function some(obj, predicate, context) {
    predicate = cb(predicate, context);
    var _keys = !isArrayLike(obj) && keys(obj),
        length = (_keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = _keys ? _keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  }

  // Determine if the array or object contains a given item (using `===`).
  function contains(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return indexOf(obj, item, fromIndex) >= 0;
  }

  // Invoke a method (with arguments) on every item in a collection.
  var invoke = restArguments(function(obj, path, args) {
    var contextPath, func;
    if (isFunction$1(path)) {
      func = path;
    } else {
      path = toPath(path);
      contextPath = path.slice(0, -1);
      path = path[path.length - 1];
    }
    return map(obj, function(context) {
      var method = func;
      if (!method) {
        if (contextPath && contextPath.length) {
          context = deepGet(context, contextPath);
        }
        if (context == null) return void 0;
        method = context[path];
      }
      return method == null ? method : method.apply(context, args);
    });
  });

  // Convenience version of a common use case of `_.map`: fetching a property.
  function pluck(obj, key) {
    return map(obj, property(key));
  }

  // Convenience version of a common use case of `_.filter`: selecting only
  // objects containing specific `key:value` pairs.
  function where(obj, attrs) {
    return filter(obj, matcher(attrs));
  }

  // Return the maximum element (or element-based computation).
  function max(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {
      obj = isArrayLike(obj) ? obj : values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed > lastComputed || (computed === -Infinity && result === -Infinity)) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  }

  // Return the minimum element (or element-based computation).
  function min(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null || (typeof iteratee == 'number' && typeof obj[0] != 'object' && obj != null)) {
      obj = isArrayLike(obj) ? obj : values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value != null && value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      each(obj, function(v, index, list) {
        computed = iteratee(v, index, list);
        if (computed < lastComputed || (computed === Infinity && result === Infinity)) {
          result = v;
          lastComputed = computed;
        }
      });
    }
    return result;
  }

  // Safely create a real, live array from anything iterable.
  var reStrSymbol = /[^\ud800-\udfff]|[\ud800-\udbff][\udc00-\udfff]|[\ud800-\udfff]/g;
  function toArray(obj) {
    if (!obj) return [];
    if (isArray(obj)) return slice.call(obj);
    if (isString(obj)) {
      // Keep surrogate pair characters together.
      return obj.match(reStrSymbol);
    }
    if (isArrayLike(obj)) return map(obj, identity);
    return values(obj);
  }

  // Sample **n** random values from a collection using the modern version of the
  // [Fisher-Yates shuffle](https://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `_.map`.
  function sample(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = values(obj);
      return obj[random(obj.length - 1)];
    }
    var sample = toArray(obj);
    var length = getLength(sample);
    n = Math.max(Math.min(n, length), 0);
    var last = length - 1;
    for (var index = 0; index < n; index++) {
      var rand = random(index, last);
      var temp = sample[index];
      sample[index] = sample[rand];
      sample[rand] = temp;
    }
    return sample.slice(0, n);
  }

  // Shuffle a collection.
  function shuffle(obj) {
    return sample(obj, Infinity);
  }

  // Sort the object's values by a criterion produced by an iteratee.
  function sortBy(obj, iteratee, context) {
    var index = 0;
    iteratee = cb(iteratee, context);
    return pluck(map(obj, function(value, key, list) {
      return {
        value: value,
        index: index++,
        criteria: iteratee(value, key, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  }

  // An internal function used for aggregate "group by" operations.
  function group(behavior, partition) {
    return function(obj, iteratee, context) {
      var result = partition ? [[], []] : {};
      iteratee = cb(iteratee, context);
      each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  }

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  var groupBy = group(function(result, value, key) {
    if (has$1(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `_.groupBy`, but for
  // when you know that your index values will be unique.
  var indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  var countBy = group(function(result, value, key) {
    if (has$1(result, key)) result[key]++; else result[key] = 1;
  });

  // Split a collection into two arrays: one whose elements all pass the given
  // truth test, and one whose elements all do not pass the truth test.
  var partition = group(function(result, value, pass) {
    result[pass ? 0 : 1].push(value);
  }, true);

  // Return the number of elements in a collection.
  function size(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : keys(obj).length;
  }

  // Internal `_.pick` helper function to determine whether `key` is an enumerable
  // property name of `obj`.
  function keyInObj(value, key, obj) {
    return key in obj;
  }

  // Return a copy of the object only containing the allowed properties.
  var pick = restArguments(function(obj, keys) {
    var result = {}, iteratee = keys[0];
    if (obj == null) return result;
    if (isFunction$1(iteratee)) {
      if (keys.length > 1) iteratee = optimizeCb(iteratee, keys[1]);
      keys = allKeys(obj);
    } else {
      iteratee = keyInObj;
      keys = flatten$1(keys, false, false);
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  });

  // Return a copy of the object without the disallowed properties.
  var omit = restArguments(function(obj, keys) {
    var iteratee = keys[0], context;
    if (isFunction$1(iteratee)) {
      iteratee = negate(iteratee);
      if (keys.length > 1) context = keys[1];
    } else {
      keys = map(flatten$1(keys, false, false), String);
      iteratee = function(value, key) {
        return !contains(keys, key);
      };
    }
    return pick(obj, iteratee, context);
  });

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  function initial(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  }

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. The **guard** check allows it to work with `_.map`.
  function first(array, n, guard) {
    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
    if (n == null || guard) return array[0];
    return initial(array, array.length - n);
  }

  // Returns everything but the first entry of the `array`. Especially useful on
  // the `arguments` object. Passing an **n** will return the rest N values in the
  // `array`.
  function rest(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  }

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  function last(array, n, guard) {
    if (array == null || array.length < 1) return n == null || guard ? void 0 : [];
    if (n == null || guard) return array[array.length - 1];
    return rest(array, Math.max(0, array.length - n));
  }

  // Trim out all falsy values from an array.
  function compact(array) {
    return filter(array, Boolean);
  }

  // Flatten out an array, either recursively (by default), or up to `depth`.
  // Passing `true` or `false` as `depth` means `1` or `Infinity`, respectively.
  function flatten(array, depth) {
    return flatten$1(array, depth, false);
  }

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  var difference = restArguments(function(array, rest) {
    rest = flatten$1(rest, true, true);
    return filter(array, function(value){
      return !contains(rest, value);
    });
  });

  // Return a version of the array that does not contain the specified value(s).
  var without = restArguments(function(array, otherArrays) {
    return difference(array, otherArrays);
  });

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // The faster algorithm will not work with an iteratee if the iteratee
  // is not a one-to-one function, so providing an iteratee will disable
  // the faster algorithm.
  function uniq(array, isSorted, iteratee, context) {
    if (!isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted && !iteratee) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  }

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  var union = restArguments(function(arrays) {
    return uniq(flatten$1(arrays, true, true));
  });

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  function intersection(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (contains(result, item)) continue;
      var j;
      for (j = 1; j < argsLength; j++) {
        if (!contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  }

  // Complement of zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices.
  function unzip(array) {
    var length = (array && max(array, getLength).length) || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = pluck(array, index);
    }
    return result;
  }

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  var zip = restArguments(unzip);

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values. Passing by pairs is the reverse of `_.pairs`.
  function object(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  }

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](https://docs.python.org/library/functions.html#range).
  function range(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    if (!step) {
      step = stop < start ? -1 : 1;
    }

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  }

  // Chunk a single array into multiple arrays, each containing `count` or fewer
  // items.
  function chunk(array, count) {
    if (count == null || count < 1) return [];
    var result = [];
    var i = 0, length = array.length;
    while (i < length) {
      result.push(slice.call(array, i, i += count));
    }
    return result;
  }

  // Helper function to continue chaining intermediate results.
  function chainResult(instance, obj) {
    return instance._chain ? _$1(obj).chain() : obj;
  }

  // Add your own custom functions to the Underscore object.
  function mixin(obj) {
    each(functions(obj), function(name) {
      var func = _$1[name] = obj[name];
      _$1.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return chainResult(this, func.apply(_$1, args));
      };
    });
    return _$1;
  }

  // Add all mutator `Array` functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _$1.prototype[name] = function() {
      var obj = this._wrapped;
      if (obj != null) {
        method.apply(obj, arguments);
        if ((name === 'shift' || name === 'splice') && obj.length === 0) {
          delete obj[0];
        }
      }
      return chainResult(this, obj);
    };
  });

  // Add all accessor `Array` functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _$1.prototype[name] = function() {
      var obj = this._wrapped;
      if (obj != null) obj = method.apply(obj, arguments);
      return chainResult(this, obj);
    };
  });

  // Named Exports

  var allExports = {
    __proto__: null,
    VERSION: VERSION,
    restArguments: restArguments,
    isObject: isObject,
    isNull: isNull,
    isUndefined: isUndefined,
    isBoolean: isBoolean,
    isElement: isElement,
    isString: isString,
    isNumber: isNumber,
    isDate: isDate,
    isRegExp: isRegExp,
    isError: isError,
    isSymbol: isSymbol,
    isArrayBuffer: isArrayBuffer,
    isDataView: isDataView$1,
    isArray: isArray,
    isFunction: isFunction$1,
    isArguments: isArguments$1,
    isFinite: isFinite$1,
    isNaN: isNaN$1,
    isTypedArray: isTypedArray$1,
    isEmpty: isEmpty,
    isMatch: isMatch,
    isEqual: isEqual,
    isMap: isMap,
    isWeakMap: isWeakMap,
    isSet: isSet,
    isWeakSet: isWeakSet,
    keys: keys,
    allKeys: allKeys,
    values: values,
    pairs: pairs,
    invert: invert,
    functions: functions,
    methods: functions,
    extend: extend,
    extendOwn: extendOwn,
    assign: extendOwn,
    defaults: defaults,
    create: create,
    clone: clone,
    tap: tap,
    get: get,
    has: has,
    mapObject: mapObject,
    identity: identity,
    constant: constant,
    noop: noop,
    toPath: toPath$1,
    property: property,
    propertyOf: propertyOf,
    matcher: matcher,
    matches: matcher,
    times: times,
    random: random,
    now: now,
    escape: _escape,
    unescape: _unescape,
    templateSettings: templateSettings,
    template: template,
    result: result,
    uniqueId: uniqueId,
    chain: chain,
    iteratee: iteratee,
    partial: partial,
    bind: bind,
    bindAll: bindAll,
    memoize: memoize,
    delay: delay,
    defer: defer,
    throttle: throttle,
    debounce: debounce,
    wrap: wrap,
    negate: negate,
    compose: compose,
    after: after,
    before: before,
    once: once,
    findKey: findKey,
    findIndex: findIndex,
    findLastIndex: findLastIndex,
    sortedIndex: sortedIndex,
    indexOf: indexOf,
    lastIndexOf: lastIndexOf,
    find: find,
    detect: find,
    findWhere: findWhere,
    each: each,
    forEach: each,
    map: map,
    collect: map,
    reduce: reduce,
    foldl: reduce,
    inject: reduce,
    reduceRight: reduceRight,
    foldr: reduceRight,
    filter: filter,
    select: filter,
    reject: reject,
    every: every,
    all: every,
    some: some,
    any: some,
    contains: contains,
    includes: contains,
    include: contains,
    invoke: invoke,
    pluck: pluck,
    where: where,
    max: max,
    min: min,
    shuffle: shuffle,
    sample: sample,
    sortBy: sortBy,
    groupBy: groupBy,
    indexBy: indexBy,
    countBy: countBy,
    partition: partition,
    toArray: toArray,
    size: size,
    pick: pick,
    omit: omit,
    first: first,
    head: first,
    take: first,
    initial: initial,
    last: last,
    rest: rest,
    tail: rest,
    drop: rest,
    compact: compact,
    flatten: flatten,
    without: without,
    uniq: uniq,
    unique: uniq,
    union: union,
    intersection: intersection,
    difference: difference,
    unzip: unzip,
    transpose: unzip,
    zip: zip,
    object: object,
    range: range,
    chunk: chunk,
    mixin: mixin,
    'default': _$1
  };

  // Default Export

  // Add all of the Underscore functions to the wrapper object.
  var _ = mixin(allExports);
  // Legacy Node.js API.
  _._ = _;

  return _;

})));
//# sourceMappingURL=underscore-umd.js.map


  return module;
})
;var process = process || {env: {NODE_ENV: "development"}};
//     Backbone.js 1.0.0

//     (c) 2010-2013 Jeremy Ashkenas, DocumentCloud Inc.
//     Backbone may be freely distributed under the MIT license.
//     For all details and documentation:
//     http://backbonejs.org

(function(){

  // Initial Setup
  // -------------

  // Save a reference to the global object (`window` in the browser, `exports`
  // on the server).
  var root = this;

  // Save the previous value of the `Backbone` variable, so that it can be
  // restored later on, if `noConflict` is used.
  var previousBackbone = root.Backbone;

  // Create local references to array methods we'll want to use later.
  var array = [];
  var push = array.push;
  var slice = array.slice;
  var splice = array.splice;

  // The top-level namespace. All public Backbone classes and modules will
  // be attached to this. Exported for both the browser and the server.
  var Backbone;
  if (typeof exports !== 'undefined') {
    Backbone = exports;
  } else {
    Backbone = root.Backbone = {};
  }

  // Current version of the library. Keep in sync with `package.json`.
  Backbone.VERSION = '1.0.0';

  // Require Underscore, if we're on the server, and it's not already present.
  var _ = root._;
  if (!_ && (typeof require !== 'undefined')) _ = _asset_pipeline_require('underscore.js');

  // For Backbone's purposes, jQuery, Zepto, Ender, or My Library (kidding) owns
  // the `$` variable.
  Backbone.$ = root.jQuery || root.Zepto || root.ender || root.$;

  // Runs Backbone.js in *noConflict* mode, returning the `Backbone` variable
  // to its previous owner. Returns a reference to this Backbone object.
  Backbone.noConflict = function() {
    root.Backbone = previousBackbone;
    return this;
  };

  // Turn on `emulateHTTP` to support legacy HTTP servers. Setting this option
  // will fake `"PUT"` and `"DELETE"` requests via the `_method` parameter and
  // set a `X-Http-Method-Override` header.
  Backbone.emulateHTTP = false;

  // Turn on `emulateJSON` to support legacy servers that can't deal with direct
  // `application/json` requests ... will encode the body as
  // `application/x-www-form-urlencoded` instead and will send the model in a
  // form param named `model`.
  Backbone.emulateJSON = false;

  // Backbone.Events
  // ---------------

  // A module that can be mixed in to *any object* in order to provide it with
  // custom events. You may bind with `on` or remove with `off` callback
  // functions to an event; `trigger`-ing an event fires all callbacks in
  // succession.
  //
  //     var object = {};
  //     _.extend(object, Backbone.Events);
  //     object.on('expand', function(){ alert('expanded'); });
  //     object.trigger('expand');
  //
  var Events = Backbone.Events = {

    // Bind an event to a `callback` function. Passing `"all"` will bind
    // the callback to all events fired.
    on: function(name, callback, context) {
      if (!eventsApi(this, 'on', name, [callback, context]) || !callback) return this;
      this._events || (this._events = {});
      var events = this._events[name] || (this._events[name] = []);
      events.push({callback: callback, context: context, ctx: context || this});
      return this;
    },

    // Bind an event to only be triggered a single time. After the first time
    // the callback is invoked, it will be removed.
    once: function(name, callback, context) {
      if (!eventsApi(this, 'once', name, [callback, context]) || !callback) return this;
      var self = this;
      var once = _.once(function() {
        self.off(name, once);
        callback.apply(this, arguments);
      });
      once._callback = callback;
      return this.on(name, once, context);
    },

    // Remove one or many callbacks. If `context` is null, removes all
    // callbacks with that function. If `callback` is null, removes all
    // callbacks for the event. If `name` is null, removes all bound
    // callbacks for all events.
    off: function(name, callback, context) {
      var retain, ev, events, names, i, l, j, k;
      if (!this._events || !eventsApi(this, 'off', name, [callback, context])) return this;
      if (!name && !callback && !context) {
        this._events = {};
        return this;
      }

      names = name ? [name] : _.keys(this._events);
      for (i = 0, l = names.length; i < l; i++) {
        name = names[i];
        if (events = this._events[name]) {
          this._events[name] = retain = [];
          if (callback || context) {
            for (j = 0, k = events.length; j < k; j++) {
              ev = events[j];
              if ((callback && callback !== ev.callback && callback !== ev.callback._callback) ||
                  (context && context !== ev.context)) {
                retain.push(ev);
              }
            }
          }
          if (!retain.length) delete this._events[name];
        }
      }

      return this;
    },

    // Trigger one or many events, firing all bound callbacks. Callbacks are
    // passed the same arguments as `trigger` is, apart from the event name
    // (unless you're listening on `"all"`, which will cause your callback to
    // receive the true name of the event as the first argument).
    trigger: function(name) {
      if (!this._events) return this;
      var args = slice.call(arguments, 1);
      if (!eventsApi(this, 'trigger', name, args)) return this;
      var events = this._events[name];
      var allEvents = this._events.all;
      if (events) triggerEvents(events, args);
      if (allEvents) triggerEvents(allEvents, arguments);
      return this;
    },

    // Tell this object to stop listening to either specific events ... or
    // to every object it's currently listening to.
    stopListening: function(obj, name, callback) {
      var listeners = this._listeners;
      if (!listeners) return this;
      var deleteListener = !name && !callback;
      if (typeof name === 'object') callback = this;
      if (obj) (listeners = {})[obj._listenerId] = obj;
      for (var id in listeners) {
        listeners[id].off(name, callback, this);
        if (deleteListener) delete this._listeners[id];
      }
      return this;
    }

  };

  // Regular expression used to split event strings.
  var eventSplitter = /\s+/;

  // Implement fancy features of the Events API such as multiple event
  // names `"change blur"` and jQuery-style event maps `{change: action}`
  // in terms of the existing API.
  var eventsApi = function(obj, action, name, rest) {
    if (!name) return true;

    // Handle event maps.
    if (typeof name === 'object') {
      for (var key in name) {
        obj[action].apply(obj, [key, name[key]].concat(rest));
      }
      return false;
    }

    // Handle space separated event names.
    if (eventSplitter.test(name)) {
      var names = name.split(eventSplitter);
      for (var i = 0, l = names.length; i < l; i++) {
        obj[action].apply(obj, [names[i]].concat(rest));
      }
      return false;
    }

    return true;
  };

  // A difficult-to-believe, but optimized internal dispatch function for
  // triggering events. Tries to keep the usual cases speedy (most internal
  // Backbone events have 3 arguments).
  var triggerEvents = function(events, args) {
    var ev, i = -1, l = events.length, a1 = args[0], a2 = args[1], a3 = args[2];
    switch (args.length) {
      case 0: while (++i < l) (ev = events[i]).callback.call(ev.ctx); return;
      case 1: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1); return;
      case 2: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2); return;
      case 3: while (++i < l) (ev = events[i]).callback.call(ev.ctx, a1, a2, a3); return;
      default: while (++i < l) (ev = events[i]).callback.apply(ev.ctx, args);
    }
  };

  var listenMethods = {listenTo: 'on', listenToOnce: 'once'};

  // Inversion-of-control versions of `on` and `once`. Tell *this* object to
  // listen to an event in another object ... keeping track of what it's
  // listening to.
  _.each(listenMethods, function(implementation, method) {
    Events[method] = function(obj, name, callback) {
      var listeners = this._listeners || (this._listeners = {});
      var id = obj._listenerId || (obj._listenerId = _.uniqueId('l'));
      listeners[id] = obj;
      if (typeof name === 'object') callback = this;
      obj[implementation](name, callback, this);
      return this;
    };
  });

  // Aliases for backwards compatibility.
  Events.bind   = Events.on;
  Events.unbind = Events.off;

  // Allow the `Backbone` object to serve as a global event bus, for folks who
  // want global "pubsub" in a convenient place.
  _.extend(Backbone, Events);

  // Backbone.Model
  // --------------

  // Backbone **Models** are the basic data object in the framework --
  // frequently representing a row in a table in a database on your server.
  // A discrete chunk of data and a bunch of useful, related methods for
  // performing computations and transformations on that data.

  // Create a new model with the specified attributes. A client id (`cid`)
  // is automatically generated and assigned for you.
  var Model = Backbone.Model = function(attributes, options) {
    var defaults;
    var attrs = attributes || {};
    options || (options = {});
    this.cid = _.uniqueId('c');
    this.attributes = {};
    _.extend(this, _.pick(options, modelOptions));
    if (options.parse) attrs = this.parse(attrs, options) || {};
    if (defaults = _.result(this, 'defaults')) {
      attrs = _.defaults({}, attrs, defaults);
    }
    this.set(attrs, options);
    this.changed = {};
    this.initialize.apply(this, arguments);
  };

  // A list of options to be attached directly to the model, if provided.
  var modelOptions = ['url', 'urlRoot', 'collection'];

  // Attach all inheritable methods to the Model prototype.
  _.extend(Model.prototype, Events, {

    // A hash of attributes whose current and previous value differ.
    changed: null,

    // The value returned during the last failed validation.
    validationError: null,

    // The default name for the JSON `id` attribute is `"id"`. MongoDB and
    // CouchDB users may want to set this to `"_id"`.
    idAttribute: 'id',

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Return a copy of the model's `attributes` object.
    toJSON: function(options) {
      return _.clone(this.attributes);
    },

    // Proxy `Backbone.sync` by default -- but override this if you need
    // custom syncing semantics for *this* particular model.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Get the value of an attribute.
    get: function(attr) {
      return this.attributes[attr];
    },

    // Get the HTML-escaped value of an attribute.
    escape: function(attr) {
      return _.escape(this.get(attr));
    },

    // Returns `true` if the attribute contains a value that is not null
    // or undefined.
    has: function(attr) {
      return this.get(attr) != null;
    },

    // Set a hash of model attributes on the object, firing `"change"`. This is
    // the core primitive operation of a model, updating the data and notifying
    // anyone who needs to know about the change in state. The heart of the beast.
    set: function(key, val, options) {
      var attr, attrs, unset, changes, silent, changing, prev, current;
      if (key == null) return this;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      options || (options = {});

      // Run validation.
      if (!this._validate(attrs, options)) return false;

      // Extract attributes and options.
      unset           = options.unset;
      silent          = options.silent;
      changes         = [];
      changing        = this._changing;
      this._changing  = true;

      if (!changing) {
        this._previousAttributes = _.clone(this.attributes);
        this.changed = {};
      }
      current = this.attributes, prev = this._previousAttributes;

      // Check for changes of `id`.
      if (this.idAttribute in attrs) this.id = attrs[this.idAttribute];

      // For each `set` attribute, update or delete the current value.
      for (attr in attrs) {
        val = attrs[attr];
        if (!_.isEqual(current[attr], val)) changes.push(attr);
        if (!_.isEqual(prev[attr], val)) {
          this.changed[attr] = val;
        } else {
          delete this.changed[attr];
        }
        unset ? delete current[attr] : current[attr] = val;
      }

      // Trigger all relevant attribute changes.
      if (!silent) {
        if (changes.length) this._pending = true;
        for (var i = 0, l = changes.length; i < l; i++) {
          this.trigger('change:' + changes[i], this, current[changes[i]], options);
        }
      }

      // You might be wondering why there's a `while` loop here. Changes can
      // be recursively nested within `"change"` events.
      if (changing) return this;
      if (!silent) {
        while (this._pending) {
          this._pending = false;
          this.trigger('change', this, options);
        }
      }
      this._pending = false;
      this._changing = false;
      return this;
    },

    // Remove an attribute from the model, firing `"change"`. `unset` is a noop
    // if the attribute doesn't exist.
    unset: function(attr, options) {
      return this.set(attr, void 0, _.extend({}, options, {unset: true}));
    },

    // Clear all attributes on the model, firing `"change"`.
    clear: function(options) {
      var attrs = {};
      for (var key in this.attributes) attrs[key] = void 0;
      return this.set(attrs, _.extend({}, options, {unset: true}));
    },

    // Determine if the model has changed since the last `"change"` event.
    // If you specify an attribute name, determine if that attribute has changed.
    hasChanged: function(attr) {
      if (attr == null) return !_.isEmpty(this.changed);
      return _.has(this.changed, attr);
    },

    // Return an object containing all the attributes that have changed, or
    // false if there are no changed attributes. Useful for determining what
    // parts of a view need to be updated and/or what attributes need to be
    // persisted to the server. Unset attributes will be set to undefined.
    // You can also pass an attributes object to diff against the model,
    // determining if there *would be* a change.
    changedAttributes: function(diff) {
      if (!diff) return this.hasChanged() ? _.clone(this.changed) : false;
      var val, changed = false;
      var old = this._changing ? this._previousAttributes : this.attributes;
      for (var attr in diff) {
        if (_.isEqual(old[attr], (val = diff[attr]))) continue;
        (changed || (changed = {}))[attr] = val;
      }
      return changed;
    },

    // Get the previous value of an attribute, recorded at the time the last
    // `"change"` event was fired.
    previous: function(attr) {
      if (attr == null || !this._previousAttributes) return null;
      return this._previousAttributes[attr];
    },

    // Get all of the attributes of the model at the time of the previous
    // `"change"` event.
    previousAttributes: function() {
      return _.clone(this._previousAttributes);
    },

    // Fetch the model from the server. If the server's representation of the
    // model differs from its current attributes, they will be overridden,
    // triggering a `"change"` event.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        if (!model.set(model.parse(resp, options), options)) return false;
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Set a hash of model attributes, and sync the model to the server.
    // If the server returns an attributes hash that differs, the model's
    // state will be `set` again.
    save: function(key, val, options) {
      var attrs, method, xhr, attributes = this.attributes;

      // Handle both `"key", value` and `{key: value}` -style arguments.
      if (key == null || typeof key === 'object') {
        attrs = key;
        options = val;
      } else {
        (attrs = {})[key] = val;
      }

      // If we're not waiting and attributes exist, save acts as `set(attr).save(null, opts)`.
      if (attrs && (!options || !options.wait) && !this.set(attrs, options)) return false;

      options = _.extend({validate: true}, options);

      // Do not persist invalid models.
      if (!this._validate(attrs, options)) return false;

      // Set temporary attributes if `{wait: true}`.
      if (attrs && options.wait) {
        this.attributes = _.extend({}, attributes, attrs);
      }

      // After a successful server-side save, the client is (optionally)
      // updated with the server-side state.
      if (options.parse === void 0) options.parse = true;
      var model = this;
      var success = options.success;
      options.success = function(resp) {
        // Ensure attributes are restored during synchronous saves.
        model.attributes = attributes;
        var serverAttrs = model.parse(resp, options);
        if (options.wait) serverAttrs = _.extend(attrs || {}, serverAttrs);
        if (_.isObject(serverAttrs) && !model.set(serverAttrs, options)) {
          return false;
        }
        if (success) success(model, resp, options);
        model.trigger('sync', model, resp, options);
      };
      wrapError(this, options);

      method = this.isNew() ? 'create' : (options.patch ? 'patch' : 'update');
      if (method === 'patch') options.attrs = attrs;
      xhr = this.sync(method, this, options);

      // Restore attributes.
      if (attrs && options.wait) this.attributes = attributes;

      return xhr;
    },

    // Destroy this model on the server if it was already persisted.
    // Optimistically removes the model from its collection, if it has one.
    // If `wait: true` is passed, waits for the server to respond before removal.
    destroy: function(options) {
      options = options ? _.clone(options) : {};
      var model = this;
      var success = options.success;

      var destroy = function() {
        model.trigger('destroy', model, model.collection, options);
      };

      options.success = function(resp) {
        if (options.wait || model.isNew()) destroy();
        if (success) success(model, resp, options);
        if (!model.isNew()) model.trigger('sync', model, resp, options);
      };

      if (this.isNew()) {
        options.success();
        return false;
      }
      wrapError(this, options);

      var xhr = this.sync('delete', this, options);
      if (!options.wait) destroy();
      return xhr;
    },

    // Default URL for the model's representation on the server -- if you're
    // using Backbone's restful methods, override this to change the endpoint
    // that will be called.
    url: function() {
      var base = _.result(this, 'urlRoot') || _.result(this.collection, 'url') || urlError();
      if (this.isNew()) return base;
      return base + (base.charAt(base.length - 1) === '/' ? '' : '/') + encodeURIComponent(this.id);
    },

    // **parse** converts a response into the hash of attributes to be `set` on
    // the model. The default implementation is just to pass the response along.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new model with identical attributes to this one.
    clone: function() {
      return new this.constructor(this.attributes);
    },

    // A model is new if it has never been saved to the server, and lacks an id.
    isNew: function() {
      return this.id == null;
    },

    // Check if the model is currently in a valid state.
    isValid: function(options) {
      return this._validate({}, _.extend(options || {}, { validate: true }));
    },

    // Run validation against the next complete set of model attributes,
    // returning `true` if all is well. Otherwise, fire an `"invalid"` event.
    _validate: function(attrs, options) {
      if (!options.validate || !this.validate) return true;
      attrs = _.extend({}, this.attributes, attrs);
      var error = this.validationError = this.validate(attrs, options) || null;
      if (!error) return true;
      this.trigger('invalid', this, error, _.extend(options || {}, {validationError: error}));
      return false;
    }

  });

  // Underscore methods that we want to implement on the Model.
  var modelMethods = ['keys', 'values', 'pairs', 'invert', 'pick', 'omit'];

  // Mix in each Underscore method as a proxy to `Model#attributes`.
  _.each(modelMethods, function(method) {
    Model.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.attributes);
      return _[method].apply(_, args);
    };
  });

  // Backbone.Collection
  // -------------------

  // If models tend to represent a single row of data, a Backbone Collection is
  // more analagous to a table full of data ... or a small slice or page of that
  // table, or a collection of rows that belong together for a particular reason
  // -- all of the messages in this particular folder, all of the documents
  // belonging to this particular author, and so on. Collections maintain
  // indexes of their models, both in order, and for lookup by `id`.

  // Create a new **Collection**, perhaps to contain a specific type of `model`.
  // If a `comparator` is specified, the Collection will maintain
  // its models in sort order, as they're added and removed.
  var Collection = Backbone.Collection = function(models, options) {
    options || (options = {});
    if (options.url) this.url = options.url;
    if (options.model) this.model = options.model;
    if (options.comparator !== void 0) this.comparator = options.comparator;
    this._reset();
    this.initialize.apply(this, arguments);
    if (models) this.reset(models, _.extend({silent: true}, options));
  };

  // Default options for `Collection#set`.
  var setOptions = {add: true, remove: true, merge: true};
  var addOptions = {add: true, merge: false, remove: false};

  // Define the Collection's inheritable methods.
  _.extend(Collection.prototype, Events, {

    // The default model for a collection is just a **Backbone.Model**.
    // This should be overridden in most cases.
    model: Model,

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // The JSON representation of a Collection is an array of the
    // models' attributes.
    toJSON: function(options) {
      return this.map(function(model){ return model.toJSON(options); });
    },

    // Proxy `Backbone.sync` by default.
    sync: function() {
      return Backbone.sync.apply(this, arguments);
    },

    // Add a model, or list of models to the set.
    add: function(models, options) {
      return this.set(models, _.defaults(options || {}, addOptions));
    },

    // Remove a model, or a list of models from the set.
    remove: function(models, options) {
      models = _.isArray(models) ? models.slice() : [models];
      options || (options = {});
      var i, l, index, model;
      for (i = 0, l = models.length; i < l; i++) {
        model = this.get(models[i]);
        if (!model) continue;
        delete this._byId[model.id];
        delete this._byId[model.cid];
        index = this.indexOf(model);
        this.models.splice(index, 1);
        this.length--;
        if (!options.silent) {
          options.index = index;
          model.trigger('remove', model, this, options);
        }
        this._removeReference(model);
      }
      return this;
    },

    // Update a collection by `set`-ing a new list of models, adding new ones,
    // removing models that are no longer present, and merging models that
    // already exist in the collection, as necessary. Similar to **Model#set**,
    // the core operation for updating the data contained by the collection.
    set: function(models, options) {
      options = _.defaults(options || {}, setOptions);
      if (options.parse) models = this.parse(models, options);
      if (!_.isArray(models)) models = models ? [models] : [];
      var i, l, model, attrs, existing, sort;
      var at = options.at;
      var sortable = this.comparator && (at == null) && options.sort !== false;
      var sortAttr = _.isString(this.comparator) ? this.comparator : null;
      var toAdd = [], toRemove = [], modelMap = {};

      // Turn bare objects into model references, and prevent invalid models
      // from being added.
      for (i = 0, l = models.length; i < l; i++) {
        if (!(model = this._prepareModel(models[i], options))) continue;

        // If a duplicate is found, prevent it from being added and
        // optionally merge it into the existing model.
        if (existing = this.get(model)) {
          if (options.remove) modelMap[existing.cid] = true;
          if (options.merge) {
            existing.set(model.attributes, options);
            if (sortable && !sort && existing.hasChanged(sortAttr)) sort = true;
          }

        // This is a new model, push it to the `toAdd` list.
        } else if (options.add) {
          toAdd.push(model);

          // Listen to added models' events, and index models for lookup by
          // `id` and by `cid`.
          model.on('all', this._onModelEvent, this);
          this._byId[model.cid] = model;
          if (model.id != null) this._byId[model.id] = model;
        }
      }

      // Remove nonexistent models if appropriate.
      if (options.remove) {
        for (i = 0, l = this.length; i < l; ++i) {
          if (!modelMap[(model = this.models[i]).cid]) toRemove.push(model);
        }
        if (toRemove.length) this.remove(toRemove, options);
      }

      // See if sorting is needed, update `length` and splice in new models.
      if (toAdd.length) {
        if (sortable) sort = true;
        this.length += toAdd.length;
        if (at != null) {
          splice.apply(this.models, [at, 0].concat(toAdd));
        } else {
          push.apply(this.models, toAdd);
        }
      }

      // Silently sort the collection if appropriate.
      if (sort) this.sort({silent: true});

      if (options.silent) return this;

      // Trigger `add` events.
      for (i = 0, l = toAdd.length; i < l; i++) {
        (model = toAdd[i]).trigger('add', model, this, options);
      }

      // Trigger `sort` if the collection was sorted.
      if (sort) this.trigger('sort', this, options);
      return this;
    },

    // When you have more items than you want to add or remove individually,
    // you can reset the entire set with a new list of models, without firing
    // any granular `add` or `remove` events. Fires `reset` when finished.
    // Useful for bulk operations and optimizations.
    reset: function(models, options) {
      options || (options = {});
      for (var i = 0, l = this.models.length; i < l; i++) {
        this._removeReference(this.models[i]);
      }
      options.previousModels = this.models;
      this._reset();
      this.add(models, _.extend({silent: true}, options));
      if (!options.silent) this.trigger('reset', this, options);
      return this;
    },

    // Add a model to the end of the collection.
    push: function(model, options) {
      model = this._prepareModel(model, options);
      this.add(model, _.extend({at: this.length}, options));
      return model;
    },

    // Remove a model from the end of the collection.
    pop: function(options) {
      var model = this.at(this.length - 1);
      this.remove(model, options);
      return model;
    },

    // Add a model to the beginning of the collection.
    unshift: function(model, options) {
      model = this._prepareModel(model, options);
      this.add(model, _.extend({at: 0}, options));
      return model;
    },

    // Remove a model from the beginning of the collection.
    shift: function(options) {
      var model = this.at(0);
      this.remove(model, options);
      return model;
    },

    // Slice out a sub-array of models from the collection.
    slice: function(begin, end) {
      return this.models.slice(begin, end);
    },

    // Get a model from the set by id.
    get: function(obj) {
      if (obj == null) return void 0;
      return this._byId[obj.id != null ? obj.id : obj.cid || obj];
    },

    // Get the model at the given index.
    at: function(index) {
      return this.models[index];
    },

    // Return models with matching attributes. Useful for simple cases of
    // `filter`.
    where: function(attrs, first) {
      if (_.isEmpty(attrs)) return first ? void 0 : [];
      return this[first ? 'find' : 'filter'](function(model) {
        for (var key in attrs) {
          if (attrs[key] !== model.get(key)) return false;
        }
        return true;
      });
    },

    // Return the first model with matching attributes. Useful for simple cases
    // of `find`.
    findWhere: function(attrs) {
      return this.where(attrs, true);
    },

    // Force the collection to re-sort itself. You don't need to call this under
    // normal circumstances, as the set will maintain sort order as each item
    // is added.
    sort: function(options) {
      if (!this.comparator) throw new Error('Cannot sort a set without a comparator');
      options || (options = {});

      // Run sort based on type of `comparator`.
      if (_.isString(this.comparator) || this.comparator.length === 1) {
        this.models = this.sortBy(this.comparator, this);
      } else {
        this.models.sort(_.bind(this.comparator, this));
      }

      if (!options.silent) this.trigger('sort', this, options);
      return this;
    },

    // Figure out the smallest index at which a model should be inserted so as
    // to maintain order.
    sortedIndex: function(model, value, context) {
      value || (value = this.comparator);
      var iterator = _.isFunction(value) ? value : function(model) {
        return model.get(value);
      };
      return _.sortedIndex(this.models, model, iterator, context);
    },

    // Pluck an attribute from each model in the collection.
    pluck: function(attr) {
      return _.invoke(this.models, 'get', attr);
    },

    // Fetch the default set of models for this collection, resetting the
    // collection when they arrive. If `reset: true` is passed, the response
    // data will be passed through the `reset` method instead of `set`.
    fetch: function(options) {
      options = options ? _.clone(options) : {};
      if (options.parse === void 0) options.parse = true;
      var success = options.success;
      var collection = this;
      options.success = function(resp) {
        var method = options.reset ? 'reset' : 'set';
        collection[method](resp, options);
        if (success) success(collection, resp, options);
        collection.trigger('sync', collection, resp, options);
      };
      wrapError(this, options);
      return this.sync('read', this, options);
    },

    // Create a new instance of a model in this collection. Add the model to the
    // collection immediately, unless `wait: true` is passed, in which case we
    // wait for the server to agree.
    create: function(model, options) {
      options = options ? _.clone(options) : {};
      if (!(model = this._prepareModel(model, options))) return false;
      if (!options.wait) this.add(model, options);
      var collection = this;
      var success = options.success;
      options.success = function(resp) {
        if (options.wait) collection.add(model, options);
        if (success) success(model, resp, options);
      };
      model.save(null, options);
      return model;
    },

    // **parse** converts a response into a list of models to be added to the
    // collection. The default implementation is just to pass it through.
    parse: function(resp, options) {
      return resp;
    },

    // Create a new collection with an identical list of models as this one.
    clone: function() {
      return new this.constructor(this.models);
    },

    // Private method to reset all internal state. Called when the collection
    // is first initialized or reset.
    _reset: function() {
      this.length = 0;
      this.models = [];
      this._byId  = {};
    },

    // Prepare a hash of attributes (or other model) to be added to this
    // collection.
    _prepareModel: function(attrs, options) {
      if (attrs instanceof Model) {
        if (!attrs.collection) attrs.collection = this;
        return attrs;
      }
      options || (options = {});
      options.collection = this;
      var model = new this.model(attrs, options);
      if (!model._validate(attrs, options)) {
        this.trigger('invalid', this, attrs, options);
        return false;
      }
      return model;
    },

    // Internal method to sever a model's ties to a collection.
    _removeReference: function(model) {
      if (this === model.collection) delete model.collection;
      model.off('all', this._onModelEvent, this);
    },

    // Internal method called every time a model in the set fires an event.
    // Sets need to update their indexes when models change ids. All other
    // events simply proxy through. "add" and "remove" events that originate
    // in other collections are ignored.
    _onModelEvent: function(event, model, collection, options) {
      if ((event === 'add' || event === 'remove') && collection !== this) return;
      if (event === 'destroy') this.remove(model, options);
      if (model && event === 'change:' + model.idAttribute) {
        delete this._byId[model.previous(model.idAttribute)];
        if (model.id != null) this._byId[model.id] = model;
      }
      this.trigger.apply(this, arguments);
    }

  });

  // Underscore methods that we want to implement on the Collection.
  // 90% of the core usefulness of Backbone Collections is actually implemented
  // right here:
  var methods = ['forEach', 'each', 'map', 'collect', 'reduce', 'foldl',
    'inject', 'reduceRight', 'foldr', 'find', 'detect', 'filter', 'select',
    'reject', 'every', 'all', 'some', 'any', 'include', 'contains', 'invoke',
    'max', 'min', 'toArray', 'size', 'first', 'head', 'take', 'initial', 'rest',
    'tail', 'drop', 'last', 'without', 'indexOf', 'shuffle', 'lastIndexOf',
    'isEmpty', 'chain'];

  // Mix in each Underscore method as a proxy to `Collection#models`.
  _.each(methods, function(method) {
    Collection.prototype[method] = function() {
      var args = slice.call(arguments);
      args.unshift(this.models);
      return _[method].apply(_, args);
    };
  });

  // Underscore methods that take a property name as an argument.
  var attributeMethods = ['groupBy', 'countBy', 'sortBy'];

  // Use attributes instead of properties.
  _.each(attributeMethods, function(method) {
    Collection.prototype[method] = function(value, context) {
      var iterator = _.isFunction(value) ? value : function(model) {
        return model.get(value);
      };
      return _[method](this.models, iterator, context);
    };
  });

  // Backbone.View
  // -------------

  // Backbone Views are almost more convention than they are actual code. A View
  // is simply a JavaScript object that represents a logical chunk of UI in the
  // DOM. This might be a single item, an entire list, a sidebar or panel, or
  // even the surrounding frame which wraps your whole app. Defining a chunk of
  // UI as a **View** allows you to define your DOM events declaratively, without
  // having to worry about render order ... and makes it easy for the view to
  // react to specific changes in the state of your models.

  // Creating a Backbone.View creates its initial element outside of the DOM,
  // if an existing element is not provided...
  var View = Backbone.View = function(options) {
    this.cid = _.uniqueId('view');
    this._configure(options || {});
    this._ensureElement();
    this.initialize.apply(this, arguments);
    this.delegateEvents();
  };

  // Cached regex to split keys for `delegate`.
  var delegateEventSplitter = /^(\S+)\s*(.*)$/;

  // List of view options to be merged as properties.
  var viewOptions = ['model', 'collection', 'el', 'id', 'attributes', 'className', 'tagName', 'events'];

  // Set up all inheritable **Backbone.View** properties and methods.
  _.extend(View.prototype, Events, {

    // The default `tagName` of a View's element is `"div"`.
    tagName: 'div',

    // jQuery delegate for element lookup, scoped to DOM elements within the
    // current view. This should be prefered to global lookups where possible.
    $: function(selector) {
      return this.$el.find(selector);
    },

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // **render** is the core function that your view should override, in order
    // to populate its element (`this.el`), with the appropriate HTML. The
    // convention is for **render** to always return `this`.
    render: function() {
      return this;
    },

    // Remove this view by taking the element out of the DOM, and removing any
    // applicable Backbone.Events listeners.
    remove: function() {
      this.$el.remove();
      this.stopListening();
      return this;
    },

    // Change the view's element (`this.el` property), including event
    // re-delegation.
    setElement: function(element, delegate) {
      if (this.$el) this.undelegateEvents();
      this.$el = element instanceof Backbone.$ ? element : Backbone.$(element);
      this.el = this.$el[0];
      if (delegate !== false) this.delegateEvents();
      return this;
    },

    // Set callbacks, where `this.events` is a hash of
    //
    // *{"event selector": "callback"}*
    //
    //     {
    //       'mousedown .title':  'edit',
    //       'click .button':     'save'
    //       'click .open':       function(e) { ... }
    //     }
    //
    // pairs. Callbacks will be bound to the view, with `this` set properly.
    // Uses event delegation for efficiency.
    // Omitting the selector binds the event to `this.el`.
    // This only works for delegate-able events: not `focus`, `blur`, and
    // not `change`, `submit`, and `reset` in Internet Explorer.
    delegateEvents: function(events) {
      if (!(events || (events = _.result(this, 'events')))) return this;
      this.undelegateEvents();
      for (var key in events) {
        var method = events[key];
        if (!_.isFunction(method)) method = this[events[key]];
        if (!method) continue;

        var match = key.match(delegateEventSplitter);
        var eventName = match[1], selector = match[2];
        method = _.bind(method, this);
        eventName += '.delegateEvents' + this.cid;
        if (selector === '') {
          this.$el.on(eventName, method);
        } else {
          this.$el.on(eventName, selector, method);
        }
      }
      return this;
    },

    // Clears all callbacks previously bound to the view with `delegateEvents`.
    // You usually don't need to use this, but may wish to if you have multiple
    // Backbone views attached to the same DOM element.
    undelegateEvents: function() {
      this.$el.off('.delegateEvents' + this.cid);
      return this;
    },

    // Performs the initial configuration of a View with a set of options.
    // Keys with special meaning *(e.g. model, collection, id, className)* are
    // attached directly to the view.  See `viewOptions` for an exhaustive
    // list.
    _configure: function(options) {
      if (this.options) options = _.extend({}, _.result(this, 'options'), options);
      _.extend(this, _.pick(options, viewOptions));
      this.options = options;
    },

    // Ensure that the View has a DOM element to render into.
    // If `this.el` is a string, pass it through `$()`, take the first
    // matching element, and re-assign it to `el`. Otherwise, create
    // an element from the `id`, `className` and `tagName` properties.
    _ensureElement: function() {
      if (!this.el) {
        var attrs = _.extend({}, _.result(this, 'attributes'));
        if (this.id) attrs.id = _.result(this, 'id');
        if (this.className) attrs['class'] = _.result(this, 'className');
        var $el = Backbone.$('<' + _.result(this, 'tagName') + '>').attr(attrs);
        this.setElement($el, false);
      } else {
        this.setElement(_.result(this, 'el'), false);
      }
    }

  });

  // Backbone.sync
  // -------------

  // Override this function to change the manner in which Backbone persists
  // models to the server. You will be passed the type of request, and the
  // model in question. By default, makes a RESTful Ajax request
  // to the model's `url()`. Some possible customizations could be:
  //
  // * Use `setTimeout` to batch rapid-fire updates into a single request.
  // * Send up the models as XML instead of JSON.
  // * Persist models via WebSockets instead of Ajax.
  //
  // Turn on `Backbone.emulateHTTP` in order to send `PUT` and `DELETE` requests
  // as `POST`, with a `_method` parameter containing the true HTTP method,
  // as well as all requests with the body as `application/x-www-form-urlencoded`
  // instead of `application/json` with the model in a param named `model`.
  // Useful when interfacing with server-side languages like **PHP** that make
  // it difficult to read the body of `PUT` requests.
  Backbone.sync = function(method, model, options) {
    var type = methodMap[method];

    // Default options, unless specified.
    _.defaults(options || (options = {}), {
      emulateHTTP: Backbone.emulateHTTP,
      emulateJSON: Backbone.emulateJSON
    });

    // Default JSON-request options.
    var params = {type: type, dataType: 'json'};

    // Ensure that we have a URL.
    if (!options.url) {
      params.url = _.result(model, 'url') || urlError();
    }

    // Ensure that we have the appropriate request data.
    if (options.data == null && model && (method === 'create' || method === 'update' || method === 'patch')) {
      params.contentType = 'application/json';
      params.data = JSON.stringify(options.attrs || model.toJSON(options));
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (options.emulateJSON) {
      params.contentType = 'application/x-www-form-urlencoded';
      params.data = params.data ? {model: params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (options.emulateHTTP && (type === 'PUT' || type === 'DELETE' || type === 'PATCH')) {
      params.type = 'POST';
      if (options.emulateJSON) params.data._method = type;
      var beforeSend = options.beforeSend;
      options.beforeSend = function(xhr) {
        xhr.setRequestHeader('X-HTTP-Method-Override', type);
        if (beforeSend) return beforeSend.apply(this, arguments);
      };
    }

    // Don't process data on a non-GET request.
    if (params.type !== 'GET' && !options.emulateJSON) {
      params.processData = false;
    }

    // If we're sending a `PATCH` request, and we're in an old Internet Explorer
    // that still has ActiveX enabled by default, override jQuery to use that
    // for XHR instead. Remove this line when jQuery supports `PATCH` on IE8.
    if (params.type === 'PATCH' && window.ActiveXObject &&
          !(window.external && window.external.msActiveXFilteringEnabled)) {
      params.xhr = function() {
        return new ActiveXObject("Microsoft.XMLHTTP");
      };
    }

    // Make the request, allowing the user to override any Ajax options.
    var xhr = options.xhr = Backbone.ajax(_.extend(params, options));
    model.trigger('request', model, xhr, options);
    return xhr;
  };

  // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
  var methodMap = {
    'create': 'POST',
    'update': 'PUT',
    'patch':  'PATCH',
    'delete': 'DELETE',
    'read':   'GET'
  };

  // Set the default implementation of `Backbone.ajax` to proxy through to `$`.
  // Override this if you'd like to use a different library.
  Backbone.ajax = function() {
    return Backbone.$.ajax.apply(Backbone.$, arguments);
  };

  // Backbone.Router
  // ---------------

  // Routers map faux-URLs to actions, and fire events when routes are
  // matched. Creating a new one sets its `routes` hash, if not set statically.
  var Router = Backbone.Router = function(options) {
    options || (options = {});
    if (options.routes) this.routes = options.routes;
    this._bindRoutes();
    this.initialize.apply(this, arguments);
  };

  // Cached regular expressions for matching named param parts and splatted
  // parts of route strings.
  var optionalParam = /\((.*?)\)/g;
  var namedParam    = /(\(\?)?:\w+/g;
  var splatParam    = /\*\w+/g;
  var escapeRegExp  = /[\-{}\[\]+?.,\\\^$|#\s]/g;

  // Set up all inheritable **Backbone.Router** properties and methods.
  _.extend(Router.prototype, Events, {

    // Initialize is an empty function by default. Override it with your own
    // initialization logic.
    initialize: function(){},

    // Manually bind a single named route to a callback. For example:
    //
    //     this.route('search/:query/p:num', 'search', function(query, num) {
    //       ...
    //     });
    //
    route: function(route, name, callback) {
      if (!_.isRegExp(route)) route = this._routeToRegExp(route);
      if (_.isFunction(name)) {
        callback = name;
        name = '';
      }
      if (!callback) callback = this[name];
      var router = this;
      Backbone.history.route(route, function(fragment) {
        var args = router._extractParameters(route, fragment);
        callback && callback.apply(router, args);
        router.trigger.apply(router, ['route:' + name].concat(args));
        router.trigger('route', name, args);
        Backbone.history.trigger('route', router, name, args);
      });
      return this;
    },

    // Simple proxy to `Backbone.history` to save a fragment into the history.
    navigate: function(fragment, options) {
      Backbone.history.navigate(fragment, options);
      return this;
    },

    // Bind all defined routes to `Backbone.history`. We have to reverse the
    // order of the routes here to support behavior where the most general
    // routes can be defined at the bottom of the route map.
    _bindRoutes: function() {
      if (!this.routes) return;
      this.routes = _.result(this, 'routes');
      var route, routes = _.keys(this.routes);
      while ((route = routes.pop()) != null) {
        this.route(route, this.routes[route]);
      }
    },

    // Convert a route string into a regular expression, suitable for matching
    // against the current location hash.
    _routeToRegExp: function(route) {
      route = route.replace(escapeRegExp, '\\$&')
                   .replace(optionalParam, '(?:$1)?')
                   .replace(namedParam, function(match, optional){
                     return optional ? match : '([^\/]+)';
                   })
                   .replace(splatParam, '(.*?)');
      return new RegExp('^' + route + '$');
    },

    // Given a route, and a URL fragment that it matches, return the array of
    // extracted decoded parameters. Empty or unmatched parameters will be
    // treated as `null` to normalize cross-browser behavior.
    _extractParameters: function(route, fragment) {
      var params = route.exec(fragment).slice(1);
      return _.map(params, function(param) {
        return param ? decodeURIComponent(param) : null;
      });
    }

  });

  // Backbone.History
  // ----------------

  // Handles cross-browser history management, based on either
  // [pushState](http://diveintohtml5.info/history.html) and real URLs, or
  // [onhashchange](https://developer.mozilla.org/en-US/docs/DOM/window.onhashchange)
  // and URL fragments. If the browser supports neither (old IE, natch),
  // falls back to polling.
  var History = Backbone.History = function() {
    this.handlers = [];
    _.bindAll(this, 'checkUrl');

    // Ensure that `History` can be used outside of the browser.
    if (typeof window !== 'undefined') {
      this.location = window.location;
      this.history = window.history;
    }
  };

  // Cached regex for stripping a leading hash/slash and trailing space.
  var routeStripper = /^[#\/]|\s+$/g;

  // Cached regex for stripping leading and trailing slashes.
  var rootStripper = /^\/+|\/+$/g;

  // Cached regex for detecting MSIE.
  var isExplorer = /msie [\w.]+/;

  // Cached regex for removing a trailing slash.
  var trailingSlash = /\/$/;

  // Has the history handling already been started?
  History.started = false;

  // Set up all inheritable **Backbone.History** properties and methods.
  _.extend(History.prototype, Events, {

    // The default interval to poll for hash changes, if necessary, is
    // twenty times a second.
    interval: 50,

    // Gets the true hash value. Cannot use location.hash directly due to bug
    // in Firefox where location.hash will always be decoded.
    getHash: function(window) {
      var match = (window || this).location.href.match(/#(.*)$/);
      return match ? match[1] : '';
    },

    // Get the cross-browser normalized URL fragment, either from the URL,
    // the hash, or the override.
    getFragment: function(fragment, forcePushState) {
      if (fragment == null) {
        if (this._hasPushState || !this._wantsHashChange || forcePushState) {
          fragment = this.location.pathname;
          var root = this.root.replace(trailingSlash, '');
          if (!fragment.indexOf(root)) fragment = fragment.substr(root.length);
        } else {
          fragment = this.getHash();
        }
      }
      return fragment.replace(routeStripper, '');
    },

    // Start the hash change handling, returning `true` if the current URL matches
    // an existing route, and `false` otherwise.
    start: function(options) {
      if (History.started) throw new Error("Backbone.history has already been started");
      History.started = true;

      // Figure out the initial configuration. Do we need an iframe?
      // Is pushState desired ... is it available?
      this.options          = _.extend({}, {root: '/'}, this.options, options);
      this.root             = this.options.root;
      this._wantsHashChange = this.options.hashChange !== false;
      this._wantsPushState  = !!this.options.pushState;
      this._hasPushState    = !!(this.options.pushState && this.history && this.history.pushState);
      var fragment          = this.getFragment();
      var docMode           = document.documentMode;
      var oldIE             = (isExplorer.exec(navigator.userAgent.toLowerCase()) && (!docMode || docMode <= 7));

      // Normalize root to always include a leading and trailing slash.
      this.root = ('/' + this.root + '/').replace(rootStripper, '/');

      if (oldIE && this._wantsHashChange) {
        this.iframe = Backbone.$('<iframe src="javascript:0" tabindex="-1" />').hide().appendTo('body')[0].contentWindow;
        this.navigate(fragment);
      }

      // Depending on whether we're using pushState or hashes, and whether
      // 'onhashchange' is supported, determine how we check the URL state.
      if (this._hasPushState) {
        Backbone.$(window).on('popstate', this.checkUrl);
      } else if (this._wantsHashChange && ('onhashchange' in window) && !oldIE) {
        Backbone.$(window).on('hashchange', this.checkUrl);
      } else if (this._wantsHashChange) {
        this._checkUrlInterval = setInterval(this.checkUrl, this.interval);
      }

      // Determine if we need to change the base url, for a pushState link
      // opened by a non-pushState browser.
      this.fragment = fragment;
      var loc = this.location;
      var atRoot = loc.pathname.replace(/[^\/]$/, '$&/') === this.root;

      // If we've started off with a route from a `pushState`-enabled browser,
      // but we're currently in a browser that doesn't support it...
      if (this._wantsHashChange && this._wantsPushState && !this._hasPushState && !atRoot) {
        this.fragment = this.getFragment(null, true);
        this.location.replace(this.root + this.location.search + '#' + this.fragment);
        // Return immediately as browser will do redirect to new url
        return true;

      // Or if we've started out with a hash-based route, but we're currently
      // in a browser where it could be `pushState`-based instead...
      } else if (this._wantsPushState && this._hasPushState && atRoot && loc.hash) {
        this.fragment = this.getHash().replace(routeStripper, '');
        this.history.replaceState({}, document.title, this.root + this.fragment + loc.search);
      }

      if (!this.options.silent) return this.loadUrl();
    },

    // Disable Backbone.history, perhaps temporarily. Not useful in a real app,
    // but possibly useful for unit testing Routers.
    stop: function() {
      Backbone.$(window).off('popstate', this.checkUrl).off('hashchange', this.checkUrl);
      clearInterval(this._checkUrlInterval);
      History.started = false;
    },

    // Add a route to be tested when the fragment changes. Routes added later
    // may override previous routes.
    route: function(route, callback) {
      this.handlers.unshift({route: route, callback: callback});
    },

    // Checks the current URL to see if it has changed, and if it has,
    // calls `loadUrl`, normalizing across the hidden iframe.
    checkUrl: function(e) {
      var current = this.getFragment();
      if (current === this.fragment && this.iframe) {
        current = this.getFragment(this.getHash(this.iframe));
      }
      if (current === this.fragment) return false;
      if (this.iframe) this.navigate(current);
      this.loadUrl() || this.loadUrl(this.getHash());
    },

    // Attempt to load the current URL fragment. If a route succeeds with a
    // match, returns `true`. If no defined routes matches the fragment,
    // returns `false`.
    loadUrl: function(fragmentOverride) {
      var fragment = this.fragment = this.getFragment(fragmentOverride);
      var matched = _.any(this.handlers, function(handler) {
        if (handler.route.test(fragment)) {
          handler.callback(fragment);
          return true;
        }
      });
      return matched;
    },

    // Save a fragment into the hash history, or replace the URL state if the
    // 'replace' option is passed. You are responsible for properly URL-encoding
    // the fragment in advance.
    //
    // The options object can contain `trigger: true` if you wish to have the
    // route callback be fired (not usually desirable), or `replace: true`, if
    // you wish to modify the current URL without adding an entry to the history.
    navigate: function(fragment, options) {
      if (!History.started) return false;
      if (!options || options === true) options = {trigger: options};
      fragment = this.getFragment(fragment || '');
      if (this.fragment === fragment) return;
      this.fragment = fragment;
      var url = this.root + fragment;

      // If pushState is available, we use it to set the fragment as a real URL.
      if (this._hasPushState) {
        this.history[options.replace ? 'replaceState' : 'pushState']({}, document.title, url);

      // If hash changes haven't been explicitly disabled, update the hash
      // fragment to store history.
      } else if (this._wantsHashChange) {
        this._updateHash(this.location, fragment, options.replace);
        if (this.iframe && (fragment !== this.getFragment(this.getHash(this.iframe)))) {
          // Opening and closing the iframe tricks IE7 and earlier to push a
          // history entry on hash-tag change.  When replace is true, we don't
          // want this.
          if(!options.replace) this.iframe.document.open().close();
          this._updateHash(this.iframe.location, fragment, options.replace);
        }

      // If you've told us that you explicitly don't want fallback hashchange-
      // based history, then `navigate` becomes a page refresh.
      } else {
        return this.location.assign(url);
      }
      if (options.trigger) this.loadUrl(fragment);
    },

    // Update the hash location, either replacing the current entry, or adding
    // a new one to the browser history.
    _updateHash: function(location, fragment, replace) {
      if (replace) {
        var href = location.href.replace(/(javascript:|#).*$/, '');
        location.replace(href + '#' + fragment);
      } else {
        // Some browsers require that `hash` contains a leading #.
        location.hash = '#' + fragment;
      }
    }

  });

  // Create the default Backbone.history.
  Backbone.history = new History;

  // Helpers
  // -------

  // Helper function to correctly set up the prototype chain, for subclasses.
  // Similar to `goog.inherits`, but uses a hash of prototype properties and
  // class properties to be extended.
  var extend = function(protoProps, staticProps) {
    var parent = this;
    var child;

    // The constructor function for the new subclass is either defined by you
    // (the "constructor" property in your `extend` definition), or defaulted
    // by us to simply call the parent's constructor.
    if (protoProps && _.has(protoProps, 'constructor')) {
      child = protoProps.constructor;
    } else {
      child = function(){ return parent.apply(this, arguments); };
    }

    // Add static properties to the constructor function, if supplied.
    _.extend(child, parent, staticProps);

    // Set the prototype chain to inherit from `parent`, without calling
    // `parent`'s constructor function.
    var Surrogate = function(){ this.constructor = child; };
    Surrogate.prototype = parent.prototype;
    child.prototype = new Surrogate;

    // Add prototype properties (instance properties) to the subclass,
    // if supplied.
    if (protoProps) _.extend(child.prototype, protoProps);

    // Set a convenience property in case the parent's prototype is needed
    // later.
    child.__super__ = parent.prototype;

    return child;
  };

  // Set up inheritance for the model, collection, router, view and history.
  Model.extend = Collection.extend = Router.extend = View.extend = History.extend = extend;

  // Throw an error when a URL is needed, and none is supplied.
  var urlError = function() {
    throw new Error('A "url" property or function must be specified');
  };

  // Wrap an optional error callback with a fallback error event.
  var wrapError = function (model, options) {
    var error = options.error;
    options.error = function(resp) {
      if (error) error(model, resp, options);
      model.trigger('error', model, resp, options);
    };
  };

}).call(this);

var process = process || {env: {NODE_ENV: "development"}};
Backbone.emulateHTTP = true;

Backbone.sync = function(method, model, options) {
    // Map from CRUD to HTTP for our default `Backbone.sync` implementation.
    var methodMap = {
        'create': 'POST',
        'update': 'PUT',
        'delete': 'DELETE',
        'read'  : 'GET'
    };

    // Throw an error when a URL is needed, and none is supplied.
    var urlError = function() {
        throw new Error('A "url" property or function must be specified');
    };

    var getUrl = function(object) {
        if (!(object && object.url)) return null;
        return _.isFunction(object.url) ? object.url() : object.url;
    };

    var type = methodMap[method];

    // Default JSON-request options.
    var params = _.extend({
        type:         type,
        dataType:     'json',
        processData:  false
    }, options);

    // Ensure that we have a URL.
    if (!params.url) {
        params.url = getUrl(model) || urlError();
    }

    // This code is an 'enhancement' to Backbone where we will append query parameters on reads if a fetchCriteria
    // object and/or the pagingCriteria object exists.
    if (method === "read" && model) {
        var queryParams = [];

        if (model.fetchCriteria) {
            var p = _.map(model.fetchCriteria( options ), function(value, key) { return key + "=" + value; });
            _.each(p, function(it) { queryParams.push(it); });
        }

        if (model.paginate && model.pagingCriteria) {
            var p = _.map(model.pagingCriteria( options ), function(value, key) { return key + "=" + value; });
            _.each(p, function(it) { queryParams.push(it); });
        }

        params.url = params.url + (params.url.indexOf("?") > 0 ? "&" : "?") + queryParams.join("&");
    }

    // Ensure that we have the appropriate request data.
    if (!params.data && model && (method == 'create' || method == 'update')) {
        params.contentType = 'application/json';
        params.data = JSON.stringify(model.toJSON());
    }

    // For older servers, emulate JSON by encoding the request into an HTML-form.
    if (Backbone.emulateJSON) {
        params.contentType = 'application/x-www-form-urlencoded';
        params.processData = true;
        params.data = params.data ? {model : params.data} : {};
    }

    // For older servers, emulate HTTP by mimicking the HTTP method with `_method`
    // And an `X-HTTP-Method-Override` header.
    if (Backbone.emulateHTTP) {
        if (type === 'PUT' || type === 'DELETE') {
            if (Backbone.emulateJSON) params.data._method = type;
            params.type = 'POST';
            params.beforeSend = function(xhr) {
                xhr.setRequestHeader('X-HTTP-Method-Override', type);
            };
        }
    }

    // Clear out all messages prior to syncing.
    if (model) {
        model.each(function(m) {
            if (m.has( "messages" )) {
                m.unset( "messages" );
            }
        });
    }

    // Make the request.

    if (model && model.ajaxCallback) {
        // Use the ajaxCallback
        return model.ajaxCallback( params );
    }
    else {
        return $.ajax(params);
    }
};

_.extend(Backbone.Model.prototype, {
    isDirty: function() {
        return this._dirty;
    },
    resetDirty: function() {
        this._dirty = false;
    },
    makeDirty: function() {
        this._dirty = true;
    },
    _dirty: false
});

// TODO This was done to support Backbone.js 1.0's change to non-reset fetch().
// We need this behavior, currently, to support our Model.isDirty() functionality.

Backbone.Collection.prototype.fetch = _.wrap( Backbone.Collection.prototype.fetch, function( original, options ) {
    options = options || { };
    options.reset = options.reset || true;

    original.call( this, options );
});

// Extend Backbone.Collection to include 'save' which will inspect all dirty models and attempt to save them.
_.extend(Backbone.Collection.prototype, {
    cid: undefined,
    getCid: function () {
        if ( _.isUndefined( this.cid ) )
            this.cid = _.uniqueId( 'c' );
        return this.cid;
    },
    save: function(options) {
        options || (options = {});

        // Prior to talking to the service we are going to clear all messages and let the response tell us what
        // errors still exist.
        this.each( function( model ) {
            if (model.has( "messages" )) {
                model.unset( "messages", {silent: true} );
            }
        });

        if (this.batch) {
            var collection = this;

            var success = function( batch, textStatus, jqXHR ) {
                // Non-fatal server errors return a HTTP 200 with { success: false, ... }, not a HTTP 500
                if ( _.isBoolean( batch.success ) && !batch.success ) {
                    if ( _.isFunction( options.error ) ) options.error.call( this, collection, batch, jqXHR );
                    return;
                }

                // The model that comes down is the batch that was sent up.
                // Loop through the model and update the collection.
                _.each((batch.data.create || []).concat(batch.data.update || []), function(updatedModel) {
                    var model = collection.get(updatedModel.id);
                    model.set(model.parse(updatedModel), options);

                    if (model.get( "messages")[0].type == "success" ) {
                        //model.set( { messages: [{ message:"save successful", type:"success"}] } );
                        model.resetDirty();
                    }
                });

                _.each(batch.data.destroy, function(modelToDelete) {
                    var model = _.select(this.deletedModels, function(deletedModel) {
                        return deletedModel.id == modelToDelete.id;
                    });

                    if (model) {
                        collection.remove(model, options);
                    }
                });

                if (options.success) options.success( collection, batch, jqXHR );
            };

            // This is the HTTP 500 response error handler. we pass through the success callback to get single access to the
            // error callback which is also invoked for HTTP 200 { success: false } responses.
            var error = function ( jqXHR, textStatus, errorThrown ) {
                var response = JSON.parse( jqXHR.responseText );

                success.call( this, response, textStatus, jqXHR );
            };

            var batchModel = createBatchModel(this);

            var getBatchUrl = function(object) {
                if (!(object && object.url)) return null;
                var url = _.isFunction(object.url) ? object.url() : object.url;

                return url + "/batch";
            };


            // Setup the options to send to sync.  Note that the url is using the var getUrl from Backbone.
            saveCollectionOptions = {
                success: success,
                error: error,
                data: JSON.stringify(batchModel),
                url: getBatchUrl(this),
                contentType: 'application/json'
            };

            (this.sync || Backbone.sync)("create", null, saveCollectionOptions);
        }
        else {
            $.each(this.models, function(index, model) {
                if (model.isDirty()) {
                    model.save(null, {
                        success: function(model, response) {
                            model.resetDirty();

                            if (options.success) options.success(model);
                        },
                        error: function(model, response) {
                            var responseJson = $.parseJSON(response.responseText);
                            model.set({errors: responseJson.errors});

                            if (options.error) options.error(model);
                        }
                    });
                }
            });

            // TODO:  Do we need specific destory based success and error handlers?
            // TODO:  Determine what model is returned for a destroyed model.  All we send up is the id.
            if (this.containsMarkedAsDeleted()) {
                $.each(this.deletedModels, function(index, model) {
                    model.destroy({
                        success: function(model, response) {

                            // Remove from deletedModels
                            this.deletedModels = _.reject(this.deletedModels, function(markedAsDeletedModel) {
                                return markedAsDeletedModel.id === model.id;
                            });

                            if (options.success) options.success(model);
                        },
                        error: function(model, response) {
                            var responseJson = $.parseJSON(response.responseText);
                            model.set({errors: responseJson.errors});

                            if (options.error) options.error(model);
                        }
                    });
                });
            }
        }

        return this;
    },
    markAsDeleted: function(model) {
        this.remove(model, {silent:true});

        if (this.deletedModels === null) {
            deletedModels = [];
        }

        this.deletedModels.push(model);
    },
    deletedModels: null,
    ajaxManager: null,
    containsMarkedAsDeleted: function() {
        return (this.deletedModels && this.deletedModels.length);
    },
    batch : false,
    isDirty: function() {
        return _.any(this.models, function(model) {
            return model.isDirty()
        }) || this.deletedModels;
    },
    paginate:      false,
    page:          1,
    pageMaxSize:   50,
    pageOffset:    0,
    sortColumn:    null,
    sortColumnIdx: null,
    sortDirection: "asc",
    totalCount:    0,
    pagingCriteria: function() {
        var self = this,
            offset = self.pageMaxSize * (self.page - 1);

        if ( !self.paginate ) {
            return { };
        }

        if ( offset > self.totalCount ) {
            self.page = Math.ceil( self.totalCount / self.pageMaxSize );
        }

        return {
            pageOffset:    self.pageMaxSize * (self.page - 1),
            pageMaxSize:   self.pageMaxSize,
            sortColumn:    self.sortColumn,
            sortDirection: self.sortDirection
        };
    },
    pageInfo: function() {
        var self = this;
        var ceil = Math.ceil(self.totalCount / self.pageMaxSize);
        var pageRanges = [];

        for (var x = 1; x <= ceil; x++) {
            pageRanges.push(self.pageMaxSize * x);
        }

        var info = {
            totalCount:  self.totalCount,
            pageMaxSize: self.pageMaxSize,
            pages:       ceil,
            page:        self.page,
            prev:        self.page > 1    ? self.page - 1 : false,
            next:        self.page < ceil ? self.page + 1 : false,
            pageRanges: pageRanges
        };

        var max = Math.min(self.totalCount, self.page * self.pageMaxSize);

        if (self.totalCount == self.pages * self.pageMaxSize) {
            max = self.totalCount;
        }

        info.range = [(self.page - 1) * self.pageMaxSize + 1, max];
        return info;
    },
    firstPage: function() {
        if (this.page != 1) {
            this.page = 1;

            return this.fetch();
        }
        return false;
    },
    lastPage: function() {
        var info = this.pageInfo();

        if (this.page != info.pages) {
            this.page = info.pages;

            return this.fetch();
        }
        return false;
    },
    nextPage: function() {
        if (!this.pageInfo().next) {
            return false;
        }
        this.page = this.page + 1;
        return this.fetch();
    },
    previousPage: function() {
        if (!this.pageInfo().prev) {
            return false;
        }
        this.page = this.page - 1;
        return this.fetch();
    },
    goToPage: function(page) {
        if ( typeof(page) != 'number' || isNaN( page )) {
            return false;
        }

        var info = this.pageInfo();

        if (info.page == page) {
            return false;
        }

        if (page > info.pages || page < 1) {
            return false;
        }

        this.page = page;
        return this.fetch();
    },
    setPageSize: function(size) {
        if (typeof(size) == 'number') {
            this.pageMaxSize = size;
            return this.fetch();
        }
        return false;
    }
});

function createBatchModel(model) {
    if (model.isDirty()) {
        var changedModels = _.select(model.models, function(model) {
            return model.isDirty();
        });

        var createModels = _.select(changedModels, function(model) {
            return model.isNew();
        });

        var updateModels = _.select(changedModels, function(model) {
            return !model.isNew();
        });

        var deletedIdsList = [];
        if (model.deletedModels) {
            deletedIdsList = _.pluck(model.deletedModels, id);
        }

        return { create: createModels || [], update: updateModels || [], destroy: deletedIdsList };
    }
    else {
        return { create: [], update: [], destroy: [] };
    }
}

function createFetchOptions( collection, options ) {

    var getUrl = function(object) {
        if (!(object && object.url)) return null;
        return _.isFunction(object.url) ? object.url() : object.url;
    };

    var returnUrl = getUrl( collection );

    if (options.params) {
        // Loop through the params and add query parameters to the url
        _.each(options.params,
            function(value, key) {
                if (returnUrl.indexOf("?") > 0) {
                    returnUrl = returnUrl + "&";
                }
                else {
                    returnUrl = returnUrl + "?";
                }

                returnUrl = returnUrl + key + "=" + value;
            }
        );

        options.url = returnUrl;
    }

    return options;
}

// Add validation logic when models change.  We do not use the 'validate' function on the model due to some lack of control when it is called.
// For example, validate is called on the model when the model is fetched/added to the collection.  This means we will validate as we prepare the model
// which has the unforeseen consquence that the model we were validating does not exist in the collection yet.  We want to avoid that.
function registerModelValidation( collection, validationFunction ) {
    collection.bind( "change", function( model ) {
        var valid = validationFunction( model, model.changedAttributes());

        if (_.isUndefined( valid )) {
            valid = true;
        }
        else {
            // Something was returned which means that the model did not validate.
            valid = false;
        }

        if (!valid) {
            log.debug( "model did not validate on change", model, model.changedAttributes());
        }
    });

    collection.bind( "reset", function( models ) {
        models.each( function( m ) {

            var valid = validationFunction( m, m.attributes);

            if (_.isUndefined( valid )) {
                valid = true;
            }
            else {
                // Something was returned which means that the model did not validate.
                valid = false;
            }

            if (!valid) {
                log.debug( "model did not validate on reset", m, m.attributes);
            }
        });
    });
}

var process = process || {env: {NODE_ENV: "development"}};
// Backbone.ModelBinding v0.5.0
//
// Copyright (C)2011 Derick Bailey, Muted Solutions, LLC
// Distributed Under MIT Liscene
//
// Documentation and Full Licence Availabe at:
// http://github.com/derickbailey/backbone.modelbinding
//
// ----------------------------
// Backbone.ModelBinding
// ----------------------------
;(function(root){

var modelbinding = (function(Backbone, _, $) {
  var modelBinding = {
    version: "0.5.0",

    bind: function(view, options){
      view.modelBinder = new ModelBinder(view, options);
      view.modelBinder.bind();
    },

    unbind: function(view){
      if (view.modelBinder){
        view.modelBinder.unbind()
      }
    }
  };

  var ModelBinder = function(view, options){
    this.config = new modelBinding.Configuration(options);
    this.modelBindings = [];
    this.elementBindings = [];

    this.bind = function(){
      var conventions = modelBinding.Conventions;
      for (var conventionName in conventions){
        if (conventions.hasOwnProperty(conventionName)){
          var conventionElement = conventions[conventionName];
          var handler = conventionElement.handler;
          var conventionSelector = conventionElement.selector;
          handler.bind.call(this, conventionSelector, view, view.model, this.config);
        }
      }
    };

    this.unbind = function(){
      // unbind the html element bindings
      _.each(this.elementBindings, function(binding){
        binding.element.unbind(binding.eventName, binding.callback);
      });

      // unbind the model bindings
      _.each(this.modelBindings, function(binding){
        binding.model.unbind(binding.eventName, binding.callback);
      });
    };

    this.registerModelBinding = function(model, attrName, callback){
      // bind the model changes to the form elements
      var eventName = "change:" + attrName;
      model.bind(eventName, callback);
      this.modelBindings.push({model: model, eventName: eventName, callback: callback});
    };

    this.registerDataBinding = function(model, eventName, callback){
      // bind the model changes to the elements
      
      model.bind(eventName, callback);
      this.modelBindings.push({model: model, eventName: eventName, callback: callback});
    };

    this.registerElementBinding = function(element, callback){
      // bind the form changes to the model
      element.bind("change", callback);
      this.elementBindings.push({element: element, eventName: "change", callback: callback});
    };
  };

  // ----------------------------
  // Model Binding Configuration
  // ----------------------------
  modelBinding.Configuration = function(options){
    this.bindingAttrConfig = {};

    _.extend(this.bindingAttrConfig, 
      modelBinding.Configuration.bindindAttrConfig,
      options
    );

    if (this.bindingAttrConfig.all){
      var attr = this.bindingAttrConfig.all;
      delete this.bindingAttrConfig.all;
      for (var inputType in this.bindingAttrConfig){
        if (this.bindingAttrConfig.hasOwnProperty(inputType)){
          this.bindingAttrConfig[inputType] = attr;
        }
      }
    }

    this.getBindingAttr = function(type){ 
      return this.bindingAttrConfig[type]; 
    };

    this.getBindingValue = function(element, type){
      var bindingAttr = this.getBindingAttr(type);
      return element.attr(bindingAttr);
    };

  };

  modelBinding.Configuration.bindindAttrConfig = {
    text: "id",
    textarea: "id",
    password: "id",
    radio: "name",
    checkbox: "id",
    select: "id",
    number: "id",
    range: "id",
    tel: "id",
    search: "id",
    url: "id",
    email: "id"
  };

  modelBinding.Configuration.store = function(){
    modelBinding.Configuration.originalConfig = _.clone(modelBinding.Configuration.bindindAttrConfig);
  };

  modelBinding.Configuration.restore = function(){
    modelBinding.Configuration.bindindAttrConfig = modelBinding.Configuration.originalConfig;
  };

  modelBinding.Configuration.configureBindingAttributes = function(options){
    if (options.all){
      this.configureAllBindingAttributes(options.all);
      delete options.all;
    }
    _.extend(modelBinding.Configuration.bindindAttrConfig, options);
  };

  modelBinding.Configuration.configureAllBindingAttributes = function(attribute){
    var config = modelBinding.Configuration.bindindAttrConfig;
    config.text = attribute;
    config.textarea = attribute;
    config.password = attribute;
    config.radio = attribute;
    config.checkbox = attribute;
    config.select = attribute;
    config.number = attribute;
    config.range = attribute;
    config.tel = attribute;
    config.search = attribute;
    config.url = attribute;
    config.email = attribute;
  };

  // ----------------------------
  // Text, Textarea, and Password Bi-Directional Binding Methods
  // ----------------------------
  var StandardBinding = (function(Backbone){
    var methods = {};

    var _getElementType = function(element) {
      var type = element[0].tagName.toLowerCase();
      if (type == "input"){
        type = element.attr("type");
        if (type == undefined || type == ''){
          type = 'text';
        }
      }
      return type;
    };

    methods.bind = function(selector, view, model, config){
      var modelBinder = this;

      view.$(selector).each(function(index){
        var element = view.$(this);
        var elementType = _getElementType(element);
        var attribute_name = config.getBindingValue(element, elementType);

        var modelChange = function(changed_model, val){ element.val(val); };

        var setModelValue = function(attr_name, value){
          var data = {};
          data[attr_name] = value;
          model.set(data);
        };

        var elementChange = function(ev){
          setModelValue(attribute_name, view.$(ev.target).val());
        };

        modelBinder.registerModelBinding(model, attribute_name, modelChange);
        modelBinder.registerElementBinding(element, elementChange);

        // set the default value on the form, from the model
        var attr_value = model.get(attribute_name);
        if (typeof attr_value !== "undefined" && attr_value !== null) {
          element.val(attr_value);
        } else {
          var elVal = element.val();
          if (elVal){
            setModelValue(attribute_name, elVal);
          }
        }
      });
    };

    return methods;
  })(Backbone);

  // ----------------------------
  // Select Box Bi-Directional Binding Methods
  // ----------------------------
  var SelectBoxBinding = (function(Backbone){
    var methods = {};

    methods.bind = function(selector, view, model, config){
      var modelBinder = this;

      view.$(selector).each(function(index){
        var element = view.$(this);
        var attribute_name = config.getBindingValue(element, 'select');

        var modelChange = function(changed_model, val){ element.val(val); };

        var setModelValue = function(attr, val, text){
          var data = {};
          data[attr] = val;
          data[attr + "_text"] = text;
          model.set(data);
        };

        var elementChange = function(ev){
          var targetEl = view.$(ev.target);
          var value = targetEl.val();
          var text = targetEl.find(":selected").text();
          setModelValue(attribute_name, value, text);
        };

        modelBinder.registerModelBinding(model, attribute_name, modelChange);
        modelBinder.registerElementBinding(element, elementChange);

        // set the default value on the form, from the model
        var attr_value = model.get(attribute_name);
        if (typeof attr_value !== "undefined" && attr_value !== null) {
          element.val(attr_value);
        } 

        // set the model to the form's value if there is no model value
        if (element.val() != attr_value) {
          var value = element.val();
          var text = element.find(":selected").text();
          setModelValue(attribute_name, value, text);
        }
      });
    };

    return methods;
  })(Backbone);

  // ----------------------------
  // Radio Button Group Bi-Directional Binding Methods
  // ----------------------------
  var RadioGroupBinding = (function(Backbone){
    var methods = {};

    methods.bind = function(selector, view, model, config){
      var modelBinder = this;

      var foundElements = [];
      view.$(selector).each(function(index){
        var element = view.$(this);

        var group_name = config.getBindingValue(element, 'radio');
        if (!foundElements[group_name]) {
          foundElements[group_name] = true;
          var bindingAttr = config.getBindingAttr('radio');

          var modelChange = function(model, val){
            var value_selector = "input[type=radio][" + bindingAttr + "='" + group_name + "'][value='" + val + "']";
            view.$(value_selector).attr("checked", "checked");
          };
          modelBinder.registerModelBinding(model, group_name, modelChange);

          var setModelValue = function(attr, val){
            var data = {};
            data[attr] = val;
            model.set(data);
          };

          // bind the form changes to the model
          var elementChange = function(ev){
            var element = view.$(ev.currentTarget);
            if (element.is(":checked")){
              setModelValue(group_name, element.val());
            }
          };

          var group_selector = "input[type=radio][" + bindingAttr + "='" + group_name + "']";
          view.$(group_selector).each(function(){
            var groupEl = $(this);
            modelBinder.registerElementBinding(groupEl, elementChange);
          });

          var attr_value = model.get(group_name);
          if (typeof attr_value !== "undefined" && attr_value !== null) {
            // set the default value on the form, from the model
            var value_selector = "input[type=radio][" + bindingAttr + "='" + group_name + "'][value='" + attr_value + "']";
            view.$(value_selector).attr("checked", "checked");
          } else {
            // set the model to the currently selected radio button
            var value_selector = "input[type=radio][" + bindingAttr + "='" + group_name + "']:checked";
            var value = view.$(value_selector).val();
            setModelValue(group_name, value);
          }
        }
      });
    };

    return methods;
  })(Backbone);

  // ----------------------------
  // Checkbox Bi-Directional Binding Methods
  // ----------------------------
  var CheckboxBinding = (function(Backbone){
    var methods = {};

    methods.bind = function(selector, view, model, config){
      var modelBinder = this;

      view.$(selector).each(function(index){
        var element = view.$(this);
        var bindingAttr = config.getBindingAttr('checkbox');
        var attribute_name = config.getBindingValue(element, 'checkbox');

        var modelChange = function(model, val){
          if (val){
            element.attr("checked", "checked");
          }
          else{
            element.removeAttr("checked");
          }
        };

        var setModelValue = function(attr_name, value){
          var data = {};
          data[attr_name] = value;
          model.set(data);
        };

        var elementChange = function(ev){
          var changedElement = view.$(ev.target);
          var checked = changedElement.is(":checked")? true : false;
          setModelValue(attribute_name, checked);
        };

        modelBinder.registerModelBinding(model, attribute_name, modelChange);
        modelBinder.registerElementBinding(element, elementChange);

        var attr_exists = model.attributes.hasOwnProperty(attribute_name);
        if (attr_exists) {
          // set the default value on the form, from the model
          var attr_value = model.get(attribute_name);
          if (typeof attr_value !== "undefined" && attr_value !== null && attr_value != false) {
            element.attr("checked", "checked");
          }
          else{
            element.removeAttr("checked");
          }
        } else {
          // bind the form's value to the model
          var checked = element.is(":checked")? true : false;
          setModelValue(attribute_name, checked);
        }
      });
    };

    return methods;
  })(Backbone);

  // ----------------------------
  // Data-Bind Binding Methods
  // ----------------------------
  var DataBindBinding = (function(Backbone, _, $){
    var dataBindSubstConfig = {
      "default": ""
    };

    modelBinding.Configuration.dataBindSubst = function(config){
      this.storeDataBindSubstConfig();
      _.extend(dataBindSubstConfig, config);
    };

    modelBinding.Configuration.storeDataBindSubstConfig = function(){
      modelBinding.Configuration._dataBindSubstConfig = _.clone(dataBindSubstConfig);
    };

    modelBinding.Configuration.restoreDataBindSubstConfig = function(){
      if (modelBinding.Configuration._dataBindSubstConfig){
        dataBindSubstConfig = modelBinding.Configuration._dataBindSubstConfig;
        delete modelBinding.Configuration._dataBindSubstConfig;
      }
    };

    modelBinding.Configuration.getDataBindSubst = function(elementType, value){
      var returnValue = value;
      if (value === undefined){
        if (dataBindSubstConfig.hasOwnProperty(elementType)){
          returnValue = dataBindSubstConfig[elementType];
        } else {
          returnValue = dataBindSubstConfig["default"];
        }
      }
      return returnValue;
    };

    var setOnElement = function(element, attr, val){
      var valBefore = val;
      val = modelBinding.Configuration.getDataBindSubst(attr, val);
      switch(attr){
        case "html":
          element.html(val);
          break;
        case "text":
          element.text(val);
          break;
        case "enabled":
          element.attr("disabled", !val);
          break;
        case "displayed":
          element[val? "show" : "hide"]();
          break;
        case "hidden":
          element[val? "hide" : "show"]();
          break;
        default:
          element.attr(attr, val);
      }
    };

    var splitBindingAttr = function(element)
    {
      var dataBindConfigList = [];
      var dataBindAttributeName = modelBinding.Conventions.databind.selector.replace(/^(.*\[)([^\]]*)(].*)/g, '$2');
      var databindList = element.attr(dataBindAttributeName).split(";");
      _.each(databindList, function(attrbind){
        var databind = $.trim(attrbind).split(" ");

        // make the default special case "text" if none specified
        if( databind.length == 1 ) databind.unshift("text");

        dataBindConfigList.push({
          elementAttr: databind[0],
          modelAttr: databind[1]
        });
      });
      return dataBindConfigList;
    };

    var getEventConfiguration = function(element, databind){
      var config = {};
      var eventName = databind.modelAttr;
      var index = eventName.indexOf("event:");

      if (index == 0) {
        // "event:foo" binding
        config.name = eventName.substr(6);
        config.callback = function(val){
          setOnElement(element, databind.elementAttr, val);
        };
      } else {
        // standard model attribute binding
        config.name = "change:" + eventName;
        config.callback = function(model, val){
          setOnElement(element, databind.elementAttr, val);
        };
      }

      return config;
    }
    var methods = {};

    methods.bind = function(selector, view, model, config){
      var modelBinder = this;

      view.$(selector).each(function(index){
        var element = view.$(this);
        var databindList = splitBindingAttr(element);

        _.each(databindList, function(databind){
          var eventConfig = getEventConfiguration(element, databind);
          modelBinder.registerDataBinding(model, eventConfig.name, eventConfig.callback);
          // set default on data-bind element
          setOnElement(element, databind.elementAttr, model.get(databind.modelAttr));
        });

      });
    };

    return methods;
  })(Backbone, _, $);


  // ----------------------------
  // Binding Conventions
  // ----------------------------
  modelBinding.Conventions = {
    text: {selector: "input:text", handler: StandardBinding},
    textarea: {selector: "textarea", handler: StandardBinding},
    password: {selector: "input:password", handler: StandardBinding},
    radio: {selector: "input:radio", handler: RadioGroupBinding},
    checkbox: {selector: "input:checkbox", handler: CheckboxBinding},
    select: {selector: "select", handler: SelectBoxBinding},
    databind: { selector: "*[data-bind]", handler: DataBindBinding},
    // HTML5 input
    number: {selector: "input[type=number]", handler: StandardBinding},
    range: {selector: "input[type=range]", handler: StandardBinding},
    tel: {selector: "input[type=tel]", handler: StandardBinding},
    search: {selector: "input[type=search]", handler: StandardBinding},
    url: {selector: "input[type=url]", handler: StandardBinding},
    email: {selector: "input[type=email]", handler: StandardBinding}
  };

  return modelBinding;
});

// Backbone.Modelbinding AMD wrapper with namespace fallback
if (typeof define === 'function' && define.amd) {
    // AMD support
    define([
      'backbone',    // use Backbone 0.5.3-optamd3 branch (https://github.com/jrburke/backbone/tree/optamd3)
      'underscore',  // AMD supported
      'jquery'       // AMD supported
      ], function (Backbone, _, jQuery) {
        return modelbinding(Backbone, _, jQuery);
      });
} else {
    // No AMD, use Backbone namespace
    root.Backbone = Backbone || {};
    root.Backbone.ModelBinding = modelbinding(Backbone, _, jQuery);
}

})(this);

var process = process || {env: {NODE_ENV: "development"}};

(function ($, _) {
    /**
     * @el jQuery object the element to associate with this view
     * @collection Backbone.Collection the collection to associate with this view
     * @editableColumns array list of columns to make editable
     * @settings object any custom grid settings
     */
    Backbone.DataTablesViewInternal = Backbone.View.extend({
        styles: {
            hover:              "row_hover",
            selected:           "row_selected",
            sortIconNorthSouth: "ui-icon-carat-2-n-s",
            sortIconNorth:      "ui-icon-triangle-1-n",
            sortIconSouth:      "ui-icon-triangle-1-s"
        },
        table: undefined,
        defaultPageLengths: [50, 100, 250, 500],
        initialize: function () {
            _.bindAll(this, 'render', 'reload', 'success', 'error', 'generateDataIdentifier', 'determinePageLengths', 'getSelectedRows', 'getColumnSelector', 'notificationAdded', 'notificationRemoved', 'createRowCallback', 'updateData', 'preparePagingSelect', 'createDataTablesJSON', 'replaceDataTablesSortListeners', 'sortTable');

            if (typeof(this.collection) != 'undefined') {
                this.collection.bind( "reset", this.render );
                this.collection.bind( "change", function(model) {
                    model.makeDirty();
                });
            }

            if (typeof(notifications) != 'undefined' && typeof(notifications.bind) == 'function') {
                notifications.bind('add',    this.notificationAdded );
                notifications.bind('remove', this.notificationRemoved );
            }

            if ( !_.isUndefined( this.options.defaultPageLengths ) && _.isArray( this.options.defaultPageLengths ) )
                this.defaultPageLengths = this.options.defaultPageLengths;
        },
        render: function() {
            var view = this;

            if (_.isFunction(this.options.beforeRender))
                this.options.beforeRender.call(this);

            if (!_.isNull(this.table) && !_.isUndefined(this.table)) {
                this.table.fnDestroy();
                this.$el.data('placeholder',''); // prevents an undefined error on IE.
            }

            if (_.isNull(this.collection.sortColumn)) {
                var column = _.first(this.options.aoColumnDefs);

                this.collection.sortColumn = column.mDataProp
            }

            if (_.isNull(this.collection.sortColumnIdx)) {
                for (var x = 0; x < this.options.aoColumnDefs.length; x++) {
                    if (this.options.aoColumnDefs[x].mDataProp == this.collection.sortColumn) {
                        this.collection.sortColumnIdx = x;
                        break;
                    }
                }
            }

            var blacklist = ['el', 'collection', 'editableColumns'];

            var settings = _.pick(this.options, _.without(_.keys(this.options), blacklist));

            settings = _.defaults(settings, {
                target:               $(this.el),
                bLengthChange:        this.collection.paginate,
                bPaginate:            this.collection.paginate,
                aaSorting:            [ [this.collection.sortColumnIdx, this.collection.sortDirection] ],
                aoBackboneCollection: this.collection,
                oBackboneView:        this,
                editableColumns:      this.options.editableColumns || [],
                iDisplayLength:       this.collection.pageInfo().pageMaxSize
            });

            this.table = this.createDataTable( settings );

            // set sort icon
            var columnDef = _.find( this.options.aoColumnDefs, function ( it ) { return it.mDataProp == view.collection.sortColumn; });
            this.$el.find( "th .DataTables_sort_icon" ).removeClass( this.styles.sortIconNorth + " " + this.styles.sortIconSouth ).addClass( this.styles.sortIconNorthSouth );
            this.$el.find( "th." + columnDef.sClass + " .DataTables_sort_icon" ).removeClass( view.styles.sortIconNorthSouth ).addClass( view.collection.sortDirection == "asc" ? view.styles.sortIconSouth : view.styles.sortIconNorth );

            if ( _.isFunction(this.options.afterRender ) )
                this.options.afterRender.call( this );
        },
        success: function(model, resp) {
            if (typeof(this.options.success) == "function")
                this.options.success.call(this, model, resp);
        },
        error: function(model, resp) {
            if (typeof(this.options.error) == "function")
                this.options.error.call(this, model, resp);
        },
        save: function() {
            if (typeof(this.collection) != 'undefined' && this.collection.isDirty()) {
                this.collection.save({ success: this.success, error: this.error });
            }
        },
        reload: function() {
            this.table.fnClearTable(0);
            this.table.fnAddData( this.createDataTablesJSON() );
        },
        generateDataIdentifier: function() {
            return $(this.el).attr("id") || "dataTable";
        },
        determinePageLengths: function ( settings ) {
            var size = this.collection.pageInfo().pageMaxSize;

            if (!_.find(this.defaultPageLengths, function (it) { return it == size })) {
                var arr = this.defaultPageLengths.concat(size);
                this.defaultPageLengths = _.sortBy(arr, function (it) { return it; });
            }

            return this.defaultPageLengths;
        },
        updateData: function (property, value, settings, el) {

            var data = this.table.fnGetData(el.parentNode);

            if (value === "")
                value = null;

            var model = this.collection.get(data.id);

            if (model) {
                var map = { };
                map[property] = value;

                if (model.get(property) != value)
                    model.set(map);
            }

            return value;
        },
        createRowCallback: function ( settings ) {
            var view = this;
            var editableColumns = settings.editableColumns || [];
            var fnRowCallback   = settings.fnRowCallback;

            var getEditableTypeDef = function ( column, row ) {
                return _.extend( {}, column, {
                    onblur: function(val, settings) {
                        $('form', this).submit();
                    },
                    onedit: function() {
                        $(row).addClass( view.styles.selected ).siblings().removeClass( view.styles.selected );
                    },
                    placeholder: ""
                });
            };

            return function (row, data, displayIndex, displayIndexFull) {
                var tableInstance = this;

                editableColumns = editableColumns || [ ];

                _.each(editableColumns, function (column) {
                    var elements = $('td:nth-child(' + tableInstance.getColumnDivIndexByProperty( column.name ) + ')', row);

                    _.each(elements, function (el) {
                        var aPos  = tableInstance.fnGetPosition( el );
                        var aData = tableInstance.fnGetData( aPos[0] );

                        $(el).editable(
                            function (value, settings) {
                                _.defer(function() {
    //                                getKeyTable().block = false;
                                });
                                return encodeHTML(view.updateData(column.name, value, settings, this));
                            },
                            getEditableTypeDef( column, row )
                        );
                    });
                });

                if ( _.isFunction( fnRowCallback ) ) {
                    fnRowCallback.call( view, row, data, displayIndex, displayIndexFull );
                }

                return row;
            };
        },
        createDataTablesJSON: function () {
            var json = this.collection.toJSON(),
                prefix = this.generateDataIdentifier();

            _.each( json, function( o ) {
                o[ "DT_RowId" ]    = prefix + "-" + o.id;
                o[ "DT_RowClass" ] = prefix + "-row";
            });

            return json;
        },
        hiddenColumns: [ ],
        createDataTable: function ( settings ) {
            var view = this;

            // set up settings
            var defaults = {
                aaData:          this.createDataTablesJSON(),
                bJQueryUI:       true,
                bAutoWidth:      false,
                bInfo:           false,
                bLengthChange:   false,
                bPaginate:       false,
                sPaginationType: "selfServiceDefaultPagination",
                iDisplayLength:  50,
                aLengthMenu:     this.determinePageLengths(),
                sDom:            'Rrt<"bottom ui-widget-header"p<"bottom-divider">l<"dataTables_info"><"clear">',
                oColVis: {
                   iOverlayFade:  100,
                   buttonText:    "&nbsp;",
                   sAlign:        "right",
                   fnStateChange: function ( idx, visible ) {
                       var prop = view.$el.fnSettings().aoColumns[ idx ].mDataProp;

                       if ( visible )
                           view.hiddenColumns = _.without( view.hiddenColumns, prop );
                       else
                           view.hiddenColumns.push( prop );
                   }
                },
                oLanguage: {
                    sLengthMenu:   $.i18n.prop('js.dataTable.sLengthMenu'),
                    sZeroRecords:  $.i18n.prop('js.dataTable.sZeroRecords'),
                    sInfo:         $.i18n.prop('js.dataTable.sInfo'),
                    sInfoEmpty:    $.i18n.prop('js.dataTable.sInfoEmpty'),
                    sInfoFiltered: $.i18n.prop('js.dataTable.sInfoFiltered'),
                    sEmptyTable:   $.i18n.prop('js.dataTable.sEmptyTable')
                },
                fnDrawCallback: function ( oSettings ) {
                    // Position the ColVis button
//                    var nColVis = $( 'div.ColVis', oSettings.nTableWrapper )[0];
//                    nColVis.style.width  = oSettings.oScroll.iBarWidth+"px";
//                    nColVis.style.top    = ( $( 'div.dataTables_scroll', oSettings.nTableWrapper ).position().top ) + "px";
//                    nColVis.style.height = ( $( 'div.dataTables_scrollHead table', oSettings.nTableWrapper ).height() ) + "px";
                }
            };

            settings = $.extend( defaults, settings );

            settings.fnRowCallback = this.createRowCallback( settings );

            _.each( settings.aoColumnDefs, function ( it ) {
                if ( _.indexOf( view.hiddenColumns, it.mDataProp ) != -1 )
                    it.bVisible = false;
                else
                    it.bVisible = true;
            });

            // TODO:  Determine why this can't be done via a CSS class as opposed to manually setting the element.style.
            var table = this.$el.dataTable( settings ).width( "100%" );
            $(document).on("click",  table.selector + ' tbody tr', function(event) { $(this).addClass( view.styles.selected ).siblings().removeClass( view.styles.selected ); } );
            $(document).on("mouseover",  table.selector + ' tbody tr', function(event) { $(this).addClass( view.styles.hover );    } );
            $(document).on("mouseout",  table.selector + ' tbody tr', function(event) { $(this).removeClass( view.styles.hover ); } );

            listenForRemovingFocusOnEditableCell();

            this.preparePagingSelect();
            this.replaceDataTablesSortListeners();

            return table;
        },
        preparePagingSelect: function () {
            var collection = this.collection,
                el = this.$el.closest(".dataTables_wrapper").find(".bottom .dataTables_length select"),
                dirtyCheckDefaultsForPagingSelect = {
                save: function( options ) {
                    var callback = options.callback;

                    // This probably can be improved by using a 'promise' object from jQuery.  Will investigate at a later date.
            //        saveGrades( {
            //            success: function() {
            //                if ( !isDirty() ) { callback(); }
            //            }
            //        });
                    collection.fetch()
                },
                no: function( options ) {
                    collection.fetch()
                },
                isDirty: function() {
                    return collection.isDirty();
                }
            };

            el.change(function(e) {
                var size = el.find("option:selected").val();
                collection.setPageSize(parseInt(size, 10));
            });

            // A select statement will changed its selected value even if the 'onChange' event returns false.  If
            // the record is dirty, and the user cancels the request to save we want to have the initial value of the
            // select available to reset it to what it was prior to them changing the paging length.
            el.focus(function(e) {
                $.data( this, 'initial', this.value );
            });


            el.dirtyCheck( _.defaults( {
                    eventType: "change",
                    cancelCallback: function() {
                        var target = $( selectorString );
                        if (target.data().initial) {
                            target.val( target.data().initial );
                        }
                    }
                }, dirtyCheckDefaultsForPagingSelect )
            );
        },
        replaceDataTablesSortListeners: function () {
            var view = this;

            _.each(this.$el.fnSettings().aoColumns, function (c) {
                $(c.nTh).unbind("click.DT click").bind("click", function () {
                    view.sortTable( this )
                });
            });
        },
        sortTable: function (el) {

            if (typeof(this.collection) == 'undefined') {
                log.debug("sortTable: collection not defined");
                return false;
            }

            var view       = this,
                self       = el,
                settings   = this.table.fnSettings(),
                column     = "",
                direction  = "asc",
                obj        = _.find( settings.aoColumns, function(it) { return it.nTh == self; } );

            if (obj) {
                column = obj.mDataProp;

                if (settings.aaSorting.length == 1)
                    direction = settings.aaSorting[0][2] == 0 ? "desc" : "asc";

            var innerSortTable = function () {
                view.collection.sortColumn    = column;
                view.collection.sortDirection = direction;
                view.collection.sortColumnIdx = $(self).index();
                view.collection.fetch();
            };

            if (this.collection.sortColumn    != column
             || this.collection.sortDirection != direction) {

                    if (this.collection.isDirty()) {
                        setTimeout( function() {
                            var n = new Notification( {message: $.i18n.prop("js.notification.dirtyCheck.message"), type:"warning", promptMessage: $.i18n.prop("js.notification.dirtyCheck.promptMessage")} );

                            n.addPromptAction( $.i18n.prop("js.notification.dirtyCheck.cancelActionButton"), function() {
                                notifications.remove( n );
                            });

                            n.addPromptAction( $.i18n.prop("js.notification.dirtyCheck.doNotSaveActionButton"), function() {
                                notifications.remove( n );
                                innerSortTable();
                            });

                            n.addPromptAction( $.i18n.prop("js.notification.dirtyCheck.saveActionButton"), function() {
        //                        saveGrades({
        //                            success: function() {
        //                                if ( !isDirty() ) {
        //                                    innerSortTable();
        //                                }
        //                            }
        //                        });

                                notifications.remove( n );
                            });

                            notifications.addNotification( n );
                        }, 200);
                    } else {
                        innerSortTable();
                    }
                 }
            }
        },
        getSelectedRows: function() {
            var view = this;
            return _.filter(this.table.fnGetNodes(), function(it) {
                return $(it).hasClass( view.styles.selected );
            });
        },
        getColumnSelector: function( propertyName ) {
            var idx = this.table.getColumnDivIndexByProperty( propertyName );

            if (!_.isUndefined(idx))
                return this.$el.selector + ' tbody tr td:nth-child(' + idx + ')';

            return false;
        },
        notificationAdded: function( notification ) {
            var model = this.collection.find( function( m ) {
                if (notification.get( "model" )) {
                    return m.get( "id" ) === notification.get( "model" ).id;
                }
            });

            if (model) {
                var id       = model.get("id"),
                    types    = { success:'notification-success', warning:'notification-warning' },
                    clz      = types[notification.get( "type" )] || "notification-error",
                    selector = "#" + this.generateDataIdentifier() + "-" + id;


                $(selector).stop(true,true).addClass(clz);
            }
        },
        notificationRemoved: function( notification ) {
            var model = this.collection.find( function( m ) {
                return m === notification.get( "model" );
            });

            if (model) {
                var id       = model.get("id"),
                    types    = { success:'notification-success', warning:'notification-warning' },
                    clz      = types[notification.get( "type" )] || "notification-error",
                    selector = "#" + this.generateDataIdentifier() + "-" + id;


                $(selector).removeClass(clz, 1000);
            }
        }
    });

    var DataGridView = Backbone.DataGridView = Backbone.DataTablesViewInternal.extend({ });

}).call(this, $, _);

var process = process || {env: {NODE_ENV: "development"}};
/* Copyright 2013 Ellucian Company L.P. and its affiliates. */

/* dependent upon Collection enhancements in backbone-custom.js */
;(function () {
    Backbone.PagedCollectionInternal = Backbone.Collection.extend({
        paginate: true,
        parse: function(response, xhr) {
            this.totalCount = response.totalCount

            return response.data;
        },
        fetch: function(options) {
            typeof(options) != 'undefined' || (options = {});

            this.trigger("fetching");

            if (typeof(options.page) == 'number') {
                this.page = options.page;
            }

            var self = this;
            var success = options.success;
            var error = options.error;
            self.loading = true;

            options.success = function(response) {
                self.loading = false;
                self.trigger("fetched");

                var info = self.pageInfo();

                if (info.pages && self.page > info.pages) {
                    self.fetch({ page: 1, success: success });
                }

                if ( _.isFunction( success ) )  { success( response ); }
            };

            options.error = function( originalModel, response, options ) {
                self.loading = false;
                self.trigger("failed");
                if ( _.isFunction( error ) ) { error( originalModel, response, options ); }
            };

            return Backbone.Collection.prototype.fetch.call(this, options);
        }
    });

    var PagedCollection = Backbone.PagedCollection = Backbone.PagedCollectionInternal.extend({});
}).call( this );

var process = process || {env: {NODE_ENV: "development"}};
/******************************************************************************
 * jquery.i18n.properties
 * 
 * Dual licensed under the GPL (http://dev.jquery.com/browser/trunk/jquery/GPL-LICENSE.txt) and 
 * MIT (http://dev.jquery.com/browser/trunk/jquery/MIT-LICENSE.txt) licenses.
 * 
 * @version     1.0.x
 * @author      Nuno Fernandes
 * @url         www.codingwithcoffee.com
 * @inspiration Localisation assistance for jQuery (http://keith-wood.name/localisation.html)
 *              by Keith Wood (kbwood{at}iinet.com.au) June 2007
 * 
 *****************************************************************************/

(function($) {
$.i18n = {};

/** Map holding bundle keys (if mode: 'map') */
$.i18n.map = {};
    
/**
 * Load and parse message bundle files (.properties),
 * making bundles keys available as javascript variables.
 * 
 * i18n files are named <name>.js, or <name>_<language>.js or <name>_<language>_<country>.js
 * Where:
 *      The <language> argument is a valid ISO Language Code. These codes are the lower-case, 
 *      two-letter codes as defined by ISO-639. You can find a full list of these codes at a 
 *      number of sites, such as: http://www.loc.gov/standards/iso639-2/englangn.html
 *      The <country> argument is a valid ISO Country Code. These codes are the upper-case,
 *      two-letter codes as defined by ISO-3166. You can find a full list of these codes at a
 *      number of sites, such as: http://www.iso.ch/iso/en/prods-services/iso3166ma/02iso-3166-code-lists/list-en1.html
 * 
 * Sample usage for a bundles/Messages.properties bundle:
 * $.i18n.properties({
 *      name:      'Messages', 
 *      language:  'en_US',
 *      path:      'bundles'
 * });
 * @param  name			(string/string[], required) names of file to load (eg, 'Messages' or ['Msg1','Msg2'])
 * @param  language		(string, optional) language/country code (eg, 'en', 'en_US', 'pt_PT'). if not specified, language reported by the browser will be used instead.
 * @param  path			(string, optional) path of directory that contains file to load
 * @param  mode			(string, optional) whether bundles keys are available as JavaScript variables/functions or as a map (eg, 'vars' or 'map')
 * @param  callback     (function, optional) callback function to be called after script is terminated
 */
$.i18n.properties = function(settings) {
	// set up settings
    var defaults = {
        name:           'Messages',
        language:       '',
        path:           '',  
        mode:           'vars',
        callback:       function(){}
    };
    settings = $.extend(defaults, settings);    
    if(settings.language === null || settings.language == '') {
	   settings.language = $.i18n.browserLang();
	}
	if(settings.language === null) {settings.language='';}
	
	// load and parse bundle files
	var files = getFiles(settings.name);
	for(i=0; i<files.length; i++) {
		// 1. load base (eg, Messages.properties)
		loadAndParseFile(settings.path + files[i] + '.properties', settings.language, settings.mode);

        // 2. with language code (eg, Messages_pt.properties)
		if(settings.language.length >= 2) {
            loadAndParseFile(settings.path + files[i] + '_' + settings.language.substring(0, 2) +'.properties', settings.language, settings.mode);
		}
		// 3. with language code and country code (eg, Messages_pt_PT.properties)
        if(settings.language.length >= 5) {
            loadAndParseFile(settings.path + files[i] + '_' + settings.language.substring(0, 5) +'.properties', settings.language, settings.mode);
        }
	}
	
	// call callback
	if(settings.callback){ settings.callback(); }
};


/**
 * When configured with mode: 'map', allows access to bundle values by specifying its key.
 * Eg, jQuery.i18n.prop('com.company.bundles.menu_add')
 */
$.i18n.prop = function(key, placeHolderValues) {
	var value = $.i18n.map[key];
	if(value == null) { return '[' + key + ']'; }
	if(!placeHolderValues) {
    //if(key == 'spv.lbl.modified') {alert(value);}
		return value;
	}else{
		for(var i=0; i<placeHolderValues.length; i++) {
			var regexp = new RegExp('\\{('+i+')\\}', "g");
			value = value.replace(regexp, placeHolderValues[i]);
		}
		return value;
	}
};

/** Language reported by browser, normalized code */
$.i18n.browserLang = function() {
	return normaliseLanguageCode(navigator.language /* Mozilla */ || navigator.userLanguage /* IE */);
}


/** Load and parse .properties files */
function loadAndParseFile(filename, language, mode) {
	$.ajax({
        url:        filename,
        async:      false,
        cache:		false,
        contentType:'text/plain;charset=UTF-8',
        dataType:   'text',
        success:    function(data, status) {
        				parseData(data, mode); 
					}
    });
}

/** Parse .properties files */
function parseData(data, mode) {
   var parsed = '';
   var parameters = data.split( /\n/ );
   var regPlaceHolder = /(\{\d+\})/g;
   var regRepPlaceHolder = /\{(\d+)\}/g;
   var unicodeRE = /(\\u.{4})/ig;
   for(var i=0; i<parameters.length; i++ ) {
       parameters[i] = parameters[i].replace( /^\s\s*/, '' ).replace( /\s\s*$/, '' ); // trim
       if(parameters[i].length > 0 && parameters[i].match("^#")!="#") { // skip comments
           var pair = parameters[i].split('=');
           if(pair.length > 0) {
               /** Process key & value */
               var name = unescape(pair[0]).replace( /^\s\s*/, '' ).replace( /\s\s*$/, '' ); // trim
               var value = pair.length == 1 ? "" : pair[1];
               // process multi-line values
               while(value.match(/\\$/)=="\\") {
               		value = value.substring(0, value.length - 1);
               		value += parameters[++i].replace( /\s\s*$/, '' ); // right trim
               }               
               for(var s=2;s<pair.length;s++){ value +='=' + pair[s]; }
               value = value.replace( /"/g, '\\"' ); // escape quotation mark (")
               value = value.replace( /^\s\s*/, '' ).replace( /\s\s*$/, '' ); // trim  
               
               /** Mode: bundle keys in a map */
               if(mode == 'map' || mode == 'both') {
                   // handle unicode chars possibly left out
                   var unicodeMatches = value.match(unicodeRE);
                   if(unicodeMatches) {
                     for(var u=0; u<unicodeMatches.length; u++) {
                        value = value.replace( unicodeMatches[u], unescapeUnicode(unicodeMatches[u]));
                     }
                   }
                   // add to map
                   $.i18n.map[name] = value;
               }
               
               /** Mode: bundle keys as vars/functions */
               if(mode == 'vars' || mode == 'both') {
                   // make sure namespaced key exists (eg, 'some.key') 
                   checkKeyNamespace(name);
                   
                   // value with variable substitutions
                   if(regPlaceHolder.test(value)) {
                       var parts = value.split(regPlaceHolder);
                       // process function args
                       var first = true;
                       var fnArgs = '';
                       var usedArgs = [];
                       for(var p=0; p<parts.length; p++) {
                           if(regPlaceHolder.test(parts[p]) && (usedArgs.length == 0 || usedArgs.indexOf(parts[p]) == -1)) {
                               if(!first) {fnArgs += ',';}
                               fnArgs += parts[p].replace(regRepPlaceHolder, 'v$1');
                               usedArgs.push(parts[p]);
                               first = false;
                           }
                       }
                       parsed += name + '=function(' + fnArgs + '){';
                       // process function body
                       var fnExpr = '"' + value.replace(regRepPlaceHolder, '"+v$1+"') + '"';
                       parsed += 'return ' + fnExpr + ';' + '};';
                       
                   // simple value
                   }else{
                       parsed += name+'="'+value+'";';
                   }
               } // END: Mode: bundle keys as vars/functions
           } // END: if(pair.length > 0)
       } // END: skip comments
   }
   eval(parsed);
}

/** Make sure namespace exists (for keys with dots in name) */
function checkKeyNamespace(key) {
	var regDot = /\./;
	if(regDot.test(key)) {
		var fullname = '';
		var names = key.split( /\./ );
		for(var i=0; i<names.length; i++) {
			if(i>0) {fullname += '.';}
			fullname += names[i];
			if(eval('typeof '+fullname+' == "undefined"')) {
				eval(fullname + '={};');
			}
		}
	}
}

/** Make sure filename is an array */
function getFiles(names) {
	return (names && names.constructor == Array) ? names : [names];
}

/** Ensure language code is in the format aa_AA. */
function normaliseLanguageCode(lang) {
    lang = lang.toLowerCase();
    if(lang.length > 3) {
        lang = lang.substring(0, 3) + lang.substring(3).toUpperCase();
    }
    return lang;
}

/** Unescape unicode chars ('\u00e3') */
function unescapeUnicode(str) {
  // unescape unicode codes
  var codes = [];
  var code = parseInt(str.substr(2), 16);
  if (code >= 0 && code < Math.pow(2, 16)) {
     codes.push(code);
  }
  // convert codes to text
  var unescaped = '';
  for (var i = 0; i < codes.length; ++i) {
    unescaped += String.fromCharCode(codes[i]);
  }
  return unescaped;
}

/* Cross-Browser Split 1.0.1
(c) Steven Levithan <stevenlevithan.com>; MIT License
An ECMA-compliant, uniform cross-browser split method */
var cbSplit;
// avoid running twice, which would break `cbSplit._nativeSplit`'s reference to the native `split`
if (!cbSplit) {    
  cbSplit = function(str, separator, limit) {
      // if `separator` is not a regex, use the native `split`
      if (Object.prototype.toString.call(separator) !== "[object RegExp]") {
        if(typeof cbSplit._nativeSplit == "undefined")
          return str.split(separator, limit);
        else
          return cbSplit._nativeSplit.call(str, separator, limit);
      }
  
      var output = [],
          lastLastIndex = 0,
          flags = (separator.ignoreCase ? "i" : "") +
                  (separator.multiline  ? "m" : "") +
                  (separator.sticky     ? "y" : ""),
          separator = RegExp(separator.source, flags + "g"), // make `global` and avoid `lastIndex` issues by working with a copy
          separator2, match, lastIndex, lastLength;
  
      str = str + ""; // type conversion
      if (!cbSplit._compliantExecNpcg) {
          separator2 = RegExp("^" + separator.source + "$(?!\\s)", flags); // doesn't need /g or /y, but they don't hurt
      }
  
      /* behavior for `limit`: if it's...
      - `undefined`: no limit.
      - `NaN` or zero: return an empty array.
      - a positive number: use `Math.floor(limit)`.
      - a negative number: no limit.
      - other: type-convert, then use the above rules. */
      if (limit === undefined || +limit < 0) {
          limit = Infinity;
      } else {
          limit = Math.floor(+limit);
          if (!limit) {
              return [];
          }
      }
  
      while (match = separator.exec(str)) {
          lastIndex = match.index + match[0].length; // `separator.lastIndex` is not reliable cross-browser
  
          if (lastIndex > lastLastIndex) {
              output.push(str.slice(lastLastIndex, match.index));
  
              // fix browsers whose `exec` methods don't consistently return `undefined` for nonparticipating capturing groups
              if (!cbSplit._compliantExecNpcg && match.length > 1) {
                  match[0].replace(separator2, function () {
                      for (var i = 1; i < arguments.length - 2; i++) {
                          if (arguments[i] === undefined) {
                              match[i] = undefined;
                          }
                      }
                  });
              }
  
              if (match.length > 1 && match.index < str.length) {
                  Array.prototype.push.apply(output, match.slice(1));
              }
  
              lastLength = match[0].length;
              lastLastIndex = lastIndex;
  
              if (output.length >= limit) {
                  break;
              }
          }
  
          if (separator.lastIndex === match.index) {
              separator.lastIndex++; // avoid an infinite loop
          }
      }
  
      if (lastLastIndex === str.length) {
          if (lastLength || !separator.test("")) {
              output.push("");
          }
      } else {
          output.push(str.slice(lastLastIndex));
      }
  
      return output.length > limit ? output.slice(0, limit) : output;
  };
  
  cbSplit._compliantExecNpcg = /()??/.exec("")[1] === undefined; // NPCG: nonparticipating capturing group
  cbSplit._nativeSplit = String.prototype.split;

} // end `if (!cbSplit)`
String.prototype.split = function (separator, limit) {
    return cbSplit(this, separator, limit);
};

})(jQuery);
                
var process = process || {env: {NODE_ENV: "development"}};
/*yepnope1.0.1|WTFPL*/(function(a,b,c){function H(){var a=z;a.loader={load:G,i:0};return a}function G(a,b,c){var e=b=="c"?r:q;i=0,b=b||"j",u(a)?F(e,a,b,this.i++,d,c):(h.splice(this.i++,0,a),h.length==1&&E());return this}function F(a,c,d,g,j,l){function q(){!o&&A(n.readyState)&&(p.r=o=1,!i&&B(),n.onload=n.onreadystatechange=null,e(function(){m.removeChild(n)},0))}var n=b.createElement(a),o=0,p={t:d,s:c,e:l};n.src=n.data=c,!k&&(n.style.display="none"),n.width=n.height="0",a!="object"&&(n.type=d),n.onload=n.onreadystatechange=q,a=="img"?n.onerror=q:a=="script"&&(n.onerror=function(){p.e=p.r=1,E()}),h.splice(g,0,p),m.insertBefore(n,k?null:f),e(function(){o||(m.removeChild(n),p.r=p.e=o=1,B())},z.errorTimeout)}function E(){var a=h.shift();i=1,a?a.t?e(function(){a.t=="c"?D(a):C(a)},0):(a(),B()):i=0}function D(a){var c=b.createElement("link"),d;c.href=a.s,c.rel="stylesheet",c.type="text/css",!a.e&&(o||j)?function g(a){e(function(){if(!d)try{a.sheet.cssRules.length?(d=1,B()):g(a)}catch(b){b.code==1e3||b.message=="security"||b.message=="denied"?(d=1,e(function(){B()},0)):g(a)}},0)}(c):(c.onload=function(){d||(d=1,e(function(){B()},0))},a.e&&c.onload()),e(function(){d||(d=1,B())},z.errorTimeout),!a.e&&f.parentNode.insertBefore(c,f)}function C(a){var c=b.createElement("script"),d;c.src=a.s,c.onreadystatechange=c.onload=function(){!d&&A(c.readyState)&&(d=1,B(),c.onload=c.onreadystatechange=null)},e(function(){d||(d=1,B())},z.errorTimeout),a.e?c.onload():f.parentNode.insertBefore(c,f)}function B(){var a=1,b=-1;while(h.length- ++b)if(h[b].s&&!(a=h[b].r))break;a&&E()}function A(a){return!a||a=="loaded"||a=="complete"}var d=b.documentElement,e=a.setTimeout,f=b.getElementsByTagName("script")[0],g=({}).toString,h=[],i=0,j="MozAppearance"in d.style,k=j&&!!b.createRange().compareNode,l=j&&!k,m=k?d:f.parentNode,n=a.opera&&g.call(a.opera)=="[object Opera]",o="webkitAppearance"in d.style,p=o&&"async"in b.createElement("script"),q=j?"object":n||p?"img":"script",r=o?"img":q,s=Array.isArray||function(a){return g.call(a)=="[object Array]"},t=function(a){return typeof a=="object"},u=function(a){return typeof a=="string"},v=function(a){return g.call(a)=="[object Function]"},w=[],x={},y,z;z=function(a){function h(a,b){function i(a){if(u(a))g(a,f,b,0,c);else if(t(a))for(h in a)a.hasOwnProperty(h)&&g(a[h],f,b,h,c)}var c=!!a.test,d=c?a.yep:a.nope,e=a.load||a.both,f=a.callback,h;i(d),i(e),a.complete&&b.load(a.complete)}function g(a,b,d,e,g){var h=f(a),i=h.autoCallback;if(!h.bypass){b&&(b=v(b)?b:b[a]||b[e]||b[a.split("/").pop().split("?")[0]]);if(h.instead)return h.instead(a,b,d,e,g);d.load(h.url,h.forceCSS||!h.forceJS&&/css$/.test(h.url)?"c":c,h.noexec),(v(b)||v(i))&&d.load(function(){H(),b&&b(h.origUrl,g,e),i&&i(h.origUrl,g,e)})}}function f(a){var b=a.split("!"),c=w.length,d=b.pop(),e=b.length,f={url:d,origUrl:d,prefixes:b},g,h;for(h=0;h<e;h++)g=x[b[h]],g&&(f=g(f));for(h=0;h<c;h++)f=w[h](f);return f}var b,d,e=this.yepnope.loader;if(u(a))g(a,0,e,0);else if(s(a))for(b=0;b<a.length;b++)d=a[b],u(d)?g(d,0,e,0):s(d)?z(d):t(d)&&h(d,e);else t(a)&&h(a,e)},z.addPrefix=function(a,b){x[a]=b},z.addFilter=function(a){w.push(a)},z.errorTimeout=1e4,b.readyState==null&&b.addEventListener&&(b.readyState="loading",b.addEventListener("DOMContentLoaded",y=function(){b.removeEventListener("DOMContentLoaded",y,0),b.readyState="complete"},0)),a.yepnope=H()})(this,this.document);
var process = process || {env: {NODE_ENV: "development"}};
/**
 * Copyright 2009 Tim Down.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */


if(!Array.prototype.push){Array.prototype.push=function(){for(var i=0,len=arguments.length;i<len;i++){this[this.length]=arguments[i];}
return this.length;};}
if(!Array.prototype.shift){Array.prototype.shift=function(){if(this.length>0){var firstItem=this[0];for(var i=0,len=this.length-1;i<len;i++){this[i]=this[i+1];}
this.length=this.length-1;return firstItem;}};}
if(!Array.prototype.splice){Array.prototype.splice=function(startIndex,deleteCount){var itemsAfterDeleted=this.slice(startIndex+deleteCount);var itemsDeleted=this.slice(startIndex,startIndex+deleteCount);this.length=startIndex;var argumentsArray=[];for(var i=0,len=arguments.length;i<len;i++){argumentsArray[i]=arguments[i];}
var itemsToAppend=(argumentsArray.length>2)?itemsAfterDeleted=argumentsArray.slice(2).concat(itemsAfterDeleted):itemsAfterDeleted;for(i=0,len=itemsToAppend.length;i<len;i++){this.push(itemsToAppend[i]);}
return itemsDeleted;};}
var log4javascript;(function(){function isUndefined(obj){return typeof obj=="undefined";}
function EventSupport(){}
EventSupport.prototype={eventTypes:[],eventListeners:{},setEventTypes:function(eventTypesParam){if(eventTypesParam instanceof Array){this.eventTypes=eventTypesParam;this.eventListeners={};for(var i=0,len=this.eventTypes.length;i<len;i++){this.eventListeners[this.eventTypes[i]]=[];}}else{handleError("log4javascript.EventSupport ["+this+"]: setEventTypes: eventTypes parameter must be an Array");}},addEventListener:function(eventType,listener){if(typeof listener=="function"){if(!array_contains(this.eventTypes,eventType)){handleError("log4javascript.EventSupport ["+this+"]: addEventListener: no event called '"+eventType+"'");}
this.eventListeners[eventType].push(listener);}else{handleError("log4javascript.EventSupport ["+this+"]: addEventListener: listener must be a function");}},removeEventListener:function(eventType,listener){if(typeof listener=="function"){if(!array_contains(this.eventTypes,eventType)){handleError("log4javascript.EventSupport ["+this+"]: removeEventListener: no event called '"+eventType+"'");}
array_remove(this.eventListeners[eventType],listener);}else{handleError("log4javascript.EventSupport ["+this+"]: removeEventListener: listener must be a function");}},dispatchEvent:function(eventType,eventArgs){if(array_contains(this.eventTypes,eventType)){var listeners=this.eventListeners[eventType];for(var i=0,len=listeners.length;i<len;i++){listeners[i](this,eventType,eventArgs);}}else{handleError("log4javascript.EventSupport ["+this+"]: dispatchEvent: no event called '"+eventType+"'");}}};var applicationStartDate=new Date();var uniqueId="log4javascript_"+applicationStartDate.getTime()+"_"+
Math.floor(Math.random()*100000000);var emptyFunction=function(){};var newLine="\r\n";var pageLoaded=false;function Log4JavaScript(){}
Log4JavaScript.prototype=new EventSupport();log4javascript=new Log4JavaScript();log4javascript.version="1.4.1";log4javascript.edition="log4javascript";function toStr(obj){if(obj&&obj.toString){return obj.toString();}else{return String(obj);}}
function getExceptionMessage(ex){if(ex.message){return ex.message;}else if(ex.description){return ex.description;}else{return toStr(ex);}}
function getUrlFileName(url){var lastSlashIndex=Math.max(url.lastIndexOf("/"),url.lastIndexOf("\\"));return url.substr(lastSlashIndex+1);}
function getExceptionStringRep(ex){if(ex){var exStr="Exception: "+getExceptionMessage(ex);try{if(ex.lineNumber){exStr+=" on line number "+ex.lineNumber;}
if(ex.fileName){exStr+=" in file "+getUrlFileName(ex.fileName);}}catch(localEx){logLog.warn("Unable to obtain file and line information for error");}
if(showStackTraces&&ex.stack){exStr+=newLine+"Stack trace:"+newLine+ex.stack;}
return exStr;}
return null;}
function bool(obj){return Boolean(obj);}
function trim(str){return str.replace(/^\s+/,"").replace(/\s+$/,"");}
function splitIntoLines(text){var text2=text.replace(/\r\n/g,"\n").replace(/\r/g,"\n");return text2.split("\n");}
function urlEncode(str){return escape(str).replace(/\+/g,"%2B").replace(/"/g,"%22").replace(/'/g,"%27").replace(/\//g,"%2F").replace(/=/g,"%3D");}
function urlDecode(str){return unescape(str).replace(/%2B/g,"+").replace(/%22/g,"\"").replace(/%27/g,"'").replace(/%2F/g,"/").replace(/%3D/g,"=");}
function array_remove(arr,val){var index=-1;for(var i=0,len=arr.length;i<len;i++){if(arr[i]===val){index=i;break;}}
if(index>=0){arr.splice(index,1);return true;}else{return false;}}
function array_contains(arr,val){for(var i=0,len=arr.length;i<len;i++){if(arr[i]==val){return true;}}
return false;}
function extractBooleanFromParam(param,defaultValue){if(isUndefined(param)){return defaultValue;}else{return bool(param);}}
function extractStringFromParam(param,defaultValue){if(isUndefined(param)){return defaultValue;}else{return String(param);}}
function extractIntFromParam(param,defaultValue){if(isUndefined(param)){return defaultValue;}else{try{var value=parseInt(param,10);return isNaN(value)?defaultValue:value;}catch(ex){logLog.warn("Invalid int param "+param,ex);return defaultValue;}}}
function extractFunctionFromParam(param,defaultValue){if(typeof param=="function"){return param;}else{return defaultValue;}}
function isError(err){return(err instanceof Error);}
if(!Function.prototype.apply){Function.prototype.apply=function(obj,args){var methodName="__apply__";if(typeof obj[methodName]!="undefined"){methodName+=String(Math.random()).substr(2);}
obj[methodName]=this;var argsStrings=[];for(var i=0,len=args.length;i<len;i++){argsStrings[i]="args["+i+"]";}
var script="obj."+methodName+"("+argsStrings.join(",")+")";var returnValue=eval(script);delete obj[methodName];return returnValue;};}
if(!Function.prototype.call){Function.prototype.call=function(obj){var args=[];for(var i=1,len=arguments.length;i<len;i++){args[i-1]=arguments[i];}
return this.apply(obj,args);};}
function getListenersPropertyName(eventName){return"__log4javascript_listeners__"+eventName;}
function addEvent(node,eventName,listener,useCapture,win){win=win?win:window;if(node.addEventListener){node.addEventListener(eventName,listener,useCapture);}else if(node.attachEvent){node.attachEvent("on"+eventName,listener);}else{var propertyName=getListenersPropertyName(eventName);if(!node[propertyName]){node[propertyName]=[];node["on"+eventName]=function(evt){evt=getEvent(evt,win);var listenersPropertyName=getListenersPropertyName(eventName);var listeners=this[listenersPropertyName].concat([]);var currentListener;while((currentListener=listeners.shift())){currentListener.call(this,evt);}};}
node[propertyName].push(listener);}}
function removeEvent(node,eventName,listener,useCapture){if(node.removeEventListener){node.removeEventListener(eventName,listener,useCapture);}else if(node.detachEvent){node.detachEvent("on"+eventName,listener);}else{var propertyName=getListenersPropertyName(eventName);if(node[propertyName]){array_remove(node[propertyName],listener);}}}
function getEvent(evt,win){win=win?win:window;return evt?evt:win.event;}
function stopEventPropagation(evt){if(evt.stopPropagation){evt.stopPropagation();}else if(typeof evt.cancelBubble!="undefined"){evt.cancelBubble=true;}
evt.returnValue=false;}
var logLog={quietMode:false,debugMessages:[],setQuietMode:function(quietMode){this.quietMode=bool(quietMode);},numberOfErrors:0,alertAllErrors:false,setAlertAllErrors:function(alertAllErrors){this.alertAllErrors=alertAllErrors;},debug:function(message){this.debugMessages.push(message);},displayDebug:function(){alert(this.debugMessages.join(newLine));},warn:function(message,exception){},error:function(message,exception){if(++this.numberOfErrors==1||this.alertAllErrors){if(!this.quietMode){var alertMessage="log4javascript error: "+message;if(exception){alertMessage+=newLine+newLine+"Original error: "+getExceptionStringRep(exception);}
alert(alertMessage);}}}};log4javascript.logLog=logLog;log4javascript.setEventTypes(["load","error"]);function handleError(message,exception){logLog.error(message,exception);log4javascript.dispatchEvent("error",{"message":message,"exception":exception});}
log4javascript.handleError=handleError;var enabled=!((typeof log4javascript_disabled!="undefined")&&log4javascript_disabled);log4javascript.setEnabled=function(enable){enabled=bool(enable);};log4javascript.isEnabled=function(){return enabled;};var useTimeStampsInMilliseconds=true;log4javascript.setTimeStampsInMilliseconds=function(timeStampsInMilliseconds){useTimeStampsInMilliseconds=bool(timeStampsInMilliseconds);};log4javascript.isTimeStampsInMilliseconds=function(){return useTimeStampsInMilliseconds;};log4javascript.evalInScope=function(expr){return eval(expr);};var showStackTraces=false;log4javascript.setShowStackTraces=function(show){showStackTraces=bool(show);};var Level=function(level,name){this.level=level;this.name=name;};Level.prototype={toString:function(){return this.name;},equals:function(level){return this.level==level.level;},isGreaterOrEqual:function(level){return this.level>=level.level;}};Level.ALL=new Level(Number.MIN_VALUE,"ALL");Level.TRACE=new Level(10000,"TRACE");Level.DEBUG=new Level(20000,"DEBUG");Level.INFO=new Level(30000,"INFO");Level.WARN=new Level(40000,"WARN");Level.ERROR=new Level(50000,"ERROR");Level.FATAL=new Level(60000,"FATAL");Level.OFF=new Level(Number.MAX_VALUE,"OFF");log4javascript.Level=Level;function Timer(name,level){this.name=name;this.level=isUndefined(level)?Level.INFO:level;this.start=new Date();}
Timer.prototype.getElapsedTime=function(){return new Date().getTime()-this.start.getTime();};var anonymousLoggerName="[anonymous]";var defaultLoggerName="[default]";var nullLoggerName="[null]";var rootLoggerName="root";function Logger(name){this.name=name;this.parent=null;this.children=[];var appenders=[];var loggerLevel=null;var isRoot=(this.name===rootLoggerName);var isNull=(this.name===nullLoggerName);var appenderCache=null;var appenderCacheInvalidated=false;this.addChild=function(childLogger){this.children.push(childLogger);childLogger.parent=this;childLogger.invalidateAppenderCache();};var additive=true;this.getAdditivity=function(){return additive;};this.setAdditivity=function(additivity){var valueChanged=(additive!=additivity);additive=additivity;if(valueChanged){this.invalidateAppenderCache();}};this.addAppender=function(appender){if(isNull){handleError("Logger.addAppender: you may not add an appender to the null logger");}else{if(appender instanceof log4javascript.Appender){if(!array_contains(appenders,appender)){appenders.push(appender);appender.setAddedToLogger(this);this.invalidateAppenderCache();}}else{handleError("Logger.addAppender: appender supplied ('"+
toStr(appender)+"') is not a subclass of Appender");}}};this.removeAppender=function(appender){array_remove(appenders,appender);appender.setRemovedFromLogger(this);this.invalidateAppenderCache();};this.removeAllAppenders=function(){var appenderCount=appenders.length;if(appenderCount>0){for(var i=0;i<appenderCount;i++){appenders[i].setRemovedFromLogger(this);}
appenders.length=0;this.invalidateAppenderCache();}};this.getEffectiveAppenders=function(){if(appenderCache===null||appenderCacheInvalidated){var parentEffectiveAppenders=(isRoot||!this.getAdditivity())?[]:this.parent.getEffectiveAppenders();appenderCache=parentEffectiveAppenders.concat(appenders);appenderCacheInvalidated=false;}
return appenderCache;};this.invalidateAppenderCache=function(){appenderCacheInvalidated=true;for(var i=0,len=this.children.length;i<len;i++){this.children[i].invalidateAppenderCache();}};this.log=function(level,params){if(level.isGreaterOrEqual(this.getEffectiveLevel())){var exception;var finalParamIndex=params.length-1;var lastParam=params[params.length-1];if(params.length>1&&isError(lastParam)){exception=lastParam;finalParamIndex--;}
var messages=[];for(var i=0;i<=finalParamIndex;i++){messages[i]=params[i];}
var loggingEvent=new LoggingEvent(this,new Date(),level,messages,exception);this.callAppenders(loggingEvent);}};this.callAppenders=function(loggingEvent){var effectiveAppenders=this.getEffectiveAppenders();for(var i=0,len=effectiveAppenders.length;i<len;i++){effectiveAppenders[i].doAppend(loggingEvent);}};this.setLevel=function(level){if(isRoot&&level===null){handleError("Logger.setLevel: you cannot set the level of the root logger to null");}else if(level instanceof Level){loggerLevel=level;}else{handleError("Logger.setLevel: level supplied to logger "+
this.name+" is not an instance of log4javascript.Level");}};this.getLevel=function(){return loggerLevel;};this.getEffectiveLevel=function(){for(var logger=this;logger!==null;logger=logger.parent){var level=logger.getLevel();if(level!==null){return level;}}};this.group=function(name,initiallyExpanded){var effectiveAppenders=this.getEffectiveAppenders();for(var i=0,len=effectiveAppenders.length;i<len;i++){effectiveAppenders[i].group(name,initiallyExpanded);}};this.groupEnd=function(name){var effectiveAppenders=this.getEffectiveAppenders();for(var i=0,len=effectiveAppenders.length;i<len;i++){effectiveAppenders[i].groupEnd();}};var timers={};this.time=function(name,level){if(isUndefined(name)){handleError("Logger.time: a name for the timer must be supplied");}else if(level&&!(level instanceof Level)){handleError("Logger.time: level supplied to timer "+
name+" is not an instance of log4javascript.Level");}else{timers[name]=new Timer(name,level);}};this.timeEnd=function(name){if(isUndefined(name)){handleError("Logger.timeEnd: a name for the timer must be supplied");}else if(timers[name]){var timer=timers[name];var milliseconds=timer.getElapsedTime();this.log(timer.level,["Timer "+toStr(name)+" completed in "+milliseconds+"ms"]);delete timers[name];}else{logLog.warn("Logger.timeEnd: no timer found with name "+name);}};this.assert=function(expr){if(!expr){var args=[];for(var i=1,len=arguments.length;i<len;i++){args.push(arguments[i]);}
args=(args.length>0)?args:["Assertion Failure"];args.push(newLine);args.push(expr);this.log(Level.ERROR,args);}};this.toString=function(){return"Logger["+this.name+"]";};}
Logger.prototype={trace:function(){this.log(Level.TRACE,arguments);},debug:function(){this.log(Level.DEBUG,arguments);},info:function(){this.log(Level.INFO,arguments);},warn:function(){this.log(Level.WARN,arguments);},error:function(){this.log(Level.ERROR,arguments);},fatal:function(){this.log(Level.FATAL,arguments);},isEnabledFor:function(level){return level.isGreaterOrEqual(this.getEffectiveLevel());},isTraceEnabled:function(){return this.isEnabledFor(Level.TRACE);},isDebugEnabled:function(){return this.isEnabledFor(Level.DEBUG);},isInfoEnabled:function(){return this.isEnabledFor(Level.INFO);},isWarnEnabled:function(){return this.isEnabledFor(Level.WARN);},isErrorEnabled:function(){return this.isEnabledFor(Level.ERROR);},isFatalEnabled:function(){return this.isEnabledFor(Level.FATAL);}};Logger.prototype.trace.isEntryPoint=true;Logger.prototype.debug.isEntryPoint=true;Logger.prototype.info.isEntryPoint=true;Logger.prototype.warn.isEntryPoint=true;Logger.prototype.error.isEntryPoint=true;Logger.prototype.fatal.isEntryPoint=true;var loggers={};var loggerNames=[];var ROOT_LOGGER_DEFAULT_LEVEL=Level.DEBUG;var rootLogger=new Logger(rootLoggerName);rootLogger.setLevel(ROOT_LOGGER_DEFAULT_LEVEL);log4javascript.getRootLogger=function(){return rootLogger;};log4javascript.getLogger=function(loggerName){if(!(typeof loggerName=="string")){loggerName=anonymousLoggerName;logLog.warn("log4javascript.getLogger: non-string logger name "+
toStr(loggerName)+" supplied, returning anonymous logger");}
if(loggerName==rootLoggerName){handleError("log4javascript.getLogger: root logger may not be obtained by name");}
if(!loggers[loggerName]){var logger=new Logger(loggerName);loggers[loggerName]=logger;loggerNames.push(loggerName);var lastDotIndex=loggerName.lastIndexOf(".");var parentLogger;if(lastDotIndex>-1){var parentLoggerName=loggerName.substring(0,lastDotIndex);parentLogger=log4javascript.getLogger(parentLoggerName);}else{parentLogger=rootLogger;}
parentLogger.addChild(logger);}
return loggers[loggerName];};var defaultLogger=null;log4javascript.getDefaultLogger=function(){if(!defaultLogger){defaultLogger=log4javascript.getLogger(defaultLoggerName);var a=new log4javascript.PopUpAppender();defaultLogger.addAppender(a);}
return defaultLogger;};var nullLogger=null;log4javascript.getNullLogger=function(){if(!nullLogger){nullLogger=new Logger(nullLoggerName);nullLogger.setLevel(Level.OFF);}
return nullLogger;};log4javascript.resetConfiguration=function(){rootLogger.setLevel(ROOT_LOGGER_DEFAULT_LEVEL);loggers={};};var LoggingEvent=function(logger,timeStamp,level,messages,exception){this.logger=logger;this.timeStamp=timeStamp;this.timeStampInMilliseconds=timeStamp.getTime();this.timeStampInSeconds=Math.floor(this.timeStampInMilliseconds/1000);this.milliseconds=this.timeStamp.getMilliseconds();this.level=level;this.messages=messages;this.exception=exception;};LoggingEvent.prototype={getThrowableStrRep:function(){return this.exception?getExceptionStringRep(this.exception):"";},getCombinedMessages:function(){return(this.messages.length==1)?this.messages[0]:this.messages.join(newLine);},toString:function(){return"LoggingEvent["+this.level+"]";}};log4javascript.LoggingEvent=LoggingEvent;var Layout=function(){};Layout.prototype={defaults:{loggerKey:"logger",timeStampKey:"timestamp",millisecondsKey:"milliseconds",levelKey:"level",messageKey:"message",exceptionKey:"exception",urlKey:"url"},loggerKey:"logger",timeStampKey:"timestamp",millisecondsKey:"milliseconds",levelKey:"level",messageKey:"message",exceptionKey:"exception",urlKey:"url",batchHeader:"",batchFooter:"",batchSeparator:"",returnsPostData:false,overrideTimeStampsSetting:false,useTimeStampsInMilliseconds:null,format:function(loggingEvent){handleError("Layout.format: layout supplied has no format() method");},ignoresThrowable:function(){handleError("Layout.ignoresThrowable: layout supplied has no ignoresThrowable() method");},getContentType:function(){return"text/plain";},allowBatching:function(){return true;},setTimeStampsInMilliseconds:function(timeStampsInMilliseconds){this.overrideTimeStampsSetting=true;this.useTimeStampsInMilliseconds=bool(timeStampsInMilliseconds);},isTimeStampsInMilliseconds:function(){return this.overrideTimeStampsSetting?this.useTimeStampsInMilliseconds:useTimeStampsInMilliseconds;},getTimeStampValue:function(loggingEvent){return this.isTimeStampsInMilliseconds()?loggingEvent.timeStampInMilliseconds:loggingEvent.timeStampInSeconds;},getDataValues:function(loggingEvent,combineMessages){var dataValues=[[this.loggerKey,loggingEvent.logger.name],[this.timeStampKey,this.getTimeStampValue(loggingEvent)],[this.levelKey,loggingEvent.level.name],[this.urlKey,window.location.href],[this.messageKey,combineMessages?loggingEvent.getCombinedMessages():loggingEvent.messages]];if(!this.isTimeStampsInMilliseconds()){dataValues.push([this.millisecondsKey,loggingEvent.milliseconds]);}
if(loggingEvent.exception){dataValues.push([this.exceptionKey,getExceptionStringRep(loggingEvent.exception)]);}
if(this.hasCustomFields()){for(var i=0,len=this.customFields.length;i<len;i++){var val=this.customFields[i].value;if(typeof val==="function"){val=val(this,loggingEvent);}
dataValues.push([this.customFields[i].name,val]);}}
return dataValues;},setKeys:function(loggerKey,timeStampKey,levelKey,messageKey,exceptionKey,urlKey,millisecondsKey){this.loggerKey=extractStringFromParam(loggerKey,this.defaults.loggerKey);this.timeStampKey=extractStringFromParam(timeStampKey,this.defaults.timeStampKey);this.levelKey=extractStringFromParam(levelKey,this.defaults.levelKey);this.messageKey=extractStringFromParam(messageKey,this.defaults.messageKey);this.exceptionKey=extractStringFromParam(exceptionKey,this.defaults.exceptionKey);this.urlKey=extractStringFromParam(urlKey,this.defaults.urlKey);this.millisecondsKey=extractStringFromParam(millisecondsKey,this.defaults.millisecondsKey);},setCustomField:function(name,value){var fieldUpdated=false;for(var i=0,len=this.customFields.length;i<len;i++){if(this.customFields[i].name===name){this.customFields[i].value=value;fieldUpdated=true;}}
if(!fieldUpdated){this.customFields.push({"name":name,"value":value});}},hasCustomFields:function(){return(this.customFields.length>0);},toString:function(){handleError("Layout.toString: all layouts must override this method");}};log4javascript.Layout=Layout;var Appender=function(){};Appender.prototype=new EventSupport();Appender.prototype.layout=new PatternLayout();Appender.prototype.threshold=Level.ALL;Appender.prototype.loggers=[];Appender.prototype.doAppend=function(loggingEvent){if(enabled&&loggingEvent.level.level>=this.threshold.level){this.append(loggingEvent);}};Appender.prototype.append=function(loggingEvent){};Appender.prototype.setLayout=function(layout){if(layout instanceof Layout){this.layout=layout;}else{handleError("Appender.setLayout: layout supplied to "+
this.toString()+" is not a subclass of Layout");}};Appender.prototype.getLayout=function(){return this.layout;};Appender.prototype.setThreshold=function(threshold){if(threshold instanceof Level){this.threshold=threshold;}else{handleError("Appender.setThreshold: threshold supplied to "+
this.toString()+" is not a subclass of Level");}};Appender.prototype.getThreshold=function(){return this.threshold;};Appender.prototype.setAddedToLogger=function(logger){this.loggers.push(logger);};Appender.prototype.setRemovedFromLogger=function(logger){array_remove(this.loggers,logger);};Appender.prototype.group=emptyFunction;Appender.prototype.groupEnd=emptyFunction;Appender.prototype.toString=function(){handleError("Appender.toString: all appenders must override this method");};log4javascript.Appender=Appender;function SimpleLayout(){this.customFields=[];}
SimpleLayout.prototype=new Layout();SimpleLayout.prototype.format=function(loggingEvent){return loggingEvent.level.name+" - "+loggingEvent.getCombinedMessages();};SimpleLayout.prototype.ignoresThrowable=function(){return true;};SimpleLayout.prototype.toString=function(){return"SimpleLayout";};log4javascript.SimpleLayout=SimpleLayout;function NullLayout(){this.customFields=[];}
NullLayout.prototype=new Layout();NullLayout.prototype.format=function(loggingEvent){return loggingEvent.messages;};NullLayout.prototype.ignoresThrowable=function(){return true;};NullLayout.prototype.toString=function(){return"NullLayout";};log4javascript.NullLayout=NullLayout;function XmlLayout(combineMessages){this.combineMessages=extractBooleanFromParam(combineMessages,true);this.customFields=[];}
XmlLayout.prototype=new Layout();XmlLayout.prototype.isCombinedMessages=function(){return this.combineMessages;};XmlLayout.prototype.getContentType=function(){return"text/xml";};XmlLayout.prototype.escapeCdata=function(str){return str.replace(/\]\]>/,"]]>]]&gt;<![CDATA[");};XmlLayout.prototype.format=function(loggingEvent){var layout=this;var i,len;function formatMessage(message){message=(typeof message==="string")?message:toStr(message);return"<log4javascript:message><![CDATA["+
layout.escapeCdata(message)+"]]></log4javascript:message>";}
var str="<log4javascript:event logger=\""+loggingEvent.logger.name+"\" timestamp=\""+this.getTimeStampValue(loggingEvent)+"\"";if(!this.isTimeStampsInMilliseconds()){str+=" milliseconds=\""+loggingEvent.milliseconds+"\"";}
str+=" level=\""+loggingEvent.level.name+"\">"+newLine;if(this.combineMessages){str+=formatMessage(loggingEvent.getCombinedMessages());}else{str+="<log4javascript:messages>"+newLine;for(i=0,len=loggingEvent.messages.length;i<len;i++){str+=formatMessage(loggingEvent.messages[i])+newLine;}
str+="</log4javascript:messages>"+newLine;}
if(this.hasCustomFields()){for(i=0,len=this.customFields.length;i<len;i++){str+="<log4javascript:customfield name=\""+
this.customFields[i].name+"\"><![CDATA["+
this.customFields[i].value.toString()+"]]></log4javascript:customfield>"+newLine;}}
if(loggingEvent.exception){str+="<log4javascript:exception><![CDATA["+
getExceptionStringRep(loggingEvent.exception)+"]]></log4javascript:exception>"+newLine;}
str+="</log4javascript:event>"+newLine+newLine;return str;};XmlLayout.prototype.ignoresThrowable=function(){return false;};XmlLayout.prototype.toString=function(){return"XmlLayout";};log4javascript.XmlLayout=XmlLayout;function escapeNewLines(str){return str.replace(/\r\n|\r|\n/g,"\\r\\n");}
function JsonLayout(readable,combineMessages){this.readable=extractBooleanFromParam(readable,false);this.combineMessages=extractBooleanFromParam(combineMessages,true);this.batchHeader=this.readable?"["+newLine:"[";this.batchFooter=this.readable?"]"+newLine:"]";this.batchSeparator=this.readable?","+newLine:",";this.setKeys();this.colon=this.readable?": ":":";this.tab=this.readable?"\t":"";this.lineBreak=this.readable?newLine:"";this.customFields=[];}
JsonLayout.prototype=new Layout();JsonLayout.prototype.isReadable=function(){return this.readable;};JsonLayout.prototype.isCombinedMessages=function(){return this.combineMessages;};JsonLayout.prototype.format=function(loggingEvent){var layout=this;var dataValues=this.getDataValues(loggingEvent,this.combineMessages);var str="{"+this.lineBreak;var i;function formatValue(val,prefix,expand){var formattedValue;var valType=typeof val;if(val instanceof Date){formattedValue=String(val.getTime());}else if(expand&&(val instanceof Array)){formattedValue="["+layout.lineBreak;for(i=0,len=val.length;i<len;i++){var childPrefix=prefix+layout.tab;formattedValue+=childPrefix+formatValue(val[i],childPrefix,false);if(i<val.length-1){formattedValue+=",";}
formattedValue+=layout.lineBreak;}
formattedValue+=prefix+"]";}else if(valType!=="number"&&valType!=="boolean"){formattedValue="\""+escapeNewLines(toStr(val).replace(/\"/g,"\\\""))+"\"";}else{formattedValue=val;}
return formattedValue;}
for(i=0,len=dataValues.length;i<len;i++){str+=this.tab+"\""+dataValues[i][0]+"\""+this.colon+formatValue(dataValues[i][1],this.tab,true);if(i<dataValues.length-1){str+=",";}
str+=this.lineBreak;}
str+="}"+this.lineBreak;return str;};JsonLayout.prototype.ignoresThrowable=function(){return false;};JsonLayout.prototype.toString=function(){return"JsonLayout";};JsonLayout.prototype.getContentType=function(){return"application/json";};log4javascript.JsonLayout=JsonLayout;function HttpPostDataLayout(){this.setKeys();this.customFields=[];this.returnsPostData=true;}
HttpPostDataLayout.prototype=new Layout();HttpPostDataLayout.prototype.allowBatching=function(){return false;};HttpPostDataLayout.prototype.format=function(loggingEvent){var dataValues=this.getDataValues(loggingEvent);var queryBits=[];for(var i=0,len=dataValues.length;i<len;i++){var val=(dataValues[i][1]instanceof Date)?String(dataValues[i][1].getTime()):dataValues[i][1];queryBits.push(urlEncode(dataValues[i][0])+"="+urlEncode(val));}
return queryBits.join("&");};HttpPostDataLayout.prototype.ignoresThrowable=function(loggingEvent){return false;};HttpPostDataLayout.prototype.toString=function(){return"HttpPostDataLayout";};log4javascript.HttpPostDataLayout=HttpPostDataLayout;function formatObjectExpansion(obj,depth,indentation){var objectsExpanded=[];function doFormat(obj,depth,indentation){var i,j,len,childDepth,childIndentation,childLines,expansion,childExpansion;if(!indentation){indentation="";}
function formatString(text){var lines=splitIntoLines(text);for(var j=1,jLen=lines.length;j<jLen;j++){lines[j]=indentation+lines[j];}
return lines.join(newLine);}
if(obj===null){return"null";}else if(typeof obj=="undefined"){return"undefined";}else if(typeof obj=="string"){return formatString(obj);}else if(typeof obj=="object"&&array_contains(objectsExpanded,obj)){try{expansion=toStr(obj);}catch(ex){expansion="Error formatting property. Details: "+getExceptionStringRep(ex);}
return expansion+" [already expanded]";}else if((obj instanceof Array)&&depth>0){objectsExpanded.push(obj);expansion="["+newLine;childDepth=depth-1;childIndentation=indentation+"  ";childLines=[];for(i=0,len=obj.length;i<len;i++){try{childExpansion=doFormat(obj[i],childDepth,childIndentation);childLines.push(childIndentation+childExpansion);}catch(ex){childLines.push(childIndentation+"Error formatting array member. Details: "+
getExceptionStringRep(ex)+"");}}
expansion+=childLines.join(","+newLine)+newLine+indentation+"]";return expansion;}else if(typeof obj=="object"&&depth>0){objectsExpanded.push(obj);expansion="{"+newLine;childDepth=depth-1;childIndentation=indentation+"  ";childLines=[];for(i in obj){try{childExpansion=doFormat(obj[i],childDepth,childIndentation);childLines.push(childIndentation+i+": "+childExpansion);}catch(ex){childLines.push(childIndentation+i+": Error formatting property. Details: "+
getExceptionStringRep(ex));}}
expansion+=childLines.join(","+newLine)+newLine+indentation+"}";return expansion;}else{return formatString(toStr(obj));}}
return doFormat(obj,depth,indentation);}
var SimpleDateFormat;(function(){var regex=/('[^']*')|(G+|y+|M+|w+|W+|D+|d+|F+|E+|a+|H+|k+|K+|h+|m+|s+|S+|Z+)|([a-zA-Z]+)|([^a-zA-Z']+)/;var monthNames=["January","February","March","April","May","June","July","August","September","October","November","December"];var dayNames=["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"];var TEXT2=0,TEXT3=1,NUMBER=2,YEAR=3,MONTH=4,TIMEZONE=5;var types={G:TEXT2,y:YEAR,M:MONTH,w:NUMBER,W:NUMBER,D:NUMBER,d:NUMBER,F:NUMBER,E:TEXT3,a:TEXT2,H:NUMBER,k:NUMBER,K:NUMBER,h:NUMBER,m:NUMBER,s:NUMBER,S:NUMBER,Z:TIMEZONE};var ONE_DAY=24*60*60*1000;var ONE_WEEK=7*ONE_DAY;var DEFAULT_MINIMAL_DAYS_IN_FIRST_WEEK=1;var newDateAtMidnight=function(year,month,day){var d=new Date(year,month,day,0,0,0);d.setMilliseconds(0);return d;};Date.prototype.getDifference=function(date){return this.getTime()-date.getTime();};Date.prototype.isBefore=function(d){return this.getTime()<d.getTime();};Date.prototype.getUTCTime=function(){return Date.UTC(this.getFullYear(),this.getMonth(),this.getDate(),this.getHours(),this.getMinutes(),this.getSeconds(),this.getMilliseconds());};Date.prototype.getTimeSince=function(d){return this.getUTCTime()-d.getUTCTime();};Date.prototype.getPreviousSunday=function(){var midday=new Date(this.getFullYear(),this.getMonth(),this.getDate(),12,0,0);var previousSunday=new Date(midday.getTime()-this.getDay()*ONE_DAY);return newDateAtMidnight(previousSunday.getFullYear(),previousSunday.getMonth(),previousSunday.getDate());};Date.prototype.getWeekInYear=function(minimalDaysInFirstWeek){if(isUndefined(this.minimalDaysInFirstWeek)){minimalDaysInFirstWeek=DEFAULT_MINIMAL_DAYS_IN_FIRST_WEEK;}
var previousSunday=this.getPreviousSunday();var startOfYear=newDateAtMidnight(this.getFullYear(),0,1);var numberOfSundays=previousSunday.isBefore(startOfYear)?0:1+Math.floor(previousSunday.getTimeSince(startOfYear)/ONE_WEEK);var numberOfDaysInFirstWeek=7-startOfYear.getDay();var weekInYear=numberOfSundays;if(numberOfDaysInFirstWeek<minimalDaysInFirstWeek){weekInYear--;}
return weekInYear;};Date.prototype.getWeekInMonth=function(minimalDaysInFirstWeek){if(isUndefined(this.minimalDaysInFirstWeek)){minimalDaysInFirstWeek=DEFAULT_MINIMAL_DAYS_IN_FIRST_WEEK;}
var previousSunday=this.getPreviousSunday();var startOfMonth=newDateAtMidnight(this.getFullYear(),this.getMonth(),1);var numberOfSundays=previousSunday.isBefore(startOfMonth)?0:1+Math.floor(previousSunday.getTimeSince(startOfMonth)/ONE_WEEK);var numberOfDaysInFirstWeek=7-startOfMonth.getDay();var weekInMonth=numberOfSundays;if(numberOfDaysInFirstWeek>=minimalDaysInFirstWeek){weekInMonth++;}
return weekInMonth;};Date.prototype.getDayInYear=function(){var startOfYear=newDateAtMidnight(this.getFullYear(),0,1);return 1+Math.floor(this.getTimeSince(startOfYear)/ONE_DAY);};SimpleDateFormat=function(formatString){this.formatString=formatString;};SimpleDateFormat.prototype.setMinimalDaysInFirstWeek=function(days){this.minimalDaysInFirstWeek=days;};SimpleDateFormat.prototype.getMinimalDaysInFirstWeek=function(){return isUndefined(this.minimalDaysInFirstWeek)?DEFAULT_MINIMAL_DAYS_IN_FIRST_WEEK:this.minimalDaysInFirstWeek;};var padWithZeroes=function(str,len){while(str.length<len){str="0"+str;}
return str;};var formatText=function(data,numberOfLetters,minLength){return(numberOfLetters>=4)?data:data.substr(0,Math.max(minLength,numberOfLetters));};var formatNumber=function(data,numberOfLetters){var dataString=""+data;return padWithZeroes(dataString,numberOfLetters);};SimpleDateFormat.prototype.format=function(date){var formattedString="";var result;var searchString=this.formatString;while((result=regex.exec(searchString))){var quotedString=result[1];var patternLetters=result[2];var otherLetters=result[3];var otherCharacters=result[4];if(quotedString){if(quotedString=="''"){formattedString+="'";}else{formattedString+=quotedString.substring(1,quotedString.length-1);}}else if(otherLetters){}else if(otherCharacters){formattedString+=otherCharacters;}else if(patternLetters){var patternLetter=patternLetters.charAt(0);var numberOfLetters=patternLetters.length;var rawData="";switch(patternLetter){case"G":rawData="AD";break;case"y":rawData=date.getFullYear();break;case"M":rawData=date.getMonth();break;case"w":rawData=date.getWeekInYear(this.getMinimalDaysInFirstWeek());break;case"W":rawData=date.getWeekInMonth(this.getMinimalDaysInFirstWeek());break;case"D":rawData=date.getDayInYear();break;case"d":rawData=date.getDate();break;case"F":rawData=1+Math.floor((date.getDate()-1)/7);break;case"E":rawData=dayNames[date.getDay()];break;case"a":rawData=(date.getHours()>=12)?"PM":"AM";break;case"H":rawData=date.getHours();break;case"k":rawData=date.getHours()||24;break;case"K":rawData=date.getHours()%12;break;case"h":rawData=(date.getHours()%12)||12;break;case"m":rawData=date.getMinutes();break;case"s":rawData=date.getSeconds();break;case"S":rawData=date.getMilliseconds();break;case"Z":rawData=date.getTimezoneOffset();break;}
switch(types[patternLetter]){case TEXT2:formattedString+=formatText(rawData,numberOfLetters,2);break;case TEXT3:formattedString+=formatText(rawData,numberOfLetters,3);break;case NUMBER:formattedString+=formatNumber(rawData,numberOfLetters);break;case YEAR:if(numberOfLetters<=3){var dataString=""+rawData;formattedString+=dataString.substr(2,2);}else{formattedString+=formatNumber(rawData,numberOfLetters);}
break;case MONTH:if(numberOfLetters>=3){formattedString+=formatText(monthNames[rawData],numberOfLetters,numberOfLetters);}else{formattedString+=formatNumber(rawData+1,numberOfLetters);}
break;case TIMEZONE:var isPositive=(rawData>0);var prefix=isPositive?"-":"+";var absData=Math.abs(rawData);var hours=""+Math.floor(absData/60);hours=padWithZeroes(hours,2);var minutes=""+(absData%60);minutes=padWithZeroes(minutes,2);formattedString+=prefix+hours+minutes;break;}}
searchString=searchString.substr(result.index+result[0].length);}
return formattedString;};})();log4javascript.SimpleDateFormat=SimpleDateFormat;function PatternLayout(pattern){if(pattern){this.pattern=pattern;}else{this.pattern=PatternLayout.DEFAULT_CONVERSION_PATTERN;}
this.customFields=[];}
PatternLayout.TTCC_CONVERSION_PATTERN="%r %p %c - %m%n";PatternLayout.DEFAULT_CONVERSION_PATTERN="%m%n";PatternLayout.ISO8601_DATEFORMAT="yyyy-MM-dd HH:mm:ss,SSS";PatternLayout.DATETIME_DATEFORMAT="dd MMM yyyy HH:mm:ss,SSS";PatternLayout.ABSOLUTETIME_DATEFORMAT="HH:mm:ss,SSS";PatternLayout.prototype=new Layout();PatternLayout.prototype.format=function(loggingEvent){var regex=/%(-?[0-9]+)?(\.?[0-9]+)?([acdfmMnpr%])(\{([^\}]+)\})?|([^%]+)/;var formattedString="";var result;var searchString=this.pattern;while((result=regex.exec(searchString))){var matchedString=result[0];var padding=result[1];var truncation=result[2];var conversionCharacter=result[3];var specifier=result[5];var text=result[6];if(text){formattedString+=""+text;}else{var replacement="";switch(conversionCharacter){case"a":case"m":var depth=0;if(specifier){depth=parseInt(specifier,10);if(isNaN(depth)){handleError("PatternLayout.format: invalid specifier '"+
specifier+"' for conversion character '"+conversionCharacter+"' - should be a number");depth=0;}}
var messages=(conversionCharacter==="a")?loggingEvent.messages[0]:loggingEvent.messages;for(var i=0,len=messages.length;i<len;i++){if(i>0&&(replacement.charAt(replacement.length-1)!==" ")){replacement+=" ";}
if(depth===0){replacement+=messages[i];}else{replacement+=formatObjectExpansion(messages[i],depth);}}
break;case"c":var loggerName=loggingEvent.logger.name;if(specifier){var precision=parseInt(specifier,10);var loggerNameBits=loggingEvent.logger.name.split(".");if(precision>=loggerNameBits.length){replacement=loggerName;}else{replacement=loggerNameBits.slice(loggerNameBits.length-precision).join(".");}}else{replacement=loggerName;}
break;case"d":var dateFormat=PatternLayout.ISO8601_DATEFORMAT;if(specifier){dateFormat=specifier;if(dateFormat=="ISO8601"){dateFormat=PatternLayout.ISO8601_DATEFORMAT;}else if(dateFormat=="ABSOLUTE"){dateFormat=PatternLayout.ABSOLUTETIME_DATEFORMAT;}else if(dateFormat=="DATE"){dateFormat=PatternLayout.DATETIME_DATEFORMAT;}}
replacement=(new SimpleDateFormat(dateFormat)).format(loggingEvent.timeStamp);break;case"f":if(this.hasCustomFields()){var fieldIndex=0;if(specifier){fieldIndex=parseInt(specifier,10);if(isNaN(fieldIndex)){handleError("PatternLayout.format: invalid specifier '"+
specifier+"' for conversion character 'f' - should be a number");}else if(fieldIndex===0){handleError("PatternLayout.format: invalid specifier '"+
specifier+"' for conversion character 'f' - must be greater than zero");}else if(fieldIndex>this.customFields.length){handleError("PatternLayout.format: invalid specifier '"+
specifier+"' for conversion character 'f' - there aren't that many custom fields");}else{fieldIndex=fieldIndex-1;}}
replacement=this.customFields[fieldIndex].value;}
break;case"n":replacement=newLine;break;case"p":replacement=loggingEvent.level.name;break;case"r":replacement=""+loggingEvent.timeStamp.getDifference(applicationStartDate);break;case"%":replacement="%";break;default:replacement=matchedString;break;}
var l;if(truncation){l=parseInt(truncation.substr(1),10);var strLen=replacement.length;if(l<strLen){replacement=replacement.substring(strLen-l,strLen);}}
if(padding){if(padding.charAt(0)=="-"){l=parseInt(padding.substr(1),10);while(replacement.length<l){replacement+=" ";}}else{l=parseInt(padding,10);while(replacement.length<l){replacement=" "+replacement;}}}
formattedString+=replacement;}
searchString=searchString.substr(result.index+result[0].length);}
return formattedString;};PatternLayout.prototype.ignoresThrowable=function(){return true;};PatternLayout.prototype.toString=function(){return"PatternLayout";};log4javascript.PatternLayout=PatternLayout;function AlertAppender(){}
AlertAppender.prototype=new Appender();AlertAppender.prototype.layout=new SimpleLayout();AlertAppender.prototype.append=function(loggingEvent){var formattedMessage=this.getLayout().format(loggingEvent);if(this.getLayout().ignoresThrowable()){formattedMessage+=loggingEvent.getThrowableStrRep();}
alert(formattedMessage);};AlertAppender.prototype.toString=function(){return"AlertAppender";};log4javascript.AlertAppender=AlertAppender;function BrowserConsoleAppender(){}
BrowserConsoleAppender.prototype=new log4javascript.Appender();BrowserConsoleAppender.prototype.layout=new NullLayout();BrowserConsoleAppender.prototype.threshold=Level.DEBUG;BrowserConsoleAppender.prototype.append=function(loggingEvent){var appender=this;var getFormattedMessage=function(){var layout=appender.getLayout();var formattedMessage=layout.format(loggingEvent);if(layout.ignoresThrowable()&&loggingEvent.exception){formattedMessage+=loggingEvent.getThrowableStrRep();}
return formattedMessage;};if((typeof opera!="undefined")&&opera.postError){opera.postError(getFormattedMessage());}else if(window.console&&window.console.log){var formattedMesage=getFormattedMessage();if(window.console.debug&&Level.DEBUG.isGreaterOrEqual(loggingEvent.level)){window.console.debug(formattedMesage);}else if(window.console.info&&Level.INFO.equals(loggingEvent.level)){window.console.info(formattedMesage);}else if(window.console.warn&&Level.WARN.equals(loggingEvent.level)){window.console.warn(formattedMesage);}else if(window.console.error&&loggingEvent.level.isGreaterOrEqual(Level.ERROR)){window.console.error(formattedMesage);}else{window.console.log(formattedMesage);}}};BrowserConsoleAppender.prototype.group=function(name){if(window.console&&window.console.group){window.console.group(name);}};BrowserConsoleAppender.prototype.groupEnd=function(){if(window.console&&window.console.groupEnd){window.console.groupEnd();}};BrowserConsoleAppender.prototype.toString=function(){return"BrowserConsoleAppender";};log4javascript.BrowserConsoleAppender=BrowserConsoleAppender;function getXmlHttp(errorHandler){var xmlHttp=null;if(typeof XMLHttpRequest=="object"||typeof XMLHttpRequest=="function"){xmlHttp=new XMLHttpRequest();}else{try{xmlHttp=new ActiveXObject("Msxml2.XMLHTTP");}catch(e1){try{xmlHttp=new ActiveXObject("Microsoft.XMLHTTP");}catch(e2){if(errorHandler){errorHandler();}else{handleError("getXmlHttp: unable to obtain XMLHttpRequest object");}}}}
return xmlHttp;}
function isHttpRequestSuccessful(xmlHttp){return(isUndefined(xmlHttp.status)||xmlHttp.status===0||(xmlHttp.status>=200&&xmlHttp.status<300));}
function AjaxAppender(url){var appender=this;var isSupported=true;if(!url){handleError("AjaxAppender: URL must be specified in constructor");isSupported=false;}
var timed=this.defaults.timed;var waitForResponse=this.defaults.waitForResponse;var batchSize=this.defaults.batchSize;var timerInterval=this.defaults.timerInterval;var requestSuccessCallback=this.defaults.requestSuccessCallback;var failCallback=this.defaults.failCallback;var postVarName=this.defaults.postVarName;var sendAllOnUnload=this.defaults.sendAllOnUnload;var sessionId=null;var queuedLoggingEvents=[];var queuedRequests=[];var sending=false;var initialized=false;function checkCanConfigure(configOptionName){if(initialized){handleError("AjaxAppender: configuration option '"+
configOptionName+"' may not be set after the appender has been initialized");return false;}
return true;}
this.getSessionId=function(){return sessionId;};this.setSessionId=function(sessionIdParam){sessionId=extractStringFromParam(sessionIdParam,null);this.layout.setCustomField("sessionid",sessionId);};this.setLayout=function(layoutParam){if(checkCanConfigure("layout")){this.layout=layoutParam;if(sessionId!==null){this.setSessionId(sessionId);}}};this.isTimed=function(){return timed;};this.setTimed=function(timedParam){if(checkCanConfigure("timed")){timed=bool(timedParam);}};this.getTimerInterval=function(){return timerInterval;};this.setTimerInterval=function(timerIntervalParam){if(checkCanConfigure("timerInterval")){timerInterval=extractIntFromParam(timerIntervalParam,timerInterval);}};this.isWaitForResponse=function(){return waitForResponse;};this.setWaitForResponse=function(waitForResponseParam){if(checkCanConfigure("waitForResponse")){waitForResponse=bool(waitForResponseParam);}};this.getBatchSize=function(){return batchSize;};this.setBatchSize=function(batchSizeParam){if(checkCanConfigure("batchSize")){batchSize=extractIntFromParam(batchSizeParam,batchSize);}};this.isSendAllOnUnload=function(){return sendAllOnUnload;};this.setSendAllOnUnload=function(sendAllOnUnloadParam){if(checkCanConfigure("sendAllOnUnload")){sendAllOnUnload=extractIntFromParam(sendAllOnUnloadParam,sendAllOnUnload);}};this.setRequestSuccessCallback=function(requestSuccessCallbackParam){requestSuccessCallback=extractFunctionFromParam(requestSuccessCallbackParam,requestSuccessCallback);};this.setFailCallback=function(failCallbackParam){failCallback=extractFunctionFromParam(failCallbackParam,failCallback);};this.getPostVarName=function(){return postVarName;};this.setPostVarName=function(postVarNameParam){if(checkCanConfigure("postVarName")){postVarName=extractStringFromParam(postVarNameParam,postVarName);}};function sendAll(){if(isSupported&&enabled){sending=true;var currentRequestBatch;if(waitForResponse){if(queuedRequests.length>0){currentRequestBatch=queuedRequests.shift();sendRequest(preparePostData(currentRequestBatch),sendAll);}else{sending=false;if(timed){scheduleSending();}}}else{while((currentRequestBatch=queuedRequests.shift())){sendRequest(preparePostData(currentRequestBatch));}
sending=false;if(timed){scheduleSending();}}}}
this.sendAll=sendAll;function sendAllRemaining(){if(isSupported&&enabled){var actualBatchSize=appender.getLayout().allowBatching()?batchSize:1;var currentLoggingEvent;var postData="";var batchedLoggingEvents=[];while((currentLoggingEvent=queuedLoggingEvents.shift())){batchedLoggingEvents.push(currentLoggingEvent);if(queuedLoggingEvents.length>=actualBatchSize){queuedRequests.push(batchedLoggingEvents);batchedLoggingEvents=[];}}
if(batchedLoggingEvents.length>0){queuedRequests.push(batchedLoggingEvents);}
waitForResponse=false;timed=false;sendAll();}}
function preparePostData(batchedLoggingEvents){var formattedMessages=[];var currentLoggingEvent;var postData="";while((currentLoggingEvent=batchedLoggingEvents.shift())){var currentFormattedMessage=appender.getLayout().format(currentLoggingEvent);if(appender.getLayout().ignoresThrowable()){currentFormattedMessage+=loggingEvent.getThrowableStrRep();}
formattedMessages.push(currentFormattedMessage);}
if(batchedLoggingEvents.length==1){postData=formattedMessages.join("");}else{postData=appender.getLayout().batchHeader+
formattedMessages.join(appender.getLayout().batchSeparator)+
appender.getLayout().batchFooter;}
postData=appender.getLayout().returnsPostData?postData:urlEncode(postVarName)+"="+urlEncode(postData);if(postData.length>0){postData+="&";}
return postData+"layout="+urlEncode(appender.getLayout().toString());}
function scheduleSending(){setTimeout(sendAll,timerInterval);}
function xmlHttpErrorHandler(){var msg="AjaxAppender: could not create XMLHttpRequest object. AjaxAppender disabled";handleError(msg);isSupported=false;if(failCallback){failCallback(msg);}}
function sendRequest(postData,successCallback){try{var xmlHttp=getXmlHttp(xmlHttpErrorHandler);if(isSupported){if(xmlHttp.overrideMimeType){xmlHttp.overrideMimeType(appender.getLayout().getContentType());}
xmlHttp.onreadystatechange=function(){if(xmlHttp.readyState==4){if(isHttpRequestSuccessful(xmlHttp)){if(requestSuccessCallback){requestSuccessCallback(xmlHttp);}
if(successCallback){successCallback(xmlHttp);}}else{var msg="AjaxAppender.append: XMLHttpRequest request to URL "+
url+" returned status code "+xmlHttp.status;handleError(msg);if(failCallback){failCallback(msg);}}
xmlHttp.onreadystatechange=emptyFunction;xmlHttp=null;}};xmlHttp.open("POST",url,true);try{xmlHttp.setRequestHeader("Content-Type","application/x-www-form-urlencoded");}catch(headerEx){var msg="AjaxAppender.append: your browser's XMLHttpRequest implementation"+" does not support setRequestHeader, therefore cannot post data. AjaxAppender disabled";handleError(msg);isSupported=false;if(failCallback){failCallback(msg);}
return;}
xmlHttp.send(postData);}}catch(ex){var errMsg="AjaxAppender.append: error sending log message to "+url;handleError(errMsg,ex);isSupported=false;if(failCallback){failCallback(errMsg+". Details: "+getExceptionStringRep(ex));}}}
this.append=function(loggingEvent){if(isSupported){if(!initialized){init();}
queuedLoggingEvents.push(loggingEvent);var actualBatchSize=this.getLayout().allowBatching()?batchSize:1;if(queuedLoggingEvents.length>=actualBatchSize){var currentLoggingEvent;var postData="";var batchedLoggingEvents=[];while((currentLoggingEvent=queuedLoggingEvents.shift())){batchedLoggingEvents.push(currentLoggingEvent);}
queuedRequests.push(batchedLoggingEvents);if(!timed){if(!waitForResponse||(waitForResponse&&!sending)){sendAll();}}}}};function init(){initialized=true;if(sendAllOnUnload){addEvent(window,"unload",sendAllRemaining);}
if(timed){scheduleSending();}}}
AjaxAppender.prototype=new Appender();AjaxAppender.prototype.defaults={waitForResponse:false,timed:false,timerInterval:1000,batchSize:1,sendAllOnUnload:true,requestSuccessCallback:null,failCallback:null,postVarName:"data"};AjaxAppender.prototype.layout=new HttpPostDataLayout();AjaxAppender.prototype.toString=function(){return"AjaxAppender";};log4javascript.AjaxAppender=AjaxAppender;function setCookie(name,value,days,path){var expires;path=path?"; path="+path:"";if(days){var date=new Date();date.setTime(date.getTime()+(days*24*60*60*1000));expires="; expires="+date.toGMTString();}else{expires="";}
document.cookie=escape(name)+"="+escape(value)+expires+path;}
function getCookie(name){var nameEquals=escape(name)+"=";var ca=document.cookie.split(";");for(var i=0,len=ca.length;i<len;i++){var c=ca[i];while(c.charAt(0)===" "){c=c.substring(1,c.length);}
if(c.indexOf(nameEquals)===0){return unescape(c.substring(nameEquals.length,c.length));}}
return null;}
function getBaseUrl(){var scripts=document.getElementsByTagName("script");for(var i=0,len=scripts.length;i<len;++i){if(scripts[i].src.indexOf("log4javascript")!=-1){var lastSlash=scripts[i].src.lastIndexOf("/");return(lastSlash==-1)?"":scripts[i].src.substr(0,lastSlash+1);}}
return null;}
function isLoaded(win){try{return bool(win.loaded);}catch(ex){return false;}}
var ConsoleAppender;(function(){var getConsoleHtmlLines=function(){return['<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">','<html xmlns="http://www.w3.org/1999/xhtml" lang="en" xml:lang="en">','<head>','<title>log4javascript</title>','<meta http-equiv="Content-Type" content="text/html; charset=utf-8" />','<!-- Make IE8 behave like IE7, having gone to all the trouble of making IE work -->','<meta http-equiv="X-UA-Compatible" content="IE=7" />','<script type="text/javascript">var isIe = false, isIePre7 = false;</script>','<!--[if IE]><script type="text/javascript">isIe = true</script><![endif]-->','<!--[if lt IE 7]><script type="text/javascript">isIePre7 = true</script><![endif]-->','<script type="text/javascript">','//<![CDATA[','var loggingEnabled=true;var logQueuedEventsTimer=null;var logEntries=[];var logEntriesAndSeparators=[];var logItems=[];var renderDelay=100;var unrenderedLogItemsExist=false;var rootGroup,currentGroup=null;var loaded=false;var currentLogItem=null;var logMainContainer;function copyProperties(obj,props){for(var i in props){obj[i]=props[i];}}','function LogItem(){}','LogItem.prototype={mainContainer:null,wrappedContainer:null,unwrappedContainer:null,group:null,appendToLog:function(){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].appendToLog();}','this.group.update();},doRemove:function(doUpdate,removeFromGroup){if(this.rendered){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].remove();}','this.unwrappedElementContainer=null;this.wrappedElementContainer=null;this.mainElementContainer=null;}','if(this.group&&removeFromGroup){this.group.removeChild(this,doUpdate);}','if(this===currentLogItem){currentLogItem=null;}},remove:function(doUpdate,removeFromGroup){this.doRemove(doUpdate,removeFromGroup);},render:function(){},accept:function(visitor){visitor.visit(this);},getUnwrappedDomContainer:function(){return this.group.unwrappedElementContainer.contentDiv;},getWrappedDomContainer:function(){return this.group.wrappedElementContainer.contentDiv;},getMainDomContainer:function(){return this.group.mainElementContainer.contentDiv;}};LogItem.serializedItemKeys={LOG_ENTRY:0,GROUP_START:1,GROUP_END:2};function LogItemContainerElement(){}','LogItemContainerElement.prototype={appendToLog:function(){var insertBeforeFirst=(newestAtTop&&this.containerDomNode.hasChildNodes());if(insertBeforeFirst){this.containerDomNode.insertBefore(this.mainDiv,this.containerDomNode.firstChild);}else{this.containerDomNode.appendChild(this.mainDiv);}}};function SeparatorElementContainer(containerDomNode){this.containerDomNode=containerDomNode;this.mainDiv=document.createElement("div");this.mainDiv.className="separator";this.mainDiv.innerHTML="&nbsp;";}','SeparatorElementContainer.prototype=new LogItemContainerElement();SeparatorElementContainer.prototype.remove=function(){this.mainDiv.parentNode.removeChild(this.mainDiv);this.mainDiv=null;};function Separator(){this.rendered=false;}','Separator.prototype=new LogItem();copyProperties(Separator.prototype,{render:function(){var containerDomNode=this.group.contentDiv;if(isIe){this.unwrappedElementContainer=new SeparatorElementContainer(this.getUnwrappedDomContainer());this.wrappedElementContainer=new SeparatorElementContainer(this.getWrappedDomContainer());this.elementContainers=[this.unwrappedElementContainer,this.wrappedElementContainer];}else{this.mainElementContainer=new SeparatorElementContainer(this.getMainDomContainer());this.elementContainers=[this.mainElementContainer];}','this.content=this.formattedMessage;this.rendered=true;}});function GroupElementContainer(group,containerDomNode,isRoot,isWrapped){this.group=group;this.containerDomNode=containerDomNode;this.isRoot=isRoot;this.isWrapped=isWrapped;this.expandable=false;if(this.isRoot){if(isIe){this.contentDiv=logMainContainer.appendChild(document.createElement("div"));this.contentDiv.id=this.isWrapped?"log_wrapped":"log_unwrapped";}else{this.contentDiv=logMainContainer;}}else{var groupElementContainer=this;this.mainDiv=document.createElement("div");this.mainDiv.className="group";this.headingDiv=this.mainDiv.appendChild(document.createElement("div"));this.headingDiv.className="groupheading";this.expander=this.headingDiv.appendChild(document.createElement("span"));this.expander.className="expander unselectable greyedout";this.expander.unselectable=true;var expanderText=this.group.expanded?"-":"+";this.expanderTextNode=this.expander.appendChild(document.createTextNode(expanderText));this.headingDiv.appendChild(document.createTextNode(" "+this.group.name));this.contentDiv=this.mainDiv.appendChild(document.createElement("div"));var contentCssClass=this.group.expanded?"expanded":"collapsed";this.contentDiv.className="groupcontent "+contentCssClass;this.expander.onclick=function(){if(groupElementContainer.group.expandable){groupElementContainer.group.toggleExpanded();}};}}','GroupElementContainer.prototype=new LogItemContainerElement();copyProperties(GroupElementContainer.prototype,{toggleExpanded:function(){if(!this.isRoot){var oldCssClass,newCssClass,expanderText;if(this.group.expanded){newCssClass="expanded";oldCssClass="collapsed";expanderText="-";}else{newCssClass="collapsed";oldCssClass="expanded";expanderText="+";}','replaceClass(this.contentDiv,newCssClass,oldCssClass);this.expanderTextNode.nodeValue=expanderText;}},remove:function(){if(!this.isRoot){this.headingDiv=null;this.expander.onclick=null;this.expander=null;this.expanderTextNode=null;this.contentDiv=null;this.containerDomNode=null;this.mainDiv.parentNode.removeChild(this.mainDiv);this.mainDiv=null;}},reverseChildren:function(){var node=null;var childDomNodes=[];while((node=this.contentDiv.firstChild)){this.contentDiv.removeChild(node);childDomNodes.push(node);}','while((node=childDomNodes.pop())){this.contentDiv.appendChild(node);}},update:function(){if(!this.isRoot){if(this.group.expandable){removeClass(this.expander,"greyedout");}else{addClass(this.expander,"greyedout");}}},clear:function(){if(this.isRoot){this.contentDiv.innerHTML="";}}});function Group(name,isRoot,initiallyExpanded){this.name=name;this.group=null;this.isRoot=isRoot;this.initiallyExpanded=initiallyExpanded;this.elementContainers=[];this.children=[];this.expanded=initiallyExpanded;this.rendered=false;this.expandable=false;}','Group.prototype=new LogItem();copyProperties(Group.prototype,{addChild:function(logItem){this.children.push(logItem);logItem.group=this;},render:function(){if(isIe){var unwrappedDomContainer,wrappedDomContainer;if(this.isRoot){unwrappedDomContainer=logMainContainer;wrappedDomContainer=logMainContainer;}else{unwrappedDomContainer=this.getUnwrappedDomContainer();wrappedDomContainer=this.getWrappedDomContainer();}','this.unwrappedElementContainer=new GroupElementContainer(this,unwrappedDomContainer,this.isRoot,false);this.wrappedElementContainer=new GroupElementContainer(this,wrappedDomContainer,this.isRoot,true);this.elementContainers=[this.unwrappedElementContainer,this.wrappedElementContainer];}else{var mainDomContainer=this.isRoot?logMainContainer:this.getMainDomContainer();this.mainElementContainer=new GroupElementContainer(this,mainDomContainer,this.isRoot,false);this.elementContainers=[this.mainElementContainer];}','this.rendered=true;},toggleExpanded:function(){this.expanded=!this.expanded;for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].toggleExpanded();}},expand:function(){if(!this.expanded){this.toggleExpanded();}},accept:function(visitor){visitor.visitGroup(this);},reverseChildren:function(){if(this.rendered){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].reverseChildren();}}},update:function(){var previouslyExpandable=this.expandable;this.expandable=(this.children.length!==0);if(this.expandable!==previouslyExpandable){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].update();}}},flatten:function(){var visitor=new GroupFlattener();this.accept(visitor);return visitor.logEntriesAndSeparators;},removeChild:function(child,doUpdate){array_remove(this.children,child);child.group=null;if(doUpdate){this.update();}},remove:function(doUpdate,removeFromGroup){for(var i=0,len=this.children.length;i<len;i++){this.children[i].remove(false,false);}','this.children=[];this.update();if(this===currentGroup){currentGroup=this.group;}','this.doRemove(doUpdate,removeFromGroup);},serialize:function(items){items.push([LogItem.serializedItemKeys.GROUP_START,this.name]);for(var i=0,len=this.children.length;i<len;i++){this.children[i].serialize(items);}','if(this!==currentGroup){items.push([LogItem.serializedItemKeys.GROUP_END]);}},clear:function(){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].clear();}}});function LogEntryElementContainer(){}','LogEntryElementContainer.prototype=new LogItemContainerElement();copyProperties(LogEntryElementContainer.prototype,{remove:function(){this.doRemove();},doRemove:function(){this.mainDiv.parentNode.removeChild(this.mainDiv);this.mainDiv=null;this.contentElement=null;this.containerDomNode=null;},setContent:function(content,wrappedContent){if(content===this.formattedMessage){this.contentElement.innerHTML="";this.contentElement.appendChild(document.createTextNode(this.formattedMessage));}else{this.contentElement.innerHTML=content;}},setSearchMatch:function(isMatch){var oldCssClass=isMatch?"searchnonmatch":"searchmatch";var newCssClass=isMatch?"searchmatch":"searchnonmatch";replaceClass(this.mainDiv,newCssClass,oldCssClass);},clearSearch:function(){removeClass(this.mainDiv,"searchmatch");removeClass(this.mainDiv,"searchnonmatch");}});function LogEntryWrappedElementContainer(logEntry,containerDomNode){this.logEntry=logEntry;this.containerDomNode=containerDomNode;this.mainDiv=document.createElement("div");this.mainDiv.appendChild(document.createTextNode(this.logEntry.formattedMessage));this.mainDiv.className="logentry wrapped "+this.logEntry.level;this.contentElement=this.mainDiv;}','LogEntryWrappedElementContainer.prototype=new LogEntryElementContainer();LogEntryWrappedElementContainer.prototype.setContent=function(content,wrappedContent){if(content===this.formattedMessage){this.contentElement.innerHTML="";this.contentElement.appendChild(document.createTextNode(this.formattedMessage));}else{this.contentElement.innerHTML=wrappedContent;}};function LogEntryUnwrappedElementContainer(logEntry,containerDomNode){this.logEntry=logEntry;this.containerDomNode=containerDomNode;this.mainDiv=document.createElement("div");this.mainDiv.className="logentry unwrapped "+this.logEntry.level;this.pre=this.mainDiv.appendChild(document.createElement("pre"));this.pre.appendChild(document.createTextNode(this.logEntry.formattedMessage));this.pre.className="unwrapped";this.contentElement=this.pre;}','LogEntryUnwrappedElementContainer.prototype=new LogEntryElementContainer();LogEntryUnwrappedElementContainer.prototype.remove=function(){this.doRemove();this.pre=null;};function LogEntryMainElementContainer(logEntry,containerDomNode){this.logEntry=logEntry;this.containerDomNode=containerDomNode;this.mainDiv=document.createElement("div");this.mainDiv.className="logentry nonielogentry "+this.logEntry.level;this.contentElement=this.mainDiv.appendChild(document.createElement("span"));this.contentElement.appendChild(document.createTextNode(this.logEntry.formattedMessage));}','LogEntryMainElementContainer.prototype=new LogEntryElementContainer();function LogEntry(level,formattedMessage){this.level=level;this.formattedMessage=formattedMessage;this.rendered=false;}','LogEntry.prototype=new LogItem();copyProperties(LogEntry.prototype,{render:function(){var logEntry=this;var containerDomNode=this.group.contentDiv;if(isIe){this.formattedMessage=this.formattedMessage.replace(/\\r\\n/g,"\\r");this.unwrappedElementContainer=new LogEntryUnwrappedElementContainer(this,this.getUnwrappedDomContainer());this.wrappedElementContainer=new LogEntryWrappedElementContainer(this,this.getWrappedDomContainer());this.elementContainers=[this.unwrappedElementContainer,this.wrappedElementContainer];}else{this.mainElementContainer=new LogEntryMainElementContainer(this,this.getMainDomContainer());this.elementContainers=[this.mainElementContainer];}','this.content=this.formattedMessage;this.rendered=true;},setContent:function(content,wrappedContent){if(content!=this.content){if(isIe&&(content!==this.formattedMessage)){content=content.replace(/\\r\\n/g,"\\r");}','for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].setContent(content,wrappedContent);}','this.content=content;}},getSearchMatches:function(){var matches=[];var i,len;if(isIe){var unwrappedEls=getElementsByClass(this.unwrappedElementContainer.mainDiv,"searchterm","span");var wrappedEls=getElementsByClass(this.wrappedElementContainer.mainDiv,"searchterm","span");for(i=0,len=unwrappedEls.length;i<len;i++){matches[i]=new Match(this.level,null,unwrappedEls[i],wrappedEls[i]);}}else{var els=getElementsByClass(this.mainElementContainer.mainDiv,"searchterm","span");for(i=0,len=els.length;i<len;i++){matches[i]=new Match(this.level,els[i]);}}','return matches;},setSearchMatch:function(isMatch){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].setSearchMatch(isMatch);}},clearSearch:function(){for(var i=0,len=this.elementContainers.length;i<len;i++){this.elementContainers[i].clearSearch();}},accept:function(visitor){visitor.visitLogEntry(this);},serialize:function(items){items.push([LogItem.serializedItemKeys.LOG_ENTRY,this.level,this.formattedMessage]);}});function LogItemVisitor(){}','LogItemVisitor.prototype={visit:function(logItem){},visitParent:function(logItem){if(logItem.group){logItem.group.accept(this);}},visitChildren:function(logItem){for(var i=0,len=logItem.children.length;i<len;i++){logItem.children[i].accept(this);}},visitLogEntry:function(logEntry){this.visit(logEntry);},visitSeparator:function(separator){this.visit(separator);},visitGroup:function(group){this.visit(group);}};function GroupFlattener(){this.logEntriesAndSeparators=[];}','GroupFlattener.prototype=new LogItemVisitor();GroupFlattener.prototype.visitGroup=function(group){this.visitChildren(group);};GroupFlattener.prototype.visitLogEntry=function(logEntry){this.logEntriesAndSeparators.push(logEntry);};GroupFlattener.prototype.visitSeparator=function(separator){this.logEntriesAndSeparators.push(separator);};window.onload=function(){if(location.search){var queryBits=unescape(location.search).substr(1).split("&"),nameValueBits;for(var i=0,len=queryBits.length;i<len;i++){nameValueBits=queryBits[i].split("=");if(nameValueBits[0]=="log4javascript_domain"){document.domain=nameValueBits[1];break;}}}','logMainContainer=$("log");if(isIePre7){addClass(logMainContainer,"oldIe");}','rootGroup=new Group("root",true);rootGroup.render();currentGroup=rootGroup;setCommandInputWidth();setLogContainerHeight();toggleLoggingEnabled();toggleSearchEnabled();toggleSearchFilter();toggleSearchHighlight();applyFilters();checkAllLevels();toggleWrap();toggleNewestAtTop();toggleScrollToLatest();renderQueuedLogItems();loaded=true;$("command").value="";$("command").autocomplete="off";$("command").onkeydown=function(evt){evt=getEvent(evt);if(evt.keyCode==10||evt.keyCode==13){evalCommandLine();stopPropagation(evt);}else if(evt.keyCode==27){this.value="";this.focus();}else if(evt.keyCode==38&&commandHistory.length>0){currentCommandIndex=Math.max(0,currentCommandIndex-1);this.value=commandHistory[currentCommandIndex];moveCaretToEnd(this);}else if(evt.keyCode==40&&commandHistory.length>0){currentCommandIndex=Math.min(commandHistory.length-1,currentCommandIndex+1);this.value=commandHistory[currentCommandIndex];moveCaretToEnd(this);}};$("command").onkeypress=function(evt){evt=getEvent(evt);if(evt.keyCode==38&&commandHistory.length>0&&evt.preventDefault){evt.preventDefault();}};$("command").onkeyup=function(evt){evt=getEvent(evt);if(evt.keyCode==27&&evt.preventDefault){evt.preventDefault();this.focus();}};document.onkeydown=function keyEventHandler(evt){evt=getEvent(evt);switch(evt.keyCode){case 69:if(evt.shiftKey&&(evt.ctrlKey||evt.metaKey)){evalLastCommand();cancelKeyEvent(evt);return false;}','break;case 75:if(evt.shiftKey&&(evt.ctrlKey||evt.metaKey)){focusSearch();cancelKeyEvent(evt);return false;}','break;case 40:case 76:if(evt.shiftKey&&(evt.ctrlKey||evt.metaKey)){focusCommandLine();cancelKeyEvent(evt);return false;}','break;}};setTimeout(setLogContainerHeight,20);setShowCommandLine(showCommandLine);doSearch();};window.onunload=function(){if(mainWindowExists()){appender.unload();}','appender=null;};function toggleLoggingEnabled(){setLoggingEnabled($("enableLogging").checked);}','function setLoggingEnabled(enable){loggingEnabled=enable;}','var appender=null;function setAppender(appenderParam){appender=appenderParam;}','function setShowCloseButton(showCloseButton){$("closeButton").style.display=showCloseButton?"inline":"none";}','function setShowHideButton(showHideButton){$("hideButton").style.display=showHideButton?"inline":"none";}','var newestAtTop=false;function LogItemContentReverser(){}','LogItemContentReverser.prototype=new LogItemVisitor();LogItemContentReverser.prototype.visitGroup=function(group){group.reverseChildren();this.visitChildren(group);};function setNewestAtTop(isNewestAtTop){var oldNewestAtTop=newestAtTop;var i,iLen,j,jLen;newestAtTop=Boolean(isNewestAtTop);if(oldNewestAtTop!=newestAtTop){var visitor=new LogItemContentReverser();rootGroup.accept(visitor);if(currentSearch){var currentMatch=currentSearch.matches[currentMatchIndex];var matchIndex=0;var matches=[];var actOnLogEntry=function(logEntry){var logEntryMatches=logEntry.getSearchMatches();for(j=0,jLen=logEntryMatches.length;j<jLen;j++){matches[matchIndex]=logEntryMatches[j];if(currentMatch&&logEntryMatches[j].equals(currentMatch)){currentMatchIndex=matchIndex;}','matchIndex++;}};if(newestAtTop){for(i=logEntries.length-1;i>=0;i--){actOnLogEntry(logEntries[i]);}}else{for(i=0,iLen=logEntries.length;i<iLen;i++){actOnLogEntry(logEntries[i]);}}','currentSearch.matches=matches;if(currentMatch){currentMatch.setCurrent();}}else if(scrollToLatest){doScrollToLatest();}}','$("newestAtTop").checked=isNewestAtTop;}','function toggleNewestAtTop(){var isNewestAtTop=$("newestAtTop").checked;setNewestAtTop(isNewestAtTop);}','var scrollToLatest=true;function setScrollToLatest(isScrollToLatest){scrollToLatest=isScrollToLatest;if(scrollToLatest){doScrollToLatest();}','$("scrollToLatest").checked=isScrollToLatest;}','function toggleScrollToLatest(){var isScrollToLatest=$("scrollToLatest").checked;setScrollToLatest(isScrollToLatest);}','function doScrollToLatest(){var l=logMainContainer;if(typeof l.scrollTop!="undefined"){if(newestAtTop){l.scrollTop=0;}else{var latestLogEntry=l.lastChild;if(latestLogEntry){l.scrollTop=l.scrollHeight;}}}}','var closeIfOpenerCloses=true;function setCloseIfOpenerCloses(isCloseIfOpenerCloses){closeIfOpenerCloses=isCloseIfOpenerCloses;}','var maxMessages=null;function setMaxMessages(max){maxMessages=max;pruneLogEntries();}','var showCommandLine=false;function setShowCommandLine(isShowCommandLine){showCommandLine=isShowCommandLine;if(loaded){$("commandLine").style.display=showCommandLine?"block":"none";setCommandInputWidth();setLogContainerHeight();}}','function focusCommandLine(){if(loaded){$("command").focus();}}','function focusSearch(){if(loaded){$("searchBox").focus();}}','function getLogItems(){var items=[];for(var i=0,len=logItems.length;i<len;i++){logItems[i].serialize(items);}','return items;}','function setLogItems(items){var loggingReallyEnabled=loggingEnabled;loggingEnabled=true;for(var i=0,len=items.length;i<len;i++){switch(items[i][0]){case LogItem.serializedItemKeys.LOG_ENTRY:log(items[i][1],items[i][2]);break;case LogItem.serializedItemKeys.GROUP_START:group(items[i][1]);break;case LogItem.serializedItemKeys.GROUP_END:groupEnd();break;}}','loggingEnabled=loggingReallyEnabled;}','function log(logLevel,formattedMessage){if(loggingEnabled){var logEntry=new LogEntry(logLevel,formattedMessage);logEntries.push(logEntry);logEntriesAndSeparators.push(logEntry);logItems.push(logEntry);currentGroup.addChild(logEntry);if(loaded){if(logQueuedEventsTimer!==null){clearTimeout(logQueuedEventsTimer);}','logQueuedEventsTimer=setTimeout(renderQueuedLogItems,renderDelay);unrenderedLogItemsExist=true;}}}','function renderQueuedLogItems(){logQueuedEventsTimer=null;var pruned=pruneLogEntries();var initiallyHasMatches=currentSearch?currentSearch.hasMatches():false;for(var i=0,len=logItems.length;i<len;i++){if(!logItems[i].rendered){logItems[i].render();logItems[i].appendToLog();if(currentSearch&&(logItems[i]instanceof LogEntry)){currentSearch.applyTo(logItems[i]);}}}','if(currentSearch){if(pruned){if(currentSearch.hasVisibleMatches()){if(currentMatchIndex===null){setCurrentMatchIndex(0);}','displayMatches();}else{displayNoMatches();}}else if(!initiallyHasMatches&&currentSearch.hasVisibleMatches()){setCurrentMatchIndex(0);displayMatches();}}','if(scrollToLatest){doScrollToLatest();}','unrenderedLogItemsExist=false;}','function pruneLogEntries(){if((maxMessages!==null)&&(logEntriesAndSeparators.length>maxMessages)){var numberToDelete=logEntriesAndSeparators.length-maxMessages;var prunedLogEntries=logEntriesAndSeparators.slice(0,numberToDelete);if(currentSearch){currentSearch.removeMatches(prunedLogEntries);}','var group;for(var i=0;i<numberToDelete;i++){group=logEntriesAndSeparators[i].group;array_remove(logItems,logEntriesAndSeparators[i]);array_remove(logEntries,logEntriesAndSeparators[i]);logEntriesAndSeparators[i].remove(true,true);if(group.children.length===0&&group!==currentGroup&&group!==rootGroup){array_remove(logItems,group);group.remove(true,true);}}','logEntriesAndSeparators=array_removeFromStart(logEntriesAndSeparators,numberToDelete);return true;}','return false;}','function group(name,startExpanded){if(loggingEnabled){initiallyExpanded=(typeof startExpanded==="undefined")?true:Boolean(startExpanded);var newGroup=new Group(name,false,initiallyExpanded);currentGroup.addChild(newGroup);currentGroup=newGroup;logItems.push(newGroup);if(loaded){if(logQueuedEventsTimer!==null){clearTimeout(logQueuedEventsTimer);}','logQueuedEventsTimer=setTimeout(renderQueuedLogItems,renderDelay);unrenderedLogItemsExist=true;}}}','function groupEnd(){currentGroup=(currentGroup===rootGroup)?rootGroup:currentGroup.group;}','function mainPageReloaded(){currentGroup=rootGroup;var separator=new Separator();logEntriesAndSeparators.push(separator);logItems.push(separator);currentGroup.addChild(separator);}','function closeWindow(){if(appender&&mainWindowExists()){appender.close(true);}else{window.close();}}','function hide(){if(appender&&mainWindowExists()){appender.hide();}}','var mainWindow=window;var windowId="log4javascriptConsoleWindow_"+new Date().getTime()+"_"+(""+Math.random()).substr(2);function setMainWindow(win){mainWindow=win;mainWindow[windowId]=window;if(opener&&closeIfOpenerCloses){pollOpener();}}','function pollOpener(){if(closeIfOpenerCloses){if(mainWindowExists()){setTimeout(pollOpener,500);}else{closeWindow();}}}','function mainWindowExists(){try{return(mainWindow&&!mainWindow.closed&&mainWindow[windowId]==window);}catch(ex){}','return false;}','var logLevels=["TRACE","DEBUG","INFO","WARN","ERROR","FATAL"];function getCheckBox(logLevel){return $("switch_"+logLevel);}','function getIeWrappedLogContainer(){return $("log_wrapped");}','function getIeUnwrappedLogContainer(){return $("log_unwrapped");}','function applyFilters(){for(var i=0;i<logLevels.length;i++){if(getCheckBox(logLevels[i]).checked){addClass(logMainContainer,logLevels[i]);}else{removeClass(logMainContainer,logLevels[i]);}}','updateSearchFromFilters();}','function toggleAllLevels(){var turnOn=$("switch_ALL").checked;for(var i=0;i<logLevels.length;i++){getCheckBox(logLevels[i]).checked=turnOn;if(turnOn){addClass(logMainContainer,logLevels[i]);}else{removeClass(logMainContainer,logLevels[i]);}}}','function checkAllLevels(){for(var i=0;i<logLevels.length;i++){if(!getCheckBox(logLevels[i]).checked){getCheckBox("ALL").checked=false;return;}}','getCheckBox("ALL").checked=true;}','function clearLog(){rootGroup.clear();currentGroup=rootGroup;logEntries=[];logItems=[];logEntriesAndSeparators=[];doSearch();}','function toggleWrap(){var enable=$("wrap").checked;if(enable){addClass(logMainContainer,"wrap");}else{removeClass(logMainContainer,"wrap");}','refreshCurrentMatch();}','var searchTimer=null;function scheduleSearch(){try{clearTimeout(searchTimer);}catch(ex){}','searchTimer=setTimeout(doSearch,500);}','function Search(searchTerm,isRegex,searchRegex,isCaseSensitive){this.searchTerm=searchTerm;this.isRegex=isRegex;this.searchRegex=searchRegex;this.isCaseSensitive=isCaseSensitive;this.matches=[];}','Search.prototype={hasMatches:function(){return this.matches.length>0;},hasVisibleMatches:function(){if(this.hasMatches()){for(var i=0;i<this.matches.length;i++){if(this.matches[i].isVisible()){return true;}}}','return false;},match:function(logEntry){var entryText=String(logEntry.formattedMessage);var matchesSearch=false;if(this.isRegex){matchesSearch=this.searchRegex.test(entryText);}else if(this.isCaseSensitive){matchesSearch=(entryText.indexOf(this.searchTerm)>-1);}else{matchesSearch=(entryText.toLowerCase().indexOf(this.searchTerm.toLowerCase())>-1);}','return matchesSearch;},getNextVisibleMatchIndex:function(){for(var i=currentMatchIndex+1;i<this.matches.length;i++){if(this.matches[i].isVisible()){return i;}}','for(i=0;i<=currentMatchIndex;i++){if(this.matches[i].isVisible()){return i;}}','return-1;},getPreviousVisibleMatchIndex:function(){for(var i=currentMatchIndex-1;i>=0;i--){if(this.matches[i].isVisible()){return i;}}','for(var i=this.matches.length-1;i>=currentMatchIndex;i--){if(this.matches[i].isVisible()){return i;}}','return-1;},applyTo:function(logEntry){var doesMatch=this.match(logEntry);if(doesMatch){logEntry.group.expand();logEntry.setSearchMatch(true);var logEntryContent;var wrappedLogEntryContent;var searchTermReplacementStartTag="<span class=\\\"searchterm\\\">";var searchTermReplacementEndTag="<"+"/span>";var preTagName=isIe?"pre":"span";var preStartTag="<"+preTagName+" class=\\\"pre\\\">";var preEndTag="<"+"/"+preTagName+">";var startIndex=0;var searchIndex,matchedText,textBeforeMatch;if(this.isRegex){var flags=this.isCaseSensitive?"g":"gi";var capturingRegex=new RegExp("("+this.searchRegex.source+")",flags);var rnd=(""+Math.random()).substr(2);var startToken="%%s"+rnd+"%%";var endToken="%%e"+rnd+"%%";logEntryContent=logEntry.formattedMessage.replace(capturingRegex,startToken+"$1"+endToken);logEntryContent=escapeHtml(logEntryContent);var result;var searchString=logEntryContent;logEntryContent="";wrappedLogEntryContent="";while((searchIndex=searchString.indexOf(startToken,startIndex))>-1){var endTokenIndex=searchString.indexOf(endToken,searchIndex);matchedText=searchString.substring(searchIndex+startToken.length,endTokenIndex);textBeforeMatch=searchString.substring(startIndex,searchIndex);logEntryContent+=preStartTag+textBeforeMatch+preEndTag;logEntryContent+=searchTermReplacementStartTag+preStartTag+matchedText+','preEndTag+searchTermReplacementEndTag;if(isIe){wrappedLogEntryContent+=textBeforeMatch+searchTermReplacementStartTag+','matchedText+searchTermReplacementEndTag;}','startIndex=endTokenIndex+endToken.length;}','logEntryContent+=preStartTag+searchString.substr(startIndex)+preEndTag;if(isIe){wrappedLogEntryContent+=searchString.substr(startIndex);}}else{logEntryContent="";wrappedLogEntryContent="";var searchTermReplacementLength=searchTermReplacementStartTag.length+','this.searchTerm.length+searchTermReplacementEndTag.length;var searchTermLength=this.searchTerm.length;var searchTermLowerCase=this.searchTerm.toLowerCase();var logTextLowerCase=logEntry.formattedMessage.toLowerCase();while((searchIndex=logTextLowerCase.indexOf(searchTermLowerCase,startIndex))>-1){matchedText=escapeHtml(logEntry.formattedMessage.substr(searchIndex,this.searchTerm.length));textBeforeMatch=escapeHtml(logEntry.formattedMessage.substring(startIndex,searchIndex));var searchTermReplacement=searchTermReplacementStartTag+','preStartTag+matchedText+preEndTag+searchTermReplacementEndTag;logEntryContent+=preStartTag+textBeforeMatch+preEndTag+searchTermReplacement;if(isIe){wrappedLogEntryContent+=textBeforeMatch+searchTermReplacementStartTag+','matchedText+searchTermReplacementEndTag;}','startIndex=searchIndex+searchTermLength;}','var textAfterLastMatch=escapeHtml(logEntry.formattedMessage.substr(startIndex));logEntryContent+=preStartTag+textAfterLastMatch+preEndTag;if(isIe){wrappedLogEntryContent+=textAfterLastMatch;}}','logEntry.setContent(logEntryContent,wrappedLogEntryContent);var logEntryMatches=logEntry.getSearchMatches();this.matches=this.matches.concat(logEntryMatches);}else{logEntry.setSearchMatch(false);logEntry.setContent(logEntry.formattedMessage,logEntry.formattedMessage);}','return doesMatch;},removeMatches:function(logEntries){var matchesToRemoveCount=0;var currentMatchRemoved=false;var matchesToRemove=[];var i,iLen,j,jLen;for(i=0,iLen=this.matches.length;i<iLen;i++){for(j=0,jLen=logEntries.length;j<jLen;j++){if(this.matches[i].belongsTo(logEntries[j])){matchesToRemove.push(this.matches[i]);if(i===currentMatchIndex){currentMatchRemoved=true;}}}}','var newMatch=currentMatchRemoved?null:this.matches[currentMatchIndex];if(currentMatchRemoved){for(i=currentMatchIndex,iLen=this.matches.length;i<iLen;i++){if(this.matches[i].isVisible()&&!array_contains(matchesToRemove,this.matches[i])){newMatch=this.matches[i];break;}}}','for(i=0,iLen=matchesToRemove.length;i<iLen;i++){array_remove(this.matches,matchesToRemove[i]);matchesToRemove[i].remove();}','if(this.hasVisibleMatches()){if(newMatch===null){setCurrentMatchIndex(0);}else{var newMatchIndex=0;for(i=0,iLen=this.matches.length;i<iLen;i++){if(newMatch===this.matches[i]){newMatchIndex=i;break;}}','setCurrentMatchIndex(newMatchIndex);}}else{currentMatchIndex=null;displayNoMatches();}}};function getPageOffsetTop(el,container){var currentEl=el;var y=0;while(currentEl&&currentEl!=container){y+=currentEl.offsetTop;currentEl=currentEl.offsetParent;}','return y;}','function scrollIntoView(el){var logContainer=logMainContainer;if(!$("wrap").checked){var logContainerLeft=logContainer.scrollLeft;var logContainerRight=logContainerLeft+logContainer.offsetWidth;var elLeft=el.offsetLeft;var elRight=elLeft+el.offsetWidth;if(elLeft<logContainerLeft||elRight>logContainerRight){logContainer.scrollLeft=elLeft-(logContainer.offsetWidth-el.offsetWidth)/2;}}','var logContainerTop=logContainer.scrollTop;var logContainerBottom=logContainerTop+logContainer.offsetHeight;var elTop=getPageOffsetTop(el)-getToolBarsHeight();var elBottom=elTop+el.offsetHeight;if(elTop<logContainerTop||elBottom>logContainerBottom){logContainer.scrollTop=elTop-(logContainer.offsetHeight-el.offsetHeight)/2;}}','function Match(logEntryLevel,spanInMainDiv,spanInUnwrappedPre,spanInWrappedDiv){this.logEntryLevel=logEntryLevel;this.spanInMainDiv=spanInMainDiv;if(isIe){this.spanInUnwrappedPre=spanInUnwrappedPre;this.spanInWrappedDiv=spanInWrappedDiv;}','this.mainSpan=isIe?spanInUnwrappedPre:spanInMainDiv;}','Match.prototype={equals:function(match){return this.mainSpan===match.mainSpan;},setCurrent:function(){if(isIe){addClass(this.spanInUnwrappedPre,"currentmatch");addClass(this.spanInWrappedDiv,"currentmatch");var elementToScroll=$("wrap").checked?this.spanInWrappedDiv:this.spanInUnwrappedPre;scrollIntoView(elementToScroll);}else{addClass(this.spanInMainDiv,"currentmatch");scrollIntoView(this.spanInMainDiv);}},belongsTo:function(logEntry){if(isIe){return isDescendant(this.spanInUnwrappedPre,logEntry.unwrappedPre);}else{return isDescendant(this.spanInMainDiv,logEntry.mainDiv);}},setNotCurrent:function(){if(isIe){removeClass(this.spanInUnwrappedPre,"currentmatch");removeClass(this.spanInWrappedDiv,"currentmatch");}else{removeClass(this.spanInMainDiv,"currentmatch");}},isOrphan:function(){return isOrphan(this.mainSpan);},isVisible:function(){return getCheckBox(this.logEntryLevel).checked;},remove:function(){if(isIe){this.spanInUnwrappedPre=null;this.spanInWrappedDiv=null;}else{this.spanInMainDiv=null;}}};var currentSearch=null;var currentMatchIndex=null;function doSearch(){var searchBox=$("searchBox");var searchTerm=searchBox.value;var isRegex=$("searchRegex").checked;var isCaseSensitive=$("searchCaseSensitive").checked;var i;if(searchTerm===""){$("searchReset").disabled=true;$("searchNav").style.display="none";removeClass(document.body,"searching");removeClass(searchBox,"hasmatches");removeClass(searchBox,"nomatches");for(i=0;i<logEntries.length;i++){logEntries[i].clearSearch();logEntries[i].setContent(logEntries[i].formattedMessage,logEntries[i].formattedMessage);}','currentSearch=null;setLogContainerHeight();}else{$("searchReset").disabled=false;$("searchNav").style.display="block";var searchRegex;var regexValid;if(isRegex){try{searchRegex=isCaseSensitive?new RegExp(searchTerm,"g"):new RegExp(searchTerm,"gi");regexValid=true;replaceClass(searchBox,"validregex","invalidregex");searchBox.title="Valid regex";}catch(ex){regexValid=false;replaceClass(searchBox,"invalidregex","validregex");searchBox.title="Invalid regex: "+(ex.message?ex.message:(ex.description?ex.description:"unknown error"));return;}}else{searchBox.title="";removeClass(searchBox,"validregex");removeClass(searchBox,"invalidregex");}','addClass(document.body,"searching");currentSearch=new Search(searchTerm,isRegex,searchRegex,isCaseSensitive);for(i=0;i<logEntries.length;i++){currentSearch.applyTo(logEntries[i]);}','setLogContainerHeight();if(currentSearch.hasVisibleMatches()){setCurrentMatchIndex(0);displayMatches();}else{displayNoMatches();}}}','function updateSearchFromFilters(){if(currentSearch){if(currentSearch.hasMatches()){if(currentMatchIndex===null){currentMatchIndex=0;}','var currentMatch=currentSearch.matches[currentMatchIndex];if(currentMatch.isVisible()){displayMatches();setCurrentMatchIndex(currentMatchIndex);}else{currentMatch.setNotCurrent();var nextVisibleMatchIndex=currentSearch.getNextVisibleMatchIndex();if(nextVisibleMatchIndex>-1){setCurrentMatchIndex(nextVisibleMatchIndex);displayMatches();}else{displayNoMatches();}}}else{displayNoMatches();}}}','function refreshCurrentMatch(){if(currentSearch&&currentSearch.hasVisibleMatches()){setCurrentMatchIndex(currentMatchIndex);}}','function displayMatches(){replaceClass($("searchBox"),"hasmatches","nomatches");$("searchBox").title=""+currentSearch.matches.length+" matches found";$("searchNav").style.display="block";setLogContainerHeight();}','function displayNoMatches(){replaceClass($("searchBox"),"nomatches","hasmatches");$("searchBox").title="No matches found";$("searchNav").style.display="none";setLogContainerHeight();}','function toggleSearchEnabled(enable){enable=(typeof enable=="undefined")?!$("searchDisable").checked:enable;$("searchBox").disabled=!enable;$("searchReset").disabled=!enable;$("searchRegex").disabled=!enable;$("searchNext").disabled=!enable;$("searchPrevious").disabled=!enable;$("searchCaseSensitive").disabled=!enable;$("searchNav").style.display=(enable&&($("searchBox").value!=="")&&currentSearch&&currentSearch.hasVisibleMatches())?"block":"none";if(enable){removeClass($("search"),"greyedout");addClass(document.body,"searching");if($("searchHighlight").checked){addClass(logMainContainer,"searchhighlight");}else{removeClass(logMainContainer,"searchhighlight");}','if($("searchFilter").checked){addClass(logMainContainer,"searchfilter");}else{removeClass(logMainContainer,"searchfilter");}','$("searchDisable").checked=!enable;}else{addClass($("search"),"greyedout");removeClass(document.body,"searching");removeClass(logMainContainer,"searchhighlight");removeClass(logMainContainer,"searchfilter");}','setLogContainerHeight();}','function toggleSearchFilter(){var enable=$("searchFilter").checked;if(enable){addClass(logMainContainer,"searchfilter");}else{removeClass(logMainContainer,"searchfilter");}','refreshCurrentMatch();}','function toggleSearchHighlight(){var enable=$("searchHighlight").checked;if(enable){addClass(logMainContainer,"searchhighlight");}else{removeClass(logMainContainer,"searchhighlight");}}','function clearSearch(){$("searchBox").value="";doSearch();}','function searchNext(){if(currentSearch!==null&&currentMatchIndex!==null){currentSearch.matches[currentMatchIndex].setNotCurrent();var nextMatchIndex=currentSearch.getNextVisibleMatchIndex();if(nextMatchIndex>currentMatchIndex||confirm("Reached the end of the page. Start from the top?")){setCurrentMatchIndex(nextMatchIndex);}}}','function searchPrevious(){if(currentSearch!==null&&currentMatchIndex!==null){currentSearch.matches[currentMatchIndex].setNotCurrent();var previousMatchIndex=currentSearch.getPreviousVisibleMatchIndex();if(previousMatchIndex<currentMatchIndex||confirm("Reached the start of the page. Continue from the bottom?")){setCurrentMatchIndex(previousMatchIndex);}}}','function setCurrentMatchIndex(index){currentMatchIndex=index;currentSearch.matches[currentMatchIndex].setCurrent();}','function addClass(el,cssClass){if(!hasClass(el,cssClass)){if(el.className){el.className+=" "+cssClass;}else{el.className=cssClass;}}}','function hasClass(el,cssClass){if(el.className){var classNames=el.className.split(" ");return array_contains(classNames,cssClass);}','return false;}','function removeClass(el,cssClass){if(hasClass(el,cssClass)){var existingClasses=el.className.split(" ");var newClasses=[];for(var i=0,len=existingClasses.length;i<len;i++){if(existingClasses[i]!=cssClass){newClasses[newClasses.length]=existingClasses[i];}}','el.className=newClasses.join(" ");}}','function replaceClass(el,newCssClass,oldCssClass){removeClass(el,oldCssClass);addClass(el,newCssClass);}','function getElementsByClass(el,cssClass,tagName){var elements=el.getElementsByTagName(tagName);var matches=[];for(var i=0,len=elements.length;i<len;i++){if(hasClass(elements[i],cssClass)){matches.push(elements[i]);}}','return matches;}','function $(id){return document.getElementById(id);}','function isDescendant(node,ancestorNode){while(node!=null){if(node===ancestorNode){return true;}','node=node.parentNode;}','return false;}','function isOrphan(node){var currentNode=node;while(currentNode){if(currentNode==document.body){return false;}','currentNode=currentNode.parentNode;}','return true;}','function escapeHtml(str){return str.replace(/&/g,"&amp;").replace(/[<]/g,"&lt;").replace(/>/g,"&gt;");}','function getWindowWidth(){if(window.innerWidth){return window.innerWidth;}else if(document.documentElement&&document.documentElement.clientWidth){return document.documentElement.clientWidth;}else if(document.body){return document.body.clientWidth;}','return 0;}','function getWindowHeight(){if(window.innerHeight){return window.innerHeight;}else if(document.documentElement&&document.documentElement.clientHeight){return document.documentElement.clientHeight;}else if(document.body){return document.body.clientHeight;}','return 0;}','function getToolBarsHeight(){return $("switches").offsetHeight;}','function getChromeHeight(){var height=getToolBarsHeight();if(showCommandLine){height+=$("commandLine").offsetHeight;}','return height;}','function setLogContainerHeight(){if(logMainContainer){var windowHeight=getWindowHeight();$("body").style.height=getWindowHeight()+"px";logMainContainer.style.height=""+','Math.max(0,windowHeight-getChromeHeight())+"px";}}','function setCommandInputWidth(){if(showCommandLine){$("command").style.width=""+Math.max(0,$("commandLineContainer").offsetWidth-','($("evaluateButton").offsetWidth+13))+"px";}}','window.onresize=function(){setCommandInputWidth();setLogContainerHeight();};if(!Array.prototype.push){Array.prototype.push=function(){for(var i=0,len=arguments.length;i<len;i++){this[this.length]=arguments[i];}','return this.length;};}','if(!Array.prototype.pop){Array.prototype.pop=function(){if(this.length>0){var val=this[this.length-1];this.length=this.length-1;return val;}};}','if(!Array.prototype.shift){Array.prototype.shift=function(){if(this.length>0){var firstItem=this[0];for(var i=0,len=this.length-1;i<len;i++){this[i]=this[i+1];}','this.length=this.length-1;return firstItem;}};}','if(!Array.prototype.splice){Array.prototype.splice=function(startIndex,deleteCount){var itemsAfterDeleted=this.slice(startIndex+deleteCount);var itemsDeleted=this.slice(startIndex,startIndex+deleteCount);this.length=startIndex;var argumentsArray=[];for(var i=0,len=arguments.length;i<len;i++){argumentsArray[i]=arguments[i];}','var itemsToAppend=(argumentsArray.length>2)?itemsAfterDeleted=argumentsArray.slice(2).concat(itemsAfterDeleted):itemsAfterDeleted;for(i=0,len=itemsToAppend.length;i<len;i++){this.push(itemsToAppend[i]);}','return itemsDeleted;};}','function array_remove(arr,val){var index=-1;for(var i=0,len=arr.length;i<len;i++){if(arr[i]===val){index=i;break;}}','if(index>=0){arr.splice(index,1);return index;}else{return false;}}','function array_removeFromStart(array,numberToRemove){if(Array.prototype.splice){array.splice(0,numberToRemove);}else{for(var i=numberToRemove,len=array.length;i<len;i++){array[i-numberToRemove]=array[i];}','array.length=array.length-numberToRemove;}','return array;}','function array_contains(arr,val){for(var i=0,len=arr.length;i<len;i++){if(arr[i]==val){return true;}}','return false;}','function getErrorMessage(ex){if(ex.message){return ex.message;}else if(ex.description){return ex.description;}','return""+ex;}','function moveCaretToEnd(input){if(input.setSelectionRange){input.focus();var length=input.value.length;input.setSelectionRange(length,length);}else if(input.createTextRange){var range=input.createTextRange();range.collapse(false);range.select();}','input.focus();}','function stopPropagation(evt){if(evt.stopPropagation){evt.stopPropagation();}else if(typeof evt.cancelBubble!="undefined"){evt.cancelBubble=true;}}','function getEvent(evt){return evt?evt:event;}','function getTarget(evt){return evt.target?evt.target:evt.srcElement;}','function getRelatedTarget(evt){if(evt.relatedTarget){return evt.relatedTarget;}else if(evt.srcElement){switch(evt.type){case"mouseover":return evt.fromElement;case"mouseout":return evt.toElement;default:return evt.srcElement;}}}','function cancelKeyEvent(evt){evt.returnValue=false;stopPropagation(evt);}','function evalCommandLine(){var expr=$("command").value;evalCommand(expr);$("command").value="";}','function evalLastCommand(){if(lastCommand!=null){evalCommand(lastCommand);}}','var lastCommand=null;var commandHistory=[];var currentCommandIndex=0;function evalCommand(expr){if(appender){appender.evalCommandAndAppend(expr);}else{var prefix=">>> "+expr+"\\r\\n";try{log("INFO",prefix+eval(expr));}catch(ex){log("ERROR",prefix+"Error: "+getErrorMessage(ex));}}','if(expr!=commandHistory[commandHistory.length-1]){commandHistory.push(expr);if(appender){appender.storeCommandHistory(commandHistory);}}','currentCommandIndex=(expr==commandHistory[currentCommandIndex])?currentCommandIndex+1:commandHistory.length;lastCommand=expr;}','//]]>','</script>','<style type="text/css">','body{background-color:white;color:black;padding:0;margin:0;font-family:tahoma,verdana,arial,helvetica,sans-serif;overflow:hidden}div#switchesContainer input{margin-bottom:0}div.toolbar{border-top:solid #ffffff 1px;border-bottom:solid #aca899 1px;background-color:#f1efe7;padding:3px 5px;font-size:68.75%}div.toolbar,div#search input{font-family:tahoma,verdana,arial,helvetica,sans-serif}div.toolbar input.button{padding:0 5px;font-size:100%}div.toolbar input.hidden{display:none}div#switches input#clearButton{margin-left:20px}div#levels label{font-weight:bold}div#levels label,div#options label{margin-right:5px}div#levels label#wrapLabel{font-weight:normal}div#search label{margin-right:10px}div#search label.searchboxlabel{margin-right:0}div#search input{font-size:100%}div#search input.validregex{color:green}div#search input.invalidregex{color:red}div#search input.nomatches{color:white;background-color:#ff6666}div#search input.nomatches{color:white;background-color:#ff6666}div#searchNav{display:none}div#commandLine{display:none}div#commandLine input#command{font-size:100%;font-family:Courier New,Courier}div#commandLine input#evaluateButton{}*.greyedout{color:gray !important;border-color:gray !important}*.greyedout *.alwaysenabled{color:black}*.unselectable{-khtml-user-select:none;-moz-user-select:none;user-select:none}div#log{font-family:Courier New,Courier;font-size:75%;width:100%;overflow:auto;clear:both;position:relative}div.group{border-color:#cccccc;border-style:solid;border-width:1px 0 1px 1px;overflow:visible}div.oldIe div.group,div.oldIe div.group *,div.oldIe *.logentry{height:1%}div.group div.groupheading span.expander{border:solid black 1px;font-family:Courier New,Courier;font-size:0.833em;background-color:#eeeeee;position:relative;top:-1px;color:black;padding:0 2px;cursor:pointer;cursor:hand;height:1%}div.group div.groupcontent{margin-left:10px;padding-bottom:2px;overflow:visible}div.group div.expanded{display:block}div.group div.collapsed{display:none}*.logentry{overflow:visible;display:none;white-space:pre}span.pre{white-space:pre}pre.unwrapped{display:inline !important}pre.unwrapped pre.pre,div.wrapped pre.pre{display:inline}div.wrapped pre.pre{white-space:normal}div.wrapped{display:none}body.searching *.logentry span.currentmatch{color:white !important;background-color:green !important}body.searching div.searchhighlight *.logentry span.searchterm{color:black;background-color:yellow}div.wrap *.logentry{white-space:normal !important;border-width:0 0 1px 0;border-color:#dddddd;border-style:dotted}div.wrap #log_wrapped,#log_unwrapped{display:block}div.wrap #log_unwrapped,#log_wrapped{display:none}div.wrap *.logentry span.pre{overflow:visible;white-space:normal}div.wrap *.logentry pre.unwrapped{display:none}div.wrap *.logentry span.wrapped{display:inline}div.searchfilter *.searchnonmatch{display:none !important}div#log *.TRACE,label#label_TRACE{color:#666666}div#log *.DEBUG,label#label_DEBUG{color:green}div#log *.INFO,label#label_INFO{color:#000099}div#log *.WARN,label#label_WARN{color:#999900}div#log *.ERROR,label#label_ERROR{color:red}div#log *.FATAL,label#label_FATAL{color:#660066}div.TRACE#log *.TRACE,div.DEBUG#log *.DEBUG,div.INFO#log *.INFO,div.WARN#log *.WARN,div.ERROR#log *.ERROR,div.FATAL#log *.FATAL{display:block}div#log div.separator{background-color:#cccccc;margin:5px 0;line-height:1px}','</style>','</head>','<body id="body">','<div id="switchesContainer">','<div id="switches">','<div id="levels" class="toolbar">','Filters:','<input type="checkbox" id="switch_TRACE" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide trace messages" /><label for="switch_TRACE" id="label_TRACE">trace</label>','<input type="checkbox" id="switch_DEBUG" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide debug messages" /><label for="switch_DEBUG" id="label_DEBUG">debug</label>','<input type="checkbox" id="switch_INFO" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide info messages" /><label for="switch_INFO" id="label_INFO">info</label>','<input type="checkbox" id="switch_WARN" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide warn messages" /><label for="switch_WARN" id="label_WARN">warn</label>','<input type="checkbox" id="switch_ERROR" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide error messages" /><label for="switch_ERROR" id="label_ERROR">error</label>','<input type="checkbox" id="switch_FATAL" onclick="applyFilters(); checkAllLevels()" checked="checked" title="Show/hide fatal messages" /><label for="switch_FATAL" id="label_FATAL">fatal</label>','<input type="checkbox" id="switch_ALL" onclick="toggleAllLevels(); applyFilters()" checked="checked" title="Show/hide all messages" /><label for="switch_ALL" id="label_ALL">all</label>','</div>','<div id="search" class="toolbar">','<label for="searchBox" class="searchboxlabel">Search:</label> <input type="text" id="searchBox" onclick="toggleSearchEnabled(true)" onkeyup="scheduleSearch()" size="20" />','<input type="button" id="searchReset" disabled="disabled" value="Reset" onclick="clearSearch()" class="button" title="Reset the search" />','<input type="checkbox" id="searchRegex" onclick="doSearch()" title="If checked, search is treated as a regular expression" /><label for="searchRegex">Regex</label>','<input type="checkbox" id="searchCaseSensitive" onclick="doSearch()" title="If checked, search is case sensitive" /><label for="searchCaseSensitive">Match case</label>','<input type="checkbox" id="searchDisable" onclick="toggleSearchEnabled()" title="Enable/disable search" /><label for="searchDisable" class="alwaysenabled">Disable</label>','<div id="searchNav">','<input type="button" id="searchNext" disabled="disabled" value="Next" onclick="searchNext()" class="button" title="Go to the next matching log entry" />','<input type="button" id="searchPrevious" disabled="disabled" value="Previous" onclick="searchPrevious()" class="button" title="Go to the previous matching log entry" />','<input type="checkbox" id="searchFilter" onclick="toggleSearchFilter()" title="If checked, non-matching log entries are filtered out" /><label for="searchFilter">Filter</label>','<input type="checkbox" id="searchHighlight" onclick="toggleSearchHighlight()" title="Highlight matched search terms" /><label for="searchHighlight" class="alwaysenabled">Highlight all</label>','</div>','</div>','<div id="options" class="toolbar">','Options:','<input type="checkbox" id="enableLogging" onclick="toggleLoggingEnabled()" checked="checked" title="Enable/disable logging" /><label for="enableLogging" id="enableLoggingLabel">Log</label>','<input type="checkbox" id="wrap" onclick="toggleWrap()" title="Enable / disable word wrap" /><label for="wrap" id="wrapLabel">Wrap</label>','<input type="checkbox" id="newestAtTop" onclick="toggleNewestAtTop()" title="If checked, causes newest messages to appear at the top" /><label for="newestAtTop" id="newestAtTopLabel">Newest at the top</label>','<input type="checkbox" id="scrollToLatest" onclick="toggleScrollToLatest()" checked="checked" title="If checked, window automatically scrolls to a new message when it is added" /><label for="scrollToLatest" id="scrollToLatestLabel">Scroll to latest</label>','<input type="button" id="clearButton" value="Clear" onclick="clearLog()" class="button" title="Clear all log messages"  />','<input type="button" id="hideButton" value="Hide" onclick="hide()" class="hidden button" title="Hide the console" />','<input type="button" id="closeButton" value="Close" onclick="closeWindow()" class="hidden button" title="Close the window" />','</div>','</div>','</div>','<div id="log" class="TRACE DEBUG INFO WARN ERROR FATAL"></div>','<div id="commandLine" class="toolbar">','<div id="commandLineContainer">','<input type="text" id="command" title="Enter a JavaScript command here and hit return or press \'Evaluate\'" />','<input type="button" id="evaluateButton" value="Evaluate" class="button" title="Evaluate the command" onclick="evalCommandLine()" />','</div>','</div>','</body>','</html>',''];};var defaultCommandLineFunctions=[];ConsoleAppender=function(){};var consoleAppenderIdCounter=1;ConsoleAppender.prototype=new Appender();ConsoleAppender.prototype.create=function(inPage,container,lazyInit,initiallyMinimized,useDocumentWrite,width,height,focusConsoleWindow){var appender=this;var initialized=false;var consoleWindowCreated=false;var consoleWindowLoaded=false;var consoleClosed=false;var queuedLoggingEvents=[];var isSupported=true;var consoleAppenderId=consoleAppenderIdCounter++;initiallyMinimized=extractBooleanFromParam(initiallyMinimized,this.defaults.initiallyMinimized);lazyInit=extractBooleanFromParam(lazyInit,this.defaults.lazyInit);useDocumentWrite=extractBooleanFromParam(useDocumentWrite,this.defaults.useDocumentWrite);var newestMessageAtTop=this.defaults.newestMessageAtTop;var scrollToLatestMessage=this.defaults.scrollToLatestMessage;width=width?width:this.defaults.width;height=height?height:this.defaults.height;var maxMessages=this.defaults.maxMessages;var showCommandLine=this.defaults.showCommandLine;var commandLineObjectExpansionDepth=this.defaults.commandLineObjectExpansionDepth;var showHideButton=this.defaults.showHideButton;var showCloseButton=this.defaults.showCloseButton;var showLogEntryDeleteButtons=this.defaults.showLogEntryDeleteButtons;this.setLayout(this.defaults.layout);var init,createWindow,safeToAppend,getConsoleWindow,open;var appenderName=inPage?"InPageAppender":"PopUpAppender";var checkCanConfigure=function(configOptionName){if(consoleWindowCreated){handleError(appenderName+": configuration option '"+configOptionName+"' may not be set after the appender has been initialized");return false;}
return true;};var consoleWindowExists=function(){return(consoleWindowLoaded&&isSupported&&!consoleClosed);};this.isNewestMessageAtTop=function(){return newestMessageAtTop;};this.setNewestMessageAtTop=function(newestMessageAtTopParam){newestMessageAtTop=bool(newestMessageAtTopParam);if(consoleWindowExists()){getConsoleWindow().setNewestAtTop(newestMessageAtTop);}};this.isScrollToLatestMessage=function(){return scrollToLatestMessage;};this.setScrollToLatestMessage=function(scrollToLatestMessageParam){scrollToLatestMessage=bool(scrollToLatestMessageParam);if(consoleWindowExists()){getConsoleWindow().setScrollToLatest(scrollToLatestMessage);}};this.getWidth=function(){return width;};this.setWidth=function(widthParam){if(checkCanConfigure("width")){width=extractStringFromParam(widthParam,width);}};this.getHeight=function(){return height;};this.setHeight=function(heightParam){if(checkCanConfigure("height")){height=extractStringFromParam(heightParam,height);}};this.getMaxMessages=function(){return maxMessages;};this.setMaxMessages=function(maxMessagesParam){maxMessages=extractIntFromParam(maxMessagesParam,maxMessages);if(consoleWindowExists()){getConsoleWindow().setMaxMessages(maxMessages);}};this.isShowCommandLine=function(){return showCommandLine;};this.setShowCommandLine=function(showCommandLineParam){showCommandLine=bool(showCommandLineParam);if(consoleWindowExists()){getConsoleWindow().setShowCommandLine(showCommandLine);}};this.isShowHideButton=function(){return showHideButton;};this.setShowHideButton=function(showHideButtonParam){showHideButton=bool(showHideButtonParam);if(consoleWindowExists()){getConsoleWindow().setShowHideButton(showHideButton);}};this.isShowCloseButton=function(){return showCloseButton;};this.setShowCloseButton=function(showCloseButtonParam){showCloseButton=bool(showCloseButtonParam);if(consoleWindowExists()){getConsoleWindow().setShowCloseButton(showCloseButton);}};this.getCommandLineObjectExpansionDepth=function(){return commandLineObjectExpansionDepth;};this.setCommandLineObjectExpansionDepth=function(commandLineObjectExpansionDepthParam){commandLineObjectExpansionDepth=extractIntFromParam(commandLineObjectExpansionDepthParam,commandLineObjectExpansionDepth);};var minimized=initiallyMinimized;this.isInitiallyMinimized=function(){return initiallyMinimized;};this.setInitiallyMinimized=function(initiallyMinimizedParam){if(checkCanConfigure("initiallyMinimized")){initiallyMinimized=bool(initiallyMinimizedParam);minimized=initiallyMinimized;}};this.isUseDocumentWrite=function(){return useDocumentWrite;};this.setUseDocumentWrite=function(useDocumentWriteParam){if(checkCanConfigure("useDocumentWrite")){useDocumentWrite=bool(useDocumentWriteParam);}};function QueuedLoggingEvent(loggingEvent,formattedMessage){this.loggingEvent=loggingEvent;this.levelName=loggingEvent.level.name;this.formattedMessage=formattedMessage;}
QueuedLoggingEvent.prototype.append=function(){getConsoleWindow().log(this.levelName,this.formattedMessage);};function QueuedGroup(name,initiallyExpanded){this.name=name;this.initiallyExpanded=initiallyExpanded;}
QueuedGroup.prototype.append=function(){getConsoleWindow().group(this.name,this.initiallyExpanded);};function QueuedGroupEnd(){}
QueuedGroupEnd.prototype.append=function(){getConsoleWindow().groupEnd();};var checkAndAppend=function(){safeToAppend();if(!initialized){init();}else if(consoleClosed&&reopenWhenClosed){createWindow();}
if(safeToAppend()){appendQueuedLoggingEvents();}};this.append=function(loggingEvent){if(isSupported){var formattedMessage=appender.getLayout().format(loggingEvent);if(this.getLayout().ignoresThrowable()){formattedMessage+=loggingEvent.getThrowableStrRep();}
queuedLoggingEvents.push(new QueuedLoggingEvent(loggingEvent,formattedMessage));checkAndAppend();}};this.group=function(name,initiallyExpanded){if(isSupported){queuedLoggingEvents.push(new QueuedGroup(name,initiallyExpanded));checkAndAppend();}};this.groupEnd=function(){if(isSupported){queuedLoggingEvents.push(new QueuedGroupEnd());checkAndAppend();}};var appendQueuedLoggingEvents=function(){var currentLoggingEvent;while(queuedLoggingEvents.length>0){queuedLoggingEvents.shift().append();}
if(focusConsoleWindow){getConsoleWindow().focus();}};this.setAddedToLogger=function(logger){this.loggers.push(logger);if(enabled&&!lazyInit){init();}};this.clear=function(){if(consoleWindowExists()){getConsoleWindow().clearLog();}
queuedLoggingEvents.length=0;};this.focus=function(){if(consoleWindowExists()){getConsoleWindow().focus();}};this.focusCommandLine=function(){if(consoleWindowExists()){getConsoleWindow().focusCommandLine();}};this.focusSearch=function(){if(consoleWindowExists()){getConsoleWindow().focusSearch();}};var commandWindow=window;this.getCommandWindow=function(){return commandWindow;};this.setCommandWindow=function(commandWindowParam){commandWindow=commandWindowParam;};this.executeLastCommand=function(){if(consoleWindowExists()){getConsoleWindow().evalLastCommand();}};var commandLayout=new PatternLayout("%m");this.getCommandLayout=function(){return commandLayout;};this.setCommandLayout=function(commandLayoutParam){commandLayout=commandLayoutParam;};this.evalCommandAndAppend=function(expr){var commandReturnValue={appendResult:true,isError:false};var commandOutput="";try{var result,i;if(!commandWindow.eval&&commandWindow.execScript){commandWindow.execScript("null");}
var commandLineFunctionsHash={};for(i=0,len=commandLineFunctions.length;i<len;i++){commandLineFunctionsHash[commandLineFunctions[i][0]]=commandLineFunctions[i][1];}
var objectsToRestore=[];var addObjectToRestore=function(name){objectsToRestore.push([name,commandWindow[name]]);};addObjectToRestore("appender");commandWindow.appender=appender;addObjectToRestore("commandReturnValue");commandWindow.commandReturnValue=commandReturnValue;addObjectToRestore("commandLineFunctionsHash");commandWindow.commandLineFunctionsHash=commandLineFunctionsHash;var addFunctionToWindow=function(name){addObjectToRestore(name);commandWindow[name]=function(){return this.commandLineFunctionsHash[name](appender,arguments,commandReturnValue);};};for(i=0,len=commandLineFunctions.length;i<len;i++){addFunctionToWindow(commandLineFunctions[i][0]);}
if(commandWindow===window&&commandWindow.execScript){addObjectToRestore("evalExpr");addObjectToRestore("result");window.evalExpr=expr;commandWindow.execScript("window.result=eval(window.evalExpr);");result=window.result;}else{result=commandWindow.eval(expr);}
commandOutput=isUndefined(result)?result:formatObjectExpansion(result,commandLineObjectExpansionDepth);for(i=0,len=objectsToRestore.length;i<len;i++){commandWindow[objectsToRestore[i][0]]=objectsToRestore[i][1];}}catch(ex){commandOutput="Error evaluating command: "+getExceptionStringRep(ex);commandReturnValue.isError=true;}
if(commandReturnValue.appendResult){var message=">>> "+expr;if(!isUndefined(commandOutput)){message+=newLine+commandOutput;}
var level=commandReturnValue.isError?Level.ERROR:Level.INFO;var loggingEvent=new LoggingEvent(null,new Date(),level,[message],null);var mainLayout=this.getLayout();this.setLayout(commandLayout);this.append(loggingEvent);this.setLayout(mainLayout);}};var commandLineFunctions=defaultCommandLineFunctions.concat([]);this.addCommandLineFunction=function(functionName,commandLineFunction){commandLineFunctions.push([functionName,commandLineFunction]);};var commandHistoryCookieName="log4javascriptCommandHistory";this.storeCommandHistory=function(commandHistory){setCookie(commandHistoryCookieName,commandHistory.join(","));};var writeHtml=function(doc){var lines=getConsoleHtmlLines();doc.open();for(var i=0,len=lines.length;i<len;i++){doc.writeln(lines[i]);}
doc.close();};this.setEventTypes(["load","unload"]);var consoleWindowLoadHandler=function(){var win=getConsoleWindow();win.setAppender(appender);win.setNewestAtTop(newestMessageAtTop);win.setScrollToLatest(scrollToLatestMessage);win.setMaxMessages(maxMessages);win.setShowCommandLine(showCommandLine);win.setShowHideButton(showHideButton);win.setShowCloseButton(showCloseButton);win.setMainWindow(window);var storedValue=getCookie(commandHistoryCookieName);if(storedValue){win.commandHistory=storedValue.split(",");win.currentCommandIndex=win.commandHistory.length;}
appender.dispatchEvent("load",{"win":win});};this.unload=function(){logLog.debug("unload "+this+", caller: "+this.unload.caller);if(!consoleClosed){logLog.debug("really doing unload "+this);consoleClosed=true;consoleWindowLoaded=false;consoleWindowCreated=false;appender.dispatchEvent("unload",{});}};var pollConsoleWindow=function(windowTest,interval,successCallback,errorMessage){function doPoll(){try{if(consoleClosed){clearInterval(poll);}
if(windowTest(getConsoleWindow())){clearInterval(poll);successCallback();}}catch(ex){clearInterval(poll);isSupported=false;handleError(errorMessage,ex);}}
var poll=setInterval(doPoll,interval);};var getConsoleUrl=function(){var documentDomainSet=(document.domain!=location.hostname);return useDocumentWrite?"":getBaseUrl()+"console.html"+
(documentDomainSet?"?log4javascript_domain="+escape(document.domain):"");};if(inPage){var containerElement=null;var cssProperties=[];this.addCssProperty=function(name,value){if(checkCanConfigure("cssProperties")){cssProperties.push([name,value]);}};var windowCreationStarted=false;var iframeContainerDiv;var iframeId=uniqueId+"_InPageAppender_"+consoleAppenderId;this.hide=function(){if(initialized&&consoleWindowCreated){if(consoleWindowExists()){getConsoleWindow().$("command").blur();}
iframeContainerDiv.style.display="none";minimized=true;}};this.show=function(){if(initialized){if(consoleWindowCreated){iframeContainerDiv.style.display="block";this.setShowCommandLine(showCommandLine);minimized=false;}else if(!windowCreationStarted){createWindow(true);}}};this.isVisible=function(){return!minimized&&!consoleClosed;};this.close=function(fromButton){if(!consoleClosed&&(!fromButton||confirm("This will permanently remove the console from the page. No more messages will be logged. Do you wish to continue?"))){iframeContainerDiv.parentNode.removeChild(iframeContainerDiv);this.unload();}};open=function(){var initErrorMessage="InPageAppender.open: unable to create console iframe";function finalInit(){try{if(!initiallyMinimized){appender.show();}
consoleWindowLoadHandler();consoleWindowLoaded=true;appendQueuedLoggingEvents();}catch(ex){isSupported=false;handleError(initErrorMessage,ex);}}
function writeToDocument(){try{var windowTest=function(win){return isLoaded(win);};if(useDocumentWrite){writeHtml(getConsoleWindow().document);}
if(windowTest(getConsoleWindow())){finalInit();}else{pollConsoleWindow(windowTest,100,finalInit,initErrorMessage);}}catch(ex){isSupported=false;handleError(initErrorMessage,ex);}}
minimized=false;iframeContainerDiv=containerElement.appendChild(document.createElement("div"));iframeContainerDiv.style.width=width;iframeContainerDiv.style.height=height;iframeContainerDiv.style.border="solid gray 1px";for(var i=0,len=cssProperties.length;i<len;i++){iframeContainerDiv.style[cssProperties[i][0]]=cssProperties[i][1];}
var iframeSrc=useDocumentWrite?"":" src='"+getConsoleUrl()+"'";iframeContainerDiv.innerHTML="<iframe id='"+iframeId+"' name='"+iframeId+"' width='100%' height='100%' frameborder='0'"+iframeSrc+"scrolling='no'></iframe>";consoleClosed=false;var iframeDocumentExistsTest=function(win){try{return bool(win)&&bool(win.document);}catch(ex){return false;}};if(iframeDocumentExistsTest(getConsoleWindow())){writeToDocument();}else{pollConsoleWindow(iframeDocumentExistsTest,100,writeToDocument,initErrorMessage);}
consoleWindowCreated=true;};createWindow=function(show){if(show||!initiallyMinimized){var pageLoadHandler=function(){if(!container){containerElement=document.createElement("div");containerElement.style.position="fixed";containerElement.style.left="0";containerElement.style.right="0";containerElement.style.bottom="0";document.body.appendChild(containerElement);appender.addCssProperty("borderWidth","1px 0 0 0");appender.addCssProperty("zIndex",1000000);open();}else{try{var el=document.getElementById(container);if(el.nodeType==1){containerElement=el;}
open();}catch(ex){handleError("InPageAppender.init: invalid container element '"+container+"' supplied",ex);}}};if(pageLoaded&&container&&container.appendChild){containerElement=container;open();}else if(pageLoaded){pageLoadHandler();}else{log4javascript.addEventListener("load",pageLoadHandler);}
windowCreationStarted=true;}};init=function(){createWindow();initialized=true;};getConsoleWindow=function(){var iframe=window.frames[iframeId];if(iframe){return iframe;}};safeToAppend=function(){if(isSupported&&!consoleClosed){if(consoleWindowCreated&&!consoleWindowLoaded&&getConsoleWindow()&&isLoaded(getConsoleWindow())){consoleWindowLoaded=true;}
return consoleWindowLoaded;}
return false;};}else{var useOldPopUp=appender.defaults.useOldPopUp;var complainAboutPopUpBlocking=appender.defaults.complainAboutPopUpBlocking;var reopenWhenClosed=this.defaults.reopenWhenClosed;this.isUseOldPopUp=function(){return useOldPopUp;};this.setUseOldPopUp=function(useOldPopUpParam){if(checkCanConfigure("useOldPopUp")){useOldPopUp=bool(useOldPopUpParam);}};this.isComplainAboutPopUpBlocking=function(){return complainAboutPopUpBlocking;};this.setComplainAboutPopUpBlocking=function(complainAboutPopUpBlockingParam){if(checkCanConfigure("complainAboutPopUpBlocking")){complainAboutPopUpBlocking=bool(complainAboutPopUpBlockingParam);}};this.isFocusPopUp=function(){return focusConsoleWindow;};this.setFocusPopUp=function(focusPopUpParam){focusConsoleWindow=bool(focusPopUpParam);};this.isReopenWhenClosed=function(){return reopenWhenClosed;};this.setReopenWhenClosed=function(reopenWhenClosedParam){reopenWhenClosed=bool(reopenWhenClosedParam);};this.close=function(){logLog.debug("close "+this);try{popUp.close();this.unload();}catch(ex){}};this.hide=function(){logLog.debug("hide "+this);if(consoleWindowExists()){this.close();}};this.show=function(){logLog.debug("show "+this);if(!consoleWindowCreated){open();}};this.isVisible=function(){return safeToAppend();};var popUp;open=function(){var windowProperties="width="+width+",height="+height+",status,resizable";var windowName="PopUp_"+location.host.replace(/[^a-z0-9]/gi,"_")+"_"+consoleAppenderId;if(!useOldPopUp||!useDocumentWrite){windowName=windowName+"_"+uniqueId;}
var checkPopUpClosed=function(win){if(consoleClosed){return true;}else{try{return bool(win)&&win.closed;}catch(ex){}}
return false;};var popUpClosedCallback=function(){if(!consoleClosed){appender.unload();}};function finalInit(){getConsoleWindow().setCloseIfOpenerCloses(!useOldPopUp||!useDocumentWrite);consoleWindowLoadHandler();consoleWindowLoaded=true;appendQueuedLoggingEvents();pollConsoleWindow(checkPopUpClosed,500,popUpClosedCallback,"PopUpAppender.checkPopUpClosed: error checking pop-up window");}
try{popUp=window.open(getConsoleUrl(),windowName,windowProperties);consoleClosed=false;consoleWindowCreated=true;if(popUp){if(useDocumentWrite&&useOldPopUp&&isLoaded(popUp)){popUp.mainPageReloaded();finalInit();}else{if(useDocumentWrite){writeHtml(popUp.document);}
var popUpLoadedTest=function(win){return bool(win)&&isLoaded(win);};if(isLoaded(popUp)){finalInit();}else{pollConsoleWindow(popUpLoadedTest,100,finalInit,"PopUpAppender.init: unable to create console window");}}}else{isSupported=false;logLog.warn("PopUpAppender.init: pop-ups blocked, please unblock to use PopUpAppender");if(complainAboutPopUpBlocking){handleError("log4javascript: pop-up windows appear to be blocked. Please unblock them to use pop-up logging.");}}}catch(ex){handleError("PopUpAppender.init: error creating pop-up",ex);}};createWindow=function(){if(!initiallyMinimized){open();}};init=function(){createWindow();initialized=true;};getConsoleWindow=function(){return popUp;};safeToAppend=function(){if(isSupported&&!isUndefined(popUp)&&!consoleClosed){if(popUp.closed||(consoleWindowLoaded&&isUndefined(popUp.closed))){appender.unload();logLog.debug("PopUpAppender: pop-up closed");return false;}
if(!consoleWindowLoaded&&isLoaded(popUp)){consoleWindowLoaded=true;}}
return isSupported&&consoleWindowLoaded&&!consoleClosed;};}
this.getConsoleWindow=getConsoleWindow;};ConsoleAppender.addGlobalCommandLineFunction=function(functionName,commandLineFunction){defaultCommandLineFunctions.push([functionName,commandLineFunction]);};function PopUpAppender(lazyInit,initiallyMinimized,useDocumentWrite,width,height){this.create(false,null,lazyInit,initiallyMinimized,useDocumentWrite,width,height,this.defaults.focusPopUp);}
PopUpAppender.prototype=new ConsoleAppender();PopUpAppender.prototype.defaults={layout:new PatternLayout("%d{HH:mm:ss} %-5p - %m{1}%n"),initiallyMinimized:false,focusPopUp:false,lazyInit:true,useOldPopUp:true,complainAboutPopUpBlocking:true,newestMessageAtTop:false,scrollToLatestMessage:true,width:"600",height:"400",reopenWhenClosed:false,maxMessages:null,showCommandLine:true,commandLineObjectExpansionDepth:1,showHideButton:false,showCloseButton:true,showLogEntryDeleteButtons:true,useDocumentWrite:true};PopUpAppender.prototype.toString=function(){return"PopUpAppender";};log4javascript.PopUpAppender=PopUpAppender;function InPageAppender(container,lazyInit,initiallyMinimized,useDocumentWrite,width,height){this.create(true,container,lazyInit,initiallyMinimized,useDocumentWrite,width,height,false);}
InPageAppender.prototype=new ConsoleAppender();InPageAppender.prototype.defaults={layout:new PatternLayout("%d{HH:mm:ss} %-5p - %m{1}%n"),initiallyMinimized:false,lazyInit:true,newestMessageAtTop:false,scrollToLatestMessage:true,width:"100%",height:"220px",maxMessages:null,showCommandLine:true,commandLineObjectExpansionDepth:1,showHideButton:false,showCloseButton:false,showLogEntryDeleteButtons:true,useDocumentWrite:true};InPageAppender.prototype.toString=function(){return"InPageAppender";};log4javascript.InPageAppender=InPageAppender;log4javascript.InlineAppender=InPageAppender;})();function padWithSpaces(str,len){if(str.length<len){var spaces=[];var numberOfSpaces=Math.max(0,len-str.length);for(var i=0;i<numberOfSpaces;i++){spaces[i]=" ";}
str+=spaces.join("");}
return str;}
(function(){function dir(obj){var maxLen=0;for(var p in obj){maxLen=Math.max(toStr(p).length,maxLen);}
var propList=[];for(p in obj){var propNameStr="  "+padWithSpaces(toStr(p),maxLen+2);var propVal;try{propVal=splitIntoLines(toStr(obj[p])).join(padWithSpaces(newLine,maxLen+6));}catch(ex){propVal="[Error obtaining property. Details: "+getExceptionMessage(ex)+"]";}
propList.push(propNameStr+propVal);}
return propList.join(newLine);}
var nodeTypes={ELEMENT_NODE:1,ATTRIBUTE_NODE:2,TEXT_NODE:3,CDATA_SECTION_NODE:4,ENTITY_REFERENCE_NODE:5,ENTITY_NODE:6,PROCESSING_INSTRUCTION_NODE:7,COMMENT_NODE:8,DOCUMENT_NODE:9,DOCUMENT_TYPE_NODE:10,DOCUMENT_FRAGMENT_NODE:11,NOTATION_NODE:12};var preFormattedElements=["script","pre"];var emptyElements=["br","img","hr","param","link","area","input","col","base","meta"];var indentationUnit="  ";function getXhtml(rootNode,includeRootNode,indentation,startNewLine,preformatted){includeRootNode=(typeof includeRootNode=="undefined")?true:(includeRootNode?true:false);if(typeof indentation!="string"){indentation="";}
startNewLine=startNewLine?true:false;preformatted=preformatted?true:false;var xhtml;function isWhitespace(node){return((node.nodeType==nodeTypes.TEXT_NODE)&&/^[ \t\r\n]*$/.test(node.nodeValue));}
function fixAttributeValue(attrValue){return attrValue.toString().replace(/\&/g,"&amp;").replace(/</g,"&lt;").replace(/\"/g,"&quot;");}
function getStyleAttributeValue(el){var stylePairs=el.style.cssText.split(";");var styleValue="";var isFirst=true;for(var j=0,len=stylePairs.length;j<len;j++){var nameValueBits=stylePairs[j].split(":");var props=[];if(!/^\s*$/.test(nameValueBits[0])){props.push(trim(nameValueBits[0]).toLowerCase()+":"+trim(nameValueBits[1]));}
styleValue=props.join(";");}
return styleValue;}
function getNamespace(el){if(el.prefix){return el.prefix;}else if(el.outerHTML){var regex=new RegExp("<([^:]+):"+el.tagName+"[^>]*>","i");if(regex.test(el.outerHTML)){return RegExp.$1.toLowerCase();}}
return"";}
var lt="<";var gt=">";if(includeRootNode&&rootNode.nodeType!=nodeTypes.DOCUMENT_FRAGMENT_NODE){switch(rootNode.nodeType){case nodeTypes.ELEMENT_NODE:var tagName=rootNode.tagName.toLowerCase();xhtml=startNewLine?newLine+indentation:"";xhtml+=lt;var prefix=getNamespace(rootNode);var hasPrefix=prefix?true:false;if(hasPrefix){xhtml+=prefix+":";}
xhtml+=tagName;for(i=0,len=rootNode.attributes.length;i<len;i++){var currentAttr=rootNode.attributes[i];if(!currentAttr.specified||currentAttr.nodeValue===null||currentAttr.nodeName.toLowerCase()==="style"||typeof currentAttr.nodeValue!=="string"||currentAttr.nodeName.indexOf("_moz")===0){continue;}
xhtml+=" "+currentAttr.nodeName.toLowerCase()+"=\"";xhtml+=fixAttributeValue(currentAttr.nodeValue);xhtml+="\"";}
if(rootNode.style.cssText){var styleValue=getStyleAttributeValue(rootNode);if(styleValue!==""){xhtml+=" style=\""+getStyleAttributeValue(rootNode)+"\"";}}
if(array_contains(emptyElements,tagName)||(hasPrefix&&!rootNode.hasChildNodes())){xhtml+="/"+gt;}else{xhtml+=gt;var childStartNewLine=!(rootNode.childNodes.length===1&&rootNode.childNodes[0].nodeType===nodeTypes.TEXT_NODE);var childPreformatted=array_contains(preFormattedElements,tagName);for(var i=0,len=rootNode.childNodes.length;i<len;i++){xhtml+=getXhtml(rootNode.childNodes[i],true,indentation+indentationUnit,childStartNewLine,childPreformatted);}
var endTag=lt+"/"+tagName+gt;xhtml+=childStartNewLine?newLine+indentation+endTag:endTag;}
return xhtml;case nodeTypes.TEXT_NODE:if(isWhitespace(rootNode)){xhtml="";}else{if(preformatted){xhtml=rootNode.nodeValue;}else{var lines=splitIntoLines(trim(rootNode.nodeValue));var trimmedLines=[];for(var i=0,len=lines.length;i<len;i++){trimmedLines[i]=trim(lines[i]);}
xhtml=trimmedLines.join(newLine+indentation);}
if(startNewLine){xhtml=newLine+indentation+xhtml;}}
return xhtml;case nodeTypes.CDATA_SECTION_NODE:return"<![CDA"+"TA["+rootNode.nodeValue+"]"+"]>"+newLine;case nodeTypes.DOCUMENT_NODE:xhtml="";for(var i=0,len=rootNode.childNodes.length;i<len;i++){xhtml+=getXhtml(rootNode.childNodes[i],true,indentation);}
return xhtml;default:return"";}}else{xhtml="";for(var i=0,len=rootNode.childNodes.length;i<len;i++){xhtml+=getXhtml(rootNode.childNodes[i],true,indentation+indentationUnit);}
return xhtml;}}
var layouts={};function createCommandLineFunctions(appender){ConsoleAppender.addGlobalCommandLineFunction("$",function(appender,args,returnValue){return document.getElementById(args[0]);});ConsoleAppender.addGlobalCommandLineFunction("dir",function(appender,args,returnValue){var lines=[];for(var i=0,len=args.length;i<len;i++){lines[i]=dir(args[i]);}
return lines.join(newLine+newLine);});ConsoleAppender.addGlobalCommandLineFunction("dirxml",function(appender,args,returnValue){var lines=[];for(var i=0,len=args.length;i<len;i++){var win=appender.getCommandWindow();lines[i]=getXhtml(args[i]);}
return lines.join(newLine+newLine);});ConsoleAppender.addGlobalCommandLineFunction("cd",function(appender,args,returnValue){var win,message;if(args.length===0||args[0]===""){win=window;message="Command line set to run in main window";}else{if(args[0].window==args[0]){win=args[0];message="Command line set to run in frame '"+args[0].name+"'";}else{win=window.frames[args[0]];if(win){message="Command line set to run in frame '"+args[0]+"'";}else{returnValue.isError=true;message="Frame '"+args[0]+"' does not exist";win=appender.getCommandWindow();}}}
appender.setCommandWindow(win);return message;});ConsoleAppender.addGlobalCommandLineFunction("clear",function(appender,args,returnValue){returnValue.appendResult=false;appender.clear();});ConsoleAppender.addGlobalCommandLineFunction("keys",function(appender,args,returnValue){var keys=[];for(var k in args[0]){keys.push(k);}
return keys;});ConsoleAppender.addGlobalCommandLineFunction("values",function(appender,args,returnValue){var values=[];for(var k in args[0]){try{values.push(args[0][k]);}catch(ex){logLog.warn("values(): Unable to obtain value for key "+k+". Details: "+getExceptionMessage(ex));}}
return values;});ConsoleAppender.addGlobalCommandLineFunction("expansionDepth",function(appender,args,returnValue){var expansionDepth=parseInt(args[0],10);if(isNaN(expansionDepth)||expansionDepth<0){returnValue.isError=true;return""+args[0]+" is not a valid expansion depth";}else{appender.setCommandLineObjectExpansionDepth(expansionDepth);return"Object expansion depth set to "+expansionDepth;}});}
function init(){createCommandLineFunctions();initialized=true;}
init();})();function addWindowLoadListener(listener){var oldOnload=window.onload;if(typeof window.onload!="function"){window.onload=listener;}else{window.onload=function(evt){if(oldOnload){oldOnload(evt);}
listener(evt);};}}
addWindowLoadListener(function(){pageLoaded=true;log4javascript.dispatchEvent("load",{});});window.log4javascript=log4javascript;})();
var process = process || {env: {NODE_ENV: "development"}};
window.ActivityTimer = Backbone.Model.extend({
    saveTimerId: 0,
    initialize: function( options ) {
        if (!options.delay) {
            this.set( {delay: 1000} );
        }
    },
    start: function() {
        var events = this.activityEvents;

        if (events) {
            _.each( events, function ( event ) {
                this.activityTarget().bind( event, _.bind( this.lazyResetter, this ) );
            }, this );
        }

        this.saveTimerId = window.setTimeout( _.bind( this.timeoutHandler, this ), this.get( "delay" ));

        this.trigger( 'timer:start' );
    },
    stop: function( options ) {
        if (this.saveTimerId) {
            window.clearTimeout( this.saveTimerId );
        }

        var events = this.activityEvents;
        if (events) {
            _.each( events, function ( event ) {
                this.activityTarget().unbind( event, _.bind( this.lazyResetter, this ) );
            }, this );
        }

        this.trigger( 'timer:stop' );
    },
    reset: function( options ) {
        this.stop();
        this.start();
        this.trigger( 'timer:reset' );
    },
    lazyResetter: _.throttle( function(e) {
        if (this.saveTimerId) {
            log.debug( "reseting timer '" + this.saveTimerId + "' due to '" + e.type  + "' type." );
            this.reset();
        }
    }, 1500 )
});
var process = process || {env: {NODE_ENV: "development"}};
/*!
 * Modernizr v2.5.3
 * www.modernizr.com
 *
 * Copyright (c) Faruk Ates, Paul Irish, Alex Sexton
 * Available under the BSD and MIT licenses: www.modernizr.com/license/
 */

/*
 * Modernizr tests which native CSS3 and HTML5 features are available in
 * the current UA and makes the results available to you in two ways:
 * as properties on a global Modernizr object, and as classes on the
 * <html> element. This information allows you to progressively enhance
 * your pages with a granular level of control over the experience.
 *
 * Modernizr has an optional (not included) conditional resource loader
 * called Modernizr.load(), based on Yepnope.js (yepnopejs.com).
 * To get a build that includes Modernizr.load(), as well as choosing
 * which tests to include, go to www.modernizr.com/download/
 *
 * Authors        Faruk Ates, Paul Irish, Alex Sexton
 * Contributors   Ryan Seddon, Ben Alman
 */

window.Modernizr = (function( window, document, undefined ) {

    var version = '2.5.3',

    Modernizr = {},

    /*>>cssclasses*/
    // option for enabling the HTML classes to be added
    enableClasses = true,
    /*>>cssclasses*/

    docElement = document.documentElement,

    /**
     * Create our "modernizr" element that we do most feature tests on.
     */
    mod = 'modernizr',
    modElem = document.createElement(mod),
    mStyle = modElem.style,

    /**
     * Create the input element for various Web Forms feature tests.
     */
    inputElem /*>>inputelem*/ = document.createElement('input') /*>>inputelem*/ ,

    /*>>smile*/
    smile = ':)',
    /*>>smile*/

    toString = {}.toString,

    // TODO :: make the prefixes more granular
    /*>>prefixes*/
    // List of property values to set for css tests. See ticket #21
    prefixes = ' -webkit- -moz- -o- -ms- '.split(' '),
    /*>>prefixes*/

    /*>>domprefixes*/
    // Following spec is to expose vendor-specific style properties as:
    //   elem.style.WebkitBorderRadius
    // and the following would be incorrect:
    //   elem.style.webkitBorderRadius

    // Webkit ghosts their properties in lowercase but Opera & Moz do not.
    // Microsoft uses a lowercase `ms` instead of the correct `Ms` in IE8+
    //   erik.eae.net/archives/2008/03/10/21.48.10/

    // More here: github.com/Modernizr/Modernizr/issues/issue/21
    omPrefixes = 'Webkit Moz O ms',

    cssomPrefixes = omPrefixes.split(' '),

    domPrefixes = omPrefixes.toLowerCase().split(' '),
    /*>>domprefixes*/

    /*>>ns*/
    ns = {'svg': 'http://www.w3.org/2000/svg'},
    /*>>ns*/

    tests = {},
    inputs = {},
    attrs = {},

    classes = [],

    slice = classes.slice,

    featureName, // used in testing loop


    /*>>teststyles*/
    // Inject element with style element and some CSS rules
    injectElementWithStyles = function( rule, callback, nodes, testnames ) {

      var style, ret, node,
          div = document.createElement('div'),
          // After page load injecting a fake body doesn't work so check if body exists
          body = document.body,
          // IE6 and 7 won't return offsetWidth or offsetHeight unless it's in the body element, so we fake it.
          fakeBody = body ? body : document.createElement('body');

      if ( parseInt(nodes, 10) ) {
          // In order not to give false positives we create a node for each test
          // This also allows the method to scale for unspecified uses
          while ( nodes-- ) {
              node = document.createElement('div');
              node.id = testnames ? testnames[nodes] : mod + (nodes + 1);
              div.appendChild(node);
          }
      }

      // <style> elements in IE6-9 are considered 'NoScope' elements and therefore will be removed
      // when injected with innerHTML. To get around this you need to prepend the 'NoScope' element
      // with a 'scoped' element, in our case the soft-hyphen entity as it won't mess with our measurements.
      // msdn.microsoft.com/en-us/library/ms533897%28VS.85%29.aspx
      // Documents served as xml will throw if using &shy; so use xml friendly encoded version. See issue #277
      style = ['&#173;','<style>', rule, '</style>'].join('');
      div.id = mod;
      // IE6 will false positive on some tests due to the style element inside the test div somehow interfering offsetHeight, so insert it into body or fakebody.
      // Opera will act all quirky when injecting elements in documentElement when page is served as xml, needs fakebody too. #270
      (body ? div : fakeBody).innerHTML += style;
      fakeBody.appendChild(div);
      if ( !body ) {
          //avoid crashing IE8, if background image is used
          fakeBody.style.background = "";
          docElement.appendChild(fakeBody);
      }

      ret = callback(div, rule);
      // If this is done after page load we don't want to remove the body so check if body exists
      !body ? fakeBody.parentNode.removeChild(fakeBody) : div.parentNode.removeChild(div);

      return !!ret;

    },
    /*>>teststyles*/

    /*>>mq*/
    // adapted from matchMedia polyfill
    // by Scott Jehl and Paul Irish
    // gist.github.com/786768
    testMediaQuery = function( mq ) {

      var matchMedia = window.matchMedia || window.msMatchMedia;
      if ( matchMedia ) {
        return matchMedia(mq).matches;
      }

      var bool;

      injectElementWithStyles('@media ' + mq + ' { #' + mod + ' { position: absolute; } }', function( node ) {
        bool = (window.getComputedStyle ?
                  getComputedStyle(node, null) :
                  node.currentStyle)['position'] == 'absolute';
      });

      return bool;

     },
     /*>>mq*/


    /*>>hasevent*/
    //
    // isEventSupported determines if a given element supports the given event
    // kangax.github.com/iseventsupported/
    //
    // The following results are known incorrects:
    //   Modernizr.hasEvent("webkitTransitionEnd", elem) // false negative
    //   ...
    isEventSupported = (function() {

      var TAGNAMES = {
        'select': 'input', 'change': 'input',
        'submit': 'form', 'reset': 'form',
        'error': 'img', 'load': 'img', 'abort': 'img'
      };

      function isEventSupported( eventName, element ) {

        element = element || document.createElement(TAGNAMES[eventName] || 'div');
        eventName = 'on' + eventName;

        // When using `setAttribute`, IE skips "unload", WebKit skips "unload" and "resize", whereas `in` "catches" those
        var isSupported = eventName in element;

        if ( !isSupported ) {
          // If it has no `setAttribute` (i.e. doesn't implement Node interface), try generic element
          if ( !element.setAttribute ) {
            element = document.createElement('div');
          }
          if ( element.setAttribute && element.removeAttribute ) {
            element.setAttribute(eventName, '');
            isSupported = is(element[eventName], 'function');

            // If property was created, "remove it" (by setting value to `undefined`)
            if ( !is(element[eventName], 'undefined') ) {
              element[eventName] = undefined;
            }
            element.removeAttribute(eventName);
          }
        }

        element = null;
        return isSupported;
      }
      return isEventSupported;
    })(),
    /*>>hasevent*/

    // TODO :: Add flag for hasownprop ? didn't last time

    // hasOwnProperty shim by kangax needed for Safari 2.0 support
    _hasOwnProperty = ({}).hasOwnProperty, hasOwnProperty;

    if ( !is(_hasOwnProperty, 'undefined') && !is(_hasOwnProperty.call, 'undefined') ) {
      hasOwnProperty = function (object, property) {
        return _hasOwnProperty.call(object, property);
      };
    }
    else {
      hasOwnProperty = function (object, property) { /* yes, this can give false positives/negatives, but most of the time we don't care about those */
        return ((property in object) && is(object.constructor.prototype[property], 'undefined'));
      };
    }

    // TODO :: Add function proto bind
    // Taken from ES5-shim https://github.com/kriskowal/es5-shim/blob/master/es5-shim.js
    // ES-5 15.3.4.5
    // http://es5.github.com/#x15.3.4.5

    if (!Function.prototype.bind) {
      Function.prototype.bind = function bind(that) {

        var target = this;

        if (typeof target != "function") {
            throw new TypeError();
        }

        var args = slice.call(arguments, 1),
            bound = function () {

            if (this instanceof bound) {

              var F = function(){};
              F.prototype = target.prototype;
              var self = new F;

              var result = target.apply(
                  self,
                  args.concat(slice.call(arguments))
              );
              if (Object(result) === result) {
                  return result;
              }
              return self;

            } else {

              return target.apply(
                  that,
                  args.concat(slice.call(arguments))
              );

            }

        };

        return bound;
      };
    }

    /**
     * setCss applies given styles to the Modernizr DOM node.
     */
    function setCss( str ) {
        mStyle.cssText = str;
    }

    /**
     * setCssAll extrapolates all vendor-specific css strings.
     */
    function setCssAll( str1, str2 ) {
        return setCss(prefixes.join(str1 + ';') + ( str2 || '' ));
    }

    /**
     * is returns a boolean for if typeof obj is exactly type.
     */
    function is( obj, type ) {
        return typeof obj === type;
    }

    /**
     * contains returns a boolean for if substr is found within str.
     */
    function contains( str, substr ) {
        return !!~('' + str).indexOf(substr);
    }

    /*>>testprop*/
    /**
     * testProps is a generic CSS / DOM property test; if a browser supports
     *   a certain property, it won't return undefined for it.
     *   A supported CSS property returns empty string when its not yet set.
     */
    function testProps( props, prefixed ) {
        for ( var i in props ) {
            if ( mStyle[ props[i] ] !== undefined ) {
                return prefixed == 'pfx' ? props[i] : true;
            }
        }
        return false;
    }
    /*>>testprop*/

    // TODO :: add testDOMProps
    /**
     * testDOMProps is a generic DOM property test; if a browser supports
     *   a certain property, it won't return undefined for it.
     */
    function testDOMProps( props, obj, elem ) {
        for ( var i in props ) {
            var item = obj[props[i]];
            if ( item !== undefined) {

                // return the property name as a string
                if (elem === false) return props[i];

                // let's bind a function
                if (is(item, 'function')){
                  // default to autobind unless override
                  return item.bind(elem || obj);
                }

                // return the unbound function or obj or value
                return item;
            }
        }
        return false;
    }

    /*>>testallprops*/
    /**
     * testPropsAll tests a list of DOM properties we want to check against.
     *   We specify literally ALL possible (known and/or likely) properties on
     *   the element including the non-vendor prefixed one, for forward-
     *   compatibility.
     */
    function testPropsAll( prop, prefixed, elem ) {

        var ucProp  = prop.charAt(0).toUpperCase() + prop.substr(1),
            props   = (prop + ' ' + cssomPrefixes.join(ucProp + ' ') + ucProp).split(' ');

        // did they call .prefixed('boxSizing') or are we just testing a prop?
        if(is(prefixed, "string") || is(prefixed, "undefined")) {
          return testProps(props, prefixed);

        // otherwise, they called .prefixed('requestAnimationFrame', window[, elem])
        } else {
          props = (prop + ' ' + (domPrefixes).join(ucProp + ' ') + ucProp).split(' ');
          return testDOMProps(props, prefixed, elem);
        }
    }
    /*>>testallprops*/

    /*>>testBundle*/
    /**
     * testBundle tests a list of CSS features that require element and style injection.
     *   By bundling them together we can reduce the need to touch the DOM multiple times.
     */
    var testBundle = (function( styles, tests ) {
        var style = styles.join(''),
            len = tests.length;

        injectElementWithStyles(style, function( node, rule ) {
            var style = document.styleSheets[document.styleSheets.length - 1],
                // IE8 will bork if you create a custom build that excludes both fontface and generatedcontent tests.
                // So we check for cssRules and that there is a rule available
                // More here: github.com/Modernizr/Modernizr/issues/288 & github.com/Modernizr/Modernizr/issues/293
                cssText = style ? (style.cssRules && style.cssRules[0] ? style.cssRules[0].cssText : style.cssText || '') : '',
                children = node.childNodes, hash = {};

            while ( len-- ) {
                hash[children[len].id] = children[len];
            }

            /*>>touch*/           Modernizr['touch'] = ('ontouchstart' in window) || window.DocumentTouch && document instanceof DocumentTouch || (hash['touch'] && hash['touch'].offsetTop) === 9; /*>>touch*/
            /*>>csstransforms3d*/ Modernizr['csstransforms3d'] = (hash['csstransforms3d'] && hash['csstransforms3d'].offsetLeft) === 9 && hash['csstransforms3d'].offsetHeight === 3;          /*>>csstransforms3d*/
            /*>>generatedcontent*/Modernizr['generatedcontent'] = (hash['generatedcontent'] && hash['generatedcontent'].offsetHeight) >= 1;       /*>>generatedcontent*/
            /*>>fontface*/        Modernizr['fontface'] = /src/i.test(cssText) &&
                                                                  cssText.indexOf(rule.split(' ')[0]) === 0;        /*>>fontface*/
        }, len, tests);

    })([
        // Pass in styles to be injected into document
        /*>>fontface*/        '@font-face {font-family:"font";src:url("https://")}'         /*>>fontface*/

        /*>>touch*/           ,['@media (',prefixes.join('touch-enabled),('),mod,')',
                                '{#touch{top:9px;position:absolute}}'].join('')           /*>>touch*/

        /*>>csstransforms3d*/ ,['@media (',prefixes.join('transform-3d),('),mod,')',
                                '{#csstransforms3d{left:9px;position:absolute;height:3px;}}'].join('')/*>>csstransforms3d*/

        /*>>generatedcontent*/,['#generatedcontent:after{content:"',smile,'";visibility:hidden}'].join('')  /*>>generatedcontent*/
    ],
      [
        /*>>fontface*/        'fontface'          /*>>fontface*/
        /*>>touch*/           ,'touch'            /*>>touch*/
        /*>>csstransforms3d*/ ,'csstransforms3d'  /*>>csstransforms3d*/
        /*>>generatedcontent*/,'generatedcontent' /*>>generatedcontent*/

    ]);/*>>testBundle*/


    /**
     * Tests
     * -----
     */

    // The *new* flexbox
    // dev.w3.org/csswg/css3-flexbox

    tests['flexbox'] = function() {
      return testPropsAll('flexOrder');
    };

    // The *old* flexbox
    // www.w3.org/TR/2009/WD-css3-flexbox-20090723/

    tests['flexboxlegacy'] = tests['flexbox-legacy'] = function() {
        return testPropsAll('boxDirection');
    };

    // On the S60 and BB Storm, getContext exists, but always returns undefined
    // so we actually have to call getContext() to verify
    // github.com/Modernizr/Modernizr/issues/issue/97/

    tests['canvas'] = function() {
        var elem = document.createElement('canvas');
        return !!(elem.getContext && elem.getContext('2d'));
    };

    tests['canvastext'] = function() {
        return !!(Modernizr['canvas'] && is(document.createElement('canvas').getContext('2d').fillText, 'function'));
    };

    // webk.it/70117 is tracking a legit WebGL feature detect proposal

    // We do a soft detect which may false positive in order to avoid
    // an expensive context creation: bugzil.la/732441

    tests['webgl'] = function() {
        return !!window.WebGLRenderingContext;
    };

    /*
     * The Modernizr.touch test only indicates if the browser supports
     *    touch events, which does not necessarily reflect a touchscreen
     *    device, as evidenced by tablets running Windows 7 or, alas,
     *    the Palm Pre / WebOS (touch) phones.
     *
     * Additionally, Chrome (desktop) used to lie about its support on this,
     *    but that has since been rectified: crbug.com/36415
     *
     * We also test for Firefox 4 Multitouch Support.
     *
     * For more info, see: modernizr.github.com/Modernizr/touch.html
     */

    tests['touch'] = function() {
        return Modernizr['touch'];
    };


    // geolocation is often considered a trivial feature detect...
    // Turns out, it's quite tricky to get right:
    //
    // Using !!navigator.geolocation does two things we don't want. It:
    //   1. Leaks memory in IE9: github.com/Modernizr/Modernizr/issues/513
    //   2. Disables page caching in WebKit: webk.it/43956
    //
    // Meanwhile, in Firefox < 8, an about:config setting could expose
    // a false positive that would throw an exception: bugzil.la/688158

    tests['geolocation'] = function() {
        return 'geolocation' in navigator;
    };


    tests['postmessage'] = function() {
      return !!window.postMessage;
    };


    // Chrome incognito mode used to throw an exception when using openDatabase
    // It doesn't anymore.
    tests['websqldatabase'] = function() {
      return !!window.openDatabase;
    };

    // Vendors had inconsistent prefixing with the experimental Indexed DB:
    // - Webkit's implementation is accessible through webkitIndexedDB
    // - Firefox shipped moz_indexedDB before FF4b9, but since then has been mozIndexedDB
    // For speed, we don't test the legacy (and beta-only) indexedDB
    tests['indexedDB'] = function() {
      return !!testPropsAll("indexedDB",window);
    };

    // documentMode logic from YUI to filter out IE8 Compat Mode
    //   which false positives.
    tests['hashchange'] = function() {
      return isEventSupported('hashchange', window) && (document.documentMode === undefined || document.documentMode > 7);
    };

    // Per 1.6:
    // This used to be Modernizr.historymanagement but the longer
    // name has been deprecated in favor of a shorter and property-matching one.
    // The old API is still available in 1.6, but as of 2.0 will throw a warning,
    // and in the first release thereafter disappear entirely.
    tests['history'] = function() {
      return !!(window.history && history.pushState);
    };

    tests['draganddrop'] = function() {
        var div = document.createElement('div');
        return ('draggable' in div) || ('ondragstart' in div && 'ondrop' in div);
    };

    // FIXME: Once FF10 is sunsetted, we can drop prefixed MozWebSocket
    // bugzil.la/695635
    tests['websockets'] = function() {
        for ( var i = -1, len = cssomPrefixes.length; ++i < len; ){
          if ( window[cssomPrefixes[i] + 'WebSocket'] ){
            return true;
          }
        }
        return 'WebSocket' in window;
    };


    // css-tricks.com/rgba-browser-support/
    tests['rgba'] = function() {
        // Set an rgba() color and check the returned value

        setCss('background-color:rgba(150,255,150,.5)');

        return contains(mStyle.backgroundColor, 'rgba');
    };

    tests['hsla'] = function() {
        // Same as rgba(), in fact, browsers re-map hsla() to rgba() internally,
        //   except IE9 who retains it as hsla

        setCss('background-color:hsla(120,40%,100%,.5)');

        return contains(mStyle.backgroundColor, 'rgba') || contains(mStyle.backgroundColor, 'hsla');
    };

    tests['multiplebgs'] = function() {
        // Setting multiple images AND a color on the background shorthand property
        //  and then querying the style.background property value for the number of
        //  occurrences of "url(" is a reliable method for detecting ACTUAL support for this!

        setCss('background:url(https://),url(https://),red url(https://)');

        // If the UA supports multiple backgrounds, there should be three occurrences
        //   of the string "url(" in the return value for elemStyle.background

        return /(url\s*\(.*?){3}/.test(mStyle.background);
    };


    // In testing support for a given CSS property, it's legit to test:
    //    `elem.style[styleName] !== undefined`
    // If the property is supported it will return an empty string,
    // if unsupported it will return undefined.

    // We'll take advantage of this quick test and skip setting a style
    // on our modernizr element, but instead just testing undefined vs
    // empty string.


    tests['backgroundsize'] = function() {
        return testPropsAll('backgroundSize');
    };

    tests['borderimage'] = function() {
        return testPropsAll('borderImage');
    };


    // Super comprehensive table about all the unique implementations of
    // border-radius: muddledramblings.com/table-of-css3-border-radius-compliance

    tests['borderradius'] = function() {
        return testPropsAll('borderRadius');
    };

    // WebOS unfortunately false positives on this test.
    tests['boxshadow'] = function() {
        return testPropsAll('boxShadow');
    };

    // FF3.0 will false positive on this test
    tests['textshadow'] = function() {
        return document.createElement('div').style.textShadow === '';
    };


    tests['opacity'] = function() {
        // Browsers that actually have CSS Opacity implemented have done so
        //  according to spec, which means their return values are within the
        //  range of [0.0,1.0] - including the leading zero.

        setCssAll('opacity:.55');

        // The non-literal . in this regex is intentional:
        //   German Chrome returns this value as 0,55
        // github.com/Modernizr/Modernizr/issues/#issue/59/comment/516632
        return /^0.55$/.test(mStyle.opacity);
    };


    // Note, Android < 4 will pass this test, but can only animate
    //   a single property at a time
    //   daneden.me/2011/12/putting-up-with-androids-bullshit/
    tests['cssanimations'] = function() {
        return testPropsAll('animationName');
    };


    tests['csscolumns'] = function() {
        return testPropsAll('columnCount');
    };


    tests['cssgradients'] = function() {
        /**
         * For CSS Gradients syntax, please see:
         * webkit.org/blog/175/introducing-css-gradients/
         * developer.mozilla.org/en/CSS/-moz-linear-gradient
         * developer.mozilla.org/en/CSS/-moz-radial-gradient
         * dev.w3.org/csswg/css3-images/#gradients-
         */

        var str1 = 'background-image:',
            str2 = 'gradient(linear,left top,right bottom,from(#9f9),to(white));',
            str3 = 'linear-gradient(left top,#9f9, white);';

        setCss(
             // legacy webkit syntax (FIXME: remove when syntax not in use anymore)
              (str1 + '-webkit- '.split(' ').join(str2 + str1)
             // standard syntax             // trailing 'background-image:'
              + prefixes.join(str3 + str1)).slice(0, -str1.length)
        );

        return contains(mStyle.backgroundImage, 'gradient');
    };


    tests['cssreflections'] = function() {
        return testPropsAll('boxReflect');
    };


    tests['csstransforms'] = function() {
        return !!testPropsAll('transform');
    };


    tests['csstransforms3d'] = function() {

        var ret = !!testPropsAll('perspective');

        // Webkit's 3D transforms are passed off to the browser's own graphics renderer.
        //   It works fine in Safari on Leopard and Snow Leopard, but not in Chrome in
        //   some conditions. As a result, Webkit typically recognizes the syntax but
        //   will sometimes throw a false positive, thus we must do a more thorough check:
        if ( ret && 'webkitPerspective' in docElement.style ) {

          // Webkit allows this media query to succeed only if the feature is enabled.
          // `@media (transform-3d),(-o-transform-3d),(-moz-transform-3d),(-ms-transform-3d),(-webkit-transform-3d),(modernizr){ ... }`
          ret = Modernizr['csstransforms3d'];
        }
        return ret;
    };


    tests['csstransitions'] = function() {
        return testPropsAll('transition');
    };


    /*>>fontface*/
    // @font-face detection routine by Diego Perini
    // javascript.nwbox.com/CSSSupport/

    // false positives in WebOS: github.com/Modernizr/Modernizr/issues/342
    tests['fontface'] = function() {
        return Modernizr['fontface'];
    };
    /*>>fontface*/

    // CSS generated content detection
    tests['generatedcontent'] = function() {
        return Modernizr['generatedcontent'];
    };



    // These tests evaluate support of the video/audio elements, as well as
    // testing what types of content they support.
    //
    // We're using the Boolean constructor here, so that we can extend the value
    // e.g.  Modernizr.video     // true
    //       Modernizr.video.ogg // 'probably'
    //
    // Codec values from : github.com/NielsLeenheer/html5test/blob/9106a8/index.html#L845
    //                     thx to NielsLeenheer and zcorpan

    // Note: in some older browsers, "no" was a return value instead of empty string.
    //   It was live in FF3.5.0 and 3.5.1, but fixed in 3.5.2
    //   It was also live in Safari 4.0.0 - 4.0.4, but fixed in 4.0.5

    tests['video'] = function() {
        var elem = document.createElement('video'),
            bool = false;

        // IE9 Running on Windows Server SKU can cause an exception to be thrown, bug #224
        try {
            if ( bool = !!elem.canPlayType ) {
                bool      = new Boolean(bool);
                bool.ogg  = elem.canPlayType('video/ogg; codecs="theora"')      .replace(/^no$/,'');

                // Without QuickTime, this value will be `undefined`. github.com/Modernizr/Modernizr/issues/546
                bool.h264 = elem.canPlayType('video/mp4; codecs="avc1.42E01E"') .replace(/^no$/,'');

                bool.webm = elem.canPlayType('video/webm; codecs="vp8, vorbis"').replace(/^no$/,'');
            }

        } catch(e) { }

        return bool;
    };

    tests['audio'] = function() {
        var elem = document.createElement('audio'),
            bool = false;

        try {
            if ( bool = !!elem.canPlayType ) {
                bool      = new Boolean(bool);
                bool.ogg  = elem.canPlayType('audio/ogg; codecs="vorbis"').replace(/^no$/,'');
                bool.mp3  = elem.canPlayType('audio/mpeg;')               .replace(/^no$/,'');

                // Mimetypes accepted:
                //   developer.mozilla.org/En/Media_formats_supported_by_the_audio_and_video_elements
                //   bit.ly/iphoneoscodecs
                bool.wav  = elem.canPlayType('audio/wav; codecs="1"')     .replace(/^no$/,'');
                bool.m4a  = ( elem.canPlayType('audio/x-m4a;')            ||
                              elem.canPlayType('audio/aac;'))             .replace(/^no$/,'');
            }
        } catch(e) { }

        return bool;
    };


    // In FF4, if disabled, window.localStorage should === null.

    // Normally, we could not test that directly and need to do a
    //   `('localStorage' in window) && ` test first because otherwise Firefox will
    //   throw bugzil.la/365772 if cookies are disabled

    // Also in iOS5 Private Browsing mode, attempting to use localStorage.setItem
    // will throw the exception:
    //   QUOTA_EXCEEDED_ERRROR DOM Exception 22.
    // Peculiarly, getItem and removeItem calls do not throw.

    // Because we are forced to try/catch this, we'll go aggressive.

    // Just FWIW: IE8 Compat mode supports these features completely:
    //   www.quirksmode.org/dom/html5.html
    // But IE8 doesn't support either with local files

    tests['localstorage'] = function() {
        try {
            localStorage.setItem(mod, mod);
            localStorage.removeItem(mod);
            return true;
        } catch(e) {
            return false;
        }
    };

    tests['sessionstorage'] = function() {
        try {
            sessionStorage.setItem(mod, mod);
            sessionStorage.removeItem(mod);
            return true;
        } catch(e) {
            return false;
        }
    };


    tests['webworkers'] = function() {
        return !!window.Worker;
    };


    tests['applicationcache'] = function() {
        return !!window.applicationCache;
    };


    // Thanks to Erik Dahlstrom
    tests['svg'] = function() {
        return !!document.createElementNS && !!document.createElementNS(ns.svg, 'svg').createSVGRect;
    };

    // specifically for SVG inline in HTML, not within XHTML
    // test page: paulirish.com/demo/inline-svg
    tests['inlinesvg'] = function() {
      var div = document.createElement('div');
      div.innerHTML = '<svg/>';
      return (div.firstChild && div.firstChild.namespaceURI) == ns.svg;
    };

    // SVG SMIL animation
    tests['smil'] = function() {
        return !!document.createElementNS && /SVGAnimate/.test(toString.call(document.createElementNS(ns.svg, 'animate')));
    };

    // This test is only for clip paths in SVG proper, not clip paths on HTML content
    // demo: srufaculty.sru.edu/david.dailey/svg/newstuff/clipPath4.svg

    // However read the comments to dig into applying SVG clippaths to HTML content here:
    //   github.com/Modernizr/Modernizr/issues/213#issuecomment-1149491
    tests['svgclippaths'] = function() {
        return !!document.createElementNS && /SVGClipPath/.test(toString.call(document.createElementNS(ns.svg, 'clipPath')));
    };

    /*>>webforms*/
    // input features and input types go directly onto the ret object, bypassing the tests loop.
    // Hold this guy to execute in a moment.
    function webforms() {
        /*>>input*/
        // Run through HTML5's new input attributes to see if the UA understands any.
        // We're using f which is the <input> element created early on
        // Mike Taylr has created a comprehensive resource for testing these attributes
        //   when applied to all input types:
        //   miketaylr.com/code/input-type-attr.html
        // spec: www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary

        // Only input placeholder is tested while textarea's placeholder is not.
        // Currently Safari 4 and Opera 11 have support only for the input placeholder
        // Both tests are available in feature-detects/forms-placeholder.js
        Modernizr['input'] = (function( props ) {
            for ( var i = 0, len = props.length; i < len; i++ ) {
                attrs[ props[i] ] = !!(props[i] in inputElem);
            }
            if (attrs.list){
              // safari false positive's on datalist: webk.it/74252
              // see also github.com/Modernizr/Modernizr/issues/146
              attrs.list = !!(document.createElement('datalist') && window.HTMLDataListElement);
            }
            return attrs;
        })('autocomplete autofocus list placeholder max min multiple pattern required step'.split(' '));
        /*>>input*/

        /*>>inputtypes*/
        // Run through HTML5's new input types to see if the UA understands any.
        //   This is put behind the tests runloop because it doesn't return a
        //   true/false like all the other tests; instead, it returns an object
        //   containing each input type with its corresponding true/false value

        // Big thanks to @miketaylr for the html5 forms expertise. miketaylr.com/
        Modernizr['inputtypes'] = (function(props) {

            for ( var i = 0, bool, inputElemType, defaultView, len = props.length; i < len; i++ ) {

                inputElem.setAttribute('type', inputElemType = props[i]);
                bool = inputElem.type !== 'text';

                // We first check to see if the type we give it sticks..
                // If the type does, we feed it a textual value, which shouldn't be valid.
                // If the value doesn't stick, we know there's input sanitization which infers a custom UI
                if ( bool ) {

                    inputElem.value         = smile;
                    inputElem.style.cssText = 'position:absolute;visibility:hidden;';

                    if ( /^range$/.test(inputElemType) && inputElem.style.WebkitAppearance !== undefined ) {

                      docElement.appendChild(inputElem);
                      defaultView = document.defaultView;

                      // Safari 2-4 allows the smiley as a value, despite making a slider
                      bool =  defaultView.getComputedStyle &&
                              defaultView.getComputedStyle(inputElem, null).WebkitAppearance !== 'textfield' &&
                              // Mobile android web browser has false positive, so must
                              // check the height to see if the widget is actually there.
                              (inputElem.offsetHeight !== 0);

                      docElement.removeChild(inputElem);

                    } else if ( /^(search|tel)$/.test(inputElemType) ){
                      // Spec doesn't define any special parsing or detectable UI
                      //   behaviors so we pass these through as true

                      // Interestingly, opera fails the earlier test, so it doesn't
                      //  even make it here.

                    } else if ( /^(url|email)$/.test(inputElemType) ) {
                      // Real url and email support comes with prebaked validation.
                      bool = inputElem.checkValidity && inputElem.checkValidity() === false;

                    } else if ( /^color$/.test(inputElemType) ) {
                        // chuck into DOM and force reflow for Opera bug in 11.00
                        // github.com/Modernizr/Modernizr/issues#issue/159
                        docElement.appendChild(inputElem);
                        docElement.offsetWidth;
                        bool = inputElem.value != smile;
                        docElement.removeChild(inputElem);

                    } else {
                      // If the upgraded input compontent rejects the :) text, we got a winner
                      bool = inputElem.value != smile;
                    }
                }

                inputs[ props[i] ] = !!bool;
            }
            return inputs;
        })('search tel url email datetime date month week time datetime-local number range color'.split(' '));
        /*>>inputtypes*/
    }
    /*>>webforms*/


    // End of test definitions
    // -----------------------



    // Run through all tests and detect their support in the current UA.
    // todo: hypothetically we could be doing an array of tests and use a basic loop here.
    for ( var feature in tests ) {
        if ( hasOwnProperty(tests, feature) ) {
            // run the test, throw the return value into the Modernizr,
            //   then based on that boolean, define an appropriate className
            //   and push it into an array of classes we'll join later.
            featureName  = feature.toLowerCase();
            Modernizr[featureName] = tests[feature]();

            classes.push((Modernizr[featureName] ? '' : 'no-') + featureName);
        }
    }

    /*>>webforms*/
    // input tests need to run.
    Modernizr.input || webforms();
    /*>>webforms*/


    /*>>addtest*/
    /**
     * addTest allows the user to define their own feature tests
     * the result will be added onto the Modernizr object,
     * as well as an appropriate className set on the html element
     *
     * @param feature - String naming the feature
     * @param test - Function returning true if feature is supported, false if not
     */
     Modernizr.addTest = function ( feature, test ) {
       if ( typeof feature == 'object' ) {
         for ( var key in feature ) {
           if ( hasOwnProperty( feature, key ) ) {
             Modernizr.addTest( key, feature[ key ] );
           }
         }
       } else {

         feature = feature.toLowerCase();

         if ( Modernizr[feature] !== undefined ) {
           // we're going to quit if you're trying to overwrite an existing test
           // if we were to allow it, we'd do this:
           //   var re = new RegExp("\\b(no-)?" + feature + "\\b");
           //   docElement.className = docElement.className.replace( re, '' );
           // but, no rly, stuff 'em.
           return Modernizr;
         }

         test = typeof test == 'function' ? test() : test;

         docElement.className += ' ' + (test ? '' : 'no-') + feature;
         Modernizr[feature] = test;

       }

       return Modernizr; // allow chaining.
     };
     /*>>addtest*/


    // Reset modElem.cssText to nothing to reduce memory footprint.
    setCss('');
    modElem = inputElem = null;

    /*>>shiv*/
    /*! HTML5 Shiv v3.5 | @afarkas @jdalton @jon_neal @rem | MIT/GPL2 Licensed */
    ;(function(window, document) {

      /** Preset options */
      var options = window.html5 || {};

      /** Used to skip problem elements */
      var reSkip = /^<|^(?:button|form|map|select|textarea|object|iframe|option|optgroup)$/i;

      /** Not all elements can be cloned in IE (this list can be shortend) **/
      var saveClones = /^<|^(?:a|b|button|code|div|fieldset|form|h1|h2|h3|h4|h5|h6|i|iframe|img|input|label|li|link|ol|option|p|param|q|script|select|span|strong|style|table|tbody|td|textarea|tfoot|th|thead|tr|ul)$/i;

      /** Detect whether the browser supports default html5 styles */
      var supportsHtml5Styles;

      /** Detect whether the browser supports unknown elements */
      var supportsUnknownElements;

      (function() {
        var a = document.createElement('a');

        a.innerHTML = '<xyz></xyz>';

        //if the hidden property is implemented we can assume, that the browser supports HTML5 Styles | this fails in Chrome 8
        supportsHtml5Styles = ('hidden' in a);
        //if we are part of Modernizr, we do an additional test to solve the Chrome 8 fail
        if(supportsHtml5Styles && typeof injectElementWithStyles == 'function'){
            injectElementWithStyles('#modernizr{}', function(node){
                node.hidden = true;
                supportsHtml5Styles = (window.getComputedStyle ?
                      getComputedStyle(node, null) :
                      node.currentStyle).display == 'none';
            });
        }

        supportsUnknownElements = a.childNodes.length == 1 || (function() {
          // assign a false positive if unable to shiv
          try {
            (document.createElement)('a');
          } catch(e) {
            return true;
          }
          var frag = document.createDocumentFragment();
          return (
            typeof frag.cloneNode == 'undefined' ||
            typeof frag.createDocumentFragment == 'undefined' ||
            typeof frag.createElement == 'undefined'
          );
        }());

      }());

      /*--------------------------------------------------------------------------*/

      /**
       * Creates a style sheet with the given CSS text and adds it to the document.
       * @private
       * @param {Document} ownerDocument The document.
       * @param {String} cssText The CSS text.
       * @returns {StyleSheet} The style element.
       */
      function addStyleSheet(ownerDocument, cssText) {
        var p = ownerDocument.createElement('p'),
            parent = ownerDocument.getElementsByTagName('head')[0] || ownerDocument.documentElement;

        p.innerHTML = 'x<style>' + cssText + '</style>';
        return parent.insertBefore(p.lastChild, parent.firstChild);
      }

      /**
       * Returns the value of `html5.elements` as an array.
       * @private
       * @returns {Array} An array of shived element node names.
       */
      function getElements() {
        var elements = html5.elements;
        return typeof elements == 'string' ? elements.split(' ') : elements;
      }

      /**
       * Shivs the `createElement` and `createDocumentFragment` methods of the document.
       * @private
       * @param {Document|DocumentFragment} ownerDocument The document.
       */
      function shivMethods(ownerDocument) {
        var cache = {},
            docCreateElement = ownerDocument.createElement,
            docCreateFragment = ownerDocument.createDocumentFragment,
            frag = docCreateFragment();

        ownerDocument.createElement = function(nodeName) {
          //abort shiv
          if(!html5.shivMethods){
              return docCreateElement(nodeName);
          }

          var node;

          if(cache[nodeName]){
              node = cache[nodeName].cloneNode();
          } else if(saveClones.test(nodeName)){
               node = (cache[nodeName] = docCreateElement(nodeName)).cloneNode();
          } else {
              node = docCreateElement(nodeName);
          }

          // Avoid adding some elements to fragments in IE < 9 because
          // * Attributes like `name` or `type` cannot be set/changed once an element
          //   is inserted into a document/fragment
          // * Link elements with `src` attributes that are inaccessible, as with
          //   a 403 response, will cause the tab/window to crash
          // * Script elements appended to fragments will execute when their `src`
          //   or `text` property is set
          return node.canHaveChildren && !reSkip.test(nodeName) ? frag.appendChild(node) : node;
        };

        ownerDocument.createDocumentFragment = Function('h,f', 'return function(){' +
          'var n=f.cloneNode(),c=n.createElement;' +
          'h.shivMethods&&(' +
            // unroll the `createElement` calls
            getElements().join().replace(/\w+/g, function(nodeName) {
              docCreateElement(nodeName);
              frag.createElement(nodeName);
              return 'c("' + nodeName + '")';
            }) +
          ');return n}'
        )(html5, frag);
      }

      /*--------------------------------------------------------------------------*/

      /**
       * Shivs the given document.
       * @memberOf html5
       * @param {Document} ownerDocument The document to shiv.
       * @returns {Document} The shived document.
       */
      function shivDocument(ownerDocument) {
        var shived;
        if (ownerDocument.documentShived) {
          return ownerDocument;
        }
        if (html5.shivCSS && !supportsHtml5Styles) {
          shived = !!addStyleSheet(ownerDocument,
            // corrects block display not defined in IE6/7/8/9
            'article,aside,details,figcaption,figure,footer,header,hgroup,nav,section{display:block}' +
            // corrects audio display not defined in IE6/7/8/9
            'audio{display:none}' +
            // corrects canvas and video display not defined in IE6/7/8/9
            'canvas,video{display:inline-block;*display:inline;*zoom:1}' +
            // corrects 'hidden' attribute and audio[controls] display not present in IE7/8/9
            '[hidden]{display:none}audio[controls]{display:inline-block;*display:inline;*zoom:1}' +
            // adds styling not present in IE6/7/8/9
            'mark{background:#FF0;color:#000}'
          );
        }
        if (!supportsUnknownElements) {
          shived = !shivMethods(ownerDocument);
        }
        if (shived) {
          ownerDocument.documentShived = shived;
        }
        return ownerDocument;
      }

      /*--------------------------------------------------------------------------*/

      /**
       * The `html5` object is exposed so that more elements can be shived and
       * existing shiving can be detected on iframes.
       * @type Object
       * @example
       *
       * // options can be changed before the script is included
       * html5 = { 'elements': 'mark section', 'shivCSS': false, 'shivMethods': false };
       */
      var html5 = {

        /**
         * An array or space separated string of node names of the elements to shiv.
         * @memberOf html5
         * @type Array|String
         */
        'elements': options.elements || 'abbr article aside audio bdi canvas data datalist details figcaption figure footer header hgroup mark meter nav output progress section summary time video',

        /**
         * A flag to indicate that the HTML5 style sheet should be inserted.
         * @memberOf html5
         * @type Boolean
         */
        'shivCSS': !(options.shivCSS === false),

        /**
         * A flag to indicate that the document's `createElement` and `createDocumentFragment`
         * methods should be overwritten.
         * @memberOf html5
         * @type Boolean
         */
        'shivMethods': !(options.shivMethods === false),

        /**
         * A string to describe the type of `html5` object ("default" or "default print").
         * @memberOf html5
         * @type String
         */
        'type': 'default',

        // shivs the document according to the specified `html5` object options
        'shivDocument': shivDocument
      };

      /*--------------------------------------------------------------------------*/

      // expose html5
      window.html5 = html5;

      // shiv the document
      shivDocument(document);

    }(this, document));
    /*>>shiv*/

    // Assign private properties to the return object with prefix
    Modernizr._version      = version;

    // expose these for the plugin API. Look in the source for how to join() them against your input
    /*>>prefixes*/
    Modernizr._prefixes     = prefixes;
    /*>>prefixes*/
    /*>>domprefixes*/
    Modernizr._domPrefixes  = domPrefixes;
    Modernizr._cssomPrefixes  = cssomPrefixes;
    /*>>domprefixes*/

    /*>>mq*/
    // Modernizr.mq tests a given media query, live against the current state of the window
    // A few important notes:
    //   * If a browser does not support media queries at all (eg. oldIE) the mq() will always return false
    //   * A max-width or orientation query will be evaluated against the current state, which may change later.
    //   * You must specify values. Eg. If you are testing support for the min-width media query use:
    //       Modernizr.mq('(min-width:0)')
    // usage:
    // Modernizr.mq('only screen and (max-width:768)')
    Modernizr.mq            = testMediaQuery;
    /*>>mq*/

    /*>>hasevent*/
    // Modernizr.hasEvent() detects support for a given event, with an optional element to test on
    // Modernizr.hasEvent('gesturestart', elem)
    Modernizr.hasEvent      = isEventSupported;
    /*>>hasevent*/

    /*>>testprop*/
    // Modernizr.testProp() investigates whether a given style property is recognized
    // Note that the property names must be provided in the camelCase variant.
    // Modernizr.testProp('pointerEvents')
    Modernizr.testProp      = function(prop){
        return testProps([prop]);
    };
    /*>>testprop*/

    /*>>testallprops*/
    // Modernizr.testAllProps() investigates whether a given style property,
    //   or any of its vendor-prefixed variants, is recognized
    // Note that the property names must be provided in the camelCase variant.
    // Modernizr.testAllProps('boxSizing')
    Modernizr.testAllProps  = testPropsAll;
    /*>>testallprops*/


    /*>>teststyles*/
    // Modernizr.testStyles() allows you to add custom styles to the document and test an element afterwards
    // Modernizr.testStyles('#modernizr { position:absolute }', function(elem, rule){ ... })
    Modernizr.testStyles    = injectElementWithStyles;
    /*>>teststyles*/


    /*>>prefixed*/
    // Modernizr.prefixed() returns the prefixed or nonprefixed property name variant of your input
    // Modernizr.prefixed('boxSizing') // 'MozBoxSizing'

    // Properties must be passed as dom-style camelcase, rather than `box-sizing` hypentated style.
    // Return values will also be the camelCase variant, if you need to translate that to hypenated style use:
    //
    //     str.replace(/([A-Z])/g, function(str,m1){ return '-' + m1.toLowerCase(); }).replace(/^ms-/,'-ms-');

    // If you're trying to ascertain which transition end event to bind to, you might do something like...
    //
    //     var transEndEventNames = {
    //       'WebkitTransition' : 'webkitTransitionEnd',
    //       'MozTransition'    : 'transitionend',
    //       'OTransition'      : 'oTransitionEnd',
    //       'msTransition'     : 'MSTransitionEnd',
    //       'transition'       : 'transitionend'
    //     },
    //     transEndEventName = transEndEventNames[ Modernizr.prefixed('transition') ];

    Modernizr.prefixed      = function(prop, obj, elem){
      if(!obj) {
        return testPropsAll(prop, 'pfx');
      } else {
        // Testing DOM property e.g. Modernizr.prefixed('requestAnimationFrame', window) // 'mozRequestAnimationFrame'
        return testPropsAll(prop, obj, elem);
      }
    };
    /*>>prefixed*/


    /*>>cssclasses*/
    // Remove "no-js" class from <html> element, if it exists:
    docElement.className = docElement.className.replace(/(^|\s)no-js(\s|$)/, '$1$2') +

                            // Add the new classes to the <html> element.
                            (enableClasses ? ' js ' + classes.join(' ') : '');
    /*>>cssclasses*/

    return Modernizr;

})(this, this.document);
var process = process || {env: {NODE_ENV: "development"}};
/*!
ICanHaz.js version 0.10 -- by @HenrikJoreteg
More info at: http://icanhazjs.com
*/
(function () {
/*
  mustache.js — Logic-less templates in JavaScript

  See http://mustache.github.com/ for more info.
*/

var Mustache = function () {
  var _toString = Object.prototype.toString;

  Array.isArray = Array.isArray || function (obj) {
    return _toString.call(obj) == "[object Array]";
  }

  var _trim = String.prototype.trim, trim;

  if (_trim) {
    trim = function (text) {
      return text == null ? "" : _trim.call(text);
    }
  } else {
    var trimLeft, trimRight;

    // IE doesn't match non-breaking spaces with \s.
    if ((/\S/).test("\xA0")) {
      trimLeft = /^[\s\xA0]+/;
      trimRight = /[\s\xA0]+$/;
    } else {
      trimLeft = /^\s+/;
      trimRight = /\s+$/;
    }

    trim = function (text) {
      return text == null ? "" :
        text.toString().replace(trimLeft, "").replace(trimRight, "");
    }
  }

  var escapeMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': '&quot;',
    "'": '&#39;'
  };

  function escapeHTML(string) {
    return String(string).replace(/&(?!\w+;)|[<>"']/g, function (s) {
      return escapeMap[s] || s;
    });
  }

  var regexCache = {};
  var Renderer = function () {};

  Renderer.prototype = {
    otag: "{{",
    ctag: "}}",
    pragmas: {},
    buffer: [],
    pragmas_implemented: {
      "IMPLICIT-ITERATOR": true
    },
    context: {},

    render: function (template, context, partials, in_recursion) {
      // reset buffer & set context
      if (!in_recursion) {
        this.context = context;
        this.buffer = []; // TODO: make this non-lazy
      }

      // fail fast
      if (!this.includes("", template)) {
        if (in_recursion) {
          return template;
        } else {
          this.send(template);
          return;
        }
      }

      // get the pragmas together
      template = this.render_pragmas(template);

      // render the template
      var html = this.render_section(template, context, partials);

      // render_section did not find any sections, we still need to render the tags
      if (html === false) {
        html = this.render_tags(template, context, partials, in_recursion);
      }

      if (in_recursion) {
        return html;
      } else {
        this.sendLines(html);
      }
    },

    /*
      Sends parsed lines
    */
    send: function (line) {
      if (line !== "") {
        this.buffer.push(line);
      }
    },

    sendLines: function (text) {
      if (text) {
        var lines = text.split("\n");
        for (var i = 0; i < lines.length; i++) {
          this.send(lines[i]);
        }
      }
    },

    /*
      Looks for %PRAGMAS
    */
    render_pragmas: function (template) {
      // no pragmas
      if (!this.includes("%", template)) {
        return template;
      }

      var that = this;
      var regex = this.getCachedRegex("render_pragmas", function (otag, ctag) {
        return new RegExp(otag + "%([\\w-]+) ?([\\w]+=[\\w]+)?" + ctag, "g");
      });

      return template.replace(regex, function (match, pragma, options) {
        if (!that.pragmas_implemented[pragma]) {
          throw({message:
            "This implementation of mustache doesn't understand the '" +
            pragma + "' pragma"});
        }
        that.pragmas[pragma] = {};
        if (options) {
          var opts = options.split("=");
          that.pragmas[pragma][opts[0]] = opts[1];
        }
        return "";
        // ignore unknown pragmas silently
      });
    },

    /*
      Tries to find a partial in the curent scope and render it
    */
    render_partial: function (name, context, partials) {
      name = trim(name);
      if (!partials || partials[name] === undefined) {
        throw({message: "unknown_partial '" + name + "'"});
      }
      if (!context || typeof context[name] != "object") {
        return this.render(partials[name], context, partials, true);
      }
      return this.render(partials[name], context[name], partials, true);
    },

    /*
      Renders inverted (^) and normal (#) sections
    */
    render_section: function (template, context, partials) {
      if (!this.includes("#", template) && !this.includes("^", template)) {
        // did not render anything, there were no sections
        return false;
      }

      var that = this;

      var regex = this.getCachedRegex("render_section", function (otag, ctag) {
        // This regex matches _the first_ section ({{#foo}}{{/foo}}), and captures the remainder
        return new RegExp(
          "^([\\s\\S]*?)" +         // all the crap at the beginning that is not {{*}} ($1)

          otag +                    // {{
          "(\\^|\\#)\\s*(.+)\\s*" + //  #foo (# == $2, foo == $3)
          ctag +                    // }}

          "\n*([\\s\\S]*?)" +       // between the tag ($2). leading newlines are dropped

          otag +                    // {{
          "\\/\\s*\\3\\s*" +        //  /foo (backreference to the opening tag).
          ctag +                    // }}

          "\\s*([\\s\\S]*)$",       // everything else in the string ($4). leading whitespace is dropped.

        "g");
      });


      // for each {{#foo}}{{/foo}} section do...
      return template.replace(regex, function (match, before, type, name, content, after) {
        // before contains only tags, no sections
        var renderedBefore = before ? that.render_tags(before, context, partials, true) : "",

        // after may contain both sections and tags, so use full rendering function
            renderedAfter = after ? that.render(after, context, partials, true) : "",

        // will be computed below
            renderedContent,

            value = that.find(name, context);

        if (type === "^") { // inverted section
          if (!value || Array.isArray(value) && value.length === 0) {
            // false or empty list, render it
            renderedContent = that.render(content, context, partials, true);
          } else {
            renderedContent = "";
          }
        } else if (type === "#") { // normal section
          if (Array.isArray(value)) { // Enumerable, Let's loop!
            renderedContent = that.map(value, function (row) {
              return that.render(content, that.create_context(row), partials, true);
            }).join("");
          } else if (that.is_object(value)) { // Object, Use it as subcontext!
            renderedContent = that.render(content, that.create_context(value),
              partials, true);
          } else if (typeof value == "function") {
            // higher order section
            renderedContent = value.call(context, content, function (text) {
              return that.render(text, context, partials, true);
            });
          } else if (value) { // boolean section
            renderedContent = that.render(content, context, partials, true);
          } else {
            renderedContent = "";
          }
        }

        return renderedBefore + renderedContent + renderedAfter;
      });
    },

    /*
      Replace {{foo}} and friends with values from our view
    */
    render_tags: function (template, context, partials, in_recursion) {
      // tit for tat
      var that = this;

      var new_regex = function () {
        return that.getCachedRegex("render_tags", function (otag, ctag) {
          return new RegExp(otag + "(=|!|>|&|\\{|%)?([^#\\^]+?)\\1?" + ctag + "+", "g");
        });
      };

      var regex = new_regex();
      var tag_replace_callback = function (match, operator, name) {
        switch(operator) {
        case "!": // ignore comments
          return "";
        case "=": // set new delimiters, rebuild the replace regexp
          that.set_delimiters(name);
          regex = new_regex();
          return "";
        case ">": // render partial
          return that.render_partial(name, context, partials);
        case "{": // the triple mustache is unescaped
        case "&": // & operator is an alternative unescape method
          return that.find(name, context);
        default: // escape the value
          return escapeHTML(that.find(name, context));
        }
      };
      var lines = template.split("\n");
      for(var i = 0; i < lines.length; i++) {
        lines[i] = lines[i].replace(regex, tag_replace_callback, this);
        if (!in_recursion) {
          this.send(lines[i]);
        }
      }

      if (in_recursion) {
        return lines.join("\n");
      }
    },

    set_delimiters: function (delimiters) {
      var dels = delimiters.split(" ");
      this.otag = this.escape_regex(dels[0]);
      this.ctag = this.escape_regex(dels[1]);
    },

    escape_regex: function (text) {
      // thank you Simon Willison
      if (!arguments.callee.sRE) {
        var specials = [
          '/', '.', '*', '+', '?', '|',
          '(', ')', '[', ']', '{', '}', '\\'
        ];
        arguments.callee.sRE = new RegExp(
          '(\\' + specials.join('|\\') + ')', 'g'
        );
      }
      return text.replace(arguments.callee.sRE, '\\$1');
    },

    /*
      find `name` in current `context`. That is find me a value
      from the view object
    */
    find: function (name, context) {
      name = trim(name);

      // Checks whether a value is thruthy or false or 0
      function is_kinda_truthy(bool) {
        return bool === false || bool === 0 || bool;
      }

      var value;

      // check for dot notation eg. foo.bar
      if (name.match(/([a-z_]+)\./ig)) {
        var childValue = this.walk_context(name, context);
        if (is_kinda_truthy(childValue)) {
          value = childValue;
        }
      } else {
        if (is_kinda_truthy(context[name])) {
          value = context[name];
        } else if (is_kinda_truthy(this.context[name])) {
          value = this.context[name];
        }
      }

      if (typeof value == "function") {
        return value.apply(context);
      }
      if (value !== undefined) {
        return value;
      }
      // silently ignore unkown variables
      return "";
    },

    walk_context: function (name, context) {
      var path = name.split('.');
      // if the var doesn't exist in current context, check the top level context
      var value_context = (context[path[0]] != undefined) ? context : this.context;
      var value = value_context[path.shift()];
      while (value != undefined && path.length > 0) {
        value_context = value;
        value = value[path.shift()];
      }
      // if the value is a function, call it, binding the correct context
      if (typeof value == "function") {
        return value.apply(value_context);
      }
      return value;
    },

    // Utility methods

    /* includes tag */
    includes: function (needle, haystack) {
      return haystack.indexOf(this.otag + needle) != -1;
    },

    // by @langalex, support for arrays of strings
    create_context: function (_context) {
      if (this.is_object(_context)) {
        return _context;
      } else {
        var iterator = ".";
        if (this.pragmas["IMPLICIT-ITERATOR"]) {
          iterator = this.pragmas["IMPLICIT-ITERATOR"].iterator;
        }
        var ctx = {};
        ctx[iterator] = _context;
        return ctx;
      }
    },

    is_object: function (a) {
      return a && typeof a == "object";
    },

    /*
      Why, why, why? Because IE. Cry, cry cry.
    */
    map: function (array, fn) {
      if (typeof array.map == "function") {
        return array.map(fn);
      } else {
        var r = [];
        var l = array.length;
        for(var i = 0; i < l; i++) {
          r.push(fn(array[i]));
        }
        return r;
      }
    },

    getCachedRegex: function (name, generator) {
      var byOtag = regexCache[this.otag];
      if (!byOtag) {
        byOtag = regexCache[this.otag] = {};
      }

      var byCtag = byOtag[this.ctag];
      if (!byCtag) {
        byCtag = byOtag[this.ctag] = {};
      }

      var regex = byCtag[name];
      if (!regex) {
        regex = byCtag[name] = generator(this.otag, this.ctag);
      }

      return regex;
    }
  };

  return({
    name: "mustache.js",
    version: "0.4.0",

    /*
      Turns a template and view into HTML
    */
    to_html: function (template, view, partials, send_fun) {
      var renderer = new Renderer();
      if (send_fun) {
        renderer.send = send_fun;
      }
      renderer.render(template, view || {}, partials);
      if (!send_fun) {
        return renderer.buffer.join("\n");
      }
    }
  });
}();
/*!
  ICanHaz.js -- by @HenrikJoreteg
*/
/*global  */
(function () {
    function trim(stuff) {
        if (''.trim) return stuff.trim();
        else return stuff.replace(/^\s+/, '').replace(/\s+$/, '');
    }
    var ich = {
        VERSION: "0.10",
        templates: {},
        
        // grab jquery or zepto if it's there
        $: (typeof window !== 'undefined') ? window.jQuery || window.Zepto || null : null,
        
        // public function for adding templates
        // can take a name and template string arguments
        // or can take an object with name/template pairs
        // We're enforcing uniqueness to avoid accidental template overwrites.
        // If you want a different template, it should have a different name.
        addTemplate: function (name, templateString) {
            if (typeof name === 'object') {
                for (var template in name) {
                    this.addTemplate(template, name[template]);
                }
                return;
            }
            if (ich[name]) {
                console.error("Invalid name: " + name + "."); 
            } else if (ich.templates[name]) {
                console.error("Template \"" + name + "  \" exists");
            } else {
                ich.templates[name] = templateString;
                ich[name] = function (data, raw) {
                    data = data || {};
                    var result = Mustache.to_html(ich.templates[name], data, ich.templates);
                    return (ich.$ && !raw) ? ich.$(result) : result;
                };
            }
        },
        
        // clears all retrieval functions and empties cache
        clearAll: function () {
            for (var key in ich.templates) {
                delete ich[key];
            }
            ich.templates = {};
        },
        
        // clears/grabs
        refresh: function () {
            ich.clearAll();
            ich.grabTemplates();
        },
        
        // grabs templates from the DOM and caches them.
        // Loop through and add templates.
        // Whitespace at beginning and end of all templates inside <script> tags will 
        // be trimmed. If you want whitespace around a partial, add it in the parent, 
        // not the partial. Or do it explicitly using <br/> or &nbsp;
        grabTemplates: function () {        
            var i, 
                scripts = document.getElementsByTagName('script'), 
                script,
                trash = [];
            for (i = 0, l = scripts.length; i < l; i++) {
                script = scripts[i];
                if (script && script.innerHTML && script.id && (script.type === "text/html" || script.type === "text/x-icanhaz")) {
                    ich.addTemplate(script.id, trim(script.innerHTML));
                    trash.unshift(script);
                }
            }
            for (i = 0, l = trash.length; i < l; i++) {
                trash[i].parentNode.removeChild(trash[i]);
            }
        }
    };
    
    // Use CommonJS if applicable
    if (typeof require !== 'undefined') {
        module.exports = ich;
    } else {
        // else attach it to the window
        window.ich = ich;
    }
    
    if (typeof document !== 'undefined') {
        if (ich.$) {
            ich.$(function () {
                ich.grabTemplates();
            });
        } else {
            document.addEventListener('DOMContentLoaded', function () {
                ich.grabTemplates();
            }, true);
        }
    }
        
})();
})();

var process = process || {env: {NODE_ENV: "development"}};
/*

Copyright (C) 2011 by Yehuda Katz

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.

*/

// lib/handlebars/base.js

/*jshint eqnull:true*/
this.Handlebars = {};

(function(Handlebars) {

Handlebars.VERSION = "1.0.0-rc.3";
Handlebars.COMPILER_REVISION = 2;

Handlebars.REVISION_CHANGES = {
  1: '<= 1.0.rc.2', // 1.0.rc.2 is actually rev2 but doesn't report it
  2: '>= 1.0.0-rc.3'
};

Handlebars.helpers  = {};
Handlebars.partials = {};

Handlebars.registerHelper = function(name, fn, inverse) {
  if(inverse) { fn.not = inverse; }
  this.helpers[name] = fn;
};

Handlebars.registerPartial = function(name, str) {
  this.partials[name] = str;
};

Handlebars.registerHelper('helperMissing', function(arg) {
  if(arguments.length === 2) {
    return undefined;
  } else {
    throw new Error("Could not find property '" + arg + "'");
  }
});

var toString = Object.prototype.toString, functionType = "[object Function]";

Handlebars.registerHelper('blockHelperMissing', function(context, options) {
  var inverse = options.inverse || function() {}, fn = options.fn;


  var ret = "";
  var type = toString.call(context);

  if(type === functionType) { context = context.call(this); }

  if(context === true) {
    return fn(this);
  } else if(context === false || context == null) {
    return inverse(this);
  } else if(type === "[object Array]") {
    if(context.length > 0) {
      return Handlebars.helpers.each(context, options);
    } else {
      return inverse(this);
    }
  } else {
    return fn(context);
  }
});

Handlebars.K = function() {};

Handlebars.createFrame = Object.create || function(object) {
  Handlebars.K.prototype = object;
  var obj = new Handlebars.K();
  Handlebars.K.prototype = null;
  return obj;
};

Handlebars.logger = {
  DEBUG: 0, INFO: 1, WARN: 2, ERROR: 3, level: 3,

  methodMap: {0: 'debug', 1: 'info', 2: 'warn', 3: 'error'},

  // can be overridden in the host environment
  log: function(level, obj) {
    if (Handlebars.logger.level <= level) {
      var method = Handlebars.logger.methodMap[level];
      if (typeof console !== 'undefined' && console[method]) {
        console[method].call(console, obj);
      }
    }
  }
};

Handlebars.log = function(level, obj) { Handlebars.logger.log(level, obj); };

Handlebars.registerHelper('each', function(context, options) {
  var fn = options.fn, inverse = options.inverse;
  var i = 0, ret = "", data;

  if (options.data) {
    data = Handlebars.createFrame(options.data);
  }

  if(context && typeof context === 'object') {
    if(context instanceof Array){
      for(var j = context.length; i<j; i++) {
        if (data) { data.index = i; }
        ret = ret + fn(context[i], { data: data });
      }
    } else {
      for(var key in context) {
        if(context.hasOwnProperty(key)) {
          if(data) { data.key = key; }
          ret = ret + fn(context[key], {data: data});
          i++;
        }
      }
    }
  }

  if(i === 0){
    ret = inverse(this);
  }

  return ret;
});

Handlebars.registerHelper('if', function(context, options) {
  var type = toString.call(context);
  if(type === functionType) { context = context.call(this); }

  if(!context || Handlebars.Utils.isEmpty(context)) {
    return options.inverse(this);
  } else {
    return options.fn(this);
  }
});

Handlebars.registerHelper('unless', function(context, options) {
  var fn = options.fn, inverse = options.inverse;
  options.fn = inverse;
  options.inverse = fn;

  return Handlebars.helpers['if'].call(this, context, options);
});

Handlebars.registerHelper('with', function(context, options) {
  return options.fn(context);
});

Handlebars.registerHelper('log', function(context, options) {
  var level = options.data && options.data.level != null ? parseInt(options.data.level, 10) : 1;
  Handlebars.log(level, context);
});

}(this.Handlebars));
;
// lib/handlebars/compiler/parser.js
/* Jison generated parser */
var handlebars = (function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"root":3,"program":4,"EOF":5,"simpleInverse":6,"statements":7,"statement":8,"openInverse":9,"closeBlock":10,"openBlock":11,"mustache":12,"partial":13,"CONTENT":14,"COMMENT":15,"OPEN_BLOCK":16,"inMustache":17,"CLOSE":18,"OPEN_INVERSE":19,"OPEN_ENDBLOCK":20,"path":21,"OPEN":22,"OPEN_UNESCAPED":23,"OPEN_PARTIAL":24,"partialName":25,"params":26,"hash":27,"DATA":28,"param":29,"STRING":30,"INTEGER":31,"BOOLEAN":32,"hashSegments":33,"hashSegment":34,"ID":35,"EQUALS":36,"PARTIAL_NAME":37,"pathSegments":38,"SEP":39,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",14:"CONTENT",15:"COMMENT",16:"OPEN_BLOCK",18:"CLOSE",19:"OPEN_INVERSE",20:"OPEN_ENDBLOCK",22:"OPEN",23:"OPEN_UNESCAPED",24:"OPEN_PARTIAL",28:"DATA",30:"STRING",31:"INTEGER",32:"BOOLEAN",35:"ID",36:"EQUALS",37:"PARTIAL_NAME",39:"SEP"},
productions_: [0,[3,2],[4,2],[4,3],[4,2],[4,1],[4,1],[4,0],[7,1],[7,2],[8,3],[8,3],[8,1],[8,1],[8,1],[8,1],[11,3],[9,3],[10,3],[12,3],[12,3],[13,3],[13,4],[6,2],[17,3],[17,2],[17,2],[17,1],[17,1],[26,2],[26,1],[29,1],[29,1],[29,1],[29,1],[29,1],[27,1],[33,2],[33,1],[34,3],[34,3],[34,3],[34,3],[34,3],[25,1],[21,1],[38,3],[38,1]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: this.$ = new yy.ProgramNode([], $$[$0]); 
break;
case 3: this.$ = new yy.ProgramNode($$[$0-2], $$[$0]); 
break;
case 4: this.$ = new yy.ProgramNode($$[$0-1], []); 
break;
case 5: this.$ = new yy.ProgramNode($$[$0]); 
break;
case 6: this.$ = new yy.ProgramNode([], []); 
break;
case 7: this.$ = new yy.ProgramNode([]); 
break;
case 8: this.$ = [$$[$0]]; 
break;
case 9: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 10: this.$ = new yy.BlockNode($$[$0-2], $$[$0-1].inverse, $$[$0-1], $$[$0]); 
break;
case 11: this.$ = new yy.BlockNode($$[$0-2], $$[$0-1], $$[$0-1].inverse, $$[$0]); 
break;
case 12: this.$ = $$[$0]; 
break;
case 13: this.$ = $$[$0]; 
break;
case 14: this.$ = new yy.ContentNode($$[$0]); 
break;
case 15: this.$ = new yy.CommentNode($$[$0]); 
break;
case 16: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]); 
break;
case 17: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]); 
break;
case 18: this.$ = $$[$0-1]; 
break;
case 19: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1]); 
break;
case 20: this.$ = new yy.MustacheNode($$[$0-1][0], $$[$0-1][1], true); 
break;
case 21: this.$ = new yy.PartialNode($$[$0-1]); 
break;
case 22: this.$ = new yy.PartialNode($$[$0-2], $$[$0-1]); 
break;
case 23: 
break;
case 24: this.$ = [[$$[$0-2]].concat($$[$0-1]), $$[$0]]; 
break;
case 25: this.$ = [[$$[$0-1]].concat($$[$0]), null]; 
break;
case 26: this.$ = [[$$[$0-1]], $$[$0]]; 
break;
case 27: this.$ = [[$$[$0]], null]; 
break;
case 28: this.$ = [[new yy.DataNode($$[$0])], null]; 
break;
case 29: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 30: this.$ = [$$[$0]]; 
break;
case 31: this.$ = $$[$0]; 
break;
case 32: this.$ = new yy.StringNode($$[$0]); 
break;
case 33: this.$ = new yy.IntegerNode($$[$0]); 
break;
case 34: this.$ = new yy.BooleanNode($$[$0]); 
break;
case 35: this.$ = new yy.DataNode($$[$0]); 
break;
case 36: this.$ = new yy.HashNode($$[$0]); 
break;
case 37: $$[$0-1].push($$[$0]); this.$ = $$[$0-1]; 
break;
case 38: this.$ = [$$[$0]]; 
break;
case 39: this.$ = [$$[$0-2], $$[$0]]; 
break;
case 40: this.$ = [$$[$0-2], new yy.StringNode($$[$0])]; 
break;
case 41: this.$ = [$$[$0-2], new yy.IntegerNode($$[$0])]; 
break;
case 42: this.$ = [$$[$0-2], new yy.BooleanNode($$[$0])]; 
break;
case 43: this.$ = [$$[$0-2], new yy.DataNode($$[$0])]; 
break;
case 44: this.$ = new yy.PartialNameNode($$[$0]); 
break;
case 45: this.$ = new yy.IdNode($$[$0]); 
break;
case 46: $$[$0-2].push($$[$0]); this.$ = $$[$0-2]; 
break;
case 47: this.$ = [$$[$0]]; 
break;
}
},
table: [{3:1,4:2,5:[2,7],6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],22:[1,14],23:[1,15],24:[1,16]},{1:[3]},{5:[1,17]},{5:[2,6],7:18,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,6],22:[1,14],23:[1,15],24:[1,16]},{5:[2,5],6:20,8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,5],22:[1,14],23:[1,15],24:[1,16]},{17:23,18:[1,22],21:24,28:[1,25],35:[1,27],38:26},{5:[2,8],14:[2,8],15:[2,8],16:[2,8],19:[2,8],20:[2,8],22:[2,8],23:[2,8],24:[2,8]},{4:28,6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,7],22:[1,14],23:[1,15],24:[1,16]},{4:29,6:3,7:4,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,5],20:[2,7],22:[1,14],23:[1,15],24:[1,16]},{5:[2,12],14:[2,12],15:[2,12],16:[2,12],19:[2,12],20:[2,12],22:[2,12],23:[2,12],24:[2,12]},{5:[2,13],14:[2,13],15:[2,13],16:[2,13],19:[2,13],20:[2,13],22:[2,13],23:[2,13],24:[2,13]},{5:[2,14],14:[2,14],15:[2,14],16:[2,14],19:[2,14],20:[2,14],22:[2,14],23:[2,14],24:[2,14]},{5:[2,15],14:[2,15],15:[2,15],16:[2,15],19:[2,15],20:[2,15],22:[2,15],23:[2,15],24:[2,15]},{17:30,21:24,28:[1,25],35:[1,27],38:26},{17:31,21:24,28:[1,25],35:[1,27],38:26},{17:32,21:24,28:[1,25],35:[1,27],38:26},{25:33,37:[1,34]},{1:[2,1]},{5:[2,2],8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,2],22:[1,14],23:[1,15],24:[1,16]},{17:23,21:24,28:[1,25],35:[1,27],38:26},{5:[2,4],7:35,8:6,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,4],22:[1,14],23:[1,15],24:[1,16]},{5:[2,9],14:[2,9],15:[2,9],16:[2,9],19:[2,9],20:[2,9],22:[2,9],23:[2,9],24:[2,9]},{5:[2,23],14:[2,23],15:[2,23],16:[2,23],19:[2,23],20:[2,23],22:[2,23],23:[2,23],24:[2,23]},{18:[1,36]},{18:[2,27],21:41,26:37,27:38,28:[1,45],29:39,30:[1,42],31:[1,43],32:[1,44],33:40,34:46,35:[1,47],38:26},{18:[2,28]},{18:[2,45],28:[2,45],30:[2,45],31:[2,45],32:[2,45],35:[2,45],39:[1,48]},{18:[2,47],28:[2,47],30:[2,47],31:[2,47],32:[2,47],35:[2,47],39:[2,47]},{10:49,20:[1,50]},{10:51,20:[1,50]},{18:[1,52]},{18:[1,53]},{18:[1,54]},{18:[1,55],21:56,35:[1,27],38:26},{18:[2,44],35:[2,44]},{5:[2,3],8:21,9:7,11:8,12:9,13:10,14:[1,11],15:[1,12],16:[1,13],19:[1,19],20:[2,3],22:[1,14],23:[1,15],24:[1,16]},{14:[2,17],15:[2,17],16:[2,17],19:[2,17],20:[2,17],22:[2,17],23:[2,17],24:[2,17]},{18:[2,25],21:41,27:57,28:[1,45],29:58,30:[1,42],31:[1,43],32:[1,44],33:40,34:46,35:[1,47],38:26},{18:[2,26]},{18:[2,30],28:[2,30],30:[2,30],31:[2,30],32:[2,30],35:[2,30]},{18:[2,36],34:59,35:[1,60]},{18:[2,31],28:[2,31],30:[2,31],31:[2,31],32:[2,31],35:[2,31]},{18:[2,32],28:[2,32],30:[2,32],31:[2,32],32:[2,32],35:[2,32]},{18:[2,33],28:[2,33],30:[2,33],31:[2,33],32:[2,33],35:[2,33]},{18:[2,34],28:[2,34],30:[2,34],31:[2,34],32:[2,34],35:[2,34]},{18:[2,35],28:[2,35],30:[2,35],31:[2,35],32:[2,35],35:[2,35]},{18:[2,38],35:[2,38]},{18:[2,47],28:[2,47],30:[2,47],31:[2,47],32:[2,47],35:[2,47],36:[1,61],39:[2,47]},{35:[1,62]},{5:[2,10],14:[2,10],15:[2,10],16:[2,10],19:[2,10],20:[2,10],22:[2,10],23:[2,10],24:[2,10]},{21:63,35:[1,27],38:26},{5:[2,11],14:[2,11],15:[2,11],16:[2,11],19:[2,11],20:[2,11],22:[2,11],23:[2,11],24:[2,11]},{14:[2,16],15:[2,16],16:[2,16],19:[2,16],20:[2,16],22:[2,16],23:[2,16],24:[2,16]},{5:[2,19],14:[2,19],15:[2,19],16:[2,19],19:[2,19],20:[2,19],22:[2,19],23:[2,19],24:[2,19]},{5:[2,20],14:[2,20],15:[2,20],16:[2,20],19:[2,20],20:[2,20],22:[2,20],23:[2,20],24:[2,20]},{5:[2,21],14:[2,21],15:[2,21],16:[2,21],19:[2,21],20:[2,21],22:[2,21],23:[2,21],24:[2,21]},{18:[1,64]},{18:[2,24]},{18:[2,29],28:[2,29],30:[2,29],31:[2,29],32:[2,29],35:[2,29]},{18:[2,37],35:[2,37]},{36:[1,61]},{21:65,28:[1,69],30:[1,66],31:[1,67],32:[1,68],35:[1,27],38:26},{18:[2,46],28:[2,46],30:[2,46],31:[2,46],32:[2,46],35:[2,46],39:[2,46]},{18:[1,70]},{5:[2,22],14:[2,22],15:[2,22],16:[2,22],19:[2,22],20:[2,22],22:[2,22],23:[2,22],24:[2,22]},{18:[2,39],35:[2,39]},{18:[2,40],35:[2,40]},{18:[2,41],35:[2,41]},{18:[2,42],35:[2,42]},{18:[2,43],35:[2,43]},{5:[2,18],14:[2,18],15:[2,18],16:[2,18],19:[2,18],20:[2,18],22:[2,18],23:[2,18],24:[2,18]}],
defaultActions: {17:[2,1],25:[2,28],38:[2,26],57:[2,24]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this, stack = [0], vstack = [null], lstack = [], table = this.table, yytext = "", yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == "undefined")
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);
    var ranges = this.lexer.options && this.lexer.options.ranges;
    if (typeof this.yy.parseError === "function")
        this.parseError = this.yy.parseError;
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    function lex() {
        var token;
        token = self.lexer.lex() || 1;
        if (typeof token !== "number") {
            token = self.symbols_[token] || token;
        }
        return token;
    }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == "undefined") {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
        if (typeof action === "undefined" || !action.length || !action[0]) {
            var errStr = "";
            if (!recovering) {
                expected = [];
                for (p in table[state])
                    if (this.terminals_[p] && p > 2) {
                        expected.push("'" + this.terminals_[p] + "'");
                    }
                if (this.lexer.showPosition) {
                    errStr = "Parse error on line " + (yylineno + 1) + ":\n" + this.lexer.showPosition() + "\nExpecting " + expected.join(", ") + ", got '" + (this.terminals_[symbol] || symbol) + "'";
                } else {
                    errStr = "Parse error on line " + (yylineno + 1) + ": Unexpected " + (symbol == 1?"end of input":"'" + (this.terminals_[symbol] || symbol) + "'");
                }
                this.parseError(errStr, {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }
        }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error("Parse Error: multiple actions possible at state: " + state + ", token: " + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(this.lexer.yytext);
            lstack.push(this.lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                if (recovering > 0)
                    recovering--;
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {first_line: lstack[lstack.length - (len || 1)].first_line, last_line: lstack[lstack.length - 1].last_line, first_column: lstack[lstack.length - (len || 1)].first_column, last_column: lstack[lstack.length - 1].last_column};
            if (ranges) {
                yyval._$.range = [lstack[lstack.length - (len || 1)].range[0], lstack[lstack.length - 1].range[1]];
            }
            r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);
            if (typeof r !== "undefined") {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}
};
/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.options = {};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0:
                                   if(yy_.yytext.slice(-1) !== "\\") this.begin("mu");
                                   if(yy_.yytext.slice(-1) === "\\") yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1), this.begin("emu");
                                   if(yy_.yytext) return 14;
                                 
break;
case 1: return 14; 
break;
case 2:
                                   if(yy_.yytext.slice(-1) !== "\\") this.popState();
                                   if(yy_.yytext.slice(-1) === "\\") yy_.yytext = yy_.yytext.substr(0,yy_.yyleng-1);
                                   return 14;
                                 
break;
case 3: yy_.yytext = yy_.yytext.substr(0, yy_.yyleng-4); this.popState(); return 15; 
break;
case 4: this.begin("par"); return 24; 
break;
case 5: return 16; 
break;
case 6: return 20; 
break;
case 7: return 19; 
break;
case 8: return 19; 
break;
case 9: return 23; 
break;
case 10: return 23; 
break;
case 11: this.popState(); this.begin('com'); 
break;
case 12: yy_.yytext = yy_.yytext.substr(3,yy_.yyleng-5); this.popState(); return 15; 
break;
case 13: return 22; 
break;
case 14: return 36; 
break;
case 15: return 35; 
break;
case 16: return 35; 
break;
case 17: return 39; 
break;
case 18: /*ignore whitespace*/ 
break;
case 19: this.popState(); return 18; 
break;
case 20: this.popState(); return 18; 
break;
case 21: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace(/\\"/g,'"'); return 30; 
break;
case 22: yy_.yytext = yy_.yytext.substr(1,yy_.yyleng-2).replace(/\\'/g,"'"); return 30; 
break;
case 23: yy_.yytext = yy_.yytext.substr(1); return 28; 
break;
case 24: return 32; 
break;
case 25: return 32; 
break;
case 26: return 31; 
break;
case 27: return 35; 
break;
case 28: yy_.yytext = yy_.yytext.substr(1, yy_.yyleng-2); return 35; 
break;
case 29: return 'INVALID'; 
break;
case 30: /*ignore whitespace*/ 
break;
case 31: this.popState(); return 37; 
break;
case 32: return 5; 
break;
}
};
lexer.rules = [/^(?:[^\x00]*?(?=(\{\{)))/,/^(?:[^\x00]+)/,/^(?:[^\x00]{2,}?(?=(\{\{|$)))/,/^(?:[\s\S]*?--\}\})/,/^(?:\{\{>)/,/^(?:\{\{#)/,/^(?:\{\{\/)/,/^(?:\{\{\^)/,/^(?:\{\{\s*else\b)/,/^(?:\{\{\{)/,/^(?:\{\{&)/,/^(?:\{\{!--)/,/^(?:\{\{![\s\S]*?\}\})/,/^(?:\{\{)/,/^(?:=)/,/^(?:\.(?=[} ]))/,/^(?:\.\.)/,/^(?:[\/.])/,/^(?:\s+)/,/^(?:\}\}\})/,/^(?:\}\})/,/^(?:"(\\["]|[^"])*")/,/^(?:'(\\[']|[^'])*')/,/^(?:@[a-zA-Z]+)/,/^(?:true(?=[}\s]))/,/^(?:false(?=[}\s]))/,/^(?:[0-9]+(?=[}\s]))/,/^(?:[a-zA-Z0-9_$-]+(?=[=}\s\/.]))/,/^(?:\[[^\]]*\])/,/^(?:.)/,/^(?:\s+)/,/^(?:[a-zA-Z0-9_$-/]+)/,/^(?:$)/];
lexer.conditions = {"mu":{"rules":[4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,32],"inclusive":false},"emu":{"rules":[2],"inclusive":false},"com":{"rules":[3],"inclusive":false},"par":{"rules":[30,31],"inclusive":false},"INITIAL":{"rules":[0,1,32],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;
function Parser () { this.yy = {}; }Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();;
// lib/handlebars/compiler/base.js
Handlebars.Parser = handlebars;

Handlebars.parse = function(input) {

  // Just return if an already-compile AST was passed in.
  if(input.constructor === Handlebars.AST.ProgramNode) { return input; }

  Handlebars.Parser.yy = Handlebars.AST;
  return Handlebars.Parser.parse(input);
};

Handlebars.print = function(ast) {
  return new Handlebars.PrintVisitor().accept(ast);
};;
// lib/handlebars/compiler/ast.js
(function() {

  Handlebars.AST = {};

  Handlebars.AST.ProgramNode = function(statements, inverse) {
    this.type = "program";
    this.statements = statements;
    if(inverse) { this.inverse = new Handlebars.AST.ProgramNode(inverse); }
  };

  Handlebars.AST.MustacheNode = function(rawParams, hash, unescaped) {
    this.type = "mustache";
    this.escaped = !unescaped;
    this.hash = hash;

    var id = this.id = rawParams[0];
    var params = this.params = rawParams.slice(1);

    // a mustache is an eligible helper if:
    // * its id is simple (a single part, not `this` or `..`)
    var eligibleHelper = this.eligibleHelper = id.isSimple;

    // a mustache is definitely a helper if:
    // * it is an eligible helper, and
    // * it has at least one parameter or hash segment
    this.isHelper = eligibleHelper && (params.length || hash);

    // if a mustache is an eligible helper but not a definite
    // helper, it is ambiguous, and will be resolved in a later
    // pass or at runtime.
  };

  Handlebars.AST.PartialNode = function(partialName, context) {
    this.type         = "partial";
    this.partialName  = partialName;
    this.context      = context;
  };

  var verifyMatch = function(open, close) {
    if(open.original !== close.original) {
      throw new Handlebars.Exception(open.original + " doesn't match " + close.original);
    }
  };

  Handlebars.AST.BlockNode = function(mustache, program, inverse, close) {
    verifyMatch(mustache.id, close);
    this.type = "block";
    this.mustache = mustache;
    this.program  = program;
    this.inverse  = inverse;

    if (this.inverse && !this.program) {
      this.isInverse = true;
    }
  };

  Handlebars.AST.ContentNode = function(string) {
    this.type = "content";
    this.string = string;
  };

  Handlebars.AST.HashNode = function(pairs) {
    this.type = "hash";
    this.pairs = pairs;
  };

  Handlebars.AST.IdNode = function(parts) {
    this.type = "ID";
    this.original = parts.join(".");

    var dig = [], depth = 0;

    for(var i=0,l=parts.length; i<l; i++) {
      var part = parts[i];

      if (part === ".." || part === "." || part === "this") {
        if (dig.length > 0) { throw new Handlebars.Exception("Invalid path: " + this.original); }
        else if (part === "..") { depth++; }
        else { this.isScoped = true; }
      }
      else { dig.push(part); }
    }

    this.parts    = dig;
    this.string   = dig.join('.');
    this.depth    = depth;

    // an ID is simple if it only has one part, and that part is not
    // `..` or `this`.
    this.isSimple = parts.length === 1 && !this.isScoped && depth === 0;

    this.stringModeValue = this.string;
  };

  Handlebars.AST.PartialNameNode = function(name) {
    this.type = "PARTIAL_NAME";
    this.name = name;
  };

  Handlebars.AST.DataNode = function(id) {
    this.type = "DATA";
    this.id = id;
  };

  Handlebars.AST.StringNode = function(string) {
    this.type = "STRING";
    this.string = string;
    this.stringModeValue = string;
  };

  Handlebars.AST.IntegerNode = function(integer) {
    this.type = "INTEGER";
    this.integer = integer;
    this.stringModeValue = Number(integer);
  };

  Handlebars.AST.BooleanNode = function(bool) {
    this.type = "BOOLEAN";
    this.bool = bool;
    this.stringModeValue = bool === "true";
  };

  Handlebars.AST.CommentNode = function(comment) {
    this.type = "comment";
    this.comment = comment;
  };

})();;
// lib/handlebars/utils.js

var errorProps = ['description', 'fileName', 'lineNumber', 'message', 'name', 'number', 'stack'];

Handlebars.Exception = function(message) {
  var tmp = Error.prototype.constructor.apply(this, arguments);

  // Unfortunately errors are not enumerable in Chrome (at least), so `for prop in tmp` doesn't work.
  for (var idx = 0; idx < errorProps.length; idx++) {
    this[errorProps[idx]] = tmp[errorProps[idx]];
  }
};
Handlebars.Exception.prototype = new Error();

// Build out our basic SafeString type
Handlebars.SafeString = function(string) {
  this.string = string;
};
Handlebars.SafeString.prototype.toString = function() {
  return this.string.toString();
};

(function() {
  var escape = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#x27;",
    "`": "&#x60;"
  };

  var badChars = /[&<>"'`]/g;
  var possible = /[&<>"'`]/;

  var escapeChar = function(chr) {
    return escape[chr] || "&amp;";
  };

  Handlebars.Utils = {
    escapeExpression: function(string) {
      // don't escape SafeStrings, since they're already safe
      if (string instanceof Handlebars.SafeString) {
        return string.toString();
      } else if (string == null || string === false) {
        return "";
      }

      if(!possible.test(string)) { return string; }
      return string.replace(badChars, escapeChar);
    },

    isEmpty: function(value) {
      if (!value && value !== 0) {
        return true;
      } else if(Object.prototype.toString.call(value) === "[object Array]" && value.length === 0) {
        return true;
      } else {
        return false;
      }
    }
  };
})();;
// lib/handlebars/compiler/compiler.js

/*jshint eqnull:true*/
Handlebars.Compiler = function() {};
Handlebars.JavaScriptCompiler = function() {};

(function(Compiler, JavaScriptCompiler) {
  // the foundHelper register will disambiguate helper lookup from finding a
  // function in a context. This is necessary for mustache compatibility, which
  // requires that context functions in blocks are evaluated by blockHelperMissing,
  // and then proceed as if the resulting value was provided to blockHelperMissing.

  Compiler.prototype = {
    compiler: Compiler,

    disassemble: function() {
      var opcodes = this.opcodes, opcode, out = [], params, param;

      for (var i=0, l=opcodes.length; i<l; i++) {
        opcode = opcodes[i];

        if (opcode.opcode === 'DECLARE') {
          out.push("DECLARE " + opcode.name + "=" + opcode.value);
        } else {
          params = [];
          for (var j=0; j<opcode.args.length; j++) {
            param = opcode.args[j];
            if (typeof param === "string") {
              param = "\"" + param.replace("\n", "\\n") + "\"";
            }
            params.push(param);
          }
          out.push(opcode.opcode + " " + params.join(" "));
        }
      }

      return out.join("\n");
    },
    equals: function(other) {
      var len = this.opcodes.length;
      if (other.opcodes.length !== len) {
        return false;
      }

      for (var i = 0; i < len; i++) {
        var opcode = this.opcodes[i],
            otherOpcode = other.opcodes[i];
        if (opcode.opcode !== otherOpcode.opcode || opcode.args.length !== otherOpcode.args.length) {
          return false;
        }
        for (var j = 0; j < opcode.args.length; j++) {
          if (opcode.args[j] !== otherOpcode.args[j]) {
            return false;
          }
        }
      }
      return true;
    },

    guid: 0,

    compile: function(program, options) {
      this.children = [];
      this.depths = {list: []};
      this.options = options;

      // These changes will propagate to the other compiler components
      var knownHelpers = this.options.knownHelpers;
      this.options.knownHelpers = {
        'helperMissing': true,
        'blockHelperMissing': true,
        'each': true,
        'if': true,
        'unless': true,
        'with': true,
        'log': true
      };
      if (knownHelpers) {
        for (var name in knownHelpers) {
          this.options.knownHelpers[name] = knownHelpers[name];
        }
      }

      return this.program(program);
    },

    accept: function(node) {
      return this[node.type](node);
    },

    program: function(program) {
      var statements = program.statements, statement;
      this.opcodes = [];

      for(var i=0, l=statements.length; i<l; i++) {
        statement = statements[i];
        this[statement.type](statement);
      }
      this.isSimple = l === 1;

      this.depths.list = this.depths.list.sort(function(a, b) {
        return a - b;
      });

      return this;
    },

    compileProgram: function(program) {
      var result = new this.compiler().compile(program, this.options);
      var guid = this.guid++, depth;

      this.usePartial = this.usePartial || result.usePartial;

      this.children[guid] = result;

      for(var i=0, l=result.depths.list.length; i<l; i++) {
        depth = result.depths.list[i];

        if(depth < 2) { continue; }
        else { this.addDepth(depth - 1); }
      }

      return guid;
    },

    block: function(block) {
      var mustache = block.mustache,
          program = block.program,
          inverse = block.inverse;

      if (program) {
        program = this.compileProgram(program);
      }

      if (inverse) {
        inverse = this.compileProgram(inverse);
      }

      var type = this.classifyMustache(mustache);

      if (type === "helper") {
        this.helperMustache(mustache, program, inverse);
      } else if (type === "simple") {
        this.simpleMustache(mustache);

        // now that the simple mustache is resolved, we need to
        // evaluate it by executing `blockHelperMissing`
        this.opcode('pushProgram', program);
        this.opcode('pushProgram', inverse);
        this.opcode('emptyHash');
        this.opcode('blockValue');
      } else {
        this.ambiguousMustache(mustache, program, inverse);

        // now that the simple mustache is resolved, we need to
        // evaluate it by executing `blockHelperMissing`
        this.opcode('pushProgram', program);
        this.opcode('pushProgram', inverse);
        this.opcode('emptyHash');
        this.opcode('ambiguousBlockValue');
      }

      this.opcode('append');
    },

    hash: function(hash) {
      var pairs = hash.pairs, pair, val;

      this.opcode('pushHash');

      for(var i=0, l=pairs.length; i<l; i++) {
        pair = pairs[i];
        val  = pair[1];

        if (this.options.stringParams) {
          this.opcode('pushStringParam', val.stringModeValue, val.type);
        } else {
          this.accept(val);
        }

        this.opcode('assignToHash', pair[0]);
      }
      this.opcode('popHash');
    },

    partial: function(partial) {
      var partialName = partial.partialName;
      this.usePartial = true;

      if(partial.context) {
        this.ID(partial.context);
      } else {
        this.opcode('push', 'depth0');
      }

      this.opcode('invokePartial', partialName.name);
      this.opcode('append');
    },

    content: function(content) {
      this.opcode('appendContent', content.string);
    },

    mustache: function(mustache) {
      var options = this.options;
      var type = this.classifyMustache(mustache);

      if (type === "simple") {
        this.simpleMustache(mustache);
      } else if (type === "helper") {
        this.helperMustache(mustache);
      } else {
        this.ambiguousMustache(mustache);
      }

      if(mustache.escaped && !options.noEscape) {
        this.opcode('appendEscaped');
      } else {
        this.opcode('append');
      }
    },

    ambiguousMustache: function(mustache, program, inverse) {
      var id = mustache.id,
          name = id.parts[0],
          isBlock = program != null || inverse != null;

      this.opcode('getContext', id.depth);

      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);

      this.opcode('invokeAmbiguous', name, isBlock);
    },

    simpleMustache: function(mustache) {
      var id = mustache.id;

      if (id.type === 'DATA') {
        this.DATA(id);
      } else if (id.parts.length) {
        this.ID(id);
      } else {
        // Simplified ID for `this`
        this.addDepth(id.depth);
        this.opcode('getContext', id.depth);
        this.opcode('pushContext');
      }

      this.opcode('resolvePossibleLambda');
    },

    helperMustache: function(mustache, program, inverse) {
      var params = this.setupFullMustacheParams(mustache, program, inverse),
          name = mustache.id.parts[0];

      if (this.options.knownHelpers[name]) {
        this.opcode('invokeKnownHelper', params.length, name);
      } else if (this.knownHelpersOnly) {
        throw new Error("You specified knownHelpersOnly, but used the unknown helper " + name);
      } else {
        this.opcode('invokeHelper', params.length, name);
      }
    },

    ID: function(id) {
      this.addDepth(id.depth);
      this.opcode('getContext', id.depth);

      var name = id.parts[0];
      if (!name) {
        this.opcode('pushContext');
      } else {
        this.opcode('lookupOnContext', id.parts[0]);
      }

      for(var i=1, l=id.parts.length; i<l; i++) {
        this.opcode('lookup', id.parts[i]);
      }
    },

    DATA: function(data) {
      this.options.data = true;
      this.opcode('lookupData', data.id);
    },

    STRING: function(string) {
      this.opcode('pushString', string.string);
    },

    INTEGER: function(integer) {
      this.opcode('pushLiteral', integer.integer);
    },

    BOOLEAN: function(bool) {
      this.opcode('pushLiteral', bool.bool);
    },

    comment: function() {},

    // HELPERS
    opcode: function(name) {
      this.opcodes.push({ opcode: name, args: [].slice.call(arguments, 1) });
    },

    declare: function(name, value) {
      this.opcodes.push({ opcode: 'DECLARE', name: name, value: value });
    },

    addDepth: function(depth) {
      if(isNaN(depth)) { throw new Error("EWOT"); }
      if(depth === 0) { return; }

      if(!this.depths[depth]) {
        this.depths[depth] = true;
        this.depths.list.push(depth);
      }
    },

    classifyMustache: function(mustache) {
      var isHelper   = mustache.isHelper;
      var isEligible = mustache.eligibleHelper;
      var options    = this.options;

      // if ambiguous, we can possibly resolve the ambiguity now
      if (isEligible && !isHelper) {
        var name = mustache.id.parts[0];

        if (options.knownHelpers[name]) {
          isHelper = true;
        } else if (options.knownHelpersOnly) {
          isEligible = false;
        }
      }

      if (isHelper) { return "helper"; }
      else if (isEligible) { return "ambiguous"; }
      else { return "simple"; }
    },

    pushParams: function(params) {
      var i = params.length, param;

      while(i--) {
        param = params[i];

        if(this.options.stringParams) {
          if(param.depth) {
            this.addDepth(param.depth);
          }

          this.opcode('getContext', param.depth || 0);
          this.opcode('pushStringParam', param.stringModeValue, param.type);
        } else {
          this[param.type](param);
        }
      }
    },

    setupMustacheParams: function(mustache) {
      var params = mustache.params;
      this.pushParams(params);

      if(mustache.hash) {
        this.hash(mustache.hash);
      } else {
        this.opcode('emptyHash');
      }

      return params;
    },

    // this will replace setupMustacheParams when we're done
    setupFullMustacheParams: function(mustache, program, inverse) {
      var params = mustache.params;
      this.pushParams(params);

      this.opcode('pushProgram', program);
      this.opcode('pushProgram', inverse);

      if(mustache.hash) {
        this.hash(mustache.hash);
      } else {
        this.opcode('emptyHash');
      }

      return params;
    }
  };

  var Literal = function(value) {
    this.value = value;
  };

  JavaScriptCompiler.prototype = {
    // PUBLIC API: You can override these methods in a subclass to provide
    // alternative compiled forms for name lookup and buffering semantics
    nameLookup: function(parent, name /* , type*/) {
      if (/^[0-9]+$/.test(name)) {
        return parent + "[" + name + "]";
      } else if (JavaScriptCompiler.isValidJavaScriptVariableName(name)) {
        return parent + "." + name;
      }
      else {
        return parent + "['" + name + "']";
      }
    },

    appendToBuffer: function(string) {
      if (this.environment.isSimple) {
        return "return " + string + ";";
      } else {
        return {
          appendToBuffer: true,
          content: string,
          toString: function() { return "buffer += " + string + ";"; }
        };
      }
    },

    initializeBuffer: function() {
      return this.quotedString("");
    },

    namespace: "Handlebars",
    // END PUBLIC API

    compile: function(environment, options, context, asObject) {
      this.environment = environment;
      this.options = options || {};

      Handlebars.log(Handlebars.logger.DEBUG, this.environment.disassemble() + "\n\n");

      this.name = this.environment.name;
      this.isChild = !!context;
      this.context = context || {
        programs: [],
        environments: [],
        aliases: { }
      };

      this.preamble();

      this.stackSlot = 0;
      this.stackVars = [];
      this.registers = { list: [] };
      this.compileStack = [];
      this.inlineStack = [];

      this.compileChildren(environment, options);

      var opcodes = environment.opcodes, opcode;

      this.i = 0;

      for(l=opcodes.length; this.i<l; this.i++) {
        opcode = opcodes[this.i];

        if(opcode.opcode === 'DECLARE') {
          this[opcode.name] = opcode.value;
        } else {
          this[opcode.opcode].apply(this, opcode.args);
        }
      }

      return this.createFunctionContext(asObject);
    },

    nextOpcode: function() {
      var opcodes = this.environment.opcodes;
      return opcodes[this.i + 1];
    },

    eat: function() {
      this.i = this.i + 1;
    },

    preamble: function() {
      var out = [];

      if (!this.isChild) {
        var namespace = this.namespace;
        var copies = "helpers = helpers || " + namespace + ".helpers;";
        if (this.environment.usePartial) { copies = copies + " partials = partials || " + namespace + ".partials;"; }
        if (this.options.data) { copies = copies + " data = data || {};"; }
        out.push(copies);
      } else {
        out.push('');
      }

      if (!this.environment.isSimple) {
        out.push(", buffer = " + this.initializeBuffer());
      } else {
        out.push("");
      }

      // track the last context pushed into place to allow skipping the
      // getContext opcode when it would be a noop
      this.lastContext = 0;
      this.source = out;
    },

    createFunctionContext: function(asObject) {
      var locals = this.stackVars.concat(this.registers.list);

      if(locals.length > 0) {
        this.source[1] = this.source[1] + ", " + locals.join(", ");
      }

      // Generate minimizer alias mappings
      if (!this.isChild) {
        for (var alias in this.context.aliases) {
          this.source[1] = this.source[1] + ', ' + alias + '=' + this.context.aliases[alias];
        }
      }

      if (this.source[1]) {
        this.source[1] = "var " + this.source[1].substring(2) + ";";
      }

      // Merge children
      if (!this.isChild) {
        this.source[1] += '\n' + this.context.programs.join('\n') + '\n';
      }

      if (!this.environment.isSimple) {
        this.source.push("return buffer;");
      }

      var params = this.isChild ? ["depth0", "data"] : ["Handlebars", "depth0", "helpers", "partials", "data"];

      for(var i=0, l=this.environment.depths.list.length; i<l; i++) {
        params.push("depth" + this.environment.depths.list[i]);
      }

      // Perform a second pass over the output to merge content when possible
      var source = this.mergeSource();

      if (!this.isChild) {
        var revision = Handlebars.COMPILER_REVISION,
            versions = Handlebars.REVISION_CHANGES[revision];
        source = "this.compilerInfo = ["+revision+",'"+versions+"'];\n"+source;
      }

      if (asObject) {
        params.push(source);

        return Function.apply(this, params);
      } else {
        var functionSource = 'function ' + (this.name || '') + '(' + params.join(',') + ') {\n  ' + source + '}';
        Handlebars.log(Handlebars.logger.DEBUG, functionSource + "\n\n");
        return functionSource;
      }
    },
    mergeSource: function() {
      // WARN: We are not handling the case where buffer is still populated as the source should
      // not have buffer append operations as their final action.
      var source = '',
          buffer;
      for (var i = 0, len = this.source.length; i < len; i++) {
        var line = this.source[i];
        if (line.appendToBuffer) {
          if (buffer) {
            buffer = buffer + '\n    + ' + line.content;
          } else {
            buffer = line.content;
          }
        } else {
          if (buffer) {
            source += 'buffer += ' + buffer + ';\n  ';
            buffer = undefined;
          }
          source += line + '\n  ';
        }
      }
      return source;
    },

    // [blockValue]
    //
    // On stack, before: hash, inverse, program, value
    // On stack, after: return value of blockHelperMissing
    //
    // The purpose of this opcode is to take a block of the form
    // `{{#foo}}...{{/foo}}`, resolve the value of `foo`, and
    // replace it on the stack with the result of properly
    // invoking blockHelperMissing.
    blockValue: function() {
      this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

      var params = ["depth0"];
      this.setupParams(0, params);

      this.replaceStack(function(current) {
        params.splice(1, 0, current);
        return "blockHelperMissing.call(" + params.join(", ") + ")";
      });
    },

    // [ambiguousBlockValue]
    //
    // On stack, before: hash, inverse, program, value
    // Compiler value, before: lastHelper=value of last found helper, if any
    // On stack, after, if no lastHelper: same as [blockValue]
    // On stack, after, if lastHelper: value
    ambiguousBlockValue: function() {
      this.context.aliases.blockHelperMissing = 'helpers.blockHelperMissing';

      var params = ["depth0"];
      this.setupParams(0, params);

      var current = this.topStack();
      params.splice(1, 0, current);

      // Use the options value generated from the invocation
      params[params.length-1] = 'options';

      this.source.push("if (!" + this.lastHelper + ") { " + current + " = blockHelperMissing.call(" + params.join(", ") + "); }");
    },

    // [appendContent]
    //
    // On stack, before: ...
    // On stack, after: ...
    //
    // Appends the string value of `content` to the current buffer
    appendContent: function(content) {
      this.source.push(this.appendToBuffer(this.quotedString(content)));
    },

    // [append]
    //
    // On stack, before: value, ...
    // On stack, after: ...
    //
    // Coerces `value` to a String and appends it to the current buffer.
    //
    // If `value` is truthy, or 0, it is coerced into a string and appended
    // Otherwise, the empty string is appended
    append: function() {
      // Force anything that is inlined onto the stack so we don't have duplication
      // when we examine local
      this.flushInline();
      var local = this.popStack();
      this.source.push("if(" + local + " || " + local + " === 0) { " + this.appendToBuffer(local) + " }");
      if (this.environment.isSimple) {
        this.source.push("else { " + this.appendToBuffer("''") + " }");
      }
    },

    // [appendEscaped]
    //
    // On stack, before: value, ...
    // On stack, after: ...
    //
    // Escape `value` and append it to the buffer
    appendEscaped: function() {
      this.context.aliases.escapeExpression = 'this.escapeExpression';

      this.source.push(this.appendToBuffer("escapeExpression(" + this.popStack() + ")"));
    },

    // [getContext]
    //
    // On stack, before: ...
    // On stack, after: ...
    // Compiler value, after: lastContext=depth
    //
    // Set the value of the `lastContext` compiler value to the depth
    getContext: function(depth) {
      if(this.lastContext !== depth) {
        this.lastContext = depth;
      }
    },

    // [lookupOnContext]
    //
    // On stack, before: ...
    // On stack, after: currentContext[name], ...
    //
    // Looks up the value of `name` on the current context and pushes
    // it onto the stack.
    lookupOnContext: function(name) {
      this.push(this.nameLookup('depth' + this.lastContext, name, 'context'));
    },

    // [pushContext]
    //
    // On stack, before: ...
    // On stack, after: currentContext, ...
    //
    // Pushes the value of the current context onto the stack.
    pushContext: function() {
      this.pushStackLiteral('depth' + this.lastContext);
    },

    // [resolvePossibleLambda]
    //
    // On stack, before: value, ...
    // On stack, after: resolved value, ...
    //
    // If the `value` is a lambda, replace it on the stack by
    // the return value of the lambda
    resolvePossibleLambda: function() {
      this.context.aliases.functionType = '"function"';

      this.replaceStack(function(current) {
        return "typeof " + current + " === functionType ? " + current + ".apply(depth0) : " + current;
      });
    },

    // [lookup]
    //
    // On stack, before: value, ...
    // On stack, after: value[name], ...
    //
    // Replace the value on the stack with the result of looking
    // up `name` on `value`
    lookup: function(name) {
      this.replaceStack(function(current) {
        return current + " == null || " + current + " === false ? " + current + " : " + this.nameLookup(current, name, 'context');
      });
    },

    // [lookupData]
    //
    // On stack, before: ...
    // On stack, after: data[id], ...
    //
    // Push the result of looking up `id` on the current data
    lookupData: function(id) {
      this.push(this.nameLookup('data', id, 'data'));
    },

    // [pushStringParam]
    //
    // On stack, before: ...
    // On stack, after: string, currentContext, ...
    //
    // This opcode is designed for use in string mode, which
    // provides the string value of a parameter along with its
    // depth rather than resolving it immediately.
    pushStringParam: function(string, type) {
      this.pushStackLiteral('depth' + this.lastContext);

      this.pushString(type);

      if (typeof string === 'string') {
        this.pushString(string);
      } else {
        this.pushStackLiteral(string);
      }
    },

    emptyHash: function() {
      this.pushStackLiteral('{}');

      if (this.options.stringParams) {
        this.register('hashTypes', '{}');
      }
    },
    pushHash: function() {
      this.hash = {values: [], types: []};
    },
    popHash: function() {
      var hash = this.hash;
      this.hash = undefined;

      if (this.options.stringParams) {
        this.register('hashTypes', '{' + hash.types.join(',') + '}');
      }
      this.push('{\n    ' + hash.values.join(',\n    ') + '\n  }');
    },

    // [pushString]
    //
    // On stack, before: ...
    // On stack, after: quotedString(string), ...
    //
    // Push a quoted version of `string` onto the stack
    pushString: function(string) {
      this.pushStackLiteral(this.quotedString(string));
    },

    // [push]
    //
    // On stack, before: ...
    // On stack, after: expr, ...
    //
    // Push an expression onto the stack
    push: function(expr) {
      this.inlineStack.push(expr);
      return expr;
    },

    // [pushLiteral]
    //
    // On stack, before: ...
    // On stack, after: value, ...
    //
    // Pushes a value onto the stack. This operation prevents
    // the compiler from creating a temporary variable to hold
    // it.
    pushLiteral: function(value) {
      this.pushStackLiteral(value);
    },

    // [pushProgram]
    //
    // On stack, before: ...
    // On stack, after: program(guid), ...
    //
    // Push a program expression onto the stack. This takes
    // a compile-time guid and converts it into a runtime-accessible
    // expression.
    pushProgram: function(guid) {
      if (guid != null) {
        this.pushStackLiteral(this.programExpression(guid));
      } else {
        this.pushStackLiteral(null);
      }
    },

    // [invokeHelper]
    //
    // On stack, before: hash, inverse, program, params..., ...
    // On stack, after: result of helper invocation
    //
    // Pops off the helper's parameters, invokes the helper,
    // and pushes the helper's return value onto the stack.
    //
    // If the helper is not found, `helperMissing` is called.
    invokeHelper: function(paramSize, name) {
      this.context.aliases.helperMissing = 'helpers.helperMissing';

      var helper = this.lastHelper = this.setupHelper(paramSize, name, true);

      this.push(helper.name);
      this.replaceStack(function(name) {
        return name + ' ? ' + name + '.call(' +
            helper.callParams + ") " + ": helperMissing.call(" +
            helper.helperMissingParams + ")";
      });
    },

    // [invokeKnownHelper]
    //
    // On stack, before: hash, inverse, program, params..., ...
    // On stack, after: result of helper invocation
    //
    // This operation is used when the helper is known to exist,
    // so a `helperMissing` fallback is not required.
    invokeKnownHelper: function(paramSize, name) {
      var helper = this.setupHelper(paramSize, name);
      this.push(helper.name + ".call(" + helper.callParams + ")");
    },

    // [invokeAmbiguous]
    //
    // On stack, before: hash, inverse, program, params..., ...
    // On stack, after: result of disambiguation
    //
    // This operation is used when an expression like `{{foo}}`
    // is provided, but we don't know at compile-time whether it
    // is a helper or a path.
    //
    // This operation emits more code than the other options,
    // and can be avoided by passing the `knownHelpers` and
    // `knownHelpersOnly` flags at compile-time.
    invokeAmbiguous: function(name, helperCall) {
      this.context.aliases.functionType = '"function"';

      this.pushStackLiteral('{}');    // Hash value
      var helper = this.setupHelper(0, name, helperCall);

      var helperName = this.lastHelper = this.nameLookup('helpers', name, 'helper');

      var nonHelper = this.nameLookup('depth' + this.lastContext, name, 'context');
      var nextStack = this.nextStack();

      this.source.push('if (' + nextStack + ' = ' + helperName + ') { ' + nextStack + ' = ' + nextStack + '.call(' + helper.callParams + '); }');
      this.source.push('else { ' + nextStack + ' = ' + nonHelper + '; ' + nextStack + ' = typeof ' + nextStack + ' === functionType ? ' + nextStack + '.apply(depth0) : ' + nextStack + '; }');
    },

    // [invokePartial]
    //
    // On stack, before: context, ...
    // On stack after: result of partial invocation
    //
    // This operation pops off a context, invokes a partial with that context,
    // and pushes the result of the invocation back.
    invokePartial: function(name) {
      var params = [this.nameLookup('partials', name, 'partial'), "'" + name + "'", this.popStack(), "helpers", "partials"];

      if (this.options.data) {
        params.push("data");
      }

      this.context.aliases.self = "this";
      this.push("self.invokePartial(" + params.join(", ") + ")");
    },

    // [assignToHash]
    //
    // On stack, before: value, hash, ...
    // On stack, after: hash, ...
    //
    // Pops a value and hash off the stack, assigns `hash[key] = value`
    // and pushes the hash back onto the stack.
    assignToHash: function(key) {
      var value = this.popStack(),
          type;

      if (this.options.stringParams) {
        type = this.popStack();
        this.popStack();
      }

      var hash = this.hash;
      if (type) {
        hash.types.push("'" + key + "': " + type);
      }
      hash.values.push("'" + key + "': (" + value + ")");
    },

    // HELPERS

    compiler: JavaScriptCompiler,

    compileChildren: function(environment, options) {
      var children = environment.children, child, compiler;

      for(var i=0, l=children.length; i<l; i++) {
        child = children[i];
        compiler = new this.compiler();

        var index = this.matchExistingProgram(child);

        if (index == null) {
          this.context.programs.push('');     // Placeholder to prevent name conflicts for nested children
          index = this.context.programs.length;
          child.index = index;
          child.name = 'program' + index;
          this.context.programs[index] = compiler.compile(child, options, this.context);
          this.context.environments[index] = child;
        } else {
          child.index = index;
          child.name = 'program' + index;
        }
      }
    },
    matchExistingProgram: function(child) {
      for (var i = 0, len = this.context.environments.length; i < len; i++) {
        var environment = this.context.environments[i];
        if (environment && environment.equals(child)) {
          return i;
        }
      }
    },

    programExpression: function(guid) {
      this.context.aliases.self = "this";

      if(guid == null) {
        return "self.noop";
      }

      var child = this.environment.children[guid],
          depths = child.depths.list, depth;

      var programParams = [child.index, child.name, "data"];

      for(var i=0, l = depths.length; i<l; i++) {
        depth = depths[i];

        if(depth === 1) { programParams.push("depth0"); }
        else { programParams.push("depth" + (depth - 1)); }
      }

      if(depths.length === 0) {
        return "self.program(" + programParams.join(", ") + ")";
      } else {
        programParams.shift();
        return "self.programWithDepth(" + programParams.join(", ") + ")";
      }
    },

    register: function(name, val) {
      this.useRegister(name);
      this.source.push(name + " = " + val + ";");
    },

    useRegister: function(name) {
      if(!this.registers[name]) {
        this.registers[name] = true;
        this.registers.list.push(name);
      }
    },

    pushStackLiteral: function(item) {
      return this.push(new Literal(item));
    },

    pushStack: function(item) {
      this.flushInline();

      var stack = this.incrStack();
      if (item) {
        this.source.push(stack + " = " + item + ";");
      }
      this.compileStack.push(stack);
      return stack;
    },

    replaceStack: function(callback) {
      var prefix = '',
          inline = this.isInline(),
          stack;

      // If we are currently inline then we want to merge the inline statement into the
      // replacement statement via ','
      if (inline) {
        var top = this.popStack(true);

        if (top instanceof Literal) {
          // Literals do not need to be inlined
          stack = top.value;
        } else {
          // Get or create the current stack name for use by the inline
          var name = this.stackSlot ? this.topStackName() : this.incrStack();

          prefix = '(' + this.push(name) + ' = ' + top + '),';
          stack = this.topStack();
        }
      } else {
        stack = this.topStack();
      }

      var item = callback.call(this, stack);

      if (inline) {
        if (this.inlineStack.length || this.compileStack.length) {
          this.popStack();
        }
        this.push('(' + prefix + item + ')');
      } else {
        // Prevent modification of the context depth variable. Through replaceStack
        if (!/^stack/.test(stack)) {
          stack = this.nextStack();
        }

        this.source.push(stack + " = (" + prefix + item + ");");
      }
      return stack;
    },

    nextStack: function() {
      return this.pushStack();
    },

    incrStack: function() {
      this.stackSlot++;
      if(this.stackSlot > this.stackVars.length) { this.stackVars.push("stack" + this.stackSlot); }
      return this.topStackName();
    },
    topStackName: function() {
      return "stack" + this.stackSlot;
    },
    flushInline: function() {
      var inlineStack = this.inlineStack;
      if (inlineStack.length) {
        this.inlineStack = [];
        for (var i = 0, len = inlineStack.length; i < len; i++) {
          var entry = inlineStack[i];
          if (entry instanceof Literal) {
            this.compileStack.push(entry);
          } else {
            this.pushStack(entry);
          }
        }
      }
    },
    isInline: function() {
      return this.inlineStack.length;
    },

    popStack: function(wrapped) {
      var inline = this.isInline(),
          item = (inline ? this.inlineStack : this.compileStack).pop();

      if (!wrapped && (item instanceof Literal)) {
        return item.value;
      } else {
        if (!inline) {
          this.stackSlot--;
        }
        return item;
      }
    },

    topStack: function(wrapped) {
      var stack = (this.isInline() ? this.inlineStack : this.compileStack),
          item = stack[stack.length - 1];

      if (!wrapped && (item instanceof Literal)) {
        return item.value;
      } else {
        return item;
      }
    },

    quotedString: function(str) {
      return '"' + str
        .replace(/\\/g, '\\\\')
        .replace(/"/g, '\\"')
        .replace(/\n/g, '\\n')
        .replace(/\r/g, '\\r') + '"';
    },

    setupHelper: function(paramSize, name, missingParams) {
      var params = [];
      this.setupParams(paramSize, params, missingParams);
      var foundHelper = this.nameLookup('helpers', name, 'helper');

      return {
        params: params,
        name: foundHelper,
        callParams: ["depth0"].concat(params).join(", "),
        helperMissingParams: missingParams && ["depth0", this.quotedString(name)].concat(params).join(", ")
      };
    },

    // the params and contexts arguments are passed in arrays
    // to fill in
    setupParams: function(paramSize, params, useRegister) {
      var options = [], contexts = [], types = [], param, inverse, program;

      options.push("hash:" + this.popStack());

      inverse = this.popStack();
      program = this.popStack();

      // Avoid setting fn and inverse if neither are set. This allows
      // helpers to do a check for `if (options.fn)`
      if (program || inverse) {
        if (!program) {
          this.context.aliases.self = "this";
          program = "self.noop";
        }

        if (!inverse) {
         this.context.aliases.self = "this";
          inverse = "self.noop";
        }

        options.push("inverse:" + inverse);
        options.push("fn:" + program);
      }

      for(var i=0; i<paramSize; i++) {
        param = this.popStack();
        params.push(param);

        if(this.options.stringParams) {
          types.push(this.popStack());
          contexts.push(this.popStack());
        }
      }

      if (this.options.stringParams) {
        options.push("contexts:[" + contexts.join(",") + "]");
        options.push("types:[" + types.join(",") + "]");
        options.push("hashTypes:hashTypes");
      }

      if(this.options.data) {
        options.push("data:data");
      }

      options = "{" + options.join(",") + "}";
      if (useRegister) {
        this.register('options', options);
        params.push('options');
      } else {
        params.push(options);
      }
      return params.join(", ");
    }
  };

  var reservedWords = (
    "break else new var" +
    " case finally return void" +
    " catch for switch while" +
    " continue function this with" +
    " default if throw" +
    " delete in try" +
    " do instanceof typeof" +
    " abstract enum int short" +
    " boolean export interface static" +
    " byte extends long super" +
    " char final native synchronized" +
    " class float package throws" +
    " const goto private transient" +
    " debugger implements protected volatile" +
    " double import public let yield"
  ).split(" ");

  var compilerWords = JavaScriptCompiler.RESERVED_WORDS = {};

  for(var i=0, l=reservedWords.length; i<l; i++) {
    compilerWords[reservedWords[i]] = true;
  }

  JavaScriptCompiler.isValidJavaScriptVariableName = function(name) {
    if(!JavaScriptCompiler.RESERVED_WORDS[name] && /^[a-zA-Z_$][0-9a-zA-Z_$]+$/.test(name)) {
      return true;
    }
    return false;
  };

})(Handlebars.Compiler, Handlebars.JavaScriptCompiler);

Handlebars.precompile = function(input, options) {
  if (!input || (typeof input !== 'string' && input.constructor !== Handlebars.AST.ProgramNode)) {
    throw new Handlebars.Exception("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
  }

  options = options || {};
  if (!('data' in options)) {
    options.data = true;
  }
  var ast = Handlebars.parse(input);
  var environment = new Handlebars.Compiler().compile(ast, options);
  return new Handlebars.JavaScriptCompiler().compile(environment, options);
};

Handlebars.compile = function(input, options) {
  if (!input || (typeof input !== 'string' && input.constructor !== Handlebars.AST.ProgramNode)) {
    throw new Handlebars.Exception("You must pass a string or Handlebars AST to Handlebars.compile. You passed " + input);
  }

  options = options || {};
  if (!('data' in options)) {
    options.data = true;
  }
  var compiled;
  function compile() {
    var ast = Handlebars.parse(input);
    var environment = new Handlebars.Compiler().compile(ast, options);
    var templateSpec = new Handlebars.JavaScriptCompiler().compile(environment, options, undefined, true);
    return Handlebars.template(templateSpec);
  }

  // Template is only compiled on first use and cached after that point.
  return function(context, options) {
    if (!compiled) {
      compiled = compile();
    }
    return compiled.call(this, context, options);
  };
};
;
// lib/handlebars/runtime.js
Handlebars.VM = {
  template: function(templateSpec) {
    // Just add water
    var container = {
      escapeExpression: Handlebars.Utils.escapeExpression,
      invokePartial: Handlebars.VM.invokePartial,
      programs: [],
      program: function(i, fn, data) {
        var programWrapper = this.programs[i];
        if(data) {
          return Handlebars.VM.program(fn, data);
        } else if(programWrapper) {
          return programWrapper;
        } else {
          programWrapper = this.programs[i] = Handlebars.VM.program(fn);
          return programWrapper;
        }
      },
      programWithDepth: Handlebars.VM.programWithDepth,
      noop: Handlebars.VM.noop,
      compilerInfo: null
    };

    return function(context, options) {
      options = options || {};
      var result = templateSpec.call(container, Handlebars, context, options.helpers, options.partials, options.data);

      var compilerInfo = container.compilerInfo || [],
          compilerRevision = compilerInfo[0] || 1,
          currentRevision = Handlebars.COMPILER_REVISION;

      if (compilerRevision !== currentRevision) {
        if (compilerRevision < currentRevision) {
          var runtimeVersions = Handlebars.REVISION_CHANGES[currentRevision],
              compilerVersions = Handlebars.REVISION_CHANGES[compilerRevision];
          throw "Template was precompiled with an older version of Handlebars than the current runtime. "+
                "Please update your precompiler to a newer version ("+runtimeVersions+") or downgrade your runtime to an older version ("+compilerVersions+").";
        } else {
          // Use the embedded version info since the runtime doesn't know about this revision yet
          throw "Template was precompiled with a newer version of Handlebars than the current runtime. "+
                "Please update your runtime to a newer version ("+compilerInfo[1]+").";
        }
      }

      return result;
    };
  },

  programWithDepth: function(fn, data, $depth) {
    var args = Array.prototype.slice.call(arguments, 2);

    return function(context, options) {
      options = options || {};

      return fn.apply(this, [context, options.data || data].concat(args));
    };
  },
  program: function(fn, data) {
    return function(context, options) {
      options = options || {};

      return fn(context, options.data || data);
    };
  },
  noop: function() { return ""; },
  invokePartial: function(partial, name, context, helpers, partials, data) {
    var options = { helpers: helpers, partials: partials, data: data };

    if(partial === undefined) {
      throw new Handlebars.Exception("The partial " + name + " could not be found");
    } else if(partial instanceof Function) {
      return partial(context, options);
    } else if (!Handlebars.compile) {
      throw new Handlebars.Exception("The partial " + name + " could not be compiled when running in runtime-only mode");
    } else {
      partials[name] = Handlebars.compile(partial, {data: data !== undefined});
      return partials[name](context, options);
    }
  }
};

Handlebars.template = Handlebars.VM.template;
;

var process = process || {env: {NODE_ENV: "development"}};
// #################################################################################################################
// Name: Logging
// Type: Neccessary setup configs for setting up log4javascript.
// #################################################################################################################

// Setup the default logging.
// TODO:  Logging appenders and layout formats should come from the server via the HTML and used to dynmically setup logging.
var log = log4javascript.getLogger();

var level = log4javascript.Level.DEBUG;  // Default value

if ($("meta[name='logLevel']")) {
    switch($("meta[name='logLevel']").attr('content')) {
        case "OFF":
            level = log4javascript.Level.OFF;
            break;
        case "FATAL":
            level = log4javascript.Level.FATAL;
            break;
        case "ERROR":
            level = log4javascript.Level.ERROR;
            break;
        case "WARN":
            level = log4javascript.Level.WARN;
            break;
        case "INFO":
            level = log4javascript.Level.INFO;
            break;
        case "DEBUG":
            level = log4javascript.Level.DEBUG;
            break;
        case "TRACE":
            level = log4javascript.Level.TRACE;
            break;
        case "ALL":
            level = log4javascript.Level.ALL;
            break;
    }
}

log.setLevel( level );

var browserConsoleAppender = new log4javascript.BrowserConsoleAppender();
var browserConsoleUpLayout = new log4javascript.PatternLayout("%d{HH:mm:ss} %-5p - %m%n");
browserConsoleAppender.setLayout( browserConsoleUpLayout );
log.addAppender(browserConsoleAppender);
var process = process || {env: {NODE_ENV: "development"}};
/*********************************************************************************
 Copyright 2009-2024 Ellucian Company L.P. and its affiliates.
 **********************************************************************************/
//IE fix to support indexOf method on Array objects
Array.prototype.indexOf=[].indexOf||function(a,b,c,r) {
    for(b=this,c=b.length,r=-1;~c;r=b[--c]===a?c:r);
    return r;
}

function encodeHTML(string) {
    if (string == null) return null;
    return string.toString().replace(/&(?!\w+;|#\d+;|#x[\da-f]+;)/gi, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g,'&#x2F;');
}

function getUrl(name) {
    var url = $("#endpoint-" + name).attr('data-endpoint');

    if (url === null || url === undefined) {
        log.debug("#endpoint-" + name + " was not found or does not include a data-endpoint.");
    }

    return url;
}


function validateDate( dateString ) {
    var defaultCalendar = $.i18n.prop("default.calendar");
    var result = false;
    try {
        if($.multicalendar.isValidDateFormat(defaultCalendar, dateString)) {
            result = true;
        }
    } catch (e) {
        result = false;
    }

    return result;
}


/**
 * $(ele).screenReaderLabel( text, ariaLive );
 *
 * set the label that will be read by a screen reader for this element.
 *
 * text - label text
 * ariaLive - off (default), polite, assertive - will only be applied
 * when the label is first created. If you need to change the ariaLive
 * setting for a label, remove the label and the link attribute and
 * create a new one.
 * ariaLink - aria-labelledby (default) or aria-describedby
 *
 * Returns the original jQuery object.
 */
$.fn.screenReaderLabel = (function(){
    var counter = 0;
    return function( text, ariaLive, ariaLink) {
        var $el = this,
            ariaLink = ariaLink || 'aria-describedby',
            $label = getLabel($el, ariaLink) || createLabel($el, ariaLive, ariaLink);

        function getLabel($el, ariaLink) {
            var id = $el.attr(ariaLink);
            return id ? $('#' + id) : null;
        }

        function createLabel($el, ariaLive, ariaLink) {
            var id = 'screen-reader-label-' + ++counter;
            var live = ariaLive ? ' aria-live="' + ariaLive + '"' : "";
            var $label = $('<span style="display:none" role="region" aria-label="'+text+'" id="' + id + '"' + live + '></span>').screenReaderOnly();
            $('body').append( $label );

            $el.attr(ariaLink, id);
            return $label;
        }

        $label.text( text );
        return $el;
    }
})();

/**
 * Hide the element and optionally its descendants, from the screen
 * reader.
 *
 * element - an element, jquery object, or a selector
 * recursive - boolean to hide descendants or not. Use with caution - if the contained
 * elements can receive keyboard focus, it can cause problems on some
 * browser/screen reader combinations. google aria-hidden for more
 * information.
 *
 * Returns a jQuery object of the element for chaining.
 */
$.fn.screenReaderHide = function( recursive ) {
    if ( recursive ) {
        this.attr('aria-hidden', 'true')
    } else {
        this.attr('role', 'presentation');
    }

    return this;
}

/**
 * mark content to only be read by screen reader, not displayed visually
 * Returns jQuery object for element
 */
$.fn.screenReaderOnly = function() {
    return this.addClass( 'screen-reader');
}


window.InactivityTimer = ActivityTimer.extend({
    timeoutHandler: function() {
        var n = new Notification( {
            message: $.i18n.prop("js.notification.inactivityTimer.message"),
            type:"warning",
            promptMessage: $.i18n.prop("js.notification.inactivityTimer.promptMessage")
        });

        CommonContext.removeNotification=n; //// putting notification as a callback to close the notification when keepalive message received from application navigator

        this.logoutAction = function( event ) {
            // Logout the user
            log.debug( "logout due to inactivity" );

            if (event && event.type === "click") {
                window.location = 'logout';
            }
            else {
                window.location = "logout/timeout";
            }
        };

        this.keepAliveAction = function() {
            $.ajax({
                url: $("meta[name='keepAliveURL']").attr( "content" ),
                dataType: "html",
                success: function(data, textStatus, jqXHR) {
                    inactivityTimer.reset();
                    notifications.remove( n );
                }
            });
        };

        _.bindAll( this, "logoutAction", "keepAliveAction" );

        n.addPromptAction( $.i18n.prop("js.notification.inactivityTimer.keepAliveButton"), this.keepAliveAction );
        n.addPromptAction( $.i18n.prop("js.notification.inactivityTimer.logoutButton"), this.logoutAction );

        notifications.addNotification( n );

        // Create another timer that will monitor of the notification is still in the notifications collection.
        // If it is when the timer fires, we are goign to automatically call the logoutAction.

        window.setTimeout( _.bind( function() {
            if (notifications.find( function( notification ) { return notification === n; })) {
                this.logoutAction();
            }
        }, this ),
            60 * 1000 /** 60 seconds */ );

    },
    activityEvents: [ "ajaxStart" ],
    activityTarget: function() { return $(document); }
});


var inactivityTimer = new InactivityTimer({
    delay: (parseInt( $("meta[name='maxInactiveInterval']").attr( "content" ) ) - 90 /** Subtract 90 seconds to give a notification prior session invalidating **/ ) * 1000
});

// Calling Timeout after the notification component is ready and fired the event
$(document).bind('notification-use-ready', function (e) {
    inactivityTimer.start();
    CommonContext.resetInActivityTimer=inactivityTimer; // putting inactivity timer as a callback to reset when keepalive message received from application navigator
});


// #################################################################################################################
// Name: SaveTimer
// Type: JavaScript 'class' used to manage the actions involved with prompting the user to save over an interval.
//       The use of 'this' is a bit much in here, but was necessary to manage the scopes of 'this'.  I suspect
//       this can be simplified, but have validated this works.
// Req:  This requires notification center to be usable.
// #################################################################################################################
window.SaveTimer = ActivityTimer.extend({
    initialize: function( options ) {
        log.debug( "init SaveTimer" );
    },
    timeoutHandler: function() {
        var isDirty = this.get( "isDirty" );
        var saveAction = this.get( "saveAction" );

        if (isDirty()) {
            this.save = function() {
                saveAction();
            };

            var n = new Notification( {
                message: "",
                type:"warning",
                promptMessage: $.i18n.prop("js.notification.savePrompt.message")
            });

            this.doNotSavePromptAction = function() {
                notifications.remove( n );

                if (isDirty()) {
                    // Reset the timer
                    this.reset();
                }
            };

            this.savePromptAction = function() {
                this.save();
                notifications.remove( n );
                this.stop();
            };

            _.bindAll( this, "doNotSavePromptAction", "savePromptAction" );

            n.addPromptAction( $.i18n.prop("js.notification.savePrompt.doNotSaveActionButton"), this.doNotSavePromptAction );
            n.addPromptAction( $.i18n.prop("js.notification.savePrompt.saveActionButton"), this.savePromptAction );

            notifications.addNotification( n );
        }
    },
    activityEvents: [ "mousemove", "keypress" ],
    activityTarget: function() { return $("body"); }
});


function showLoading( target ) {
    var t = $(target);
    var offTop = (undefined === t[0] ? 0 : t[0].offsetTop);
    var offLeft = (undefined === t[0] ? 0 : t[0].offsetLeft);

    var loading = t.append( '<div class="loading loading-pending">' ).find( '.loading' )
        .attr("aria-label", $.i18n.prop("js.net.hedtech.banner.ajax.loading"))
        .attr("aria-live", "assertive").attr("aria-busy","true");

    // $.offset() includes the top nav bar's height, so find position manually
    var pos = {top:offTop + $(window).scrollTop(), left:offLeft };

    loading.css(pos).height(t.outerHeight()).width(t.outerWidth());

    setTimeout(
        function() {
            $(target).find( 'div.loading-pending' ).fadeIn( 200, function() {
                $(this).removeClass( 'loading-pending' );
            });
        }, 750
    );
}

function hideLoading( target ) {
    $(target).find('div.loading').fadeOut( 200, function() { $(this).remove(); } )
}


/**
 * @deprecated to be consolidated with showLoading
 */
function showLoadingPopup( target ) {
    var t = $(target);

    var loading = t.append( '<div class="loading loading-pending">' ).find( '.loading' )
        .attr("aria-label", $.i18n.prop("js.net.hedtech.banner.ajax.loading"))
        .attr("aria-live", "assertive").attr("aria-busy","true");
    var pos = {top: $(window).scrollTop(), left: 0 };
    var height = (t[0] && t[0].scrollHeight > t.outerHeight() ? t[0].scrollHeight : t.outerHeight() );
    loading.css(pos).height(height-2).width(t.outerWidth()-2);

    setTimeout(
        function() {
            $(target).find( 'div.loading-pending' ).fadeIn( 200, function() {
                $(this).removeClass( 'loading-pending' );
            });
        }, 500
    );
}

/**
 * @deprecated use hideLoading
 */
var hideLoadingPopup = hideLoading;

/* Usage:
 $(selector).loading();   // show loading indicator
 $(selector).loading(false); // hide loading indicator
 */
$.fn.loading = function(isLoading) {
    (isLoading||isLoading==undefined) ? showLoading( this ) : hideLoading( this );
    return this;
}

/**
 * @deprecated use $.fn.loading
 */
$.fn.loadingPopup = $.fn.loading;


$(document).ajaxError( function(event, jqXHR, ajaxOptions, thrownError) {
    // This cannot detect all failures to provide an error handler, as
    // ajaxmanager or backbone may be wrapping a missing error handler.
    log.debug( "ajaxError url=" + ajaxOptions.url + " thrownError=" + thrownError
        + " status=" + jqXHR.status + " readyState=" + jqXHR.readyState );
    var handledError = ajaxOptions.error || ajaxOptions.complete;
    if ( thrownError !== 'abort' && !handledError ) {
        hideLoading( document );

        var msg = $.i18n.prop("js.net.hedtech.banner.ajax.error.message", [ thrownError ]);
        if ( thrownError == 'timeout' ) {
            msg = $.i18n.prop("js.net.hedtech.banner.ajax.timeout.message");
        }
        var n = new Notification( {
            message: msg,
            type:"error",
            promptMessage: $.i18n.prop("js.net.hedtech.banner.ajax.reload.prompt")
        });

        n.addPromptAction( $.i18n.prop("js.net.hedtech.banner.ajax.reload.button"),
            function() { window.location.reload() });
        n.addPromptAction( $.i18n.prop("js.net.hedtech.banner.ajax.continue.button"),
            function() { notifications.remove( n ); });

        notifications.addNotification( n );

        log.error( msg, jqXHR, ajaxOptions, thrownError );
    }
});

$(document).ready(function() {
    var dir = $('meta[name=dir]').attr("content");

    if (dir == 'rtl') {
        var selector = $(".ui-layout-east");

        if (selector.length) {
            selector.removeClass("ui-layout-east");
            selector.addClass("ui-layout-west");
        }
    }

    $(window).bind({
        'ajaxStart': function(e, xhr, settings) {
            $('.spinner').show();
        },
        'ajaxStop': function(e, xhr, settings) {
            $('.spinner').fadeOut();
        }
    });


    // All ajax requests will use a prefilter to add a request header of the token to ensure
    // that only one request is sent per token eliminating.
    $.ajaxPrefilter(function (options, originalOptions, jqXHR) {
        var synchronizerToken = $("meta[name='synchronizerToken']").attr('content');
        if (synchronizerToken) {
            jqXHR.setRequestHeader("X-Synchronizer-Token", synchronizerToken);
        }
    });


    $(document).ajaxComplete( function(event, jqXHR, ajaxOptions) {
        // We will inspect each response header.  If a customer header exists where we are requested to show the login page
        // we will inform the user that their session is no longer valid and that they have to log back in.
        if (jqXHR.getResponseHeader( "X-Login-Page" ) === "true") {

            var n = new Notification( {
                message: $.i18n.prop("js.net.hedtech.banner.logout.timeout.message"),
                type:"warning",
                promptMessage: $.i18n.prop("js.net.hedtech.banner.logout.timeout.promptMessage")
            });

            n.addPromptAction( $.i18n.prop("js.net.hedtech.banner.logout.timeout.acknowledgement"), function() { window.location.reload() } );

            notifications.addNotification( n );
        }
    });

    // Initialize Aurora
    if ( !_.isUndefined( window[ "CommonPlatform" ] ) && _.isFunction( CommonPlatform.initialize ) ) {
        CommonPlatform.initialize( {
            standalone : true,
            globalNav : true,
            header : true,
            footer : true,
            showHelp: false,
            hideSSBHeaderComps:  false,
            iframe: (window.location != window.parent.location) ? true : false,
            isAppDirty: function(){},
            langDir: $.i18n.prop( "default.language.direction" ),
            resourceMap : {
                skip_link_text :                        $.i18n.prop( "aurora.skip_link_text" ),
                areas_label_browse_description :        $.i18n.prop( "aurora.areas_label_browse_description" ),
                areas_label_browse_title :              $.i18n.prop( "aurora.areas_label_browse_title" ),
                areas_label_home_title :                $.i18n.prop( "aurora.areas_label_home_title" ),
                areas_label_home_description :          $.i18n.prop( "aurora.areas_label_home_description" ),
                areas_label_tools_title :               $.i18n.prop( "aurora.areas_label_tools_title" ),
                areas_label_tools_description :         $.i18n.prop( "aurora.areas_label_tools_description" ),
                openitems_label_closeSelected :         $.i18n.prop( "aurora.openitems_label_closeSelected" ),
                openitems_label_closeAll :              $.i18n.prop( "aurora.openitems_label_closeAll" ),
                preferences_label :                     $.i18n.prop( "aurora.preferences_label" ),
                userdetails_signin :                    $.i18n.prop( "aurora.userdetails_signin" ),
                userdetails_signout :                   $.i18n.prop( "aurora.userdetails_signout" ),
                userdetails_signin_title :              $.i18n.prop( "aurora.userdetails_signin_title" ),
                userdetails_signin_description :        $.i18n.prop( "aurora.userdetails_signin_description" ),
                userdetails_profile_title :             $.i18n.prop( "aurora.areas_label_profile_title" ),
                userdetails_profile_description :       $.i18n.prop( "aurora.areas_label_profile_description" ),
                guestuserdetails_signin :               $.i18n.prop( "aurora.guestuserdetails_signin" ),
                userdetails_help :                      $.i18n.prop( "aurora.userdetails_help" ),
                notification_title :                    $.i18n.prop( "js.notification.title" )
            },
            handler : function( data ) {
            }
        } );
    }

    /*if ($.browser.msie && 8 == parseInt($.browser.version)) {
        // make text zoom on ie8 trigger resize event, like other browsers
        var deviceXDPI = screen.deviceXDPI;
        setInterval( function() {
            if ( deviceXDPI != screen.deviceXDPI ) {
                deviceXDPI = screen.deviceXDPI;
                $(window).resize();
            }
        }, 200);
    }
     */

    // Prevent Firefox mis-feature of allowing copy of password masking characters.
    $('body').on('copy', 'input[type=password]', function (event) {
        event.preventDefault();
    });

    //addCssClass();
    changeFavicon();
});

$(document).bind('notification-use-ready', function (e) {
    showAipNotification();
});

function showAipNotification(){
    if($("meta[name='hasActiveActionItems']").attr( "content" )=== 'true'){
        showAipPromptNotification($("meta[name='aipUrl']").attr( "content" ));
    }
}

function showAipPromptNotification(url) {
    var n = new Notification({
        message: $.i18n.prop("js.banner.general.aip.notification.prompt.message"),
        type: "warning"
    });

    n.addPromptAction($.i18n.prop("js.banner.general.aip.notification.prompt.view.actionitems"), function () {
        window.location.href = url;
    });
    n.addPromptAction($.i18n.prop("js.banner.general.aip.notification.prompt.dismiss"), function () {
        notifications.remove(n);
    });
    notifications.addNotification( n );
}


function changeFavicon() {
    // get the dynamic favicon link, an existing favicon link, or create a link to use
    var ID = 'dynamic-favicon';
    var link = document.getElementById(ID);
    if ( !link ) {
        // must append the link to the document head before we can use getComputedStyle
        link = document.head.appendChild(document.createElement('link'));

        // look for the favicon URL as the background image of link.favicon
        link.className = 'favicon';
    link.rel = 'shortcut icon';
    link.type = 'image/x-icon';
        link.id = ID;
    }

    // get the assigned .favicon background-image URL from the theme stylesheet
    var backgroundImage = window.getComputedStyle(link).getPropertyValue('background-image');

    // check if we have a url(___), possibly with quotes. IE doesn't put quotes around the URL.
    var urlRegex = /^url\("?(.*)"?\)$/;
    if(urlRegex.test(backgroundImage) && backgroundImage.indexOf("$themefavicon") == -1){
        // remove all old links of the various ways they are specified by UXD
        // includes shortcut icon and apple-touch-icon
        var oldLinks = document.querySelectorAll("link[rel*='icon']");
        Array.prototype.forEach.call( oldLinks, function(element) {
            document.head.removeChild(element);
        })

        // replace with a single updated favicon URL
        link.href = backgroundImage.slice(4, -1).replace(/"/g, "");
        document.head.appendChild(link);
    }
}

/*function addCssClass() {

    if($.browser.safari) {
        checkAndAddClass("webkit");
    }
    if($.browser.mozilla) {
        checkAndAddClass("gecko");
    }
    if($.browser.msie) {
        checkAndAddClass("ie");
    }
}*/

function checkAndAddClass(browserName) {
    var bodyTag = $('body');
    //var browserWithVersion = browserName + parseInt($.browser.version);
    if(!bodyTag.hasClass(browserName)) {
        bodyTag.addClass(browserName);
    }
    /*if(!bodyTag.hasClass(browserWithVersion)) {
        bodyTag.addClass(browserWithVersion);
    }*/
}

function formatTitleAndShortcut(title, shortcut) {
    return $.i18n.prop( "net.hedtech.banner.title.shortcut", [title, shortcut] )
        .replace( /&lt;br&gt;/g, '\n' );
}

key = (function(key) {
    key.modifierCode = {
        SHIFT: 1,
        ALT: 2,
        CTRL: 4
        //META: 8 //windows key or command key (mac)
        //MOD: platform-specific, Ctrl on windows/unix or Command on Mac.  See 'mousetrap' library
    };
    key.modifierStrings = {
        'shift':key.modifierCode.SHIFT,
        'alt':key.modifierCode.ALT,
        'ctrl':key.modifierCode.CTRL
    };

    key.keys = {
        backspace: 0x08,
        tab: 0x09,
        'return': 0x0d,
        escape: 0x1b,
        space: 0x20,
        pageUp: 0x21,
        pageDown: 0x22,
        end: 0x23,
        home: 0x24,
        left: 0x25,
        up: 0x26,
        right: 0x27,
        down: 0x28,
        insert: 0x2d,
        'delete': 0x30,
        f1: 0x70,
        f2: 0x71,
        f3: 0x72,
        f4: 0x73,
        f5: 0x74,
        f6: 0x75,
        f7: 0x76,
        f8: 0x77,
        f9: 0x78,
        f10: 0x79,
        f11: 0x7a,
        f12: 0x7b,
        '`':0xc0,
        '-':0xbd,
        '=':0xbb,
        '[':0xdb,
        ']':0xdd,
        '\\':0xdc,
        ';': 0xba,
        '\'': 0xde,
        ',': 0xbc,
        '.': 0xbe,
        '/': 0xbf
    };

    key.KeyException = function (message) {
        this.message = message;
        this.name = "KeyException";
    }

    key.parseModifiers = function( shortcut ) {
        var modifiers = 0,
            words = shortcut.split('+');
        words.pop();

        _.each( words, function( word ) {
            var value = key.modifierStrings[ word.toLowerCase() ];
            if ( value ) {
                modifiers |= value;
            } else {
                throw new key.KeyException( "Unknown modifier '" + word + "' in shortcut '" + shortcut + "'" );
            }
        });
        return modifiers;
    };


    key.parseKey = function( shortcut ) {
        var word = shortcut.split('+').pop(),
            code = key.keys[word.toLowerCase()];
        if ( !code ) {
            if ( word.length > 1 ) {
                throw new key.KeyException( "Unknown key name '" + word + "' in shortcut '" + shortcut + "'" );
            } else {
                code = word.toUpperCase().charCodeAt(0);
            }
        }
        return code;
    };


    var BoundKey = function( shortcut, handler ) {
        this.modifiers = key.parseModifiers( shortcut );
        this.code = key.parseKey( shortcut );
        this.handler = handler;
    };

    key.boundKeys = [];

    key.eventHandler = function( event ) {
        _.each( key.boundKeys, function( boundKey ) {
            if ( boundKey.code != event.keyCode ) {
                return;
            }
            if ( boundKey.modifiers != modifierKeysPressed(event) ) {
                return;
            }
            boundKey.handler( event );
        });
    };

    function modifierKeysPressed(event){
        return (( event.shiftKey && key.modifierCode.SHIFT ) | ( event.altKey && key.modifierCode.ALT ) | ( event.ctrlKey && key.modifierCode.CTRL ));
    }

    /**
     * bind shortcut & handler pairs.
     * key.bind( 'shift+home', homeFunction, 'alt+m', menuFunction, ... )
     *   or
     * key.bind( ['shift+home', homeFunction, 'alt+m', menuFunction, ...] )
     */
    key.bind = function() {
        var shortcuts = arguments.length > 1 ? arguments : arguments[0];
        var i = 0;
        if ( !key.boundKeys.length ) {
            // register page-level event handler only once
            $(document).on( 'keyup', key.eventHandler );
        }

        for ( ; i < shortcuts.length; i += 2 ) {
            shortcut = shortcuts[ i ];
            handler = shortcuts[ i+1 ];
            key.boundKeys.push( new BoundKey( shortcut, handler ));
        }
    };

    return key;
})(window.key || {});

function getNextTabbableElement( currentElement , container) {
    var tabbableElements = getTabbableElements(container);
    var currentIndex = tabbableElements.index(currentElement);
    var nextTabbableElement = tabbableElements.eq(currentIndex + 1);
    return nextTabbableElement;
}

function getPreviousTabbableElement( currentElement , container) {
    var tabbableElements = getTabbableElements(container);
    var currentIndex = tabbableElements.index(currentElement);
    var previousTabbableElement = tabbableElements.eq(currentIndex - 1);
    return previousTabbableElement;
}

function getTabbableElements(container){
    return  _.isUndefined(container) ?  $(":tabbable") : container.find(":tabbable");
}

var isMobile = function(){
    var isMobile = window.matchMedia("only screen and (min-width: 0px) and (max-width: 768px)");
    if (isMobile.matches) {
        return true;
    }
    return false;
}

var isTablet = function(){
    var isTablet = window.matchMedia("only screen and (min-width: 769px) and (max-width:1024px)");
    if (isTablet.matches) {
        return true;
    }
    return false;
}

var isDesktop = function(){
    var isDesktop = window.matchMedia("only screen and (min-width:1025px)");
    if (isDesktop.matches) {
        return true;
    }
    return false;
}

var isRTLMode = function(){
    var result = false;
    if($.i18n.prop('default.language.direction') == "rtl"){
        return true
    }
    return result;
}

var isLTRMode = function(){
    var result = false;
    if($.i18n.prop('default.language.direction') == "ltr"){
        return true
    }
    return result;
}



var DirtyCheck = {

    addDirtyCheckCallback: function( isDirty ) {
        CommonContext.isAppDirty=isDirty;
    },
    isDirty : function() {
        return CommonContext.isAppDirty();
    }
}

function mepcodeNotificationAddition(sessionMepCode){
    var mepDescription = $('meta[name=ssbMepDesc]').attr("content");
    var n = new Notification( {
        message: $.i18n.prop('js.notification.mep.changed.onLoad', [mepDescription]),
        type:"warning"
    });

    var logoutMepUser = function( event ) {
        window.location = 'logout';
    };

    var ignoreMepChangeAction = function() {
        notifications.remove( n );
    };

    n.addPromptAction( $.i18n.prop("js.notification.mep.buttons.continue"), ignoreMepChangeAction );
    n.addPromptAction( $.i18n.prop("js.notification.mep.buttons.logout"), logoutMepUser );

    notifications.addNotification(n);
}

var process = process || {env: {NODE_ENV: "development"}};
/**
 * dirtyCheck is a jQuery function that is used to add dirty checking prior to accepting an event.
 *
 * We will loop through all elements that are selected.
 *
 * We will store the already registered event listeners/handlers in an array on the element.
 *
 * We will then register our own event handler.
 *
 * When the event is fired, the dirtyCheck event handler will be fired.  It'll call the 'isDirty' function
 * sent in the options.  If the event is dirty it'll create a notification to prompt the user to save, not save
 * or cancel the entire operation.
 *
 * If isDirty returned true and the user requested to save the function will first call the 'save' function passed
 * in the options.  The save function requires an options map to be accepted and specifically should be looking for a
 * success callback function to call.  Once the save completes, the save function calls the success callback.  At this
 * point the function will bind the existing handlers and trigger the event.  See section below about ignoring internal
 * dirtyCheck handler.
 *
 * If isDirty returned true and the user said they did not want to save, the function will immediatelly call the
 * existing handlers.  See section below about ignoring internal dirtyCheck handler.
 *
 * If isDirty returned true and the user said they wanted to cancel the function does nothing.  The function return
 * false and is done.
 *
 * For the internal dirtyCheck handler the function needs to know when it is executing the existing handlers and make
 * sure it does not re-excute itself when it triggers the handlers.
 *
 * If the dirty check should be ignored for those special cases (i.e. automatically logging someone out) you can set the
 * $(selector).data( 'ignoreDirtyCheckOneTime', true ) to bypass dirty checking one time.
 *
 * This function was derived from the jQuery confirm plug-in.
 */
jQuery.fn.dirtyCheck = function(options) {
    options = jQuery.extend({
        isDirty: function() {
            return false;
        },
        no: options.callback,
        eventType: "click",
        notifications: notifications
    }, options);

    var type = options.eventType;

    return this.each(function() {
        var target = this;
        var $target = jQuery(target);

        if ( type == "beforeunload" || type == "unload" ) {
            $target.bind( "beforeunload", function ( e ) {
                if ( options.isDirty() == true )
                    return $.i18n.prop( "notification.dirtyCheck.beforeUnload.promptMessage" );

                return undefined;
            });

            return; // beforeunload is handled differently then all other events b/c of browser behavior
        }

        var saveHandlers = function() {
            var events = jQuery._data( target, 'events' );
            if(!events)
                events = jQuery._data(jQuery(target)[0], 'events');
            if (!events && target.href) {
                // No handlers but we have href

                // We'll add a click event to provide the same expected functionality as having a 'href' on a target
                $target.on( "click", function() {
                    document.location = target.href;
                });
                events = jQuery._data(target, 'events');
            } else if (!events) {
                // There are no handlers to save.
                return;
            }

            if (!target._handlers) {
                target._handlers = new Array();
            }

            if (events[type]) {
                for (var i = 0; i < events[type].length; i++) {
                    target._handlers.push(events[type][i]);
                }
            }
        };

        var executeExistingHandlers = _.bind( function() {
            // Rebind the saved handlers.
            if (!_.isUndefined(target._handlers)) {

                // We'll remove the dirtyCheck handler in preparation to execute the existing handlers
                $target.off( type, handler );

                // Rebind the stored handlers
                jQuery.each(target._handlers, function(indexInArray, valueOfElement) {
                    $target.on( type, valueOfElement.handler );
                });

                // Fire the event
                $target.trigger( type );

                // Unbind everything we just setup in the binds before
                $target.off( type );

                // And setup the default dirty check handler.
                $target.on( type, handler );
            }
        }, this );


        var handler = function() {
            setTimeout( function() { // let blur handlers proceed before checking dirty
                if (!jQuery.data( target, 'ignoreDirtyCheckOneTime' ) && options.isDirty()) {
                    var n = new Notification( {message: $.i18n.prop("js.notification.dirtyCheck.message"), type:"warning", promptMessage: $.i18n.prop("js.notification.dirtyCheck.promptMessage")} );

                    n.addPromptAction( $.i18n.prop("js.notification.dirtyCheck.cancelActionButton"), function() {
                        options.notifications.remove( n );

                        if (options.cancelCallback) {
                            options.cancelCallback();
                        }
                    });

                    n.addPromptAction( $.i18n.prop("js.notification.dirtyCheck.doNotSaveActionButton"), function() {
                        options.notifications.remove( n );
                        options.no( { callback:executeExistingHandlers });
                    });

                    n.addPromptAction( $.i18n.prop("js.notification.dirtyCheck.saveActionButton"), function() {
                        options.save( {
                            callback: function() {
                                executeExistingHandlers();
                            }
                        });

                        options.notifications.remove( n );
                    });

                    options.notifications.addNotification( n );
                }
                else {
                    executeExistingHandlers();
                }

                if (jQuery.data( target, 'ignoreDirtyCheckOneTime' )) {
                    delete jQuery.data().ignoreDirtyCheckOneTime;
                }
            }, 200);

            // We'll always return false and let the handling of the notification and existing handlers do their thing.
            return false;
        };

        saveHandlers();

        // Remove the type.
        $target.off(type);

        $target.on( type, handler );
    });
}

var process = process || {env: {NODE_ENV: "development"}};
/*********************************************************************************
 Copyright 2011-2021 Ellucian Company L.P. and its affiliates.
 **********************************************************************************/

$(document).ready(function() {

    window.Notification = Backbone.Model.extend({
        save: function() {
            throw new Error("A notification object cannot be persisted.  Save Not Supported");
        },
        addPromptAction: function(label, action) {
            var prompts = this.get( "prompts" );

            if (!prompts) {
                prompts = [];
                this.set( {prompts: prompts} );
            }

            prompts.push({label: label, action: action});
        },
        hasPrompts: function() {
            var prompts = this.get( "prompts" );

            return prompts && prompts.length > 0;
        },
        isEqual: function( that ) {

            var comparisonAttributes = [ "message", "type", "attribute", "ignoreForGroupBy" ]
            var returnValue = true;

            _.each( comparisonAttributes, function(attribute) {
                if (returnValue && (!_.isEqual(this.get( attribute ),that.get( attribute )))) {
                    returnValue = false;
                }
            }, this );

            return returnValue;
        },callPromptAction: function(label) {
            var prompts = this.get( "prompts" );
            _.each( prompts, function(prompt) {
                if(prompt.label === label){
                    prompt.action();
                }
            } );
        },
        prompts: []
    });

    window.Notifications = Backbone.Collection.extend({
        initialize: function () {
            this.bind('add', this.addComponentErrorStyle, this);
            this.bind('remove', this.removeComponentErrorStyle, this);

            if(CommonContext.integratedWithExperience) {
                this.bind('add',this.sendNotificationMessage, this);
                this.bind('remove',this.sendNotificationMessage, this);
            }

        },
        model: Notification,
        addNotification: function( notification ) {
            var foundNotification = this.find( function(n) {
                if(notification.get("type")=="error")
                    return false;
                else
                    return notification.isEqual(n);
            });

            if (foundNotification) {
                window.notificationCenter.openNotificationFlyout();
                this.remove( foundNotification );
                this.add( notification );
                if (notification.get( "flash" )) {
                    var removeNotification = function(event) {
                        if(event.type =="keydown"){
                            if(!(event.altKey || event.keyCode == 9 || event.shiftKey  ||  (event.altKey && event.keyCode ==78))){
                                this.remove( notification );
                            }
                        }
                        else
                            this.remove( notification );
                    };

                    removeNotification = _.bind( removeNotification, this );
                    $('body').on('mousedown keydown', removeNotification);
                }
                return foundNotification;
            }
            else {
                this.add( notification );
                // If the notification gets orphaned remove it from the collection.
                if (notification.has( "model" ) && notification.get( "model" )) {
                    var model = notification.get( "model" );
                    if(notification.get("type") !== "error"){
                        notification.get("flash") || model.collection.bind("reset", function (models) {
                            if (_.isUndefined(model.collection)) {
                                this.remove(notification);
                            }
                        }, this);
                    }
                }

                // If the notification is a flash, we are going to set to remove it automagically.
                if (notification.get( "flash" )) {
                    var removeNotification = function(event) {
                        if(event.type =="keydown"){
                            if(!(event.altKey || event.keyCode == 9 || event.shiftKey  ||  (event.altKey && event.keyCode ==78)) ){
                                this.remove( notification );
                            }
                        }
                        else
                            this.remove( notification );
                    };

                    removeNotification = _.bind( removeNotification, this );
                    $('body').on('mousedown keydown', removeNotification);

                }
                return notification;
            }
        },
        fetch: function() {
            throw new Error("not supported");
        },
        clearNotifications: function( model, attributes ) {
            if (model) {
                // Remove all notifications that are bound to the model
                var notificationsToRemove = this.filter( function( n ) {
                    if (n.get( "flash" )) {
                        return false; // allow flash notifications to persist until they time out or are explicitly removed
                    }

                    var notificationModel = n.get( "model" );
                    if (notificationModel && notificationModel.id === model.id) {
                        if (attributes) {
                            if (n.has( "attribute" )) {
                                // We are going to only select the the notifications that have the same model and attribute
                                var keys = _.keys( attributes );

                                var found = _.find( keys, function(k) {
                                    return k === n.get( "attribute" );
                                });

                                // If we got to this point we do not want to mark this notification for removal because none of the attributes are in the notification.
                                return found;
                            }
                            else {
                                // This specific notification does not have an attribute so we will not include it since the request to clear notifications was by model and attributes.
                                return false;
                            }
                        }
                        else {
                            // We are not inspecting attributes and will return this notification.
                            return true;
                        }
                    }
                });

                if (notificationsToRemove) {
                    _.each( notificationsToRemove, function( n ) {
                        this.remove( n );
                    }, this );
                }
            }
            else {
                _.each(this.models,function(model){
                    notifications.removeComponentErrorStyle(model);
                });
                // Remove all models
                this.remove(this.models);
            }
        },
        addNotificationsFromModel: function(model) {
            if (model) {
                function evaluateModel(model) {
                    this.clearNotifications( model );

                    if (model.has && model.has("messages")) {
                        _.each(model.get("messages"), function(message) {

                            var notification = new Notification( {message: message.message, type: message.type, model: model, attribute: message.field } );

                            if (message.type === "success") {
                                notification.set( {
                                    flash: true,
                                    message: $.i18n.prop("js.notification.success"),
                                    ignoreForGroupBy: ["model"]
                                } );
                            }
                            // Adding error notification from addNotificationsFromModel()
                            if (message.type === "error") {
                                notification.set( {
                                    component: message.component
                                } );
                            }

                            this.addNotification( notification );

                            model.bind( "change:messages", function( m ) {
                                // Reset the notifications that are associated with the model that has new or updated messages
                                var associatedNotifications = _.select( notifications.models, function(n) {
                                    return n.get( "model" ) === m;
                                });

                                _.each( associatedNotifications, function( n ) {
                                    n.get( "flash" ) || notifications.remove( n );
                                });
                            }, this );
                        }, this);
                    } else {
                        var notification = new Notification({message: $.i18n.prop("js.notification.NoChangesToSave"), type: "warning", model: model, attribute: "" });
                        notification.set({
                            flash: true,
                            ignoreForGroupBy: ["model"]
                        });
                        this.addNotification(notification);
                    }
                }

                evaluateModel = _.bind(evaluateModel, this);

                if (!model.models) {
                    evaluateModel(model);
                }
                else if (model.models.length === 0) {
                    evaluateModel(model.models);
                }
                else {
                    _.each(model.models, function(m) {
                        evaluateModel(m);
                    });
                }
            }
        },
        hasErrors: function() {
            return this.find( function(model) { return model.get( "type" ) === "error" } );
        },
        hasFlash: function() {
            return this.find( function(model) { return model.get( "type" ) === "success" } );
        },
        hasPrompt: function() {
            return this.find( function(model) { return model.hasPrompts() } );
        },
        addComponentErrorStyle: function( notification ) {
            var errorComponent = this.getNotificationComponent(notification);
            if(!_.isUndefined(errorComponent)){
                $(errorComponent).addClass("component-error");
            }
        },
        removeComponentErrorStyle: function( notification ) {
            var errorComponent = this.getNotificationComponent(notification);
            if(!_.isUndefined(errorComponent)){
                $(errorComponent).removeClass("component-error");
            }
        },
        getNotificationComponent: function( notification ){
            var notificationType = notification.get("type");
            if (notificationType == "error") {
                var errorComponent = notification.attributes.component;
            }
            return errorComponent;
        },
        sendNotificationMessage:function (){
            Message.setNotificationMessage(this.models);
        }
    });

    window.notifications = new Notifications;

    window.NotificationView = Backbone.View.extend({
        tagName: "li",
        className: "notification-item",
        initialize: function() {
            _.bindAll(this, "render", "removeNotification" );
            this.model.collection.bind("remove", this.removeNotification);
        },
        render: function() {
            //  Evaluate the notification type to determine what css class to append to the notification.
            var notificationType = this.model.get("type");
            var view = this;
            var notificationMessage = '' + this.model.get("message" );
            var messageContainer = $("<span></span>");
            var component = this.model.get("component");
            var flashContainer = $('.aria-flashnotification-screen-reader');
            if (flashContainer.length === 0) {
                var ariaRegion1 = $('<span></span>');
                ariaRegion1.attr('role', 'status');
                ariaRegion1.attr('aria-live', 'assertive');
                ariaRegion1.attr('class', 'aria-flashnotification-screen-reader');
                $(document.body).append(ariaRegion1);
            }

            if(notificationType=="error" && component){
                messageContainer = $("<a tabindex='0' role='link' class='notification-flyout-item'></a>");
                messageContainer.addClass('notification-message');
                messageContainer.on('click', function(){
                    view.navigateToErrorComponent(view.model);
                });
                messageContainer.on('keydown', function(e) {
                    if (e.keyCode == $.ui.keyCode.ENTER || e.which == $.ui.keyCode.ENTER) {
                        view.navigateToErrorComponent(view.model);
                        e.preventDefault();
                    }
                });
            }

            var messageDiv = $("<div></div>").addClass( "notification-item-message vertical-align" ).html(messageContainer.append( notificationMessage ) );

            // Manage the prompts if available
            var promptsDiv;
            var promptMessage = this.model.get( "promptMessage" );
            if (this.model.hasPrompts()) {

                $(this.el).addClass( "notification-center-message-with-prompts" );

                if (promptMessage) {
                    messageContainer.append( promptMessage );
                }

                promptsDiv = $( "<div></div>" ).addClass( "notification-item-prompts" );

                _.each(this.model.get( "prompts" ), function(prompt) {
                    var b = $("<button></button>").html( prompt.label )
                        .on('click', function(){
                            notificationCenter.closeNotificationFlyout();
                            prompt.action();
                        });
                    b.addClass('notification-flyout-item');
                    b.addClass('secondary');
                    promptsDiv.append( b );
                }, this );
            }

            $(this.el).append("<span class='notification-icon'></span>");
            $(this.el).append( messageDiv );


            if (promptsDiv) {
                $(this.el).append( promptsDiv );
            }
            var notificationStyleClass = {error:"notification-center-message-error",warning:"notification-center-message-warning",success:"notification-center-message-success"};
            $(this.el).addClass( notificationStyleClass[notificationType] );

            var screenReaderText = {error: $.i18n.prop("screenreader.notification.error"),warning:$.i18n.prop("screenreader.notification.warning"),success:$.i18n.prop("screenreader.notification.flash")};
            var ariaLabelledbyText = screenReaderText[notificationType] ;

            if(notificationType == "error"){
                messageContainer.screenReaderLabel( ariaLabelledbyText + " " + notificationMessage, "off", "aria-labelledby");
            }
            else if(notificationType == "warning"){
                var actionButton = promptsDiv.find('button:first');
                actionButton.removeClass('secondary');
                actionButton.addClass('primary');
                actionButton.screenReaderLabel( ariaLabelledbyText + " " + notificationMessage+ " " + promptMessage + " " + actionButton.text(), "off", "aria-labelledby");
            }
            else{
                var ariaNotificationItemTextElement = "<b class='offscreen' id='ariaNotificationCountText'> "+ ariaLabelledbyText +"</b>";
                $(messageContainer).addClass('notification-flyout-item')
                    .attr('tabindex','0')
                    .prepend(' '+ariaNotificationItemTextElement);
            }

            return this;
        },
        removeNotification: function(notification) {
            if (this.model === notification) {
                $(this.el).fadeOut( 1000 ).remove();
            }
        },
        navigateToErrorComponent: function(model) {
            if($('body .notification-center-shim').length == 0) {
                var component = model.attributes.component;
                if (component) {
                    if (model.attributes.componentType == "select2" && !component.hasClass('select2-focusser')) {
                        component = component.find('.select2-focusser');
                    }
                    window.notificationCenter.closeNotificationFlyout();
                    window.componentToFocusOnFlyoutClose = null;
                    component.focus();
                }
            }
        }
    });


    // The notification center will instantiate a notificationCenterAnchor and a notificationCenterFlyout.

    // The notification center will be responsible for capturing events that come from the child components
    // and act as a controller.  E.g. is that the notificationCenter will listen for a click event on the
    // notificationCenterAnchor and instruct the flyout to either open or close.


    window.NotificationCenterAnchor = Backbone.View.extend({
        initialize: function() {
            $(this.el).addClass( "notification-center-anchor" ).addClass( "notification-center-anchor-hidden");
            var notificationCountDiv = $('<div class="notification-center-count vertical-align"><span/></div>' );
            $(this.el).screenReaderLabel( $.i18n.prop("js.notification.description") );
            $(this.el).append( notificationCountDiv );
            _.bindAll(this, "render", "isDisplayed", "display", "hide");

            this.model.bind("add", this.render);
            this.model.bind("remove", this.render);
            this.model.bind("reset", this.render);

            this.render();
        },
        render: function() {
            var notifications = this.model.models;

            if (notifications.length > 0) {
                $(this.el).removeClass( "notification-center-anchor-hidden");
                $("#notification-center").removeClass("notification-center-hidden").addClass("notification-center-displayed");
            }
            else {
                $(this.el).addClass( "notification-center-anchor-hidden");
                $("#notification-center").removeClass("notification-center-displayed").addClass("notification-center-hidden");
            }

            var ariaCountLabel = "<b class='offscreen'>"+$.i18n.prop("js.notification.label")+"</b>";
            $(".notification-center-count span", this.el).html(notifications.length).append(ariaCountLabel);
            return this;
        },
        isDisplayed: function() {
            return $(this.el).hasClass( "notification-center-anchor-displayed" );
        },
        display: function() {
            $(this.el).addClass( "notification-center-anchor-displayed" ).removeClass( "notification-center-anchor-hidden" );
            return this;
        },
        hide: function() {
            $(this.el).addClass( "notification-center-anchor-hidden" ).removeClass( "notification-center-anchor-displayed" );
            return this;
        }
    });


    window.NotificationCenterFlyout = Backbone.View.extend({
        events: {
            "keydown .notification-flyout-item:first":"focusLastMessageItem",
            "keydown .notification-flyout-item:last":"focusFirstMessageItem"
        },

        navigateToErrorComponent: function () {
            if($('body .notification-center-shim').length == 0) {
                this.navigateToErrorComponent(this.model);
            }
        },

        initialize: function() {
            $(this.el).addClass( "notification-center-flyout" ).addClass( "notification-center-flyout-hidden" );

            _.bindAll(this, "render", "isDisplayed", "display", "hide","addAriaDescription","addNotificationToFlyout");
            this.model.bind("add", this.addNotificationToFlyout);
        },
        addNotificationToFlyout: function(notification) {
            var view = new NotificationView( {model:notification} );
            var type = notification.get("type");
            var notificationCollection = this.model.models;
            //In case of flash messages aria description regarding shortcuts is not required
            if (!(notificationCollection.length == 1 && notificationCollection[0].get("flash"))) {
                this.addAriaDescription(notificationCollection.length);
            }

            if(type == "success"){
                $(".notification-center-count span").removeAttr('role');
            }
            else{
                $(".notification-center-count span").attr('role','alert');
            }

            var listItem = view.render().el;
            if(type == "warning"){
                $("ul.prompt-container", this.el).prepend( listItem);
            }
            else if(type== "error"){
                $("ul.error-container", this.el).prepend( listItem);
            }
            else{
                $("ul.flash-container", this.el).prepend( listItem);
                window.elementToFocusOnFlash = notification.get("elementToFocus") || document.activeElement;
            }
            return this;
        },
        isDisplayed: function() {
            return $(this.el).hasClass( "notification-center-flyout-displayed" );
        },
        addAriaDescription: function(count) {
            if ($(this.el).children('#notificationCenterAriaInfo').length == 0 ) {
                //First time notification info.
                var notificationCenterAriaInfo = "<p tabindex='-1' class='offscreen' role='alert'  id='notificationCenterAriaInfo'>";
                //notificationCenterAriaInfo +=$.i18n.prop("js.notification.countlabel",[count]);
                notificationCenterAriaInfo += $.i18n.prop("js.notification.help");
                notificationCenterAriaInfo +="</p>";
                $(this.el).prepend(notificationCenterAriaInfo);
                $(this.el).attr('aria-describedby','notificationCenterAriaInfo');
            } else {
                //Further time notification info.
                $(this.el).children('#notificationCenterCountAriaInfo').remove();
            }

        },
        display: function() {
            $(this.el).addClass( "notification-center-flyout-displayed" ).removeClass( "notification-center-flyout-hidden" );


            return this;
        },
        hide: function() {
            $(this.el).addClass( "notification-center-flyout-hidden" ).removeClass( "notification-center-flyout-displayed" );
            return this;
        },
        focusLastMessageItem: function(e){
            if (e.keyCode == $.ui.keyCode.TAB && e.shiftKey) {
                $('.notification-flyout-item:last').focus();
                e.preventDefault();
            }
        },
        focusFirstMessageItem: function(e){
            if (e.keyCode == $.ui.keyCode.TAB && !e.shiftKey) {
                $('.notification-flyout-item:first').focus();
                e.preventDefault();
            }
        }
    });


    window.NotificationCenter = Backbone.View.extend({
        events: {
            "click .notification-center-anchor":"toggle",
            "keydown .notification-center-anchor":"toggleIfEnterPressed"

        },
        initialize: function() {
            var self  = this;
            $(this.el).addClass("notification-center");
            $(this.el).append( '<a tabindex="0" class="notification-center-anchor"></a>' );
            $(this.el).append( '<div class="notification-center-flyout" tabindex="0"><ul class="flash-container" role="alert" aria-live="assertive"/><ul class="prompt-container" /><ul class="error-container"/></div>' );


            this.notificationCenterAnchor = new NotificationCenterAnchor({el: $(".notification-center-anchor", this.el), model: this.model });
            this.notificationCenterFlyout = new NotificationCenterFlyout({el: $(".notification-center-flyout", this.el), model: this.model, parent: this.el });

            _.bindAll(this, 'render', 'addNotification', 'removeNotification', 'toggle','pressEscToClose','closeNotificationFlyout','closeNotificationFlyoutAndSetFocus','configureNotificationOverlay','checkAndCloseFlyout');
            this.model.bind("add", this.addNotification);
            this.model.bind("remove", this.removeNotification);

            document.addEventListener('mousedown',this.setComponentToFocusOnFlyoutClose,true);
            document.addEventListener('keydown',this.setComponentToFocusOnFlyoutClose,true);
            $.event.trigger('notification-use-ready');
        },
        render: function() {
            return this;
        },
        addNotification: function(notification) {
            this.openNotificationFlyout();
            this.configNotificationShim();
            return this;
        },
        removeNotification: function(notification) {
            if (this.model.length == 0) {
                this.closeNotificationFlyout();
            }

            this.configNotificationShim();

            return this;
        },
        toggle: function() {
            if (this.notificationCenterFlyout.isDisplayed()) {
                this.closeNotificationFlyoutAndSetFocus();
            }
            else {
                if(this.model.length > 0){
                    this.openNotificationFlyout();
                }
                else{
                    this.notificationCenterAnchor.$el.focus();
                }
            }
            return this;
        },

        toggleIfEnterPressed: function(e) {
            if (e.keyCode == $.ui.keyCode.ENTER || e.which == $.ui.keyCode.ENTER) {
                this.toggle ();
            }
        },

        openNotificationFlyout: function () {
            var promptElementToFocus = $('.prompt-container .notification-flyout-item:first');
            var errorElementToFocus = $('.error-container .notification-flyout-item:first');
            var flashElementContent = $('.flash-container .notification-flyout-item:first');
            if(window.componentToFocusOnFlyoutClose == null){
                window.componentToFocusOnFlyoutClose = $(document.activeElement);
            }
            this.notificationCenterAnchor.display();
            this.notificationCenterFlyout.display();
            this.configureNotificationOverlay();
            $('.notification-center-flyout')[0].addEventListener('keydown', this.pressEscToClose , true );

            if(flashElementContent.length > 0){
                $(".aria-flashnotification-screen-reader").text('');
                $(".aria-flashnotification-screen-reader").text(flashElementContent.text());
            }


            if(_.isUndefined(notifications.hasFlash())){
                $('.notification-flyout-item:first').focus();
            }
            else{
                if(promptElementToFocus.length) {
                    promptElementToFocus.focus();
                }
                else if(errorElementToFocus.length){
                    errorElementToFocus.focus();
                }
                else{
                    $(elementToFocusOnFlash).focus();
                }
            }
        },
        closeNotificationFlyout: function () {
            this.notificationCenterFlyout.hide();
            var flashElementContent = $('.flash-container .notification-flyout-item:first');
            if(flashElementContent.length > 0) {
                $(".aria-flashnotification-screen-reader").text('');
            }
            $('.notification-center-flyout')[0].removeEventListener('keydown',  this.pressEscToClose, true );
        },
        closeNotificationFlyoutAndSetFocus: function(){
            this.closeNotificationFlyout();
            this.focusComponentOnFlyoutClose();
            window.componentToFocusOnFlyoutClose = null;
        },
        focusComponentOnFlyoutClose: function(){
            if($('body.notification-center-shim').length == 0) {
                window.componentToFocusOnFlyoutClose.focus();
            }
            else{
                this.notificationCenterAnchor.$el.focus();
            }
        },
        pressEscToClose: function(e) {
            if(e.keyCode == $.ui.keyCode.ESCAPE){
                if ($(".notification-center-shim").length >= 0) {
                    this.closeNotificationFlyoutAndSetFocus();
                    e.stopImmediatePropagation();
                }
            }
        },
        configNotificationShim: function() {
            // Check to see if any prompts exist.  If there is a prompt, the user must be forced to address the prompt prior
            // to moving on.
            var target = this.options.shimTarget;

            // In case application is opened inside Experience do not add notification-center-shim
            if(!CommonContext.integratedWithExperience) {
                if (_.isUndefined(target)) {
                    target = $("body");
                }

                if (this.model.find( function( n ) { return n.hasPrompts(); } )) {
                    if ($(".notification-center-shim", target).length === 0) {
                        target.append( '<div class="notification-center-shim"></div>' );
                    }
                }
                else {
                    $(".notification-center-shim", target).remove();
                }
            }
        },
        configureNotificationOverlay: function(){
            var closeFlyout = function(event) {
                if($(event.target).closest('.notification-center').length == 0 && $('.notification-center-shim').length == 0) {
                    notificationCenter.closeNotificationFlyout();
                    $('body').off('mousedown', closeFlyout);
                }
            };


        },
        checkAndCloseFlyout: function(event){
            if($(event.target).closest('.notification-center').length == 0){
                this.closeNotificationFlyoutAndSetFocus();
            }
        },
        setComponentToFocusOnFlyoutClose: function(e) {
            if(e.type == "keydown"){
                if ($(e.target).closest('.notification-center').length == 0) {
                    if (e.keyCode == $.ui.keyCode.TAB && e.shiftKey) {
                        window.componentToFocusOnFlyoutClose = getPreviousTabbableElement(e.target);
                    }
                    else if (e.keyCode == $.ui.keyCode.TAB && !e.shiftKey) {
                        window.componentToFocusOnFlyoutClose = getNextTabbableElement(e.target);
                    }
                }
            }
            else{
                window.componentToFocusOnFlyoutClose = this.notificationCenterAnchor;
            }

        }
    });

    if ( !_.isUndefined( window[ "EventDispatcher" ] ) ) {
        EventDispatcher.addEventListener( Application.events.initialized, function() {
            var nc = $("<div><div id='notification-center'></div></div>" );
            //TODO: HRU:5803 cleanup
            //ControlBar.append( nc );
            window.notificationCenter = new NotificationCenter({
                el: $("#notification-center"),
                model: notifications
            });
        });
    }
});

var process = process || {env: {NODE_ENV: "development"}};
/**
* hoverIntent is similar to jQuery's built-in "hover" function except that
* instead of firing the onMouseOver event immediately, hoverIntent checks
* to see if the user's mouse has slowed down (beneath the sensitivity
* threshold) before firing the onMouseOver event.
*
* hoverIntent r6 // 2011.02.26 // jQuery 1.5.1+
* <http://cherne.net/brian/resources/jquery.hoverIntent.html>
*
* hoverIntent is currently available for use in all personal or commercial
* projects under both MIT and GPL licenses. This means that you can choose
* the license that best suits your project, and use it accordingly.
*
* // basic usage (just like .hover) receives onMouseOver and onMouseOut functions
* $("ul li").hoverIntent( showNav , hideNav );
*
* // advanced usage receives configuration object only
* $("ul li").hoverIntent({
*	sensitivity: 7, // number = sensitivity threshold (must be 1 or higher)
*	interval: 100,   // number = milliseconds of polling interval
*	over: showNav,  // function = onMouseOver callback (required)
*	timeout: 0,   // number = milliseconds delay before onMouseOut function call
*	out: hideNav    // function = onMouseOut callback (required)
* });
*
* @param  f  onMouseOver function || An object with configuration options
* @param  g  onMouseOut function  || Nothing (use configuration options object)
* @author    Brian Cherne brian(at)cherne(dot)net
*/
(function($) {
	$.fn.hoverIntent = function(f,g) {
		// default configuration options
		var cfg = {
			sensitivity: 7,
			interval: 100,
			timeout: 0
		};
		// override configuration options with user supplied object
		cfg = $.extend(cfg, g ? { over: f, out: g } : f );

		// instantiate variables
		// cX, cY = current X and Y position of mouse, updated by mousemove event
		// pX, pY = previous X and Y position of mouse, set by mouseover and polling interval
		var cX, cY, pX, pY;

		// A private function for getting mouse position
		var track = function(ev) {
			cX = ev.pageX;
			cY = ev.pageY;
		};

		// A private function for comparing current and previous mouse position
		var compare = function(ev,ob) {
			ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
			// compare mouse positions to see if they've crossed the threshold
			if ( ( Math.abs(pX-cX) + Math.abs(pY-cY) ) < cfg.sensitivity ) {
				$(ob).unbind("mousemove",track);
				// set hoverIntent state to true (so mouseOut can be called)
				ob.hoverIntent_s = 1;
				return cfg.over.apply(ob,[ev]);
			} else {
				// set previous coordinates for next time
				pX = cX; pY = cY;
				// use self-calling timeout, guarantees intervals are spaced out properly (avoids JavaScript timer bugs)
				ob.hoverIntent_t = setTimeout( function(){compare(ev, ob);} , cfg.interval );
			}
		};

		// A private function for delaying the mouseOut function
		var delay = function(ev,ob) {
			ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t);
			ob.hoverIntent_s = 0;
			return cfg.out.apply(ob,[ev]);
		};

		// A private function for handling mouse 'hovering'
		var handleHover = function(e) {
			// copy objects to be passed into t (required for event object to be passed in IE)
			var ev = jQuery.extend({},e);
			var ob = this;

			// cancel hoverIntent timer if it exists
			if (ob.hoverIntent_t) { ob.hoverIntent_t = clearTimeout(ob.hoverIntent_t); }

			// if e.type == "mouseenter"
			if (e.type == "mouseenter") {
				// set "previous" X and Y position based on initial entry point
				pX = ev.pageX; pY = ev.pageY;
				// update "current" X and Y position based on mousemove
				$(ob).bind("mousemove",track);
				// start polling interval (self-calling timeout) to compare mouse coordinates over time
				if (ob.hoverIntent_s != 1) { ob.hoverIntent_t = setTimeout( function(){compare(ev,ob);} , cfg.interval );}

			// else e.type == "mouseleave"
			} else {
				// unbind expensive mousemove event
				$(ob).unbind("mousemove",track);
				// if hoverIntent state is true, then call the mouseOut function after the specified delay
				if (ob.hoverIntent_s == 1) { ob.hoverIntent_t = setTimeout( function(){delay(ev,ob);} , cfg.timeout );}
			}
		};

		// bind the function to the two event listeners
		return this.bind('mouseenter',handleHover).bind('mouseleave',handleHover);
	};
})(jQuery);
var process = process || {env: {NODE_ENV: "development"}};
/*
 * Jeditable - jQuery in place edit plugin
 *
 * Copyright (c) 2006-2009 Mika Tuupola, Dylan Verheul
 *
 * Licensed under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 *
 * Project home:
 *   http://www.appelsiini.net/projects/jeditable
 *
 * Based on editable by Dylan Verheul <dylan_at_dyve.net>:
 *    http://www.dyve.net/jquery/?editable
 *
 */

/**
  * Version 1.7.1
  *
  * ** means there is basic unit tests for this parameter. 
  *
  * @name  Jeditable
  * @type  jQuery
  * @param String  target             (POST) URL or function to send edited content to **
  * @param Hash    options            additional options 
  * @param String  options[method]    method to use to send edited content (POST or PUT) **
  * @param Function options[callback] Function to run after submitting edited content **
  * @param String  options[name]      POST parameter name of edited content
  * @param String  options[id]        POST parameter name of edited div id
  * @param Hash    options[submitdata] Extra parameters to send when submitting edited content.
  * @param String  options[type]      text, textarea or select (or any 3rd party input type) **
  * @param Integer options[rows]      number of rows if using textarea ** 
  * @param Integer options[cols]      number of columns if using textarea **
  * @param Mixed   options[height]    'auto', 'none' or height in pixels **
  * @param Mixed   options[width]     'auto', 'none' or width in pixels **
  * @param String  options[loadurl]   URL to fetch input content before editing **
  * @param String  options[loadtype]  Request type for load url. Should be GET or POST.
  * @param String  options[loadtext]  Text to display while loading external content.
  * @param Mixed   options[loaddata]  Extra parameters to pass when fetching content before editing.
  * @param Mixed   options[data]      Or content given as paramameter. String or function.**
  * @param String  options[indicator] indicator html to show when saving
  * @param String  options[tooltip]   optional tooltip text via title attribute **
  * @param String  options[event]     jQuery event such as 'click' of 'dblclick' **
  * @param String  options[submit]    submit button value, empty means no button **
  * @param String  options[cancel]    cancel button value, empty means no button **
  * @param String  options[cssclass]  CSS class to apply to input form. 'inherit' to copy from parent. **
  * @param String  options[style]     Style to apply to input form 'inherit' to copy from parent. **
  * @param String  options[select]    true or false, when true text is highlighted ??
  * @param String  options[placeholder] Placeholder text or html to insert when element is empty. **
  * @param String  options[onblur]    'cancel', 'submit', 'ignore' or function ??
  *             
  * @param Function options[onsubmit] function(settings, original) { ... } called before submit
  * @param Function options[onreset]  function(settings, original) { ... } called before reset
  * @param Function options[onerror]  function(settings, original, xhr) { ... } called on error
  *             
  * @param Hash    options[ajaxoptions]  jQuery Ajax options. See docs.jquery.com.
  *             
  */

(function($) {

    $.fn.editable = function(target, options) {
            
        if ('disable' == target) {
            $(this).data('disabled.editable', true);
            return;
        }
        if ('enable' == target) {
            $(this).data('disabled.editable', false);
            return;
        }
        if ('destroy' == target) {
            $(this)
                .unbind($(this).data('event.editable'))
                .removeData('disabled.editable')
                .removeData('event.editable');
            return;
        }
        
        var settings = $.extend({}, $.fn.editable.defaults, {target:target}, options);
        
        /* setup some functions */
        var plugin   = $.editable.types[settings.type].plugin || function() { };
        var submit   = $.editable.types[settings.type].submit || function() { };
        var buttons  = $.editable.types[settings.type].buttons 
                    || $.editable.types['defaults'].buttons;
        var content  = $.editable.types[settings.type].content 
                    || $.editable.types['defaults'].content;
        var element  = $.editable.types[settings.type].element 
                    || $.editable.types['defaults'].element;
        var reset    = $.editable.types[settings.type].reset 
                    || $.editable.types['defaults'].reset;
        var callback = settings.callback || function() { };
        var onedit   = settings.onedit   || function() { }; 
        var onsubmit = settings.onsubmit || function() { };
        var onreset  = settings.onreset  || function() { };
        var onerror  = settings.onerror  || reset;
          
        /* show tooltip */
        if (settings.tooltip) {
            $(this).attr('title', settings.tooltip);
        }
        
        settings.autowidth  = 'auto' == settings.width;
        settings.autoheight = 'auto' == settings.height;
        
        return this.each(function() {
                        
            /* save this to self because this changes when scope changes */
            var self = this;  
                   
            /* inlined block elements lose their width and height after first edit */
            /* save them for later use as workaround */
            var savedwidth  = $(self).width();
            var savedheight = $(self).height();
            
            /* save so it can be later used by $.editable('destroy') */
            $(this).data('event.editable', settings.event);
            
            /* if element is empty add something clickable (if requested) */
            if (!$.trim($(this).html())) {
                $(this).html(settings.placeholder);
            }
            
            $(this).bind(settings.event, function(e) {
                
                /* abort if disabled for this element */
                if (true === $(this).data('disabled.editable')) {
                    return;
                }
                
                /* prevent throwing an exeption if edit field is clicked again */
                if (self.editing) {
                    return;
                }
                
                /* abort if onedit hook returns false */
                if (false === onedit.apply(this, [settings, self])) {
                   return;
                }
                
                /* prevent default action and bubbling */
                e.preventDefault();
                e.stopPropagation();
                
                /* remove tooltip */
                if (settings.tooltip) {
                    $(self).removeAttr('title');
                }
                
                /* figure out how wide and tall we are, saved width and height */
                /* are workaround for http://dev.jquery.com/ticket/2190 */
                if (0 == $(self).width()) {
                    //$(self).css('visibility', 'hidden');
                    settings.width  = savedwidth;
                    settings.height = savedheight;
                } else {
                    if (settings.width != 'none') {
                        settings.width = 
                            settings.autowidth ? $(self).width()  : settings.width;
                    }
                    if (settings.height != 'none') {
                        settings.height = 
                            settings.autoheight ? $(self).height() : settings.height;
                    }
                }
                //$(this).css('visibility', '');
                
                /* remove placeholder text, replace is here because of IE */
                if ($(this).html().toLowerCase().replace(/(;|")/g, '') == 
                    settings.placeholder.toLowerCase().replace(/(;|")/g, '')) {
                        $(this).html('');
                }
                                
                self.editing    = true;
                self.revert     = $(self).html();
                $(self).html('');

                /* create the form object */
                var form = $('<form />');
                
                /* apply css or style or both */
                if (settings.cssclass) {
                    if ('inherit' == settings.cssclass) {
                        form.attr('class', $(self).attr('class'));
                    } else {
                        form.attr('class', settings.cssclass);
                    }
                }

                if (settings.style) {
                    if ('inherit' == settings.style) {
                        form.attr('style', $(self).attr('style'));
                        /* IE needs the second line or display wont be inherited */
                        form.css('display', $(self).css('display'));                
                    } else {
                        form.attr('style', settings.style);
                    }
                }

                /* add main input element to form and store it in input */
                var input = element.apply(form, [settings, self]);

                /* set input content via POST, GET, given data or existing value */
                var input_content;
                
                if (settings.loadurl) {
                    var t = setTimeout(function() {
                        input.disabled = true;
                        content.apply(form, [settings.loadtext, settings, self]);
                    }, 100);

                    var loaddata = {};
                    loaddata[settings.id] = self.id;
                    if ($.isFunction(settings.loaddata)) {
                        $.extend(loaddata, settings.loaddata.apply(self, [self.revert, settings]));
                    } else {
                        $.extend(loaddata, settings.loaddata);
                    }
                    $.ajax({
                       type : settings.loadtype,
                       url  : settings.loadurl,
                       data : loaddata,
                       async : false,
                       success: function(result) {
                          window.clearTimeout(t);
                          input_content = result;
                          input.disabled = false;
                       }
                    });
                } else if (settings.data) {
                    input_content = settings.data;
                    if ($.isFunction(settings.data)) {
                        input_content = settings.data.apply(self, [self.revert, settings]);
                    }
                } else {
                    input_content = self.revert; 
                }
                content.apply(form, [input_content, settings, self]);

                input.attr('name', settings.name);
        
                /* add buttons to the form */
                buttons.apply(form, [settings, self]);
         
                /* add created form to self */
                $(self).append(form);
         
                /* attach 3rd party plugin if requested */
                plugin.apply(form, [settings, self]);

                /* focus to first visible form element */
                $(':input:visible:enabled:first', form).focus();

                /* highlight input contents when requested */
                if (settings.select) {
                    input.select();
                }
        
                /* discard changes if pressing esc */
                input.keydown(function(e) {
                    if (e.keyCode == 27) {
                        e.preventDefault();
                        //self.reset();
                        reset.apply(form, [settings, self]);
                    }
                });

                /* discard, submit or nothing with changes when clicking outside */
                /* do nothing is usable when navigating with tab */
                var t;
                if ('cancel' == settings.onblur) {
                    input.blur(function(e) {
                        /* prevent canceling if submit was clicked */
                        t = setTimeout(function() {
                            reset.apply(form, [settings, self]);
                        }, 500);
                    });
                } else if ('submit' == settings.onblur) {
                    input.blur(function(e) {
                        /* prevent double submit if submit was clicked */
                        t = setTimeout(function() {
                            form.submit();
                        }, 200);
                    });
                } else if ($.isFunction(settings.onblur)) {
                    input.blur(function(e) {
                        settings.onblur.apply(self, [input.val(), settings]);
                    });
                } else {
                    input.blur(function(e) {
                      /* TODO: maybe something here */
                    });
                }

                form.submit(function(e) {

                    if (t) { 
                        clearTimeout(t);
                    }

                    /* do no submit */
                    e.preventDefault(); 
            
                    /* call before submit hook. */
                    /* if it returns false abort submitting */                    
                    if (false !== onsubmit.apply(form, [settings, self])) { 
                        /* custom inputs call before submit hook. */
                        /* if it returns false abort submitting */
                        if (false !== submit.apply(form, [settings, self])) { 

                          /* check if given target is function */
                          if ($.isFunction(settings.target)) {
                              var str = settings.target.apply(self, [input.val(), settings]);
                              $(self).html(str);
                              self.editing = false;
                              callback.apply(self, [self.innerHTML, settings]);
                              /* TODO: this is not dry */                              
                              if (!$.trim($(self).html())) {
                                  $(self).html(settings.placeholder);
                              }
                          } else {
                              /* add edited content and id of edited element to POST */
                              var submitdata = {};
                              submitdata[settings.name] = input.val();
                              submitdata[settings.id] = self.id;
                              /* add extra data to be POST:ed */
                              if ($.isFunction(settings.submitdata)) {
                                  $.extend(submitdata, settings.submitdata.apply(self, [self.revert, settings]));
                              } else {
                                  $.extend(submitdata, settings.submitdata);
                              }

                              /* quick and dirty PUT support */
                              if ('PUT' == settings.method) {
                                  submitdata['_method'] = 'put';
                              }

                              /* show the saving indicator */
                              $(self).html(settings.indicator);
                              
                              /* defaults for ajaxoptions */
                              var ajaxoptions = {
                                  type    : 'POST',
                                  data    : submitdata,
                                  dataType: 'html',
                                  url     : settings.target,
                                  success : function(result, status) {
                                      if (ajaxoptions.dataType == 'html') {
                                        $(self).html(result);
                                      }
                                      self.editing = false;
                                      callback.apply(self, [result, settings]);
                                      if (!$.trim($(self).html())) {
                                          $(self).html(settings.placeholder);
                                      }
                                  },
                                  error   : function(xhr, status, error) {
                                      onerror.apply(form, [settings, self, xhr]);
                                  }
                              };
                              
                              /* override with what is given in settings.ajaxoptions */
                              $.extend(ajaxoptions, settings.ajaxoptions);   
                              $.ajax(ajaxoptions);          
                              
                            }
                        }
                    }
                    
                    /* show tooltip again */
                    $(self).attr('title', settings.tooltip);
                    
                    return false;
                });
            });
            
            /* privileged methods */
            this.reset = function(form) {
                /* prevent calling reset twice when blurring */
                if (this.editing) {
                    /* before reset hook, if it returns false abort reseting */
                    if (false !== onreset.apply(form, [settings, self])) { 
                        $(self).html(self.revert);
                        self.editing   = false;
                        if (!$.trim($(self).html())) {
                            $(self).html(settings.placeholder);
                        }
                        /* show tooltip again */
                        if (settings.tooltip) {
                            $(self).attr('title', settings.tooltip);                
                        }
                    }                    
                }
            };            
        });

    };


    $.editable = {
        types: {
            defaults: {
                element : function(settings, original) {
                    var input = $('<input type="hidden"></input>');                
                    $(this).append(input);
                    return(input);
                },
                content : function(string, settings, original) {
                    $(':input:first', this).val(string);
                },
                reset : function(settings, original) {
                  original.reset(this);
                },
                buttons : function(settings, original) {
                    var form = this;
                    if (settings.submit) {
                        /* if given html string use that */
                        if (settings.submit.match(/>$/)) {
                            var submit = $(settings.submit).click(function() {
                                if (submit.attr("type") != "submit") {
                                    form.submit();
                                }
                            });
                        /* otherwise use button with given string as text */
                        } else {
                            var submit = $('<button type="submit" />');
                            submit.html(settings.submit);                            
                        }
                        $(this).append(submit);
                    }
                    if (settings.cancel) {
                        /* if given html string use that */
                        if (settings.cancel.match(/>$/)) {
                            var cancel = $(settings.cancel);
                        /* otherwise use button with given string as text */
                        } else {
                            var cancel = $('<button type="cancel" />');
                            cancel.html(settings.cancel);
                        }
                        $(this).append(cancel);

                        $(cancel).click(function(event) {
                            //original.reset();
                            if ($.isFunction($.editable.types[settings.type].reset)) {
                                var reset = $.editable.types[settings.type].reset;                                                                
                            } else {
                                var reset = $.editable.types['defaults'].reset;                                
                            }
                            reset.apply(form, [settings, original]);
                            return false;
                        });
                    }
                }
            },
            text: {
                element : function(settings, original) {
                    var input = $('<input />');
                    if (settings.width  != 'none') { input.width(settings.width);  }
                    if (settings.height != 'none') { input.height(settings.height); }
                    /* https://bugzilla.mozilla.org/show_bug.cgi?id=236791 */
                    //input[0].setAttribute('autocomplete','off');
                    input.attr('autocomplete','off');
                    $(this).append(input);
                    return(input);
                }
            },
            textarea: {
                element : function(settings, original) {
                    var textarea = $('<textarea />');
                    if (settings.rows) {
                        textarea.attr('rows', settings.rows);
                    } else if (settings.height != "none") {
                        textarea.height(settings.height);
                    }
                    if (settings.cols) {
                        textarea.attr('cols', settings.cols);
                    } else if (settings.width != "none") {
                        textarea.width(settings.width);
                    }
                    $(this).append(textarea);
                    return(textarea);
                }
            },
            select: {
               element : function(settings, original) {
                    var select = $('<select />');
                    $(this).append(select);
                    return(select);
                },
                content : function(data, settings, original) {
                    /* If it is string assume it is json. */
                    if (String == data.constructor) {      
                        eval ('var json = ' + data);
                    } else {
                    /* Otherwise assume it is a hash already. */
                        var json = data;
                    }
                    for (var key in json) {
                        if (!json.hasOwnProperty(key)) {
                            continue;
                        }
                        if ('selected' == key) {
                            continue;
                        } 
                        var option = $('<option />').val(key).append(json[key]);
                        $('select', this).append(option);    
                    }                    
                    /* Loop option again to set selected. IE needed this... */ 
                    $('select', this).children().each(function() {
                        if ($(this).val() == json['selected'] || 
                            $(this).text() == $.trim(original.revert)) {
                                $(this).attr('selected', 'selected');
                        }
                    });
                }
            }
        },

        /* Add new input type */
        addInputType: function(name, input) {
            $.editable.types[name] = input;
        }
    };

    // publicly accessible defaults
    $.fn.editable.defaults = {
        name       : 'value',
        id         : 'id',
        type       : 'text',
        width      : 'auto',
        height     : 'auto',
        event      : 'click.editable',
        onblur     : 'cancel',
        loadtype   : 'GET',
        loadtext   : 'Loading...',
        placeholder: 'Click to edit',
        loaddata   : {},
        submitdata : {},
        ajaxoptions: {}
    };

})(jQuery);

var process = process || {env: {NODE_ENV: "development"}};
/*
 * SimpleModal 1.4.1 - jQuery Plugin
 * http://www.ericmmartin.com/projects/simplemodal/
 * Copyright (c) 2010 Eric Martin (http://twitter.com/ericmmartin)
 * Dual licensed under the MIT and GPL licenses
 * Revision: $Id: jquery.simplemodal.js 261 2010-11-05 21:16:20Z emartin24 $
 */

/**
 * SimpleModal is a lightweight jQuery plugin that provides a simple
 * interface to create a modal dialog.
 *
 * The goal of SimpleModal is to provide developers with a cross-browser
 * overlay and container that will be populated with data provided to
 * SimpleModal.
 *
 * There are two ways to call SimpleModal:
 * 1) As a chained function on a jQuery object, like $('#myDiv').modal();.
 * This call would place the DOM object, #myDiv, inside a modal dialog.
 * Chaining requires a jQuery object. An optional options object can be
 * passed as a parameter.
 *
 * @example $('<div>my data</div>').modal({options});
 * @example $('#myDiv').modal({options});
 * @example jQueryObject.modal({options});
 *
 * 2) As a stand-alone function, like $.modal(data). The data parameter
 * is required and an optional options object can be passed as a second
 * parameter. This method provides more flexibility in the types of data
 * that are allowed. The data could be a DOM object, a jQuery object, HTML
 * or a string.
 *
 * @example $.modal('<div>my data</div>', {options});
 * @example $.modal('my data', {options});
 * @example $.modal($('#myDiv'), {options});
 * @example $.modal(jQueryObject, {options});
 * @example $.modal(document.getElementById('myDiv'), {options});
 *
 * A SimpleModal call can contain multiple elements, but only one modal
 * dialog can be created at a time. Which means that all of the matched
 * elements will be displayed within the modal container.
 *
 * SimpleModal internally sets the CSS needed to display the modal dialog
 * properly in all browsers, yet provides the developer with the flexibility
 * to easily control the look and feel. The styling for SimpleModal can be
 * done through external stylesheets, or through SimpleModal, using the
 * overlayCss, containerCss, and dataCss options.
 *
 * SimpleModal has been tested in the following browsers:
 * - IE 6, 7, 8, 9
 * - Firefox 2, 3, 4
 * - Opera 9, 10
 * - Safari 3, 4, 5
 * - Chrome 1, 2, 3, 4, 5, 6
 *
 * @name SimpleModal
 * @type jQuery
 * @requires jQuery v1.2.4
 * @cat Plugins/Windows and Overlays
 * @author Eric Martin (http://ericmmartin.com)
 * @version 1.4.1
 */
;(function ($) {
	/*var ie6 = $.browser.msie && parseInt($.browser.version) === 6 && typeof window['XMLHttpRequest'] !== 'object',
		ie7 = $.browser.msie && parseInt($.browser.version) === 7,
		ieQuirks = null,*/
		var w = [];

	/*
	 * Create and display a modal dialog.
	 *
	 * @param {string, object} data A string, jQuery object or DOM object
	 * @param {object} [options] An optional object containing options overrides
	 */
	$.modal = function (data, options) {
		return $.modal.impl.init(data, options);
	};

	/*
	 * Close the modal dialog.
	 */
	$.modal.close = function () {
		$.modal.impl.close();
	};

	/*
	 * Set focus on first or last visible input in the modal dialog. To focus on the last
	 * element, call $.modal.focus('last'). If no input elements are found, focus is placed
	 * on the data wrapper element.
	 */
	$.modal.focus = function (pos) {
		$.modal.impl.focus(pos);
	};

	/*
	 * Determine and set the dimensions of the modal dialog container.
	 * setPosition() is called if the autoPosition option is true.
	 */
	$.modal.setContainerDimensions = function () {
		$.modal.impl.setContainerDimensions();
	};

	/*
	 * Re-position the modal dialog.
	 */
	$.modal.setPosition = function () {
		$.modal.impl.setPosition();
	};

	/*
	 * Update the modal dialog. If new dimensions are passed, they will be used to determine
	 * the dimensions of the container.
	 *
	 * setContainerDimensions() is called, which in turn calls setPosition(), if enabled.
	 * Lastly, focus() is called is the focus option is true.
	 */
	$.modal.update = function (height, width) {
		$.modal.impl.update(height, width);
	};

	/*
	 * Chained function to create a modal dialog.
	 *
	 * @param {object} [options] An optional object containing options overrides
	 */
	$.fn.modal = function (options) {
		return $.modal.impl.init(this, options);
	};

	/*
	 * SimpleModal default options
	 *
	 * appendTo:		(String:'body') The jQuery selector to append the elements to. For .NET, use 'form'.
	 * focus:			(Boolean:true) Focus in the first visible, enabled element?
	 * opacity:			(Number:50) The opacity value for the overlay div, from 0 - 100
	 * overlayId:		(String:'simplemodal-overlay') The DOM element id for the overlay div
	 * overlayCss:		(Object:{}) The CSS styling for the overlay div
	 * containerId:		(String:'simplemodal-container') The DOM element id for the container div
	 * containerCss:	(Object:{}) The CSS styling for the container div
	 * dataId:			(String:'simplemodal-data') The DOM element id for the data div
	 * dataCss:			(Object:{}) The CSS styling for the data div
	 * minHeight:		(Number:null) The minimum height for the container
	 * minWidth:		(Number:null) The minimum width for the container
	 * maxHeight:		(Number:null) The maximum height for the container. If not specified, the window height is used.
	 * maxWidth:		(Number:null) The maximum width for the container. If not specified, the window width is used.
	 * autoResize:		(Boolean:false) Automatically resize the container if it exceeds the browser window dimensions?
	 * autoPosition:	(Boolean:true) Automatically position the container upon creation and on window resize?
	 * zIndex:			(Number: 1000) Starting z-index value
	 * close:			(Boolean:true) If true, closeHTML, escClose and overClose will be used if set.
	 							If false, none of them will be used.
	 * closeHTML:		(String:'<a class="modalCloseImg" title="Close"></a>') The HTML for the default close link.
								SimpleModal will automatically add the closeClass to this element.
	 * closeClass:		(String:'simplemodal-close') The CSS class used to bind to the close event
	 * escClose:		(Boolean:true) Allow Esc keypress to close the dialog?
	 * overlayClose:	(Boolean:false) Allow click on overlay to close the dialog?
	 * position:		(Array:null) Position of container [top, left]. Can be number of pixels or percentage
	 * persist:			(Boolean:false) Persist the data across modal calls? Only used for existing
								DOM elements. If true, the data will be maintained across modal calls, if false,
								the data will be reverted to its original state.
	 * modal:			(Boolean:true) User will be unable to interact with the page below the modal or tab away from the dialog.
								If false, the overlay, iframe, and certain events will be disabled allowing the user to interact
								with the page below the dialog.
	 * onOpen:			(Function:null) The callback function used in place of SimpleModal's open
	 * onShow:			(Function:null) The callback function used after the modal dialog has opened
	 * onClose:			(Function:null) The callback function used in place of SimpleModal's close
	 */
	$.modal.defaults = {
		appendTo: 'body',
		focus: true,
		opacity: 50,
		overlayId: 'simplemodal-overlay',
		overlayCss: {},
		containerId: 'simplemodal-container',
		containerCss: {},
		dataId: 'simplemodal-data',
		dataCss: {},
		minHeight: null,
		minWidth: null,
		maxHeight: null,
		maxWidth: null,
		autoResize: false,
		autoPosition: true,
		zIndex: 1000,
		close: true,
		closeHTML: '<a class="modalCloseImg" title="Close"></a>',
		closeClass: 'simplemodal-close',
		escClose: true,
		overlayClose: false,
		position: null,
		persist: false,
		modal: true,
		onOpen: null,
		onShow: null,
		onClose: null
	};

	/*
	 * Main modal object
	 * o = options
	 */
	$.modal.impl = {
		/*
		 * Contains the modal dialog elements and is the object passed
		 * back to the callback (onOpen, onShow, onClose) functions
		 */
		d: {},
		/*
		 * Initialize the modal dialog
		 */
		init: function (data, options) {
			var s = this;

			// don't allow multiple calls
			if (s.d.data) {
				return false;
			}

			// $.boxModel is undefined if checked earlier
			//ieQuirks = $.browser.msie && !$.boxModel;

			// merge defaults and user options
			s.o = $.extend({}, $.modal.defaults, options);

			// keep track of z-index
			s.zIndex = s.o.zIndex;

			// set the onClose callback flag
			s.occb = false;

			// determine how to handle the data based on its type
			if (typeof data === 'object') {
				// convert DOM object to a jQuery object
				data = data instanceof jQuery ? data : $(data);
				s.d.placeholder = false;

				// if the object came from the DOM, keep track of its parent
				if (data.parent().parent().size() > 0) {
					data.before($('<span></span>')
						.attr('id', 'simplemodal-placeholder')
						.css({display: 'none'}));

					s.d.placeholder = true;
					s.display = data.css('display');

					// persist changes? if not, make a clone of the element
					if (!s.o.persist) {
						s.d.orig = data.clone(true);
					}
				}
			}
			else if (typeof data === 'string' || typeof data === 'number') {
				// just insert the data as innerHTML
				data = $('<div></div>').html(data);
			}
			else {
				// unsupported data type!
				alert('SimpleModal Error: Unsupported data type: ' + typeof data);
				return s;
			}

			// create the modal overlay, container and, if necessary, iframe
			s.create(data);
			data = null;

			// display the modal dialog
			s.open();

			// useful for adding events/manipulating data in the modal dialog
			if ($.isFunction(s.o.onShow)) {
				s.o.onShow.apply(s, [s.d]);
			}

			// don't break the chain =)
			return s;
		},
		/*
		 * Create and add the modal overlay and container to the page
		 */
		create: function (data) {
			var s = this;

			// get the window properties
			w = s.getDimensions();

			// add an iframe to prevent select options from bleeding through
			/*if (s.o.modal && ie6) {
				s.d.iframe = $('<iframe src="javascript:false;"></iframe>')
					.css($.extend(s.o.iframeCss, {
						display: 'none',
						opacity: 0,
						position: 'fixed',
						height: w[0],
						width: w[1],
						zIndex: s.o.zIndex,
						top: 0,
						left: 0
					}))
					.appendTo(s.o.appendTo);
			}*/

			// create the overlay
			s.d.overlay = $('<div></div>')
				.attr('id', s.o.overlayId)
				.addClass('simplemodal-overlay')
				.css($.extend(s.o.overlayCss, {
					display: 'none',
					opacity: s.o.opacity / 100,
					height: s.o.modal ? w[0] : 0,
					width: s.o.modal ? w[1] : 0,
					position: 'fixed',
					left: 0,
					top: 0,
					zIndex: s.o.zIndex + 1
				}))
				.appendTo(s.o.appendTo);

			// create the container
			s.d.container = $('<div></div>')
				.attr('id', s.o.containerId)
				.addClass('simplemodal-container')
				.css($.extend(s.o.containerCss, {
					display: 'none',
					position: 'fixed',
					zIndex: s.o.zIndex + 2
				}))
				.append(s.o.close && s.o.closeHTML
					? $(s.o.closeHTML).addClass(s.o.closeClass)
					: '')
				.appendTo(s.o.appendTo);

			s.d.wrap = $('<div></div>')
				.attr('tabIndex', -1)
				.addClass('simplemodal-wrap')
				.css({height: '100%', outline: 0, width: '100%'})
				.appendTo(s.d.container);

			// add styling and attributes to the data
			// append to body to get correct dimensions, then move to wrap
			s.d.data = data
				.attr('id', data.attr('id') || s.o.dataId)
				.addClass('simplemodal-data')
				.css($.extend(s.o.dataCss, {
						display: 'none'
				}))
				.appendTo('body');
			data = null;

			s.setContainerDimensions();
			s.d.data.appendTo(s.d.wrap);

			// fix issues with IE
			/*if (ie6 || ieQuirks) {
				s.fixIE();
			}*/
		},
		/*
		 * Bind events
		 */
		bindEvents: function () {
			var s = this;

			// bind the close event to any element with the closeClass class
			$('.' + s.o.closeClass).bind('click.simplemodal', function (e) {
				e.preventDefault();
				s.close();
			});

			// bind the overlay click to the close function, if enabled
			if (s.o.modal && s.o.close && s.o.overlayClose) {
				s.d.overlay.bind('click.simplemodal', function (e) {
					e.preventDefault();
					s.close();
				});
			}

			// bind keydown events
			$(document).bind('keydown.simplemodal', function (e) {
				if (s.o.modal && e.keyCode === 9) { // TAB
					s.watchTab(e);
				}
				else if ((s.o.close && s.o.escClose) && e.keyCode === 27) { // ESC
					e.preventDefault();
					s.close();
				}
			});

			// update window size
			$(window).bind('resize.simplemodal', function () {
				// redetermine the window width/height
				w = s.getDimensions();

				// reposition the dialog
				s.o.autoResize ? s.setContainerDimensions() : s.o.autoPosition && s.setPosition();

				/*if (ie6 || ieQuirks) {
					s.fixIE();
				}*/
				if (s.o.modal) {
					// update the iframe & overlay
					s.d.iframe && s.d.iframe.css({height: w[0], width: w[1]});
					s.d.overlay.css({height: w[0], width: w[1]});
				}
			});
		},
		/*
		 * Unbind events
		 */
		unbindEvents: function () {
			$('.' + this.o.closeClass).unbind('click.simplemodal');
			$(document).unbind('keydown.simplemodal');
			$(window).unbind('resize.simplemodal');
			this.d.overlay.unbind('click.simplemodal');
		},
		/*
		 * Fix issues in IE6 and IE7 in quirks mode
		 */
		/*fixIE: function () {
			var s = this, p = s.o.position;

			// simulate fixed position - adapted from BlockUI
			$.each([s.d.iframe || null, !s.o.modal ? null : s.d.overlay, s.d.container], function (i, el) {
				if (el) {
					var bch = 'document.body.clientHeight', bcw = 'document.body.clientWidth',
						bsh = 'document.body.scrollHeight', bsl = 'document.body.scrollLeft',
						bst = 'document.body.scrollTop', bsw = 'document.body.scrollWidth',
						ch = 'document.documentElement.clientHeight', cw = 'document.documentElement.clientWidth',
						sl = 'document.documentElement.scrollLeft', st = 'document.documentElement.scrollTop',
						s = el[0].style;

					s.position = 'absolute';
					if (i < 2) {
						s.removeExpression('height');
						s.removeExpression('width');
						s.setExpression('height','' + bsh + ' > ' + bch + ' ? ' + bsh + ' : ' + bch + ' + "px"');
						s.setExpression('width','' + bsw + ' > ' + bcw + ' ? ' + bsw + ' : ' + bcw + ' + "px"');
					}
					else {
						var te, le;
						if (p && p.constructor === Array) {
							var top = p[0]
								? typeof p[0] === 'number' ? p[0].toString() : p[0].replace(/px/, '')
								: el.css('top').replace(/px/, '');
							te = top.indexOf('%') === -1
								? top + ' + (t = ' + st + ' ? ' + st + ' : ' + bst + ') + "px"'
								: parseInt(top.replace(/%/, '')) + ' * ((' + ch + ' || ' + bch + ') / 100) + (t = ' + st + ' ? ' + st + ' : ' + bst + ') + "px"';

							if (p[1]) {
								var left = typeof p[1] === 'number' ? p[1].toString() : p[1].replace(/px/, '');
								le = left.indexOf('%') === -1
									? left + ' + (t = ' + sl + ' ? ' + sl + ' : ' + bsl + ') + "px"'
									: parseInt(left.replace(/%/, '')) + ' * ((' + cw + ' || ' + bcw + ') / 100) + (t = ' + sl + ' ? ' + sl + ' : ' + bsl + ') + "px"';
							}
						}
						else {
							te = '(' + ch + ' || ' + bch + ') / 2 - (this.offsetHeight / 2) + (t = ' + st + ' ? ' + st + ' : ' + bst + ') + "px"';
							le = '(' + cw + ' || ' + bcw + ') / 2 - (this.offsetWidth / 2) + (t = ' + sl + ' ? ' + sl + ' : ' + bsl + ') + "px"';
						}
						s.removeExpression('top');
						s.removeExpression('left');
						s.setExpression('top', te);
						s.setExpression('left', le);
					}
				}
			});
		},
		/*
		 * Place focus on the first or last visible input
		 */
		focus: function (pos) {
			var s = this, p = pos && $.inArray(pos, ['first', 'last']) !== -1 ? pos : 'first';

			// focus on dialog or the first visible/enabled input element
			var input = $(':input:enabled:visible:' + p, s.d.wrap);
			setTimeout(function () {
				input.length > 0 ? input.focus() : s.d.wrap.focus();
			}, 10);
		},
		getDimensions: function () {
			var el = $(window);

			// fix a jQuery/Opera bug with determining the window height
			/*var h = $.browser.opera && $.browser.version > '9.5' && $.fn.jquery < '1.3'
						|| $.browser.opera && $.browser.version < '9.5' && $.fn.jquery > '1.2.6'
				? el[0].innerHeight : el.height();*/

			return [el.height(), el.width()];
		},
		getVal: function (v, d) {
			return v ? (typeof v === 'number' ? v
					: v === 'auto' ? 0
					: v.indexOf('%') > 0 ? ((parseInt(v.replace(/%/, '')) / 100) * (d === 'h' ? w[0] : w[1]))
					: parseInt(v.replace(/px/, '')))
				: null;
		},
		/*
		 * Update the container. Set new dimensions, if provided.
		 * Focus, if enabled. Re-bind events.
		 */
		update: function (height, width) {
			var s = this;

			// prevent update if dialog does not exist
			if (!s.d.data) {
				return false;
			}

			// reset orig values
			s.d.origHeight = s.getVal(height, 'h');
			s.d.origWidth = s.getVal(width, 'w');

			// hide data to prevent screen flicker
			s.d.data.hide();
			height && s.d.container.css('height', height);
			width && s.d.container.css('width', width);
			s.setContainerDimensions();
			s.d.data.show();
			s.o.focus && s.focus();

			// rebind events
			s.unbindEvents();
			s.bindEvents();
		},
		setContainerDimensions: function () {
			var s = this;
				//badIE = ie6 || ie7;

			// get the dimensions for the container and data
			var ch = s.d.origHeight ? s.d.origHeight : s.getVal(badIE ? s.d.container[0].currentStyle['height'] : s.d.container.css('height'), 'h'),
				cw = s.d.origWidth ? s.d.origWidth : s.getVal( s.d.container.css('width'), 'w'),
				dh = s.d.data.outerHeight(true), dw = s.d.data.outerWidth(true);

			s.d.origHeight = s.d.origHeight || ch;
			s.d.origWidth = s.d.origWidth || cw;

			// mxoh = max option height, mxow = max option width
			var mxoh = s.o.maxHeight ? s.getVal(s.o.maxHeight, 'h') : null,
				mxow = s.o.maxWidth ? s.getVal(s.o.maxWidth, 'w') : null,
				mh = mxoh && mxoh < w[0] ? mxoh : w[0],
				mw = mxow && mxow < w[1] ? mxow : w[1];

			// moh = min option height
			var moh = s.o.minHeight ? s.getVal(s.o.minHeight, 'h') : 'auto';
			if (!ch) {
				if (!dh) {ch = moh;}
				else {
					if (dh > mh) {ch = mh;}
					else if (s.o.minHeight && moh !== 'auto' && dh < moh) {ch = moh;}
					else {ch = dh;}
				}
			}
			else {
				ch = s.o.autoResize && ch > mh ? mh : ch < moh ? moh : ch;
			}

			// mow = min option width
			var mow = s.o.minWidth ? s.getVal(s.o.minWidth, 'w') : 'auto';
			if (!cw) {
				if (!dw) {cw = mow;}
				else {
					if (dw > mw) {cw = mw;}
					else if (s.o.minWidth && mow !== 'auto' && dw < mow) {cw = mow;}
					else {cw = dw;}
				}
			}
			else {
				cw = s.o.autoResize && cw > mw ? mw : cw < mow ? mow : cw;
			}

			s.d.container.css({height: ch, width: cw});
			s.d.wrap.css({overflow: (dh > ch || dw > cw) ? 'auto' : 'visible'});
			s.o.autoPosition && s.setPosition();
		},
		setPosition: function () {
			var s = this, top, left,
				hc = (w[0]/2) - (s.d.container.outerHeight(true)/2),
				vc = (w[1]/2) - (s.d.container.outerWidth(true)/2);

			if (s.o.position && Object.prototype.toString.call(s.o.position) === '[object Array]') {
				top = s.o.position[0] || hc;
				left = s.o.position[1] || vc;
			} else {
				top = hc;
				left = vc;
			}
			s.d.container.css({left: left, top: top});
		},
		watchTab: function (e) {
			var s = this;

			if ($(e.target).parents('.simplemodal-container').length > 0) {
				// save the list of inputs
				s.inputs = $(':input:enabled:visible:first, :input:enabled:visible:last', s.d.data[0]);

				// if it's the first or last tabbable element, refocus
				if ((!e.shiftKey && e.target === s.inputs[s.inputs.length -1]) ||
						(e.shiftKey && e.target === s.inputs[0]) ||
						s.inputs.length === 0) {
					e.preventDefault();
					var pos = e.shiftKey ? 'last' : 'first';
					s.focus(pos);
				}
			}
			else {
				// might be necessary when custom onShow callback is used
				e.preventDefault();
				s.focus();
			}
		},
		/*
		 * Open the modal dialog elements
		 * - Note: If you use the onOpen callback, you must "show" the
		 *	        overlay and container elements manually
		 *         (the iframe will be handled by SimpleModal)
		 */
		open: function () {
			var s = this;
			// display the iframe
			s.d.iframe && s.d.iframe.show();

			if ($.isFunction(s.o.onOpen)) {
				// execute the onOpen callback
				s.o.onOpen.apply(s, [s.d]);
			}
			else {
				// display the remaining elements
				s.d.overlay.show();
				s.d.container.show();
				s.d.data.show();
			}

			s.o.focus && s.focus();

			// bind default events
			s.bindEvents();
		},
		/*
		 * Close the modal dialog
		 * - Note: If you use an onClose callback, you must remove the
		 *         overlay, container and iframe elements manually
		 *
		 * @param {boolean} external Indicates whether the call to this
		 *     function was internal or external. If it was external, the
		 *     onClose callback will be ignored
		 */
		close: function () {
			var s = this;

			// prevent close when dialog does not exist
			if (!s.d.data) {
				return false;
			}

			// remove the default events
			s.unbindEvents();

			if ($.isFunction(s.o.onClose) && !s.occb) {
				// set the onClose callback flag
				s.occb = true;

				// execute the onClose callback
				s.o.onClose.apply(s, [s.d]);
			}
			else {
				// if the data came from the DOM, put it back
				if (s.d.placeholder) {
					var ph = $('#simplemodal-placeholder');
					// save changes to the data?
					if (s.o.persist) {
						// insert the (possibly) modified data back into the DOM
						ph.replaceWith(s.d.data.removeClass('simplemodal-data').css('display', s.display));
					}
					else {
						// remove the current and insert the original,
						// unmodified data back into the DOM
						s.d.data.hide().remove();
						ph.replaceWith(s.d.orig);
					}
				}
				else {
					// otherwise, remove it
					s.d.data.hide().remove();
				}

				// remove the remaining elements
				s.d.container.hide().remove();
				s.d.overlay.hide();
				s.d.iframe && s.d.iframe.hide().remove();
				setTimeout(function(){
					// opera work-around
					s.d.overlay.remove();

					// reset the dialog object
					s.d = {};
				}, 10);
			}
		}
	};
})(jQuery);

var process = process || {env: {NODE_ENV: "development"}};
/*
 * Datepicker for Jeditable
 *
 * Copyright (c) 2011 Piotr 'Qertoip' Włodarek
 *
 * Licensed under the MIT license:
 *   http://www.opensource.org/licenses/mit-license.php
 *
 * Depends on jQuery UI Datepicker
 *
 * Project home:
 *   http://github.com/qertoip/jeditable-datepicker
 *
 */

// add :focus selector
jQuery.expr[':'].focus = function( elem ) {
  return elem === document.activeElement && ( elem.type || elem.href );
};

$.datepicker._doKeyDown = _.wrap( $.datepicker._doKeyDown, function(func, event) {
    if ( !this._pressedKeys && event.keyCode == 13 ) {
        // if ENTER is the first keypress in the open datepicker, just close it
        $.datepicker._hideDatepicker();
    } else {
        this._pressedKeys = true;
        return func( event );
    }
});

var _datepickerConfig = {

    /* create input element */
    element: function( settings, original ) {
      var form = $( this ),
          input = $( '<input />' );
          btn = $( "<button type='button'>&nbsp;</button>" );
      input.attr( 'autocomplete','off' );
      form.append( input );
      form.append( btn );
      return input;
    },

    /* attach jquery.ui.datepicker to the input element */
    plugin: function( settings, original ) {
      var form = this,
          input = form.find( "input" );

      // Don't cancel inline editing onblur to allow clicking datepicker
      // this is the jeditable settings, not the datepicker options
      settings.onblur = 'nothing';
      var datepickerSettings = settings.datepicker || {};


      var datepicker = jQuery.extend( {}, datepickerSettings, {
        onSelect: function() {
          // clicking specific day in the calendar should
          // submit the form and close the input field
          form.submit();
          var handler = datepickerSettings.onSelect;
          return handler && handler.apply( this, arguments );
        },

        onClose: function() {
          setTimeout( function() {
            if ( !input.is( ':focus' ) ) {
              // input has NO focus after 150ms which means
              // calendar was closed due to click outside of it
              // so let's close the input field without saving
              original.reset( form );
            } else {
              // input still HAS focus after 150ms which means
              // calendar was closed due to Enter in the input field
              // so lets submit the form and close the input field
              form.submit();
            }
            var handler = datepickerSettings.onClose;
            return handler && handler.apply( this, arguments );

            // the delay is necessary; calendar must be already
            // closed for the above :focus checking to work properly;
            // without a delay the form is submitted in all scenarios, which is wrong
          }, 150 );
        }
      });

      input.datepicker(datepicker);
    }
}
$.editable.addInputType( 'datepicker', _datepickerConfig ); // note that this is usually hidden by i18n_core jquery.jeditable.multi.datepicker.js

$.editable.addInputType( 'datepicker.jquery', _datepickerConfig );

var process = process || {env: {NODE_ENV: "development"}};
/*********************************************************************************
 Copyright 2009-2011 SunGard Higher Education. All Rights Reserved.
 This copyrighted software contains confidential and proprietary information of
 SunGard Higher Education and its subsidiaries. Any use of this software is limited
 solely to SunGard Higher Education licensees, and is further subject to the terms
 and conditions of one or more written license agreements between SunGard Higher
 Education and the licensee in question. SunGard is either a registered trademark or
 trademark of SunGard Data Systems in the U.S.A. and/or other regions and/or countries.
 Banner and Luminis are either registered trademarks or trademarks of SunGard Higher
 Education in the U.S.A. and/or other regions and/or countries.
 **********************************************************************************/

/**
 * @author Jai.Chandramouli
 */
/**
 * Function to convert xml string to an xml document object
 * @param {Object} s
 */
function stringToDoc(s){
    var doc;
    if (window.ActiveXObject) {
        doc = new ActiveXObject('Microsoft.XMLDOM');
        doc.async = 'false';
        doc.loadXML(s);
    }
    else
        doc = (new DOMParser()).parseFromString(s, 'text/xml');
    return (doc && doc.documentElement &&
    doc.documentElement.tagName !=
    'parsererror') ? doc : null;
}

/**
 * Converts a string into object.
 * @param {String} s String to convert to object.
 * @param {Boolean} coerce If true, converts numbers, true/false and undefined values to
 * their true data types. Default is false
 *
 * Parts of code taken from remy sharp's blog and Jquery BBQ plugin.
 * http://remysharp.com/2008/06/24/query-string-to-object-via-regex/
 * http://benalman.com/projects/jquery-bbq-plugin/
 */
function deparam(s, coerce){
    var query = {};
    coerce_types = {
        'true': !0,
        'false': !1,
        'null': null
    };
    s.replace(/\b([^&=]*)=([^&=]*)\b/g, function(m, a, d){
        if (coerce) {
            d = d && !isNaN(d) ? +d // number
 : d === 'undefined' ? undefined // undefined
 : coerce_types[d] !== undefined ? coerce_types[d] // true, false, null
 : d; // string
        }

        if (typeof query[a] != 'undefined') {
            query[a] += ',' + d;
        }
        else {
            query[a] = d;
        }
    });

    return query;
}

/**
 * Function to truncate a string after a given number of characters
 * @param {String} str The string to truncate.
 * @param {Number} len The number of characters after which to attach the truncation indicator.
 * @param {Boolean} truncateWord Flag to check if the string needs to be truncated by words or not.
 */
function truncateText(str, len, truncateWord){
    var TRUNCATION_INDICATOR = "...";
    var originalText = str;

    if (originalText.length > len) {

        /* Truncate the content of the P, then go back to the end of the
         previous word to ensure that we don't truncate in the middle of
         a word */
        originalText = originalText.substring(0, len);
        if (typeof(truncateWord) != 'undefined' && truncateWord == true) {
            originalText = originalText.replace(/\w+$/, '');
        }

        /* Add an ellipses to the end */
        originalText += TRUNCATION_INDICATOR;
    }
    return originalText;
}

/**
 *
 *  URL encode / decode
 *  http://www.webtoolkit.info/
 *
 **/
var Url = {

    // public method for url encoding
    encode: function(string){
        if (typeof string == 'undefined') {
            return '';
        }
        return escape(this._utf8_encode(string));
    },

    // public method for url decoding
	/**
	 * Decodes an UrlEncoded string. Optionally, you can convert '&' to '&amp' by setting the
	 * <code>convertAmpersand</code> value to <code>true</code>
	 * @param {String} string
	 * @param {Boolean} convertAmpersand default <code>true</code>
	 * @param {Boolean} convertHTMLTags default <code>true</code>
	 */
    decode: function(string, doConvertHTML){
        if (typeof string == 'undefined') {
            return '';
        }
		if(typeof doConvertHTML == 'undefined') {
			doConvertHTML = true;
		}

//		var val = '';
		var val = this._utf8_decode(unescape(string));

		if(doConvertHTML) {
			val = escapeHTML(val);
		}
        return val;
    },

    // private method for UTF-8 encoding
    _utf8_encode: function(string){
        string = string.replace(/\r\n/g, "\n");
        var utftext = "";

        for (var n = 0; n < string.length; n++) {

            var c = string.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            }
            else
                if ((c > 127) && (c < 2048)) {
                    utftext += String.fromCharCode((c >> 6) | 192);
                    utftext += String.fromCharCode((c & 63) | 128);
                }
                else {
                    utftext += String.fromCharCode((c >> 12) | 224);
                    utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                    utftext += String.fromCharCode((c & 63) | 128);
                }

        }

        return utftext;
    },

    // private method for UTF-8 decoding
    _utf8_decode: function(utftext){
        var string = "";
        var i = 0;
        var c = c1 = c2 = 0;

        while (i < utftext.length) {

            c = utftext.charCodeAt(i);

            if (c < 128) {
                string += String.fromCharCode(c);
                i++;
            }
            else
                if ((c > 191) && (c < 224)) {
                    c2 = utftext.charCodeAt(i + 1);
                    string += String.fromCharCode(((c & 31) << 6) | (c2 & 63));
                    i += 2;
                }
                else {
                    c2 = utftext.charCodeAt(i + 1);
                    c3 = utftext.charCodeAt(i + 2);
                    string += String.fromCharCode(((c & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
                    i += 3;
                }

        }

        return string;
    }
}

/**
 * Deletes all cookies for this domain
 */
function deleteAllCookies(){
    var cookies = document.cookie.split(";");

    for (var i = 0; i < cookies.length; i++) {
        var cookie = cookies[i];
        var eqPos = cookie.indexOf("=");
        var name = eqPos > -1 ? cookie.substr(0, eqPos) : cookie;
        document.cookie = name + "=;expires=Thu, 01 Jan 1970 00:00:00 GMT";
    }
}
/**
 * Returns the cookie value
 * @param {Object} name
 */
function getCookie(name){
    var cookies = document.cookie.split(';');
    for (var i = 0; i < cookies.length; i++) {
        var cookie = cookies[i];
        var eqPos = cookie.indexOf("=");
        if (eqPos > -1) {
            var data = cookie.split("=");
            if (name == $.trim(data[0])) {
                return data[1];
            }
        }
    }
    return null;
}
/**
 * Sets a cookie
 * @param {Object} name
 * @param {Object} value
 */
function setCookie(name, value){
    var ttl = 7200;

    var date = new Date();
    date.setTime(date.getTime() + (ttl * 60 * 1000));

    var expires = "expires=" + date.toGMTString();

    document.cookie = name + "=" + value + "; " + expires + "; path=/";
}
/**
 * Removes the specified cookie
 * @param {Object} name
 */
function removeCookie(name){
    var expires = "expires=Thu, 01 Jan 1970 00:00:00 GMT";
    document.cookie = name + "=;" + expires + "; path=/";
}
/**
 * @class Allows tracking of the time difference
 * @author jai.chandramouli
 */
var TimeDiff = {
    setStartTime: function(){
        d = new Date();
        time = d.getTime();
    },

    getDiff: function(){
        d = new Date();
        return (d.getTime() - time);
    }
}
/**
 * Returns the X position of an element
 * @param {Object} obj
 */
function findPosX(obj){
    var curleft = 0;
    if (obj.offsetParent)
        while (1) {
            curleft += obj.offsetLeft;
            if (!obj.offsetParent)
                break;
            obj = obj.offsetParent;
        }
    else
        if (obj.x)
            curleft += obj.x;
    return curleft;
}
/**
 * Returns the Y position of an element
 * @param {Object} obj
 */
function findPosY(obj){
    var curtop = 0;
    if (obj.offsetParent)
        while (1) {
            curtop += obj.offsetTop;
            if (!obj.offsetParent)
                break;
            obj = obj.offsetParent;
        }
    else
        if (obj.y)
            curtop += obj.y;
    return curtop;
}
/**
 * Unwraps the jquery object by removing the specified tag
 */
$.fn.unwrap = function(){
    this.parent(':not(body)').each(function(){
        $(this).replaceWith(this.childNodes);
    });
    return this;
};

/**
 * @class StylesheetFormatter toggles the CSS properties to support RTL layouts
 * @author jai.chandramouli
 */
StylesheetFormatter = {
	targetWin:this,
    styleSheet: 0,
    sheets: (document.styleSheets) ? document.styleSheets : undefined,

	getSheets:function() {
		var win = StylesheetFormatter.targetWin;
		return (win.document.styleSheets) ? win.document.styleSheets : undefined
	},
    /**
     * Returns the cssRules object for the given filename or index
     * @param {Object} val
     */
    getCssRules: function(val){
        if (val == 'undefined')
            return this;
        if (this.getSheets() == 'undefined')
            return undefined;

        if (typeof val == 'number') {
            this.styleSheet = val;
            if (val > this.getSheets().length)
                return;

            /*if (jQuery.browser.msie) {
                return this.getSheets()[val].rules;
            }
            else {*/
                return this.getSheets()[val].cssRules;
//            }
        }
        var regex = new RegExp(val);

        var noOfStyleSheets = this.getSheets().length;
        for(var i = 0; i < noOfStyleSheets; i++) {
            if (regex.test(this.getSheets()[i].href)) {
                this.styleSheet = i;
                /*if (jQuery.browser.msie) {
                    return this.getSheets()[i].rules;
                }
                else {
                 */
                    return this.getSheets()[i].cssRules;
 //               }
            }
        }
    },
    /**
     * Returns the contents of the given filename or index
     * @param {Object} val
     */
    getContents: function(val){

        if (val == 'undefined')
            return this;
        if (this.getSheets() == 'undefined')
            return undefined;

        if (typeof val == 'number') {
            this.styleSheet = val;
            if (val > this.getSheets().length)
                return;

            if (typeof this.getSheets()[val].cssText != 'undefined') {
                return this.getSheets()[val].cssText;
            }
        }
        var regex = new RegExp(val);
        for (i in this.getSheets()) {
            if (regex.test(this.getSheets()[i].href)) {
                this.styleSheet = i;
                if (typeof this.getSheets()[i].cssText != 'undefined') {
                    return this.getSheets()[i].cssText;
                }
            }
        }
    },
	/**
	 * Returns the stylesheet object for the given name or index
	 * @param {Object} val File name or index of the stylesheet
	 */
	getStylesheet: function(val){
        if (val == 'undefined')
            return this;
        if (this.getSheets() == 'undefined')
            return undefined;

        if (typeof val == 'number') {
            this.styleSheet = val;
            if (val > this.getSheets().length)
                return;

            if (typeof this.getSheets()[val] != 'undefined') {
                return this.getSheets()[val];
            }
        }
        var regex = new RegExp(val);
        for (i in this.getSheets()) {
            if (regex.test(this.getSheets()[i].href)) {
                this.styleSheet = i;
                if (typeof this.getSheets()[i] != 'undefined') {
                    return this.getSheets()[i];
                }
            }
        }
    },
    /**
     * Toggles the styles of a given stylesheet file or id
     * @param {Object} file Filename or index of the stylesheet
     */
    toggle: function(file){

        var exceptions = ['prefwindow', 'errorwindow', '.browsebutton div', '.browsebutton div div', '.htmlbutton',
		'.menu', '.menu div', '.menusmall div', '.items li a',
		'.defaultbuttonsmall', '.defaultbuttonsmall div', '.defaultbuttonsmall div div',
		'.defaultbutton', '.defaultbutton div', '.defaultbutton div div'];

		// for IE
		/*if (jQuery.browser.msie) {
			var stylesheet = this.getStylesheet(file);
			if (!stylesheet)
				return this;

			var set1 = stylesheet.cssText.split('}');

			for( var k=0; k<set1.length; k++ ) {

				var t = trim(set1[k]);
				if(t == '')
				continue;

				var set2 = t.split('{');
				var selector = trim(set2[0]);
				if ($.inArray(selector.toLowerCase(), exceptions) > -1)
                continue;

				var props = trim(set2[1]);

				if(props.length == 0)
				continue;

				var newCssStr = this.toggleStyle(props);
				set2[1] = newCssStr;

				set1[k] = set2.join('{\n');
			}

			stylesheet.cssText = set1.join('}\n');

			return;
		}
		 */

		// for Mozilla browsers

        var css = this.getCssRules(file);
		if(!css)
		return this;

        var clen = css.length;
        for (var i = 0; i < clen; i++) {

			if(!css[i].style)
			continue;

            var style = css[i].style;
            var selector = css[i].selectorText;

            if ($.inArray(selector.toLowerCase(), exceptions) > -1)
                continue;


			var cssStr = css[i].style.cssText;

			var newCssStr = this.toggleStyle(cssStr);

			/*if(jQuery.browser.safari) {
				newCssStr = newCssStr.replace(/:\s/g, ':')
			}*/

            css[i].style.cssText = newCssStr;
        }
    },

	/**
	 * Toggles the style properties for a given style
	 * @param {Object} str
	 */
	toggleStyle: function(str) {
		var csss = str.split(';');
        var propStr = '';
        var len = csss.length;
        for (var j = 0; j < len; j++) {

            if (trim(csss[j]).length == 0)
                continue;

            var s = trim(csss[j]).split(/\s*:\s*/);

			switch(trim(s[0]).toLowerCase()) {

				case 'float':
					if (trim(s[1]).toLowerCase() == 'left') {
	                    s[1] = 'right';
	                }
	                else if (trim(s[1]).toLowerCase() == 'right') {
	                    s[1] = 'left';
	                }
					break;
				case 'margin':
					var t = trim(s[1]).split(/\s+/);
	                if (t.length == 4) {
	                    var r = t[1];
	                    var l = t[3];
	                    t[1] = l;
	                    t[3] = r;
	                }
	                s[1] = t.join(' ');
					break;
				case 'margin-left':
					s[0] = 'margin-right';
					break;
				case 'margin-right':
					s[0] = 'margin-left';
					break;
				case 'padding':
					var t = trim(s[1]).split(/\s+/);
	                if (t.length == 4) {
	                    var r = t[1];
	                    var l = t[3];
	                    t[1] = l;
	                    t[3] = r;
	                }
	                s[1] = t.join(' ');
					break;
				case 'padding-left':
					s[0] = 'padding-right';
					break;
				case 'padding-right':
					s[0] = 'padding-left';
					break;
				case 'text-align':
					if (trim(s[1]).toLowerCase() == 'left') {
	                    s[1] = 'right';
	                }
	                else if (trim(s[1]).toLowerCase() == 'right') {
	                    s[1] = 'left';
	                }
					break;
				case 'left':
					s[0] = 'right';
					break;
				case 'right':
					s[0] = 'left';
					break;

				/**
				 * border-left
				 */
				case 'border-left':
					s[0] = 'border-right';
					break;
				/**
				 * border-right
				 */
				case 'border-right':
					s[0] = 'border-left';
					break;

				/****************************************
				 * SAFARI SPECIFIC STYLES
				 ****************************************/
				/**
				 * border-left-width
				 */
				case 'border-left-width':
					s[0] = 'border-right-width';
					break;
				/**
				 * border-right-width
				 */
				case 'border-right-width':
					s[0] = 'border-left-width';
					break;

				/**
				 * border-left-style
				 */
				case 'border-left-style':
					s[0] = 'border-right-style';
					break;
				/**
				 * border-right-style
				 */
				case 'border-right-style':
					s[0] = 'border-left-style';
					break;

				/**
				 * border-left-color
				 */
				case 'border-left-color':
					s[0] = 'border-right-color';
					break;
				/**
				 * border-right-color
				 */
				case 'border-right-color':
					s[0] = 'border-left-color';
					break;

				/***************************************/

				default:
					break;
			}

            propStr += s.join(': ') + ';\n';
        }

		return propStr;
	}
};
/**
 * Camelize string
 * @param {String} val
 */
function camelize(val){
    return val.replace(/-(.)/g, function(m, l){
        return l.toUpperCase()
    });
};
/**
 * Trims whitespace
 * @param {String} val
 */
function trim(val){
    var val = val.replace(/^\s+/, '');
    return val.replace(/\s+$/, '');
};

/**
 * Converts ampersand and all HTML tags to entities.
 * Does not re-escape well-formed HTML entities.
 * @param {String} val
 * @test escapeHTML( escapeHTML( '<<&&>>&cent;&#32;&not-entity;' )) == '&lt;&lt;&amp;&amp;&gt;&gt;&cent;&#32;&amp;not-entity;'
 */
function escapeHTML(val) {
	if(val == null || typeof val == 'undefined') {
		return null;
	}
	var val = val.replace(/&(?!#?\w+;)/g, '&amp;');
	val = val.replace(/</g, '&lt;');
	return val.replace(/>/g, '&gt;');
}

/**
 * Redraws the given object
 */
function redrawObject(obj) {
	if(obj) {
		$(obj).css('display', 'none');
		$(obj).css('display', 'block');
	}
}

function getNumber(val) {
    if(val == undefined) {
        return 0;
    }
    return parseInt(val);
}

var FontResizeDetector = {

	checkDiv: '<div id="checkdiv" style="left:1%;line-height:1;font-family:monospace;width:0px;position:absolute;">&nbsp;</div>',

	stop:false,

	initialize: function() {
		$("body").prepend(FontResizeDetector.checkDiv);
		FontResizeDetector.fontCheck(FontResizeDetector.receivechange);
	},

	fontCheck: function(resultHandler) {
        var checkdiv = document.getElementById("checkdiv");
        var height = checkdiv.offsetHeight;
		var width = checkdiv.offsetWidth;
		var left = checkdiv.offsetLeft;
		var right = checkdiv.offsetRight;

        repeat();
        function repeat(){
			// for some reason, offsetHeight doesn't change in FF (except my browser).
			// added a check for 'offsetLeft', which is working on other FF browsers I tested in (but not in mine)
			// a strange case, therefore decided to keep both checks
			//
			if (checkdiv.offsetHeight != height || checkdiv.offsetLeft != left
			|| checkdiv.offsetWidth != width) {
//				alert(checkdiv.offsetLeft +":"+left)
                height = checkdiv.offsetHeight;
				width = checkdiv.offsetWidth;
				left = checkdiv.offsetLeft;
				right = checkdiv.offsetRight;
                resultHandler();
            }
            if (!FontResizeDetector.stop)
                setTimeout(repeat, 500);
        }
	},

	receivechange: function() {
		window.location.reload();
	}

}

var process = process || {env: {NODE_ENV: "development"}};
/*********************************************************************************
 Copyright 2009-2011 SunGard Higher Education. All Rights Reserved.
 This copyrighted software contains confidential and proprietary information of 
 SunGard Higher Education and its subsidiaries. Any use of this software is limited 
 solely to SunGard Higher Education licensees, and is further subject to the terms 
 and conditions of one or more written license agreements between SunGard Higher 
 Education and the licensee in question. SunGard is either a registered trademark or
 trademark of SunGard Data Systems in the U.S.A. and/or other regions and/or countries.
 Banner and Luminis are either registered trademarks or trademarks of SunGard Higher 
 Education in the U.S.A. and/or other regions and/or countries.
 **********************************************************************************/

var SearchConstants = {
	searchStartLength: '1'
};

var CookieConstants = {
	domain: 'sungard.corp'
};

var cssFiles = ["common-controls.css", "common-platform.css", "rtl.css"];


var ApplicationConfig = {
    /**
     * endpoint for application login page
     */
    loginEndpoint: "login/auth",

    /**
     * endpoint for application logout
     */
    logoutEndpoint: "logout"

};
var process = process || {env: {NODE_ENV: "development"}};
/*********************************************************************************
 Copyright 2015-2024 Ellucian Company L.P. and its affiliates.
 **********************************************************************************/
var NonHierarchicalMenu = (function() {
    return {
        /**
         * Dropdown menu
         */
        dropDown: "",
        /**
         * container for menu items
         */
        canvas: "",
        /**
         * HTML for rendering section
         */
        sectionHtml: $("<div class='canvas-section' role='menuitem' aria-haspopup='true'></div>"),
        sectionSpanHtml: $("<span></span>"),
        sectionContentHtml: $("<div class='canvas-section-content'  role='menu'></div>"),
        /**
         * HTML for rendering menu items
         */
        itemHtml: $("<div class='canvas-item' role='menuitem'/></div>"),
        itemSpanHtml: $("<span></span>"),
        callbackPostItemClick: null,
        /**
         * show/hide tools button
         */
        visible: function(flag) {
            if (flag) {
                this.dropDown.show();
            } else {
                this.dropDown.hide();
            }
        },
        /**
         * adds section title to the tools menu
         * @param id
         * @param label
         */
        optionMenuItems: [],
        addSection: function(id, label) {

            if(CommonContext.integratedWithExperience){
                addToOptionMenuItems(id, label, sectionId='', isSection=true, callback=null)
            }

            if (id && label) {
                var titleId=id+"_title";
                var section = this.sectionHtml.clone();
                var sectionSpan = this.sectionSpanHtml.clone();
                var sectionContent = this.sectionContentHtml.clone();
                section.attr("id", titleId);
                sectionContent.attr("id",id);
                sectionContent.attr("aria-label",label);
                sectionContent.attr("xe-section",id);
                section.attr("xe-for", id);
                sectionSpan.text(label);
                section.append(sectionSpan);
                this.canvas.append(section);
                this.canvas.append(sectionContent);
                //Extend Tools menu sections
                if (typeof xe !== 'undefined' && xe.extensionsFound) {
                    var menuSection = _.find(xe.extensions.sections, function (section) {
                        return section.name == id;
                    });
                    if (menuSection) {
                        if(menuSection.exclude) {
                            section.addClass('xe-exclude');
                            sectionContent.addClass('xe-exclude');
                        }
                    }
                }
                return section;
            }
        },
        /**
         * removes the specified section
         * @param id
         */
        removeSection: function(id) {
            if(CommonContext.integratedWithExperience){
                removeOptionMenuItems(id, issection=true);
            }
            this.canvas.parent().find('#' + id).remove();
        },
        /**
         * removes the specified Item
         * @param id
         */
        removeItem: function(id) {
            if(CommonContext.integratedWithExperience){
                removeOptionMenuItems(id, issection=false);
            }
            this.canvas.parent().find('#' + id).remove();
        },
        /** readOnly/make Item Editable in a menu
         * * @param id
         */
        readOnlyItem: function(itemId) {
            var obj = this.canvas;
            toggleReadOnlyStatus(obj, itemId, true);
        },
        makeItemEditable: function(itemId) {
            var obj = this.canvas;
            toggleReadOnlyStatus(obj, itemId, false);
        },
        /** hide/visible a menu item
         * * @param id
         */
        hideItem: function(itemId) {
            var obj = this.canvas;
            toggleVisibleStatus(obj, itemId, false);
        },
        makeItemVisible: function(itemId) {
            toggleVisibleStatus(obj, itemId, true);
        },
        /**
         * adds a menu item to the specified section and also attaches a callback, if provided
         * @param id
         * @param label
         * @param sectionId
         * @param callback
         */
        addItem: function(id, label, sectionId, callback, readonly) {

            if(CommonContext.integratedWithExperience){
                addToOptionMenuItems(id, label, sectionId, isSection=false, callback);
            }

            var KEY_CODE = {
                ENTER: 13,
                ESC: 27,
                LEFT_ARROW: 37,
                UP_ARROW: 38,
                RIGHT_ARROW: 39,
                DOWN_ARROW: 40,
                SPACE: 32,
                TAB: 9
            };
            var item = this.itemHtml.clone();
            var itemSpan = this.itemSpanHtml.clone();
            var handlerPostItemClick = this.callbackPostItemClick;
            if (id && label) {
                item.attr('id', id);
                item.attr('xe-field',id);
                itemSpan.text(label);
                item.attr('tabindex', 0);
                item.addClass('pointer');
                item.on('click', _fnMouseEventsHandlerForMenu);
                item.on('keydown', _fnKeyBoardEventsHandlerForMenu);
                item.append(itemSpan);
                if (readonly == true) {
                    item.attr('tabindex', -1);
                    item.attr("readonly", readonly);
                }
                if (sectionId) {
                    var sectionContent = this.canvas.find('#' + sectionId);
                    if (sectionContent.find('.canvas-item').length == 0) {
                        sectionContent.attr("aria-activedescendant", id);
                    }
                    sectionContent.append(item);
                } else
                    this.canvas.append(item);
                //Extend Tools menu item
                if (typeof xe !== 'undefined' && xe.extensionsFound) {
                    var menuSectionExtns = _.find(xe.extensions.sections, function (section) {
                        if(section.name === sectionId || section.name === 'extzToolList') {
                            return section.name;
                        }
                    });
                    if (menuSectionExtns && 'fields' in menuSectionExtns) {
                        menuSectionExtns.fields.forEach(function (field, key) {
                            if (field.name === id) {
                                if (field.exclude) {
                                    item.addClass('xe-exclude')
                                }
                            }
                        });
                    }
                }
                return item;
            }

            function _fnMouseEventsHandlerForMenu(e) {
                _fnAction(e);
            }

            function isTabNavigation(elem) {
                var isMenuStyle = $(elem).closest('.non-hierarchical-menu').find('.menu-icon:visible');
                if (isMenuStyle.length > 0) {
                    return false
                } else {
                    return true;
                }
            }

            function _fnKeyBoardEventsHandlerForMenu(e) {
                var currentTarget = e.target;
                var container = currentTarget.offsetParent;
                var code = (e.keyCode ? e.keyCode : e.which);
                switch (code) {
                    case KEY_CODE.DOWN_ARROW:
                        var nextElem = getNextTabbableElement($(currentTarget), $(container));
                        if (!isTabNavigation(currentTarget) && nextElem.length ) {
                            nextElem.focus();
                            e.preventDefault();
                        }
                        break;
                    case KEY_CODE.UP_ARROW:
                        var prevElem = getPreviousTabbableElement($(currentTarget), $(container));
                        if (!isTabNavigation(currentTarget) && prevElem.length) {
                            prevElem.focus();
                            e.preventDefault();
                        }
                        break;
                    case KEY_CODE.ENTER:
                        _fnAction(e);
                        break;
                    case KEY_CODE.SPACE:
                        _fnAction(e);
                        break;
                    case KEY_CODE.ESC:
                        $(currentTarget).closest('.non-hierarchical-menu').find('.menu-icon').click();
                        break;
                    case KEY_CODE.TAB:
                        if (!isTabNavigation(currentTarget)) {
                            e.preventDefault();
                        }
                        break;
                }
                if (code === KEY_CODE.TAB) {
                    return true;
                } else {
                    return false;
                }
            }

            function _fnAction(e) {
                var readonlyAttr = item.attr("readonly");
                if (readonlyAttr == undefined || readonlyAttr == false) {
                    if (callback)
                        callback(e);
                    handlerPostItemClick.call();
                }
            }
        },
        fnSetLastFocus: function() {
            window.lastFocus = $(document.activeElement);
        },
        fnSetFocusOnCloseMenuItems: function() {
            if (window.lastFocus != null) {
                $(window.lastFocus).focus();
            }
        },
        toogleToolsOptionById: function (id) {
            this.optionMenuItems.map((item) => {
                if (item.isSection) {
                    item.subOptionMenuItem.map((subMenuItem) => {
                        if (subMenuItem.id === id) {
                            return subMenuItem.callback();
                        }
                    }
                    );
                } else {
                    if (item.id === id) {
                        return item.callback();
                    }
                }
            }
            );
        }
    };

    function addToOptionMenuItems(id, label, sectionId, isSection, callback) {

        var optionMenuItem = {
            id: id,
            label: label,
            isSection: isSection,
            callback: callback,
            subOptionMenuItem: []
        };
        if(sectionId) {
            NonHierarchicalMenu.optionMenuItems.map( item => {
                if(item.id === sectionId){
                    item.subOptionMenuItem.push(optionMenuItem);
                }
            });
        }
        else {
            NonHierarchicalMenu.optionMenuItems.push(optionMenuItem);
        }
        Message.setToolsMenu(NonHierarchicalMenu.optionMenuItems);
    }

    function removeOptionMenuItems(id, section){
        const updatedOptionMenuItems = NonHierarchicalMenu.optionMenuItems.filter((item) => {
            if (section) {
                return item.id !== id;
            } else {
                if (item.isSection) {
                    item.subOptionMenuItem = item.subOptionMenuItem.filter((subMenuItem) => subMenuItem.id !== id);
                    return true;
                } else {
                    return item.id !== id;
                }
            }
        });
        NonHierarchicalMenu.optionMenuItems = updatedOptionMenuItems;
        Message.setToolsMenu(NonHierarchicalMenu.optionMenuItems);
    }

    function toggleReadOnlyStatus(obj, id, status) {
        if (status == true) {
            obj.find('#' + id).attr('tabindex', -1);
            obj.find('#' + id).attr("readonly", true).css({
                "color": "#d6d6d6",
                "cursor": "unset"
            });
        }
        if (status == false) {
            obj.find('#' + id).attr('tabindex', 0);
            obj.find('#' + id).attr("readonly", false).css({
                "color": "#41566f",
                "cursor": "pointer"
            });
        }
    };

    function toggleVisibleStatus(obj, id, status) {
        if (status == false) {
            obj.parent().find('#' + id).css({
                "display": "none"
            });
        }
        if (status == true) {
            obj.parent().find('#' + id).css({
                "display": "block"
            });
        }
    };
})();
var ProfileMenu = Object.create(NonHierarchicalMenu);
ProfileMenu.initialize = function() {
    ControlBar.node.find('#userDiv').append("<div id='userCanvas'>" + "<div id='userMenu' role='menu'><div id='userList' class='user-list'></div>" + "</div>" + "</div>");
    this.dropDown = ControlBar.node.find("#userCanvas");
    this.canvas = ControlBar.node.find('#userList');
    this.callbackPostItemClick = toggleProfileMenu;
    ControlBar.node.find('#user').bind("click", toggleProfileMenu);
};
ProfileMenu.closeMenu = function() {
    if (!$('#userCanvas').is(':hidden')) {
        $('#userCanvas').removeClass('user-active');
        $('#user').removeClass('user-expanded');
        if (window.lastFocus != null) {
            $(window.lastFocus).focus();
        }
    }
};
var ToolsMenu = Object.create(NonHierarchicalMenu);
ToolsMenu.initialize = function() {
    ControlBar.node.find('#toolsButton').attr("title", ResourceManager.getString("areas_label_tools_shortcut"));
    ControlBar.node.find('#toolsButton').attr("xe-section",'extzToolIcon');
    ControlBar.node.find('#toolsButton').find('div div a').text(ResourceManager.getString("areas_label_tools"));
    ControlBar.node.find('#toolsButton').append("<div id='toolsCanvas'>" + "<div id='toolsMenu' role='menu'><div id='toolsList' class='tools-list' xe-section='extzToolList'></div>" + "</div>" + "</div>");
    this.dropDown = ControlBar.node.find("#toolsCanvas");
    this.canvas = ControlBar.node.find('#toolsList');
    this.callbackPostItemClick = toggleToolsMenu;
    ControlBar.node.find('#tools').bind("click", toggleToolsMenu);

    try {
        if (angular.module("xe-ui-components")) {
            var userPreferenceDiv = document.getElementById('userPreferenceDiv');
            if (null != userPreferenceDiv && undefined != userPreferenceDiv && window.Application.isUserAuthenticated()) {
                userPreferenceDiv.setAttribute("ng-controller","PopupCtrl");
                ToolsMenu.addItem(
                    "Preference",
                    $.i18n.prop("userpreference.popup.language.heading"),
                    "",
                    userPreferencePopup
                );
            }
        }
    } catch(e){
        console.log('Language Setting menu item is not added because xe-ui-components Module is not defined.');
    }

    try{
        if(angular.module("aboutModal")){
            if (window.Application.isUserAuthenticated()) {
                ToolsMenu.addItem(
                    "about",
                    $.i18n.prop("aurora.areas_label_about_title"),
                    "",
                    aboutDialogPopUp
                );
            }

        }
    } catch(e){
        console.log('Not adding About menu item because aboutModal Module is not found in resource.');
    }

    try {
        if (angular.module("keyboardshortcut") && angular.module("xe-ui-components")) {
            var shortcutDialogDiv = document.getElementById('shortcut_module_added');
            if (null != shortcutDialogDiv && undefined != shortcutDialogDiv) {
                //shortcutOverlay();
                ToolsMenu.addItem(
                    "keyboard",
                    $.i18n.prop("aurora.toolsmenu.keyboard.shortcuts.heading"),
                    "",
                    shortcutOverlayAddition
                );
            }
        }
    } catch (e) {
        console.log('Not adding Keyboard shortcut  menu item because keyboardshortcut Module is not found in resource.');
        if( document.getElementById('shortcut_module_added')){
            document.getElementById('shortcut_module_added').style.display = 'none';
        }
    }
    try {
        var privacySettingMenu = $($('#privacySetting_title'), $('#toolsList'));
        if (privacySettingMenu.length === 0) {
            ToolsMenu.addSection("privacySetting", $.i18n.prop("userpreference.privacy.setting.section"));
        }
    } catch (e) {
        console.log('Privacy Setting menu section is not loaded.');
    }

    var enhanceExp;
    if (window.Application.isUserAuthenticated()) {
        try {
            window['privacySettingSectionRequired']=false;
            enhanceExp = document.getElementById('enhanceUserExpDiv');
            if (null != enhanceExp && undefined != enhanceExp) {
                enhanceExp.setAttribute("ng-controller", "dataSharingModal");
                ToolsMenu.addItem(
                    "EnhanceExp",
                    $.i18n.prop("userpreference.popup.enhanceExp"),
                    "privacySetting",
                    enhanceUserExperiencePopup
                );
                setTimeout(function () {
                    angular.element(document.getElementById('#xePopupClose')).remove();
                });
            }
        } catch (e) {
            console.log('Data Sharing menu item is not added because xe-ui-components Module is not defined.');
        }
    }

    var linkedUrl = document.getElementsByName("privacyPolicyUrl")[0].content;
    if (linkedUrl) {
        window['privacySettingSectionRequired']=true;
        ToolsMenu.addItem(
            "privacyPolicy",
            $.i18n.prop("aurora.privacypolicy_label"),
            "privacySetting",
            function privacyPolicylinkUrl() {
                var Uri = document.getElementsByName("privacyPolicyUrl")[0].content
                window.open(Uri, '_blank');
            }
        );
    }

    if(!linkedUrl && enhanceExp === undefined){
        ToolsMenu.removeSection('privacySetting_title');
    }
};

function aboutDialogPopUp () {

    var dialogDiv = document.getElementById('dialogAppDiv');
    dialogDiv.setAttribute("ng-app","dialogApp");
    dialogDiv.setAttribute("ng-controller","ModalCtrl");
    var scope = angular.element(document.getElementById('dialogAppDiv')).scope();
    if(!scope){
        dialogDiv.innerHTML = "<xe-about-modal show='modalShown' api='aboutApi' focusbackelement='tools'></xe-about-modal>";
        angular.element(document.getElementById('dialogAppDiv')).ready(function() {
            angular.bootstrap(document.getElementById('dialogAppDiv'), ['dialogApp']);
        });
        scope = angular.element(document.getElementById('dialogAppDiv')).scope();
    }
    if(scope)
    {
        scope.$apply(function(){
            scope.toggleModal();
        });
    }
}


function shortcutOverlayAddition(){
    shortcutOverlay();
    var dialogDiv = document.getElementById('shortcut_module_added');
   /* dialogDiv.setAttribute("ng-app","keyboardshortcut");
    dialogDiv.setAttribute("ng-controller","shortcutModal");*/
    var scope = angular.element(document.getElementById('shortcut_module_added')).scope();
    if(!scope){
        angular.element(document.getElementById('shortcut_module_added')).ready(function() {
            angular.bootstrap(document.getElementById('shortcut_module_added'), ['keyboardshortcut']);
        });
        scope = angular.element(document.getElementById('shortcut_module_added')).scope();
    }
    if(scope) {
        scope.$apply(function () {
            scope.toggleshortcut();
        });
    }
}

function shortcutOverlay(){
    var dialogDiv = document.getElementById('shortcut_module_added');
    dialogDiv.setAttribute("ng-app","keyboardshortcut");
    dialogDiv.setAttribute("ng-controller","shortcutModal");
}

function userPreferencePopup() {
    var scope = angular.element(document.getElementById('userPreferenceDiv')).scope();
    if(!scope){
        angular.element(document.getElementById('userPreferenceDiv')).ready(function() {
            angular.bootstrap(document.getElementById('userPreferenceDiv'), ['userPreference']);
        });
        scope = angular.element(document.getElementById('userPreferenceDiv')).scope();
    }
    if(scope) {
        scope.showuserPreferencDiv = true;
        scope.$apply(function () {
            scope.toggleLanguageSettingsPopup();
        });
    }
}

function enhanceUserExperiencePopup() {
    var scope = angular.element(document.getElementById('enhanceUserExpDiv')).scope();
    if(!scope){
        angular.element(document.getElementById('enhanceUserExpDiv')).ready(function() {
            angular.bootstrap(document.getElementById('enhanceUserExpDiv'), ['dataSharing']);
        });
        scope = angular.element(document.getElementById('enhanceUserExpDiv')).scope();
    }
    if(scope) {
        scope.disableNoThanksButton = $("meta[name='isUsageTrackingEnabled']").attr("content") === 'N' ? true : false;
        scope.disableAcceptButton = $("meta[name='isUsageTrackingEnabled']").attr("content") === 'Y' ? true : false;
        scope.showEnhanceUserExpDiv = true;
        scope.$apply(function () {
            scope.toggleEnhanceUserExpPopup();
        });
    }
}

ToolsMenu.closeMenu = function() {
    if (!$('#toolsCanvas').is(':hidden')) {
        $('#toolsCanvas').removeClass('tools-active');
        $('#toolsButton').removeClass('tools-expanded');
        if (window.lastFocus != null) {
            $(window.lastFocus).focus();
        }
    }
};
var SignInMenu = Object.create(NonHierarchicalMenu);
SignInMenu.initialize = function() {
    var signInDom = $("<div id='signInButton' class='non-hierarchical-menu'  ><a class='signIn-mobile menu-icon' aria-expanded='false' href='javascript:void(0);' ></a>" + "<div id='signInCanvas'><div id='signInMenu'><div id='signList' class='signIn-list'>" + "</div></div></div>" + "</div>");
    ControlBar.append(signInDom);
    this.dropDown = ControlBar.node.find("#signInCanvas");
    this.canvas = ControlBar.node.find('#signList');
    this.callbackPostItemClick = toggleSignMenu;
    ControlBar.node.find('.signIn-mobile').click(function() {
        if ($('.signIn-list div').length > 1) {
            toggleSignMenu();
        } else {
            signIn();
        }
        return false;
    });
};
SignInMenu.closeMenu = function() {
    if (!$('#signInCanvas').is(':hidden')) {
        $('#signInCanvas').removeClass('signIn-active');
        $('.signIn-mobile').removeClass('signIn-expanded');
        if (window.lastFocus != null) {
            $(window.lastFocus).focus();
        }
    }
};

var process = process || {env: {NODE_ENV: "development"}};
/*********************************************************************************
 Copyright 2009-2024 Ellucian Company L.P. and its affiliates.
 **********************************************************************************/

/**
 * @class UI display component representing a Button.
 *
 * @constructor
 *
 * @param id {Integer} The id for the component.
 * @param label {String} The label displayed to the user by the component.
 * @param callback {Function} The method that is invoked when the button's click event is triggered.
 *
 * @author jmiller
 */
function Button(id, label, callback, type) {
    if (typeof(type) == "undefined") {
        type = "";
    }

    var b = $("<span class='primaryButton2 " + type + "' id='" + id + "'>"
        + "<span class='primaryButtonComponent primaryButtonLeft" + type + "'></span>"
        + "<span class='primaryButtonComponent primaryButtonMiddle" + type + "' id='" + id + "Text'>" + ResourceManager.getString(label) + "</span>"
        + "<span class='primaryButtonComponent primaryButtonRight" + type + "'></span>"
        + "</span>");

    if (typeof(callback) == "function") {
        b.click(callback);
    }

    b.hover(
        function() {

            $(this).find('.primaryButtonLeft').addClass("primaryButtonLeftHover");
            $(this).find('.primaryButtonMiddle').addClass("primaryButtonMiddleHover");
            $(this).find('.primaryButtonRight').addClass("primaryButtonRightHover");

        }).mouseleave(function() {

            $(this).find('.primaryButtonLeft').removeClass("primaryButtonLeftHover");
            $(this).find('.primaryButtonMiddle').removeClass("primaryButtonMiddleHover");
            $(this).find('.primaryButtonRight').removeClass("primaryButtonRightHover");
        });

    return b;
}

var AuroraHeader =  {
    createSkeleton: function () {
        var header ="<header id='header-main-section' class='aurora-theme' role='banner'>";

        if(CommonContext.integratedWithExperience) {
            header ="<header id='header-main-section' class='aurora-theme header-main-section-hidden' role='banner'>";
        }

        header=header+ "<div id='header-main-section-west-part'>"
            + "<div id='bannerMenuDiv' tabindex='-1' xe-section='bannerMenuDiv'><a id='bannerMenu' href='javascript:void(0);' alt='Banner Menu' role='menu'></a><div id='menuContainer'></div></div>"
            + "<div id='brandingDiv' tabindex='-1'><a id='branding' href='javascript:void(0);' class='institutionalBranding'></a></div>"
            + "</header>";

        return $(header);
    },

    fillWestPart: function () {
        $('#bannerMenuDiv').attr("title",ResourceManager.getString("areas_label_browse_title"));
        $("#bannerMenu").attr("aria-label",ResourceManager.getString("areas_label_browse_description"));
        //Add href to branding
        var path = $('meta[name=menuBaseURL]').attr('content') || document.location.href;
        var origin = document.location.origin || (document.location.protocol + '//' + document.location.host);
        var appUrl = path.substring(0,path.indexOf('/ssb'));

        if (!CommonContext.hideBannerMenu) {
            appUrl = appUrl + "/";
        }else{
            /*
              Add globalGuestProxyBaseURL if this is configured
              If globalGuestProxyBaseURL is not configured, then return to the root
              This will be only configured through the Proxy Access URL
             */
            if ($('meta[name=globalGuestProxyBaseURL]').attr("content") != undefined
                && $('meta[name=globalGuestProxyBaseURL]').attr("content") !== null
                && $('meta[name=globalGuestProxyBaseURL]').attr("content").length != 0) {

                appUrl = $('meta[name=globalGuestProxyBaseURL]').attr("content") + "/"

                $("#branding").on('click', function() {
                    jQuery.ajax({
                        url: "proxy/onReturn",
                        data: [],
                        async: false
                    });
                });

            }else{
                appUrl = appUrl + "/";
            }
        }

        $('#branding').attr('href', appUrl);
        $('#brandingDiv').attr("title", ResourceManager.getString("areas_label_home_title"));
        $('#branding').attr("aria-label", ResourceManager.getString("areas_label_home_description"));

    },

    placeEastPart: function (options) {
        var eastPartElement =  $("<div id='header-main-section-east-part'>"
            + "</div>");

        $('#header-main-section').append(eastPartElement.append(UserControls( options )));
        var notificationDiv = "<div id='notification-center' title='"+ResourceManager.getString("notification_title")+"'></div>";
        eastPartElement.append(notificationDiv);
    },

    addNavigationControls: function () {
        BreadCrumbAndPageTitle.create();
        setupBannerMenu();
        if (CommonContext.hideBannerMenu){
            $('#menuContainer').removeClass('show').addClass('hide');
            $('#menu').removeClass('show').addClass('hide');
            $('#bannerMenu').removeClass('show').addClass('hide');

            //disable tools button
            $('#Preference').removeClass('show').addClass('hide');

        }else{
            //enable tools button if it was disabled in a proxy mode
            if ($('#menuContainer').hasClass('hide')) { $('#menuContainer').removeClass('hide').addClass('show')};
            if ($('#menu').hasClass('hide')) { $('#menu').removeClass('hide').addClass('show')};
            if ($('#bannerMenu').hasClass('hide')) { $('#bannerMenu').removeClass('hide').addClass('show')};
            if ($('#Preference').hasClass('hide')) { $('#Preference').removeClass('hide').addClass('show')};
        }


        if($('meta[name=headerAttributes]').attr("content")){
            var headerAttributes = JSON.parse($('meta[name=headerAttributes]').attr("content"));
            BreadCrumbAndPageTitle.draw(headerAttributes);
        }

        var shortcuts = [
            'alt+q', function() {
                // click the first link in the home div.
                // just $().click() doesn't work as the element is not an input
                $('#branding')[0].click();
            },
            'alt+m', toggleBrowseMenu,
            'ctrl+shift+F', toggleSignInAndSignOut,
            'alt+n', toggleNotificationCenter,
            'alt+l',toggleToolsMenu,
            'alt+p',toggleProfileMenu
        ];
        key && key.bind.apply( window, shortcuts );
    },

    addBodyClickListenerToCloseAllMenus: function() {
        $('body').on('click', function (e) {
            closeAllMenus(e.target);
        });
    }

};

function setupBannerMenu() {
    $('#bannerMenu').on('click', function (e) {
        toggleBrowseMenu();
        return false;
    });
}

function toggleNotificationCenter(){
    window.notificationCenter.toggle();
}

function closeAllMenus(target) {
    scrollableList.closeMenu(target);
    ToolsMenu.closeMenu();
    SignInMenu.closeMenu();
    ProfileMenu.closeMenu();
}


function scrollSelectedItemIntoView() {
    $('.navList').each(function(e) {
        var container = $(this);
        $(this).children().each(function(e) {
            if ($(this).hasClass('selectedListItem')) {
                $(this).get(0).scrollIntoView(false);
            } else if ($(this).hasClass('selectedListPage')) {
                $(this).get(0).scrollIntoView(false);
            }
        });
    });
}
function toggleBrowseMenu() {
    ToolsMenu.closeMenu();
    SignInMenu.closeMenu();
    ProfileMenu.closeMenu();
    if ($('#menu').hasClass('show')) {
        $('#menu').addClass('hide').removeClass('show');
        $('#banerMenu').removeClass('show');
        $('#menuContainer').addClass('hide').removeClass('show');
        scrollableList.getLastFocusedElement().focus();
    } else {
        scrollableList.setLastFocusedElement(document.activeElement);
        $('#menu').addClass('show').removeClass('hide');
        $('#menuContainer').removeClass('hide').addClass('show');
        $('#menuList').find('li:first').focus();
        $('#bannerMenu').addClass('show');
    }
}

function toggleSignMenu() {
    scrollableList.closeMenu();
    ToolsMenu.closeMenu();
    if ($('#signInCanvas').is(':hidden')) {
        $('#signInCanvas').addClass('signIn-active');
        $('.signIn-mobile').addClass('signIn-expanded');
        $('#signList > .canvas-item:visible:first').focus();
    } else {
        $('#signInCanvas').removeClass('signIn-active');
        $('.signIn-mobile').removeClass('signIn-expanded');
        $('.signIn-mobile').focus();
    }
}

function toggleProfileMenu() {
    scrollableList.closeMenu();
    ToolsMenu.closeMenu();
    if ($('#userCanvas').is(':hidden')) {
        $('#userCanvas').addClass('user-active');
        $('#user').addClass('user-expanded');
        $('#userList > .canvas-item:visible:first').focus();
    } else {
        $('#userCanvas').removeClass('user-active');
        $('#user').removeClass('user-expanded');
        $('#user').focus();
    }
    return false;
}

function toggleToolsMenu() {
    scrollableList.closeMenu();
    SignInMenu.closeMenu();
    ProfileMenu.closeMenu();
    if ($('#toolsCanvas').is(':hidden')) {
        $('#toolsCanvas').addClass('tools-active');
        $('#toolsButton').addClass('tools-expanded');
        if($('#toolsList > .canvas-item:first').is(":visible")){
            $('#toolsList > .canvas-item:visible:first').focus();
        }else{
            $('#toolsList > .canvas-section-content .canvas-item:visible:first').focus();
        }
    } else {
        //Using timeout because after selecting menu item from tool menu, tool menu drop down was remains open.
        // jQuery function removeClass is not working correctly without timeout for Firefox.
        setTimeout(function(){
            $("#toolsCanvas").removeClass("tools-active");
            $('#toolsButton').removeClass('tools-expanded');
        });
        $('#tools').focus();
    }
    return false;
}


function signIn(){
    window.location=$('meta[name=loginEndpoint]').attr("content") || ApplicationConfig.loginEndpoint;
}

function signOut(){
    window.location = $('meta[name=logoutEndpoint]').attr("content") || ApplicationConfig.logoutEndpoint;
}

function toggleSignInAndSignOut() {
    if(CommonContext.hideSSBHeaderComps == 'true' && CommonContext.iframe) {
        Message.sendSignOutActionMessage();
    } else{
        if ($('#signInButton').length > 0) {
            signIn();
        } else {
            signOut();
        }
    }
}

function UserControls( options ) {

    ControlBar.initialize();
    if (CommonContext.mepHomeContext) {
        MepDesciption.populateMepDescForOthers();
    }
    var toolsDiv = $("<div id='toolsButton' class='non-hierarchical-menu'><a href='javascript:void(0);' id='tools' aria-expanded='false' role='menu' class='menu-icon'></a></div>");
    ControlBar.append(toolsDiv);
    ToolsMenu.initialize();

    ControlBar.node.find("#toolsButton").attr('title',ResourceManager.getString("areas_label_tools_title"));
    ControlBar.node.find("#tools").attr('aria-label', ResourceManager.getString("areas_label_tools_description"));
    if (CommonContext.mepHomeContext) {
        MepDesciption.populateMepDescForMobile();
    }
    if(!((CommonContext.hideSSBHeaderComps=='true' || CommonContext.openSSBInExperience == 'true') && CommonContext.iframe)) {

        // add user context
        if (CommonContext.user == null) {

            SignInMenu.initialize();
            SignInMenu.addItem("signIn", ResourceManager.getString("userdetails_signin"), undefined,
                function () {
                    signIn();
                }
            );
            ControlBar.addAccessibilityInfo('#signIn', ResourceManager.getString("userdetails_signin_description"), ResourceManager.getString("userdetails_signin_title"));
            ControlBar.node.find('#signIn').attr('role', 'link');
            var guestSignInLink;
            if ("true" == $('meta[name=guestLoginEnabled]').attr("content")) {
                SignInMenu.addItem("guestSignIn", ResourceManager.getString("guestuserdetails_signin"), undefined,
                    function () {
                        window.location = ApplicationConfig.loginEndpoint;
                    }
                );
                ControlBar.node.find('#guestSignIn').attr('role', 'link');
            }

        } else {
            var userDiv = $("<div id='userDiv' class='non-hierarchical-menu'><a id='user' aria-expanded='false' class='menu-icon' href='javascript:void(0);'></a></div>");
            ControlBar.append(userDiv);
            UserName.populateUserNameForOthers();
            ProfileMenu.initialize();
            UserName.populateUserNameForMobile();
            ProfileMenu.addItem("signOut", ResourceManager.getString("userdetails_signout"), undefined,
                function () {
                    signOut();
                }
            );
            ControlBar.node.find("#userDiv").attr('title', ResourceManager.getString("userdetails_profile_title"));
            ControlBar.node.find("#user").attr('aria-label', ResourceManager.getString("userdetails_profile_description"));
        }

    } else {
        initializeMessagingAPI();
    }

    if (options.showHelp && typeof(options.showHelp) == 'boolean' && options.showHelp || options.showHelp == null) {
        var helpLink = $("<a id='helpText' class='helpText pointer'>" + ResourceManager.getString("userdetails_help") + "</a>");
        ControlBar.append(helpLink);

        helpLink.click(function() {
            if (CommonContext.currentPage == "mainPage" || CommonContext.currentPage == null) {
                productName = "main";
            }

            var h = Application.getApplicationPath() + "/help/url";

            $.getJSON(h, function(data) {
                $.each(data, function(key, val) {
                    var url = val.url + "/bannerOH?productName=" + productName + "&formName=" + formName + "&studentInd=Y&alumniInd=Y&arsysInd=Y&financeInd=Y&finaidInd=Y&payrollInd=Y&bxsInd=N&generalInd=Y";
                    window.open(encodeURI(url), "", "height=600,width=900,modal=yes,alwaysRaised=yes");
                });
            });

        });
    }

    return ControlBar.node;
}


/**
 * @class value object that represents a footer application.
 * @constructor
 *
 * @param {String} appid The id for the footer application.
 * @param {String} className The class name for the footer application.
 * @param {String} displayUI The HTML representation for the display component.
 *
 * @author jmiller
 */
function FooterApplicationValueObject(appid, className, displayUI) {
    this.appid = appid;
    this.className = className;
    this.displayUI = displayUI;
}

/**
 * @class value object that represents a footerAppContainer
 * @constructor
 *
 * @param {int} index The index at which the footer div to be injected
 * @param {String} appId The appId of the managed application.
 * @param {String} html The html content to be injected by the managed application
 *
 * @author prashanth
 */
function footerAppDiv(index, appId, html) {
    this.index = index;
    this.appId = appId;
    this.html = html;
}

/**
 * @class Singleton class that provides the interface for handling applications
 * that display within the footer bar.
 *
 * @author jmiller
 */
var Footer = {
    /**
     * The list of loaded FooterApplicationValueObject objects.
     * @type Array
     */
    apps: [],
    /**
     * @private
     *
     * ID marker for the display component of a FooterApplicationValueObject
     * @type String
     */
    uiMarker: "-ui",
    /**
     * @private
     * The list of loaded FooterApplicationValueObject objects.
     * @type Array
     */
    appContainers: [],
    /**
     * @private
     *
     * The HTML UI elements.
     */
    displayUI: "<footer class='banner-footer'  role='contentinfo'>"
       +"<div>&copy; <span class='year'></span> <span class='companyName'></span> <span class='otherInfo'></span></div>"
        +"</footer>",
    /**
     * @private
     *
     * Initialization method.
     */
    initialize: function() {
        var that = this;
        $(function() {
            that.displayAndHideFooter();
        });
    },

    /** method to display and Hide footer**/

    displayAndHideFooter: function () {
        this.displayFooter();
        this.hideCopyrightNowOrAfterDelay();
    },

    /** method to display footer**/

    displayFooter: function () {
            $('body').append(Footer.displayUI);
            var startyear = $.i18n.prop("default.copyright.startyear");
            var endyear = $.i18n.prop("default.copyright.endyear");
            $("footer.banner-footer").find($("span.companyName")).text($.i18n.prop("footer.company_name",[startyear,endyear]));
            $("footer.banner-footer").find($("span.otherInfo")).text($.i18n.prop("footer.other_info"));
            $("#content").css("margin-bottom", $("footer.banner-footer").height());
    },

    /** method to hide footer now or after delay * */

    fadeCopyright: function () {
        $("#content").css("margin-bottom", 0);
        $("footer.banner-footer").hide();
    },

    /** method to hide footer now or after delay * */

    hideCopyrightNowOrAfterDelay : function () {
        var DAY_IN_MS = 24*60*60*1000;
        var now = new Date().getTime();

        var lastLoginTime = sessionStorage.getItem( 'xe.lastLogin.time' );
        var lastLoginName = sessionStorage.getItem( 'xe.lastLogin.name' );

        function fadeCopyright() {
            $("#content").css("margin-bottom", 0);
           $("footer.banner-footer").hide();
        }

        var currentUserName = window.CommonContext && CommonContext.user || '';

             sessionStorage.setItem('xe.lastLogin.time', now);
                if(currentUserName){
                    sessionStorage.setItem('xe.lastLogin.name', currentUserName);
                }
             if ((lastLoginName === currentUserName ) &&
                 (lastLoginTime + DAY_IN_MS > new Date().getTime())) {
                 fadeCopyright(); // already logged in today. Hide now
             } else {
                 var fadeCopyrightDelay;
                 var emptyMetaTagValue="false";
                 var footerMetaTag=$('meta[name=footerFadeAwayTime]').attr("content");
                 if(footerMetaTag!=emptyMetaTagValue && footerMetaTag!="[:]" && footerMetaTag != ""){
                     fadeCopyrightDelay=parseInt(footerMetaTag);
                 }else{
                     fadeCopyrightDelay=2000;
                 }
                 setTimeout( fadeCopyright, fadeCopyrightDelay );
             }

    }

};

/**
 * @class NavigationRC Class to support auto selection of navigation items when the application loads
 *
 * @author jai.chandramouli
 */
var NavigationRC = {
    /**
     * Identifier prefix
     */
    id: 'list',
    /**
     * NavigationEntryValueObject containing the current page details loaded from service
     */
    navEntry:null,
    /**
     * List to contain the page heirarchy
     */
    pathList: [],
    /**
     * @private
     * Indicates if the Navigation system has been initialized.
     */
    initialized: false,
    /**
     * @private
     * Indicates if all entries have been loaded
     */
    loadComplete: false,
    /**
     * @private
     * The navigation service's web service endpoint.
     */
    endpoints: ["/menu"],
    /**
     * @private
     * The active endpoint index.
     * @default 0
     */
    endpointIndex: -1,

    initialize: function(pageName, seq) {
        if (pageName == null)
            pageName = NavigationRC.getPageName();
        if (pageName == "")
            return;

        NavigationRC.endpointIndex += 1;
        if (NavigationRC.endpointIndex >= NavigationRC.endpoints.length) {
            return false;
        }
        var ep = NavigationRC.endpoints[NavigationRC.endpointIndex];

        var endpoint = Application.getApplicationPath()
            + ep
            + "?pageName=" + pageName;

        if (seq != null)
            endpoint = endpoint + "&seq=" + seq;

        ServiceManager.get(endpoint, NavigationRC.handleServiceResults);
    },

    reInitialize: function(pageName, seq) {
        NavigationRC.initialized = false;
        NavigationRC.endpointIndex = -1;
        NavigationRC.loadComplete = false;
        NavigationRC.initialize(pageName, seq);
    },

    getPageName: function() {
        var loc = window.location.href;
        if ( loc.indexOf( "page=" ) != -1 ) {
            return loc.substring( loc.indexOf( "page=" ) + 5, loc.length )
        } else {
            return ""
        }
    },

    /**
     * @private
     *
     * Processes a XML Document that represents available navigation entries and establish
     * the navigation system.
     * @param {XMLDocument} xmldoc The XML Document to parse.
     */
    handleServiceResults: function(xmldoc) {
        if (!xmldoc) {
            NavigationRC.initialized = false;
            return;
        }
        if (xmldoc.status) { // means its an XMLHttpRequest object

            if (xmldoc.status == 404
                || xmldoc.status == 500) {
                NavigationRC.initialize();
                return;
            }
            if (xmldoc.status == 400) {
                return;
            }
        }
        var vo = NavigationRC.loadXML(xmldoc);

        if (CommonContext.standalone == true) {
            var nav = vo[0];
            if (nav != null) {

                NavigationRC.navEntry = nav;

                NavigationRC.pathList = nav.menu.split("/");

                NavigationRC.doInitialLoad();

                NavigationRC.initialized = true;
            }
        }
    },
    /**
     * Processes a XML Document that represents available navigation entries.
     *
     * @param {XMLDocument} xmldoc The XML Document to parse.
     * @return NavigationEntryValueObject[] The navigation entries loaded.
     */
    loadXML: function(xmldoc) {
        if (!xmldoc) {
            return null;
        }

        var entries = xmldoc.getElementsByTagName("NavigationEntryValueObject");

        var vo = [];

        for (var x = 0; x < entries.length; x++) {
            if (!entries[x].attributes) {
                continue;
            }

            var nav = new NavigationEntryValueObject();

            for (var y = 0; y < entries[x].attributes.length; y++) {
                nav[entries[x].attributes[y].nodeName] = entries[x].attributes[y].nodeValue;
            }

            vo.push(nav);
        }

        return vo;
    },

    doInitialLoad: function() {
        scrollableList.findElement('#browseMenu').addClass('visibility');
        NavigationRC.loadNext(scrollableList);
    },

    loadNext: function(scrollableMenu) {
        if (NavigationRC.pathList.length == 0) {
            if (!NavigationRC.loadComplete) {
                if (NavigationRC.navEntry) {
                    var leafId = NavigationRC.id + '_' + NavigationRC.navEntry.caption;
                    scrollableMenu.selectedItem(leafId);
                }
            }
            scrollableMenu.findElement('#browseMenu').removeClass('visibility');
            NavigationRC.loadComplete = true;
            NavigationRC.id = "list";
            return;
        }

        NavigationRC.id += '_' + NavigationRC.pathList.shift();

        var item = scrollableMenu.findElement('.navList > .scrollableListFolder[id="' + NavigationRC.id + '"]');
        if (item.length > 0) {
//            item.click();
            scrollableMenu.load(item);
        } else {
            // this should be a leaf item, select breadcrumb item
            EventDispatcher
                .dispatchEvent(scrollableMenu.events.click, NavigationRC.id);

            NavigationRC.loadNext(scrollableMenu);
        }
    }
};


/**
 * @class Contains application specific details.
 */
var Application = {

    /**
     * Associated events.
     */
    events : {
        initialized :"auroraInitialized"
    },

    appDetails: [],

    /**
     * Ex: http://m038034.sct.com:8000/s14s80/twbkwbis.P_GenMenu
     */
    initialize: function() {
        Application.appDetails = Application.getURL().split("//");
    },
    /**
     * Returns the complete window location url
     */
    getURL: function() {
        return window.location.href;
    },
    /**
     * Returns the protocol.
     * Ex: http:
     */
    getProtocol: function() {
        return Application.appDetails[0];
    },
    /**
     * Returns the host name of the application.
     * Ex: m038034.sct.com:8000
     */
    getHost: function() {
        var end_at = Application.appDetails[1].indexOf('/');
        return Application.appDetails[1].substring(0, end_at);
    },
    /**
     * Returns the application path from the window location.
     * Ex: http://m038034.sct.com:8000/s14s80
     */
    getApplicationPath: function() {

        var applicationPath = $('meta[name=menuBaseURL]').attr("content");
        if(applicationPath){
            return applicationPath;
        }

        var end_at = Application.appDetails[1].indexOf('/');
        var app = Application.appDetails[1].substring(end_at + 1, Application.appDetails[1].lastIndexOf('/'));
        var protocol = Application.getProtocol();
        var host = Application.getHost();
        return protocol + "//" + host + "/" + app;
    },
    /**
     * Returns the application path from the window location.
     * Ex: http://m038034.sct.com:8000/s14s80
     */
    getMenuEndPoint: function() {

        var menuEndPoint = $('meta[name=menuEndPoint]').attr("content");
        if(menuEndPoint){
            return menuEndPoint;
        }
    },
    getusageTrackingURL: function() {
        var usageTrackingURL = $('meta[name=usageTrackingURL]').attr("content");
        if(usageTrackingURL){
            return usageTrackingURL;
        }
    },
    /**
     * Returns the package.procedure name of the current page.
     * Ex: bmenu.P_MainMnu
     */
    getProc: function() {
        var procDetails = Application.appDetails[1].split('?');
        if (procDetails[1]) {
            var paramObj = deparam(procDetails[1], true);
            if (paramObj.name) {
                return paramObj.name;
            }
        }
        //if paramObj.name doesn't exist, continue
        var start_at = procDetails[0].lastIndexOf('/');
        return procDetails[0].split('#')[0].substring(start_at + 1);
    },

    isUserAuthenticated: function() {
        var username = CommonContext.user;
        if (username) {
            return true;
        } else {
            return false;
        }
    },

    /**
     * Redirects the browser to the specified <code>url</code>. In case of IE, the method ensures that the 'REFERER' header
     * is sent by simulating an anchor link click.
     * @param {String} url
     */
    navigateToURL: function(url) {
        if (url.indexOf('http') == -1) {
            url = Application.getApplicationPath() + "/" + url;
        }
        document.location = url;
        return;
        /*if (!jQuery.browser.msie) {
            document.location = url;
            return;
        }
        var a = document.createElement("a");
        a.setAttribute("href", url);
        a.style.display = "none";
        $("body").append(a);
        a.click();
         */
    },

    /**
     * returns the path of the resources
     */
    getResourcePath: function() {
        var path = $('script[src*="common-controls.js"]').attr("src");
        return path.substring(0, path.lastIndexOf('/'));
    }
};

function setMepDescription(mepDescription) {
    if (mepDescription != null) {
        $('.mepHomeContextText').text(mepDescription);
        CommonContext.mepHomeContext = mepDescription;
    }
}

function setCurrentPage(currentPage) {
    CommonContext.currentPage = currentPage;
}

/* This function is to intialize the messaging api to support
*  messagin between SSB application and app nav/experience.
*
* */
function initializeMessagingAPI(){
    Messenger.initialize(Messenger.messageHandler);
    Message.setStatusMessage(window.name.substr(0,window.name.indexOf('?')).replace(/\\/g, '').trim());
    if(CommonContext.integratedWithExperience){
        //setting dirty state false when page loads this will clear previously set dirty state of Experience
        Messenger.send(Messenger.createStatusMessage("dirty:false"));
        BannerExperienceIntegration.dirtyCheckInterval=window.setInterval(() => BannerExperienceIntegration.checkDirtyState(),2000);

        window.addEventListener("hashchange", function () {
            BannerExperienceIntegration.disconnectIframeResizeObserver();

            sendAppLocation();

            if(CommonContext.iframeScrollingInExperience){
                BannerExperienceIntegration.initializeIframeResizeObserver();
            }
        });
        window.addEventListener("beforeunload", BannerExperienceIntegration.resetExperience);

        sendAppLocation();

        if(CommonContext.iframeScrollingInExperience){
            setTimeout(BannerExperienceIntegration.initializeIframeResizeObserver(),1500);
        }
        if(BannerExperienceIntegration.pageTitle.text.length < 1) {
            setTimeout(BannerExperienceIntegration.getApplicationTitle(),600);
        }
        if (CommonContext.mepHomeContext) {
            Message.setMepCodeMessage(CommonContext.mepHomeContext);
        }
    }
}

var MepDesciption = {
    populateMepDescForOthers : function() {
        ControlBar.append($("<div id='mepDiv'><span>"+CommonContext.mepHomeContext+"</span></div>"));
    },

    populateMepDescForMobile : function() {
        ToolsMenu.addItem("mepDescForMobile",CommonContext.mepHomeContext,undefined, function() {}, true );
        var elem=ControlBar.node.find('#mepDescForMobile');
        elem.attr('tabindex', -1);
        elem.removeClass('pointer');
    }
};

var UserName = {
    populateUserNameForOthers: function() {
        ControlBar.append($("<div id='username'><span>"+CommonContext.user+"</span></div>'"));
    },

    populateUserNameForMobile : function() {
        ProfileMenu.addItem("usernameForMobile",CommonContext.user,undefined, function() {}, true );
        var elem = ControlBar.node.find('#usernameForMobile');
        elem.attr('tabindex', -1);
        elem.removeClass('pointer');
    }
};

/**
 * Class to manage user controls on the top right corner of the Aurora header
 */
var ControlBar = {

    node: $("<div id='header-east-part-user-controls'>"
        + "</div>"),

    canvas: null,

    initialize: function() {
        this.canvas = this.node;

    },

    attach: function(node) {
        this.node.append(node);
    },

    append: function(node, appendAfterId) {
        if (appendAfterId)
            this.node.find(appendAfterId).after(node);
        else
            this.node.append(node);
    },

    appendTo: function(node, appendToId) {
        if (appendToId)
            $( node ).appendTo( this.node.find(appendToId));
        else
            $( node ).appendTo( this.node );
    },

    prepend: function(node, prependBeforeId) {
        if (prependBeforeId)
            this.node.find(prependBeforeId).before(node);
        else
            this.node.prepend(node);
    },

    addAccessibilityInfo: function(selector, elemAriaLabel, elemTitle) {
        var elemDiv = ControlBar.node.find(selector);
        elemDiv.attr('tabindex', 0);
        elemDiv.attr('aria-label',elemAriaLabel );
        var elementText=elemDiv.text();
        var spanElementId=elemDiv.attr('id')+"Title";
        var insideElement="<span tabindex='-1' title='"+elemTitle+"' id="+spanElementId+">"+elementText+"</span>";
        elemDiv.html(insideElement);
    }
};

var process = process || {env: {NODE_ENV: "development"}};
/*********************************************************************************
 Copyright 2015 Ellucian Company L.P. and its affiliates.
 **********************************************************************************/


$(document).ready(function(){
    ContentManager.setContentPosition();
    $(window).on('resize',function(){
        ContentManager.setContentPosition();
    });
})


var BreadCrumbAndPageTitle = (function () {

    var items = [];

    var UI = $("<nav  id='breadcrumb-panel' role='navigation' class='aurora-theme'></nav>");

    function setFullBreadcrumb(breadCrumbItems, pageTitle) {
        $('#breadcrumb-panel').empty();
        $('#breadcrumb-panel').append("<div id='breadcrumbHeader'></div>");
        updateBreadcrumbItems(breadCrumbItems);
        showPageTitleAsBreadcrumb(pageTitle);
    };

    function BreadCrumbValueObject (id, label, url) {
        this.id = id;
        this.label = label;
        this.url = url;
    };

    function updateBreadcrumbItems(breadcrumbItems){
        var index = 0;
        $.each(breadcrumbItems, function(label, url) {
            index = index + 1;
            var breadCrumbItem = new BreadCrumbValueObject(index,label, url.trim());
            items.push(breadCrumbItem);
            drawItem(breadCrumbItem);
        });

        $('.breadcrumbButton:last').addClass('leaf-breadcrumb');
        addBackButton();
    };

    function drawItem(item) {
        var breadcrumbHeader = UI.find('#breadcrumbHeader');
        var breadcrumbItem = "<span class='breadcrumbButton' data-id='"+item.id+"'>"+item.label+"</span><span class='breadcrumb-separator'></span>";
        var url = item.url.trim();
        if(url.length){
            if(!isURLAbsolute(url)){
                url = Application.getApplicationPath() + url;
            }
            breadcrumbItem = "<a class='breadcrumbButton' data-id='"+item.id+"' href='"+url+"'>"+item.label+"</a><span class='breadcrumb-separator'></span>";
        }
        breadcrumbHeader.append(breadcrumbItem);
    };

    function isURLAbsolute(url){
        if( url.indexOf('http://') === 0 || url.indexOf('https://') === 0){
            return true;
        }
        return false;
    };

    function addBackButton() {
        var leafItemId = _.last(items, [1])[0].id;
        var previousNavigableURL = getPreviousBreadCrumbNavigationLocation(leafItemId);

        if(previousNavigableURL.length){
            var backButton = "<a id='breadcrumbBackButton'></a>";
             $('#breadcrumb-panel').prepend(backButton);
            registerBackButtonClickListener();
        }
    };

    function showPageTitleAsBreadcrumb(pageTitle) {
        if(!_.isUndefined(pageTitle) && pageTitle.trim().length){
            $('<div id="breadcrumbPageTitle">'+pageTitle+'</div>').insertBefore('#breadcrumbHeader');
        }
        else{
            $('#breadcrumbHeader').addClass('breadcrumb-show-leaf');
        }
    };

    function registerBackButtonClickListener(){
        $('#breadcrumbBackButton').on('click',function(){
            var breadcrumbItem =  $('.breadcrumbButton:last').attr('data-id');
            var location = getPreviousBreadCrumbNavigationLocation(breadcrumbItem);
            window.location = location;
        })
    };

    function getPreviousBreadCrumbNavigationLocation(breadcrumbId){
        var previousNavigableURL = "";
        var itemsWithURL = items.filter(function(breadcrumb) {
            return (breadcrumb.url.length > 0 && (breadcrumb.id < parseInt(breadcrumbId))) ;
        });

        var previousBreadcrumbWithURI = _.last(itemsWithURL, [1]);
        if(previousBreadcrumbWithURI.length){
            previousNavigableURL = Application.getApplicationPath() + previousBreadcrumbWithURI[0].url;
        }
        return previousNavigableURL;
    }

    return{
        create : function () {
            if(CommonContext.integratedWithExperience){
                UI.addClass("breadcrumb-panel-hide")
            }
            $('#header-main-section').after(UI);
        },

        draw: function(headerAttributes){
            var breadcrumbItems = headerAttributes.breadcrumb;
            var pageTitle = headerAttributes.pageTitle;
            $('#title-panel').empty();
            if(!_.isEmpty(pageTitle)){
                $('#title-panel').append("<h1>"+pageTitle+"</h1>");
            }

            if(!_.isEmpty(breadcrumbItems)){
                setFullBreadcrumb(breadcrumbItems, pageTitle);
            }

           // Once page header & bread crumb is update send a message to Experience Iframe
            if(CommonContext.integratedWithExperience){
                Message.setBreadcrumbMessage();
                BannerExperienceIntegration.resetPageTitle();
                
                if(!_.isEmpty(pageTitle) && BannerExperienceIntegration.pageTitle.text.trim() ===''){
                    $('#title-panel').hide();
                    BannerExperienceIntegration.pageTitle.element=$('#title-panel');
                    BannerExperienceIntegration.pageTitle.text=pageTitle;
                } else{
                    BannerExperienceIntegration.pageTitle.text=Object.keys(breadcrumbItems)[Object.keys(breadcrumbItems).length - 1];
                }
                setTimeout(BannerExperienceIntegration.getApplicationTitle(),600);

            }
        }
    }
})();

var process = process || {env: {NODE_ENV: "development"}};
/*********************************************************************************
 Copyright 2016-2021 Ellucian Company L.P. and its affiliates.
 **********************************************************************************/

function ScrollableMenuTable(root, menuList) {
    /**
     * Flag to check if the ScrollableList is initialized
     * @type Boolean
     * @default false
     */
    this.initialized = false;
    /**
     * The scrolling speed.
     * @type Number
     * @default 5
     */
    this.speed = 5;
    /**
     * The height of the scrollable components.
     * @type Number
     * @default 110
     */
    this.height = 110;
    /**
     * @private
     *
     * The JavaScript interval id used to control scroll behavior.
     * @type Number
     */
    this.interval = null;

    this.menuList = [];

    /**
     * @private
     *
     * The internal marker suffixed to all generated ids.
     * @type String
     * @default "list_"
     */
    this.marker = "list_";

    /**
     * The root component holding the menu
     */
    this.root = root;

    /** last focused element **/

    this.lastFocusedElement;

    /**
     * Events associated with the ScrollableList.
     */
    this.events = {
        click: "navigationItemClick"
    };

    this.setMenuList= function(menuList){
        this.menuList = menuList;
    };

    this.getMenuList = function(){
        return menuList;
    };

    this.construct = function () {
        this.initialize();
    };

    this.setLastFocusedElement = function(target){
        this.lastFocusedElement = target;
    };

    this.getLastFocusedElement = function(){
        return this.lastFocusedElement;
    }

    var currentSelectedMenuFullPath = null;

    var _that;

    var SPLIT_CHAR = "_";

    var KEY_CODE = {
        ENTER: 13
        ,       ESC: 27
        ,       LEFT_ARROW: 37
        ,       UP_ARROW: 38
        ,       RIGHT_ARROW: 39
        ,       DOWN_ARROW: 40
    };



    function _fnGetSelectedMenuName(){
        var menuName = currentSelectedMenuFullPath;
        menuName = menuName.substr(menuName.lastIndexOf(SPLIT_CHAR));
        menuName = menuName.replace(SPLIT_CHAR,"");
        return menuName;
    }

    function _fnGetParentMenuPath(){
        var currMenuFullPath = currentSelectedMenuFullPath;
        var parentMenuPath = currMenuFullPath.substr(0,currMenuFullPath.lastIndexOf(SPLIT_CHAR));
        return parentMenuPath;
    }

    function _fnCreateMenuUI(){
        var menu = "<nav id='menu' class='menu-wrapper hide menu-common'>"+
            "<ul id='menuList' class='menu-common' role='tree'></ul></nav>";
        $(root).append(menu);
    };

    function _fnSetupMenuItemEvent()    {
        $('#menuList > .scrollableListFolder').on('click',_fnMouseEventsHandlerForMenu);
        $('#menuList > .scrollableListFolder').on('keydown',_fnKeyBoardEventsHandlerForMenu);
    };

    function _fnMouseEventsHandlerForMenu(e){
        var currTarget = e.target;
        var target = $(currTarget).closest('li');
        var baseSSBURL = "ssomanager/c/ssb"
        if(_isLeafNode(currTarget)){
            var XE_menu_link = target.context.href;
            if(XE_menu_link == null){
                return;
            }
            XE_menu_link = XE_menu_link.toLowerCase();
            var position = XE_menu_link.search("ssomanager");
            var SSB_baseURI = XE_menu_link.substring(position,position+16);

            var Test_url;
            if(SSB_baseURI == baseSSBURL){
                Test_url = true
            }

            if(Test_url &&  CommonContext.hideSSBHeaderComps == "true"){
                $(target).find("a").attr("target", "banner8SSB");
            }else{
                (target).find('a:first')[0].click();
            }
        } else {
            _fnOpenUpSubMenu(target);
        }
    };

    function _fnOpenUpSubMenu(target) {
        var menuName = $(target).attr('id');
        _that.load(menuName);
    };

    function _fnSetFocusToLastElement(){
        var target = _that.getLastFocusedElement();
        if(target){
            $(target).focus();
        }
    };

    function _fnKeyBoardEventsHandlerForMenu(e){
        var currentTarget = e.target;
        var code = (e.keyCode ? e.keyCode : e.which);
        if((code !==KEY_CODE.LEFT_ARROW) && (code!==KEY_CODE.RIGHT_ARROW))  {
            switch(code)    {
                case KEY_CODE.ESC:
                    _fnHideBannerMenu();
                    _fnSetFocusToLastElement();
                    break;
                case KEY_CODE.ENTER:
                    if(_isLeafNode(currentTarget))    {
                        $(currentTarget).find('a:first')[0].click();
                    } else {
                        _fnOpenUpSubMenu(currentTarget);
                    }
                    break;
                case KEY_CODE.DOWN_ARROW:
                    if($(currentTarget).next('li').length){
                        $(currentTarget).next('li').focus();
                    }
                    break;
                case KEY_CODE.UP_ARROW:
                    if($(currentTarget).prev('li').length){
                        $(currentTarget).prev('li').focus();
                    }
                    break;
            }
        } else {
            _fnLeftAndRightNavigation(code,currentTarget);
        }
        return false;
    };

    function _fnLeftAndRightNavigation(keyCode, currentTarget){
        if(isRTLMode()){
            switch(keyCode){
                case KEY_CODE.LEFT_ARROW:
                    _fnLeftKeyRTLModeRightKeyLTRMode(currentTarget);
                    break;
                case KEY_CODE.RIGHT_ARROW:
                    _fnRightKeyRTLModeLeftKeyLTRMode(currentTarget);
                    break;
            }
        } else {
            switch(keyCode){
                case KEY_CODE.RIGHT_ARROW:
                    _fnLeftKeyRTLModeRightKeyLTRMode(currentTarget);
                    break;
                case KEY_CODE.LEFT_ARROW:
                    _fnRightKeyRTLModeLeftKeyLTRMode(currentTarget);
                    break;
            }
        }
    };

    function _fnLeftKeyRTLModeRightKeyLTRMode(currentTarget){
        if(!_isLeafNode(currentTarget)){
            $(currentTarget).click();
        }
    };

    function _fnRightKeyRTLModeLeftKeyLTRMode(currentTarget){
        if(_isLeafNode(currentTarget)){
            if ($(currentTarget).find('div.menu-back-icon').length > 0) {
                $(currentTarget).find('a:first').click();
            }
        }
    };

    function _isLeafNode(target)  {
        var leafNode = $(target).closest('li').find('a');
        var len = leafNode.length;
        var isLeafNode = false;
        if(len > 0){
            isLeafNode=true;
        }
        return isLeafNode;
    };

    function _fnMenuInitialize(len){
        var menu = _that.getMenuList();
        $('#menuList> li').remove();
        for (var x in menu) {
            if (typeof menu[x] == "function") {
                continue;
            }

            if (x != "none") {
                if (len == 1) {
                    _that.findElement('#menuList').append("<li id='" + _that.marker + x + "'  class='scrollableListFolder menu-common origin-menu' tabIndex='0' role='treeitem' aria-expanded='false' aria-level='1'><span class='menu-common'>" + x + "</span></li>");
                } else {
                    var temp = "list_" + x;
                    _that.findElement(_that.escapeLocator('#' + temp)).remove();
                    _that.findElement('.selectedListItem').removeClass("selectedListItem");
                    var menuItem = "";
                    menuItem = "<li id='"+_that.marker + x +"' class='scrollableListFolder menu-common origin-menu' tabindex='0' role='treeitem' aria-expanded='false' aria-level='1'>"
                        +"<div class='menu-item menu-common'>"
                        +"<div class='menu-text menu-common'><span class='menu-common'>" + x + "</span></div>"
                        +"<div class='menu-icon menu-common'></div>"
                        +"</div></li>";
                    _that.findElement('#menuList').append(menuItem);
                }
            }
        }
        $('#menuList').find('li:first').focus();
        _fnSetupMenuItemEvent();
    };

    function _fnGetMenuItemsFor(loc){
        var list = _that.getMenuList();
        for (var x = 0; x < loc.length; x++) {
            if (list[loc[x]]) {
                if (list[loc[x]] instanceof Array) {
                    list = list[loc[x]];
                }
            }
        }
        return list;
    };

    function _fnLoadMenu(item)  {
        var next = $('#menuList');
        var menuItem = "";
        $('#menuList> li').remove();

        var menuFullPath = item.replace(this.marker,"");
        var loc = menuFullPath.split(SPLIT_CHAR);
        var list = _fnGetMenuItemsFor(loc);

        $('#menuList').append(_fnAddBackButtonUI());
        $('#backButton').on('click',_fnBackButtonClickHandler);

        for (var x in list) {
            if (typeof list[x] == "function") {
                continue;
            }

            if ((list[x].path == "null.zul" || list[x].path == "null") && x != Navigation.nonLeafNavEntryValObjKey) {
                var name = list[x].name;
                _that.loadFromService(item, name);
            }

            var id = item + SPLIT_CHAR + x;
            var columnIndex = next.parents('.columns:first').index() + 1;
            if (((x != Navigation.nonLeafNavEntryValObjKey)) && ((list[x]['type'] == 'FORM') || (list[x].nonLeafNavEntryValObjKey["type"] == 'FORM') )) {
                var navItem = list[x];
                var liCaption = _that.getCaption( list[x] )['caption'];
                if (liCaption == undefined) {
                    liCaption = _that.getCaption( list[x][Navigation.nonLeafNavEntryValObjKey] )['caption'];
                }
                var liTitle = _that.getCaption( list[x] )['title'];
                if (liTitle == undefined) {
                    liTitle = _that.getCaption( list[x][Navigation.nonLeafNavEntryValObjKey] )['title'];
                }
                if(navItem.url == undefined){
                    navItem.url = (list[x][Navigation.nonLeafNavEntryValObjKey]).url;
                }

                if (liTitle.match(/<(\w+)((?:\s+\w+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/)) {
                    var regex = /(<([^>]+)>)/ig;
                    liTitle = liTitle.replace(regex, "");
                }

                menuItem = "<li id='" + id + "' class='scrollableListFolder menu-common' tabindex='0' role='treeitem' aria-expanded='false' aria-level='1'>"
                    + "<a class='menu-common' href=\"" + navItem.url + "\">"
                    + "<div class='menu-item menu-common menu-leaf-node'>"
                    + "<div class='menu-text menu-common'> <span title=\"" + liTitle + "\">"
                    + liCaption
                    + "</span></div>"
                    + "</div>"
                    + "</a>";
                next.append( menuItem );
                Navigation.removeNavigationEntry( list[x].name );

            } else if ((x != Navigation.nonLeafNavEntryValObjKey) && ((list[x]['type'] == 'MENU') || (list[x].nonLeafNavEntryValObjKey["type"] == 'MENU') )) {
                var liCaption = _that.getCaption( list[x][Navigation.nonLeafNavEntryValObjKey] )['caption'];
                var liTitle = _that.getCaption( list[x][Navigation.nonLeafNavEntryValObjKey] )['title'];
                if (liTitle.match(/<(\w+)((?:\s+\w+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/)) {
                    var regex = /(<([^>]+)>)/ig;
                    liTitle = liTitle.replace(regex, "");
                }
                menuItem = "<li id='" + id + "' class='scrollableListFolder menu-common' tabindex='0' role='treeitem' aria-expanded='false' aria-level='" + columnIndex + "'>"
                    + "<div class='menu-item menu-common'>"
                    + "<div class='menu-text menu-common'> <span class='menu-common' title=\"" + liTitle + "\">" + liCaption + "</span></div>"
                    + "<div class='menu-icon menu-common'></div>"
                    + "</div>";
                next.append( menuItem );
            } else if (x == Navigation.nonLeafNavEntryValObjKey) {
                //continue;

            } else {
                ErrorManager.show( "Unknown entry encountered." );
            }
        }

        $('#menuList').find('li:nth-child(2)').focus();
        $("#menuList").scrollTop(0);
        _fnSetupMenuItemEvent();
        EventDispatcher.dispatchEvent(_that.events.click, item);
        // NavigationRC might have more menu items to be fetched automatically
        NavigationRC.loadNext(_that);

    };

    function _fnAddBackButtonUI(){
        var subMenuName = _fnGetSelectedMenuName();
        var subMenuTitle = subMenuName;
        if (subMenuTitle.match(/<(\w+)((?:\s+\w+(?:\s*=\s*(?:(?:"[^"]*")|(?:'[^']*')|[^>\s]+))?)*)\s*(\/?)>/)) {
            var regex = /(<([^>]+)>)/ig;
            subMenuTitle = subMenuTitle.replace(regex, "");
        }
        var parentMenu = _fnGetParentMenuPath();
        var backButton = "<li id='"+parentMenu+"' class='scrollableListFolder menu-common' tabindex='0' role='treeitem'><div class='menu-item'>"
            +"<a href='#' id='backButton'><div class='menu-back-icon menu-common'></div><div class='menu-subheader-text menu-common'>"
            +"<span class='menu-common' title=\"" + subMenuTitle + "\">"+subMenuName+"</span></div></a>"
            +"</div>"
        return backButton;
    };


    function _fnBackButtonClickHandler(){
        var currParentMenu = _fnGetParentMenuPath();
        currentSelectedMenuFullPath = currParentMenu;
        if(currParentMenu != "list")  {
            _fnLoadMenu(currParentMenu);
        } else {
            _fnMenuInitialize();
        }
        return false;
    };

    function _fnHideBannerMenu(){
        $('#menuContainer').removeClass('show').addClass('hide');
        $('#menu').removeClass('show').addClass('hide');
        $('#bannerMenu').removeClass('show');
    }

    /**
     * ScrollableList UI component initialization method.
     */
    this.initialize = function() {
        _that = this;
        _fnCreateMenuUI();
        this.initialized = true;
    };

    this.findElement = function (expr) {
        if (expr != undefined && $.trim(expr) != "") {
            return $(this.root + ' ' + expr);
        } else {
            return $(this.root);
        }
    };


    this.reinitialize = function(len) {
        if (this.initialized == true) {
            this.initialized = false;
            if (currentSelectedMenuFullPath) {
                this.load(currentSelectedMenuFullPath);
                this.initialized = true;
                return;
            }
            _fnMenuInitialize(len);
            this.initialized = true;
        }
    };

    this.getCaption = function (navEntry) {
        var captionInfo = [];
        captionInfo['caption'] = navEntry.pageCaption;
        captionInfo['title'] = navEntry.pageCaption;
        if (navEntry.captionProperty == "true") {
            captionInfo['caption'] = captionInfo['caption'] + "<br/>" + "(" + navEntry.form + ")";
            captionInfo['title'] = captionInfo['title'] + " (" + navEntry.form + ")";
        }
        return captionInfo;
    };

    this.escapeLocator = function (itemId) {
        return itemId.replace(/([ #;&,.+*~\':"!^$[\]()=>|\/])/g, '\\$1');
    };

    /**
     * Loads list content and populates the next list for a selected list item.
     * @param {Element} item The JQuery element for the selected list item.
     */

    this.load = function(item) {
        currentSelectedMenuFullPath = item;
        _fnLoadMenu(item);
    };


    /**
     * loads data using the service
     * @param item jQuery object of the clicked HTML element
     * @param name the name in the NavigationEntryValueObject
     */
    this.loadFromService = function(item, name) {
        Navigation.setScrollableMenu(this);
        Navigation.nextNavItem(name, item);
    },


        this.closeMenu = function(target) {
            var currentElement = target;
            target = $(target).closest('li').find('span:first')
            if (!$(target).hasClass('menu-common')) {
                if ($('#menu').hasClass('show')) {
                    _fnHideBannerMenu();
                    _fnSetFocusToLastElement();
                }
            }
        }
};

var process = process || {env: {NODE_ENV: "development"}};
/*********************************************************************************
 Copyright 2009-2024 Ellucian Company L.P. and its affiliates.
 **********************************************************************************/


/**
 * Delegates to Magellan's M (Messenger)
 */
var MessageProcessor = {
    /**
     * @private
     * @param {XMLDocument} xmldoc The XMLDocument to check.
     */
    checkForHelpMessage : function(xmldoc) {
        var processed = false;

        $(xmldoc).find('help').find('url').each( function(i) {
            HelpManager.showHelpByURL($(this).text());

            processed = true;
        });

        return processed;
    },
    /**
     * @private
     * @param {XMLDocument} xmldoc The XMLDocument to check.
     */
    checkForErrorMessage : function(xmldoc) {
        var codes = [];
        var messages = [];
        var processed = false;

        $(xmldoc).find('errors').find('error').each( function(i) {
            codes[i] = $(this).find('code').text();
            messages[i] = $(this).find('message').text();

            processed = true;
        });

        var out = "";

        if (processed && messages.length > 0) {
            var statusMessageArr = [];

            $(messages).each( function(i) {
                msg = messages[i];

                if (codes[i]) {
                    msg += " (" + codes[i] + ")";
                }

                out += "<span class='errorMessage'>" + msg + "</span>";
            });

            var buttons = [ Button("errorOkButton", "common_ok",
                ModalWindowFactory.close, "blue") ];

            ModalWindowFactory.show("errorWindowModal",
                "errorwindow_label_title", "blue", $(out),
                "errorWindowContent", buttons, null);

            codes = [];
            messages = [];
        }

        return processed;
    },
    /**
     * @private
     * @param {XMLDocument} xmldoc The XMLDocument to check.
     */
    checkForRequestMessage : function(xmldoc) {
        var processed = false;

        if ($(xmldoc).find('request').length > 0) {
            var req = $(xmldoc).find('request').text();

            var activeFrameName = null;
            var app = null;

            if ($("li.activeOpenItem").length > 0) {
                activeFrameName = $("li.activeOpenItem").attr("id").replace(
                    OpenItems.openItemMarker, "");
                app = OpenItems.findAnyOpenItemByName(activeFrameName);
            }

            switch (req) {
                case "navigate":
                    ChannelManager
                        .send(
                            Messenger.createApplicationPageNavigationMessage(app.context.pageName),
                            activeFrameName);
                    break;
                case "context":
                    if (CommonContext.standalone) {
                        if (typeof (Messenger.setMessageHandler) == 'function') {
                            Messenger.setMessageHandler(Messenger.createContextMessage( {
                                pageName :CommonPlatform.defaultPageName
                            }));
                        }
                    } else {
                        ChannelManager.send(Messenger.createContextMessage(app.context),
                            activeFrameName);
                    }

                    break;
                default:
                    break;
            }

            processed = true;
        }

        return processed;
    },
    /**
     * @private
     * @param {XMLDocument} xmldoc The XMLDocument to check.
     */
    checkForConfirmationMessage : function(xmldoc) {
        var processed = false;

        if (xmldoc.getElementsByTagName('confirmation').length > 0) {
            var message = XMLHelper.getElementData(xmldoc
                .getElementsByTagName('confirmation')[0], "message");
            var title = XMLHelper.getElementData(xmldoc
                .getElementsByTagName('confirmation')[0], "title");
            var responses = xmldoc.getElementsByTagName('confirmation')[0]
                .getElementsByTagName('response');

            var buttons = [];

            var confirmationResponseSuffix = "_responseSelected";

            for ( var x = 0; x < responses.length; x++) {
                buttons.push(Button(responses[x].getAttribute("responseValue")
                    + confirmationResponseSuffix, responses[x]
                    .getAttribute("label"), function() {
                    MessageProcessor
                        .sendConfirmationResponse($(this).attr("id")
                            .replace(confirmationResponseSuffix, ""));
                    ModalWindowFactory.close();
                }, "blue"));
            }

            ModalWindowFactory.show("confirmationWindowModal",
                "confirmation_label_title", "blue", message, "", buttons,
                null);

            processed = true;
        }

        return processed;
    },
    /**
     * @private
     * @param {XMLDocument} xmldoc The XMLDocument to check.
     */
    checkForStatusMessage : function(xmldoc) {
        var processed = false;

        $(xmldoc).find('status').find('message').each( function(i) {
            // TODO: do nothing with $(this).text();

            processed = true;
        });

        return processed;
    },

    checkForUdcIdentityMessage : function(xmldoc) {

        var processed = false;

        if (!xmldoc || !xmldoc.getElementsByTagName('UDCIdentity')[0]) {
            return processed;
        }

        processed = true;

        CommonContext.udcIdentity = xmldoc;
        CommonContext.udcid =  XMLHelper.getElementData(xmldoc, "UDCIdentifier");


        return processed;
    },
    /**
     * @private
     * @param {XMLDocument} xmldoc The XMLDocument to check.
     */
    checkForOpenItemMessage : function(xmldoc) {
        var processed = false;

        if (!xmldoc || !xmldoc.getElementsByTagName('context')[0]) {
            return false;
        }

        var appid = XMLHelper.getElementData(xmldoc
            .getElementsByTagName('context')[0], "appid");

        if ($(xmldoc).find('openitem').length > 0) {
            var action = XMLHelper.getElementData(xmldoc
                .getElementsByTagName('openitem')[0], "action");
            var page = XMLHelper.getElementData(xmldoc
                .getElementsByTagName('openitem')[0], "page");

            switch (action) {
                case "open":
                    OpenItems.addApplicationPage(appid, page);
                    break;
                case "close":
                    OpenItems.removeApplicationPage(appid, page);
                    break;
                default:
                    break;
            }

            processed = true;
        }

        return processed;
    },
    /**
     * @private
     * @param {XMLDocument} xmldoc The XMLDocument to check.
     */
    checkForNavigationMessage : function(xmldoc) {
        var processed = false;

        if (xmldoc.getElementsByTagName('navigate').length > 0) {
            var message = XMLHelper.getElementData(xmldoc
                .getElementsByTagName('navigate')[0], "location");

            if (message) {
                Navigation.navigate(message);
            }

            processed = true;
        }

        return processed;
    },

    checkForUdcIdMessage : function(xmldoc) {
        var processed = false;

        if (xmldoc.getElementsByTagName('udcIdentity').length > 0) {
            getUDCXml(XMLHelper.getElementData(xmldoc, "identity"));
            processed = true;
        }
        return processed;
    },
    /**
     * Sends the user selected response to a confirmation dialog.
     * @param {string} response The user selected response.
     */
    sendConfirmationResponse : function(response) {
        if (CommonContext.standalone) {
            if (typeof (Messenger.getMessageHandler()) == 'function') {
                Messenger
                    .setMessageHandler(createConfirmationResponseMessage(response));
            }
        } else {
            if ($("li.activeOpenItem").length > 0) {
                var activeFrameName = $("li.activeOpenItem").attr("id")
                    .replace(OpenItems.openItemMarker, "");

                ChannelManager.send(
                    createConfirmationResponseMessage(response),
                    activeFrameName);
            }
        }
    },

    /**
     * Makes necessary ajax service call using the details in the message and sends
     * back the response.
     * @param {Object} message
     */
    checkForServiceCallMessage: function(message) {
        var processed = false;

//		if(message.firstChild.childNodes[0].nodeName == "service") {
//
//			function callback(response) {
//				var activeFrameName = null;
//				var xmlString = (new XMLSerializer()).serializeToString(response);
//				ChannelManager.send(xmlString, activeFrameName);
//			}
//			alert("service call progress")
//			ServiceManager.get($(message).find('url').text(), callback);
//			processed = true;
//		}

        return processed;
    },

    /**
     * Primary entrance into the message processing system.
     * @param {string} message An encoded string represented XML document.
     */
    processMessage : function(message) {

        message = Messenger.decode(message);
        xmldoc = Messenger.string2xml(message);

        // check for expected message types
        if (this.checkForHelpMessage(xmldoc) || this.checkForErrorMessage(xmldoc)
            || this.checkForStatusMessage(xmldoc)
            || this.checkForConfirmationMessage(xmldoc)
            || this.checkForNavigationMessage(xmldoc)
            || this.checkForRequestMessage(xmldoc)
            || this.checkForOpenItemMessage(xmldoc)
            || this.checkForUdcIdentityMessage(xmldoc)
            || this.checkForUdcIdMessage(xmldoc)
            || this.checkForServiceCallMessage(xmldoc)) {
            alert(message)
            return;
        } else {
            // propogate other messages back down to all the managed applications.
            // encapsulated data message.
            this.broadcast(message);
        }
    },
    /**
     * Broadcasts a message to all managed applications.
     * @param {XMLDocument} message The message to broadcast.
     */
    broadcast : function(message) {
        $('#content > iframe').each( function(i) {
            ChannelManager.send(message, $(this).attr("name"));
        });

        if (typeof (messageHandler) == 'function') {
            messageHandler(message);
        }
    }
};
var Messenger = {

    initialize: function( callback ) {
        return M.start(callback);
    },
    send : function( message ) {
        return M.send( message );
    },
    createStatusMessage: function( message ){
        return M.createStatusMessage( message );
    },
    createKeepAliveMessage:function(message){
        return M.createKeepAliveMessage(message);
    },
    createActionMessage:function(message){
        return M.createActionMessage(message);
    },
    createStatusDirtyPagesMessage: function (pageName){
        var dataStateResponse = [];
        if(DirtyCheck.isDirty()){
            dataStateResponse.push({
                page: pageName,
                state: "dirty"
            });
        }else{
            dataStateResponse.push({
                page: pageName,
                state: "clean"
            });
        }
        return {"type": "dataState","state": dataStateResponse}
    },
    messageHandler: function (message) {

        if (_.isString(message)) {
            try {
                message = JSON.parse(message);
            } catch (e) {
                message = JSON.parse(Messenger.decode(message));
            }
        }
        console.log("-------->>>> ssbapp.messageHandler: Got Message: " + JSON.stringify(message));

        if (message.type == "request" && message.request == "dataState") {
            if (message.pages != null && message.pages.trim() != "") {
                Message.setAppDirtyStatus(message.pages.trim());
            } else {
                console.log("-------->>>> ssbapp.messageHandler: Got Dirty Check message for Empty page list");
                Message.setAppDirtyStatus(message.pages.trim());
            }
        }
        else if (CommonContext.integratedWithExperience && message.type === "request" && message.request === "action") {
             if(message.action === 'updateSurveyStatus'){
              if(window.Application.isUserAuthenticated()){
                  $.ajax({
                      url: Application.getApplicationPath()+"/survey/updateSurveyStatus",
                      success: function(data) {
                      }
                  });
              }
            } else if(message.action === "removeNotification") {
                _.each(notifications.models, function (n) {
                    if(n.attributes.flash) {
                        notifications.remove(n);
                    }
                });
            } else if(message.action === "executeNotificationPromptAction") {
                var fromExperience=message.value.notification;
                _.each(notifications.models, function (notification) {
                    if(notification.attributes.message === fromExperience.message){
                        notification.callPromptAction(message.value.label);
                    }
                });
            } else if(message.action === 'executeOptionMenuItem'){
                NonHierarchicalMenu.toogleToolsOptionById(message.value.id);
            } else if(message.action === "switchPersona") {
                window.location = window.persona.controller;
            } else if(message.action === 'setExperiencePath'){
                 sessionStorage.setItem('experiencePath', message.value.id);
             }
        }
        else if (message.type == "keepAlive" ) {
            $.ajax({
                url: Application.getApplicationPath()+"/keepAlive/data",
                dataType: "html",
                success: function(data, textStatus, jqXHR) {
                    CommonContext.keepAlive=false;
                    if(CommonContext.resetInActivityTimer!=null){
                        CommonContext.resetInActivityTimer.reset();
                        notifications.remove( CommonContext.removeNotification );
                    }
                }
            });
        }
        else if (CommonContext.integratedWithExperience && message.type == "navigate" ) {
            window.location.href = message.page;
        }
    }
};

var Message ={
    setStatusMessage: function(message){
        Messenger.send(Messenger.createStatusMessage("opened:"+message));
    },
    setAppDirtyStatus: function (seamlessDirtyPageNames) {
        Messenger.send(Messenger.createStatusDirtyPagesMessage(seamlessDirtyPageNames));
    },
    sendSignOutActionMessage:function(){
        Messenger.send(M.createActionMessage("signout"));
    },
    setKeepAliveMessage: function(){
        Messenger.send(Messenger.createKeepAliveMessage(true) );
    },
    setToolsMenu: function(toolsMenu){
        Messenger.send(BannerExperienceIntegration.utf8Encode(JSON.stringify(customMessage("toolsMenu", toolsMenu))));
    },
    setBreadcrumbMessage: function(){
        Messenger.send(BannerExperienceIntegration.utf8Encode(JSON.stringify(customMessage("breadcrumb",getBreadcrumbItems()))));
    },
    setTitleMessage: function (title){
        Messenger.send(BannerExperienceIntegration.utf8Encode(JSON.stringify(customMessage("title",title))));
    },
    setPathNameMessage: function (pathName){
        Messenger.send(BannerExperienceIntegration.utf8Encode(JSON.stringify(customMessage("pathName",pathName))));
    },
    setNotificationMessage: function (notification){
        Messenger.send(BannerExperienceIntegration.utf8Encode(
            JSON.stringify(customMessage("notification", notification), removeCircularReferences())));
    },
    setPersonaMessage: function (persona){
        Messenger.send(BannerExperienceIntegration.utf8Encode(JSON.stringify(customMessage("persona", persona))));
    },
    setSurveyPageMessage: function (response){
        Messenger.send(BannerExperienceIntegration.utf8Encode(JSON.stringify(customMessage("surveystatus", response))));
    },
    setIframeHeightMessage: function (pathName){
        Messenger.send(BannerExperienceIntegration.utf8Encode(JSON.stringify(customMessage("iframeHeight",pathName))));
    },
    setMepCodeMessage: function (mepCode){
        Messenger.send(BannerExperienceIntegration.utf8Encode(JSON.stringify(customMessage("mepCode",mepCode))));
    },
};


/**
 *checklocalactivity function poll in every 5 minutes/300000 seconds
 * to check if any local activity happened. If any localactivity occured
 * keealive flag set to true. After 5 minutes it will check the keepalive
 * flag, if true will send the message to the application navigator
 * and reset the keepalive flag to false and reset the timer for next
 * poll interval.
 */


var timer = "";
$(document.body).ready(function(){

    function stopBrowserShortCutKeys($event) {
        $event.preventDefault();
        $event.stopPropagation();
    }

    if(CommonContext.integratedWithExperience) {

        $(document).on("keydown", "body", shortKeysForExperience);

        function shortKeysForExperience($event) {
            if ($event.altKey == true && $event.keyCode == 76) {
                stopBrowserShortCutKeys($event);
                Messenger.send(Messenger.createActionMessage("toggleToolsMenu"));
            }else if ($event.ctrlKey == true && $event.shiftKey == true && $event.keyCode == 89) {
                stopBrowserShortCutKeys($event);
                M.send(M.createActionMessage("searchinput"));
            }else if ($event.ctrlKey == true && $event.shiftKey == true && $event.keyCode == 79) {
                stopBrowserShortCutKeys($event);
                M.send(M.createActionMessage("favorites"));
            }
        }
    }

    if(CommonContext.hideSSBHeaderComps=='true' && CommonContext.iframe) {
        var checkLocalActivity = function () {
            if (timer === '') {
                timer = setTimeout(function () {
                    if (CommonContext.keepAlive) {
                        Message.setKeepAliveMessage();
                        CommonContext.keepAlive = false;
                    }
                    clearTimeout(timer);
                    timer = "";
                    checkLocalActivity();
                }, 300000); // polling interval keep 5 minutes
            } else {
                timer = "";
            }
        }

        checkLocalActivity();
        $(this).on("focus keypress click", function() {
            CommonContext.keepAlive=true;
        }).ajaxSend(function() {
            CommonContext.keepAlive=true;
        });


        // Start -- Sending message to handle AppNav Keyboard shortcuts.
        $(document).on("keydown", "body", focusBackToBrowseMenu);


        function focusBackToBrowseMenu($event) {
            if ($event.ctrlKey == true && $event.keyCode == 77) {
                stopBrowserShortCutKeys($event);
                M.send(M.createActionMessage("browsemenu"));
            } else if ($event.ctrlKey == true && $event.shiftKey == false && $event.keyCode == 89) {
                stopBrowserShortCutKeys($event);
                M.send(M.createActionMessage("openitemsmenu"));
            } else if ($event.ctrlKey == true && $event.shiftKey == true && $event.keyCode == 76) {
                stopBrowserShortCutKeys($event);
                M.send(M.createActionMessage("help"));
            } else if ($event.ctrlKey == true && $event.shiftKey == true && $event.keyCode == 89) {
                stopBrowserShortCutKeys($event);
                M.send(M.createActionMessage("searchinput"));
            } else if ($event.ctrlKey == true && $event.shiftKey == true && $event.keyCode == 70) {
                stopBrowserShortCutKeys($event);
                M.send(M.createActionMessage("signout"));
            } else if ($event.ctrlKey == true && $event.shiftKey == true && $event.keyCode == 88) {
                stopBrowserShortCutKeys($event);
                M.send(M.createActionMessage("showDashboard"));
            } else if ($event.ctrlKey == true && $event.shiftKey == false && $event.keyCode == 68) {
                stopBrowserShortCutKeys($event);
                M.send(M.createActionMessage("favorites"));
            }
        };
        // End -- Sending message to handle AppNav Keyboard shortcuts.
    }
});

var Encoder = {
    //properties
    /**
     * @private
     */
    _keyString: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
    // methods
    /**
     * Encodes the supplied input.
     * @param {string} input The string to encode.
     */
    encode: function(input) {
        if ( !_.isString( input ) )
            input = JSON.stringify( input );

        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4 = "";
        var i = 0;

        do {
            chr1 = input.charCodeAt(i++);
            chr2 = input.charCodeAt(i++);
            chr3 = input.charCodeAt(i++);

            enc1 = chr1 >> 2;
            enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
            enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
            enc4 = chr3 & 63;

            if (isNaN(chr2)) {
                enc3 = enc4 = 64;
            } else if (isNaN(chr3)) {
                enc4 = 64;
            }

            output = output
                + this._keyString.charAt(enc1)
                + this._keyString.charAt(enc2)
                + this._keyString.charAt(enc3)
                + this._keyString.charAt(enc4);

            chr1 = chr2 = chr3 = "";
            enc1 = enc2 = enc3 = enc4 = "";
        } while (i < input.length);

        return output;
    },
    /**
     * Decodes the supplied input.
     * @param {string} input The encoded string to decode.
     */
    decode: function(input) {
        var output = "";
        var chr1, chr2, chr3, enc1, enc2, enc3, enc4 = "";
        var i = 0;

        input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

        do {
            enc1 = this._keyString.indexOf(input.charAt(i++));
            enc2 = this._keyString.indexOf(input.charAt(i++));
            enc3 = this._keyString.indexOf(input.charAt(i++));
            enc4 = this._keyString.indexOf(input.charAt(i++));

            chr1 = (enc1 << 2) | (enc2 >> 4);
            chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
            chr3 = ((enc3 & 3) << 6) | enc4;

            output = output + String.fromCharCode(chr1);

            if (enc3 != 64) {
                output = output + String.fromCharCode(chr2);
            }
            if (enc4 != 64) {
                output = output + String.fromCharCode(chr3);
            }

            chr1 = chr2 = chr3 = "";
            enc1 = enc2 = enc3 = enc4 = "";
        } while (i < input.length);

        return output;
    }
};

/**
 * @class Manages the presentation of error messages to the user.
 */
var ErrorManager = {
    show: function (message) {
        switch(typeof(message)) {
            case 'string':
                MessageProcessor.processMessage(Messenger.encode(createErrorMessage(message)));
                break;
            case 'array':
                MessageProcessor.processMessage(Messenger.encode(createErrorMessage("got an array of error messages")));
                break;
            default:
                break;
        }
    }
};


function EventListener(type, listener) {
    this.type = type;
    this.listener = listener;
}

EventListener.prototype.getType = function() {
    return this.type;
}

EventListener.prototype.getListener = function() {
    return this.listener;
}



/**
 * @class Handles dispatched events and executes the cooresponding callback methods that are defined.
 * @author jmiller
 */
var EventDispatcher = {
    /**
     * @private
     *
     * The bound event listeners.
     */
    listeners: [],
    /**
     * Adds an event listener.
     *
     * @param {String} type The type of the event.
     * @param {Function} listener The listener to invoke when the event is dispatched.
     */
    addEventListener: function(type, listener) {
        if (!(type instanceof EventListener)) {
            type = new EventListener(type, listener);
        }

        if (!EventDispatcher.hasEventListener(type)) {
            EventDispatcher.listeners.push(type);
        }
    },
    /**
     * Dispatches the specified event.
     *
     * @param {String} type The type of the event.
     */
    dispatchEvent: function(type, data) {
        for (var x = 0; x < EventDispatcher.listeners.length; x++) {
            if (EventDispatcher.listeners[x].getType() == type) {
                EventDispatcher.listeners[x].getListener()(data);
            }
        }
    },
    /**
     * Determines if an event listener is defined for the specified event type.
     *
     * @param {String} type The type of the event.
     */
    hasEventListener: function(type) {
        if (type instanceof EventListener) {
            for (var x = 0; x < EventDispatcher.listeners.length; x++) {
                if (EventDispatcher.listeners[x].getType() == type.getType()
                    && EventDispatcher.listeners[x].getListener() == type.getListener()) {
                    return true;
                }
            }
        } else {
            for (var x = 0; x < EventDispatcher.listeners.length; x++) {
                if (EventDispatcher.listeners[x].getType() == type) {
                    return true;
                }
            }
        }

        return false;
    },
    /**
     * Removes an event listener.
     *
     * @param {String} type The type of the event.
     * @param {Function} listener The listener to invoke when the event is dispatched.
     */
    removeEventListener: function(type, listener) {
        for (var x = 0; x < EventDispatcher.listeners.length; x++) {
            if (EventDispatcher.listeners[x].getType() == type) {
                EventDispatcher.listeners.splice(x, 1);
                return true;
            }
        }
        return false;
    }
};

function getBreadcrumbItems(){
    var breadcrumbItems=[]

    $.each($('#breadcrumbHeader').children(),function (key,value) {
       if($(value).hasClass('breadcrumbButton')){
           var breadcrumbItem={}
           breadcrumbItem.label=value.innerText;
           breadcrumbItem.url=value.pathname+value.search+value.hash;
           breadcrumbItems.push(breadcrumbItem);
       }
    })

    return breadcrumbItems;
}

function sendAppLocation() {
   Message.setPathNameMessage(window.location);
}

function customMessage(type,value){
   return {
       type:type,
       value:value
   }
}

function removeCircularReferences() {
    const found = new WeakSet();
    return (key, value) => {
        if (typeof value === 'object' && value !== null) {
            if (found.has(value)) {
                // Circular references found, discard key
                return;
            }
            found.add(value);
        }
        return value;
    };
};

// Utility method to encapsulate all the functionalities specific to Experience
var BannerExperienceIntegration={
    initializeDirtyCheckForThePage: true,
    dirtyCheckInterval : null,
    initializeIframeResizeObserver: function (){
        let maxAttempts = 3;
        let noOfAttempts = 0;
        //This timer will poll till it gets the scroll element for max attempt of 3.
        let pollingForScroll = setInterval(() => {
            let scrollElementToWatch = IframeResizeUtility.get();
            noOfAttempts++;
            if(scrollElementToWatch != null){
                IframeResizeUtility.iframeResizeObserver(scrollElementToWatch);
            }
            if(noOfAttempts >= maxAttempts || scrollElementToWatch != null){
                clearInterval(pollingForScroll);
            }
        }, 1500)// polling interval is 1.5 seconds
    },
    disconnectIframeResizeObserver : function (){
        Message.setIframeHeightMessage(0);
        IframeResizeUtility.disconnect();
    },
    utf8Encode: function (inputString) {
        inputString = inputString.replace(/\r\n/g, "\n");
        var utftext = "";

        for (var n = 0; n < inputString.length; n++) {

            var c = inputString.charCodeAt(n);

            if (c < 128) {
                utftext += String.fromCharCode(c);
            } else if ((c > 127) && (c < 2048)) {
                utftext += String.fromCharCode((c >> 6) | 192);
                utftext += String.fromCharCode((c & 63) | 128);
            } else {
                utftext += String.fromCharCode((c >> 12) | 224);
                utftext += String.fromCharCode(((c >> 6) & 63) | 128);
                utftext += String.fromCharCode((c & 63) | 128);
            }
        }
        return utftext;
    },
    checkDirtyState: function(){
        if(BannerExperienceIntegration.initializeDirtyCheckForThePage) {
            let isDirty = CommonContext.isAppDirty();
           /* if (isDirty) {
                Messenger.send(Messenger.createStatusMessage("dirty:true"));
            } else {
                Messenger.send(Messenger.createStatusMessage("dirty:false"));
            }*/
        }
    },
    openPageInNewTab: function (path){
        Messenger.send(customMessage('navigateToNewTab',path))
    },
    getApplicationTitle: function () {
        const maxAttempts = 4;
        let noOfAttempts = 0;
        //This timer will poll till it gets the title element for max attempt of 4.
        let pollingForTitle = setInterval(() => {

            let headingTag = $('h1');
            let elementWithRoleHeading = $('[role="heading"]');
            let isTitleFound = false;

            if (headingTag && headingTag.length === 1 ) {
                BannerExperienceIntegration.setPageTitle(headingTag.text(),headingTag)
                isTitleFound = true;
            } else if (elementWithRoleHeading && elementWithRoleHeading.length >= 1) {
                if (elementWithRoleHeading.length > 1) {
                    _.each(elementWithRoleHeading, function (element) {
                        if($(element)[0].hasAttribute('aria-level') && $(element)[0].getAttribute("aria-level") === "1"){
                            BannerExperienceIntegration.setPageTitle($(element).text(),$(element))
                            isTitleFound = true;
                        }
                    });

                } else if (elementWithRoleHeading[0].getAttribute("aria-level") === "1" || !elementWithRoleHeading[0].hasAttribute('aria-level')){
                    BannerExperienceIntegration.setPageTitle(elementWithRoleHeading.text(),elementWithRoleHeading)
                    isTitleFound = true;
                }
            }
            noOfAttempts++;

            if (isTitleFound || (noOfAttempts >= maxAttempts || BannerExperienceIntegration.pageTitle.text.length > 0)) {
                BannerExperienceIntegration.pageTitle.element && BannerExperienceIntegration.pageTitle.element.length > 0 ? BannerExperienceIntegration.pageTitle.element.hide() : '';
                Message.setTitleMessage(BannerExperienceIntegration.pageTitle.text);
                clearInterval(pollingForTitle);
            }

        }, 500)// polling interval is 0.5 seconds
    },
    pageTitle:{
        text:'',
        element:null,
    },
    resetPageTitle: function(){
        BannerExperienceIntegration.setPageTitle('',null);
    },
    setPageTitle: function(titleText,titleElement){
        BannerExperienceIntegration.pageTitle.text = titleText;
        BannerExperienceIntegration.pageTitle.element = titleElement;
    },
    resetExperience: function () {
        var isAppNotDirty = !(CommonContext.isAppDirty() !== 'undefined' && CommonContext.isAppDirty());
        if (isAppNotDirty) {
            BannerExperienceIntegration.disconnectIframeResizeObserver();
            BannerExperienceIntegration.resetPageTitle();
            Messenger.send(Messenger.createActionMessage("reset"));
            clearInterval(BannerExperienceIntegration.dirtyCheckInterval);
        }
    }
};

/**
 * Utility to resize iframe based on content size
 *
 */
var IframeResizeUtility = {
    listOfElementToExclude : ['div[role="grid"]', 'xe-table-grid', '[load-data-on-scroll]','[data-exclude-scroll-experience="true"]','[load-on-scroll]','div[role="dialog"]','ul','.select2'],
    getComputedStyle: document.body && document.body.currentStyle ? function (elem) {
        return elem.currentStyle;
    } : function (elem) {
        return document.defaultView.getComputedStyle(elem, null);
    },

    getActualCss: function (elem, style) {
        return this.getComputedStyle(elem)[style];
    },

    isYScrollable: function (elem) {
        return elem.offsetHeight < elem.scrollHeight &&
            this.autoOrScroll(this.getActualCss(elem, 'overflow-y'));
    },

    removeYScroll: function (elem) {
        if (this.isYScrollable(elem)) {
            var existingStyle = $(elem).attr('style');
            var newStyle = "";
            if (existingStyle) {
                newStyle = existingStyle
            }
            newStyle = newStyle + "overflow-y : hidden !important;"
            $(elem).css({
                'cssText': newStyle
            });
        }
    },
    resetYScroll: function (elem) {
        if (!this.isYScrollable(elem)) {
            $(elem).css('overflow-y', '');
        }
    },
    autoOrScroll: function (text) {
        return text == 'scroll' || text == 'auto';
    },
    get: function () {
        var that = this;
        var elementsWithScroll = _.filter(document.querySelectorAll('*'), function (elem) {
            return that.isYScrollable(elem);
        });

        var elementToWatch = null;

        for (var i = 0; i < elementsWithScroll.length; i++) {

            if (elementToWatch == null || (elementsWithScroll[i].scrollHeight > elementToWatch.scrollHeight)) {
                elementToWatch = elementsWithScroll[i];
            }
        }

        if (elementToWatch) {
            for (const elementToExclude of this.listOfElementToExclude) {
                const parentElementToExclude = elementToWatch.closest(elementToExclude);
                if (parentElementToExclude != null) {
                    elementToWatch = null;
                    break;
                }
            }
        }


        return elementToWatch;
    },
    scrollElementToWatch: null,
    intervalID: null,
    /**
     * observe dimension change in observed element
     */
    resizeObserver : new ResizeObserver(function (entries) {
            IframeResizeUtility.iframeResizeAction();

        }
    ),
    /**
     * observe any mutation in observed element
     */
    mutationObserver : new MutationObserver(function (mutations) {
            IframeResizeUtility.iframeResizeAction();
        }
    ),
    iframeResizeAction: function () {
        IframeResizeUtility.removeYScroll(IframeResizeUtility.scrollElementToWatch);
        Message.setIframeHeightMessage(Math.max(document.body.offsetHeight, document.body.scrollHeight, IframeResizeUtility.scrollElementToWatch.scrollHeight));
    },
    iframeResizeObserver: function (elem) {
        this.scrollElementToWatch = elem;
        this.resizeObserver.observe(elem);
        this.mutationObserver.observe(elem, {
            attributes: true,
            childList: true,
            subtree: true
        });
    },
    disconnect: function () {
        this.resizeObserver.disconnect();
        this.mutationObserver.disconnect();
        if (this.scrollElementToWatch != null) {
            this.resetYScroll(this.scrollElementToWatch);
            this.scrollElementToWatch = null;
        }
        clearInterval(this.intervalID);
        this.intervalID = null;
    }
};

var process = process || {env: {NODE_ENV: "development"}};
/*
 * Version:    2.0-RC1
 * Build:      DEV
 * Date:       Tue Aug 09 11:59:46 IST 2016
 */
/**
 * almond 0.2.5 Copyright (c) 2011-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */

/* Copyright 2014 Ellucian Company L.P. and its affiliates. */

/* Copyright 2012-2014 Ellucian Company L.P. and its affiliates. */

/* Copyright 2012-214 Ellucian Company L.P. and its affiliates. */

(function(e,t){typeof define=="function"&&define.amd?define(t):e.M=t()})(this,function(){var requirejs,require,define;return function(e){function c(e,t){return f.call(e,t)}function h(e,t){var n,r,i,s,o,a,f,l,c,h,p=t&&t.split("/"),d=u.map,v=d&&d["*"]||{};if(e&&e.charAt(0)===".")if(t){p=p.slice(0,p.length-1),e=p.concat(e.split("/"));for(l=0;l<e.length;l+=1){h=e[l];if(h===".")e.splice(l,1),l-=1;else if(h===".."){if(l===1&&(e[2]===".."||e[0]===".."))break;l>0&&(e.splice(l-1,2),l-=2)}}e=e.join("/")}else e.indexOf("./")===0&&(e=e.substring(2));if((p||v)&&d){n=e.split("/");for(l=n.length;l>0;l-=1){r=n.slice(0,l).join("/");if(p)for(c=p.length;c>0;c-=1){i=d[p.slice(0,c).join("/")];if(i){i=i[r];if(i){s=i,o=l;break}}}if(s)break;!a&&v&&v[r]&&(a=v[r],f=l)}!s&&a&&(s=a,o=f),s&&(n.splice(0,o,s),e=n.join("/"))}return e}function p(t,r){return function(){return n.apply(e,l.call(arguments,0).concat([t,r]))}}function d(e){return function(t){return h(t,e)}}function v(e){return function(t){s[e]=t}}function m(n){if(c(o,n)){var r=o[n];delete o[n],a[n]=!0,t.apply(e,r)}if(!c(s,n)&&!c(a,n))throw new Error("No "+n);return s[n]}function g(e){var t,n=e?e.indexOf("!"):-1;return n>-1&&(t=e.substring(0,n),e=e.substring(n+1,e.length)),[t,e]}function y(e){return function(){return u&&u.config&&u.config[e]||{}}}var t,n,r,i,s={},o={},u={},a={},f=Object.prototype.hasOwnProperty,l=[].slice;r=function(e,t){var n,r=g(e),i=r[0];return e=r[1],i&&(i=h(i,t),n=m(i)),i?n&&n.normalize?e=n.normalize(e,d(t)):e=h(e,t):(e=h(e,t),r=g(e),i=r[0],e=r[1],i&&(n=m(i))),{f:i?i+"!"+e:e,n:e,pr:i,p:n}},i={require:function(e){return p(e)},exports:function(e){var t=s[e];return typeof t!="undefined"?t:s[e]={}},module:function(e){return{id:e,uri:"",exports:s[e],config:y(e)}}},t=function(t,n,u,f){var l,h,d,g,y,b=[],w;f=f||t;if(typeof u=="function"){n=!n.length&&u.length?["require","exports","module"]:n;for(y=0;y<n.length;y+=1){g=r(n[y],f),h=g.f;if(h==="require")b[y]=i.require(t);else if(h==="exports")b[y]=i.exports(t),w=!0;else if(h==="module")l=b[y]=i.module(t);else if(c(s,h)||c(o,h)||c(a,h))b[y]=m(h);else{if(!g.p)throw new Error(t+" missing "+h);g.p.load(g.n,p(f,!0),v(h),{}),b[y]=s[h]}}d=u.apply(s[t],b);if(t)if(l&&l.exports!==e&&l.exports!==s[t])s[t]=l.exports;else if(d!==e||!w)s[t]=d}else t&&(s[t]=u)},requirejs=require=n=function(s,o,a,f,l){return typeof s=="string"?i[s]?i[s](o):m(r(s,o).f):(s.splice||(u=s,o.splice?(s=o,o=a,a=null):s=e),o=o||function(){},typeof a=="function"&&(a=f,f=l),f?t(e,s,o,a):setTimeout(function(){t(e,s,o,a)},4),n)},n.config=function(e){return u=e,u.deps&&n(u.deps,u.callback),n},define=function(e,t,n){t.splice||(n=t,t=[]),!c(s,e)&&!c(o,e)&&(o[e]=[e,t,n])},define.amd={jQuery:!0}}(),define("almond",function(){}),function(){var e=Array.prototype,t=Object.prototype,n=e.forEach,r=t.hasOwnProperty,i={};define("magellan/each",[],function(){var e=function(e,t,s){if(e==null)return;if(n&&e.forEach===n)e.forEach(t,s);else if(e.length===+e.length){for(var o=0,u=e.length;o<u;o++)if(t.call(s,e[o],o,e)===i)return}else for(var a in e)if(r.call(e,a)&&t.call(s,e[a],a,e)===i)return};return e})}.call(null),function(){var e=Array.prototype,t=e.slice;define("magellan/extend",["magellan/each"],function(e){var n=function(n){return e(t.call(arguments,1),function(e){if(e)for(var t in e)n[t]=e[t]}),n};return n})}.call(null),function(){var e=Array.isArray,t=Object.prototype,n=Object.prototype.toString;define("magellan/is",["magellan/each"],function(t){var r=new Object;return r.array=e||function(e){return n.call(e)=="[object Array]"},r.object=function(e){return e===Object(e)},t(["Arguments","String","Number","Date","RegExp"],function(e){r[e.toLowerCase()]=function(t){return n.call(t)=="[object "+e+"]"}}),r.func=function(e){return n.call(e)=="[object Function]"},r.boolean=function(e){return e===!0||e===!1||n.call(e)=="[object Boolean]"},r.nullValue=function(e){return e===null},r.undefined=function(e){return e===void 0},r})}.call(null),function(){var e=Array.filter;define("magellan/filter",["magellan/each"],function(t){var n=function(n,r,i){var s=[];return n==null?s:e&&n.filter===e?n.filter(r,i):(t(n,function(e,t,n){r.call(i,e,t,n)&&(s[s.length]=e)}),s)};return n})}.call(null),function(e){var t={};define("magellan/emitter",["magellan/each","magellan/filter","magellan/is"],function(e,n,r){var i={emit:function(n,r){e(t[n],function(e){e(r)})},off:function(e,i){r.undefined(i)?delete t[e]:t[e]=n(t[e],function(e){return e!=i})},on:function(e,n){r.object(e)&&(e=e.type,call=e.callback),r.string(e)&&(r.undefined(t[e])?t[e]=[n]:r.array(t[e])&&t[e].push(n))},once:function(e,t){var n=this,r=function(i){t(i),n.off(e,r)};n.on(e,r)}};return i.once.bind(i),i})}.call(null,window),function(e,t){t("magellan/events",[],function(){return{navigate:"navigate",bringToFront:"bringToFront",addFooterApp:"addFooterApp",closeApp:"closeApp",requestHelp:"requestHelp",displayHelp:"displayHelp",menuLoaded:"menuLoaded",broadcast:"broadcast",send:"send",error:"error",addOpenItem:"addOpenItem",addRecentItem:"addRecentItem",removeOpenItem:"removeOpenItem",showSpecificMenu:"showSpecificMenu",appStatus:"appStatus",spin:"spin",stopSpin:"stopStpin",checkDataStates:"checkDataStates",searching:"searching",searchComplete:"searchComplete",open:"open",addCapability:"addCapability",removeCapability:"removeCapability",localActivityFound:"localActivityFound",keepAlive:"keepAlive",heartbeat:"heartbeat",addTimeoutCapability:"addTimeoutCapability",removeTimeoutCapability:"removeTimeoutCapability",addAlreadyOpen:"addAlreadyOpen",removeAlreadyOpen:"removeAlreadyOpen",displayLandingPage:"displayLandingPage",lastPageClosed:"lastPageClosed",clearSearchResult:"clearSearchResult",preventDefaultStopPropagation:"preventDefaultStopPropagation",closeKeyBoardShortCut:"closeKeyBoardShortCut",logout:"logout",scrollToTop:"scrollToTop",landingSearchInitFocus:"landingSearchInitFocus",loadMenu:"loadMenu"}})}.call(null,window,define),function(e,t,n){var r=e.location.hostname;_cookieMarker="magellan_",_homeCookieName=_cookieMarker+"home",n("magellan/cookies",["magellan/store"],function(e){return{set:function(e,n,i,s){var e=_cookieMarker+e,o=s?s:7200,u=new Date;u.setTime(u.getTime()+o*60*1e3);var a="expires="+u.toGMTString();t.cookie=e+"="+n+"; "+a+"; path=/; domain="+r},setSession:function(e,n){var e=_cookieMarker+e;t.cookie=e+"="+n+"; "},removeSession:function(e){var e=_cookieMarker+e;t.cookie=e+"=; expires=-1; path=/; domain="+r},get:function(e){var e=_cookieMarker+e+"=",n=t.cookie.split(";");for(var r=0;r<n.length;r++){var i=" "+n[r];while(i.charAt(0)==" "){i=i.substring(1,i.length);if(i.indexOf(e)==0)return i.substring(e.length,i.length)}}return undefined},remove:function(e,n){t.cookie=e+"=; expires=-1; path=/; domain="+r}}})}.call(null,window,document,define),function(window){define("magellan/json2",["magellan/is"],function(is){var JSON;return JSON||(JSON={}),function(){function f(e){return e<10?"0"+e:e}function quote(e){return escapable.lastIndex=0,escapable.test(e)?'"'+e.replace(escapable,function(e){var t=meta[e];return typeof t=="string"?t:"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)})+'"':'"'+e+'"'}function str(e,t){var n,r,i,s,o=gap,u,a=t[e];a&&typeof a=="object"&&typeof a.toJSON=="function"&&(a=a.toJSON(e)),typeof rep=="function"&&(a=rep.call(t,e,a));switch(typeof a){case"string":return quote(a);case"number":return isFinite(a)?String(a):"null";case"boolean":case"null":return String(a);case"object":if(!a)return"null";gap+=indent,u=[];if(Object.prototype.toString.apply(a)==="[object Array]"){s=a.length;for(n=0;n<s;n+=1)u[n]=str(n,a)||"null";return i=u.length===0?"[]":gap?"[\n"+gap+u.join(",\n"+gap)+"\n"+o+"]":"["+u.join(",")+"]",gap=o,i}if(rep&&typeof rep=="object"){s=rep.length;for(n=0;n<s;n+=1)typeof rep[n]=="string"&&(r=rep[n],i=str(r,a),i&&u.push(quote(r)+(gap?": ":":")+i))}else for(r in a)Object.prototype.hasOwnProperty.call(a,r)&&(i=str(r,a),i&&u.push(quote(r)+(gap?": ":":")+i));return i=u.length===0?"{}":gap?"{\n"+gap+u.join(",\n"+gap)+"\n"+o+"}":"{"+u.join(",")+"}",gap=o,i}}typeof Date.prototype.toJSON!="function"&&(Date.prototype.toJSON=function(e){return isFinite(this.valueOf())?this.getUTCFullYear()+"-"+f(this.getUTCMonth()+1)+"-"+f(this.getUTCDate())+"T"+f(this.getUTCHours())+":"+f(this.getUTCMinutes())+":"+f(this.getUTCSeconds())+"Z":null},String.prototype.toJSON=Number.prototype.toJSON=Boolean.prototype.toJSON=function(e){return this.valueOf()});var cx=/[\u0000\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,escapable=/[\\\"\x00-\x1f\x7f-\x9f\u00ad\u0600-\u0604\u070f\u17b4\u17b5\u200c-\u200f\u2028-\u202f\u2060-\u206f\ufeff\ufff0-\uffff]/g,gap,indent,meta={"\b":"\\b","	":"\\t","\n":"\\n","\f":"\\f","\r":"\\r",'"':'\\"',"\\":"\\\\"},rep;typeof JSON.stringify!="function"&&(JSON.stringify=function(e,t,n){var r;gap="",indent="";if(typeof n=="number")for(r=0;r<n;r+=1)indent+=" ";else typeof n=="string"&&(indent=n);rep=t;if(!t||typeof t=="function"||typeof t=="object"&&typeof t.length=="number")return str("",{"":e});throw new Error("JSON.stringify")}),typeof JSON.parse!="function"&&(JSON.parse=function(text,reviver){function walk(e,t){var n,r,i=e[t];if(i&&typeof i=="object")for(n in i)Object.prototype.hasOwnProperty.call(i,n)&&(r=walk(i,n),r!==undefined?i[n]=r:delete i[n]);return reviver.call(e,t,i)}var j;text=String(text),cx.lastIndex=0,cx.test(text)&&(text=text.replace(cx,function(e){return"\\u"+("0000"+e.charCodeAt(0).toString(16)).slice(-4)}));if(/^[\],:{}\s]*$/.test(text.replace(/\\(?:["\\\/bfnrt]|u[0-9a-fA-F]{4})/g,"@").replace(/"[^"\\\n\r]*"|true|false|null|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?/g,"]").replace(/(?:^|:|,)(?:\s*\[)+/g,"")))return j=eval("("+text+")"),typeof reviver=="function"?walk({"":j},""):j;throw new SyntaxError("JSON.parse")})}(),is.undefined(window.JSON)?JSON:window.JSON})}.call(null,window),function(e,t){var n={};t("magellan/store",["magellan/is","magellan/cookies","magellan/json2"],function(t,r,i){function u(){try{return e.localStorage.setItem(mod,"mod"),e.localStorage.removeItem(mod),!0}catch(t){return!1}}var s=function(n,s){s=t.object(s)?i.stringify(s):s,u()&&!t.undefined(e.localStorage)?e.localStorage[n]=s:r.set(n,s)},o=function(s){if(!t.undefined(n[s]))return n[s];if(u()&&!t.undefined(e.localStorage)&&!t.undefined(e.localStorage[s])){var o=e.localStorage[s];return o=o[0]=="{"?i.parse(o):o,o}return r.get(s)};return function(e,t,r){return t&&(n[e]=t),r&&s(e,t),o(e)}})}.call(null,window,define),function(e,t){t("magellan/messages",["magellan/is","magellan/each","magellan/extend","magellan/store"],function(e,t,n,r){return{localActivity:!1,heartbeat:-1,createFocusMessage:function(){return{type:"focus"}},createRequestMessage:function(e){return{type:"request",request:e}},createActionMessage:function(e){return{type:"request",request:"action",action:e}},createContextMessage:function(e){return e=e||{},n(e,{values:r("globalVariables")||{}}),{type:"context",context:e}},createNameValuePairMessage:function(e){return{type:"values",values:e||{}}},createHelpMessageByURL:function(e){return{type:"help",help:{url:e}}},createNavigationMessageByLocation:function(e){return{type:"navigate",navigate:{location:e}}},createApplicationPageNavigationMessage:function(e,t){var n={type:"navigate",page:e,values:t||{}};return n},createStatusMessage:function(e){return{type:"status",status:e}},createDataStateMessage:function(e){return{type:"dataState",state:e}},createErrorMessage:function(n){var r={type:"error",errors:[]};return e.string(n)?r.errors.push({message:n}):e.array(n)&&t(n,function(t){e.string(t)?r.errors.push({message:t}):r.errors.push({code:t.code,message:t.message})}),r},createConfirmationMessage:function(t,r,i){var s={};return e.object(t)?n(s,t):(s.title=t,s.message=r,s.responses=i),{type:"confirmation",confirmation:s}},createCapabilityMessage:function(e){return{type:"capability",capability:e}},createKeepAliveMessage:function(e){return{type:"keepAlive",keepAlive:e}},createHeartbeatMessage:function(e){return{type:"heartbeat",heartbeat:e}},createTimeoutCapabilityMessage:function(e){return{type:"timeoutCapability",timeoutCapability:e}},pollLocalActivity:function(){setInterval(function(){M.localActivity&&(M.localActivity=!1,M.send(M.createKeepAliveMessage(!0)))},M.heartbeat*1e3)},initializePollActivity:function(){M.heartbeat<0?M.send(M.createHeartbeatMessage(0)):M.pollLocalActivity()},createAlreadyOpenMessage:function(e){return{type:"alreadyOpen",alreadyOpen:e}},createLastPageClosedMessage:function(e){return{type:"lastPageClosed",action:e}}}})}.call(null,window,define),function(e){var t="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";e("magellan/encoder",["magellan/is","magellan/json2"],function(e,n){var r=function(r){e.string(r)||(r=n.stringify(r));var i="",s,o,u,a,f,l,c="",h=0;do s=r.charCodeAt(h++),o=r.charCodeAt(h++),u=r.charCodeAt(h++),a=s>>2,f=(s&3)<<4|o>>4,l=(o&15)<<2|u>>6,c=u&63,isNaN(o)?l=c=64:isNaN(u)&&(c=64),i=i+t.charAt(a)+t.charAt(f)+t.charAt(l)+t.charAt(c),s=o=u="",a=f=l=c="";while(h<r.length);return i},i=function(e){var n="",r,i,s,o,u,a,f="",l=0;e=e.replace(/[^A-Za-z0-9\+\/\=]/g,"");do o=t.indexOf(e.charAt(l++)),u=t.indexOf(e.charAt(l++)),a=t.indexOf(e.charAt(l++)),f=t.indexOf(e.charAt(l++)),r=o<<2|u>>4,i=(u&15)<<4|a>>2,s=(a&3)<<6|f,n+=String.fromCharCode(r),a!=64&&(n+=String.fromCharCode(i)),f!=64&&(n+=String.fromCharCode(s)),r=i=s="",o=u=a=f="";while(l<e.length);return n};return{encode:r,decode:i}})}.call(null,define),function(e,t){t("magellan/configuration",[],function(){return e.appconfig})}.call(null,window,define),function(e){define("magellan/i18n",["magellan/is","magellan/configuration"],function(e,t){return function(n){return!n||e.undefined(t.strings)?!1:e.undefined(t.strings[n])?n:t.strings[n]}})}.call(null,window),function(e,t){var n="*";t("magellan/xdm",["magellan/is","magellan/emitter","magellan/events","magellan/encoder","magellan/i18n","magellan/json2"],function(t,r,i,s,o,u){return{listen:function(t){e.postMessage?e.addEventListener?e.addEventListener("message",t,!1):e.attachEvent("onmessage",t,!1):r.emit(i.error,o("error-xdm"))},postMessage:function(a,f,l){f=f||e,l=l||n,f.postMessage?(t.object(a)&&(a=u.stringify(a)),a=s.encode(a),f.postMessage(a,l)):r.emit(i.error,o("error-xdm"))}}})}.call(null,window,define),function(){var e=Array.prototype,t=e.push;define("magellan/wrap",[],function(){var e=function(e,n){return function(){var r=[e];return t.apply(r,arguments),n.apply(this,r)}};return e})}.call(null),function(e){define("magellan/messenger",["magellan/is","magellan/emitter","magellan/events","magellan/messages","magellan/encoder","magellan/xdm","magellan/store","magellan/wrap","magellan/extend","magellan/json2"],function(e,t,n,r,i,s,o,u,a,f){function l(e){var t=o("magellanApplicationConfig")||{};a(t,{context:e}),o("magellanApplicationConfig",t)}return{origin:"*",messageHandler:null,start:function(t){var n=this;e.func(t)&&(t=u(t,function(e,t){t.type==="context"&&l(t.context),e(t)}),n.messageHandler=t),s.listen(function(e){n.handleCrossDomainMessage.call(n,e)}),n.send(n.createRequestMessage("context"))},handleCrossDomainMessage:function(r){var s=this;if(e.func(s.messageHandler)){var o=r.data;e.string(o)&&(o=r.data.match(/[A-Za-z0-9+/=]/)!=null?i.decode(o):o,o=f.parse(o)),s.messageHandler(o)}else t.emit(n.error,"handleCrossDomainMessage: no messageHandler established!")},getApplicationId:function(){var t=o("magellanApplicationConfig");return e.undefined(t)||e.undefined(t.context)||e.undefined(t.context.appid)?void 0:t.context.appid},send:function(e){e.origin=this.getApplicationId(),s.postMessage(e,parent)}}})}.call(null,window),function(){define("magellan/m",["magellan/extend","magellan/messenger","magellan/encoder","magellan/messages","magellan/store","magellan/json2"],function(e,t,n,r,i,s){var o=new Object;return o.store=i,o.json=s,e(o,t,n,r),o})}.call(null),require("magellan/m")});
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2009-2023 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/**
 * @class The class for holding the context for each individual managed application. <br>
 * Each managed application is given a generated application id for unique identification.<br>
 *
 * @author jmiller
 */
function ContextValueObject() {
    /**
     * The generated application id.
     * @type String
     */
    this.appid = "";
    /**
     * The URL of the parent Common UI Platform.
     * @type String
     */
    this.host = "";
    /**
     * The locale.
     * @type String
     */
    this.locale = "";
    /**
     * The default application page name for this managed application.
     * @type String
     */
    this.pageName = "";
}
;

/**
 * @class Singleton that manages all open managed applications and their integration in the Common UI Platform.
 * @author jmiller
 */
var ContentManager = {
    /**
     * @private
     *
     * The HTML element id that holds all the loaded content.
     * @type String
     */
    container: "content",
    /**
     * @private
     *
     * The HTML loader file, if exists.
     * @type String
     */
    processor: "banner.zul?page=",
    /**
     * @private
     *
     * Internal marker used to identifing managed content.
     * @type String
     */
    commonUIPlatformMarker: "CUIP",

    /**
     * @private
     *  delimiter used for constructing menu url before hitting backend
     *  @type String
     */
    delimiter:"~~",

    /**
     * Initializes this class.
     */
    initialize: function() {
        if ( $( '#' + ContentManager.container ).length == 0) {
            $( 'body' ).append( "<div id='" + ContentManager.container + "'></div>" );
        }
        ContentManager.calculateContentHeight();

        if($('meta[name=menuBaseURL]').attr("content")){
            ContentManager.processor = $('meta[name=menuBaseURL]').attr("content") + ContentManager.delimiter;
        }

    },
    /**
     * Instantiates a managed application.
     * @param {NavigationEntryValueObject} nav The NavigationEntryValueObject associated with the managed application to open.
     * @param {ContextValueObject} context The initial ContextValueObject the managed application is started with.
     */
    open: function( nav, context ) {
        this.addContent( nav, context );
    },
    /**
     * Closes the specified managed application and removes all associated HTML elements.
     * @param {string} name The name of the managed application to close.
     */
    close: function( name ) {
        this.removeContent( name );
    },
    /**
     * Closes all running managed applications.
     */
    closeAll: function() {
        $( '#' + this.container + ' > iframe' ).each( function( i ) {
            ContentManager.removeContent( $( this ).attr( 'id' ) );
        } );
    },
    /**
     * @private
     *
     * Removes the Common UI Platform identifier from the supplied string.
     * @param {string} name The name to parse.
     * @return {String} The input string with the CUIP id removed.
     */
    removeCUIP: function( name ) {
        if(name) {
            if ( name.indexOf( "_" + this.commonUIPlatformMarker ) !== -1 ) {
                name = name.substring( 0, name.indexOf( "_" + this.commonUIPlatformMarker ) );
            }
        }
        return name;
    },
    /**
     * @private
     *
     * Creates the necessary elements for displaying a managed applications and
     * appending them into the Document.
     *
     * @param {NavigationEntryValueObject} nav
     */
    addContent: function( nav, context ) {
        if (nav != null && nav.url != null &&  nav.url.match(/^http/)){
            window.location = nav.url;
            return;
        }
        if ( ContentManager.processor != '' )
            nav.url = nav.url.split( '.' )[0];
        window.location = ContentManager.processor + nav.url;
        // ZkApplication class is used to pass control from Aurora to the ZK Application framework
        // This can be replaced with window.location for other products
        //    ZkApplication.navigateTo( nav.url, nav.id );
        return;
    },
    /**
     * @private
     *
     * Removes any associated HTML elements for a managed application.
     *
     * @param {string} name
     */
    removeContent: function( name ) {
        OpenItems.remove( name );

        $( '#' + name ).remove();

        if ( ChannelManager.channels[name] ) {
            delete ChannelManager.channels[name];
        }
    },
    /**
     * Brings a managed application to the forefront of the display.
     *
     * @param {string} name The name of the managed application.
     */
    bringToFront: function( name ) {
        $( '#' + this.container + ' > iframe' ).css( "visibility", "visible" );

        $( '#' + name ).css( "visibility", "visible" );

        this.setActiveTab( name + OpenItems.openItemMarker );

        var item = OpenItems.getOpenItemByName( name );

        if ( item
            && item.navigationEntry instanceof NavigationEntryValueObject ) {
            if ( FragmentManager ) {
                FragmentManager.set( item.navigationEntry.menu + ContentManager.delimiter + item.navigationEntry.caption + ContentManager.delimiter + this.getCUIP( name ) );
            }

            this.setTitle( item.navigationEntry.caption );
        }
    },
    /**
     * @private
     *
     * Sets the Open Items list entry to active.
     *
     * @param {string} name The name of the open items entry.
     */
    setActiveTab: function( name ) {
        $( '#' + OpenItems.container + ' > li' ).removeClass( "activeOpenItem" );
        $( '#' + OpenItems.container + ' > #' + name ).addClass( "activeOpenItem" );
    },
    /**
     * @private
     *
     * Sets the browser window's title.
     * @param {string} title The title.
     */
    setTitle: function( title ) {
        if ( title ) {
            $( document ).attr( "title", title + " - Magellan" );
        }
    },

    /**
     * @private
     *
     * Maintains the dynamic height of the content area, auto-firing on window creation and resize.
     * This function corrects a scrollbar issue related to HTML div positioning.
     */
    calculateContentHeight: function() {
        var headerHeight = $( '#header:visible' ).height();
        var footerHeight = $( '#outerFooter' ).height();

        if ( !headerHeight ) {
            headerHeight = 0;
        }
    },
    /**
     * @private
     *
     * Generates a unique Common UI Platform identifier.
     * @return {String} The generated CUIP id.
     */
    generateUniqueId: function() {
        var dateObject = new Date();

        var uniqueId = this.commonUIPlatformMarker
            + Math.floor( Math.random() * 10001 );

        return uniqueId;
    },
    /**
     * @private
     *
     * Gets the Common UI Platform identifier from a given string (if present).
     * @param {name} name The name to parse.
     * @return String The CUIP id.
     */
    getCUIP: function( name ) {
        name = name.substring( (name.indexOf( this.commonUIPlatformMarker )) );

        if ( name.indexOf( "_" ) !== -1 ) {
            name = name.substring( 0, name.indexOf( "_" ) );
        }

        return name;
    },

    setContentPosition: function(){
        var headerHeight = $('#header-main-section').outerHeight() + $('#breadcrumb-panel').outerHeight();
        $( '#' + ContentManager.container).css('top', headerHeight);
        // In case of App is integrated with experience set top to a low value
        if(CommonContext.integratedWithExperience){
            $( '#' + ContentManager.container).css({
                'cssText': 'top: 5px !important'
            });
        }
    }
};

/**
 * @class The value object for holding NavigationEntry information. <br>
 * <br>
 * There are two types of NavigationEntry objects that are represented by this class. <br>
 * 1. Application invocation: Identifies all the necessary information for invoking an application. <br>
 * <br>
 * Example: http://some.domain.tld:8080/path/to/app?option1=one&option2=two <br>
 *          [protocol]://[host]:[port][path]?[options] <br>
 * <br>
 * Required fields: protocol, host <br>
 * Optional fields: port, path, options <br>
 * <br>
 * 2. Application specific page navigation: Identifiers the parent application to invoke and the specific page <br>
 * within the application to navigate to. <br>
 * <br>
 * @Required fields: parent, pageName <br>
 * <br>
 * @jmiller
 */
function NavigationEntryValueObject() {
    /**
     * The generated id.
     * @type Long
     */
    this.id = "";
    /**
     * The unique name for the entry.
     * @type String
     */
    this.name = "";
    /**
     * The menu hierachy for the entry.
     * @type String
     */
    this.menu = "";
    /**
     * The caption for the entry that is displayed to the user.
     * @type String
     */
    this.caption = "";
    /**
     * The host of the entry's content. Valid values: [IP address, domain name].
     * @type String
     */
    this.host = "";
    /**
     * The internal page name associated with the entry. If host is specified, this is the
     * default page for the entry. If host is not specified, this page name
     * represents a deep-link into an application in another entry (referenced by the 'parent' field).
     * @type String
     */
    this.page = "";
    /**
     * The parent application this entry is associated with.
     * @type String
     */
    this.parent = "";
    /**
     * The transmission protocol. Valid values: [http, https].
     * @type String
     */
    this.protocol = "";
    /**
     * The port the application in this entry runs on.
     * @type String
     */
    this.port = "";
    /**
     * The URL path this entry is located on.
     * @type String
     */
    this.path = "";
    /**
     * Any additional http URL options to be passed to the application.
     * @type String
     */
    this.options = "";
}
;

NavigationEntryValueObject.prototype.toXML = function() {
    var xml = "<NavigationEntryValueObject ";

    for ( var x in this ) {
        if ( typeof(this[x]) !== 'function'
            && this[x] != null
            && x != "url" ) {
            xml += x + "=\"" + this[x] + "\" ";
        }
    }

    xml += "/>";

    return xml;
};

/**
 * @class Navigation manager.
 *
 * @author jmiller
 */
var Navigation = {
    /**
     * @private
     * Indicates if the Navigation system has been initialized.
     */
    initialized: false,
    /**
     * @private
     * The navigation service's web service endpoint.
     */
    endpoints: ["/menu"],

    standaloneEndpoints: ["/menu", "xml/navigation.xml"],

    /**
     * @private
     * The enpoints for loaded additional navigation sections
     */
    feeds: ["/menu?type=Personal"],

    /**
     * @private
     * Key for each of the feed urls. This is used as an identifier
     */
    feedKeys: ["My Banner"],
    /**
     * @private
     * The active endpoint index.
     * @default 0
     */
    endpointIndex: -1,
    /**
     * @private
     * The active feed index.
     * @default 0
     */
    feedEndpointIndex: -1,
    /**
     * @private
     * The navigation entry hierarchy.
     */
    menuList: [],
    /**
     * @private
     * The navigation entry parent menu.
     */
    parentMenu: null,

    navItem: [],

    scrollableMenu: null ,

    nonLeafNavEntryValObjKey: "nonLeafNavEntryValObjKey",

    /**
     * Initializes the Navigation system.
     * @param {string} navEntryId The default navigation entry to load after initialization is complete.
     */
    initialize: function(scrollableList) {
        Navigation.setScrollableMenu (scrollableList);

        Navigation.endpointIndex += 1;

        if ( Navigation.endpointIndex >= Navigation.endpoints.length ) {
            ErrorManager.show( "Unable to load navigation entries." );
            return false;
        }

        var endpoint = Application.getMenuEndPoint();
        if (endpoint == null){
            var ep = Navigation.endpoints[Navigation.endpointIndex];
            ep = ep.replace( ":owner", CommonContext.pidm );
            ep = ep.replace( ":roles", CommonContext.roles );

            /*var endpoint = window.location.protocol
                    + "//"
                    + window.location.host
                    + ep;*/

            if (endpoint == null)
                endpoint = Application.getApplicationPath() + ep;
        }

        var usageTracking = Application.getusageTrackingURL();

        if (window.Application.isUserAuthenticated() && usageTracking ){
            ServiceManager.get( usageTracking, Navigation.usageTrackerResults);
        }
        ServiceManager.get( endpoint, Navigation.handleServiceResults );
    },

    setScrollableMenu: function (sMenu) {
        Navigation.scrollableMenu = sMenu;
    },

    loadFeeds: function() {
        Navigation.feedEndpointIndex += 1;

        if ( Navigation.feedEndpointIndex >= Navigation.feeds.length ) {
            Navigation.scrollableMenu.reinitialize( 0 );

            Navigation.onLoadComplete();
            return false;
        }

        var ep = Navigation.feeds[Navigation.feedEndpointIndex];
        /*var endpoint = window.location.protocol
                + "//"
                + window.location.host
                + ep;*/

        var endpoint = Application.getApplicationPath()
            + ep;

        ServiceManager.get( endpoint, Navigation.handleFeedResults );
    },
    /**
     * @private
     *
     * Processes a XML Document that represents available navigation entries and establish
     * the navigation system.
     * @param {XMLDocument} xmldoc The XML Document to parse.
     */
    handleServiceResults: function( xmldoc, scroll ) {
        if ( !xmldoc ) {
            Navigation.initialized = false;
            return;
        }
        if ( xmldoc.status ) { // means its an XMLHttpRequest object, without XML
            if ( xmldoc.status == 404
                || xmldoc.status == 500 ) {
                Navigation.initialize(Navigation.scrollableMenu);
            }
            return;
        }
        var vo = Navigation.loadXML( xmldoc );
        if ( CommonContext.standalone == true ) {
            var nav = vo[0];
            if ( nav != null ) {
                var location = nav.menu.split( ContentManager.delimiter );

                Navigation.removeParent( location );

                for ( var x in vo ) {
                    if ( vo[x] instanceof NavigationEntryValueObject ) {
                        Navigation.addMenuEntryStandAlone( vo[x] );
                        nav = vo[x];
                    }
                }
                Navigation.loadFeeds();
            }
        } else {

            for ( var x in vo ) {
                if ( vo[x] instanceof NavigationEntryValueObject ) {
                    Navigation.addMenuEntry( vo[x] );
                }
            }
            Navigation.scrollableMenu.initialize();
            Navigation.initialized = true;
        }
    },
    /**
     * @private
     *
     * Processes a feed XML Document that represents available navigation entries and establish
     * the navigation system.
     * @param {XMLDocument} xmldoc The XML Document to parse.
     */
    handleFeedResults: function( xmldoc ) {
        if ( !xmldoc ) {
            Navigation.initialized = false;
            return;
        }
        if ( xmldoc.status ) { // means its an XMLHttpRequest object
            if ( xmldoc.status == 404
                || xmldoc.status == 500 ) {
                Navigation.loadFeeds();
                return;
            }
        }
        var vo = Navigation.loadXML( xmldoc );
        if ( CommonContext.standalone == true ) {
            var nav = vo[0];
            if ( nav != null ) {
//                nav.menu = Navigation.feedKeys[Navigation.feedEndpointIndex] + "/" + nav.menu;
                var location = nav.menu.split( ContentManager.delimiter );

                Navigation.removeParent( location );

                for ( var x in vo ) {
                    if ( vo[x] instanceof NavigationEntryValueObject ) {
                        // ensure the feed entries go under their own category
//                        if(x == NavigationEntryValueObject.menu) {
//                            vo[x].menu = Navigation.feedKeys[Navigation.feedEndpointIndex] + "/" + vo[x].menu;
//                        }
                        Navigation.addMenuEntryStandAlone( vo[x] );
                        nav = vo[x];
                    }
                }

                Navigation.scrollableMenu.reinitialize( location );

                Navigation.onLoadComplete();
            }
        }
    },

    usageTrackerResults: function(json) {
        var formatedJSON = JSON.parse(json);
        $("meta[name='isUsageTrackingEnabled']").attr("content", formatedJSON.isUsageTrackingEnabled);
        var isEllucianTrackerAllowed = formatedJSON.isEllucianTrackerAllowed;
        var isTrackerIdAvailable = formatedJSON.isTrackerIdAvailable;
        var isUsageTrackingEnabled = formatedJSON.isUsageTrackingEnabled;
        if ((isEllucianTrackerAllowed === true || isTrackerIdAvailable === 'Y')
            && !isUsageTrackingEnabled){
            enhanceUserExperiencePopup();
        }
        if (isEllucianTrackerAllowed === false && isTrackerIdAvailable === 'N') {
            ToolsMenu.removeItem('EnhanceExp');
            if (window['privacySettingSectionRequired'] === false) {
                ToolsMenu.removeSection('privacySetting_title');
            }
        }
        if ($('meta[name=isLanguageSettingRequired]').attr("content") === "false") {
            ToolsMenu.removeItem('Preference');
        }
    },
    /**
     * Processes a XML Document that represents available navigation entries.
     *
     * @param {XMLDocument} xmldoc The XML Document to parse.
     * @return NavigationEntryValueObject[] The navigation entries loaded.
     */
    loadXML: function( xmldoc ) {
        if ( !xmldoc ) {
            return null;
        }

        var entries = xmldoc.getElementsByTagName( "NavigationEntryValueObject" );

        var vo = [];

        for ( var x = 0; x < entries.length; x++ ) {
            if ( !entries[x].attributes ) {
                continue;
            }

            var nav = new NavigationEntryValueObject();

            for ( var y = 0; y < entries[x].attributes.length; y++ ) {
                nav[entries[x].attributes[y].nodeName] = entries[x].attributes[y].nodeValue;
            }

            if ( !nav.menu ) {
                nav.menu = "none";
            }

            //This is for standalone mode.
            if ( Navigation.parentMenu != null && CommonContext.standalone == true ) {
                if ( Navigation.parentMenu.menu == "" || Navigation.parentMenu.menu == null ) {
                    nav.menu = Navigation.parentMenu.caption;
                    var arr = Navigation.parentMenu.path.split( ContentManager.delimiter );
                    nav.path = ContentManager.delimiter + arr[1] + ContentManager.delimiter + nav.path;

                } else {
                    nav.menu = Navigation.parentMenu.menu + "||" + Navigation.parentMenu.caption;
                    var arr = Navigation.parentMenu.path.split( ContentManager.delimiter );
                    nav.path = ContentManager.delimiter + arr[1] + ContentManager.delimiter + nav.path;
                }
                nav.port = Navigation.parentMenu.port;
                nav.protocol = Navigation.parentMenu.protocol;
                nav.host = Navigation.parentMenu.host;
            }

            if (nav.url == null || !nav.url.match(/^http/)){
                nav.url = (nav.protocol ? nav.protocol + "://" : "")
                    + (nav.host ? nav.host : "")
                    + (nav.port ? ":" + nav.port : "")
                    + (nav.path ? nav.path : "")
                    + (nav.options ? nav.options : "");
            }

            vo.push( nav );
        }

        return vo;
    },

    /**
     * @private
     * called after all enpoints are loaded
     */
    onLoadComplete: function() {
        Navigation.initialized = true;
        if ( !NavigationRC.initialized )
            NavigationRC.initialize();
    },
    /**
     * Indicates the state of the Navigation system.
     * @return {Boolean} True is the navigation system is initialized, otherwise false.
     */
    isInitialized: function() {
        return initialized;
    },
    /**
     * @private
     *
     * Adds the supplied NavigationEntryValueObject object into the Navigation system.
     * @param {NavigationEntryValueObject} nav
     */
    addMenuEntryStandAlone: function( nav ) {
        if ( nav.menu == null
            || !(nav instanceof NavigationEntryValueObject) ) {
            return;
        }

        var location = nav.menu.split( ContentManager.delimiter );

        Navigation.recurseMenuStructureStandAlone( location, nav );
    },
    /**
     * @private
     *
     * Finds a NavigationEntryValueObject using the supplied menu/name hierarchy for standalone mode.
     * @param {Object} hierarchy
     * @return {Array}
     */
    recurseMenuStructureStandAlone: function( hierarchy, nav ) {

        var tmpArray = Navigation.menuList;
        var singleArr = [nav];
        var indx = 0;

        $.each( hierarchy,
            function( i, value ) {

                if ( !tmpArray[i] && !tmpArray[value] ) {
                    tmpArray[value] = [];
                }

                indx = indx + 1;
                tmpArray = tmpArray[value];

            }
        );
        tmpArray[nav.caption] = nav;
        return tmpArray;
    },

    /**
     * @private
     *
     * Adds the supplied NavigationEntryValueObject object into the Navigation system.
     * @param {NavigationEntryValueObject} nav
     */
    addMenuEntry: function( nav ) {
        if ( nav.menu == null
            || !(nav instanceof NavigationEntryValueObject) ) {
            return;
        }

        var location = nav.menu.split( "/" );

        Navigation.recurseMenuStructure( location ).push( nav );
    },
    /**
     * @private
     *
     * Finds a NavigationEntryValueObject using the supplied menu/name hierarchy.
     * @param {Object} hierarchy
     * @return {Array}
     */
    recurseMenuStructure: function( hierarchy ) {
        var tmpArray = Navigation.menuList;
        const OBJECT_PROTOTYPE_KEYS = Object.getOwnPropertyNames(Object.prototype);
        for ( var x in hierarchy ) {
            if ( !tmpArray[hierarchy[x]] && !(OBJECT_PROTOTYPE_KEYS.includes(tmpArray[hierarchy[x]])) ) {
                tmpArray[hierarchy[x]] = [];
            }

            tmpArray = tmpArray[hierarchy[x]];
        }

        return tmpArray;
    },
    /**
     * @private
     *
     * Finds a NavigationEntryValueObject using the supplied menu/name hierarchy.
     * @param {Object} hierarchy
     * @return {Array}
     */
    getMenuStructure: function( hierarchy ) {
        var tmpArray = Navigation.menuList;

        var item = hierarchy.pop();
        if ( item == 'none' ) {
            return tmpArray;
        }

        for ( var x in hierarchy ) {
            if ( typeof hierarchy[x] == 'function' )
                continue;

            if ( !tmpArray[hierarchy[x]] ) {
                tmpArray[hierarchy[x]] = [];
            }

            tmpArray = tmpArray[hierarchy[x]];
        }

        return tmpArray;
    },
    /**
     * @private
     *
     * Finds a NavigationEntryValueObject using the supplied menu/name hierarchy.
     * @param {Object} hierarchy
     * @return {Array}
     */
    removeParent: function( hierarchy ) {

        var tmpArray = Navigation.menuList;

        if ( tmpArray.length > 0 ) {
            var indx = 0;

            $.each( hierarchy,
                function( i, value ) {

                    indx = indx + 1;

                    if ( tmpArray[value] instanceof NavigationEntryValueObject && indx == hierarchy.length ) {
                        tmpArray[value] = [];
                    } else {
                        tmpArray = tmpArray[value];
                    }
                }
            );
        }


        return tmpArray;
    },
    /**
     * @private
     *
     * Generates an HTML based menu of nested <ul> elements from the navigation
     * hierarchy.
     * @return {String} The generated navigation menu.
     */
    generateHTMLMenu: function() {
        return Navigation.recurseGenerateMenu( Navigation.menuList );
    },
    /**
     * @private
     *
     * Recursively processes the navigation entires producing HTML output.
     *
     * @param {Array} menu The navigation entry multidimental associative array to process.
     * @return {String} The generated navigation menu.
     */
    recurseGenerateMenu: function( menu ) {
        var out = "";

        for ( var x in menu ) {
            if ( menu[x] instanceof Array && ! menu[x][Navigation.nonLeafNavEntryValObjKey]) {
                out += "<li class='ui-finder-folder'><a>" + x + "</a>";
                out += "<ul>" + Navigation.recurseGenerateMenu( menu[x] ) + "</ul>";
                out += "</li>";
            } else if ( menu[x] instanceof NavigationEntryValueObject ) {
                out += "<li onclick=\"toggleBrowseMenu();Navigation.navigate('" + menu[x].id + "');\"><a>" + menu[x].caption + "</a></li>";
            }
        }

        return out;
    },
    /**
     * Searchs the available NavigationEntries by the specified input.
     * Acceptable input is the discreet name for the NavigationEntryValueObject or the full menu/name hierachy.
     *
     * @param {string} name The name or hierachy to search with.
     * @return {NavigationEntryValueObject} The found navigation entry.
     */
    findNavigationEntry: function( name ) {
        if ( !name ) {
            return false;
        }

        if ( name.indexOf( ContentManager.delimiter ) != -1 ) {
            return Navigation.pathFindNavigationEntry( name );
        } else {
            return Navigation.recurseFindNavigationEntry( Navigation.menuList, name );
        }
    },
    /**
     * @private
     *
     * Searchs for a NavigationEntryValueObject via menu hierachy.
     * @param {string} name The name to search for.
     * @return {NavigationEntryValueObject} The found navigation entry.
     */
    pathFindNavigationEntry: function( name ) {
        var leaf = name.substring( name.lastIndexOf( ContentManager.delimiter ) + 1 );
        var branch = name.substring( 0, name.lastIndexOf( ContentManager.delimiter ) );

        var hierarchy = branch.split( ContentManager.delimiter );

        var tmpArray = Navigation.menuList;

        for ( var x in hierarchy ) {
            if ( tmpArray[hierarchy[x]]
                && tmpArray[hierarchy[x]] instanceof Array ) {
                tmpArray = tmpArray[hierarchy[x]];
            }
        }

        if ( tmpArray ) {
            for ( var x in tmpArray ) {
                if ( tmpArray[x] instanceof NavigationEntryValueObject ) {
                    if ( tmpArray[x].name == leaf
                        || tmpArray[x].caption == leaf ) {
                        return tmpArray[x];
                    }
                }
            }
        }

        return null;
    },
    /**
     * @private
     *
     * Searchs for a NavigationEntryValueObject via name.
     * @param {string} menu The menu tier to within.
     * @param {string} name The name to search with.
     * @return {NavigationEntryValueObject} The found navigation entry.
     */
    recurseFindNavigationEntry: function( menu, nameOrId ) {
        var out = null;

        for ( var x in menu ) {
            if (x != Navigation.nonLeafNavEntryValObjKey) {
                if ( menu[x] instanceof Array ) {
                    out = Navigation.recurseFindNavigationEntry( menu[x], nameOrId );
                } else if ( menu[x] instanceof NavigationEntryValueObject ) {
                    if ( menu[x].name == nameOrId || menu[x].id == nameOrId) {
                        out = menu[x];
                    }
                }

                if ( out != null ) {
                    break;
                }
            }
        }

        return out;
    },
    /**
     * Searchs for a NavigationEntryValueObject and if found returns it's caption.
     * @param {String} name The NavigationEntryValueObject name to search for.
     * @return {String} The caption associated with the found navigation entry.
     */
    findNavigationEntryCaption: function( name ) {
        var navEntry = Navigation.findNavigationEntry( name );

        if ( navEntry ) {
            return navEntry.caption;
        }
        return null;
    },
    /**
     * Searchs for a NavigationEntryValueObject and if found returns it's source.
     * @param {String} name The NavigationEntryValueObject name to search for.
     * @return {String} The source associated with the found navigation entry.
     */
    findNavigationEntrySource: function( name ) {
        var navEntry = Navigation.findNavigationEntry( name );

        if ( navEntry ) {
            return navEntry.url;
        }
        return null;
    },
    /**
     * Searchs the available NavigationEntries by the specified input.
     * Acceptable input is the discreet name for the NavigationEntryValueObject.
     *
     * @param {string} name The name or hierachy to search with.
     * @return boolean true/false.
     */
    removeNavigationEntry: function( name ) {
        if ( !name ) {
            return false;
        }

        return Navigation.recurseRemoveNavigationEntry( Navigation.menuList, name );
    },
    /**
     * @private
     *
     * Searchs for a NavigationEntryValueObject via name for deletion.
     * @param {string} menu The menu tier to within.
     * @param {string} name The name to search with.
     * @return {NavigationEntryValueObject} The found navigation entry.
     */
    recurseRemoveNavigationEntry: function( menu, name ) {
        var out = false;

        for ( var x in menu ) {
            if (x != Navigation.nonLeafNavEntryValObjKey) {
                if ( menu[x] instanceof Array ) {
                    out = Navigation.recurseRemoveNavigationEntry( menu[x], name );
                } else if ( menu[x] instanceof NavigationEntryValueObject ) {
                    if ( menu[x].name == name ) {
                        var f = menu[x];
                        delete menu[x];

                        //adding a Navigation.nonLeafNavEntryValObjKey mapping to the navigationEntryValueObject for the menu object
                        // and will be added as one of its values.
                        menu[f.name] = [];
                        var tmpArray = menu[f.name];
                        tmpArray[Navigation.nonLeafNavEntryValObjKey] = f;
                        out = true;
                    }
                }

                if ( out == true ) {
                    break;
                }
            }
        }

        return out;
    },
    /**
     * Navigates  to the specified entry. Valid input is either a <object>NavigationEntryValueObject</object>
     * object or a valid navigation entry identifier (name or menu/caption).
     *
     * @param {NavigationEntryValueObject || String} nav
     */
    navigate: function( nav ) {
        var navEntry;

        if ( nav instanceof NavigationEntryValueObject ) {
            navEntry = nav;
        } else {
            navEntry = Navigation.findNavigationEntry( nav );
        }

        if ( !navEntry ) {
            return;
        }

        if ( navEntry.page
            && navEntry.parent ) {
            var app = OpenItems.findAnyOpenItemByName( navEntry.parent );

            if ( app instanceof OpenItemValueObject
                && app.navigationEntry instanceof NavigationEntryValueObject ) {
                ContentManager.bringToFront( app.navigationEntry.name + "_" + app.cuipid );
            } else {
                var context = new ContextValueObject()

                context.pageName = navEntry.page;

                ContentManager.open( Navigation.findNavigationEntry( navEntry.parent ), context );
            }

            if ( $( "li.activeOpenItem" ) ) {
                var activeFrameName = $( "li.activeOpenItem" ).attr( "id" ).replace( OpenItems.openItemMarker, "" );

                ChannelManager.send( createApplicationPageNavigationMessage( navEntry.page ), activeFrameName );
            }
        } else {
            var app = OpenItems.findAnyOpenItemByName( navEntry.name );

            if ( app ) {
                ContentManager.bringToFront( app.navigationEntry.name + "_" + app.cuipid );
            } else {
                var context = new ContextValueObject()

                if ( navEntry.page !== "" ) {
                    context.pageName = navEntry.page;
                }

                ContentManager.open( navEntry, context );
            }

        }
    },


    /**
     * Fetches the next navigation list based on the Navigation Object passed.
     * @param {NavigationEntryValueObject || String} nav
     */
    nextNavItem: function(nav, item ) {
        Navigation.navItem = {'item': item, 'nav':nav};

        var navEntry;

        if ( nav instanceof NavigationEntryValueObject ) {
            navEntry = nav;
        } else {
            navEntry = Navigation.findNavigationEntry( nav );
        }
        if ( Navigation.parentMenu == null ) {
            var endpoint = Application.getMenuEndPoint();

            if(endpoint == null){

                var ep = Navigation.standaloneEndpoints[0];
                if ( navEntry.params != "" && navEntry.params != null ) {
                    ep += '&' + navEntry.params;
                }

                /*var endpoint = window.location.protocol + "//"
                                                    + window.location.host + ep;*/
                var endpoint = Application.getApplicationPath()
                    + ep;
            }
            endpoint = endpoint + "?menuName=" + navEntry.form + "&menu="+ encodeURIComponent(navEntry.menu) + ContentManager.delimiter + encodeURIComponent(navEntry.name) + "&seq=" + navEntry.id;

            Navigation.removeNavigationEntry( navEntry.name );
//            Navigation.parentMenu = navEntry;
            ServiceManager.get( endpoint, Navigation.handleServiceResults );

        } else {
            if ( navEntry.options == "" || navEntry.options == null ) {
                var tempArr = navEntry.path.split( ContentManager.delimiter );
                var ep = Navigation.standaloneEndpoints[0] + ContentManager.delimiter + tempArr[tempArr.length - 1] + ContentManager.delimiter + CommonContext.udcid;
                /*var endpoint = window.location.protocol + "//"
                        + window.location.host + ep;*/
                var endpoint = Application.getApplicationPath()
                    + ep;
                Navigation.parentMenu = navEntry;
                ServiceManager.get( endpoint, Navigation.handleServiceResults );
            } else {

                var temp = navEntry.options.substring( navEntry.options.lastIndexOf( "=" ) + 1 )
                var ep = Navigation.standaloneEndpoints[0] + ContentManager.delimiter + temp + ContentManager.delimiter + CommonContext.udcid;
                /*var endpoint = window.location.protocol + "//"
                        + window.location.host + ep;*/
                var endpoint = Application.getApplicationPath()
                    + ep;
                Navigation.parentMenu = navEntry;
                ServiceManager.get( endpoint, Navigation.handleServiceResults );
            }
        }
    }
};

/**
 * @class The data structure for holding Workspace information.
 * @author jmiller
 */
function WorkspaceValueObject() {
    /**
     * Indicates if this workspace is the owner's default home workspace.
     * @type Boolean
     */
    this.home = false;
    /**
     * A generated id for the workspace.
     * @type Long
     */
    this.id = -1;
    /**
     * The name of the workspace.
     * @type String
     */
    this.name = "";
    /**
     * The <object>NavigationEntryValueObject</object> objects associated to this workspace.
     * @type NavigationEntryValueObject[]
     */
    this.navigationEntries = [];
    /**
     * The owner of the workspace.
     * @type Integer
     */
    this.owner = -1;
    /**
     * The version of the workspace.
     * @type Integer
     */
    this.version = -1;
}


/**
 * @class The class for holding all the necessary information for an opened managed
 * application.
 *
 * @param navigationEntry The <object>NavigationEntryValueObject</object> being loaded.
 * @param context The initial <object>ContextValueObject</object> the managed application
 * is being invoked in.
 *
 * @author jmiller
 */
function OpenItemValueObject( navigationEntry, context ) {
    /**
     * The name of the managed application.
     * @type String
     */
    this.name = navigationEntry.name;
    /**
     * The generated Common UI Platform id for this managed application.
     * @type String
     */
    this.cuipid = ContentManager.generateUniqueId();
    /**
     * The <object>NavigationEntryValueObject</object> for the managed application.
     * @type NavigationEntryValueObject
     */
    this.navigationEntry = navigationEntry;
    /**
     * The initial <object>ContextValueObject</object> the managed application is invoked within.
     * @type ContextValueObject
     */
    this.context = context;
}

/**
 * @class The singleton class manager for the OpenItemValueObject display components.
 *
 * @author jmiller
 */
var OpenItems = {
    /**
     * @private
     *
     * Internal list of all currently open content.
     * @type OpenItemValueObject[]
     */
    items: [],
    /**
     * @private
     * Internal marker added to the id field of UI components put into the open items container.
     * @type {String}
     */
    openItemMarker: "-openitem",
    /**
     * @private
     * The id of the HTML container Open Item entries should be put in.
     * @type {String}
     */
    container: "openItems",
    /**
     * @private
     * Initialization routine.
     */
    initialize:function() {
        var oi = $( "<div id='openItemsContainer'>"
            + "<div id='openItemsHeader'>"
            + "<div>"
            + "<h3><span class='openItemsCount'>Open Items (0)</span></h3>"
            + "<span id='headerCloseButton' alt='Close' title='Close'></span>"
            + "</div>"
            + "</div>"
            + "<div id='openItemsBody'>"
            + "<ul id='categoryList' style='height:150px; overflow:auto'></ul>"
            + "</div>"
            + "<div id='openItemsFooter'>"
            + "<div class='buttonBar'>"
            + "</div>"
            + "</div>"
            + "</div>" );

        oi.find( '.buttonBar' ).append( Button( "closeAllOpenItemsButton", "openitems_label_closeAll",
            function() {
                ContentManager.closeAll();
                toggleFooterOpenItems();
            } ) );
        oi.find( '.buttonBar' ).append( Button( "closeOpenItemsButton", "openitems_label_closeSelected",
            function() {
                ContentManager.close( $( "li.activeOpenItem" ).attr( "id" ).replace( OpenItems.openItemMarker, "" ) );
            } ) );

        $( "#headerCloseButton, #footerOpenItemsApplication" ).bind( "click", toggleFooterOpenItems );

        $( "#openItemsIcon" ).click( function() {
            $( "#openItemsContainer" ).show();
        } );
        $(document).on("click","#categoryList > li > h4", function() {
            if ( $( this ).next().is( ':visible' ) ) {
                $( this ).find( 'div' ).removeClass( 'downArrow' );
                $( this ).find( 'div' ).addClass( 'rightArrow' );
            } else {
                $( this ).find( 'div' ).removeClass( 'rightArrow' );
                $( this ).find( 'div' ).addClass( 'downArrow' );
            }

            $( this ).next().toggle( "fast" );
        } );


        // this should be a className change instead
        $( ".itemList li" ).click( function() {
            ContentManager.setActiveTab( $( this ).attr( "id" ) );
        } );
    },
    /**
     * Creates and adds the Open Item UI components for a managed application.
     *
     * @param {OpenItemValueObject} openItem The OpenItemValueObject to add.
     */
    add: function( openItem ) {
        var found = false;
        var category = openItem.navigationEntry.menu.substring( openItem.navigationEntry.menu.lastIndexOf( ContentManager.delimiter ) + 1 );
        var name = openItem.navigationEntry.name + "_" + openItem.cuipid;
        var tab = name + this.openItemMarker;

        $( '#categoryList > li' ).each( function( i ) {
            if ( $( this ).find( 'h4' ).text() === category ) {
                $( this ).find( 'ul' ).append( "<li id='" + tab + "' class='activeOpenItem' onclick=\"ContentManager.bringToFront('" + name + "');\"><a>" + openItem.navigationEntry.caption + "</a></li>" );
                found = true;
            }
        } );

        if ( !found ) {
            var newCategory = "<li>"
                + "<h4><div class='downArrow'></div>" + category + "</h4>"
                + "<ul class='itemList' id='openItems'>"
                + "<li id='" + tab + "' class='activeOpenItem' onclick=\"ContentManager.bringToFront('" + name + "');\"><a>" + openItem.navigationEntry.caption + "</a></li>"
                + "</ul>"
                + "</li>";

            $( '#categoryList' ).append( newCategory );
        }

        this.items[name] = openItem;

        this.updateCountDisplay();
    },
    /**
     * Adds an OpenItemValueObject element for a ApplicationPage specific to a managed application.
     * @param {String} appid The managed application's Common Platform id.
     * @param {String} page The name of the ApplicationPage.
     */
    addApplicationPage: function( appid, page ) {
        var element = $( '#categoryList > li > ul > #' + appid + OpenItems.openItemMarker );
        var name = appid + "-" + page + OpenItems.openItemMarker;

        if ( element.length == 1 ) {
            $( '#categoryList > li > ul > li' ).removeClass( "activeOpenItem" );

            element.after( "<li id='" + name + "' class='activeOpenItem' onclick=\"ContentManager.bringToFront('" + name + "');\"><a>" + page + "</a></li>" );
        }

        this.updateCountDisplay();
    },
    /**
     * Finds the first open instance of the specified managed application and
     * returns it associated OpenItemValueObject object.
     *
     * @param {string} name The name of the managed application.
     * @return {OpenItem} The found object, NULL if none were found.
     */
    findAnyOpenItemByName: function( name ) {
        name = ContentManager.removeCUIP( name );

        for ( var x in this.items ) {
            if ( name === ContentManager.removeCUIP( this.items[x].name ) ) {
                return this.items[x];
            }
        }

        return null;
    },
    /**
     * Returns an array of all <object>OpenItem</objects> objects.
     * @return {Array} The <object>OpenItem</objects> objects.
     */
    getOpenItems: function() {
        return this.items;
    },
    /**
     * Returns the <object>OpenItem</objects> object with the specified
     * <object>NavigatioNentryValueObject</object> id.
     * @return {Array} The found <object>OpenItem</objects> or NULL if not found.
     */
    getOpenItemById: function( id ) {
        for ( var x in this.items ) {
            if ( this.items[x].navigationEntry
                && this.items[x].navigationEntry.id === id ) {
                return this.items[x];
            }
        }

        return null;
    },
    /**
     * Returns the <object>OpenItem</objects> object with the specified
     * <object>NavigatioNentryValueObject</object> id.
     * @return {Array} The found <object>OpenItem</objects> or NULL if not found.
     */
    getOpenItemByName: function( name ) {
        if ( this.items[name] ) {
            return this.items[name];
        }
        return null;
    },
    /**
     * @private
     *
     * Brings the previous sibling managed application to the front.
     */
    gotoPreviousTab: function() {
        if ( $( "li.activeOpenItem" ).prev().length > 0 ) {
            $( "li.activeOpenItem" ).prev().trigger( "click" );
        } else {
            $( "li.activeOpenItem" ).next().trigger( "click" );
        }
    },
    /**
     * Indicates if the specified managed application is presently open.
     * @param {string} name The name of the managed application.
     * @return {boolean} True if the specified application is open, otherwise False.
     */
    isOpen: function( name ) {
        if ( this.items[name] ) {
            return true;
        }
        return false;
    },
    /**
     * Returns the number of managed applications that are open.
     * @return {int} The count of <object>OpenItems</objects> objects.
     */
    size: function() {
        var count = 0;
        for ( var x in this.items ) {
            count += 1;
        }
        return count;
    },
    /**
     * Removes the Open Item UI components for a managed application.
     *
     * @param {string} name
     */
    remove: function( name ) {
        delete this.items[name];

        var name = name + this.openItemMarker

        if ( $( '#' + name ).attr( "className" ) == "activeOpenItem" ) {
            this.gotoPreviousTab();
        }

        var parentCategory = $( '#' + name ).parent().parent();

        if ( parentCategory.find( 'li' ).length === 1 ) {
            parentCategory.empty();
            parentCategory.remove();
        } else {
            $( '#' + name ).remove();
        }

        this.updateCountDisplay();
    },
    /**
     * Removes an OpenItemValueObject element for a ApplicationPage specific to a managed application.
     * @param {String} appid The managed application's Common Platform id.
     * @param {String} page The name of the ApplicationPage.
     */
    removeApplicationPage: function( appid, page ) {
        var name = appid + "-" + page + OpenItems.openItemMarker;
        var element = $( '#' + name );

        if ( element.length == 1 ) {
            element.remove();
        }

        this.updateCountDisplay();
    },
    /**
     * @private
     *
     * Maintains the Open Item count displayed to the user.
     */
    updateCountDisplay: function() {
        $( '.openItemsCount' ).text( "Open Items (" + this.size() + ")" );
    },
    getActiveOpenItem: function() {
        if ( $( '.activeOpenItem' ).length <= 0 ) {
            return null;
        }

        var name = $( '.activeOpenItem' ).attr( 'id' ).replace( OpenItems.openItemMarker, "" );

        if ( name ) {
            return this.getOpenItemByName( name );
        }
        return null;
    }
};

function toggleFooterOpenItems() {
    if ( $( '#openItemsContainer' ).is( ":hidden" ) ) {
        $( '#footerOpenItemsApplication' ).addClass( "footerOpenItemsIconHover" );
        $( '#openItemsContainer' ).css( "left", $( "#footerOpenItemsApplication" ).offset().left );
        $( '#openItemsContainer' ).fadeIn();
    } else {
        $( '#footerOpenItemsApplication' ).removeClass( "footerOpenItemsIconHover" );
        $( '#openItemsContainer' ).fadeOut();
    }
}

var process = process || {env: {NODE_ENV: "development"}};
/*********************************************************************************
 Copyright 2009-2024 Ellucian Company L.P. and its affiliates.
 **********************************************************************************/
var scrollableList = new ScrollableMenuTable('#menuContainer', Navigation.menuList);

var CommonPlatform = {
	/**
	 * @private
	 */
	defaultPageName :null,

    loadStylesAtRuntime: false,

    /**
	 * Initialization method.
	 * options include:
	 * defaultApplicationName {String}
	 * standalone {Boolean}
	 *
	 * @param {Object} options
	 */
	initialize : function(options) {

        Application.initialize();

		if (typeof (options) == 'object') {

			if (options.iframe && typeof(options.iframe) == 'boolean' && options.iframe) {
				CommonContext.iframe = options.iframe;
			}

			CommonContext.hideSSBHeaderComps=$('meta[name=hideSSBHeaderComps]').attr("content");
			CommonContext.hideBannerMenu = $('meta[name=guestAuthenticationEnabled]').attr("content");
			CommonContext.openSSBInExperience=$('meta[name=openSSBInExperience]').attr("content");

			CommonContext.integratedWithExperience = CommonContext.openSSBInExperience === "true" && CommonContext.iframe;

			if (options.defaultPageName && typeof(options.defaultPageName) == 'string') {
				CommonPlatform.defaultPageName = options.defaultPageName;
			}

            if(options.loadStylesAtRuntime) {
                CommonPlatform.loadStylesAtRuntime = options.loadStylesAtRuntime;
            }

			if (options.handler && typeof(options.handler) == 'function' && !(CommonContext.integratedWithExperience)) {
					Messenger.initialize(options.handler);
			}

            if (options.resourceMap) {
                ResourceManager.addResourceMap( options.resourceMap );
            }


			if (options.standalone && typeof(options.standalone) == 'boolean' && options.standalone) {
				CommonContext.standalone = options.standalone;

				Authenticator.authenticateUser()

                // TODO:  We should pass in the user and not have to use 'CommonContext.user'
                // TODO:  Add options.user
				$('.userIdentityText').text(CommonContext.user);

                Localization.initialize(options.langDir);

                //Initialize header
				if (options.header && typeof(options.header) == 'boolean' && options.header || options.header == null) {
                    $('body').prepend(AuroraHeader.createSkeleton());
					if (typeof xe !== 'undefined' && xe.extensionsFound) {  //Patch for AngularJS Banner Menu extension
						if(typeof xe.jq === "undefined" ) {
							xe.extend($('#bannerMenuDiv'));
						}
					}
                    AuroraHeader.placeEastPart(options);
                    AuroraHeader.fillWestPart();
					if (options.globalNav && typeof (options.globalNav) == 'boolean' && options.globalNav || options.globalNav == null) {
                        AuroraHeader.addNavigationControls();
                        Navigation.initialize(scrollableList);
                        scrollableList.initialize();
					}
                    AuroraHeader.addBodyClickListenerToCloseAllMenus();
				}

				ContentManager.initialize();

				//In initialize footer
				if (options.footer && typeof (options.footer) == 'boolean' && options.footer || options.footer == null) {
					if(!(CommonContext.integratedWithExperience)) {
						Footer.initialize();
					}
					OpenItems.initialize();
				}

				ContentManager.calculateContentHeight();
			}
            // dispatch event after a small delay
            setTimeout("EventDispatcher.dispatchEvent(Application.events.initialized)", 10);

			if(CommonContext.integratedWithExperience){
				Message.setBreadcrumbMessage();
			}

		}
	}
}

/**
 * @author jmiller
 */
var Authenticator = {

	/**
	 * Gets user details by inspecting meta tags in HTML.
	 */
	authenticateUser : function() {
        var fullName = $('meta[name=fullName]').attr("content");
        var mepDesc = $('meta[name=ssbMepDesc]').attr("content");

		if (fullName) {
			const xssRegex = /((%3C)|<)[^\n]+((%3E)|>*)/gi;
			CommonContext.user = fullName.replace(xssRegex, '');
	    }

        if (mepDesc) {
            CommonContext.mepHomeContext  = mepDesc;
        }
	}
}

/**
 * Provides delayed Common Platform initialization control.
 */
var Bootstraper = {
	/**
	 * @private
	 * The list of callback functions to be executed during the bootstrape process.
	 */
	functions : [],
	/**
	 * Adds a function to be called during the bootstraping process.
	 * @param {Function} callback The function to add.
	 */
	add : function(callback) {
		Bootstraper.functions.push(callback);
	},
	/**
	 * Starts the bootstraping process.
	 */
	go : function() {
		for ( var x = 0; x < Bootstraper.functions.length; x++) {
			if (typeof (Bootstraper.functions[x]) == 'function') {
				Bootstraper.functions[x]();
			}
		}
	}
}

/**
 * @class A generalized context for the current Common UI Platform session.
 * @author jmiller
 */
var CommonContext = {

    /**
     * The current page id
     */
    currentPage :null,

    /**
     * The MEP Home Context.
     */
    mepHomeContext :null,

	/**
	 * The authenticated user's name.
	 */
	user :null,
	/**
	 * The authenticated UDCID.
	 */
	udcid :null,
	/**
	 * Banner Internal ID.
	 */
	pidm :null,
	/**
	 * Granted roles.
	 */
	roles :"",
	/**
	 * The authorized UDCIdentity XML Document.
	 *
	 * @type {XMLDocument} The XMLDocument that is authorized.
	 */
	udcIdentity :null,
	/**
	 * The current locale.
	 * @type String
	 * @default "en"
	 */
	locale :"en",
	/**
	 * Indicates if the managed application is standalone.
	 *
	 * @type Boolean
	 * @default false
	 */
	standalone :false,

	/**
	 * Indicates if ssb application is opening inside the other app
	 *@type Boolean
	 *@default false
	 * **/
	hideSSBHeaderComps : false,

	/**
	 * Indicates if application is opening inside the iframe
	 *@type Boolean
	 *@default false
	 * **/
	iframe : false,

	/**
	 * Indicated the application is dirty or not
	 * @type Boolean
	 * @default false
	 */
	isAppDirty : function(){},

	/**
	 * Callback object of inactivity timer to reset
	 */
	resetInActivityTimer : null,

	/**
	 * Callback Object of Notification to remove the notification on Keep alive message
	 */
	removeNotification : null,

	/**
	 * Indicates local activity based on the boolean value
	 */
	keepAlive	:	false,

	/**
	 * Indicates if SSB app is opening inside Ellucian Experience. This will be a URL search parameter
	 *@type Boolean
	 *@default false
	 * **/

	openSSBInExperience : false,

	/**
	 * Indicates if SSB app is integrated with Ellucian Experience
	 *@type Boolean
	 *@default false
	 * **/

	integratedWithExperience : false,

	/**
	 * Indicates if Iframe scrolling is enabled in Ellucian Experience for integrated SSB apps
	 *@type Boolean
	 *@default true
	 * **/

	iframeScrollingInExperience : true

};


/**
 * @class Singleton class for managing all web service invocations.
 * @author jmiller
 */
var ServiceManager = {
	/**
	 * Invokes the specified web service using a HTTP GET request.
	 *
	 * @param {string} url The web service URL.
	 * @param {Function} callback A function to be called when data is returned or on error. (optional)
	 */
	get : function(url, callback) {
		this.ajax("GET", url, null, callback);
	},
	/**
	 * Invokes the specified web service using a HTTP PUT request.
	 *
	 * @param {string} url The web service URL.
	 * @param {Function} callback A function to be called when data is returned or on error. (optional)
	 */
	put : function(url, data, callback) {
		this.ajax("PUT", url, data, callback);
	},
	/**
	 * Invokes the specified web service using a HTTP POST request.
	 *
	 * @param {string} url The web service URL.
	 * @param {string} data The data to send.
	 * @param {Function} callback A function to be called when data is returned or on error. (optional)
	 */
	post : function(url, data, callback) {
		this.ajax("POST", url, data, callback);
	},
	/**
	 * Invokes the specified web service using a HTTP DELETE request.
	 *
	 * @param {string} url The web service URL.
	 * @param {string} data The data to send.
	 * @param {Function} callback A function to be called when data is returned or on error. (optional)
	 */
	remove : function(url, data, callback) {
		this.ajax("DELETE", url, data, callback);
	},
    /**
	 * Invokes the specified web service using a HTTP HEAD request.
	 *
	 * @param {string} url The web service URL.
	 * @param {Function} callback A function to be called when data is returned or on error. (optional)
	 */
    head: function(url, callback) {
        var xmlhttp = null;

		if (window.XMLHttpRequest) {
			xmlhttp = new XMLHttpRequest();
		} else if (window.ActiveXObject) {
			xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
		}

		if (xmlhttp != null) {
			xmlhttp.onreadystatechange = stateChange;
			xmlhttp.open("HEAD", url, true);
			xmlhttp.send(null);
		} else {
			ErrorManager.show("Your browser does not support XMLHTTP.");
		}

		function stateChange() {
			if (xmlhttp.readyState == 4) { // 4 = "loaded"
                if (xmlhttp.status == 200) { // 200 = "OK"
                    callback(xmlhttp);
                }
			}
		}
	},
	/**
	 * @private
	 *
	 * Invokes the specific AJAX call.
	 *
	 * @param {string} httpMethod The HTTP request method type to use. GET, POST, PUT, and DELETE.
	 * @param {string} url The web service URL.
	 * @param {string} data The data to send. (optional)
	 * @param {Function} callback A function to be called when data is returned or on error. (optional)
	 */
	ajax : function(httpMethod, url, data, callback) {
		var xmlhttp = null;

		if (window.XMLHttpRequest) {
			xmlhttp = new XMLHttpRequest();
		} else if (window.ActiveXObject) {
			xmlhttp = new ActiveXObject("Microsoft.XMLHTTP");
		}

		if (xmlhttp != null) {
			xmlhttp.onreadystatechange = stateChange;
			xmlhttp.open(httpMethod, url, true);
			xmlhttp.send(data);
		} else {
			ErrorManager.show("Your browser does not support XMLHTTP.");
		}

		function stateChange() {
			if (xmlhttp.readyState == 4) { // 4 = "loaded"
				if (xmlhttp.status == 200) { // 200 = "OK"
					if (callback && typeof (callback) === "function") {

						if (xmlhttp.responseXML) {
							callback(xmlhttp.responseXML);
						} else {
							callback(xmlhttp.responseText);
						}

					}
				} else {
					if (callback && typeof (callback) === "function") {
						callback(xmlhttp);
					}
				}
			}
		}
	}
}

/**
 * @class A singleton class for managing the state of the URL Fragment Identifier.
 * @author jmiller
 */
var FragmentManager = {
	/**
	 * @private
	 *
	 * The established handlers that should be invoked when a fragment change occurs.
	 * @type Function[]
	 */
	handlers : [],
	/**
	 * @private
	 *
	 * The last processed fragment identifier.
	 * @type String
	 */
	currentFragment :"",
	/**
	 * @private
	 *
	 * The interval id generated when polling is started. Used to stop polling, when needed.
	 * @type Integer
	 */
	pollIntervalId :null,
	/**
	 * Initialization routine.
	 */
	initialize : function() {
		FragmentManager.addHandler(handleFragment);

		function handleFragment(frag) {
			if (frag.indexOf("/") !== -1) {
				var cuip = frag.substring(frag.lastIndexOf("/") + 1);

				if (cuip.length > 4
						&& cuip.substring(0, 4) === ContentManager.commonUIPlatformMarker) {
					frag = frag.substring(0, frag.lastIndexOf("/"));

					var nav = Navigation.findNavigationEntry(frag);

					if (!nav) {
						return;
					}

					var name = nav.name + "_" + cuip;

					if (OpenItems.isOpen(name)) {
						ContentManager.bringToFront(name);
					} else {
						var anyApp = OpenItems.findAnyOpenItemByName(name);

						if (anyApp instanceof OpenItemValueObject) {
							ContentManager
									.bringToFront(anyApp.navigationEntry.name);
						} else {
							var context = new ContextValueObject()

							if (nav.page && nav.page !== "") {
								context.pageName = nav.page;
							}

							Navigation.navigate(frag);
						}
					}
				} else {
					var nav = Navigation.findNavigationEntry(frag);

					if (!nav) {
						return;
					}

					var context = new ContextValueObject()

					if (nav.page && nav.page !== "") {
						context.pageName = nav.page;
					}

					Navigation.navigate(nav, context);
				}
			}
		}
	},
	/**
	 * @private
	 *
	 * Starts fragment identifier polling.
	 */
	startPolling : function() {
		if (FragmentManager.pollIntervalId) {
			return;
		}

		FragmentManager.pollIntervalId = setInterval(FragmentManager.poll, 250);
	},
	/**
	 * @private
	 *
	 * Stops fragment identifier polling.
	 */
	stopPolling : function() {
		if (FragmentManager.pollIntervalId) {
			clearInterval(FragmentManager.pollIntervalId);
		}
	},
	/**
	 * Adds a new handler function to be invoked when the fragment identifier changes.
	 * If polling is not already started, this method will initiate it.
	 *
	 * @param {Function} callback
	 */
	addHandler : function(callback) {
		if (callback && typeof (callback) === 'function') {
			FragmentManager.handlers.push(callback);

			FragmentManager.startPolling();
		}
	},
	/**
	 * @private
	 *
	 * Checks the current fragment identifer against the previously processed fragment.
	 * If they are different, it passes the new fragment to all established handlers.
	 */
	poll : function() {
		var frag = FragmentManager.get();

		if (frag) {
			frag = FragmentManager.sanitize(frag);

			if (frag == FragmentManager.currentFragment) {
				return;
			} else {

				for ( var x = 0; x < FragmentManager.handlers.length; x++) {
					if (typeof (FragmentManager.handlers[x]) === 'function') {
						FragmentManager.handlers[x](frag);
					}
				}
			}
		}
	},
	/**
	 * @private
	 *
	 * Sanitizes incoming fragments for proper processing.
	 *
	 * @param {String} frag The unprocessed fragment.
	 * @return {String} The sanitized fragment.
	 */
	sanitize : function(frag) {
		frag = frag.replace(/\%20/g, " ");
		return frag;
	},
	/**
	 * Sets the URL fragment identifier to the specified value.
	 *
	 * @param {String} fragment
	 */
	set : function(fragment) {
		if (fragment === FragmentManager.currentFragment) {
			return;
		} else {
			FragmentManager.currentFragment = fragment;
		}

		var frag = window.location.hash;

		if (frag) {
			frag = frag.substr(1);

			if (frag === fragment) {
				return;
			} else {
				window.location.hash = fragment;
			}
		} else {
			window.location.hash = fragment;
		}
	},
	/**
	 * Utility method for retrieving the fragment identifier.
	 *
	 * @return {String} The fragment on the URL or null if there is not one.
	 */
	get : function() {
		var frag = window.location.hash;

		if (frag) {
			return frag.substr(1);
		}

		return null;
	}
};

/**
 * @class The singleton class that handles all localization related tasks.<br>
 * <br>
 * Supports dynamic resource bundle loading and has some support for right to left languages.<br>
 *
 * @author jmiller
 */
var Localization = {
	/**
	 * Initializes the localization system.
	 */
	initialize : function(langDir) {
        var direction = "ltr"
        if(langDir) {
            direction = langDir;
        }
        Localization.setLangDirection(direction);
	},

	/**
	 * @private
	 *
	 * Utility method for handling right-to-left/left-to-right language changes.
	 * @param {String} direction The direction of the localized text. Valid values: ["ltr", "rtl"].
	 */
	setLangDirection : function(direction) {
		if (direction == "ltr" || direction == "rtl") {
			if (Localization.getLangDirection() != direction) {
				$('html').css("direction", direction);

                if (document.createStyleSheet){
                    document.createStyleSheet('style.css');
                }

                if(CommonPlatform.loadStylesAtRuntime) {
                    Localization.loadStyles();
                }
			}
		}
	},
	/**
	 * Returns the currenting localized text direction.
	 * @return {String} The direction of text layout, "ltr" or "rtl". Default value is "ltr".
	 */
	getLangDirection : function() {
		if (!$('html').css("direction")) {
			return "ltr";
		}
		return $('html').css("direction");
	},
	/**
	 * @private
	 *
	 * Utility method for handling the UI component layout for language direction changes.
	 */
	toggleFloatDirection : function() {
		$('*:not(#prefWindow > div):not(#errorWindow > div)').each(
				function(i) {
					if ($(this).css("float")) {
						if ($(this).css("float") == "right") {
							$(this).css("float", "left");
						} else if ($(this).css("float") == "left") {
							$(this).css("float", "right");
						}
					}
				});
	},

	loadStyles: function() {

		if(typeof cssFiles == 'undefined' || cssFiles.length == 0) {
			var dom = document.styleSheets;
			var len = dom.length;
			for (var i = 0; i < len; i++) {

				StylesheetFormatter.toggle(i);
			}
		} else {
			for(var i=0; i<cssFiles.length; i++) {
				StylesheetFormatter.toggle(cssFiles[i]);
			}
		}
	},

	/**
	 * @private
	 *
	 * Utility method for toggling css properties using the DOM.
	 */
	toggleDirection : function() {

		var exceptions = ['prefwindow', 'errorwindow', '.browsebutton div', '.browsebutton div div', '.htmlbutton', '.menu',
		'.menu div', '.menusmall div'];

		var dom = document.styleSheets;
		var len = dom.length;
		for(var i = 0; i< len; i++) {

			var css;
			/*if (jQuery.browser.msie) {
				css = dom[i].rules;
			} else {
			 */
				css = dom[i].cssRules;
//			}

			var clen = css.length;
			for(var j = 0; j< clen; j++) {
				if(css[j].style) {

					var style = css[j].style;
					var selector = css[j].selectorText;

					if($.inArray(selector.toLowerCase(), exceptions) == -1) {

						//float
						/*if (jQuery.browser.msie) {
							if(style.styleFloat) {
								if(style.styleFloat == 'left') {
									style.styleFloat = 'right';
								} else if(style.styleFloat == 'right'){
									style.styleFloat = 'left';
								}
							}
						}
						else
						{
						 */
							if(style.cssFloat) {
								if(style.cssFloat == 'left') {
									style.cssFloat = 'right';
								} else if(style.cssFloat == 'right'){
									style.cssFloat = 'left';
								}
							}
//						}

						// marginLeft/marginRight
						var ml = style.marginLeft;
						var mr = style.marginRight;
						style.marginLeft = '';
						style.marginRight = '';
						if(ml)
							style.marginRight = ml;
						if(mr)
							style.marginLeft = mr;

						// paddingLeft/paddingRight
						var pl = style.paddingLeft;
						var pr = style.paddingRight;
						style.paddingLeft = null;
						style.paddingRight = null;
						if(pl)
							style.paddingRight = pl;
						if(pr)
							style.paddingLeft = pr;

						// left/right
						var l = style.left;
						var r = style.right;
						style.left = '';
						style.right = '';
						if(l!='') {
							style.right = l;
						}
						if(r!='') {
							style.left = r;
						}

						//text-align
						var ta = style.textAlign;
						if(ta == 'left') {
							style.textAlign = 'right';
						} else if(ta == 'right') {
							style.textAlign = 'left';
						}

						// borderLeft/borderRight
						var bl = style.borderLeft;
						var br = style.borderRight;
						style.borderLeft = '';
						style.borderRight = '';
						if(bl) {
							style.borderRight = bl;
						}
						if(br) {
							style.borderLeft = br;
						}
					}
				}
			}
		}
	}


};


var ResourceManager = {

    resourceMap : {},

    addResourceMap: function( map ) {
        // Extend the resourceMap with the map
        this.resourceMap = map;
    },
    destroyResourceMap: function() {
        this.resourceMap = {};
    },
	getString : function(key) {
		var value = this.resourceMap[ key ];

        if (value) {
            return value;
        }
        else {
            return key;
        }
	}
}

function ResourceBundle(name, content, locale) {
	this.name = name;
	this.content = content;
	this.locale = locale;
}

function Resource(key, value) {
	this.key = key;
	this.value = value;
}

var process = process || {env: {NODE_ENV: "development"}};
//= require utils.js
//= require config.js
//= require aurora-nonHierarchicalMenu.js
//= require common-controls.js
//= require aurora-breadcrumb-title.js
//= require aurora-menu.js
//= require common-integration.js
//= require unifiedmenu/m.js
//= require common-navigation.js
//= require common-platform.js
var process = process || {env: {NODE_ENV: "development"}};
//= require modules/jquery-mf.js
//= require html5shim.js
//= require underscore.js
//= require underscore.string.js
//= require backbone.js
//= require common/backbone-custom.js
//= require backbone.modelbinding.js
//= require backbone.datagridview.js
//= require backbone.pagedcollection.js
//= require jquery-plugins/jquery.i18n.properties.js
//= require yepnope.1.0.1-min.js
//= require log4javascript.js
//= require common/activity-timer.js
//= require modernizr-2.5.3.js
//= require ICanHaz.js
//= require handlebars.js
//= require common/logging.js
//= require common/common.js
//= require jquery-plugins/jquery.sghe.dirtycheck.js
//= require common/notification-center.js
//= require jquery-plugins/jquery.hoverintent.js
//= require jquery-plugins/jquery.jeditable.js
//= require jquery-plugins/jquery.simplemodal-1.4.1.js
//= require jquery-plugins/jquery.jeditable.datepicker.js
//= require modules/aurora-common-mf.js

var process = process || {env: {NODE_ENV: "development"}};
/*!
 * ui-grid - v4.8.3 - 2019-10-21
 * Copyright (c) 2019 ; License: MIT 
 */

(function() {
	'use strict';

	angular.module('ui.grid.i18n', []);
	angular.module('ui.grid', ['ui.grid.i18n']);
})();

(function() {
  'use strict';
  /**
   *  @ngdoc overview
   *  @name ui.grid.autoResize
   *
   *  @description
   *
   *  #ui.grid.autoResize
   *
   *  <div class="alert alert-warning" role="alert"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>
   *
   *  This module provides auto-resizing functionality to UI-Grid.
   */
  var module = angular.module('ui.grid.autoResize', ['ui.grid']);

  /**
   *  @ngdoc directive
   *  @name ui.grid.autoResize.directive:uiGridAutoResize
   *  @element div
   *  @restrict A
   *
   *  @description Stacks on top of the ui-grid directive and
   *  adds the a watch to the grid's height and width which refreshes
   *  the grid content whenever its dimensions change.
   *
   */
  module.directive('uiGridAutoResize', ['gridUtil', function(gridUtil) {
    return {
      require: 'uiGrid',
      scope: false,
      link: function($scope, $elm, $attrs, uiGridCtrl) {
        var debouncedRefresh;

        function getDimensions() {
          return {
            width: gridUtil.elementWidth($elm),
            height: gridUtil.elementHeight($elm)
          };
        }

        function refreshGrid(prevWidth, prevHeight, width, height) {
          if ($elm[0].offsetParent !== null) {
            uiGridCtrl.grid.gridWidth = width;
            uiGridCtrl.grid.gridHeight = height;
            uiGridCtrl.grid.queueGridRefresh()
              .then(function() {
                uiGridCtrl.grid.api.core.raise.gridDimensionChanged(prevHeight, prevWidth, height, width);
              });
          }
        }

        debouncedRefresh = gridUtil.debounce(refreshGrid, 400);

        $scope.$watchCollection(getDimensions, function(newValues, oldValues) {
          if (!angular.equals(newValues, oldValues)) {
            debouncedRefresh(oldValues.width, oldValues.height, newValues.width, newValues.height);
          }
        });
      }
    };
  }]);
})();

(function () {
  'use strict';

  /**
   *  @ngdoc overview
   *  @name ui.grid.cellNav
   *
   *  @description

      #ui.grid.cellNav

      <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>

      This module provides cell navigation functionality to UI-Grid.
   */
  var module = angular.module('ui.grid.cellNav', ['ui.grid']);

  /**
   *  @ngdoc object
   *  @name ui.grid.cellNav.constant:uiGridCellNavConstants
   *
   *  @description constants available in cellNav
   */
  module.constant('uiGridCellNavConstants', {
    FEATURE_NAME: 'gridCellNav',
    CELL_NAV_EVENT: 'cellNav',
    direction: {LEFT: 0, RIGHT: 1, UP: 2, DOWN: 3, PG_UP: 4, PG_DOWN: 5},
    EVENT_TYPE: {
      KEYDOWN: 0,
      CLICK: 1,
      CLEAR: 2
    }
  });


  module.factory('uiGridCellNavFactory', ['gridUtil', 'uiGridConstants', 'uiGridCellNavConstants', 'GridRowColumn', '$q',
    function (gridUtil, uiGridConstants, uiGridCellNavConstants, GridRowColumn, $q) {
      /**
       *  @ngdoc object
       *  @name ui.grid.cellNav.object:CellNav
       *  @description returns a CellNav prototype function
       *  @param {object} rowContainer container for rows
       *  @param {object} colContainer parent column container
       *  @param {object} leftColContainer column container to the left of parent
       *  @param {object} rightColContainer column container to the right of parent
       */
      var UiGridCellNav = function UiGridCellNav(rowContainer, colContainer, leftColContainer, rightColContainer) {
        this.rows = rowContainer.visibleRowCache;
        this.columns = colContainer.visibleColumnCache;
        this.leftColumns = leftColContainer ? leftColContainer.visibleColumnCache : [];
        this.rightColumns = rightColContainer ? rightColContainer.visibleColumnCache : [];
        this.bodyContainer = rowContainer;
      };

      /** returns focusable columns of all containers */
      UiGridCellNav.prototype.getFocusableCols = function () {
        var allColumns = this.leftColumns.concat(this.columns, this.rightColumns);

        return allColumns.filter(function (col) {
          return col.colDef.allowCellFocus;
        });
      };

      /**
       *  @ngdoc object
       *  @name ui.grid.cellNav.api:GridRow
       *
       *  @description GridRow settings for cellNav feature, these are available to be
       *  set only internally (for example, by other features)
       */

      /**
       *  @ngdoc object
       *  @name allowCellFocus
       *  @propertyOf  ui.grid.cellNav.api:GridRow
       *  @description Enable focus on a cell within this row.  If set to false then no cells
       *  in this row can be focused - group header rows as an example would set this to false.
       *  <br/>Defaults to true
       */
      /** returns focusable rows */
      UiGridCellNav.prototype.getFocusableRows = function () {
        return this.rows.filter(function(row) {
          return row.allowCellFocus !== false;
        });
      };

      UiGridCellNav.prototype.getNextRowCol = function (direction, curRow, curCol) {
        switch (direction) {
          case uiGridCellNavConstants.direction.LEFT:
            return this.getRowColLeft(curRow, curCol);
          case uiGridCellNavConstants.direction.RIGHT:
            return this.getRowColRight(curRow, curCol);
          case uiGridCellNavConstants.direction.UP:
            return this.getRowColUp(curRow, curCol);
          case uiGridCellNavConstants.direction.DOWN:
            return this.getRowColDown(curRow, curCol);
          case uiGridCellNavConstants.direction.PG_UP:
            return this.getRowColPageUp(curRow, curCol);
          case uiGridCellNavConstants.direction.PG_DOWN:
            return this.getRowColPageDown(curRow, curCol);
        }
      };

      UiGridCellNav.prototype.initializeSelection = function () {
        var focusableCols = this.getFocusableCols();
        var focusableRows = this.getFocusableRows();
        if (focusableCols.length === 0 || focusableRows.length === 0) {
          return null;
        }

        return new GridRowColumn(focusableRows[0], focusableCols[0]); // return same row
      };

      UiGridCellNav.prototype.getRowColLeft = function (curRow, curCol) {
        var focusableCols = this.getFocusableCols();
        var focusableRows = this.getFocusableRows();
        var curColIndex = focusableCols.indexOf(curCol);
        var curRowIndex = focusableRows.indexOf(curRow);

        // could not find column in focusable Columns so set it to 1
        if (curColIndex === -1) {
          curColIndex = 1;
        }

        var nextColIndex = curColIndex === 0 ? focusableCols.length - 1 : curColIndex - 1;

        // get column to left
        if (nextColIndex >= curColIndex) {
          // On the first row
          // if (curRowIndex === 0 && curColIndex === 0) {
          //   return null;
          // }
          if (curRowIndex === 0) {
            return new GridRowColumn(curRow, focusableCols[nextColIndex]); // return same row
          }
          else {
            // up one row and far right column
            return new GridRowColumn(focusableRows[curRowIndex - 1], focusableCols[nextColIndex]);
          }
        }
        else {
          return new GridRowColumn(curRow, focusableCols[nextColIndex]);
        }
      };



      UiGridCellNav.prototype.getRowColRight = function (curRow, curCol) {
        var focusableCols = this.getFocusableCols();
        var focusableRows = this.getFocusableRows();
        var curColIndex = focusableCols.indexOf(curCol);
        var curRowIndex = focusableRows.indexOf(curRow);

        // could not find column in focusable Columns so set it to 0
        if (curColIndex === -1) {
          curColIndex = 0;
        }
        var nextColIndex = curColIndex === focusableCols.length - 1 ? 0 : curColIndex + 1;

        if (nextColIndex <= curColIndex) {
          if (curRowIndex === focusableRows.length - 1) {
            return new GridRowColumn(curRow, focusableCols[nextColIndex]); // return same row
          }
          else {
            // down one row and far left column
            return new GridRowColumn(focusableRows[curRowIndex + 1], focusableCols[nextColIndex]);
          }
        }
        else {
          return new GridRowColumn(curRow, focusableCols[nextColIndex]);
        }
      };

      UiGridCellNav.prototype.getRowColDown = function (curRow, curCol) {
        var focusableCols = this.getFocusableCols();
        var focusableRows = this.getFocusableRows();
        var curColIndex = focusableCols.indexOf(curCol);
        var curRowIndex = focusableRows.indexOf(curRow);

        // could not find column in focusable Columns so set it to 0
        if (curColIndex === -1) {
          curColIndex = 0;
        }

        if (curRowIndex === focusableRows.length - 1) {
          return new GridRowColumn(curRow, focusableCols[curColIndex]); // return same row
        }
        else {
          // down one row
          return new GridRowColumn(focusableRows[curRowIndex + 1], focusableCols[curColIndex]);
        }
      };

      UiGridCellNav.prototype.getRowColPageDown = function (curRow, curCol) {
        var focusableCols = this.getFocusableCols();
        var focusableRows = this.getFocusableRows();
        var curColIndex = focusableCols.indexOf(curCol);
        var curRowIndex = focusableRows.indexOf(curRow);

        // could not find column in focusable Columns so set it to 0
        if (curColIndex === -1) {
          curColIndex = 0;
        }

        var pageSize = this.bodyContainer.minRowsToRender();
        if (curRowIndex >= focusableRows.length - pageSize) {
          return new GridRowColumn(focusableRows[focusableRows.length - 1], focusableCols[curColIndex]); // return last row
        }
        else {
          // down one page
          return new GridRowColumn(focusableRows[curRowIndex + pageSize], focusableCols[curColIndex]);
        }
      };

      UiGridCellNav.prototype.getRowColUp = function (curRow, curCol) {
        var focusableCols = this.getFocusableCols();
        var focusableRows = this.getFocusableRows();
        var curColIndex = focusableCols.indexOf(curCol);
        var curRowIndex = focusableRows.indexOf(curRow);

        // could not find column in focusable Columns so set it to 0
        if (curColIndex === -1) {
          curColIndex = 0;
        }

        if (curRowIndex === 0) {
          return new GridRowColumn(curRow, focusableCols[curColIndex]); // return same row
        }
        else {
          // up one row
          return new GridRowColumn(focusableRows[curRowIndex - 1], focusableCols[curColIndex]);
        }
      };

      UiGridCellNav.prototype.getRowColPageUp = function (curRow, curCol) {
        var focusableCols = this.getFocusableCols();
        var focusableRows = this.getFocusableRows();
        var curColIndex = focusableCols.indexOf(curCol);
        var curRowIndex = focusableRows.indexOf(curRow);

        // could not find column in focusable Columns so set it to 0
        if (curColIndex === -1) {
          curColIndex = 0;
        }

        var pageSize = this.bodyContainer.minRowsToRender();
        if (curRowIndex - pageSize < 0) {
          return new GridRowColumn(focusableRows[0], focusableCols[curColIndex]); // return first row
        }
        else {
          // up one page
          return new GridRowColumn(focusableRows[curRowIndex - pageSize], focusableCols[curColIndex]);
        }
      };
      return UiGridCellNav;
    }]);

  /**
   *  @ngdoc service
   *  @name ui.grid.cellNav.service:uiGridCellNavService
   *
   *  @description Services for cell navigation features. If you don't like the key maps we use,
   *  or the direction cells navigation, override with a service decorator (see angular docs)
   */
  module.service('uiGridCellNavService', ['gridUtil', 'uiGridConstants', 'uiGridCellNavConstants', '$q', 'uiGridCellNavFactory', 'GridRowColumn', 'ScrollEvent',
    function (gridUtil, uiGridConstants, uiGridCellNavConstants, $q, UiGridCellNav, GridRowColumn, ScrollEvent) {

      var service = {

        initializeGrid: function (grid) {
          grid.registerColumnBuilder(service.cellNavColumnBuilder);


          /**
           * @ngdoc object
           * @name ui.grid.cellNav.Grid:cellNav
           * @description cellNav properties added to grid class
           */
          grid.cellNav = {};
          grid.cellNav.lastRowCol = null;
          grid.cellNav.focusedCells = [];

          service.defaultGridOptions(grid.options);

          /**
           *  @ngdoc object
           *  @name ui.grid.cellNav.api:PublicApi
           *
           *  @description Public Api for cellNav feature
           */
          var publicApi = {
            events: {
              cellNav: {
                /**
                 * @ngdoc event
                 * @name navigate
                 * @eventOf  ui.grid.cellNav.api:PublicApi
                 * @description raised when the active cell is changed
                 * <pre>
                 *      gridApi.cellNav.on.navigate(scope,function(newRowcol, oldRowCol) {})
                 * </pre>
                 * @param {object} newRowCol new position
                 * @param {object} oldRowCol old position
                 */
                navigate: function (newRowCol, oldRowCol) {},
                /**
                 * @ngdoc event
                 * @name viewPortKeyDown
                 * @eventOf  ui.grid.cellNav.api:PublicApi
                 * @description  is raised when the viewPort receives a keyDown event. Cells never get focus in uiGrid
                 * due to the difficulties of setting focus on a cell that is not visible in the viewport.  Use this
                 * event whenever you need a keydown event on a cell
                 * <br/>
                 * @param {object} event keydown event
                 * @param {object} rowCol current rowCol position
                 */
                viewPortKeyDown: function (event, rowCol) {},

                /**
                 * @ngdoc event
                 * @name viewPortKeyPress
                 * @eventOf  ui.grid.cellNav.api:PublicApi
                 * @description  is raised when the viewPort receives a keyPress event. Cells never get focus in uiGrid
                 * due to the difficulties of setting focus on a cell that is not visible in the viewport.  Use this
                 * event whenever you need a keypress event on a cell
                 * <br/>
                 * @param {object} event keypress event
                 * @param {object} rowCol current rowCol position
                 */
                viewPortKeyPress: function (event, rowCol) {}
              }
            },
            methods: {
              cellNav: {
                /**
                 * @ngdoc function
                 * @name scrollToFocus
                 * @methodOf  ui.grid.cellNav.api:PublicApi
                 * @description brings the specified row and column into view, and sets focus
                 * to that cell
                 * @param {object} rowEntity gridOptions.data[] array instance to make visible and set focus
                 * @param {object} colDef to make visible and set focus
                 * @returns {promise} a promise that is resolved after any scrolling is finished
                 */
                scrollToFocus: function (rowEntity, colDef) {
                  return service.scrollToFocus(grid, rowEntity, colDef);
                },

                /**
                 * @ngdoc function
                 * @name getFocusedCell
                 * @methodOf  ui.grid.cellNav.api:PublicApi
                 * @description returns the current (or last if Grid does not have focus) focused row and column
                 * <br> value is null if no selection has occurred
                 */
                getFocusedCell: function () {
                  return grid.cellNav.lastRowCol;
                },

                /**
                 * @ngdoc function
                 * @name getCurrentSelection
                 * @methodOf  ui.grid.cellNav.api:PublicApi
                 * @description returns an array containing the current selection
                 * <br> array is empty if no selection has occurred
                 */
                getCurrentSelection: function () {
                  return grid.cellNav.focusedCells;
                },

                /**
                 * @ngdoc function
                 * @name rowColSelectIndex
                 * @methodOf  ui.grid.cellNav.api:PublicApi
                 * @description returns the index in the order in which the GridRowColumn was selected, returns -1 if the GridRowColumn
                 * isn't selected
                 * @param {object} rowCol the rowCol to evaluate
                 */
                rowColSelectIndex: function (rowCol) {
                  // return gridUtil.arrayContainsObjectWithProperty(grid.cellNav.focusedCells, 'col.uid', rowCol.col.uid) &&
                  var index = -1;
                  for (var i = 0; i < grid.cellNav.focusedCells.length; i++) {
                    if (grid.cellNav.focusedCells[i].col.uid === rowCol.col.uid &&
                      grid.cellNav.focusedCells[i].row.uid === rowCol.row.uid) {
                      index = i;
                      break;
                    }
                  }
                  return index;
                }
              }
            }
          };

          grid.api.registerEventsFromObject(publicApi.events);

          grid.api.registerMethodsFromObject(publicApi.methods);
        },

        defaultGridOptions: function (gridOptions) {
          /**
           *  @ngdoc object
           *  @name ui.grid.cellNav.api:GridOptions
           *
           *  @description GridOptions for cellNav feature, these are available to be
           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
           */

          /**
           *  @ngdoc object
           *  @name modifierKeysToMultiSelectCells
           *  @propertyOf  ui.grid.cellNav.api:GridOptions
           *  @description Enable multiple cell selection only when using the ctrlKey or shiftKey.
           *  <br/>Defaults to false
           */
          gridOptions.modifierKeysToMultiSelectCells = gridOptions.modifierKeysToMultiSelectCells === true;

          /**
           *  @ngdoc array
           *  @name keyDownOverrides
           *  @propertyOf  ui.grid.cellNav.api:GridOptions
           *  @description An array of event objects to override on keydown. If an event is overridden, the viewPortKeyDown event will
           *               be raised with the overridden events, allowing custom keydown behavior.
           *  <br/>Defaults to []
           */
          gridOptions.keyDownOverrides = gridOptions.keyDownOverrides || [];

        },

        /**
         * @ngdoc service
         * @name decorateRenderContainers
         * @methodOf ui.grid.cellNav.service:uiGridCellNavService
         * @description  decorates grid renderContainers with cellNav functions
         */
        decorateRenderContainers: function (grid) {

          var rightContainer = grid.hasRightContainer() ? grid.renderContainers.right : null;
          var leftContainer = grid.hasLeftContainer() ? grid.renderContainers.left : null;

          if (leftContainer !== null) {
            grid.renderContainers.left.cellNav = new UiGridCellNav(grid.renderContainers.body, leftContainer, rightContainer, grid.renderContainers.body);
          }
          if (rightContainer !== null) {
            grid.renderContainers.right.cellNav = new UiGridCellNav(grid.renderContainers.body, rightContainer, grid.renderContainers.body, leftContainer);
          }

          grid.renderContainers.body.cellNav = new UiGridCellNav(grid.renderContainers.body, grid.renderContainers.body, leftContainer, rightContainer);
        },

        /**
         * @ngdoc service
         * @name getDirection
         * @methodOf ui.grid.cellNav.service:uiGridCellNavService
         * @description  determines which direction to for a given keyDown event
         * @returns {uiGridCellNavConstants.direction} direction
         */
        getDirection: function (evt) {
          if (evt.keyCode === uiGridConstants.keymap.LEFT ||
            (evt.keyCode === uiGridConstants.keymap.TAB && evt.shiftKey)) {
            return uiGridCellNavConstants.direction.LEFT;
          }
          if (evt.keyCode === uiGridConstants.keymap.RIGHT ||
            evt.keyCode === uiGridConstants.keymap.TAB) {
            return uiGridCellNavConstants.direction.RIGHT;
          }

          if (evt.keyCode === uiGridConstants.keymap.UP ||
            (evt.keyCode === uiGridConstants.keymap.ENTER && evt.shiftKey) ) {
            return uiGridCellNavConstants.direction.UP;
          }

          if (evt.keyCode === uiGridConstants.keymap.PG_UP) {
            return uiGridCellNavConstants.direction.PG_UP;
          }

          if (evt.keyCode === uiGridConstants.keymap.DOWN ||
            evt.keyCode === uiGridConstants.keymap.ENTER && !(evt.ctrlKey || evt.altKey)) {
            return uiGridCellNavConstants.direction.DOWN;
          }

          if (evt.keyCode === uiGridConstants.keymap.PG_DOWN) {
            return uiGridCellNavConstants.direction.PG_DOWN;
          }

          return null;
        },

        /**
         * @ngdoc service
         * @name cellNavColumnBuilder
         * @methodOf ui.grid.cellNav.service:uiGridCellNavService
         * @description columnBuilder function that adds cell navigation properties to grid column
         * @returns {promise} promise that will load any needed templates when resolved
         */
        cellNavColumnBuilder: function (colDef, col, gridOptions) {
          var promises = [];

          /**
           *  @ngdoc object
           *  @name ui.grid.cellNav.api:ColumnDef
           *
           *  @description Column Definitions for cellNav feature, these are available to be
           *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
           */

          /**
           *  @ngdoc object
           *  @name allowCellFocus
           *  @propertyOf  ui.grid.cellNav.api:ColumnDef
           *  @description Enable focus on a cell within this column.
           *  <br/>Defaults to true
           */
          colDef.allowCellFocus = colDef.allowCellFocus === undefined ? true : colDef.allowCellFocus;

          return $q.all(promises);
        },

        /**
         * @ngdoc method
         * @methodOf ui.grid.cellNav.service:uiGridCellNavService
         * @name scrollToFocus
         * @description Scroll the grid such that the specified
         * row and column is in view, and set focus to the cell in that row and column
         * @param {Grid} grid the grid you'd like to act upon, usually available
         * from gridApi.grid
         * @param {object} rowEntity gridOptions.data[] array instance to make visible and set focus to
         * @param {object} colDef to make visible and set focus to
         * @returns {promise} a promise that is resolved after any scrolling is finished
         */
        scrollToFocus: function (grid, rowEntity, colDef) {
          var gridRow = null, gridCol = null;

          if (typeof(rowEntity) !== 'undefined' && rowEntity !== null) {
            gridRow = grid.getRow(rowEntity);
          }

          if (typeof(colDef) !== 'undefined' && colDef !== null) {
            gridCol = grid.getColumn(colDef.name ? colDef.name : colDef.field);
          }
          return grid.api.core.scrollToIfNecessary(gridRow, gridCol).then(function () {
            var rowCol = { row: gridRow, col: gridCol };

            // Broadcast the navigation
            if (gridRow !== null && gridCol !== null) {
              grid.cellNav.broadcastCellNav(rowCol, null, null);
            }
          });
        },


        /**
         * @ngdoc method
         * @methodOf ui.grid.cellNav.service:uiGridCellNavService
         * @name getLeftWidth
         * @description Get the current drawn width of the columns in the
         * grid up to the numbered column, and add an apportionment for the
         * column that we're on.  So if we are on column 0, we want to scroll
         * 0% (i.e. exclude this column from calc).  If we're on the last column
         * we want to scroll to 100% (i.e. include this column in the calc). So
         * we include (thisColIndex / totalNumberCols) % of this column width
         * @param {Grid} grid the grid you'd like to act upon, usually available
         * from gridApi.grid
         * @param {GridColumn} upToCol the column to total up to and including
         */
        getLeftWidth: function (grid, upToCol) {
          var width = 0;

          if (!upToCol) {
            return width;
          }

          var lastIndex = grid.renderContainers.body.visibleColumnCache.indexOf( upToCol );

          // total column widths up-to but not including the passed in column
          grid.renderContainers.body.visibleColumnCache.forEach( function( col, index ) {
            if ( index < lastIndex ) {
              width += col.drawnWidth;
            }
          });

          // pro-rata the final column based on % of total columns.
          var percentage = lastIndex === 0 ? 0 : (lastIndex + 1) / grid.renderContainers.body.visibleColumnCache.length;
          width += upToCol.drawnWidth * percentage;

          return width;
        }
      };

      return service;
    }]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.cellNav.directive:uiCellNav
   *  @element div
   *  @restrict EA
   *
   *  @description Adds cell navigation features to the grid columns
   *
   *  @example
   <example module="app">
   <file name="app.js">
   var app = angular.module('app', ['ui.grid', 'ui.grid.cellNav']);

   app.controller('MainCtrl', ['$scope', function ($scope) {
      $scope.data = [
        { name: 'Bob', title: 'CEO' },
            { name: 'Frank', title: 'Lowly Developer' }
      ];

      $scope.columnDefs = [
        {name: 'name'},
        {name: 'title'}
      ];
    }]);
   </file>
   <file name="index.html">
   <div ng-controller="MainCtrl">
   <div ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-cellnav></div>
   </div>
   </file>
   </example>
   */
  module.directive('uiGridCellnav', ['gridUtil', 'uiGridCellNavService', 'uiGridCellNavConstants', 'uiGridConstants', 'GridRowColumn', '$timeout', '$compile', 'i18nService',
    function (gridUtil, uiGridCellNavService, uiGridCellNavConstants, uiGridConstants, GridRowColumn, $timeout, $compile, i18nService) {
      return {
        replace: true,
        priority: -150,
        require: '^uiGrid',
        scope: false,
        controller: function () {},
        compile: function () {
          return {
            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
              var _scope = $scope;

              var grid = uiGridCtrl.grid;
              uiGridCellNavService.initializeGrid(grid);

              uiGridCtrl.cellNav = {};

              // Ensure that the object has all of the methods we expect it to
              uiGridCtrl.cellNav.makeRowCol = function (obj) {
                if (!(obj instanceof GridRowColumn)) {
                  obj = new GridRowColumn(obj.row, obj.col);
                }
                return obj;
              };

              uiGridCtrl.cellNav.getActiveCell = function () {
                var elms = $elm[0].getElementsByClassName('ui-grid-cell-focus');
                if (elms.length > 0) {
                  return elms[0];
                }

                return undefined;
              };

              uiGridCtrl.cellNav.broadcastCellNav = grid.cellNav.broadcastCellNav = function (newRowCol, modifierDown, originEvt) {
                modifierDown = !(modifierDown === undefined || !modifierDown);

                newRowCol = uiGridCtrl.cellNav.makeRowCol(newRowCol);

                uiGridCtrl.cellNav.broadcastFocus(newRowCol, modifierDown, originEvt);
                _scope.$broadcast(uiGridCellNavConstants.CELL_NAV_EVENT, newRowCol, modifierDown, originEvt);
              };

              uiGridCtrl.cellNav.clearFocus = grid.cellNav.clearFocus = function () {
                grid.cellNav.focusedCells = [];
                _scope.$broadcast(uiGridCellNavConstants.CELL_NAV_EVENT);
              };

              uiGridCtrl.cellNav.broadcastFocus = function (rowCol, modifierDown, originEvt) {
                modifierDown = !(modifierDown === undefined || !modifierDown);

                rowCol = uiGridCtrl.cellNav.makeRowCol(rowCol);

                var row = rowCol.row,
                  col = rowCol.col;

                var rowColSelectIndex = uiGridCtrl.grid.api.cellNav.rowColSelectIndex(rowCol);

                if (grid.cellNav.lastRowCol === null || rowColSelectIndex === -1 || (grid.cellNav.lastRowCol.col === col && grid.cellNav.lastRowCol.row === row)) {
                  var newRowCol = new GridRowColumn(row, col);

                  if (grid.cellNav.lastRowCol === null || grid.cellNav.lastRowCol.row !== newRowCol.row || grid.cellNav.lastRowCol.col !== newRowCol.col || grid.options.enableCellEditOnFocus) {
                    grid.api.cellNav.raise.navigate(newRowCol, grid.cellNav.lastRowCol, originEvt);
                    grid.cellNav.lastRowCol = newRowCol;
                  }
                  if (uiGridCtrl.grid.options.modifierKeysToMultiSelectCells && modifierDown) {
                    grid.cellNav.focusedCells.push(rowCol);
                  } else {
                    grid.cellNav.focusedCells = [rowCol];
                  }
                } else if (grid.options.modifierKeysToMultiSelectCells && modifierDown &&
                  rowColSelectIndex >= 0) {

                  grid.cellNav.focusedCells.splice(rowColSelectIndex, 1);
                }
              };

              uiGridCtrl.cellNav.handleKeyDown = function (evt) {
                var direction = uiGridCellNavService.getDirection(evt);
                if (direction === null) {
                  return null;
                }

                var containerId = 'body';
                if (evt.uiGridTargetRenderContainerId) {
                  containerId = evt.uiGridTargetRenderContainerId;
                }

                // Get the last-focused row+col combo
                var lastRowCol = uiGridCtrl.grid.api.cellNav.getFocusedCell();
                if (lastRowCol) {
                  // Figure out which new row+combo we're navigating to
                  var rowCol = uiGridCtrl.grid.renderContainers[containerId].cellNav.getNextRowCol(direction, lastRowCol.row, lastRowCol.col);
                  var focusableCols = uiGridCtrl.grid.renderContainers[containerId].cellNav.getFocusableCols();
                  var rowColSelectIndex = uiGridCtrl.grid.api.cellNav.rowColSelectIndex(rowCol);
                  // Shift+tab on top-left cell should exit cellnav on render container
                  if (
                    // Navigating left
                    direction === uiGridCellNavConstants.direction.LEFT &&
                    // New col is last col (i.e. wrap around)
                    rowCol.col === focusableCols[focusableCols.length - 1] &&
                    // Staying on same row, which means we're at first row
                    rowCol.row === lastRowCol.row &&
                    evt.keyCode === uiGridConstants.keymap.TAB &&
                    evt.shiftKey
                  ) {
                    grid.cellNav.focusedCells.splice(rowColSelectIndex, 1);
                    uiGridCtrl.cellNav.clearFocus();
                    return true;
                  }
                  // Tab on bottom-right cell should exit cellnav on render container
                  else if (
                    direction === uiGridCellNavConstants.direction.RIGHT &&
                    // New col is first col (i.e. wrap around)
                    rowCol.col === focusableCols[0] &&
                    // Staying on same row, which means we're at first row
                    rowCol.row === lastRowCol.row &&
                    evt.keyCode === uiGridConstants.keymap.TAB &&
                    !evt.shiftKey
                  ) {
                    grid.cellNav.focusedCells.splice(rowColSelectIndex, 1);
                    uiGridCtrl.cellNav.clearFocus();
                    return true;
                  }

                  // Scroll to the new cell, if it's not completely visible within the render container's viewport
                  grid.scrollToIfNecessary(rowCol.row, rowCol.col).then(function () {
                    uiGridCtrl.cellNav.broadcastCellNav(rowCol, null, evt);
                  });


                  evt.stopPropagation();
                  evt.preventDefault();

                  return false;
                }
              };
            },
            post: function ($scope, $elm, $attrs, uiGridCtrl) {
              var grid = uiGridCtrl.grid;
              var usesAria = true;

              // Detect whether we are using ngAria
              // (if ngAria module is not used then the stuff inside addAriaLiveRegion
              // is not used and provides extra fluff)
              try {
                angular.module('ngAria');
              }
              catch (err) {
                usesAria = false;
              }

              function addAriaLiveRegion() {
                // Thanks to google docs for the inspiration behind how to do this
                // XXX: Why is this entire mess nessasary?
                // Because browsers take a lot of coercing to get them to read out live regions
                // http://www.paciellogroup.com/blog/2012/06/html5-accessibility-chops-aria-rolealert-browser-support/
                var ariaNotifierDomElt = '<div ' +
                                           'id="' + grid.id +'-aria-speakable" ' +
                                           'class="ui-grid-a11y-ariascreenreader-speakable ui-grid-offscreen" ' +
                                           'aria-live="assertive" ' +
                                           'role="alert" ' +
                                           'aria-atomic="true" ' +
                                           'aria-hidden="false" ' +
                                           'aria-relevant="additions" ' +
                                           '>' +
                                           '&nbsp;' +
                                         '</div>';

                var ariaNotifier = $compile(ariaNotifierDomElt)($scope);
                $elm.prepend(ariaNotifier);
                $scope.$on(uiGridCellNavConstants.CELL_NAV_EVENT, function (evt, rowCol, modifierDown, originEvt) {
                  /*
                   * If the cell nav event was because of a focus event then we don't want to
                   * change the notifier text.
                   * Reasoning: Voice Over fires a focus events when moving arround the grid.
                   * If the screen reader is handing the grid nav properly then we don't need to
                   * use the alert to notify the user of the movement.
                   * In all other cases we do want a notification event.
                   */
                  if (originEvt && originEvt.type === 'focus') {return;}

                  function setNotifyText(text) {
                    if (text === ariaNotifier.text().trim()) {return;}
                    ariaNotifier[0].style.clip = 'rect(0px,0px,0px,0px)';
                    /*
                     * This is how google docs handles clearing the div. Seems to work better than setting the text of the div to ''
                     */
                    ariaNotifier[0].innerHTML = "";
                    ariaNotifier[0].style.visibility = 'hidden';
                    ariaNotifier[0].style.visibility = 'visible';
                    if (text !== '') {
                      ariaNotifier[0].style.clip = 'auto';
                      /*
                       * The space after the text is something that google docs does.
                       */
                      ariaNotifier[0].appendChild(document.createTextNode(text + " "));
                      ariaNotifier[0].style.visibility = 'hidden';
                      ariaNotifier[0].style.visibility = 'visible';
                    }
                  }

                  function getAppendedColumnHeaderText(col) {
                    return ', ' + i18nService.getSafeText('headerCell.aria.column') + ' ' + col.displayName;
                  }

                  function getCellDisplayValue(currentRowColumn) {
                    if (currentRowColumn.col.field === 'selectionRowHeaderCol') {
                      // This is the case when the 'selection' feature is used in the grid and the user has moved
                      // to or inside of the left grid container which holds the checkboxes for selecting rows.
                      // This is necessary for Accessibility. Without this a screen reader cannot determine if the row
                      // is or is not currently selected.
                        return currentRowColumn.row.isSelected ? i18nService.getSafeText('search.aria.selected') : i18nService.getSafeText('search.aria.notSelected');
                      } else {
                        return grid.getCellDisplayValue(currentRowColumn.row, currentRowColumn.col);
                      }
                    }

                  var values = [];
                  var currentSelection = grid.api.cellNav.getCurrentSelection();
                  for (var i = 0; i < currentSelection.length; i++) {
                    var cellDisplayValue = getCellDisplayValue(currentSelection[i]) + getAppendedColumnHeaderText(currentSelection[i].col);
                    values.push(cellDisplayValue);
                  }
                  var cellText = values.toString();
                  setNotifyText(cellText);

                });
              }
              // Only add the ngAria stuff it will be used
              if (usesAria) {
                addAriaLiveRegion();
              }
            }
          };
        }
      };
    }]);

  module.directive('uiGridRenderContainer', ['$timeout', '$document', 'gridUtil', 'uiGridConstants', 'uiGridCellNavService', '$compile','uiGridCellNavConstants',
    function ($timeout, $document, gridUtil, uiGridConstants, uiGridCellNavService, $compile, uiGridCellNavConstants) {
      return {
        replace: true,
        priority: -99999, // this needs to run very last
        require: ['^uiGrid', 'uiGridRenderContainer', '?^uiGridCellnav'],
        scope: false,
        compile: function () {
          return {
            post: function ($scope, $elm, $attrs, controllers) {
              var uiGridCtrl = controllers[0],
                 renderContainerCtrl = controllers[1],
                 uiGridCellnavCtrl = controllers[2];

              // Skip attaching cell-nav specific logic if the directive is not attached above us
              if (!uiGridCtrl.grid.api.cellNav) { return; }

              var containerId = renderContainerCtrl.containerId;

              var grid = uiGridCtrl.grid;

              // run each time a render container is created
              uiGridCellNavService.decorateRenderContainers(grid);

              // focusser only created for body
              if (containerId !== 'body') {
                return;
              }

              if (uiGridCtrl.grid.options.modifierKeysToMultiSelectCells) {
                $elm.attr('aria-multiselectable', true);
              }
              else {
                $elm.attr('aria-multiselectable', false);
              }

              // add an element with no dimensions that can be used to set focus and capture keystrokes
              var focuser = $compile('<div class="ui-grid-focuser" role="region" aria-live="assertive" aria-atomic="false" tabindex="0" aria-controls="' + grid.id +'-aria-speakable '+ grid.id + '-grid-container' +'" aria-owns="' + grid.id + '-grid-container' + '"></div>')($scope);
              $elm.append(focuser);

              focuser.on('focus', function (evt) {
                evt.uiGridTargetRenderContainerId = containerId;
                var rowCol = uiGridCtrl.grid.api.cellNav.getFocusedCell();
                if (rowCol === null) {
                  rowCol = uiGridCtrl.grid.renderContainers[containerId].cellNav.getNextRowCol(uiGridCellNavConstants.direction.DOWN, null, null);
                  if (rowCol.row && rowCol.col) {
                    uiGridCtrl.cellNav.broadcastCellNav(rowCol);
                  }
                }
              });

              uiGridCellnavCtrl.setAriaActivedescendant = function(id) {
                $elm.attr('aria-activedescendant', id);
              };

              uiGridCellnavCtrl.removeAriaActivedescendant = function(id) {
                if ($elm.attr('aria-activedescendant') === id) {
                  $elm.attr('aria-activedescendant', '');
                }
              };


              uiGridCtrl.focus = function () {
                gridUtil.focus.byElement(focuser[0]);
                // allow for first time grid focus
              };

              var viewPortKeyDownWasRaisedForRowCol = null;
              // Bind to keydown events in the render container
              focuser.on('keydown', function (evt) {
                evt.uiGridTargetRenderContainerId = containerId;
                var rowCol = uiGridCtrl.grid.api.cellNav.getFocusedCell();
                var raiseViewPortKeyDown = uiGridCtrl.grid.options.keyDownOverrides.some(function (override) {
                  return Object.keys(override).every( function (property) {
                      return override[property] === evt[property];
                  });
                });
                var result = raiseViewPortKeyDown ? null : uiGridCtrl.cellNav.handleKeyDown(evt);
                if (result === null) {
                  uiGridCtrl.grid.api.cellNav.raise.viewPortKeyDown(evt, rowCol, uiGridCtrl.cellNav.handleKeyDown);
                  viewPortKeyDownWasRaisedForRowCol = rowCol;
                }
              });
              // Bind to keypress events in the render container
              // keypress events are needed by edit function so the key press
              // that initiated an edit is not lost
              // must fire the event in a timeout so the editor can
              // initialize and subscribe to the event on another event loop
              focuser.on('keypress', function (evt) {
                if (viewPortKeyDownWasRaisedForRowCol) {
                  $timeout(function () {
                    uiGridCtrl.grid.api.cellNav.raise.viewPortKeyPress(evt, viewPortKeyDownWasRaisedForRowCol);
                  }, 4);

                  viewPortKeyDownWasRaisedForRowCol = null;
                }
              });

              $scope.$on('$destroy', function() {
                // Remove all event handlers associated with this focuser.
                focuser.off();
              });
            }
          };
        }
      };
    }]);

  module.directive('uiGridViewport',
    function () {
      return {
        replace: true,
        priority: -99999, // this needs to run very last
        require: ['^uiGrid', '^uiGridRenderContainer', '?^uiGridCellnav'],
        scope: false,
        compile: function () {
          return {
            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
            },
            post: function ($scope, $elm, $attrs, controllers) {
              var uiGridCtrl = controllers[0],
                renderContainerCtrl = controllers[1];

              // Skip attaching cell-nav specific logic if the directive is not attached above us
              if (!uiGridCtrl.grid.api.cellNav) { return; }

              var containerId = renderContainerCtrl.containerId;
              // no need to process for other containers
              if (containerId !== 'body') {
                return;
              }

              var grid = uiGridCtrl.grid;

              grid.api.core.on.scrollBegin($scope, function () {

                // Skip if there's no currently-focused cell
                var lastRowCol = uiGridCtrl.grid.api.cellNav.getFocusedCell();
                if (lastRowCol === null) {
                  return;
                }

                // if not in my container, move on
                // todo: worry about horiz scroll
                if (!renderContainerCtrl.colContainer.containsColumn(lastRowCol.col)) {
                  return;
                }

                uiGridCtrl.cellNav.clearFocus();

              });

              grid.api.core.on.scrollEnd($scope, function (args) {
                // Skip if there's no currently-focused cell
                var lastRowCol = uiGridCtrl.grid.api.cellNav.getFocusedCell();
                if (lastRowCol === null) {
                  return;
                }

                // if not in my container, move on
                // todo: worry about horiz scroll
                if (!renderContainerCtrl.colContainer.containsColumn(lastRowCol.col)) {
                  return;
                }

                uiGridCtrl.cellNav.broadcastCellNav(lastRowCol);
              });

              grid.api.cellNav.on.navigate($scope, function () {
                // focus again because it can be lost
                 uiGridCtrl.focus();
              });
            }
          };
        }
      };
    });

  /**
   *  @ngdoc directive
   *  @name ui.grid.cellNav.directive:uiGridCell
   *  @element div
   *  @restrict A
   *  @description Stacks on top of ui.grid.uiGridCell to provide cell navigation
   */
  module.directive('uiGridCell', ['$timeout', '$document', 'uiGridCellNavService', 'gridUtil', 'uiGridCellNavConstants', 'uiGridConstants', 'GridRowColumn',
    function ($timeout, $document, uiGridCellNavService, gridUtil, uiGridCellNavConstants, uiGridConstants, GridRowColumn) {
      return {
        priority: -150, // run after default uiGridCell directive and ui.grid.edit uiGridCell
        restrict: 'A',
        require: ['^uiGrid', '?^uiGridCellnav'],
        scope: false,
        link: function ($scope, $elm, $attrs, controllers) {
          var uiGridCtrl = controllers[0],
              uiGridCellnavCtrl = controllers[1];
          // Skip attaching cell-nav specific logic if the directive is not attached above us
          if (!uiGridCtrl.grid.api.cellNav) { return; }

          if (!$scope.col.colDef.allowCellFocus) {
            return;
          }

          // Convinience local variables
          var grid = uiGridCtrl.grid;
          $scope.focused = false;

          // Make this cell focusable but only with javascript/a mouse click
          $elm.attr('tabindex', -1);

          // When a cell is clicked, broadcast a cellNav event saying that this row+col combo is now focused
          $elm.find('div').on('click', function (evt) {
            uiGridCtrl.cellNav.broadcastCellNav(new GridRowColumn($scope.row, $scope.col), evt.ctrlKey || evt.metaKey, evt);

            evt.stopPropagation();
            $scope.$apply();
          });


          /*
           * XXX Hack for screen readers.
           * This allows the grid to focus using only the screen reader cursor.
           * Since the focus event doesn't include key press information we can't use it
           * as our primary source of the event.
           */
          $elm.on('mousedown', preventMouseDown);

          // turn on and off for edit events
          if (uiGridCtrl.grid.api.edit) {
            uiGridCtrl.grid.api.edit.on.beginCellEdit($scope, function () {
              $elm.off('mousedown', preventMouseDown);
            });

            uiGridCtrl.grid.api.edit.on.afterCellEdit($scope, function () {
              $elm.on('mousedown', preventMouseDown);
            });

            uiGridCtrl.grid.api.edit.on.cancelCellEdit($scope, function () {
              $elm.on('mousedown', preventMouseDown);
            });
          }

          // In case we created a new row, and we are the new created row by ngRepeat
          // then this cell content might have been selected previously
          refreshCellFocus();

          function preventMouseDown(evt) {
            // Prevents the foucus event from firing if the click event is already going to fire.
            // If both events fire it will cause bouncing behavior.
            evt.preventDefault();
          }

          // You can only focus on elements with a tabindex value
          $elm.on('focus', function (evt) {
            uiGridCtrl.cellNav.broadcastCellNav(new GridRowColumn($scope.row, $scope.col), false, evt);
            evt.stopPropagation();
            $scope.$apply();
          });

          // This event is fired for all cells.  If the cell matches, then focus is set
          $scope.$on(uiGridCellNavConstants.CELL_NAV_EVENT, refreshCellFocus);

          // Refresh cell focus when a new row id added to the grid
          var dataChangeDereg = uiGridCtrl.grid.registerDataChangeCallback(function (grid) {
            // Clear the focus if it's set to avoid the wrong cell getting focused during
            // a short period of time (from now until $timeout function executed)
            clearFocus();

            $scope.$applyAsync(refreshCellFocus);
          }, [uiGridConstants.dataChange.ROW]);

          function refreshCellFocus() {
            var isFocused = grid.cellNav.focusedCells.some(function (focusedRowCol, index) {
              return (focusedRowCol.row === $scope.row && focusedRowCol.col === $scope.col);
            });
            if (isFocused) {
              setFocused();
            } else {
              clearFocus();
            }
          }

          function setFocused() {
            if (!$scope.focused) {
              var div = $elm.find('div');
              div.addClass('ui-grid-cell-focus');
              $elm.attr('aria-selected', true);
              uiGridCellnavCtrl.setAriaActivedescendant($elm.attr('id'));
              $scope.focused = true;
            }
          }

          function clearFocus() {
            if ($scope.focused) {
              var div = $elm.find('div');
              div.removeClass('ui-grid-cell-focus');
              $elm.attr('aria-selected', false);
              uiGridCellnavCtrl.removeAriaActivedescendant($elm.attr('id'));
              $scope.focused = false;
            }
          }

          $scope.$on('$destroy', function () {
            dataChangeDereg();

            // .off withouth paramaters removes all handlers
            $elm.find('div').off();
            $elm.off();
          });
        }
      };
    }]);
})();

(function () {
  'use strict';

  /**
   * @ngdoc object
   * @name ui.grid.service:uiGridConstants
   * @description Constants for use across many grid features
   *
   */


  angular.module('ui.grid').constant('uiGridConstants', {
    LOG_DEBUG_MESSAGES: true,
    LOG_WARN_MESSAGES: true,
    LOG_ERROR_MESSAGES: true,
    CUSTOM_FILTERS: /CUSTOM_FILTERS/g,
    COL_FIELD: /COL_FIELD/g,
    MODEL_COL_FIELD: /MODEL_COL_FIELD/g,
    TOOLTIP: /title=\"TOOLTIP\"/g,
    DISPLAY_CELL_TEMPLATE: /DISPLAY_CELL_TEMPLATE/g,
    TEMPLATE_REGEXP: /<.+>/,
    FUNC_REGEXP: /(\([^)]*\))?$/,
    DOT_REGEXP: /\./g,
    APOS_REGEXP: /'/g,
    BRACKET_REGEXP: /^(.*)((?:\s*\[\s*\d+\s*\]\s*)|(?:\s*\[\s*"(?:[^"\\]|\\.)*"\s*\]\s*)|(?:\s*\[\s*'(?:[^'\\]|\\.)*'\s*\]\s*))(.*)$/,
    COL_CLASS_PREFIX: 'ui-grid-col',
    ENTITY_BINDING: '$$this',
    events: {
      GRID_SCROLL: 'uiGridScroll',
      COLUMN_MENU_SHOWN: 'uiGridColMenuShown',
      ITEM_DRAGGING: 'uiGridItemDragStart', // For any item being dragged
      COLUMN_HEADER_CLICK: 'uiGridColumnHeaderClick'
    },
    // copied from http://www.lsauer.com/2011/08/javascript-keymap-keycodes-in-json.html
    keymap: {
      TAB: 9,
      STRG: 17,
      CAPSLOCK: 20,
      CTRL: 17,
      CTRLRIGHT: 18,
      CTRLR: 18,
      SHIFT: 16,
      RETURN: 13,
      ENTER: 13,
      BACKSPACE: 8,
      BCKSP: 8,
      ALT: 18,
      ALTR: 17,
      ALTRIGHT: 17,
      SPACE: 32,
      WIN: 91,
      MAC: 91,
      FN: null,
      PG_UP: 33,
      PG_DOWN: 34,
      UP: 38,
      DOWN: 40,
      LEFT: 37,
      RIGHT: 39,
      ESC: 27,
      DEL: 46,
      F1: 112,
      F2: 113,
      F3: 114,
      F4: 115,
      F5: 116,
      F6: 117,
      F7: 118,
      F8: 119,
      F9: 120,
      F10: 121,
      F11: 122,
      F12: 123
    },
     /**
     * @ngdoc object
     * @name ASC
     * @propertyOf ui.grid.service:uiGridConstants
     * @description Used in {@link ui.grid.class:GridOptions.columnDef#properties_sort columnDef.sort} and
     * {@link ui.grid.class:GridOptions.columnDef#properties_sortDirectionCycle columnDef.sortDirectionCycle}
     * to configure the sorting direction of the column
     */
    ASC: 'asc',
     /**
     * @ngdoc object
     * @name DESC
     * @propertyOf ui.grid.service:uiGridConstants
     * @description Used in {@link ui.grid.class:GridOptions.columnDef#properties_sort columnDef.sort} and
     * {@link ui.grid.class:GridOptions.columnDef#properties_sortDirectionCycle columnDef.sortDirectionCycle}
     * to configure the sorting direction of the column
     */
    DESC: 'desc',


     /**
     * @ngdoc object
     * @name filter
     * @propertyOf ui.grid.service:uiGridConstants
     * @description Used in {@link ui.grid.class:GridOptions.columnDef#properties_filter columnDef.filter}
     * to configure filtering on the column
     *
     * `SELECT` and `INPUT` are used with the `type` property of the filter, the rest are used to specify
     * one of the built-in conditions.
     *
     * Available `condition` options are:
     * - `uiGridConstants.filter.STARTS_WITH`
     * - `uiGridConstants.filter.ENDS_WITH`
     * - `uiGridConstants.filter.CONTAINS`
     * - `uiGridConstants.filter.GREATER_THAN`
     * - `uiGridConstants.filter.GREATER_THAN_OR_EQUAL`
     * - `uiGridConstants.filter.LESS_THAN`
     * - `uiGridConstants.filter.LESS_THAN_OR_EQUAL`
     * - `uiGridConstants.filter.NOT_EQUAL`
     *
     *
     * Available `type` options are:
     * - `uiGridConstants.filter.SELECT` - use a dropdown box for the cell header filter field
     * - `uiGridConstants.filter.INPUT` - use a text box for the cell header filter field
     */
    filter: {
      STARTS_WITH: 2,
      ENDS_WITH: 4,
      EXACT: 8,
      CONTAINS: 16,
      GREATER_THAN: 32,
      GREATER_THAN_OR_EQUAL: 64,
      LESS_THAN: 128,
      LESS_THAN_OR_EQUAL: 256,
      NOT_EQUAL: 512,
      SELECT: 'select',
      INPUT: 'input'
    },

    /**
     * @ngdoc object
     * @name aggregationTypes
     * @propertyOf ui.grid.service:uiGridConstants
     * @description Used in {@link ui.grid.class:GridOptions.columnDef#properties_aggregationType columnDef.aggregationType}
     * to specify the type of built-in aggregation the column should use.
     *
     * Available options are:
     * - `uiGridConstants.aggregationTypes.sum` - add the values in this column to produce the aggregated value
     * - `uiGridConstants.aggregationTypes.count` - count the number of rows to produce the aggregated value
     * - `uiGridConstants.aggregationTypes.avg` - average the values in this column to produce the aggregated value
     * - `uiGridConstants.aggregationTypes.min` - use the minimum value in this column as the aggregated value
     * - `uiGridConstants.aggregationTypes.max` - use the maximum value in this column as the aggregated value
     */
    aggregationTypes: {
      sum: 2,
      count: 4,
      avg: 8,
      min: 16,
      max: 32
    },

    /**
     * @ngdoc array
     * @name CURRENCY_SYMBOLS
     * @propertyOf ui.grid.service:uiGridConstants
     * @description A list of all presently circulating currency symbols that was copied from
     * https://en.wikipedia.org/wiki/Currency_symbol#List_of_presently-circulating_currency_symbols
     *
     * Can be used on {@link ui.grid.class:rowSorter} to create a number string regex that ignores currency symbols.
     */
    CURRENCY_SYMBOLS: ['¤', '؋', 'Ar', 'Ƀ', '฿', 'B/.', 'Br', 'Bs.', 'Bs.F.', 'GH₵', '¢', 'c', 'Ch.', '₡', 'C$', 'D', 'ден',
      'دج', '.د.ب', 'د.ع', 'JD', 'د.ك', 'ل.د', 'дин', 'د.ت', 'د.م.', 'د.إ', 'Db', '$', '₫', 'Esc', '€', 'ƒ', 'Ft', 'FBu',
      'FCFA', 'CFA', 'Fr', 'FRw', 'G', 'gr', '₲', 'h', '₴', '₭', 'Kč', 'kr', 'kn', 'MK', 'ZK', 'Kz', 'K', 'L', 'Le', 'лв',
      'E', 'lp', 'M', 'KM', 'MT', '₥', 'Nfk', '₦', 'Nu.', 'UM', 'T$', 'MOP$', '₱', 'Pt.', '£', 'ج.م.', 'LL', 'LS', 'P', 'Q',
      'q', 'R', 'R$', 'ر.ع.', 'ر.ق', 'ر.س', '៛', 'RM', 'p', 'Rf.', '₹', '₨', 'SRe', 'Rp', '₪', 'Ksh', 'Sh.So.', 'USh', 'S/',
      'SDR', 'сом', '৳	', 'WS$', '₮', 'VT', '₩', '¥', 'zł'],

    /**
     * @ngdoc object
     * @name scrollDirection
     * @propertyOf ui.grid.service:uiGridConstants
     * @description Set on {@link ui.grid.class:Grid#properties_scrollDirection Grid.scrollDirection},
     * to indicate the direction the grid is currently scrolling in
     *
     * Available options are:
     * - `uiGridConstants.scrollDirection.UP` - set when the grid is scrolling up
     * - `uiGridConstants.scrollDirection.DOWN` - set when the grid is scrolling down
     * - `uiGridConstants.scrollDirection.LEFT` - set when the grid is scrolling left
     * - `uiGridConstants.scrollDirection.RIGHT` - set when the grid is scrolling right
     * - `uiGridConstants.scrollDirection.NONE` - set when the grid is not scrolling, this is the default
     */
    scrollDirection: {
      UP: 'up',
      DOWN: 'down',
      LEFT: 'left',
      RIGHT: 'right',
      NONE: 'none'

    },

    /**
     * @ngdoc object
     * @name dataChange
     * @propertyOf ui.grid.service:uiGridConstants
     * @description Used with {@link ui.grid.api:PublicApi#methods_notifyDataChange PublicApi.notifyDataChange},
     * {@link ui.grid.class:Grid#methods_callDataChangeCallbacks Grid.callDataChangeCallbacks},
     * and {@link ui.grid.class:Grid#methods_registerDataChangeCallback Grid.registerDataChangeCallback}
     * to specify the type of the event(s).
     *
     * Available options are:
     * - `uiGridConstants.dataChange.ALL` - listeners fired on any of these events, fires listeners on all events.
     * - `uiGridConstants.dataChange.EDIT` - fired when the data in a cell is edited
     * - `uiGridConstants.dataChange.ROW` - fired when a row is added or removed
     * - `uiGridConstants.dataChange.COLUMN` - fired when the column definitions are modified
     * - `uiGridConstants.dataChange.OPTIONS` - fired when the grid options are modified
     */
    dataChange: {
      ALL: 'all',
      EDIT: 'edit',
      ROW: 'row',
      COLUMN: 'column',
      OPTIONS: 'options'
    },

    /**
     * @ngdoc object
     * @name scrollbars
     * @propertyOf ui.grid.service:uiGridConstants
     * @description Used with {@link ui.grid.class:GridOptions#properties_enableHorizontalScrollbar GridOptions.enableHorizontalScrollbar}
     * and {@link ui.grid.class:GridOptions#properties_enableVerticalScrollbar GridOptions.enableVerticalScrollbar}
     * to specify the scrollbar policy for that direction.
     *
     * Available options are:
     * - `uiGridConstants.scrollbars.NEVER` - never show scrollbars in this direction
     * - `uiGridConstants.scrollbars.ALWAYS` - always show scrollbars in this direction
     * - `uiGridConstants.scrollbars.WHEN_NEEDED` - shows scrollbars in this direction when needed
     */

    scrollbars: {
      NEVER: 0,
      ALWAYS: 1,
      WHEN_NEEDED: 2
    }
  });

})();

angular.module('ui.grid').directive('uiGridCell', ['$compile', '$parse', 'gridUtil', 'uiGridConstants', function ($compile, $parse, gridUtil, uiGridConstants) {
  return {
    priority: 0,
    scope: false,
    require: '?^uiGrid',
    compile: function() {
      return {
        pre: function($scope, $elm, $attrs, uiGridCtrl) {
          function compileTemplate() {
            var compiledElementFn = $scope.col.compiledElementFn;

            compiledElementFn($scope, function(clonedElement, scope) {
              $elm.append(clonedElement);
            });
          }

          // If the grid controller is present, use it to get the compiled cell template function
          if (uiGridCtrl && $scope.col.compiledElementFn) {
             compileTemplate();
          }

          // No controller, compile the element manually (for unit tests)
          else {
            if ( uiGridCtrl && !$scope.col.compiledElementFn ) {
              $scope.col.getCompiledElementFn()
                .then(function (compiledElementFn) {
                  compiledElementFn($scope, function(clonedElement, scope) {
                    $elm.append(clonedElement);
                  });
                }).catch(angular.noop);
            }
            else {
              var html = $scope.col.cellTemplate
                .replace(uiGridConstants.MODEL_COL_FIELD, 'row.entity.' + gridUtil.preEval($scope.col.field))
                .replace(uiGridConstants.COL_FIELD, 'grid.getCellValue(row, col)');

              var cellElement = $compile(html)($scope);
              $elm.append(cellElement);
            }
          }
        },
        post: function($scope, $elm) {
          var initColClass = $scope.col.getColClass(false),
            classAdded;

          $elm.addClass(initColClass);

          function updateClass( grid ) {
            var contents = $elm;

            if ( classAdded ) {
              contents.removeClass( classAdded );
              classAdded = null;
            }

            if (angular.isFunction($scope.col.cellClass)) {
              classAdded = $scope.col.cellClass($scope.grid, $scope.row, $scope.col, $scope.rowRenderIndex, $scope.colRenderIndex);
            }
            else {
              classAdded = $scope.col.cellClass;
            }
            contents.addClass(classAdded);
          }

          if ($scope.col.cellClass) {
            updateClass();
          }

          // Register a data change watch that would get triggered whenever someone edits a cell or modifies column defs
          var dataChangeDereg = $scope.grid.registerDataChangeCallback( updateClass, [uiGridConstants.dataChange.COLUMN, uiGridConstants.dataChange.EDIT]);

          // watch the col and row to see if they change - which would indicate that we've scrolled or sorted or otherwise
          // changed the row/col that this cell relates to, and we need to re-evaluate cell classes and maybe other things
          function cellChangeFunction( n, o ) {
            if ( n !== o ) {
              if ( classAdded || $scope.col.cellClass ) {
                updateClass();
              }

              // See if the column's internal class has changed
              var newColClass = $scope.col.getColClass(false);

              if (newColClass !== initColClass) {
                $elm.removeClass(initColClass);
                $elm.addClass(newColClass);
                initColClass = newColClass;
              }
            }
          }

          // TODO(c0bra): Turn this into a deep array watch
          var rowWatchDereg = $scope.$watch( 'row', cellChangeFunction );

          function deregisterFunction() {
            dataChangeDereg();
            rowWatchDereg();
          }

          $scope.$on('$destroy', deregisterFunction);
          $elm.on('$destroy', deregisterFunction);
        }
      };
    }
  };
}]);

(function() {

angular.module('ui.grid')
.service('uiGridColumnMenuService', [ 'i18nService', 'uiGridConstants', 'gridUtil',
function ( i18nService, uiGridConstants, gridUtil ) {
/**
 *  @ngdoc service
 *  @name ui.grid.service:uiGridColumnMenuService
 *
 *  @description Services for working with column menus, factored out
 *  to make the code easier to understand
 */

  var service = {
    /**
     * @ngdoc method
     * @methodOf ui.grid.service:uiGridColumnMenuService
     * @name initialize
     * @description  Sets defaults, puts a reference to the $scope on
     * the uiGridController
     * @param {$scope} $scope the $scope from the uiGridColumnMenu
     * @param {controller} uiGridCtrl the uiGridController for the grid
     * we're on
     *
     */
    initialize: function( $scope, uiGridCtrl ) {
      $scope.grid = uiGridCtrl.grid;

      // Store a reference to this link/controller in the main uiGrid controller
      // to allow showMenu later
      uiGridCtrl.columnMenuScope = $scope;

      // Save whether we're shown or not so the columns can check
      $scope.menuShown = false;
    },


    /**
     * @ngdoc method
     * @methodOf ui.grid.service:uiGridColumnMenuService
     * @name setColMenuItemWatch
     * @description  Setup a watch on $scope.col.menuItems, and update
     * menuItems based on this.  $scope.col needs to be set by the column
     * before calling the menu.
     * @param {$scope} $scope the $scope from the uiGridColumnMenu
     */
    setColMenuItemWatch: function ( $scope ) {
      var deregFunction = $scope.$watch('col.menuItems', function (n) {
        if (typeof(n) !== 'undefined' && n && angular.isArray(n)) {
          n.forEach(function (item) {
            if (typeof(item.context) === 'undefined' || !item.context) {
              item.context = {};
            }
            item.context.col = $scope.col;
          });

          $scope.menuItems = $scope.defaultMenuItems.concat(n);
        }
        else {
          $scope.menuItems = $scope.defaultMenuItems;
        }
      });

      $scope.$on( '$destroy', deregFunction );
    },


    /**
     * @ngdoc boolean
     * @name enableSorting
     * @propertyOf ui.grid.class:GridOptions.columnDef
     * @description (optional) True by default. When enabled, this setting adds sort
     * widgets to the column header, allowing sorting of the data in the individual column.
     */
    /**
     * @ngdoc method
     * @methodOf ui.grid.service:uiGridColumnMenuService
     * @name sortable
     * @description  determines whether this column is sortable
     * @param {$scope} $scope the $scope from the uiGridColumnMenu
     *
     */
    sortable: function( $scope ) {
      return Boolean( $scope.grid.options.enableSorting && typeof($scope.col) !== 'undefined' && $scope.col && $scope.col.enableSorting);
    },

    /**
     * @ngdoc method
     * @methodOf ui.grid.service:uiGridColumnMenuService
     * @name isActiveSort
     * @description  determines whether the requested sort direction is current active, to
     * allow highlighting in the menu
     * @param {$scope} $scope the $scope from the uiGridColumnMenu
     * @param {string} direction the direction that we'd have selected for us to be active
     *
     */
    isActiveSort: function( $scope, direction ) {
      return Boolean(typeof($scope.col) !== 'undefined' && typeof($scope.col.sort) !== 'undefined' &&
              typeof($scope.col.sort.direction) !== 'undefined' && $scope.col.sort.direction === direction);
    },

    /**
     * @ngdoc method
     * @methodOf ui.grid.service:uiGridColumnMenuService
     * @name suppressRemoveSort
     * @description  determines whether we should suppress the removeSort option
     * @param {$scope} $scope the $scope from the uiGridColumnMenu
     *
     */
    suppressRemoveSort: function( $scope ) {
      return Boolean($scope.col && $scope.col.suppressRemoveSort);
    },


    /**
     * @ngdoc boolean
     * @name enableHiding
     * @propertyOf ui.grid.class:GridOptions.columnDef
     * @description (optional) True by default. When set to false, this setting prevents a user from hiding the column
     * using the column menu or the grid menu.
     */
    /**
     * @ngdoc method
     * @methodOf ui.grid.service:uiGridColumnMenuService
     * @name hideable
     * @description  determines whether a column can be hidden, by checking the enableHiding columnDef option
     * @param {$scope} $scope the $scope from the uiGridColumnMenu
     *
     */
    hideable: function( $scope ) {
      return !(typeof($scope.col) !== 'undefined' && $scope.col && $scope.col.colDef && $scope.col.colDef.enableHiding === false );
    },


    /**
     * @ngdoc method
     * @methodOf ui.grid.service:uiGridColumnMenuService
     * @name getDefaultMenuItems
     * @description  returns the default menu items for a column menu
     * @param {$scope} $scope the $scope from the uiGridColumnMenu
     *
     */
    getDefaultMenuItems: function( $scope ) {
      return [
        {
          title: function() {return i18nService.getSafeText('sort.ascending');},
          icon: 'ui-grid-icon-sort-alt-up',
          action: function($event) {
            $event.stopPropagation();
            $scope.sortColumn($event, uiGridConstants.ASC);
          },
          shown: function () {
            return service.sortable( $scope );
          },
          active: function() {
            return service.isActiveSort( $scope, uiGridConstants.ASC);
          }
        },
        {
          title: function() {return i18nService.getSafeText('sort.descending');},
          icon: 'ui-grid-icon-sort-alt-down',
          action: function($event) {
            $event.stopPropagation();
            $scope.sortColumn($event, uiGridConstants.DESC);
          },
          shown: function() {
            return service.sortable( $scope );
          },
          active: function() {
            return service.isActiveSort( $scope, uiGridConstants.DESC);
          }
        },
        {
          title: function() {return i18nService.getSafeText('sort.remove');},
          icon: 'ui-grid-icon-cancel',
          action: function ($event) {
            $event.stopPropagation();
            $scope.unsortColumn();
          },
          shown: function() {
            return service.sortable( $scope ) &&
                   typeof($scope.col) !== 'undefined' && (typeof($scope.col.sort) !== 'undefined' &&
                   typeof($scope.col.sort.direction) !== 'undefined') && $scope.col.sort.direction !== null &&
                  !service.suppressRemoveSort( $scope );
          }
        },
        {
          title: function() {return i18nService.getSafeText('column.hide');},
          icon: 'ui-grid-icon-cancel',
          shown: function() {
            return service.hideable( $scope );
          },
          action: function ($event) {
            $event.stopPropagation();
            $scope.hideColumn();
          }
        }
      ];
    },


    /**
     * @ngdoc method
     * @methodOf ui.grid.service:uiGridColumnMenuService
     * @name getColumnElementPosition
     * @description  gets the position information needed to place the column
     * menu below the column header
     * @param {$scope} $scope the $scope from the uiGridColumnMenu
     * @param {GridColumn} column the column we want to position below
     * @param {element} $columnElement the column element we want to position below
     * @returns {hash} containing left, top, offset, height, width
     *
     */
    getColumnElementPosition: function( $scope, column, $columnElement ) {
      var positionData = {};

      positionData.left = $columnElement[0].offsetLeft;
      positionData.top = $columnElement[0].offsetTop;
      positionData.parentLeft = $columnElement[0].offsetParent.offsetLeft;

      // Get the grid scrollLeft
      positionData.offset = 0;
      if (column.grid.options.offsetLeft) {
        positionData.offset = column.grid.options.offsetLeft;
      }

      positionData.height = gridUtil.elementHeight($columnElement, true);
      positionData.width = gridUtil.elementWidth($columnElement, true);

      return positionData;
    },


    /**
     * @ngdoc method
     * @methodOf ui.grid.service:uiGridColumnMenuService
     * @name repositionMenu
     * @description  Reposition the menu below the new column.  If the menu has no child nodes
     * (i.e. it's not currently visible) then we guess it's width at 100, we'll be called again
     * later to fix it
     * @param {$scope} $scope the $scope from the uiGridColumnMenu
     * @param {GridColumn} column the column we want to position below
     * @param {hash} positionData a hash containing left, top, offset, height, width
     * @param {element} $elm the column menu element that we want to reposition
     * @param {element} $columnElement the column element that we want to reposition underneath
     *
     */
    repositionMenu: function( $scope, column, positionData, $elm, $columnElement ) {
      var menu = $elm[0].querySelectorAll('.ui-grid-menu');

      // It's possible that the render container of the column we're attaching to is
      // offset from the grid (i.e. pinned containers), we need to get the difference in the offsetLeft
      // between the render container and the grid
      var renderContainerElm = gridUtil.closestElm($columnElement, '.ui-grid-render-container'),
        renderContainerOffset = renderContainerElm.getBoundingClientRect().left - $scope.grid.element[0].getBoundingClientRect().left,
        containerScrollLeft = renderContainerElm.querySelectorAll('.ui-grid-viewport')[0].scrollLeft;

      // repositionMenu is now always called after it's visible in the DOM,
      // allowing us to simply get the width every time the menu is opened
      var myWidth = gridUtil.elementWidth(menu, true),
        paddingRight = column.lastMenuPaddingRight ? column.lastMenuPaddingRight : ( $scope.lastMenuPaddingRight ? $scope.lastMenuPaddingRight : 10);

      if ( menu.length !== 0 ) {
        var mid = menu[0].querySelectorAll('.ui-grid-menu-mid');

        if ( mid.length !== 0 ) {
          // TODO(c0bra): use padding-left/padding-right based on document direction (ltr/rtl), place menu on proper side
          // Get the column menu right padding
          paddingRight = parseInt(gridUtil.getStyles(angular.element(menu)[0])['paddingRight'], 10);
          $scope.lastMenuPaddingRight = paddingRight;
          column.lastMenuPaddingRight = paddingRight;
        }
      }

      var left = positionData.left + renderContainerOffset - containerScrollLeft + positionData.parentLeft + positionData.width + paddingRight;

      if (left < positionData.offset + myWidth) {
        left = Math.max(positionData.left - containerScrollLeft + positionData.parentLeft - paddingRight + myWidth, positionData.offset + myWidth);
      }

      $elm.css('left', left + 'px');
      $elm.css('top', (positionData.top + positionData.height) + 'px');
    }
  };
  return service;
}])


.directive('uiGridColumnMenu', ['$timeout', 'gridUtil', 'uiGridConstants', 'uiGridColumnMenuService', '$document',
function ($timeout, gridUtil, uiGridConstants, uiGridColumnMenuService, $document) {
/**
 * @ngdoc directive
 * @name ui.grid.directive:uiGridColumnMenu
 * @description  Provides the column menu framework, leverages uiGridMenu underneath
 *
 */

  return {
    priority: 0,
    scope: true,
    require: '^uiGrid',
    templateUrl: 'ui-grid/uiGridColumnMenu',
    replace: true,
    link: function ($scope, $elm, $attrs, uiGridCtrl) {
      uiGridColumnMenuService.initialize( $scope, uiGridCtrl );

      $scope.defaultMenuItems = uiGridColumnMenuService.getDefaultMenuItems( $scope );

      // Set the menu items for use with the column menu. The user can later add additional items via the watch
      $scope.menuItems = $scope.defaultMenuItems;
      uiGridColumnMenuService.setColMenuItemWatch( $scope );


      /**
       * @ngdoc method
       * @methodOf ui.grid.directive:uiGridColumnMenu
       * @name showMenu
       * @description Shows the column menu.  If the menu is already displayed it
       * calls the menu to ask it to hide (it will animate), then it repositions the menu
       * to the right place whilst hidden (it will make an assumption on menu width),
       * then it asks the menu to show (it will animate), then it repositions the menu again
       * once we can calculate it's size.
       * @param {GridColumn} column the column we want to position below
       * @param {element} $columnElement the column element we want to position below
       */
      $scope.showMenu = function(column, $columnElement, event) {
        // Swap to this column
        $scope.col = column;

        // Get the position information for the column element
        var colElementPosition = uiGridColumnMenuService.getColumnElementPosition( $scope, column, $columnElement );

        if ($scope.menuShown) {
          // we want to hide, then reposition, then show, but we want to wait for animations
          // we set a variable, and then rely on the menu-hidden event to call the reposition and show
          $scope.colElement = $columnElement;
          $scope.colElementPosition = colElementPosition;
          $scope.hideThenShow = true;

          $scope.$broadcast('hide-menu', { originalEvent: event });
        } else {
          $scope.menuShown = true;

          $scope.colElement = $columnElement;
          $scope.colElementPosition = colElementPosition;
          $scope.$broadcast('show-menu', { originalEvent: event });
        }
      };


      /**
       * @ngdoc method
       * @methodOf ui.grid.directive:uiGridColumnMenu
       * @name hideMenu
       * @description Hides the column menu.
       * @param {boolean} broadcastTrigger true if we were triggered by a broadcast
       * from the menu itself - in which case don't broadcast again as we'll get
       * an infinite loop
       */
      $scope.hideMenu = function( broadcastTrigger ) {
        $scope.menuShown = false;
        if ( !broadcastTrigger ) {
          $scope.$broadcast('hide-menu');
        }
      };


      $scope.$on('menu-hidden', function() {
        var menuItems = angular.element($elm[0].querySelector('.ui-grid-menu-items'))[0];

        $elm[0].removeAttribute('style');

        if ( $scope.hideThenShow ) {
          delete $scope.hideThenShow;

          $scope.$broadcast('show-menu');

          $scope.menuShown = true;
        } else {
          $scope.hideMenu( true );

          if ($scope.col && $scope.col.visible) {
            // Focus on the menu button
            gridUtil.focus.bySelector($document, '.ui-grid-header-cell.' + $scope.col.getColClass()+ ' .ui-grid-column-menu-button', $scope.col.grid, false)
                .catch(angular.noop);
          }
        }

        if (menuItems) {
          menuItems.onkeydown = null;
          angular.forEach(menuItems.children, function removeHandlers(item) {
            item.onkeydown = null;
          });
        }
      });

      $scope.$on('menu-shown', function() {
        $timeout(function() {
          uiGridColumnMenuService.repositionMenu( $scope, $scope.col, $scope.colElementPosition, $elm, $scope.colElement );

          var hasVisibleMenuItems = $scope.menuItems.some(function (menuItem) {
              return menuItem.shown();
          });

          // automatically set the focus to the first button element in the now open menu.
          if (hasVisibleMenuItems) {
            gridUtil.focus.bySelector($document, '.ui-grid-menu-items .ui-grid-menu-item:not(.ng-hide)', true)
                .catch(angular.noop);
          }

          delete $scope.colElementPosition;
          delete $scope.columnElement;
          addKeydownHandlersToMenu();
        });
      });


      /* Column methods */
      $scope.sortColumn = function (event, dir) {
        event.stopPropagation();

        $scope.grid.sortColumn($scope.col, dir, true)
          .then(function () {
            $scope.grid.refresh();
            $scope.hideMenu();
          }).catch(angular.noop);
      };

      $scope.unsortColumn = function () {
        $scope.col.unsort();

        $scope.grid.refresh();
        $scope.hideMenu();
      };

      function addKeydownHandlersToMenu() {
        var menu = angular.element($elm[0].querySelector('.ui-grid-menu-items'))[0],
          menuItems,
          visibleMenuItems = [];

        if (menu) {
          menu.onkeydown = function closeMenu(event) {
            if (event.keyCode === uiGridConstants.keymap.ESC) {
              event.preventDefault();
              $scope.hideMenu();
            }
          };

          menuItems = menu.querySelectorAll('.ui-grid-menu-item:not(.ng-hide)');
          angular.forEach(menuItems, function filterVisibleItems(item) {
            if (item.offsetParent !== null) {
              this.push(item);
            }
          }, visibleMenuItems);

          if (visibleMenuItems.length) {
            if (visibleMenuItems.length === 1) {
              visibleMenuItems[0].onkeydown = function singleItemHandler(event) {
                circularFocusHandler(event, true);
              };
            } else {
              visibleMenuItems[0].onkeydown = function firstItemHandler(event) {
                circularFocusHandler(event, false, event.shiftKey, visibleMenuItems.length - 1);
              };
              visibleMenuItems[visibleMenuItems.length - 1].onkeydown = function lastItemHandler(event) {
                circularFocusHandler(event, false, !event.shiftKey, 0);
              };
            }
          }
        }

        function circularFocusHandler(event, isSingleItem, shiftKeyStatus, index) {
          if (event.keyCode === uiGridConstants.keymap.TAB) {
            if (isSingleItem) {
              event.preventDefault();
            } else if (shiftKeyStatus) {
              event.preventDefault();
              visibleMenuItems[index].focus();
            }
          }
        }
      }

      // Since we are hiding this column the default hide action will fail so we need to focus somewhere else.
      var setFocusOnHideColumn = function() {
        $timeout(function() {
          // Get the UID of the first
          var focusToGridMenu = function() {
            return gridUtil.focus.byId('grid-menu', $scope.grid);
          };

          var thisIndex;
          $scope.grid.columns.some(function(element, index) {
            if (angular.equals(element, $scope.col)) {
              thisIndex = index;
              return true;
            }
          });

          var previousVisibleCol;
          // Try and find the next lower or nearest column to focus on
          $scope.grid.columns.some(function(element, index) {
            if (!element.visible) {
              return false;
            } // This columns index is below the current column index
            else if ( index < thisIndex) {
              previousVisibleCol = element;
            } // This elements index is above this column index and we haven't found one that is lower
            else if ( index > thisIndex && !previousVisibleCol) {
              // This is the next best thing
              previousVisibleCol = element;
              // We've found one so use it.
              return true;
            } // We've reached an element with an index above this column and the previousVisibleCol variable has been set
            else if (index > thisIndex && previousVisibleCol) {
              // We are done.
              return true;
            }
          });
          // If found then focus on it
          if (previousVisibleCol) {
            var colClass = previousVisibleCol.getColClass();
            gridUtil.focus.bySelector($document, '.ui-grid-header-cell.' + colClass+ ' .ui-grid-header-cell-primary-focus', true).then(angular.noop, function(reason) {
              if (reason !== 'canceled') { // If this is canceled then don't perform the action
                // The fallback action is to focus on the grid menu
                return focusToGridMenu();
              }
            }).catch(angular.noop);
          } else {
            // Fallback action to focus on the grid menu
            focusToGridMenu();
          }
        });
      };

      $scope.hideColumn = function () {
        $scope.col.colDef.visible = false;
        $scope.col.visible = false;

        $scope.grid.queueGridRefresh();
        $scope.hideMenu();
        $scope.grid.api.core.notifyDataChange( uiGridConstants.dataChange.COLUMN );
        $scope.grid.api.core.raise.columnVisibilityChanged( $scope.col );

        // We are hiding so the default action of focusing on the button that opened this menu will fail.
        setFocusOnHideColumn();
      };
    },

    controller: ['$scope', function ($scope) {
      var self = this;

      $scope.$watch('menuItems', function (n) {
        self.menuItems = n;
      });
    }]
  };
}]);
})();

(function() {
  'use strict';

  angular.module('ui.grid').directive('uiGridFilter', ['$compile', '$templateCache', 'i18nService', 'gridUtil', function ($compile, $templateCache, i18nService, gridUtil) {

    return {
      compile: function() {
        return {
          pre: function ($scope, $elm) {
            $scope.col.updateFilters = function( filterable ) {
              $elm.children().remove();
              if ( filterable ) {
                var template = $scope.col.filterHeaderTemplate;
                if (template === undefined && $scope.col.providedFilterHeaderTemplate !== '') {
                  if ($scope.col.filterHeaderTemplatePromise) {
                    $scope.col.filterHeaderTemplatePromise.then(function () {
                      template = $scope.col.filterHeaderTemplate;
                      $elm.append($compile(template)($scope));
                    });
                  }
                }
                else {
                  $elm.append($compile(template)($scope));
                }
              }
            };

            $scope.$on( '$destroy', function() {
              delete $scope.col.filterable;
              delete $scope.col.updateFilters;
            });
          },
          post: function ($scope, $elm) {
            $scope.aria = i18nService.getSafeText('headerCell.aria');
            $scope.removeFilter = function(colFilter, index) {
              colFilter.term = null;
              // Set the focus to the filter input after the action disables the button
              gridUtil.focus.bySelector($elm, '.ui-grid-filter-input-' + index);
            };
          }
        };
      }
    };
  }]);
})();

(function () {
  'use strict';

  angular.module('ui.grid').directive('uiGridFooterCell', ['$timeout', 'gridUtil', 'uiGridConstants', '$compile',
  function ($timeout, gridUtil, uiGridConstants, $compile) {
    return {
      priority: 0,
      scope: {
        col: '=',
        row: '=',
        renderIndex: '='
      },
      replace: true,
      require: '^uiGrid',
      compile: function compile() {
        return {
          pre: function ($scope, $elm) {
            var template = $scope.col.footerCellTemplate;

            if (template === undefined && $scope.col.providedFooterCellTemplate !== '') {
              if ($scope.col.footerCellTemplatePromise) {
                $scope.col.footerCellTemplatePromise.then(function () {
                  template = $scope.col.footerCellTemplate;
                  $elm.append($compile(template)($scope));
                });
              }
            }
            else {
              $elm.append($compile(template)($scope));
            }
          },
          post: function ($scope, $elm, $attrs, uiGridCtrl) {
            // $elm.addClass($scope.col.getColClass(false));
            $scope.grid = uiGridCtrl.grid;

            var initColClass = $scope.col.getColClass(false);

            $elm.addClass(initColClass);

            // apply any footerCellClass
            var classAdded;

            var updateClass = function() {
              var contents = $elm;

              if ( classAdded ) {
                contents.removeClass( classAdded );
                classAdded = null;
              }

              if (angular.isFunction($scope.col.footerCellClass)) {
                classAdded = $scope.col.footerCellClass($scope.grid, $scope.row, $scope.col, $scope.rowRenderIndex, $scope.colRenderIndex);
              }
              else {
                classAdded = $scope.col.footerCellClass;
              }
              contents.addClass(classAdded);
            };

            if ($scope.col.footerCellClass) {
              updateClass();
            }

            $scope.col.updateAggregationValue();

            // Register a data change watch that would get triggered whenever someone edits a cell or modifies column defs
            var dataChangeDereg = $scope.grid.registerDataChangeCallback( updateClass, [uiGridConstants.dataChange.COLUMN]);

            // listen for visible rows change and update aggregation values
            $scope.grid.api.core.on.rowsRendered( $scope, $scope.col.updateAggregationValue );
            $scope.grid.api.core.on.rowsRendered( $scope, updateClass );
            $scope.$on( '$destroy', dataChangeDereg );
          }
        };
      }
    };
  }]);
})();

(function () {
  'use strict';

  angular.module('ui.grid').directive('uiGridFooter', ['$templateCache', '$compile', 'uiGridConstants', 'gridUtil', '$timeout', function ($templateCache, $compile, uiGridConstants, gridUtil, $timeout) {

    return {
      restrict: 'EA',
      replace: true,
      // priority: 1000,
      require: ['^uiGrid', '^uiGridRenderContainer'],
      scope: true,
      compile: function ($elm, $attrs) {
        return {
          pre: function ($scope, $elm, $attrs, controllers) {
            var uiGridCtrl = controllers[0];
            var containerCtrl = controllers[1];

            $scope.grid = uiGridCtrl.grid;
            $scope.colContainer = containerCtrl.colContainer;

            containerCtrl.footer = $elm;

            var footerTemplate = $scope.grid.options.footerTemplate;
            gridUtil.getTemplate(footerTemplate)
              .then(function (contents) {
                var template = angular.element(contents);

                var newElm = $compile(template)($scope);
                $elm.append(newElm);

                if (containerCtrl) {
                  // Inject a reference to the footer viewport (if it exists) into the grid controller for use in the horizontal scroll handler below
                  var footerViewport = $elm[0].getElementsByClassName('ui-grid-footer-viewport')[0];

                  if (footerViewport) {
                    containerCtrl.footerViewport = footerViewport;
                  }
                }
              }).catch(angular.noop);
          },

          post: function ($scope, $elm, $attrs, controllers) {
            var uiGridCtrl = controllers[0];
            var containerCtrl = controllers[1];

            // gridUtil.logDebug('ui-grid-footer link');

            var grid = uiGridCtrl.grid;

            // Don't animate footer cells
            gridUtil.disableAnimations($elm);

            containerCtrl.footer = $elm;

            var footerViewport = $elm[0].getElementsByClassName('ui-grid-footer-viewport')[0];
            if (footerViewport) {
              containerCtrl.footerViewport = footerViewport;
            }
          }
        };
      }
    };
  }]);

})();

(function() {
	'use strict';

	angular.module('ui.grid').directive('uiGridGridFooter', ['$templateCache', '$compile', 'uiGridConstants', 'gridUtil',
		function($templateCache, $compile, uiGridConstants, gridUtil) {
			return {
				restrict: 'EA',
				replace: true,
				require: '^uiGrid',
				scope: true,
				compile: function() {
					return {
						pre: function($scope, $elm, $attrs, uiGridCtrl) {
							$scope.grid = uiGridCtrl.grid;

							var footerTemplate = $scope.grid.options.gridFooterTemplate;

							gridUtil.getTemplate(footerTemplate)
								.then(function(contents) {
									var template = angular.element(contents),
										newElm = $compile(template)($scope);

									$elm.append(newElm);
								}).catch(angular.noop);
						}
					};
				}
			};
		}]);
})();

(function() {
  'use strict';

  angular.module('ui.grid').directive('uiGridHeaderCell', ['$compile', '$timeout', '$window', '$document', 'gridUtil', 'uiGridConstants', 'ScrollEvent', 'i18nService', '$rootScope',
  function ($compile, $timeout, $window, $document, gridUtil, uiGridConstants, ScrollEvent, i18nService, $rootScope) {
    // Do stuff after mouse has been down this many ms on the header cell
    var mousedownTimeout = 500,
      changeModeTimeout = 500; // length of time between a touch event and a mouse event being recognised again, and vice versa

    return {
      priority: 0,
      scope: {
        col: '=',
        row: '=',
        renderIndex: '='
      },
      require: ['^uiGrid', '^uiGridRenderContainer'],
      replace: true,
      compile: function() {
        return {
          pre: function ($scope, $elm) {
            var template = $scope.col.headerCellTemplate;
            if (template === undefined && $scope.col.providedHeaderCellTemplate !== '') {
              if ($scope.col.headerCellTemplatePromise) {
                $scope.col.headerCellTemplatePromise.then(function () {
                  template = $scope.col.headerCellTemplate;
                  $elm.append($compile(template)($scope));
                });
              }
            }
            else {
              $elm.append($compile(template)($scope));
            }
          },

          post: function ($scope, $elm, $attrs, controllers) {
            var uiGridCtrl = controllers[0];
            var renderContainerCtrl = controllers[1];

            $scope.i18n = {
              headerCell: i18nService.getSafeText('headerCell'),
              sort: i18nService.getSafeText('sort')
            };
            $scope.isSortPriorityVisible = function() {
              // show sort priority if column is sorted and there is at least one other sorted column
              return $scope.col && $scope.col.sort && angular.isNumber($scope.col.sort.priority) && $scope.grid.columns.some(function(element, index) {
                  return angular.isNumber(element.sort.priority) && element !== $scope.col;
                });
            };
            $scope.getSortDirectionAriaLabel = function() {
              var col = $scope.col;
              // Trying to recreate this sort of thing but it was getting messy having it in the template.
              // Sort direction {{col.sort.direction == asc ? 'ascending' : ( col.sort.direction == desc ? 'descending': 'none')}}.
              // {{col.sort.priority ? {{columnPriorityText}} {{col.sort.priority}} : ''}
              var label = col.sort && col.sort.direction === uiGridConstants.ASC ? $scope.i18n.sort.ascending : ( col.sort && col.sort.direction === uiGridConstants.DESC ? $scope.i18n.sort.descending : $scope.i18n.sort.none);

              if ($scope.isSortPriorityVisible()) {
                label = label + '. ' + $scope.i18n.headerCell.priority + ' ' + (col.sort.priority + 1);
              }
              return label;
            };

            $scope.grid = uiGridCtrl.grid;

            $scope.renderContainer = uiGridCtrl.grid.renderContainers[renderContainerCtrl.containerId];

            var initColClass = $scope.col.getColClass(false);
            $elm.addClass(initColClass);

            // Hide the menu by default
            $scope.menuShown = false;

            // Put asc and desc sort directions in scope
            $scope.asc = uiGridConstants.ASC;
            $scope.desc = uiGridConstants.DESC;

            // Store a reference to menu element
            var $contentsElm = angular.element( $elm[0].querySelectorAll('.ui-grid-cell-contents') );


            // apply any headerCellClass
            var classAdded,
              previousMouseX;

            // filter watchers
            var filterDeregisters = [];


            /*
             * Our basic approach here for event handlers is that we listen for a down event (mousedown or touchstart).
             * Once we have a down event, we need to work out whether we have a click, a drag, or a
             * hold.  A click would sort the grid (if sortable).  A drag would be used by moveable, so
             * we ignore it.  A hold would open the menu.
             *
             * So, on down event, we put in place handlers for move and up events, and a timer.  If the
             * timer expires before we see a move or up, then we have a long press and hence a column menu open.
             * If the up happens before the timer, then we have a click, and we sort if the column is sortable.
             * If a move happens before the timer, then we are doing column move, so we do nothing, the moveable feature
             * will handle it.
             *
             * To deal with touch enabled devices that also have mice, we only create our handlers when
             * we get the down event, and we create the corresponding handlers - if we're touchstart then
             * we get touchmove and touchend, if we're mousedown then we get mousemove and mouseup.
             *
             * We also suppress the click action whilst this is happening - otherwise after the mouseup there
             * will be a click event and that can cause the column menu to close
             *
             */
            $scope.downFn = function( event ) {
              event.stopPropagation();

              if (typeof(event.originalEvent) !== 'undefined' && event.originalEvent !== undefined) {
                event = event.originalEvent;
              }

              // Don't show the menu if it's not the left button
              if (event.button && event.button !== 0) {
                return;
              }
              previousMouseX = event.pageX;

              $scope.mousedownStartTime = (new Date()).getTime();
              $scope.mousedownTimeout = $timeout(function() { }, mousedownTimeout);

              $scope.mousedownTimeout.then(function () {
                if ( $scope.colMenu ) {
                  uiGridCtrl.columnMenuScope.showMenu($scope.col, $elm, event);
                }
              }).catch(angular.noop);

              uiGridCtrl.fireEvent(uiGridConstants.events.COLUMN_HEADER_CLICK, {event: event, columnName: $scope.col.colDef.name});

              $scope.offAllEvents();
              if ( event.type === 'touchstart') {
                $document.on('touchend', $scope.upFn);
                $document.on('touchmove', $scope.moveFn);
              } else if ( event.type === 'mousedown' ) {
                $document.on('mouseup', $scope.upFn);
                $document.on('mousemove', $scope.moveFn);
              }
            };

            $scope.upFn = function( event ) {
              event.stopPropagation();
              $timeout.cancel($scope.mousedownTimeout);
              $scope.offAllEvents();
              $scope.onDownEvents(event.type);

              var mousedownEndTime = (new Date()).getTime();
              var mousedownTime = mousedownEndTime - $scope.mousedownStartTime;

              if (mousedownTime > mousedownTimeout) {
                // long click, handled above with mousedown
              }
              else {
                // short click
                if ( $scope.sortable ) {
                  $scope.handleClick(event);
                }
              }
            };

            $scope.handleKeyDown = function(event) {
              if (event.keyCode === 32 || event.keyCode === 13) {
                event.preventDefault();
                $scope.handleClick(event);
              }
            };

            $scope.moveFn = function( event ) {
              // Chrome is known to fire some bogus move events.
              var changeValue = event.pageX - previousMouseX;
              if ( changeValue === 0 ) { return; }

              // we're a move, so do nothing and leave for column move (if enabled) to take over
              $timeout.cancel($scope.mousedownTimeout);
              $scope.offAllEvents();
              $scope.onDownEvents(event.type);
            };

            $scope.clickFn = function ( event ) {
              event.stopPropagation();
              $contentsElm.off('click', $scope.clickFn);
            };


            $scope.offAllEvents = function() {
              $contentsElm.off('touchstart', $scope.downFn);
              $contentsElm.off('mousedown', $scope.downFn);

              $document.off('touchend', $scope.upFn);
              $document.off('mouseup', $scope.upFn);

              $document.off('touchmove', $scope.moveFn);
              $document.off('mousemove', $scope.moveFn);

              $contentsElm.off('click', $scope.clickFn);
            };

            $scope.onDownEvents = function( type ) {
              // If there is a previous event, then wait a while before
              // activating the other mode - i.e. if the last event was a touch event then
              // don't enable mouse events for a wee while (500ms or so)
              // Avoids problems with devices that emulate mouse events when you have touch events

              switch (type) {
                case 'touchmove':
                case 'touchend':
                  $contentsElm.on('click', $scope.clickFn);
                  $contentsElm.on('touchstart', $scope.downFn);
                  $timeout(function() {
                    $contentsElm.on('mousedown', $scope.downFn);
                  }, changeModeTimeout);
                  break;
                case 'mousemove':
                case 'mouseup':
                  $contentsElm.on('click', $scope.clickFn);
                  $contentsElm.on('mousedown', $scope.downFn);
                  $timeout(function() {
                    $contentsElm.on('touchstart', $scope.downFn);
                  }, changeModeTimeout);
                  break;
                default:
                  $contentsElm.on('click', $scope.clickFn);
                  $contentsElm.on('touchstart', $scope.downFn);
                  $contentsElm.on('mousedown', $scope.downFn);
              }
            };

            var setFilter = function (updateFilters) {
              if ( updateFilters ) {
                if ( typeof($scope.col.updateFilters) !== 'undefined' ) {
                  $scope.col.updateFilters($scope.col.filterable);
                }

                // if column is filterable add a filter watcher
                if ($scope.col.filterable) {
                  $scope.col.filters.forEach( function(filter, i) {
                    filterDeregisters.push($scope.$watch('col.filters[' + i + '].term', function(n, o) {
                      if (n !== o) {
                        uiGridCtrl.grid.api.core.raise.filterChanged( $scope.col );
                        uiGridCtrl.grid.api.core.notifyDataChange( uiGridConstants.dataChange.COLUMN );
                        uiGridCtrl.grid.queueGridRefresh();
                      }
                    }));
                  });
                  $scope.$on('$destroy', function() {
                    filterDeregisters.forEach( function(filterDeregister) {
                      filterDeregister();
                    });
                  });
                } else {
                  filterDeregisters.forEach( function(filterDeregister) {
                    filterDeregister();
                  });
                }
              }
            };

            var updateHeaderOptions = function() {
              var contents = $elm;

              if ( classAdded ) {
                contents.removeClass( classAdded );
                classAdded = null;
              }

              if (angular.isFunction($scope.col.headerCellClass)) {
                classAdded = $scope.col.headerCellClass($scope.grid, $scope.row, $scope.col, $scope.rowRenderIndex, $scope.colRenderIndex);
              }
              else {
                classAdded = $scope.col.headerCellClass;
              }
              contents.addClass(classAdded);

              $scope.$applyAsync(function() {
                var rightMostContainer = $scope.grid.renderContainers['right'] && $scope.grid.renderContainers['right'].visibleColumnCache.length ?
                $scope.grid.renderContainers['right'] : $scope.grid.renderContainers['body'];
                $scope.isLastCol = uiGridCtrl.grid.options && uiGridCtrl.grid.options.enableGridMenu &&
                  $scope.col === rightMostContainer.visibleColumnCache[ rightMostContainer.visibleColumnCache.length - 1 ];
              });

              // Figure out whether this column is sortable or not
              $scope.sortable = Boolean($scope.col.enableSorting);

              // Figure out whether this column is filterable or not
              var oldFilterable = $scope.col.filterable;
              $scope.col.filterable = Boolean(uiGridCtrl.grid.options.enableFiltering && $scope.col.enableFiltering);

              $scope.$applyAsync(function () {
                setFilter(oldFilterable !== $scope.col.filterable);
              });

              // figure out whether we support column menus
              $scope.colMenu = ($scope.col.grid.options && $scope.col.grid.options.enableColumnMenus !== false &&
                      $scope.col.colDef && $scope.col.colDef.enableColumnMenu !== false);

              /**
               * @ngdoc property
               * @name enableColumnMenu
               * @propertyOf ui.grid.class:GridOptions.columnDef
               * @description if column menus are enabled, controls the column menus for this specific
               * column (i.e. if gridOptions.enableColumnMenus, then you can control column menus
               * using this option. If gridOptions.enableColumnMenus === false then you get no column
               * menus irrespective of the value of this option ).  Defaults to true.
               *
               * By default column menu's trigger is hidden before mouse over, but you can always force it to be visible with CSS:
               *
               * <pre>
               *  .ui-grid-column-menu-button {
               *    display: block;
               *  }
               * </pre>
               */
              /**
              * @ngdoc property
              * @name enableColumnMenus
              * @propertyOf ui.grid.class:GridOptions.columnDef
              * @description Override for column menus everywhere - if set to false then you get no
              * column menus.  Defaults to true.
              *
              */

              $scope.offAllEvents();

              if ($scope.sortable || $scope.colMenu) {
                $scope.onDownEvents();

                $scope.$on('$destroy', function () {
                  $scope.offAllEvents();
                });
              }
            };

            updateHeaderOptions();

            if ($scope.col.filterContainer === 'columnMenu' && $scope.col.filterable) {
              $rootScope.$on('menu-shown', function() {
                $scope.$applyAsync(function () {
                  setFilter($scope.col.filterable);
                });
              });
            }

            // Register a data change watch that would get triggered whenever someone edits a cell or modifies column defs
            var dataChangeDereg = $scope.grid.registerDataChangeCallback( updateHeaderOptions, [uiGridConstants.dataChange.COLUMN]);

            $scope.$on( '$destroy', dataChangeDereg );

            $scope.handleClick = function(event) {
              // If the shift key is being held down, add this column to the sort
              var add = false;
              if (event.shiftKey) {
                add = true;
              }

              // Sort this column then rebuild the grid's rows
              uiGridCtrl.grid.sortColumn($scope.col, add)
                .then(function () {
                  if (uiGridCtrl.columnMenuScope) { uiGridCtrl.columnMenuScope.hideMenu(); }
                  uiGridCtrl.grid.refresh();
                }).catch(angular.noop);
            };

            $scope.headerCellArrowKeyDown = function(event) {
              if (event.keyCode === 32 || event.keyCode === 13) {
                event.preventDefault();
                $scope.toggleMenu(event);
              }
            };

            $scope.toggleMenu = function(event) {

              event.stopPropagation();

              // If the menu is already showing...
              if (uiGridCtrl.columnMenuScope.menuShown) {
                // ... and we're the column the menu is on...
                if (uiGridCtrl.columnMenuScope.col === $scope.col) {
                  // ... hide it
                  uiGridCtrl.columnMenuScope.hideMenu();
                }
                // ... and we're NOT the column the menu is on
                else {
                  // ... move the menu to our column
                  uiGridCtrl.columnMenuScope.showMenu($scope.col, $elm);
                }
              }
              // If the menu is NOT showing
              else {
                // ... show it on our column
                uiGridCtrl.columnMenuScope.showMenu($scope.col, $elm);
              }
            };
          }
        };
      }
    };
  }]);
})();

(function() {
  'use strict';

  angular.module('ui.grid').directive('uiGridHeader', ['$templateCache', '$compile', 'uiGridConstants', 'gridUtil', '$timeout', 'ScrollEvent',
    function($templateCache, $compile, uiGridConstants, gridUtil, $timeout, ScrollEvent) {
    var defaultTemplate = 'ui-grid/ui-grid-header',
      emptyTemplate = 'ui-grid/ui-grid-no-header';

    return {
      restrict: 'EA',
      replace: true,
      require: ['^uiGrid', '^uiGridRenderContainer'],
      scope: true,
      compile: function() {
        return {
          pre: function ($scope, $elm, $attrs, controllers) {
            var uiGridCtrl = controllers[0],
              containerCtrl = controllers[1];

            $scope.grid = uiGridCtrl.grid;
            $scope.colContainer = containerCtrl.colContainer;

            updateHeaderReferences();

            var headerTemplate;
            if (!$scope.grid.options.showHeader) {
              headerTemplate = emptyTemplate;
            }
            else {
              headerTemplate = ($scope.grid.options.headerTemplate) ? $scope.grid.options.headerTemplate : defaultTemplate;
            }

            gridUtil.getTemplate(headerTemplate)
              .then(function (contents) {
                var template = angular.element(contents);

                var newElm = $compile(template)($scope);
                $elm.replaceWith(newElm);

                // And update $elm to be the new element
                $elm = newElm;

                updateHeaderReferences();

                if (containerCtrl) {
                  // Inject a reference to the header viewport (if it exists) into the grid controller for use in the horizontal scroll handler below
                  var headerViewport = $elm[0].getElementsByClassName('ui-grid-header-viewport')[0];


                  if (headerViewport) {
                    containerCtrl.headerViewport = headerViewport;
                    angular.element(headerViewport).on('scroll', scrollHandler);
                    $scope.$on('$destroy', function () {
                      angular.element(headerViewport).off('scroll', scrollHandler);
                    });
                  }
                }

                $scope.grid.queueRefresh();
              }).catch(angular.noop);

            function updateHeaderReferences() {
              containerCtrl.header = containerCtrl.colContainer.header = $elm;

              var headerCanvases = $elm[0].getElementsByClassName('ui-grid-header-canvas');

              if (headerCanvases.length > 0) {
                containerCtrl.headerCanvas = containerCtrl.colContainer.headerCanvas = headerCanvases[0];
              }
              else {
                containerCtrl.headerCanvas = null;
              }
            }

            function scrollHandler() {
              if (uiGridCtrl.grid.isScrollingHorizontally) {
                return;
              }
              var newScrollLeft = gridUtil.normalizeScrollLeft(containerCtrl.headerViewport, uiGridCtrl.grid);
              var horizScrollPercentage = containerCtrl.colContainer.scrollHorizontal(newScrollLeft);

              var scrollEvent = new ScrollEvent(uiGridCtrl.grid, null, containerCtrl.colContainer, ScrollEvent.Sources.ViewPortScroll);
              scrollEvent.newScrollLeft = newScrollLeft;
              if ( horizScrollPercentage > -1 ) {
                scrollEvent.x = { percentage: horizScrollPercentage };
              }

              uiGridCtrl.grid.scrollContainers(null, scrollEvent);
            }
          },

          post: function ($scope, $elm, $attrs, controllers) {
            var uiGridCtrl = controllers[0];
            var containerCtrl = controllers[1];

            // gridUtil.logDebug('ui-grid-header link');

            var grid = uiGridCtrl.grid;

            // Don't animate header cells
            gridUtil.disableAnimations($elm);

            function updateColumnWidths() {
              // this styleBuilder always runs after the renderContainer, so we can rely on the column widths
              // already being populated correctly

              var columnCache = containerCtrl.colContainer.visibleColumnCache;

              // Build the CSS
              // uiGridCtrl.grid.columns.forEach(function (column) {
              var ret = '';
              var canvasWidth = 0;
              columnCache.forEach(function (column) {
                ret = ret + column.getColClassDefinition();
                canvasWidth += column.drawnWidth;
              });

              containerCtrl.colContainer.canvasWidth = canvasWidth;

              // Return the styles back to buildStyles which pops them into the `customStyles` scope variable
              return ret;
            }

            containerCtrl.header = $elm;

            var headerViewport = $elm[0].getElementsByClassName('ui-grid-header-viewport')[0];
            if (headerViewport) {
              containerCtrl.headerViewport = headerViewport;
            }

            // todo: remove this if by injecting gridCtrl into unit tests
            if (uiGridCtrl) {
              uiGridCtrl.grid.registerStyleComputation({
                priority: 15,
                func: updateColumnWidths
              });
            }
          }
        };
      }
    };
  }]);
})();

(function() {

angular.module('ui.grid')
.service('uiGridGridMenuService', [ 'gridUtil', 'i18nService', 'uiGridConstants', function( gridUtil, i18nService, uiGridConstants ) {
  /**
   *  @ngdoc service
   *  @name ui.grid.uiGridGridMenuService
   *
   *  @description Methods for working with the grid menu
   */

  var service = {
    /**
     * @ngdoc method
     * @methodOf ui.grid.uiGridGridMenuService
     * @name initialize
     * @description Sets up the gridMenu. Most importantly, sets our
     * scope onto the grid object as grid.gridMenuScope, allowing us
     * to operate when passed only the grid.  Second most importantly,
     * we register the 'addToGridMenu' and 'removeFromGridMenu' methods
     * on the core api.
     * @param {$scope} $scope the scope of this gridMenu
     * @param {Grid} grid the grid to which this gridMenu is associated
     */
    initialize: function( $scope, grid ) {
      grid.gridMenuScope = $scope;
      $scope.grid = grid;
      $scope.registeredMenuItems = [];

      // not certain this is needed, but would be bad to create a memory leak
      $scope.$on('$destroy', function() {
        if ( $scope.grid && $scope.grid.gridMenuScope ) {
          $scope.grid.gridMenuScope = null;
        }
        if ( $scope.grid ) {
          $scope.grid = null;
        }
        if ( $scope.registeredMenuItems ) {
          $scope.registeredMenuItems = null;
        }
      });

      $scope.registeredMenuItems = [];

      /**
       * @ngdoc function
       * @name addToGridMenu
       * @methodOf ui.grid.api:PublicApi
       * @description add items to the grid menu.  Used by features
       * to add their menu items if they are enabled, can also be used by
       * end users to add menu items.  This method has the advantage of allowing
       * remove again, which can simplify management of which items are included
       * in the menu when.  (Noting that in most cases the shown and active functions
       * provide a better way to handle visibility of menu items)
       * @param {Grid} grid the grid on which we are acting
       * @param {array} items menu items in the format as described in the tutorial, with
       * the added note that if you want to use remove you must also specify an `id` field,
       * which is provided when you want to remove an item.  The id should be unique.
       *
       */
      grid.api.registerMethod( 'core', 'addToGridMenu', service.addToGridMenu );

      /**
       * @ngdoc function
       * @name removeFromGridMenu
       * @methodOf ui.grid.api:PublicApi
       * @description Remove an item from the grid menu based on a provided id. Assumes
       * that the id is unique, removes only the last instance of that id. Does nothing if
       * the specified id is not found
       * @param {Grid} grid the grid on which we are acting
       * @param {string} id the id we'd like to remove from the menu
       *
       */
      grid.api.registerMethod( 'core', 'removeFromGridMenu', service.removeFromGridMenu );
    },


    /**
     * @ngdoc function
     * @name addToGridMenu
     * @propertyOf ui.grid.uiGridGridMenuService
     * @description add items to the grid menu.  Used by features
     * to add their menu items if they are enabled, can also be used by
     * end users to add menu items.  This method has the advantage of allowing
     * remove again, which can simplify management of which items are included
     * in the menu when.  (Noting that in most cases the shown and active functions
     * provide a better way to handle visibility of menu items)
     * @param {Grid} grid the grid on which we are acting
     * @param {array} menuItems menu items in the format as described in the tutorial, with
     * the added note that if you want to use remove you must also specify an `id` field,
     * which is provided when you want to remove an item.  The id should be unique.
     *
     */
    addToGridMenu: function( grid, menuItems ) {
      if ( !angular.isArray( menuItems ) ) {
        gridUtil.logError( 'addToGridMenu: menuItems must be an array, and is not, not adding any items');
      } else {
        if ( grid.gridMenuScope ) {
          grid.gridMenuScope.registeredMenuItems = grid.gridMenuScope.registeredMenuItems ? grid.gridMenuScope.registeredMenuItems : [];
          grid.gridMenuScope.registeredMenuItems = grid.gridMenuScope.registeredMenuItems.concat( menuItems );
        } else {
          gridUtil.logError( 'Asked to addToGridMenu, but gridMenuScope not present.  Timing issue?  Please log issue with ui-grid');
        }
      }
    },


    /**
     * @ngdoc function
     * @name removeFromGridMenu
     * @methodOf ui.grid.uiGridGridMenuService
     * @description Remove an item from the grid menu based on a provided id.  Assumes
     * that the id is unique, removes only the last instance of that id.  Does nothing if
     * the specified id is not found.  If there is no gridMenuScope or registeredMenuItems
     * then do nothing silently - the desired result is those menu items not be present and they
     * aren't.
     * @param {Grid} grid the grid on which we are acting
     * @param {string} id the id we'd like to remove from the menu
     *
     */
    removeFromGridMenu: function( grid, id ) {
      var foundIndex = -1;

      if ( grid && grid.gridMenuScope ) {
        grid.gridMenuScope.registeredMenuItems.forEach( function( value, index ) {
          if ( value.id === id ) {
            if (foundIndex > -1) {
              gridUtil.logError( 'removeFromGridMenu: found multiple items with the same id, removing only the last' );
            } else {

              foundIndex = index;
            }
          }
        });
      }

      if ( foundIndex > -1 ) {
        grid.gridMenuScope.registeredMenuItems.splice( foundIndex, 1 );
      }
    },


    /**
     * @ngdoc array
     * @name gridMenuCustomItems
     * @propertyOf ui.grid.class:GridOptions
     * @description (optional) An array of menu items that should be added to
     * the gridMenu.  Follow the format documented in the tutorial for column
     * menu customisation.  The context provided to the action function will
     * include context.grid.  An alternative if working with dynamic menus is to use the
     * provided api - core.addToGridMenu and core.removeFromGridMenu, which handles
     * some of the management of items for you.
     *
     */
    /**
     * @ngdoc boolean
     * @name gridMenuShowHideColumns
     * @propertyOf ui.grid.class:GridOptions
     * @description true by default, whether the grid menu should allow hide/show
     * of columns
     *
     */
    /**
     * @ngdoc method
     * @methodOf ui.grid.uiGridGridMenuService
     * @name getMenuItems
     * @description Decides the menu items to show in the menu.  This is a
     * combination of:
     *
     * - the default menu items that are always included,
     * - any menu items that have been provided through the addMenuItem api. These
     *   are typically added by features within the grid
     * - any menu items included in grid.options.gridMenuCustomItems.  These can be
     *   changed dynamically, as they're always recalculated whenever we show the
     *   menu
     * @param {$scope} $scope the scope of this gridMenu, from which we can find all
     * the information that we need
     * @returns {Array} an array of menu items that can be shown
     */
    getMenuItems: function( $scope ) {
      var menuItems = [
        // this is where we add any menu items we want to always include
      ];

      if ( $scope.grid.options.gridMenuCustomItems ) {
        if ( !angular.isArray( $scope.grid.options.gridMenuCustomItems ) ) {
          gridUtil.logError( 'gridOptions.gridMenuCustomItems must be an array, and is not');
        } else {
          menuItems = menuItems.concat( $scope.grid.options.gridMenuCustomItems );
        }
      }

      var clearFilters = [{
        title: i18nService.getSafeText('gridMenu.clearAllFilters'),
        action: function ($event) {
          $scope.grid.clearAllFilters();
        },
        shown: function() {
          return $scope.grid.options.enableFiltering;
        },
        order: 100
      }];
      menuItems = menuItems.concat( clearFilters );

      menuItems = menuItems.concat( $scope.registeredMenuItems );

      if ( $scope.grid.options.gridMenuShowHideColumns !== false ) {
        menuItems = menuItems.concat( service.showHideColumns( $scope ) );
      }

      menuItems.sort(function(a, b) {
        return a.order - b.order;
      });

      return menuItems;
    },


    /**
     * @ngdoc array
     * @name gridMenuTitleFilter
     * @propertyOf ui.grid.class:GridOptions
     * @description (optional) A function that takes a title string
     * (usually the col.displayName), and converts it into a display value.  The function
     * must return either a string or a promise.
     *
     * Used for internationalization of the grid menu column names - for angular-translate
     * you can pass $translate as the function, for i18nService you can pass getSafeText as the
     * function
     * @example
     * <pre>
     *   gridOptions = {
     *     gridMenuTitleFilter: $translate
     *   }
     * </pre>
     */
    /**
     * @ngdoc method
     * @methodOf ui.grid.uiGridGridMenuService
     * @name showHideColumns
     * @description Adds two menu items for each of the columns in columnDefs.  One
     * menu item for hide, one menu item for show.  Each is visible when appropriate
     * (show when column is not visible, hide when column is visible).  Each toggles
     * the visible property on the columnDef using toggleColumnVisibility
     * @param {$scope} $scope of a gridMenu, which contains a reference to the grid
     */
    showHideColumns: function( $scope ) {
      var showHideColumns = [];
      if ( !$scope.grid.options.columnDefs || $scope.grid.options.columnDefs.length === 0 || $scope.grid.columns.length === 0 ) {
        return showHideColumns;
      }

      function isColumnVisible(colDef) {
        return colDef.visible === true || colDef.visible === undefined;
      }

      function getColumnIcon(colDef) {
        return isColumnVisible(colDef) ? 'ui-grid-icon-ok' : 'ui-grid-icon-cancel';
      }

      // add header for columns
      showHideColumns.push({
        title: i18nService.getSafeText('gridMenu.columns'),
        order: 300,
        templateUrl: 'ui-grid/ui-grid-menu-header-item'
      });

      $scope.grid.options.gridMenuTitleFilter = $scope.grid.options.gridMenuTitleFilter ? $scope.grid.options.gridMenuTitleFilter : function( title ) { return title; };

      $scope.grid.options.columnDefs.forEach( function( colDef, index ) {
        if ( colDef.enableHiding !== false ) {
          // add hide menu item - shows an OK icon as we only show when column is already visible
          var menuItem = {
            icon: getColumnIcon(colDef),
            action: function($event) {
              $event.stopPropagation();

              service.toggleColumnVisibility( this.context.gridCol );

              if ($event.target && $event.target.firstChild) {
                if (angular.element($event.target)[0].nodeName === 'I') {
                  $event.target.className = getColumnIcon(this.context.gridCol.colDef);
                }
                else {
                  $event.target.firstChild.className = getColumnIcon(this.context.gridCol.colDef);
                }
              }
            },
            shown: function() {
              return this.context.gridCol.colDef.enableHiding !== false;
            },
            context: { gridCol: $scope.grid.getColumn(colDef.name || colDef.field) },
            leaveOpen: true,
            order: 301 + index
          };
          service.setMenuItemTitle( menuItem, colDef, $scope.grid );
          showHideColumns.push( menuItem );
        }
      });
      return showHideColumns;
    },


    /**
     * @ngdoc method
     * @methodOf ui.grid.uiGridGridMenuService
     * @name setMenuItemTitle
     * @description Handles the response from gridMenuTitleFilter, adding it directly to the menu
     * item if it returns a string, otherwise waiting for the promise to resolve or reject then
     * putting the result into the title
     * @param {object} menuItem the menuItem we want to put the title on
     * @param {object} colDef the colDef from which we can get displayName, name or field
     * @param {Grid} grid the grid, from which we can get the options.gridMenuTitleFilter
     *
     */
    setMenuItemTitle: function( menuItem, colDef, grid ) {
      var title = grid.options.gridMenuTitleFilter( colDef.displayName || gridUtil.readableColumnName(colDef.name) || colDef.field );

      if ( typeof(title) === 'string' ) {
        menuItem.title = title;
      } else if ( title.then ) {
        // must be a promise
        menuItem.title = "";
        title.then( function( successValue ) {
          menuItem.title = successValue;
        }, function( errorValue ) {
          menuItem.title = errorValue;
        }).catch(angular.noop);
      } else {
        gridUtil.logError('Expected gridMenuTitleFilter to return a string or a promise, it has returned neither, bad config');
        menuItem.title = 'badconfig';
      }
    },

    /**
     * @ngdoc method
     * @methodOf ui.grid.uiGridGridMenuService
     * @name toggleColumnVisibility
     * @description Toggles the visibility of an individual column.  Expects to be
     * provided a context that has on it a gridColumn, which is the column that
     * we'll operate upon.  We change the visibility, and refresh the grid as appropriate
     * @param {GridColumn} gridCol the column that we want to toggle
     *
     */
    toggleColumnVisibility: function( gridCol ) {
      gridCol.colDef.visible = !( gridCol.colDef.visible === true || gridCol.colDef.visible === undefined );

      gridCol.grid.refresh();
      gridCol.grid.api.core.notifyDataChange( uiGridConstants.dataChange.COLUMN );
      gridCol.grid.api.core.raise.columnVisibilityChanged( gridCol );
    }
  };

  return service;
}])

.directive('uiGridMenuButton', ['gridUtil', 'uiGridConstants', 'uiGridGridMenuService', 'i18nService',
function (gridUtil, uiGridConstants, uiGridGridMenuService, i18nService) {

  return {
    priority: 0,
    scope: true,
    require: ['^uiGrid'],
    templateUrl: 'ui-grid/ui-grid-menu-button',
    replace: true,

    link: function ($scope, $elm, $attrs, controllers) {
      var uiGridCtrl = controllers[0];

      // For the aria label
      $scope.i18n = {
        aria: i18nService.getSafeText('gridMenu.aria')
      };

      uiGridGridMenuService.initialize($scope, uiGridCtrl.grid);

      $scope.shown = false;

      $scope.toggleMenu = function () {
        if ( $scope.shown ) {
          $scope.$broadcast('hide-menu');
          $scope.shown = false;
        } else {
          $scope.menuItems = uiGridGridMenuService.getMenuItems( $scope );
          $scope.$broadcast('show-menu');
          $scope.shown = true;
        }
      };

      $scope.$on('menu-hidden', function() {
        $scope.shown = false;
        gridUtil.focus.bySelector($elm, '.ui-grid-icon-container');
      });
    }
  };
}]);
})();

(function() {

/**
 * @ngdoc directive
 * @name ui.grid.directive:uiGridMenu
 * @element style
 * @restrict A
 *
 * @description
 * Allows us to interpolate expressions in `<style>` elements. Angular doesn't do this by default as it can/will/might? break in IE8.
 *
 * @example
 <doc:example module="app">
 <doc:source>
 <script>
 var app = angular.module('app', ['ui.grid']);

 app.controller('MainCtrl', ['$scope', function ($scope) {

 }]);
 </script>

 <div ng-controller="MainCtrl">
   <div ui-grid-menu shown="true"  ></div>
 </div>
 </doc:source>
 <doc:scenario>
 </doc:scenario>
 </doc:example>
 */
angular.module('ui.grid')

.directive('uiGridMenu', ['$compile', '$timeout', '$window', '$document', 'gridUtil', 'uiGridConstants', 'i18nService',
function ($compile, $timeout, $window, $document, gridUtil, uiGridConstants, i18nService) {
  return {
    priority: 0,
    scope: {
      // shown: '&',
      menuItems: '=',
      autoHide: '=?',
      col: '=?'
    },
    require: '?^uiGrid',
    templateUrl: 'ui-grid/uiGridMenu',
    replace: false,
    link: function ($scope, $elm, $attrs, uiGridCtrl) {
      $scope.dynamicStyles = '';
      if (uiGridCtrl && uiGridCtrl.grid && uiGridCtrl.grid.options && uiGridCtrl.grid.options.gridMenuTemplate) {
        var gridMenuTemplate = uiGridCtrl.grid.options.gridMenuTemplate;
        gridUtil.getTemplate(gridMenuTemplate).then(function (contents) {
          var template = angular.element(contents);
          var newElm = $compile(template)($scope);
          $elm.replaceWith(newElm);
        }).catch(angular.noop);
      }

      var setupHeightStyle = function(gridHeight) {
        // menu appears under header row, so substract that height from it's total
        // additional 20px for general padding
        var gridMenuMaxHeight = gridHeight - uiGridCtrl.grid.headerHeight - 20;
        $scope.dynamicStyles = [
          '.grid' + uiGridCtrl.grid.id + ' .ui-grid-menu-mid {',
          'max-height: ' + gridMenuMaxHeight + 'px;',
          '}'
        ].join(' ');
      };

      if (uiGridCtrl) {
        setupHeightStyle(uiGridCtrl.grid.gridHeight);
        uiGridCtrl.grid.api.core.on.gridDimensionChanged($scope, function(oldGridHeight, oldGridWidth, newGridHeight, newGridWidth) {
          setupHeightStyle(newGridHeight);
        });
      }

      $scope.i18n = {
        close: i18nService.getSafeText('columnMenu.close')
      };

    // *** Show/Hide functions ******
      $scope.showMenu = function(event, args) {
        if ( !$scope.shown ) {

          /*
           * In order to animate cleanly we remove the ng-if, wait a digest cycle, then
           * animate the removal of the ng-hide.  We can't successfully (so far as I can tell)
           * animate removal of the ng-if, as the menu items aren't there yet.  And we don't want
           * to rely on ng-show only, as that leaves elements in the DOM that are needlessly evaluated
           * on scroll events.
           *
           * Note when testing animation that animations don't run on the tutorials.  When debugging it looks
           * like they do, but angular has a default $animate provider that is just a stub, and that's what's
           * being called.  ALso don't be fooled by the fact that your browser has actually loaded the
           * angular-translate.js, it's not using it.  You need to test animations in an external application.
           */
          $scope.shown = true;

          // Must be a timeout in order to work properly in Firefox. Issue #6533
          $timeout(function() {
            $scope.shownMid = true;
            $scope.$emit('menu-shown');
          });
        } else if ( !$scope.shownMid ) {
          // we're probably doing a hide then show, so we don't need to wait for ng-if
          $scope.shownMid = true;
          $scope.$emit('menu-shown');
        }

        var docEventType = 'click';
        if (args && args.originalEvent && args.originalEvent.type && args.originalEvent.type === 'touchstart') {
          docEventType = args.originalEvent.type;
        }

        // Turn off an existing document click handler
        angular.element(document).off('click touchstart', applyHideMenu);
        $elm.off('keyup', checkKeyUp);
        $elm.off('keydown', checkKeyDown);

        // Turn on the document click handler, but in a timeout so it doesn't apply to THIS click if there is one
        $timeout(function() {
          angular.element(document).on(docEventType, applyHideMenu);
          $elm.on('keyup', checkKeyUp);
          $elm.on('keydown', checkKeyDown);
        });
      };


      $scope.hideMenu = function(event) {
        if ( $scope.shown ) {
          /*
           * In order to animate cleanly we animate the addition of ng-hide, then use a $timeout to
           * set the ng-if (shown = false) after the animation runs.  In theory we can cascade off the
           * callback on the addClass method, but it is very unreliable with unit tests for no discernable reason.
           *
           * The user may have clicked on the menu again whilst
           * we're waiting, so we check that the mid isn't shown before applying the ng-if.
           */
          $scope.shownMid = false;
          $timeout( function() {
            if ( !$scope.shownMid ) {
              $scope.shown = false;
              $scope.$emit('menu-hidden');
            }
          }, 40);
        }

        angular.element(document).off('click touchstart', applyHideMenu);
        $elm.off('keyup', checkKeyUp);
        $elm.off('keydown', checkKeyDown);
      };

      $scope.$on('hide-menu', function (event, args) {
        $scope.hideMenu(event, args);
      });

      $scope.$on('show-menu', function (event, args) {
        $scope.showMenu(event, args);
      });


    // *** Auto hide when click elsewhere ******
      var applyHideMenu = function(event) {
        if ($scope.shown) {
          if ($scope.col && $scope.col.filterContainer === 'columnMenu') {
            var elm = document.querySelector('.ui-grid-column-menu').querySelector('[ui-grid-filter]');
            if (elm && elm.contains(event.target)) {
              return false;
            }
          }

          $scope.$apply(function () {
            $scope.hideMenu();
          });
        }
      };

      // close menu on ESC and keep tab cyclical
      var checkKeyUp = function(event) {
        if (event.keyCode === 27) {
          $scope.hideMenu();
        }
      };

      var checkKeyDown = function(event) {
        var setFocus = function(elm) {
          elm.focus();
          event.preventDefault();
          return false;
        };
        if (event.keyCode === 9) {
          var firstMenuItem, lastMenuItem;
          var menuItemButtons = $elm[0].querySelectorAll('button:not(.ng-hide)');
          if (menuItemButtons.length > 0) {
            firstMenuItem = menuItemButtons[0];
            lastMenuItem = menuItemButtons[menuItemButtons.length - 1];
            if (event.target === lastMenuItem && !event.shiftKey) {
              setFocus(firstMenuItem);
            } else if (event.target === firstMenuItem && event.shiftKey) {
              setFocus(lastMenuItem);
            }
          }
        }
      };

      if (typeof($scope.autoHide) === 'undefined' || $scope.autoHide === undefined) {
        $scope.autoHide = true;
      }

      if ($scope.autoHide) {
        angular.element($window).on('resize', applyHideMenu);
      }

      $scope.$on('$destroy', function unbindEvents() {
        angular.element($window).off('resize', applyHideMenu);
        angular.element(document).off('click touchstart', applyHideMenu);
        $elm.off('keyup', checkKeyUp);
        $elm.off('keydown', checkKeyDown);
      });

      if (uiGridCtrl) {
       $scope.$on('$destroy', uiGridCtrl.grid.api.core.on.scrollBegin($scope, applyHideMenu ));
      }

      $scope.$on('$destroy', $scope.$on(uiGridConstants.events.ITEM_DRAGGING, applyHideMenu ));
    }
  };
}])

.directive('uiGridMenuItem', ['gridUtil', '$compile', 'i18nService', function (gridUtil, $compile, i18nService) {
  return {
    priority: 0,
    scope: {
      name: '=',
      active: '=',
      action: '=',
      icon: '=',
      shown: '=',
      context: '=',
      templateUrl: '=',
      leaveOpen: '=',
      screenReaderOnly: '='
    },
    require: ['?^uiGrid'],
    templateUrl: 'ui-grid/uiGridMenuItem',
    replace: false,
    compile: function() {
      return {
        pre: function ($scope, $elm) {
          if ($scope.templateUrl) {
            gridUtil.getTemplate($scope.templateUrl)
                .then(function (contents) {
                  var template = angular.element(contents);

                  var newElm = $compile(template)($scope);
                  $elm.replaceWith(newElm);
                }).catch(angular.noop);
          }
        },
        post: function ($scope, $elm, $attrs, controllers) {
          var uiGridCtrl = controllers[0];

          // TODO(c0bra): validate that shown and active are functions if they're defined. An exception is already thrown above this though
          // if (typeof($scope.shown) !== 'undefined' && $scope.shown && typeof($scope.shown) !== 'function') {
          //   throw new TypeError("$scope.shown is defined but not a function");
          // }
          if (typeof($scope.shown) === 'undefined' || $scope.shown === null) {
            $scope.shown = function() { return true; };
          }

          $scope.itemShown = function () {
            var context = {};
            if ($scope.context) {
              context.context = $scope.context;
            }

            if (typeof(uiGridCtrl) !== 'undefined' && uiGridCtrl) {
              context.grid = uiGridCtrl.grid;
            }

            return $scope.shown.call(context);
          };

          $scope.itemAction = function($event, title) {
            $event.stopPropagation();

            if (typeof($scope.action) === 'function') {
              var context = {};

              if ($scope.context) {
                context.context = $scope.context;
              }

              // Add the grid to the function call context if the uiGrid controller is present
              if (typeof(uiGridCtrl) !== 'undefined' && uiGridCtrl) {
                context.grid = uiGridCtrl.grid;
              }

              $scope.action.call(context, $event, title);

              if ( !$scope.leaveOpen ) {
                $scope.$emit('hide-menu');
              } else {
                // Maintain focus on the selected item
                var correctParent = $event.target.parentElement;

                // nodeName of 'I' means target is i element, need the next parent
                if (angular.element($event.target)[0].nodeName === 'I') {
                  correctParent = correctParent.parentElement;
                }

                gridUtil.focus.bySelector(correctParent, 'button[type=button]', true);
              }
            }
          };

          $scope.label = function() {
            var toBeDisplayed = $scope.name;

            if (typeof($scope.name) === 'function') {
              toBeDisplayed = $scope.name.call();
            }

            return toBeDisplayed;
          };

          $scope.i18n = i18nService.get();
        }
      };
    }
  };
}]);

})();

(function() {
  'use strict';
  /**
   * @ngdoc overview
   * @name ui.grid.directive:uiGridOneBind
   * @summary A group of directives that provide a one time bind to a dom element.
   * @description A group of directives that provide a one time bind to a dom element.
   * As one time bindings are not supported in Angular 1.2.* this directive provdes this capability.
   * This is done to reduce the number of watchers on the dom.
   * <br/>
   * <h2>Short Example ({@link ui.grid.directive:uiGridOneBindSrc ui-grid-one-bind-src})</h2>
   * <pre>
        <div ng-init="imageName = 'myImageDir.jpg'">
          <img ui-grid-one-bind-src="imageName"></img>
        </div>
     </pre>
   * Will become:
   * <pre>
       <div ng-init="imageName = 'myImageDir.jpg'">
         <img ui-grid-one-bind-src="imageName" src="myImageDir.jpg"></img>
       </div>
     </pre>
     </br>
     <h2>Short Example ({@link ui.grid.directive:uiGridOneBindText ui-grid-one-bind-text})</h2>
   * <pre>
        <div ng-init="text='Add this text'" ui-grid-one-bind-text="text"></div>
     </pre>
   * Will become:
   * <pre>
   <div ng-init="text='Add this text'" ui-grid-one-bind-text="text">Add this text</div>
     </pre>
     </br>
   * <b>Note:</b> This behavior is slightly different for the {@link ui.grid.directive:uiGridOneBindIdGrid uiGridOneBindIdGrid}
   * and {@link ui.grid.directive:uiGridOneBindAriaLabelledbyGrid uiGridOneBindAriaLabelledbyGrid} directives.
   *
   */
  // https://github.com/joshkurz/Black-Belt-AngularJS-Directives/blob/master/directives/Optimization/oneBind.js
  var oneBinders = angular.module('ui.grid');
  angular.forEach([
      /**
       * @ngdoc directive
       * @name ui.grid.directive:uiGridOneBindSrc
       * @memberof ui.grid.directive:uiGridOneBind
       * @element img
       * @restrict A
       * @param {String} uiGridOneBindSrc The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
       * @description One time binding for the src dom tag.
       *
       */
      {tag: 'Src', method: 'attr'},
      /**
       * @ngdoc directive
       * @name ui.grid.directive:uiGridOneBindText
       * @element div
       * @restrict A
       * @param {String} uiGridOneBindText The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
       * @description One time binding for the text dom tag.
       */
      {tag: 'Text', method: 'text'},
      /**
       * @ngdoc directive
       * @name ui.grid.directive:uiGridOneBindHref
       * @element div
       * @restrict A
       * @param {String} uiGridOneBindHref The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
       * @description One time binding for the href dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
       */
      {tag: 'Href', method: 'attr'},
      /**
       * @ngdoc directive
       * @name ui.grid.directive:uiGridOneBindClass
       * @element div
       * @restrict A
       * @param {String} uiGridOneBindClass The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
       * @param {Object} uiGridOneBindClass The object that you want to bind. At least one of the values in the object must be something other than null or undefined for the watcher to be removed.
       *                                    this is to prevent the watcher from being removed before the scope is initialized.
       * @param {Array} uiGridOneBindClass An array of classes to bind to this element.
       * @description One time binding for the class dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
       */
      {tag: 'Class', method: 'addClass'},
      /**
       * @ngdoc directive
       * @name ui.grid.directive:uiGridOneBindHtml
       * @element div
       * @restrict A
       * @param {String} uiGridOneBindHtml The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
       * @description One time binding for the html method on a dom element. For more information see {@link ui.grid.directive:uiGridOneBind}.
       */
      {tag: 'Html', method: 'html'},
      /**
       * @ngdoc directive
       * @name ui.grid.directive:uiGridOneBindAlt
       * @element div
       * @restrict A
       * @param {String} uiGridOneBindAlt The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
       * @description One time binding for the alt dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
       */
      {tag: 'Alt', method: 'attr'},
      /**
       * @ngdoc directive
       * @name ui.grid.directive:uiGridOneBindStyle
       * @element div
       * @restrict A
       * @param {String} uiGridOneBindStyle The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
       * @description One time binding for the style dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
       */
      {tag: 'Style', method: 'css'},
      /**
       * @ngdoc directive
       * @name ui.grid.directive:uiGridOneBindValue
       * @element div
       * @restrict A
       * @param {String} uiGridOneBindValue The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
       * @description One time binding for the value dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
       */
      {tag: 'Value', method: 'attr'},
      /**
       * @ngdoc directive
       * @name ui.grid.directive:uiGridOneBindId
       * @element div
       * @restrict A
       * @param {String} uiGridOneBindId The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
       * @description One time binding for the value dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
       */
      {tag: 'Id', method: 'attr'},
      /**
       * @ngdoc directive
       * @name ui.grid.directive:uiGridOneBindIdGrid
       * @element div
       * @restrict A
       * @param {String} uiGridOneBindIdGrid The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
       * @description One time binding for the id dom tag.
       * <h1>Important Note!</h1>
       * If the id tag passed as a parameter does <b>not</b> contain the grid id as a substring
       * then the directive will search the scope and the parent controller (if it is a uiGridController) for the grid.id value.
       * If this value is found then it is appended to the begining of the id tag. If the grid is not found then the directive throws an error.
       * This is done in order to ensure uniqueness of id tags across the grid.
       * This is to prevent two grids in the same document having duplicate id tags.
       */
      {tag: 'Id', directiveName: 'IdGrid', method: 'attr', appendGridId: true},
      /**
       * @ngdoc directive
       * @name ui.grid.directive:uiGridOneBindTitle
       * @element div
       * @restrict A
       * @param {String} uiGridOneBindTitle The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
       * @description One time binding for the title dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
       */
      {tag: 'Title', method: 'attr'},
      /**
       * @ngdoc directive
       * @name ui.grid.directive:uiGridOneBindAriaLabel
       * @element div
       * @restrict A
       * @param {String} uiGridOneBindAriaLabel The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
       * @description One time binding for the aria-label dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
       *<br/>
       * <pre>
            <div ng-init="text='Add this text'" ui-grid-one-bind-aria-label="text"></div>
         </pre>
       * Will become:
       * <pre>
            <div ng-init="text='Add this text'" ui-grid-one-bind-aria-label="text" aria-label="Add this text"></div>
         </pre>
       */
      {tag: 'Label', method: 'attr', aria: true},
      /**
       * @ngdoc directive
       * @name ui.grid.directive:uiGridOneBindAriaLabelledby
       * @element div
       * @restrict A
       * @param {String} uiGridOneBindAriaLabelledby The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
       * @description One time binding for the aria-labelledby dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
       *<br/>
       * <pre>
            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-labelledby="anId"></div>
         </pre>
       * Will become:
       * <pre>
            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-labelledby="anId" aria-labelledby="gridID32"></div>
         </pre>
       */
      {tag: 'Labelledby', method: 'attr', aria: true},
      /**
       * @ngdoc directive
       * @name ui.grid.directive:uiGridOneBindAriaLabelledbyGrid
       * @element div
       * @restrict A
       * @param {String} uiGridOneBindAriaLabelledbyGrid The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
       * @description One time binding for the aria-labelledby dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
       * Works somewhat like {@link ui.grid.directive:uiGridOneBindIdGrid} however this one supports a list of ids (seperated by a space) and will dynamically add the
       * grid id to each one.
       *<br/>
       * <pre>
            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-labelledby-grid="anId"></div>
         </pre>
       * Will become ([grid.id] will be replaced by the actual grid id):
       * <pre>
            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-labelledby-grid="anId" aria-labelledby-Grid="[grid.id]-gridID32"></div>
         </pre>
       */
      {tag: 'Labelledby', directiveName: 'LabelledbyGrid', appendGridId: true, method: 'attr', aria: true},
      /**
       * @ngdoc directive
       * @name ui.grid.directive:uiGridOneBindAriaDescribedby
       * @element ANY
       * @restrict A
       * @param {String} uiGridOneBindAriaDescribedby The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
       * @description One time binding for the aria-describedby dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
       *<br/>
       * <pre>
            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-describedby="anId"></div>
         </pre>
       * Will become:
       * <pre>
            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-describedby="anId" aria-describedby="gridID32"></div>
         </pre>
       */
      {tag: 'Describedby', method: 'attr', aria: true},
      /**
       * @ngdoc directive
       * @name ui.grid.directive:uiGridOneBindAriaDescribedbyGrid
       * @element ANY
       * @restrict A
       * @param {String} uiGridOneBindAriaDescribedbyGrid The angular string you want to bind. Does not support interpolation. Don't use <code>{{scopeElt}}</code> instead use <code>scopeElt</code>.
       * @description One time binding for the aria-labelledby dom tag. For more information see {@link ui.grid.directive:uiGridOneBind}.
       * Works somewhat like {@link ui.grid.directive:uiGridOneBindIdGrid} however this one supports a list of ids (seperated by a space) and will dynamically add the
       * grid id to each one.
       *<br/>
       * <pre>
            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-describedby-grid="anId"></div>
         </pre>
       * Will become ([grid.id] will be replaced by the actual grid id):
       * <pre>
            <div ng-init="anId = 'gridID32'" ui-grid-one-bind-aria-describedby-grid="anId" aria-describedby="[grid.id]-gridID32"></div>
         </pre>
       */
      {tag: 'Describedby', directiveName: 'DescribedbyGrid', appendGridId: true, method: 'attr', aria: true}],
    function(v) {

      var baseDirectiveName = 'uiGridOneBind';
      // If it is an aria tag then append the aria label seperately
      // This is done because the aria tags are formatted aria-* and the directive name can't have a '-' character in it.
      // If the diretiveName has to be overridden then it does so here. This is because the tag being modified and the directive sometimes don't
      // match up.
      var directiveName = (v.aria ? baseDirectiveName + 'Aria' : baseDirectiveName) + (v.directiveName ? v.directiveName : v.tag);
      oneBinders.directive(directiveName, ['gridUtil', function(gridUtil) {
        return {
          restrict: 'A',
          require: ['?uiGrid','?^uiGrid'],
          link: function(scope, iElement, iAttrs, controllers) {
            /* Appends the grid id to the beginning of the value. */
            var appendGridId = function(val) {
              var grid; // Get an instance of the grid if its available

              // If its available in the scope then we don't need to try to find it elsewhere
              if (scope.grid) {
                grid = scope.grid;
              }

              // Another possible location to try to find the grid
              else if (scope.col && scope.col.grid) {
                grid = scope.col.grid;
              }

              // Last ditch effort: Search through the provided controllers.
              else if (!controllers.some( // Go through the controllers till one has the element we need
                function(controller) {
                  if (controller && controller.grid) {
                    grid = controller.grid;
                    return true; // We've found the grid
                  }
              })) {
                // We tried our best to find it for you
                gridUtil.logError("["+directiveName+"] A valid grid could not be found to bind id. Are you using this directive " +
                                 "within the correct scope? Trying to generate id: [gridID]-" + val);
                throw new Error("No valid grid could be found");
              }

              if (grid) {
                var idRegex = new RegExp(grid.id.toString());

                // If the grid id hasn't been appended already in the template declaration
                if (!idRegex.test(val)) {
                  val = grid.id.toString() + '-' + val;
                }
              }
              return val;
            };

            // The watch returns a function to remove itself.
            var rmWatcher = scope.$watch(iAttrs[directiveName], function(newV) {
              if (newV) {
                // If we are trying to add an id element then we also apply the grid id if it isn't already there
                if (v.appendGridId) {
                  var newIdString = null;

                  // Append the id to all of the new ids.
                  angular.forEach( newV.split(' '), function(s) {
                    newIdString = (newIdString ? (newIdString + ' ') : '') +  appendGridId(s);
                  });
                  newV = newIdString;
                }

                // Append this newValue to the dom element.
                switch (v.method) {
                  case 'attr': // The attr method takes two paraams the tag and the value
                    if (v.aria) {
                      // If it is an aria element then append the aria prefix
                      iElement[v.method]('aria-' + v.tag.toLowerCase(),newV);
                    } else {
                      iElement[v.method](v.tag.toLowerCase(),newV);
                    }
                    break;
                  case 'addClass':
                    // Pulled from https://github.com/Pasvaz/bindonce/blob/master/bindonce.js
                    if (angular.isObject(newV) && !angular.isArray(newV)) {
                      var results = [],
                        nonNullFound = false; // We don't want to remove the binding unless the key is actually defined

                      angular.forEach(newV, function (value, index) {
                        if (value !== null && typeof(value) !== "undefined") {
                          nonNullFound = true; // A non null value for a key was found so the object must have been initialized
                          if (value) {results.push(index);}
                        }
                      });
                      // A non null value for a key wasn't found so assume that the scope values haven't been fully initialized
                      if (!nonNullFound) {
                        return; // If not initialized then the watcher should not be removed yet.
                      }
                      newV = results;
                    }

                    if (newV) {
                      iElement.addClass(angular.isArray(newV) ? newV.join(' ') : newV);
                    } else {
                      return;
                    }
                    break;
                  default:
                    iElement[v.method](newV);
                    break;
                }

                // Removes the watcher on itself after the bind
                rmWatcher();
              }
            // True ensures that equality is determined using angular.equals instead of ===
            }, true); // End rm watchers
          } // End compile function
        }; // End directive return
      } // End directive function
    ]); // End directive
  }); // End angular foreach
})();

(function() {
	'use strict';

	var module = angular.module('ui.grid');

	module.directive('uiGridRenderContainer', ['$timeout', '$document', 'uiGridConstants', 'gridUtil', 'ScrollEvent',
		function($timeout, $document, uiGridConstants, gridUtil, ScrollEvent) {
			return {
				replace: true,
				transclude: true,
				templateUrl: 'ui-grid/uiGridRenderContainer',
				require: ['^uiGrid', 'uiGridRenderContainer'],
				scope: {
					containerId: '=',
					rowContainerName: '=',
					colContainerName: '=',
					bindScrollHorizontal: '=',
					bindScrollVertical: '=',
					enableVerticalScrollbar: '=',
					enableHorizontalScrollbar: '='
				},
				controller: 'uiGridRenderContainer as RenderContainer',
				compile: function() {
					return {
						pre: function prelink($scope, $elm, $attrs, controllers) {
							var rowContainer, colContainer,
								uiGridCtrl = controllers[0],
								containerCtrl = controllers[1],
								grid = $scope.grid = uiGridCtrl.grid;

							// Verify that the render container for this element exists
							if (!$scope.rowContainerName) {
								throw new Error('No row render container name specified');
							}
							if (!$scope.colContainerName) {
								throw new Error('No column render container name specified');
							}

							if (!grid.renderContainers[$scope.rowContainerName]) {
								throw new Error('Row render container "' + $scope.rowContainerName + '" is not registered.');
							}
							if (!grid.renderContainers[$scope.colContainerName]) {
								throw new Error('Column render container "' + $scope.colContainerName + '" is not registered.');
							}

							rowContainer = $scope.rowContainer = grid.renderContainers[$scope.rowContainerName];
							colContainer = $scope.colContainer = grid.renderContainers[$scope.colContainerName];

							containerCtrl.containerId = $scope.containerId;
							containerCtrl.rowContainer = rowContainer;
							containerCtrl.colContainer = colContainer;
						},
						post: function postlink($scope, $elm, $attrs, controllers) {
							var uiGridCtrl = controllers[0],
								containerCtrl = controllers[1],
								grid = uiGridCtrl.grid,
								rowContainer = containerCtrl.rowContainer,
								colContainer = containerCtrl.colContainer,
								scrollTop = null,
								scrollLeft = null,
								renderContainer = grid.renderContainers[$scope.containerId];

							// Put the container name on this element as a class
							$elm.addClass('ui-grid-render-container-' + $scope.containerId);

							// Scroll the render container viewport when the mousewheel is used
							gridUtil.on.mousewheel($elm, function(event) {
								var scrollEvent = new ScrollEvent(grid, rowContainer, colContainer, ScrollEvent.Sources.RenderContainerMouseWheel);

								if (event.deltaY !== 0) {
									var scrollYAmount = event.deltaY * -1 * event.deltaFactor;

									scrollTop = containerCtrl.viewport[0].scrollTop;

									// Get the scroll percentage
									scrollEvent.verticalScrollLength = rowContainer.getVerticalScrollLength();
									var scrollYPercentage = (scrollTop + scrollYAmount) / scrollEvent.verticalScrollLength;

									// If we should be scrolled 100%, make sure the scrollTop matches the maximum scroll length
									//   Viewports that have "overflow: hidden" don't let the mousewheel scroll all the way to the bottom without this check
									if (scrollYPercentage >= 1 && scrollTop < scrollEvent.verticalScrollLength) {
										containerCtrl.viewport[0].scrollTop = scrollEvent.verticalScrollLength;
									}

									// Keep scrollPercentage within the range 0-1.
									if (scrollYPercentage < 0) { scrollYPercentage = 0; }
									else if (scrollYPercentage > 1) { scrollYPercentage = 1; }

									scrollEvent.y = {percentage: scrollYPercentage, pixels: scrollYAmount};
								}
								if (event.deltaX !== 0) {
									var scrollXAmount = event.deltaX * event.deltaFactor;

									// Get the scroll percentage
									scrollLeft = gridUtil.normalizeScrollLeft(containerCtrl.viewport, grid);
									scrollEvent.horizontalScrollLength = (colContainer.getCanvasWidth() - colContainer.getViewportWidth());
									var scrollXPercentage = (scrollLeft + scrollXAmount) / scrollEvent.horizontalScrollLength;

									// Keep scrollPercentage within the range 0-1.
									if (scrollXPercentage < 0) { scrollXPercentage = 0; }
									else if (scrollXPercentage > 1) { scrollXPercentage = 1; }

									scrollEvent.x = {percentage: scrollXPercentage, pixels: scrollXAmount};
								}

								// Let the parent container scroll if the grid is already at the top/bottom
								if (!((event.deltaY !== 0 && (scrollEvent.atTop(scrollTop) || scrollEvent.atBottom(scrollTop))) ||
									(event.deltaX !== 0 && (scrollEvent.atLeft(scrollLeft) || scrollEvent.atRight(scrollLeft))))) {
									event.preventDefault();
									event.stopPropagation();
									scrollEvent.fireThrottledScrollingEvent('', scrollEvent);
								}
							});

							$elm.bind('$destroy', function() {
								$elm.unbind('keydown');

								['touchstart', 'touchmove', 'touchend', 'keydown', 'wheel', 'mousewheel',
									'DomMouseScroll', 'MozMousePixelScroll'].forEach(function(eventName) {
									$elm.unbind(eventName);
								});
							});

							// TODO(c0bra): Handle resizing the inner canvas based on the number of elements
							function update() {
								var ret = '';

								var canvasWidth = colContainer.canvasWidth;
								var viewportWidth = colContainer.getViewportWidth();

								var canvasHeight = rowContainer.getCanvasHeight();

								var viewportHeight = rowContainer.getViewportHeight();
								// shorten the height to make room for a scrollbar placeholder
								if (colContainer.needsHScrollbarPlaceholder()) {
									viewportHeight -= grid.scrollbarHeight;
								}

								var headerViewportWidth,
									footerViewportWidth;
								headerViewportWidth = footerViewportWidth = colContainer.getHeaderViewportWidth();

								// Set canvas dimensions
								ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId
									+ ' .ui-grid-canvas { width: ' + canvasWidth + 'px; height: ' + canvasHeight + 'px; }';

								ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId
									+ ' .ui-grid-header-canvas { width: ' + (canvasWidth + grid.scrollbarWidth) + 'px; }';

								if (renderContainer.explicitHeaderCanvasHeight) {
									// get height from body container
									var reHCHeight = document.querySelector(
										'.grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-body .ui-grid-header-canvas');

									if (reHCHeight) {
										renderContainer.explicitHeaderCanvasHeight = reHCHeight.offsetHeight;
									}

									ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId
										+ ' .ui-grid-header-canvas { height: ' + renderContainer.explicitHeaderCanvasHeight + 'px; }';
								}
								else {
									ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId
										+ ' .ui-grid-header-canvas { height: inherit; }';
								}

								ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId
									+ ' .ui-grid-viewport { width: ' + viewportWidth + 'px; height: ' + viewportHeight + 'px; }';
								ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId
									+ ' .ui-grid-header-viewport { width: ' + headerViewportWidth + 'px; }';

								ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId
									+ ' .ui-grid-footer-canvas { width: ' + (canvasWidth + grid.scrollbarWidth) + 'px; }';
								ret += '\n .grid' + uiGridCtrl.grid.id + ' .ui-grid-render-container-' + $scope.containerId
									+ ' .ui-grid-footer-viewport { width: ' + footerViewportWidth + 'px; }';

								return ret;
							}

							uiGridCtrl.grid.registerStyleComputation({
								priority: 6,
								func: update
							});
						}
					};
				}
			};
		}]);

	module.controller('uiGridRenderContainer', ['$scope', 'gridUtil', function($scope, gridUtil) {
	}]);
})();

(function() {
  'use strict';

  angular.module('ui.grid').directive('uiGridRow', function() {
    return {
      replace: true,
      require: ['^uiGrid', '^uiGridRenderContainer'],
      scope: {
         row: '=uiGridRow',
         // rowRenderIndex is added to scope to give the true visual index of the row to any directives that need it
         rowRenderIndex: '='
      },
      compile: function() {
        return {
          pre: function($scope, $elm, $attrs, controllers) {
            var uiGridCtrl = controllers[0];
            var containerCtrl = controllers[1];

            $scope.grid = uiGridCtrl.grid;
            $scope.colContainer = containerCtrl.colContainer;

            // Function for attaching the template to this scope
            var clonedElement, cloneScope;
            function compileTemplate() {
              $scope.row.getRowTemplateFn.then(function (compiledElementFn) {
                // var compiledElementFn = $scope.row.compiledElementFn;

                // Create a new scope for the contents of this row, so we can destroy it later if need be
                var newScope = $scope.$new();

                compiledElementFn(newScope, function (newElm, scope) {
                  // If we already have a cloned element, we need to remove it and destroy its scope
                  if (clonedElement) {
                    clonedElement.remove();
                    cloneScope.$destroy();
                  }

                  // Empty the row and append the new element
                  $elm.empty().append(newElm);

                  // Save the new cloned element and scope
                  clonedElement = newElm;
                  cloneScope = newScope;
                });
              }).catch(angular.noop);
            }

            // Initially attach the compiled template to this scope
            compileTemplate();

            // If the row's compiled element function changes, we need to replace this element's contents with the new compiled template
            $scope.$watch('row.getRowTemplateFn', function (newFunc, oldFunc) {
              if (newFunc !== oldFunc) {
                compileTemplate();
              }
            });
          },
          post: function($scope, $elm) {
            $scope.row.element = $elm;
          }
        };
      }
    };
  });
})();

(function() {
// 'use strict';

  /**
   * @ngdoc directive
   * @name ui.grid.directive:uiGridStyle
   * @element style
   * @restrict A
   *
   * @description
   * Allows us to interpolate expressions in `<style>` elements. Angular doesn't do this by default as it can/will/might? break in IE8.
   *
   * @example
   <doc:example module="app">
   <doc:source>
   <script>
   var app = angular.module('app', ['ui.grid']);

   app.controller('MainCtrl', ['$scope', function ($scope) {
          $scope.myStyle = '.blah { border: 1px solid }';
        }]);
   </script>

   <div ng-controller="MainCtrl">
   <style ui-grid-style>{{ myStyle }}</style>
   <span class="blah">I am in a box.</span>
   </div>
   </doc:source>
   <doc:scenario>
      xit('should apply the right class to the element', function () {
        element(by.css('.blah')).getCssValue('border-top-width')
          .then(function(c) {
            expect(c).toContain('1px');
          });
      });
   </doc:scenario>
   </doc:example>
   */


  angular.module('ui.grid').directive('uiGridStyle', ['gridUtil', '$interpolate', function(gridUtil, $interpolate) {
    return {
      link: function($scope, $elm) {
        var interpolateFn = $interpolate($elm.text(), true);

        if (interpolateFn) {
          $scope.$watch(interpolateFn, function(value) {
            $elm.text(value);
          });
        }
      }
    };
  }]);
})();

(function() {
  'use strict';

  angular.module('ui.grid').directive('uiGridViewport', ['gridUtil', 'ScrollEvent',
    function(gridUtil, ScrollEvent) {
      return {
        replace: true,
        scope: {},
        controllerAs: 'Viewport',
        templateUrl: 'ui-grid/uiGridViewport',
        require: ['^uiGrid', '^uiGridRenderContainer'],
        link: function($scope, $elm, $attrs, controllers) {
          // gridUtil.logDebug('viewport post-link');

          var uiGridCtrl = controllers[0];
          var containerCtrl = controllers[1];

          $scope.containerCtrl = containerCtrl;

          var rowContainer = containerCtrl.rowContainer;
          var colContainer = containerCtrl.colContainer;

          var grid = uiGridCtrl.grid;

          $scope.grid = uiGridCtrl.grid;

          // Put the containers in scope so we can get rows and columns from them
          $scope.rowContainer = containerCtrl.rowContainer;
          $scope.colContainer = containerCtrl.colContainer;

          // Register this viewport with its container
          containerCtrl.viewport = $elm;

          /**
           * @ngdoc function
           * @name customScroller
           * @methodOf ui.grid.class:GridOptions
           * @description (optional) uiGridViewport.on('scroll', scrollHandler) by default.
           * A function that allows you to provide your own scroller function. It is particularly helpful if you want to use third party scrollers
           * as this allows you to do that.
           *
           * <div class="alert alert-info" role="alert"> <strong>NOTE:</strong> It is important to remember to always pass in an event object to
           * the scrollHandler as the grid scrolling behavior will break without it.</div>
           * <h5>Example</h5>
           * <pre>
           *   $scope.gridOptions = {
           *       customScroller: function myScrolling(uiGridViewport, scrollHandler) {
           *           uiGridViewport.on('scroll', function myScrollingOverride(event) {
           *               // Do something here
           *
           *               scrollHandler(event);
           *           });
           *       }
           *   };
           * </pre>
           * @param {object} uiGridViewport Element being scrolled. (this gets passed in by the grid).
           * @param {function} scrollHandler Function that needs to be called when scrolling happens. (this gets passed in by the grid).
           */
          if (grid && grid.options && grid.options.customScroller) {
            grid.options.customScroller($elm, scrollHandler);
          } else {
            $elm.on('scroll', scrollHandler);
          }

          var ignoreScroll = false;

          function scrollHandler() {
            var newScrollTop = $elm[0].scrollTop;
            var newScrollLeft = gridUtil.normalizeScrollLeft($elm, grid);

            var vertScrollPercentage = rowContainer.scrollVertical(newScrollTop);
            var horizScrollPercentage = colContainer.scrollHorizontal(newScrollLeft);

            var scrollEvent = new ScrollEvent(grid, rowContainer, colContainer, ScrollEvent.Sources.ViewPortScroll);
            scrollEvent.newScrollLeft = newScrollLeft;
            scrollEvent.newScrollTop = newScrollTop;
            if ( horizScrollPercentage > -1 ) {
              scrollEvent.x = { percentage: horizScrollPercentage };
            }

            if ( vertScrollPercentage > -1 ) {
              scrollEvent.y = { percentage: vertScrollPercentage };
            }

            grid.scrollContainers($scope.$parent.containerId, scrollEvent);
          }

          if ($scope.$parent.bindScrollVertical) {
            grid.addVerticalScrollSync($scope.$parent.containerId, syncVerticalScroll);
          }

          if ($scope.$parent.bindScrollHorizontal) {
            grid.addHorizontalScrollSync($scope.$parent.containerId, syncHorizontalScroll);
            grid.addHorizontalScrollSync($scope.$parent.containerId + 'header', syncHorizontalHeader);
            grid.addHorizontalScrollSync($scope.$parent.containerId + 'footer', syncHorizontalFooter);
          }

          function syncVerticalScroll(scrollEvent) {
            containerCtrl.prevScrollArgs = scrollEvent;
            $elm[0].scrollTop = scrollEvent.getNewScrollTop(rowContainer,containerCtrl.viewport);
          }

          function syncHorizontalScroll(scrollEvent) {
            containerCtrl.prevScrollArgs = scrollEvent;
            var newScrollLeft = scrollEvent.getNewScrollLeft(colContainer, containerCtrl.viewport);

            $elm[0].scrollLeft =  gridUtil.denormalizeScrollLeft(containerCtrl.viewport,newScrollLeft, grid);
          }

          function syncHorizontalHeader(scrollEvent) {
            var newScrollLeft = scrollEvent.getNewScrollLeft(colContainer, containerCtrl.viewport);

            if (containerCtrl.headerViewport) {
              containerCtrl.headerViewport.scrollLeft = gridUtil.denormalizeScrollLeft(containerCtrl.viewport,newScrollLeft, grid);
            }
          }

          function syncHorizontalFooter(scrollEvent) {
            var newScrollLeft = scrollEvent.getNewScrollLeft(colContainer, containerCtrl.viewport);

            if (containerCtrl.footerViewport) {
              containerCtrl.footerViewport.scrollLeft =  gridUtil.denormalizeScrollLeft(containerCtrl.viewport,newScrollLeft, grid);
            }
          }

          $scope.$on('$destroy', function unbindEvents() {
            $elm.off();
          });
        },
        controller: ['$scope', function ($scope) {
          this.rowStyle = function () {
            var rowContainer = $scope.rowContainer;
            var colContainer = $scope.colContainer;

            var styles = {};

            if (rowContainer.currentTopRow !== 0) {
              // top offset based on hidden rows count
              var translateY = "translateY("+ (rowContainer.currentTopRow * rowContainer.grid.options.rowHeight)  +"px)";

              styles['transform'] = translateY;
              styles['-webkit-transform'] = translateY;
              styles['-ms-transform'] = translateY;
            }

            if (colContainer.currentFirstColumn !== 0) {
              if (colContainer.grid.isRTL()) {
                styles['margin-right'] = colContainer.columnOffset + 'px';
              }
              else {
                styles['margin-left'] = colContainer.columnOffset + 'px';
              }
            }

            return styles;
          };
        }]
      };
    }
  ]);

})();

(function() {
	angular.module('ui.grid')
		.directive('uiGridVisible', function uiGridVisibleAction() {
			return function($scope, $elm, $attr) {
				$scope.$watch($attr.uiGridVisible, function(visible) {
					$elm[visible ? 'removeClass' : 'addClass']('ui-grid-invisible');
				});
			};
		});
})();

(function () {
  'use strict';

  angular.module('ui.grid').controller('uiGridController', ['$scope', '$element', '$attrs', 'gridUtil', '$q', 'uiGridConstants',
                    'gridClassFactory', '$parse', '$compile',
    function ($scope, $elm, $attrs, gridUtil, $q, uiGridConstants,
              gridClassFactory, $parse, $compile) {
      // gridUtil.logDebug('ui-grid controller');
      var self = this;
      var deregFunctions = [];

      self.grid = gridClassFactory.createGrid($scope.uiGrid);

      // assign $scope.$parent if appScope not already assigned
      self.grid.appScope = self.grid.appScope || $scope.$parent;

      $elm.addClass('grid' + self.grid.id);
      self.grid.rtl = gridUtil.getStyles($elm[0])['direction'] === 'rtl';


      // angular.extend(self.grid.options, );

      // all properties of grid are available on scope
      $scope.grid = self.grid;

      if ($attrs.uiGridColumns) {
        deregFunctions.push( $attrs.$observe('uiGridColumns', function(value) {
          self.grid.options.columnDefs = angular.isString(value) ? angular.fromJson(value) : value;
          self.grid.buildColumns()
            .then(function() {
              self.grid.preCompileCellTemplates();

              self.grid.refreshCanvas(true);
            }).catch(angular.noop);
        }) );
      }

      // prevents an error from being thrown when the array is not defined yet and fastWatch is on
      function getSize(array) {
        return array ? array.length : 0;
      }

      // if fastWatch is set we watch only the length and the reference, not every individual object
      if (self.grid.options.fastWatch) {
        self.uiGrid = $scope.uiGrid;
        if (angular.isString($scope.uiGrid.data)) {
          deregFunctions.push( $scope.$parent.$watch($scope.uiGrid.data, dataWatchFunction) );
          deregFunctions.push( $scope.$parent.$watch(function() {
            if ( self.grid.appScope[$scope.uiGrid.data] ) {
              return self.grid.appScope[$scope.uiGrid.data].length;
            } else {
              return undefined;
            }
          }, dataWatchFunction) );
        } else {
          deregFunctions.push( $scope.$parent.$watch(function() { return $scope.uiGrid.data; }, dataWatchFunction) );
          deregFunctions.push( $scope.$parent.$watch(function() { return getSize($scope.uiGrid.data); }, function() { dataWatchFunction($scope.uiGrid.data); }) );
        }
        deregFunctions.push( $scope.$parent.$watch(function() { return $scope.uiGrid.columnDefs; }, columnDefsWatchFunction) );
        deregFunctions.push( $scope.$parent.$watch(function() { return getSize($scope.uiGrid.columnDefs); }, function() { columnDefsWatchFunction($scope.uiGrid.columnDefs); }) );
      } else {
        if (angular.isString($scope.uiGrid.data)) {
          deregFunctions.push( $scope.$parent.$watchCollection($scope.uiGrid.data, dataWatchFunction) );
        } else {
          deregFunctions.push( $scope.$parent.$watchCollection(function() { return $scope.uiGrid.data; }, dataWatchFunction) );
        }
        deregFunctions.push( $scope.$parent.$watchCollection(function() { return $scope.uiGrid.columnDefs; }, columnDefsWatchFunction) );
      }


      function columnDefsWatchFunction(n, o) {
        if (n && n !== o) {
          self.grid.options.columnDefs = $scope.uiGrid.columnDefs;
          self.grid.callDataChangeCallbacks(uiGridConstants.dataChange.COLUMN, {
            orderByColumnDefs: true,
            preCompileCellTemplates: true
          });
        }
      }

      var mostRecentData;

      function dataWatchFunction(newData) {
        // gridUtil.logDebug('dataWatch fired');
        var promises = [];

        if ( self.grid.options.fastWatch ) {
          if (angular.isString($scope.uiGrid.data)) {
            newData = self.grid.appScope.$eval($scope.uiGrid.data);
          } else {
            newData = $scope.uiGrid.data;
          }
        }

        mostRecentData = newData;

        if (newData) {
          // columns length is greater than the number of row header columns, which don't count because they're created automatically
          var hasColumns = self.grid.columns.length > (self.grid.rowHeaderColumns ? self.grid.rowHeaderColumns.length : 0);

          if (
            // If we have no columns
            !hasColumns &&
            // ... and we don't have a ui-grid-columns attribute, which would define columns for us
            !$attrs.uiGridColumns &&
            // ... and we have no pre-defined columns
            self.grid.options.columnDefs.length === 0 &&
            // ... but we DO have data
            newData.length > 0
          ) {
            // ... then build the column definitions from the data that we have
            self.grid.buildColumnDefsFromData(newData);
          }

          // If we haven't built columns before and either have some columns defined or some data defined
          if (!hasColumns && (self.grid.options.columnDefs.length > 0 || newData.length > 0)) {
            // Build the column set, then pre-compile the column cell templates
            promises.push(self.grid.buildColumns()
              .then(function() {
                self.grid.preCompileCellTemplates();
              }).catch(angular.noop));
          }

          $q.all(promises).then(function() {
            // use most recent data, rather than the potentially outdated data passed into watcher handler
            self.grid.modifyRows(mostRecentData)
              .then(function () {
                // if (self.viewport) {
                  self.grid.redrawInPlace(true);
                // }

                $scope.$evalAsync(function() {
                  self.grid.refreshCanvas(true);
                  self.grid.callDataChangeCallbacks(uiGridConstants.dataChange.ROW);
                });
              }).catch(angular.noop);
          }).catch(angular.noop);
        }
      }

      var styleWatchDereg = $scope.$watch(function () { return self.grid.styleComputations; }, function() {
        self.grid.refreshCanvas(true);
      });

      $scope.$on('$destroy', function() {
        deregFunctions.forEach( function( deregFn ) { deregFn(); });
        styleWatchDereg();
      });

      self.fireEvent = function(eventName, args) {
        args = args || {};

        // Add the grid to the event arguments if it's not there
        if (angular.isUndefined(args.grid)) {
          args.grid = self.grid;
        }

        $scope.$broadcast(eventName, args);
      };

      self.innerCompile = function innerCompile(elm) {
        $compile(elm)($scope);
      };
    }]);

/**
 *  @ngdoc directive
 *  @name ui.grid.directive:uiGrid
 *  @element div
 *  @restrict EA
 *  @param {Object} uiGrid Options for the grid to use
 *
 *  @description Create a very basic grid.
 *
 *  @example
    <example module="app">
      <file name="app.js">
        var app = angular.module('app', ['ui.grid']);

        app.controller('MainCtrl', ['$scope', function ($scope) {
          $scope.data = [
            { name: 'Bob', title: 'CEO' },
            { name: 'Frank', title: 'Lowly Developer' }
          ];
        }]);
      </file>
      <file name="index.html">
        <div ng-controller="MainCtrl">
          <div ui-grid="{ data: data }"></div>
        </div>
      </file>
    </example>
 */
angular.module('ui.grid').directive('uiGrid', uiGridDirective);

uiGridDirective.$inject = ['$window', 'gridUtil', 'uiGridConstants'];
function uiGridDirective($window, gridUtil, uiGridConstants) {
  return {
    templateUrl: 'ui-grid/ui-grid',
    scope: {
      uiGrid: '='
    },
    replace: true,
    transclude: true,
    controller: 'uiGridController',
    compile: function () {
      return {
        post: function ($scope, $elm, $attrs, uiGridCtrl) {
          var grid = uiGridCtrl.grid;
          // Initialize scrollbars (TODO: move to controller??)
          uiGridCtrl.scrollbars = [];
          grid.element = $elm;


          // See if the grid has a rendered width, if not, wait a bit and try again
          var sizeCheckInterval = 100; // ms
          var maxSizeChecks = 20; // 2 seconds total
          var sizeChecks = 0;

          // Setup (event listeners) the grid
          setup();

          // And initialize it
          init();

          // Mark rendering complete so API events can happen
          grid.renderingComplete();

          // If the grid doesn't have size currently, wait for a bit to see if it gets size
          checkSize();

          /*-- Methods --*/

          function checkSize() {
            // If the grid has no width and we haven't checked more than <maxSizeChecks> times, check again in <sizeCheckInterval> milliseconds
            if ($elm[0].offsetWidth <= 0 && sizeChecks < maxSizeChecks) {
              setTimeout(checkSize, sizeCheckInterval);
              sizeChecks++;
            } else {
              $scope.$applyAsync(init);
            }
          }

          // Setup event listeners and watchers
          function setup() {
            var deregisterLeftWatcher, deregisterRightWatcher;

            // Bind to window resize events
            angular.element($window).on('resize', gridResize);

            // Unbind from window resize events when the grid is destroyed
            $elm.on('$destroy', function () {
              angular.element($window).off('resize', gridResize);
              deregisterLeftWatcher();
              deregisterRightWatcher();
            });

            // If we add a left container after render, we need to watch and react
            deregisterLeftWatcher = $scope.$watch(function () { return grid.hasLeftContainer();}, function (newValue, oldValue) {
              if (newValue === oldValue) {
                return;
              }
              grid.refreshCanvas(true);
            });

            // If we add a right container after render, we need to watch and react
            deregisterRightWatcher = $scope.$watch(function () { return grid.hasRightContainer();}, function (newValue, oldValue) {
              if (newValue === oldValue) {
                return;
              }
              grid.refreshCanvas(true);
            });
          }

          // Initialize the directive
          function init() {
            grid.gridWidth = $scope.gridWidth = gridUtil.elementWidth($elm);

            // Default canvasWidth to the grid width, in case we don't get any column definitions to calculate it from
            grid.canvasWidth = uiGridCtrl.grid.gridWidth;

            grid.gridHeight = $scope.gridHeight = gridUtil.elementHeight($elm);

            // If the grid isn't tall enough to fit a single row, it's kind of useless. Resize it to fit a minimum number of rows
            if (grid.gridHeight - grid.scrollbarHeight <= grid.options.rowHeight && grid.options.enableMinHeightCheck) {
              autoAdjustHeight();
            }

            // Run initial canvas refresh
            grid.refreshCanvas(true);
          }

          // Set the grid's height ourselves in the case that its height would be unusably small
          function autoAdjustHeight() {
            // Figure out the new height
            var contentHeight = grid.options.minRowsToShow * grid.options.rowHeight;
            var headerHeight = grid.options.showHeader ? grid.options.headerRowHeight : 0;
            var footerHeight = grid.calcFooterHeight();

            var scrollbarHeight = 0;
            if (grid.options.enableHorizontalScrollbar === uiGridConstants.scrollbars.ALWAYS) {
              scrollbarHeight = gridUtil.getScrollbarWidth();
            }

            var maxNumberOfFilters = 0;
            // Calculates the maximum number of filters in the columns
            angular.forEach(grid.options.columnDefs, function(col) {
              if (col.hasOwnProperty('filter')) {
                if (maxNumberOfFilters < 1) {
                    maxNumberOfFilters = 1;
                }
              }
              else if (col.hasOwnProperty('filters')) {
                if (maxNumberOfFilters < col.filters.length) {
                    maxNumberOfFilters = col.filters.length;
                }
              }
            });

            if (grid.options.enableFiltering  && !maxNumberOfFilters) {
              var allColumnsHaveFilteringTurnedOff = grid.options.columnDefs.length && grid.options.columnDefs.every(function(col) {
                return col.enableFiltering === false;
              });

              if (!allColumnsHaveFilteringTurnedOff) {
                maxNumberOfFilters = 1;
              }
            }

            var filterHeight = maxNumberOfFilters * headerHeight;

            var newHeight = headerHeight + contentHeight + footerHeight + scrollbarHeight + filterHeight;

            $elm.css('height', newHeight + 'px');

            grid.gridHeight = $scope.gridHeight = gridUtil.elementHeight($elm);
          }

          // Resize the grid on window resize events
          function gridResize() {
            if (!gridUtil.isVisible($elm)) {
              return;
            }
            grid.gridWidth = $scope.gridWidth = gridUtil.elementWidth($elm);
            grid.gridHeight = $scope.gridHeight = gridUtil.elementHeight($elm);

            grid.refreshCanvas(true);
          }
        }
      };
    }
  };
}
})();

(function() {
  'use strict';

  angular.module('ui.grid').directive('uiGridPinnedContainer', ['gridUtil', function (gridUtil) {
    return {
      restrict: 'EA',
      replace: true,
      template: '<div class="ui-grid-pinned-container">'
              + '<div ui-grid-render-container container-id="side"'
              + ' row-container-name="\'body\'" col-container-name="side"'
              + ' bind-scroll-vertical="true"'
              + ' class="{{ side }} ui-grid-render-container-{{ side }}"></div>'
              + '</div>',
      scope: {
        side: '=uiGridPinnedContainer'
      },
      require: '^uiGrid',
      compile: function compile() {
        return {
          post: function ($scope, $elm, $attrs, uiGridCtrl) {
            // gridUtil.logDebug('ui-grid-pinned-container ' + $scope.side + ' link');

            var grid = uiGridCtrl.grid;

            var myWidth = 0;

            $elm.addClass('ui-grid-pinned-container-' + $scope.side);

            // Monkey-patch the viewport width function
            if ($scope.side === 'left' || $scope.side === 'right') {
              grid.renderContainers[$scope.side].getViewportWidth = monkeyPatchedGetViewportWidth;
            }

            function monkeyPatchedGetViewportWidth() {
              /*jshint validthis: true */
              var self = this;

              var viewportWidth = 0;
              self.visibleColumnCache.forEach(function (column) {
                viewportWidth += column.drawnWidth;
              });

              var adjustment = self.getViewportAdjustment();

              viewportWidth = viewportWidth + adjustment.width;

              return viewportWidth;
            }

            function updateContainerWidth() {
              if ($scope.side === 'left' || $scope.side === 'right') {
                var cols = grid.renderContainers[$scope.side].visibleColumnCache;
                var width = 0;
                for (var i = 0; i < cols.length; i++) {
                  var col = cols[i];
                  width += col.drawnWidth || col.width || 0;
                }

                return width;
              }
            }

            function updateContainerDimensions() {
              var ret = '';

              // Column containers
              if ($scope.side === 'left' || $scope.side === 'right') {
                myWidth = updateContainerWidth();

                // gridUtil.logDebug('myWidth', myWidth);

                // TODO(c0bra): Subtract sum of col widths from grid viewport width and update it
                $elm.attr('style', null);

             //   var myHeight = grid.renderContainers.body.getViewportHeight(); // + grid.horizontalScrollbarHeight;

                ret += '.grid' + grid.id + ' .ui-grid-pinned-container-' + $scope.side + ', .grid' + grid.id + ' .ui-grid-pinned-container-' + $scope.side + ' .ui-grid-render-container-' + $scope.side + ' .ui-grid-viewport { width: ' + myWidth + 'px; } ';
              }

              return ret;
            }

            grid.renderContainers.body.registerViewportAdjuster(function (adjustment) {
              myWidth = updateContainerWidth();

              // Subtract our own width
              adjustment.width -= myWidth;
              adjustment.side = $scope.side;

              return adjustment;
            });

            // Register style computation to adjust for columns in `side`'s render container
            grid.registerStyleComputation({
              priority: 15,
              func: updateContainerDimensions
            });
          }
        };
      }
    };
  }]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('en', {
        headerCell: {
          aria: {
            defaultFilterLabel: 'Filter for column',
            removeFilter: 'Remove Filter',
            columnMenuButtonLabel: 'Column Menu',
            column: 'Column'
          },
          priority: 'Priority:',
          filterLabel: "Filter for column: "
        },
        aggregate: {
          label: 'items'
        },
        groupPanel: {
          description: 'Drag a column header here and drop it to group by that column.'
        },
        search: {
          aria: {
            selected: 'Row selected',
            notSelected: 'Row not selected'
          },
          placeholder: 'Search...',
          showingItems: 'Showing Items:',
          selectedItems: 'Selected Items:',
          totalItems: 'Total Items:',
          size: 'Page Size:',
          first: 'First Page',
          next: 'Next Page',
          previous: 'Previous Page',
          last: 'Last Page'
        },
        menu: {
          text: 'Choose Columns:'
        },
        sort: {
          ascending: 'Sort Ascending',
          descending: 'Sort Descending',
          none: 'Sort None',
          remove: 'Remove Sort'
        },
        column: {
          hide: 'Hide Column'
        },
        aggregation: {
          count: 'total rows: ',
          sum: 'total: ',
          avg: 'avg: ',
          min: 'min: ',
          max: 'max: '
        },
        pinning: {
          pinLeft: 'Pin Left',
          pinRight: 'Pin Right',
          unpin: 'Unpin'
        },
        columnMenu: {
          close: 'Close'
        },
        gridMenu: {
          aria: {
            buttonLabel: 'Grid Menu'
          },
          columns: 'Columns:',
          importerTitle: 'Import file',
          exporterAllAsCsv: 'Export all data as csv',
          exporterVisibleAsCsv: 'Export visible data as csv',
          exporterSelectedAsCsv: 'Export selected data as csv',
          exporterAllAsPdf: 'Export all data as pdf',
          exporterVisibleAsPdf: 'Export visible data as pdf',
          exporterSelectedAsPdf: 'Export selected data as pdf',
          exporterAllAsExcel: 'Export all data as excel',
          exporterVisibleAsExcel: 'Export visible data as excel',
          exporterSelectedAsExcel: 'Export selected data as excel',
          clearAllFilters: 'Clear all filters'
        },
        importer: {
          noHeaders: 'Column names were unable to be derived, does the file have a header?',
          noObjects: 'Objects were not able to be derived, was there data in the file other than headers?',
          invalidCsv: 'File was unable to be processed, is it valid CSV?',
          invalidJson: 'File was unable to be processed, is it valid Json?',
          jsonNotArray: 'Imported json file must contain an array, aborting.'
        },
        pagination: {
          aria: {
            pageToFirst: 'Page to first',
            pageBack: 'Page back',
            pageSelected: 'Selected page',
            pageForward: 'Page forward',
            pageToLast: 'Page to last'
          },
          sizes: 'items per page',
          totalItems: 'items',
          through: 'through',
          of: 'of'
        },
        grouping: {
          group: 'Group',
          ungroup: 'Ungroup',
          aggregate_count: 'Agg: Count',
          aggregate_sum: 'Agg: Sum',
          aggregate_max: 'Agg: Max',
          aggregate_min: 'Agg: Min',
          aggregate_avg: 'Agg: Avg',
          aggregate_remove: 'Agg: Remove'
        },
        validate: {
          error: 'Error:',
          minLength: 'Value should be at least THRESHOLD characters long.',
          maxLength: 'Value should be at most THRESHOLD characters long.',
          required: 'A value is needed.'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function() {

angular.module('ui.grid')
.factory('Grid', ['$q', '$compile', '$parse', 'gridUtil', 'uiGridConstants', 'GridOptions', 'GridColumn', 'GridRow', 'GridApi', 'rowSorter', 'rowSearcher', 'GridRenderContainer', '$timeout','ScrollEvent',
    function($q, $compile, $parse, gridUtil, uiGridConstants, GridOptions, GridColumn, GridRow, GridApi, rowSorter, rowSearcher, GridRenderContainer, $timeout, ScrollEvent) {

  /**
   * @ngdoc object
   * @name ui.grid.api:PublicApi
   * @description Public Api for the core grid features
   *
   */

  /**
   * @ngdoc function
   * @name ui.grid.class:Grid
   * @description Grid is the main viewModel.  Any properties or methods needed to maintain state are defined in
   * this prototype.  One instance of Grid is created per Grid directive instance.
   * @param {object} options Object map of options to pass into the grid. An 'id' property is expected.
   */
  var Grid = function Grid(options) {
    var self = this;
    // Get the id out of the options, then remove it
    if (options !== undefined && typeof(options.id) !== 'undefined' && options.id) {
      if (!/^[_a-zA-Z0-9-]+$/.test(options.id)) {
        throw new Error("Grid id '" + options.id + '" is invalid. It must follow CSS selector syntax rules.');
      }
    }
    else {
      throw new Error('No ID provided. An ID must be given when creating a grid.');
    }

    self.id = options.id;
    delete options.id;

    // Get default options
    self.options = GridOptions.initialize( options );

    /**
     * @ngdoc object
     * @name appScope
     * @propertyOf ui.grid.class:Grid
     * @description reference to the application scope (the parent scope of the ui-grid element).  Assigned in ui-grid controller
     * <br/>
     * use gridOptions.appScopeProvider to override the default assignment of $scope.$parent with any reference
     */
    self.appScope = self.options.appScopeProvider;

    self.headerHeight = self.options.headerRowHeight;


    /**
     * @ngdoc object
     * @name footerHeight
     * @propertyOf ui.grid.class:Grid
     * @description returns the total footer height gridFooter + columnFooter
     */
    self.footerHeight = self.calcFooterHeight();


    /**
     * @ngdoc object
     * @name columnFooterHeight
     * @propertyOf ui.grid.class:Grid
     * @description returns the total column footer height
     */
    self.columnFooterHeight = self.calcColumnFooterHeight();

    self.rtl = false;
    self.gridHeight = 0;
    self.gridWidth = 0;
    self.columnBuilders = [];
    self.rowBuilders = [];
    self.rowsProcessors = [];
    self.columnsProcessors = [];
    self.styleComputations = [];
    self.viewportAdjusters = [];
    self.rowHeaderColumns = [];
    self.dataChangeCallbacks = {};
    self.verticalScrollSyncCallBackFns = {};
    self.horizontalScrollSyncCallBackFns = {};

    // self.visibleRowCache = [];

    // Set of 'render' containers for self grid, which can render sets of rows
    self.renderContainers = {};

    // Create a
    self.renderContainers.body = new GridRenderContainer('body', self);

    self.cellValueGetterCache = {};

    // Cached function to use with custom row templates
    self.getRowTemplateFn = null;


    // representation of the rows on the grid.
    // these are wrapped references to the actual data rows (options.data)
    self.rows = [];

    // represents the columns on the grid
    self.columns = [];

    /**
     * @ngdoc boolean
     * @name isScrollingVertically
     * @propertyOf ui.grid.class:Grid
     * @description set to true when Grid is scrolling vertically. Set to false via debounced method
     */
    self.isScrollingVertically = false;

    /**
     * @ngdoc boolean
     * @name isScrollingHorizontally
     * @propertyOf ui.grid.class:Grid
     * @description set to true when Grid is scrolling horizontally. Set to false via debounced method
     */
    self.isScrollingHorizontally = false;

    /**
     * @ngdoc property
     * @name scrollDirection
     * @propertyOf ui.grid.class:Grid
     * @description set one of the {@link ui.grid.service:uiGridConstants#properties_scrollDirection uiGridConstants.scrollDirection}
     *  values (UP, DOWN, LEFT, RIGHT, NONE), which tells us which direction we are scrolling.
     * Set to NONE via debounced method
     */
    self.scrollDirection = uiGridConstants.scrollDirection.NONE;

    // if true, grid will not respond to any scroll events
    self.disableScrolling = false;


    function vertical (scrollEvent) {
      self.isScrollingVertically = false;
      self.api.core.raise.scrollEnd(scrollEvent);
      self.scrollDirection = uiGridConstants.scrollDirection.NONE;
    }

    var debouncedVertical = gridUtil.debounce(vertical, self.options.scrollDebounce);
    var debouncedVerticalMinDelay = gridUtil.debounce(vertical, 0);

    function horizontal (scrollEvent) {
      self.isScrollingHorizontally = false;
      self.api.core.raise.scrollEnd(scrollEvent);
      self.scrollDirection = uiGridConstants.scrollDirection.NONE;
    }

    var debouncedHorizontal = gridUtil.debounce(horizontal, self.options.scrollDebounce);
    var debouncedHorizontalMinDelay = gridUtil.debounce(horizontal, 0);


    /**
     * @ngdoc function
     * @name flagScrollingVertically
     * @methodOf ui.grid.class:Grid
     * @description sets isScrollingVertically to true and sets it to false in a debounced function
     */
    self.flagScrollingVertically = function(scrollEvent) {
      if (!self.isScrollingVertically && !self.isScrollingHorizontally) {
        self.api.core.raise.scrollBegin(scrollEvent);
      }
      self.isScrollingVertically = true;
      if (self.options.scrollDebounce === 0 || !scrollEvent.withDelay) {
        debouncedVerticalMinDelay(scrollEvent);
      }
      else {
        debouncedVertical(scrollEvent);
      }
    };

    /**
     * @ngdoc function
     * @name flagScrollingHorizontally
     * @methodOf ui.grid.class:Grid
     * @description sets isScrollingHorizontally to true and sets it to false in a debounced function
     */
    self.flagScrollingHorizontally = function(scrollEvent) {
      if (!self.isScrollingVertically && !self.isScrollingHorizontally) {
        self.api.core.raise.scrollBegin(scrollEvent);
      }
      self.isScrollingHorizontally = true;
      if (self.options.scrollDebounce === 0 || !scrollEvent.withDelay) {
        debouncedHorizontalMinDelay(scrollEvent);
      }
      else {
        debouncedHorizontal(scrollEvent);
      }
    };

    self.scrollbarHeight = 0;
    self.scrollbarWidth = 0;
    if (self.options.enableHorizontalScrollbar !== uiGridConstants.scrollbars.NEVER) {
      self.scrollbarHeight = gridUtil.getScrollbarWidth();
    }

    if (self.options.enableVerticalScrollbar !== uiGridConstants.scrollbars.NEVER) {
      self.scrollbarWidth = gridUtil.getScrollbarWidth();
    }

    self.api = new GridApi(self);

    /**
     * @ngdoc function
     * @name refresh
     * @methodOf ui.grid.api:PublicApi
     * @description Refresh the rendered grid on screen.
     * The refresh method re-runs both the columnProcessors and the
     * rowProcessors, as well as calling refreshCanvas to update all
     * the grid sizing.  In general you should prefer to use queueGridRefresh
     * instead, which is basically a debounced version of refresh.
     *
     * If you only want to resize the grid, not regenerate all the rows
     * and columns, you should consider directly calling refreshCanvas instead.
     *
     * @param {boolean} [rowsAltered] Optional flag for refreshing when the number of rows has changed
     */
    self.api.registerMethod( 'core', 'refresh', this.refresh );

    /**
     * @ngdoc function
     * @name queueGridRefresh
     * @methodOf ui.grid.api:PublicApi
     * @description Request a refresh of the rendered grid on screen, if multiple
     * calls to queueGridRefresh are made within a digest cycle only one will execute.
     * The refresh method re-runs both the columnProcessors and the
     * rowProcessors, as well as calling refreshCanvas to update all
     * the grid sizing.  In general you should prefer to use queueGridRefresh
     * instead, which is basically a debounced version of refresh.
     *
     */
    self.api.registerMethod( 'core', 'queueGridRefresh', this.queueGridRefresh );

    /**
     * @ngdoc function
     * @name refreshRows
     * @methodOf ui.grid.api:PublicApi
     * @description Runs only the rowProcessors, columns remain as they were.
     * It then calls redrawInPlace and refreshCanvas, which adjust the grid sizing.
     * @returns {promise} promise that is resolved when render completes?
     *
     */
    self.api.registerMethod( 'core', 'refreshRows', this.refreshRows );

    /**
     * @ngdoc function
     * @name queueRefresh
     * @methodOf ui.grid.api:PublicApi
     * @description Requests execution of refreshCanvas, if multiple requests are made
     * during a digest cycle only one will run.  RefreshCanvas updates the grid sizing.
     * @returns {promise} promise that is resolved when render completes?
     *
     */
    self.api.registerMethod( 'core', 'queueRefresh', this.queueRefresh );

    /**
     * @ngdoc function
     * @name handleWindowResize
     * @methodOf ui.grid.api:PublicApi
     * @description Trigger a grid resize, normally this would be picked
     * up by a watch on window size, but in some circumstances it is necessary
     * to call this manually
     * @returns {promise} promise that is resolved when render completes?
     *
     */
    self.api.registerMethod( 'core', 'handleWindowResize', this.handleWindowResize );


    /**
     * @ngdoc function
     * @name addRowHeaderColumn
     * @methodOf ui.grid.api:PublicApi
     * @description adds a row header column to the grid
     * @param {object} column def
     * @param {number} order Determines order of header column on grid.  Lower order means header
     * is positioned to the left of higher order headers
     *
     */
    self.api.registerMethod( 'core', 'addRowHeaderColumn', this.addRowHeaderColumn );

    /**
     * @ngdoc function
     * @name scrollToIfNecessary
     * @methodOf ui.grid.api:PublicApi
     * @description Scrolls the grid to make a certain row and column combo visible,
     *   in the case that it is not completely visible on the screen already.
     * @param {GridRow} gridRow row to make visible
     * @param {GridColumn} gridCol column to make visible
     * @returns {promise} a promise that is resolved when scrolling is complete
     *
     */
    self.api.registerMethod( 'core', 'scrollToIfNecessary', function(gridRow, gridCol) { return self.scrollToIfNecessary(gridRow, gridCol);} );

    /**
     * @ngdoc function
     * @name scrollTo
     * @methodOf ui.grid.api:PublicApi
     * @description Scroll the grid such that the specified
     * row and column is in view
     * @param {object} rowEntity gridOptions.data[] array instance to make visible
     * @param {object} colDef to make visible
     * @returns {promise} a promise that is resolved after any scrolling is finished
     */
    self.api.registerMethod( 'core', 'scrollTo', function (rowEntity, colDef) { return self.scrollTo(rowEntity, colDef);}  );

    /**
     * @ngdoc function
     * @name registerRowsProcessor
     * @methodOf ui.grid.api:PublicApi
     * @description
     * Register a "rows processor" function. When the rows are updated,
     * the grid calls each registered "rows processor", which has a chance
     * to alter the set of rows (sorting, etc) as long as the count is not
     * modified.
     *
     * @param {function(renderedRowsToProcess, columns )} processorFunction rows processor function, which
     * is run in the context of the grid (i.e. this for the function will be the grid), and must
     * return the updated rows list, which is passed to the next processor in the chain
     * @param {number} priority the priority of this processor.  In general we try to do them in 100s to leave room
     * for other people to inject rows processors at intermediate priorities.  Lower priority rowsProcessors run earlier.
     *
     * At present allRowsVisible is running at 50, sort manipulations running at 60-65, filter is running at 100,
     * sort is at 200, grouping and treeview at 400-410, selectable rows at 500, pagination at 900 (pagination will generally want to be last)
     */
    self.api.registerMethod( 'core', 'registerRowsProcessor', this.registerRowsProcessor  );

    /**
     * @ngdoc function
     * @name registerColumnsProcessor
     * @methodOf ui.grid.api:PublicApi
     * @description
     * Register a "columns processor" function. When the columns are updated,
     * the grid calls each registered "columns processor", which has a chance
     * to alter the set of columns as long as the count is not
     * modified.
     *
     * @param {function(renderedColumnsToProcess, rows )} processorFunction columns processor function, which
     * is run in the context of the grid (i.e. this for the function will be the grid), and must
     * return the updated columns list, which is passed to the next processor in the chain
     * @param {number} priority the priority of this processor.  In general we try to do them in 100s to leave room
     * for other people to inject columns processors at intermediate priorities.  Lower priority columnsProcessors run earlier.
     *
     * At present allRowsVisible is running at 50, filter is running at 100, sort is at 200, grouping at 400, selectable rows at 500, pagination at 900 (pagination will generally want to be last)
     */
    self.api.registerMethod( 'core', 'registerColumnsProcessor', this.registerColumnsProcessor  );

    /**
     * @ngdoc function
     * @name sortHandleNulls
     * @methodOf ui.grid.api:PublicApi
     * @description A null handling method that can be used when building custom sort
     * functions
     * @example
     * <pre>
     *   mySortFn = function(a, b) {
     *   var nulls = $scope.gridApi.core.sortHandleNulls(a, b);
     *   if ( nulls !== null ) {
     *     return nulls;
     *   } else {
     *     // your code for sorting here
     *   };
     * </pre>
     * @param {object} a sort value a
     * @param {object} b sort value b
     * @returns {number} null if there were no nulls/undefineds, otherwise returns
     * a sort value that should be passed back from the sort function
     *
     */
    self.api.registerMethod( 'core', 'sortHandleNulls', rowSorter.handleNulls );

    /**
     * @ngdoc function
     * @name sortChanged
     * @methodOf  ui.grid.api:PublicApi
     * @description The sort criteria on one or more columns has
     * changed.  Provides as parameters the grid and the output of
     * getColumnSorting, which is an array of gridColumns
     * that have sorting on them, sorted in priority order.
     *
     * @param {$scope} scope The scope of the controller. This is used to deregister this event when the scope is destroyed.
     * @param {Function} callBack Will be called when the event is emited. The function passes back the grid and an array of
     * columns with sorts on them, in priority order.
     *
     * @example
     * <pre>
     *      gridApi.core.on.sortChanged( $scope, function(grid, sortColumns) {
     *        // do something
     *      });
     * </pre>
     */
    self.api.registerEvent( 'core', 'sortChanged' );

      /**
     * @ngdoc function
     * @name columnVisibilityChanged
     * @methodOf  ui.grid.api:PublicApi
     * @description The visibility of a column has changed,
     * the column itself is passed out as a parameter of the event.
     *
     * @param {$scope} scope The scope of the controller. This is used to deregister this event when the scope is destroyed.
     * @param {Function} callBack Will be called when the event is emited. The function passes back the GridCol that has changed.
     *
     * @example
     * <pre>
     *      gridApi.core.on.columnVisibilityChanged( $scope, function (column) {
     *        // do something
     *      } );
     * </pre>
     */
    self.api.registerEvent( 'core', 'columnVisibilityChanged' );

    /**
     * @ngdoc method
     * @name notifyDataChange
     * @methodOf ui.grid.api:PublicApi
     * @description Notify the grid that a data or config change has occurred,
     * where that change isn't something the grid was otherwise noticing.  This
     * might be particularly relevant where you've changed values within the data
     * and you'd like cell classes to be re-evaluated, or changed config within
     * the columnDef and you'd like headerCellClasses to be re-evaluated.
     * @param {string} type one of the
     * {@link ui.grid.service:uiGridConstants#properties_dataChange uiGridConstants.dataChange}
     * values (ALL, ROW, EDIT, COLUMN, OPTIONS), which tells us which refreshes to fire.
     *
     * - ALL: listeners fired on any of these events, fires listeners on all events.
     * - ROW: fired when a row is added or removed.
     * - EDIT: fired when the data in a cell is edited.
     * - COLUMN: fired when the column definitions are modified.
     * - OPTIONS: fired when the grid options are modified.
     */
    self.api.registerMethod( 'core', 'notifyDataChange', this.notifyDataChange );

    /**
     * @ngdoc method
     * @name clearAllFilters
     * @methodOf ui.grid.api:PublicApi
     * @description Clears all filters and optionally refreshes the visible rows.
     * @param {object} refreshRows Defaults to true.
     * @param {object} clearConditions Defaults to false.
     * @param {object} clearFlags Defaults to false.
     * @returns {promise} If `refreshRows` is true, returns a promise of the rows refreshing.
     */
    self.api.registerMethod('core', 'clearAllFilters', this.clearAllFilters);

    self.registerDataChangeCallback( self.columnRefreshCallback, [uiGridConstants.dataChange.COLUMN]);
    self.registerDataChangeCallback( self.processRowsCallback, [uiGridConstants.dataChange.EDIT]);
    self.registerDataChangeCallback( self.updateFooterHeightCallback, [uiGridConstants.dataChange.OPTIONS]);

    self.registerStyleComputation({
      priority: 10,
      func: self.getFooterStyles
    });
  };

   Grid.prototype.calcFooterHeight = function () {
     if (!this.hasFooter()) {
       return 0;
     }

     var height = 0;
     if (this.options.showGridFooter) {
       height += this.options.gridFooterHeight;
     }

     height += this.calcColumnFooterHeight();

     return height;
   };

   Grid.prototype.calcColumnFooterHeight = function () {
     var height = 0;

     if (this.options.showColumnFooter) {
       height += this.options.columnFooterHeight;
     }

     return height;
   };

   Grid.prototype.getFooterStyles = function () {
     var style = '.grid' + this.id + ' .ui-grid-footer-aggregates-row { height: ' + this.options.columnFooterHeight + 'px; }';
     style += ' .grid' + this.id + ' .ui-grid-footer-info { height: ' + this.options.gridFooterHeight + 'px; }';
     return style;
   };

  Grid.prototype.hasFooter = function () {
   return this.options.showGridFooter || this.options.showColumnFooter;
  };

  /**
   * @ngdoc function
   * @name isRTL
   * @methodOf ui.grid.class:Grid
   * @description Returns true if grid is RightToLeft
   */
  Grid.prototype.isRTL = function () {
    return this.rtl;
  };


  /**
   * @ngdoc function
   * @name registerColumnBuilder
   * @methodOf ui.grid.class:Grid
   * @description When the build creates columns from column definitions, the columnbuilders will be called to add
   * additional properties to the column.
   * @param {function(colDef, col, gridOptions)} columnBuilder function to be called
   */
  Grid.prototype.registerColumnBuilder = function registerColumnBuilder(columnBuilder) {
    this.columnBuilders.push(columnBuilder);
  };

  /**
   * @ngdoc function
   * @name buildColumnDefsFromData
   * @methodOf ui.grid.class:Grid
   * @description Populates columnDefs from the provided data
   * @param {function(colDef, col, gridOptions)} rowBuilder function to be called
   */
  Grid.prototype.buildColumnDefsFromData = function (dataRows) {
    this.options.columnDefs =  gridUtil.getColumnsFromData(dataRows, this.options.excludeProperties);
  };

  /**
   * @ngdoc function
   * @name registerRowBuilder
   * @methodOf ui.grid.class:Grid
   * @description When the build creates rows from gridOptions.data, the rowBuilders will be called to add
   * additional properties to the row.
   * @param {function(row, gridOptions)} rowBuilder function to be called
   */
  Grid.prototype.registerRowBuilder = function registerRowBuilder(rowBuilder) {
    this.rowBuilders.push(rowBuilder);
  };

  /**
   * @ngdoc function
   * @name registerDataChangeCallback
   * @methodOf ui.grid.class:Grid
   * @description When a data change occurs, the data change callbacks of the specified type
   * will be called.  The rules are:
   *
   * - when the data watch fires, that is considered a ROW change (the data watch only notices
   *   added or removed rows)
   * - when the api is called to inform us of a change, the declared type of that change is used
   * - when a cell edit completes, the EDIT callbacks are triggered
   * - when the columnDef watch fires, the COLUMN callbacks are triggered
   * - when the options watch fires, the OPTIONS callbacks are triggered
   *
   * For a given event:
   * - ALL calls ROW, EDIT, COLUMN, OPTIONS and ALL callbacks
   * - ROW calls ROW and ALL callbacks
   * - EDIT calls EDIT and ALL callbacks
   * - COLUMN calls COLUMN and ALL callbacks
   * - OPTIONS calls OPTIONS and ALL callbacks
   *
   * @param {function(grid)} callback function to be called
   * @param {array} types the types of data change you want to be informed of.  Values from
   * the {@link ui.grid.service:uiGridConstants#properties_dataChange uiGridConstants.dataChange}
   *  values ( ALL, EDIT, ROW, COLUMN, OPTIONS ).  Optional and defaults to ALL
   * @returns {function} deregister function - a function that can be called to deregister this callback
   */
  Grid.prototype.registerDataChangeCallback = function registerDataChangeCallback(callback, types, _this) {
    var self = this,
      uid = gridUtil.nextUid();

    if ( !types ) {
      types = [uiGridConstants.dataChange.ALL];
    }
    if ( !Array.isArray(types)) {
      gridUtil.logError("Expected types to be an array or null in registerDataChangeCallback, value passed was: " + types );
    }
    this.dataChangeCallbacks[uid] = { callback: callback, types: types, _this: _this };

    return function() {
      delete self.dataChangeCallbacks[uid];
    };
  };

  /**
   * @ngdoc function
   * @name callDataChangeCallbacks
   * @methodOf ui.grid.class:Grid
   * @description Calls the callbacks based on the type of data change that
   * has occurred. Always calls the ALL callbacks, calls the ROW, EDIT, COLUMN and OPTIONS callbacks if the
   * event type is matching, or if the type is ALL.
   * @param {string} type the type of event that occurred - one of the
   * {@link ui.grid.service:uiGridConstants#properties_dataChange uiGridConstants.dataChange}
   *  values (ALL, ROW, EDIT, COLUMN, OPTIONS)
   */
  Grid.prototype.callDataChangeCallbacks = function callDataChangeCallbacks(type, options) {
    angular.forEach( this.dataChangeCallbacks, function( callback, uid ) {
      if ( callback.types.indexOf( uiGridConstants.dataChange.ALL ) !== -1 ||
           callback.types.indexOf( type ) !== -1 ||
           type === uiGridConstants.dataChange.ALL ) {
        if (callback._this) {
           callback.callback.apply(callback._this, this, options);
        }
        else {
          callback.callback(this, options);
        }
      }
    }, this);
  };

  /**
   * @ngdoc function
   * @name notifyDataChange
   * @methodOf ui.grid.class:Grid
   * @description Notifies us that a data change has occurred, used in the public
   * api for users to tell us when they've changed data or some other event that
   * our watches cannot pick up
   * @param {string} type the type of event that occurred - one of the
   * uiGridConstants.dataChange values (ALL, ROW, EDIT, COLUMN, OPTIONS)
   *
   * - ALL: listeners fired on any of these events, fires listeners on all events.
   * - ROW: fired when a row is added or removed.
   * - EDIT: fired when the data in a cell is edited.
   * - COLUMN: fired when the column definitions are modified.
   * - OPTIONS: fired when the grid options are modified.
   */
  Grid.prototype.notifyDataChange = function notifyDataChange(type) {
    var constants = uiGridConstants.dataChange;

    if ( type === constants.ALL ||
         type === constants.COLUMN ||
         type === constants.EDIT ||
         type === constants.ROW ||
         type === constants.OPTIONS ) {
      this.callDataChangeCallbacks( type );
    }
    else {
      gridUtil.logError("Notified of a data change, but the type was not recognised, so no action taken, type was: " + type);
    }
  };

  /**
   * @ngdoc function
   * @name columnRefreshCallback
   * @methodOf ui.grid.class:Grid
   * @description refreshes the grid when a column refresh
   * is notified, which triggers handling of the visible flag.
   * This is called on uiGridConstants.dataChange.COLUMN, and is
   * registered as a dataChangeCallback in grid.js
   * @param {object} grid The grid object.
   * @param {object} options Any options passed into the callback.
   */
  Grid.prototype.columnRefreshCallback = function columnRefreshCallback(grid, options) {
    grid.buildColumns(options);
    grid.queueGridRefresh();
  };

  /**
   * @ngdoc function
   * @name processRowsCallback
   * @methodOf ui.grid.class:Grid
   * @description calls the row processors, specifically
   * intended to reset the sorting when an edit is called,
   * registered as a dataChangeCallback on uiGridConstants.dataChange.EDIT
   * @param {object} grid The grid object.
   */
  Grid.prototype.processRowsCallback = function processRowsCallback( grid ) {
    grid.queueGridRefresh();
  };


  /**
   * @ngdoc function
   * @name updateFooterHeightCallback
   * @methodOf ui.grid.class:Grid
   * @description recalculates the footer height,
   * registered as a dataChangeCallback on uiGridConstants.dataChange.OPTIONS
   * @param {object} grid The grid object.
   */
  Grid.prototype.updateFooterHeightCallback = function updateFooterHeightCallback( grid ) {
    grid.footerHeight = grid.calcFooterHeight();
    grid.columnFooterHeight = grid.calcColumnFooterHeight();
  };


  /**
   * @ngdoc function
   * @name getColumn
   * @methodOf ui.grid.class:Grid
   * @description returns a grid column for the column name
   * @param {string} name column name
   */
  Grid.prototype.getColumn = function getColumn(name) {
    var columns = this.columns.filter(function (column) {
      return column.colDef.name === name;
    });

    return columns.length > 0 ? columns[0] : null;
  };

  /**
   * @ngdoc function
   * @name getColDef
   * @methodOf ui.grid.class:Grid
   * @description returns a grid colDef for the column name
   * @param {string} name column.field
   */
  Grid.prototype.getColDef = function getColDef(name) {
    var colDefs = this.options.columnDefs.filter(function (colDef) {
      return colDef.name === name;
    });
    return colDefs.length > 0 ? colDefs[0] : null;
  };

  /**
   * @ngdoc function
   * @name assignTypes
   * @methodOf ui.grid.class:Grid
   * @description uses the first row of data to assign colDef.type for any types not defined.
   */
  /**
   * @ngdoc property
   * @name type
   * @propertyOf ui.grid.class:GridOptions.columnDef
   * @description the type of the column, used in sorting.  If not provided then the
   * grid will guess the type.  Add this only if the grid guessing is not to your
   * satisfaction.  One of:
   * - 'string'
   * - 'boolean'
   * - 'number'
   * - 'date'
   * - 'object'
   * - 'numberStr'
   * Note that if you choose date, your dates should be in a javascript date type
   *
   */
  Grid.prototype.assignTypes = function() {
    var self = this;

    self.options.columnDefs.forEach(function (colDef, index) {
      // Assign colDef type if not specified
      if (!colDef.type) {
        var col = new GridColumn(colDef, index, self);
        var firstRow = self.rows.length > 0 ? self.rows[0] : null;
        if (firstRow) {
          colDef.type = gridUtil.guessType(self.getCellValue(firstRow, col));
        }
        else {
          colDef.type = 'string';
        }
      }
    });
  };


  /**
   * @ngdoc function
   * @name isRowHeaderColumn
   * @methodOf ui.grid.class:Grid
   * @description returns true if the column is a row Header
   * @param {object} column column
   */
  Grid.prototype.isRowHeaderColumn = function isRowHeaderColumn(column) {
    return this.rowHeaderColumns.indexOf(column) !== -1;
  };

  /**
  * @ngdoc function
  * @name addRowHeaderColumn
  * @methodOf ui.grid.class:Grid
  * @description adds a row header column to the grid
  * @param {object} colDef Column definition object.
  * @param {float} order Number that indicates where the column should be placed in the grid.
  * @param {boolean} stopColumnBuild Prevents the buildColumn callback from being triggered. This is useful to improve
  * performance of the grid during initial load.
  */
  Grid.prototype.addRowHeaderColumn = function addRowHeaderColumn(colDef, order, stopColumnBuild) {
    var self = this;

    // default order
    if (order === undefined) {
      order = 0;
    }

    var rowHeaderCol = new GridColumn(colDef, gridUtil.nextUid(), self);
    rowHeaderCol.isRowHeader = true;
    if (self.isRTL()) {
      self.createRightContainer();
      rowHeaderCol.renderContainer = 'right';
    }
    else {
      self.createLeftContainer();
      rowHeaderCol.renderContainer = 'left';
    }

    // relies on the default column builder being first in array, as it is instantiated
    // as part of grid creation
    self.columnBuilders[0](colDef,rowHeaderCol,self.options)
      .then(function() {
        rowHeaderCol.enableFiltering = false;
        rowHeaderCol.enableSorting = false;
        rowHeaderCol.enableHiding = false;
        rowHeaderCol.headerPriority = order;
        self.rowHeaderColumns.push(rowHeaderCol);
        self.rowHeaderColumns = self.rowHeaderColumns.sort(function (a, b) {
          return a.headerPriority - b.headerPriority;
        });

        if (!stopColumnBuild) {
          self.buildColumns()
            .then(function() {
              self.preCompileCellTemplates();
              self.queueGridRefresh();
            }).catch(angular.noop);
        }
      }).catch(angular.noop);
  };

  /**
   * @ngdoc function
   * @name getOnlyDataColumns
   * @methodOf ui.grid.class:Grid
   * @description returns all columns except for rowHeader columns
   */
  Grid.prototype.getOnlyDataColumns = function getOnlyDataColumns() {
    var self = this,
      cols = [];

    self.columns.forEach(function (col) {
      if (self.rowHeaderColumns.indexOf(col) === -1) {
        cols.push(col);
      }
    });
    return cols;
  };

  /**
   * @ngdoc function
   * @name buildColumns
   * @methodOf ui.grid.class:Grid
   * @description creates GridColumn objects from the columnDefinition.  Calls each registered
   * columnBuilder to further process the column
   * @param {object} opts An object contains options to use when building columns
   *
   * * **orderByColumnDefs**: defaults to **false**. When true, `buildColumns` will reorder existing columns according to the order within the column definitions.
   *
   * @returns {Promise} a promise to load any needed column resources
   */
  Grid.prototype.buildColumns = function buildColumns(opts) {
    var options = {
      orderByColumnDefs: false
    };

    angular.extend(options, opts);

    // gridUtil.logDebug('buildColumns');
    var self = this;
    var builderPromises = [];
    var headerOffset = self.rowHeaderColumns.length;
    var i;

    // Remove any columns for which a columnDef cannot be found
    // Deliberately don't use forEach, as it doesn't like splice being called in the middle
    // Also don't cache columns.length, as it will change during this operation
    for (i = 0; i < self.columns.length; i++) {
      if (!self.getColDef(self.columns[i].name)) {
        self.columns.splice(i, 1);
        i--;
      }
    }

    // add row header columns to the grid columns array _after_ columns without columnDefs have been removed
    // rowHeaderColumns is ordered by priority so insert in reverse
    for (var j = self.rowHeaderColumns.length - 1; j >= 0; j--) {
      self.columns.unshift(self.rowHeaderColumns[j]);
    }

    // look at each column def, and update column properties to match.  If the column def
    // doesn't have a column, then splice in a new gridCol
    self.options.columnDefs.forEach(function (colDef, index) {
      self.preprocessColDef(colDef);
      var col = self.getColumn(colDef.name);

      if (!col) {
        col = new GridColumn(colDef, gridUtil.nextUid(), self);
        self.columns.splice(index + headerOffset, 0, col);
      }
      else {
        // tell updateColumnDef that the column was pre-existing
        col.updateColumnDef(colDef, false);
      }

      self.columnBuilders.forEach(function (builder) {
        builderPromises.push(builder.call(self, colDef, col, self.options));
      });
    });

    /*** Reorder columns if necessary ***/
    if (!!options.orderByColumnDefs) {
      // Create a shallow copy of the columns as a cache
      var columnCache = self.columns.slice(0);

      // We need to allow for the "row headers" when mapping from the column defs array to the columns array
      //   If we have a row header in columns[0] and don't account for it   we'll overwrite it with the column in columnDefs[0]

      // Go through all the column defs, use the shorter of columns length and colDefs.length because if a user has given two columns the same name then
      // columns will be shorter than columnDefs.  In this situation we'll avoid an error, but the user will still get an unexpected result
      var len = Math.min(self.options.columnDefs.length, self.columns.length);
      for (i = 0; i < len; i++) {
        // If the column at this index has a different name than the column at the same index in the column defs...
        if (self.columns[i + headerOffset].name !== self.options.columnDefs[i].name) {
          // Replace the one in the cache with the appropriate column
          columnCache[i + headerOffset] = self.getColumn(self.options.columnDefs[i].name);
        }
        else {
          // Otherwise just copy over the one from the initial columns
          columnCache[i + headerOffset] = self.columns[i + headerOffset];
        }
      }

      // Empty out the columns array, non-destructively
      self.columns.length = 0;

      // And splice in the updated, ordered columns from the cache
      Array.prototype.splice.apply(self.columns, [0, 0].concat(columnCache));
    }

    return $q.all(builderPromises).then(function() {
      if (self.rows.length > 0) {
        self.assignTypes();
      }
      if (options.preCompileCellTemplates) {
        self.preCompileCellTemplates();
      }
    }).catch(angular.noop);
  };

  Grid.prototype.preCompileCellTemplate = function(col) {
    var self = this;
    var html = col.cellTemplate.replace(uiGridConstants.MODEL_COL_FIELD, self.getQualifiedColField(col));
    html = html.replace(uiGridConstants.COL_FIELD, 'grid.getCellValue(row, col)');

    col.compiledElementFn = $compile(html);

    if (col.compiledElementFnDefer) {
      col.compiledElementFnDefer.resolve(col.compiledElementFn);
    }
  };

/**
 * @ngdoc function
 * @name preCompileCellTemplates
 * @methodOf ui.grid.class:Grid
 * @description precompiles all cell templates
 */
  Grid.prototype.preCompileCellTemplates = function() {
    var self = this;
    self.columns.forEach(function (col) {
      if ( col.cellTemplate ) {
        self.preCompileCellTemplate( col );
      } else if ( col.cellTemplatePromise ) {
        col.cellTemplatePromise.then( function() {
          self.preCompileCellTemplate( col );
        }).catch(angular.noop);
      }
    });
  };

  /**
   * @ngdoc function
   * @name getGridQualifiedColField
   * @methodOf ui.grid.class:Grid
   * @description Returns the $parse-able accessor for a column within its $scope
   * @param {GridColumn} col col object
   */
  Grid.prototype.getQualifiedColField = function (col) {
    var base = 'row.entity';
    if ( col.field === uiGridConstants.ENTITY_BINDING ) {
      return base;
    }
    return gridUtil.preEval(base + '.' + col.field);
  };

  /**
   * @ngdoc function
   * @name createLeftContainer
   * @methodOf ui.grid.class:Grid
   * @description creates the left render container if it doesn't already exist
   */
  Grid.prototype.createLeftContainer = function() {
    if (!this.hasLeftContainer()) {
      this.renderContainers.left = new GridRenderContainer('left', this, { disableColumnOffset: true });
    }
  };

  /**
   * @ngdoc function
   * @name createRightContainer
   * @methodOf ui.grid.class:Grid
   * @description creates the right render container if it doesn't already exist
   */
  Grid.prototype.createRightContainer = function() {
    if (!this.hasRightContainer()) {
      this.renderContainers.right = new GridRenderContainer('right', this, { disableColumnOffset: true });
    }
  };

  /**
   * @ngdoc function
   * @name hasLeftContainer
   * @methodOf ui.grid.class:Grid
   * @description returns true if leftContainer exists
   */
  Grid.prototype.hasLeftContainer = function() {
    return this.renderContainers.left !== undefined;
  };

  /**
   * @ngdoc function
   * @name hasRightContainer
   * @methodOf ui.grid.class:Grid
   * @description returns true if rightContainer exists
   */
  Grid.prototype.hasRightContainer = function() {
    return this.renderContainers.right !== undefined;
  };


      /**
   * undocumented function
   * @name preprocessColDef
   * @methodOf ui.grid.class:Grid
   * @description defaults the name property from field to maintain backwards compatibility with 2.x
   * validates that name or field is present
   */
  Grid.prototype.preprocessColDef = function preprocessColDef(colDef) {
    var self = this;

    if (!colDef.field && !colDef.name) {
      throw new Error('colDef.name or colDef.field property is required');
    }

    // maintain backwards compatibility with 2.x
    // field was required in 2.x.  now name is required
    if (colDef.name === undefined && colDef.field !== undefined) {
      // See if the column name already exists:
      var newName = colDef.field,
        counter = 2;
      while (self.getColumn(newName)) {
        newName = colDef.field + counter.toString();
        counter++;
      }
      colDef.name = newName;
    }
  };

  // Return a list of items that exist in the `n` array but not the `o` array. Uses optional property accessors passed as third & fourth parameters
  Grid.prototype.newInN = function newInN(o, n, oAccessor, nAccessor) {
    var self = this;

    var t = [];
    for (var i = 0; i < n.length; i++) {
      var nV = nAccessor ? n[i][nAccessor] : n[i];

      var found = false;
      for (var j = 0; j < o.length; j++) {
        var oV = oAccessor ? o[j][oAccessor] : o[j];
        if (self.options.rowEquality(nV, oV)) {
          found = true;
          break;
        }
      }
      if (!found) {
        t.push(nV);
      }
    }

    return t;
  };

  /**
   * @ngdoc function
   * @name getRow
   * @methodOf ui.grid.class:Grid
   * @description returns the GridRow that contains the rowEntity
   * @param {object} rowEntity the gridOptions.data array element instance
   * @param {array} lookInRows [optional] the rows to look in - if not provided then
   * looks in grid.rows
   */
  Grid.prototype.getRow = function getRow(rowEntity, lookInRows) {
    var self = this;

    lookInRows = typeof(lookInRows) === 'undefined' ? self.rows : lookInRows;

    var rows = lookInRows.filter(function (row) {
      return self.options.rowEquality(row.entity, rowEntity);
    });
    return rows.length > 0 ? rows[0] : null;
  };


  /**
   * @ngdoc function
   * @name modifyRows
   * @methodOf ui.grid.class:Grid
   * @description creates or removes GridRow objects from the newRawData array.  Calls each registered
   * rowBuilder to further process the row
   * @param {array} newRawData Modified set of data
   *
   * This method aims to achieve three things:
   * 1. the resulting rows array is in the same order as the newRawData, we'll call
   * rowsProcessors immediately after to sort the data anyway
   * 2. if we have row hashing available, we try to use the rowHash to find the row
   * 3. no memory leaks - rows that are no longer in newRawData need to be garbage collected
   *
   * The basic logic flow makes use of the newRawData, oldRows and oldHash, and creates
   * the newRows and newHash
   *
   * ```
   * newRawData.forEach newEntity
   *   if (hashing enabled)
   *     check oldHash for newEntity
   *   else
   *     look for old row directly in oldRows
   *   if !oldRowFound     // must be a new row
   *     create newRow
   *   append to the newRows and add to newHash
   *   run the processors
   * ```
   *
   * Rows are identified using the hashKey if configured.  If not configured, then rows
   * are identified using the gridOptions.rowEquality function
   *
   * This method is useful when trying to select rows immediately after loading data without
   * using a $timeout/$interval, e.g.:
   *
   *   $scope.gridOptions.data =  someData;
   *   $scope.gridApi.grid.modifyRows($scope.gridOptions.data);
   *   $scope.gridApi.selection.selectRow($scope.gridOptions.data[0]);
   *
   * OR to persist row selection after data update (e.g. rows selected, new data loaded, want
   * originally selected rows to be re-selected))
   */
  Grid.prototype.modifyRows = function modifyRows(newRawData) {
    var self = this;
    var oldRows = self.rows.slice(0);
    var oldRowHash = self.rowHashMap || self.createRowHashMap();
    var allRowsSelected = true;
    self.rowHashMap = self.createRowHashMap();
    self.rows.length = 0;

    newRawData.forEach( function( newEntity, i ) {
      var newRow, oldRow;

      if ( self.options.enableRowHashing ) {
        // if hashing is enabled, then this row will be in the hash if we already know about it
        oldRow = oldRowHash.get( newEntity );
      } else {
        // otherwise, manually search the oldRows to see if we can find this row
        oldRow = self.getRow(newEntity, oldRows);
      }

      // update newRow to have an entity
      if ( oldRow ) {
        newRow = oldRow;
        newRow.entity = newEntity;
      }

      // if we didn't find the row, it must be new, so create it
      if ( !newRow ) {
        newRow = self.processRowBuilders(new GridRow(newEntity, i, self));
      }

      self.rows.push( newRow );
      self.rowHashMap.put( newEntity, newRow );
      if (!newRow.isSelected) {
        allRowsSelected = false;
      }
    });

    if (self.selection && self.rows.length) {
      self.selection.selectAll = allRowsSelected;
    }

    self.assignTypes();

    var p1 = $q.when(self.processRowsProcessors(self.rows))
      .then(function (renderableRows) {
        return self.setVisibleRows(renderableRows);
      }).catch(angular.noop);

    var p2 = $q.when(self.processColumnsProcessors(self.columns))
      .then(function (renderableColumns) {
        return self.setVisibleColumns(renderableColumns);
      }).catch(angular.noop);

    return $q.all([p1, p2]);
  };


  /**
   * Private Undocumented Method
   * @name addRows
   * @methodOf ui.grid.class:Grid
   * @description adds the newRawData array of rows to the grid and calls all registered
   * rowBuilders. this keyword will reference the grid
   */
  Grid.prototype.addRows = function addRows(newRawData) {
    var self = this,
      existingRowCount = self.rows.length;

    for (var i = 0; i < newRawData.length; i++) {
      var newRow = self.processRowBuilders(new GridRow(newRawData[i], i + existingRowCount, self));

      if (self.options.enableRowHashing) {
        var found = self.rowHashMap.get(newRow.entity);
        if (found) {
          found.row = newRow;
        }
      }

      self.rows.push(newRow);
    }
  };

  /**
   * @ngdoc function
   * @name processRowBuilders
   * @methodOf ui.grid.class:Grid
   * @description processes all RowBuilders for the gridRow
   * @param {GridRow} gridRow reference to gridRow
   * @returns {GridRow} the gridRow with all additional behavior added
   */
  Grid.prototype.processRowBuilders = function processRowBuilders(gridRow) {
    var self = this;

    self.rowBuilders.forEach(function (builder) {
      builder.call(self, gridRow, self.options);
    });

    return gridRow;
  };

  /**
   * @ngdoc function
   * @name registerStyleComputation
   * @methodOf ui.grid.class:Grid
   * @description registered a styleComputation function
   *
   * If the function returns a value it will be appended into the grid's `<style>` block
   * @param {function($scope)} styleComputationInfo function
   */
  Grid.prototype.registerStyleComputation = function registerStyleComputation(styleComputationInfo) {
    this.styleComputations.push(styleComputationInfo);
  };

  /**
   * @ngdoc function
   * @name registerRowsProcessor
   * @methodOf ui.grid.class:Grid
   * @description
   *
   * Register a "rows processor" function. When the rows are updated,
   * the grid calls each registered "rows processor", which has a chance
   * to alter the set of rows (sorting, etc) as long as the count is not
   * modified.
   *
   * @param {function(renderedRowsToProcess, columns )} processor rows processor function, which
   * is run in the context of the grid (i.e. this for the function will be the grid), and must
   * return the updated rows list, which is passed to the next processor in the chain
   * @param {number} priority the priority of this processor.  In general we try to do them in 100s to leave room
   * for other people to inject rows processors at intermediate priorities.  Lower priority rowsProcessors run earlier.
   *
   * At present all rows visible is running at 50, filter is running at 100, sort is at 200, grouping at 400, selectable rows at 500, pagination at 900 (pagination will generally want to be last)
   *
   */
  Grid.prototype.registerRowsProcessor = function registerRowsProcessor(processor, priority) {
    if (!angular.isFunction(processor)) {
      throw 'Attempt to register non-function rows processor: ' + processor;
    }

    this.rowsProcessors.push({processor: processor, priority: priority});
    this.rowsProcessors.sort(function sortByPriority( a, b ) {
      return a.priority - b.priority;
    });
  };

  /**
   * @ngdoc function
   * @name removeRowsProcessor
   * @methodOf ui.grid.class:Grid
   * @param {function(renderableRows)} processor processor function
   * @description Remove a registered rows processor
   */
  Grid.prototype.removeRowsProcessor = function removeRowsProcessor(processor) {
    var idx = -1;
    this.rowsProcessors.forEach(function(rowsProcessor, index) {
      if ( rowsProcessor.processor === processor ) {
        idx = index;
      }
    });

    if ( idx !== -1 ) {
      this.rowsProcessors.splice(idx, 1);
    }
  };

  /**
   * Private Undocumented Method
   * @name processRowsProcessors
   * @methodOf ui.grid.class:Grid
   * @param {Array[GridRow]} renderableRows The array of "renderable" rows
   * @description Run all the registered rows processors on the array of renderable rows
   */
  Grid.prototype.processRowsProcessors = function processRowsProcessors(renderableRows) {
    var self = this;

    // Create a shallow copy of the rows so that we can safely sort them without altering the original grid.rows sort order
    var myRenderableRows = renderableRows.slice(0);

    // Return myRenderableRows with no processing if we have no rows processors
    if (self.rowsProcessors.length === 0) {
      return $q.when(myRenderableRows);
    }

    // Counter for iterating through rows processors
    var i = 0;

    // Promise for when we're done with all the processors
    var finished = $q.defer();

    // This function will call the processor in self.rowsProcessors at index 'i', and then
    //   when done will call the next processor in the list, using the output from the processor
    //   at i as the argument for 'renderedRowsToProcess' on the next iteration.
    //
    //   If we're at the end of the list of processors, we resolve our 'finished' callback with
    //   the result.
    function startProcessor(i, renderedRowsToProcess) {
      // Get the processor at 'i'
      var processor = self.rowsProcessors[i].processor;

      // Call the processor, passing in the rows to process and the current columns
      //   (note: it's wrapped in $q.when() in case the processor does not return a promise)
      return $q.when( processor.call(self, renderedRowsToProcess, self.columns) )
        .then(function handleProcessedRows(processedRows) {
          // Check for errors
          if (!processedRows) {
            throw "Processor at index " + i + " did not return a set of renderable rows";
          }

          if (!angular.isArray(processedRows)) {
            throw "Processor at index " + i + " did not return an array";
          }

          // Processor is done, increment the counter
          i++;

          // If we're not done with the processors, call the next one
          if (i <= self.rowsProcessors.length - 1) {
            return startProcessor(i, processedRows);
          }
          // We're done! Resolve the 'finished' promise
          else {
            finished.resolve(processedRows);
          }
        }).catch(function(error) {
          throw error;
        });
    }

    // Start on the first processor
    startProcessor(0, myRenderableRows);

    return finished.promise;
  };

  Grid.prototype.setVisibleRows = function setVisibleRows(rows) {
    var self = this;

    // Reset all the render container row caches
    for (var i in self.renderContainers) {
      var container = self.renderContainers[i];

      container.canvasHeightShouldUpdate = true;

      if ( typeof(container.visibleRowCache) === 'undefined' ) {
        container.visibleRowCache = [];
      } else {
        container.visibleRowCache.length = 0;
      }
    }

    // rows.forEach(function (row) {
    for (var ri = 0; ri < rows.length; ri++) {
      var row = rows[ri];

      var targetContainer = (typeof(row.renderContainer) !== 'undefined' && row.renderContainer) ? row.renderContainer : 'body';

      // If the row is visible
      if (row.visible) {
        self.renderContainers[targetContainer].visibleRowCache.push(row);
      }
    }
    self.api.core.raise.rowsVisibleChanged(this.api);
    self.api.core.raise.rowsRendered(this.api);
  };

  /**
   * @ngdoc function
   * @name registerColumnsProcessor
   * @methodOf ui.grid.class:Grid
   * @param {function(renderedColumnsToProcess, rows)} processor column processor function, which
   * is run in the context of the grid (i.e. this for the function will be the grid), and
   * which must return an updated renderedColumnsToProcess which can be passed to the next processor
   * in the chain
   * @param {number} priority the priority of this processor.  In general we try to do them in 100s to leave room
   * for other people to inject columns processors at intermediate priorities.  Lower priority columnsProcessors run earlier.
   *
   * At present all rows visible is running at 50, filter is running at 100, sort is at 200, grouping at 400, selectable rows at 500, pagination at 900 (pagination will generally want to be last)
   * @description

     Register a "columns processor" function. When the columns are updated,
     the grid calls each registered "columns processor", which has a chance
     to alter the set of columns, as long as the count is not modified.
   */
  Grid.prototype.registerColumnsProcessor = function registerColumnsProcessor(processor, priority) {
    if (!angular.isFunction(processor)) {
      throw 'Attempt to register non-function rows processor: ' + processor;
    }

    this.columnsProcessors.push({processor: processor, priority: priority});
    this.columnsProcessors.sort(function sortByPriority( a, b ) {
      return a.priority - b.priority;
    });
  };

  Grid.prototype.removeColumnsProcessor = function removeColumnsProcessor(processor) {
    var idx = this.columnsProcessors.indexOf(processor);

    if (typeof(idx) !== 'undefined' && idx !== undefined) {
      this.columnsProcessors.splice(idx, 1);
    }
  };

  Grid.prototype.processColumnsProcessors = function processColumnsProcessors(renderableColumns) {
    var self = this;

    // Create a shallow copy of the rows so that we can safely sort them without altering the original grid.rows sort order
    var myRenderableColumns = renderableColumns.slice(0);

    // Return myRenderableRows with no processing if we have no rows processors
    if (self.columnsProcessors.length === 0) {
      return $q.when(myRenderableColumns);
    }

    // Promise for when we're done with all the processors
    var finished = $q.defer();

    // This function will call the processor in self.rowsProcessors at index 'i', and then
    //   when done will call the next processor in the list, using the output from the processor
    //   at i as the argument for 'renderedRowsToProcess' on the next iteration.
    //
    //   If we're at the end of the list of processors, we resolve our 'finished' callback with
    //   the result.
    function startProcessor(i, renderedColumnsToProcess) {
      // Get the processor at 'i'
      var processor = self.columnsProcessors[i].processor;

      // Call the processor, passing in the rows to process and the current columns
      //   (note: it's wrapped in $q.when() in case the processor does not return a promise)
      return $q.when( processor.call(self, renderedColumnsToProcess, self.rows) )
        .then(function handleProcessedRows(processedColumns) {
          // Check for errors
          if (!processedColumns) {
            throw "Processor at index " + i + " did not return a set of renderable rows";
          }

          if (!angular.isArray(processedColumns)) {
            throw "Processor at index " + i + " did not return an array";
          }

          // Processor is done, increment the counter
          i++;

          // If we're not done with the processors, call the next one
          if (i <= self.columnsProcessors.length - 1) {
            return startProcessor(i, myRenderableColumns);
          }
          // We're done! Resolve the 'finished' promise
          else {
            finished.resolve(myRenderableColumns);
          }
        }).catch(angular.noop);
    }

    // Start on the first processor
    startProcessor(0, myRenderableColumns);

    return finished.promise;
  };

  Grid.prototype.setVisibleColumns = function setVisibleColumns(columns) {
    // gridUtil.logDebug('setVisibleColumns');

    var self = this;

    // Reset all the render container row caches
    for (var i in self.renderContainers) {
      var container = self.renderContainers[i];

      container.visibleColumnCache.length = 0;
    }

    for (var ci = 0; ci < columns.length; ci++) {
      var column = columns[ci];

      // If the column is visible
      if (column.visible) {
        // If the column has a container specified
        if (typeof(column.renderContainer) !== 'undefined' && column.renderContainer) {
          self.renderContainers[column.renderContainer].visibleColumnCache.push(column);
        }
        // If not, put it into the body container
        else {
          self.renderContainers.body.visibleColumnCache.push(column);
        }
      }
    }
  };

  /**
   * @ngdoc function
   * @name handleWindowResize
   * @methodOf ui.grid.class:Grid
   * @description Triggered when the browser window resizes; automatically resizes the grid
   * @returns {Promise} A resolved promise once the window resize has completed.
   */
  Grid.prototype.handleWindowResize = function handleWindowResize($event) {
    var self = this;

    self.gridWidth = gridUtil.elementWidth(self.element);
    self.gridHeight = gridUtil.elementHeight(self.element);

    return self.queueRefresh();
  };

  /**
   * @ngdoc function
   * @name queueRefresh
   * @methodOf ui.grid.class:Grid
   * @description queues a grid refreshCanvas, a way of debouncing all the refreshes we might otherwise issue
   */
  Grid.prototype.queueRefresh = function queueRefresh() {
    var self = this;

    if (self.refreshCanceller) {
      $timeout.cancel(self.refreshCanceller);
    }

    self.refreshCanceller = $timeout(function () {
      self.refreshCanvas(true);
    });

    self.refreshCanceller.then(function () {
      self.refreshCanceller = null;
    }).catch(angular.noop);

    return self.refreshCanceller;
  };


  /**
   * @ngdoc function
   * @name queueGridRefresh
   * @methodOf ui.grid.class:Grid
   * @description queues a grid refresh, a way of debouncing all the refreshes we might otherwise issue
   */
  Grid.prototype.queueGridRefresh = function queueGridRefresh() {
    var self = this;

    if (self.gridRefreshCanceller) {
      $timeout.cancel(self.gridRefreshCanceller);
    }

    self.gridRefreshCanceller = $timeout(function () {
      self.refresh(true);
    });

    self.gridRefreshCanceller.then(function () {
      self.gridRefreshCanceller = null;
    }).catch(angular.noop);

    return self.gridRefreshCanceller;
  };


  /**
   * @ngdoc function
   * @name updateCanvasHeight
   * @methodOf ui.grid.class:Grid
   * @description flags all render containers to update their canvas height
   */
  Grid.prototype.updateCanvasHeight = function updateCanvasHeight() {
    var self = this;

    for (var containerId in self.renderContainers) {
      if (self.renderContainers.hasOwnProperty(containerId)) {
        var container = self.renderContainers[containerId];
        container.canvasHeightShouldUpdate = true;
      }
    }
  };

  /**
   * @ngdoc function
   * @name buildStyles
   * @methodOf ui.grid.class:Grid
   * @description calls each styleComputation function
   */
  Grid.prototype.buildStyles = function buildStyles() {
    var self = this;

    // gridUtil.logDebug('buildStyles');

    self.customStyles = '';

    self.styleComputations
      .sort(function(a, b) {
        if (a.priority === null) { return 1; }
        if (b.priority === null) { return -1; }
        if (a.priority === null && b.priority === null) { return 0; }
        return a.priority - b.priority;
      })
      .forEach(function (compInfo) {
        // this used to provide $scope as a second parameter, but I couldn't find any
        // style builders that used it, so removed it as part of moving to grid from controller
        var ret = compInfo.func.call(self);

        if (angular.isString(ret)) {
          self.customStyles += '\n' + ret;
        }
      });
  };


  Grid.prototype.minColumnsToRender = function minColumnsToRender() {
    var self = this;
    var viewport = this.getViewportWidth();

    var min = 0;
    var totalWidth = 0;
    self.columns.forEach(function(col, i) {
      if (totalWidth < viewport) {
        totalWidth += col.drawnWidth;
        min++;
      }
      else {
        var currWidth = 0;
        for (var j = i; j >= i - min; j--) {
          currWidth += self.columns[j].drawnWidth;
        }
        if (currWidth < viewport) {
          min++;
        }
      }
    });

    return min;
  };

  Grid.prototype.getBodyHeight = function getBodyHeight() {
    return this.getViewportHeight();
  };

  // NOTE: viewport drawable height is the height of the grid minus the header row height (including any border)
  // TODO(c0bra): account for footer height
  Grid.prototype.getViewportHeight = function getViewportHeight() {
    var self = this;

    var viewPortHeight = this.gridHeight - this.headerHeight - this.footerHeight;

    // Account for native horizontal scrollbar, if present
    // if (typeof(this.horizontalScrollbarHeight) !== 'undefined' && this.horizontalScrollbarHeight !== undefined && this.horizontalScrollbarHeight > 0) {
    //   viewPortHeight = viewPortHeight - this.horizontalScrollbarHeight;
    // }

    var adjustment = self.getViewportAdjustment();

    viewPortHeight = viewPortHeight + adjustment.height;

    // gridUtil.logDebug('viewPortHeight', viewPortHeight);

    return viewPortHeight;
  };

  Grid.prototype.getViewportWidth = function getViewportWidth() {
    var self = this;

    var viewPortWidth = this.gridWidth;

    // if (typeof(this.verticalScrollbarWidth) !== 'undefined' && this.verticalScrollbarWidth !== undefined && this.verticalScrollbarWidth > 0) {
    //   viewPortWidth = viewPortWidth - this.verticalScrollbarWidth;
    // }

    var adjustment = self.getViewportAdjustment();

    viewPortWidth = viewPortWidth + adjustment.width;

    // gridUtil.logDebug('getviewPortWidth', viewPortWidth);

    return viewPortWidth;
  };

  Grid.prototype.getHeaderViewportWidth = function getHeaderViewportWidth() {
    return this.getViewportWidth();
  };

  Grid.prototype.addVerticalScrollSync = function (containerId, callBackFn) {
    this.verticalScrollSyncCallBackFns[containerId] = callBackFn;
  };

  Grid.prototype.addHorizontalScrollSync = function (containerId, callBackFn) {
    this.horizontalScrollSyncCallBackFns[containerId] = callBackFn;
  };

/**
 * Scroll needed containers by calling their ScrollSyncs
 * @param sourceContainerId the containerId that has already set it's top/left.
 *         can be empty string which means all containers need to set top/left
 * @param scrollEvent
 */
  Grid.prototype.scrollContainers = function (sourceContainerId, scrollEvent) {
    if (scrollEvent.y) {
      // default for no container Id (ex. mousewheel means that all containers must set scrollTop/Left)
      var verts = ['body','left', 'right'];

      this.flagScrollingVertically(scrollEvent);

      if (sourceContainerId === 'body') {
        verts = ['left', 'right'];
      }
      else if (sourceContainerId === 'left') {
        verts = ['body', 'right'];
      }
      else if (sourceContainerId === 'right') {
        verts = ['body', 'left'];
      }

      for (var i = 0; i < verts.length; i++) {
        var id = verts[i];
        if (this.verticalScrollSyncCallBackFns[id]) {
          this.verticalScrollSyncCallBackFns[id](scrollEvent);
        }
      }

    }

    if (scrollEvent.x) {
      // default for no container Id (ex. mousewheel means that all containers must set scrollTop/Left)
      var horizs = ['body','bodyheader', 'bodyfooter'];

      this.flagScrollingHorizontally(scrollEvent);
      if (sourceContainerId === 'body') {
        horizs = ['bodyheader', 'bodyfooter'];
      }

      for (var j = 0; j < horizs.length; j++) {
        var idh = horizs[j];
        if (this.horizontalScrollSyncCallBackFns[idh]) {
          this.horizontalScrollSyncCallBackFns[idh](scrollEvent);
        }
      }
    }
  };

  Grid.prototype.registerViewportAdjuster = function registerViewportAdjuster(func) {
    this.viewportAdjusters.push(func);
  };

  Grid.prototype.removeViewportAdjuster = function registerViewportAdjuster(func) {
    var idx = this.viewportAdjusters.indexOf(func);

    if (typeof(idx) !== 'undefined' && idx !== undefined) {
      this.viewportAdjusters.splice(idx, 1);
    }
  };

  Grid.prototype.getViewportAdjustment = function getViewportAdjustment() {
    var self = this;

    var adjustment = { height: 0, width: 0 };

    self.viewportAdjusters.forEach(function (func) {
      adjustment = func.call(this, adjustment);
    });

    return adjustment;
  };

  Grid.prototype.getVisibleRowCount = function getVisibleRowCount() {
    // return this.visibleRowCache.length;
    return this.renderContainers.body.visibleRowCache.length;
  };

   Grid.prototype.getVisibleRows = function getVisibleRows() {
    return this.renderContainers.body.visibleRowCache;
   };

  Grid.prototype.getVisibleColumnCount = function getVisibleColumnCount() {
    // return this.visibleRowCache.length;
    return this.renderContainers.body.visibleColumnCache.length;
  };


  Grid.prototype.searchRows = function searchRows(renderableRows) {
    return rowSearcher.search(this, renderableRows, this.columns);
  };

  Grid.prototype.sortByColumn = function sortByColumn(renderableRows) {
    return rowSorter.sort(this, renderableRows, this.columns);
  };

  /**
   * @ngdoc function
   * @name getCellValue
   * @methodOf ui.grid.class:Grid
   * @description Gets the value of a cell for a particular row and column
   * @param {GridRow} row Row to access
   * @param {GridColumn} col Column to access
   */
  Grid.prototype.getCellValue = function getCellValue(row, col) {
    if ( typeof(row.entity[ '$$' + col.uid ]) !== 'undefined' ) {
      return row.entity[ '$$' + col.uid].rendered;
    }
    else if (this.options.flatEntityAccess && typeof(col.field) !== 'undefined' ) {
      return row.entity[col.field];
    }
    else {
      if (!col.cellValueGetterCache) {
        col.cellValueGetterCache = $parse(row.getEntityQualifiedColField(col));
      }

      return col.cellValueGetterCache(row);
    }
  };

  /**
   * @ngdoc function
   * @name getCellDisplayValue
   * @methodOf ui.grid.class:Grid
   * @description Gets the displayed value of a cell after applying any the `cellFilter`
   * @param {GridRow} row Row to access
   * @param {GridColumn} col Column to access
   */
  Grid.prototype.getCellDisplayValue = function getCellDisplayValue(row, col) {
    if ( !col.cellDisplayGetterCache ) {
      var custom_filter = col.cellFilter ? " | " + col.cellFilter : "";

      if (typeof(row.entity['$$' + col.uid]) !== 'undefined') {
        col.cellDisplayGetterCache = $parse(row.entity['$$' + col.uid].rendered + custom_filter);
      }
      else if (this.options.flatEntityAccess && typeof(col.field) !== 'undefined') {
        var colField = col.field.replace(/(')|(\\)/g, "\\$&");

        col.cellDisplayGetterCache = $parse('entity[\'' + colField + '\']' + custom_filter);
      }
      else {
        col.cellDisplayGetterCache = $parse(row.getEntityQualifiedColField(col) + custom_filter);
      }
    }

    var rowWithCol = angular.extend({}, row, {col: col});

    return col.cellDisplayGetterCache(rowWithCol);
  };


  Grid.prototype.getNextColumnSortPriority = function getNextColumnSortPriority() {
    var self = this,
        p = 0;

    self.columns.forEach(function (col) {
      if (col.sort && col.sort.priority !== undefined && col.sort.priority >= p) {
        p = col.sort.priority + 1;
      }
    });

    return p;
  };

  /**
   * @ngdoc function
   * @name resetColumnSorting
   * @methodOf ui.grid.class:Grid
   * @description Return the columns that the grid is currently being sorted by
   * @param {GridColumn} [excludedColumn] Optional GridColumn to exclude from having its sorting reset
   */
  Grid.prototype.resetColumnSorting = function resetColumnSorting(excludeCol) {
    var self = this;

    self.columns.forEach(function (col) {
      if (col !== excludeCol && !col.suppressRemoveSort) {
        col.sort = {};
      }
    });
  };

  /**
   * @ngdoc function
   * @name getColumnSorting
   * @methodOf ui.grid.class:Grid
   * @description Return the columns that the grid is currently being sorted by
   * @returns {Array[GridColumn]} An array of GridColumn objects
   */
  Grid.prototype.getColumnSorting = function getColumnSorting() {
    var self = this;

    var sortedCols = [], myCols;

    // Iterate through all the columns, sorted by priority
    // Make local copy of column list, because sorting is in-place and we do not want to
    // change the original sequence of columns
    myCols = self.columns.slice(0);
    myCols.sort(rowSorter.prioritySort).forEach(function (col) {
      if (col.sort && typeof(col.sort.direction) !== 'undefined' && col.sort.direction && (col.sort.direction === uiGridConstants.ASC || col.sort.direction === uiGridConstants.DESC)) {
        sortedCols.push(col);
      }
    });

    return sortedCols;
  };

  /**
   * @ngdoc function
   * @name sortColumn
   * @methodOf ui.grid.class:Grid
   * @description Set the sorting on a given column, optionally resetting any existing sorting on the Grid.
   * Emits the sortChanged event whenever the sort criteria are changed.
   * @param {GridColumn} column Column to set the sorting on
   * @param {uiGridConstants.ASC|uiGridConstants.DESC} [direction] Direction to sort by, either descending or ascending.
   *   If not provided, the column will iterate through the sort directions
   *   specified in the {@link ui.grid.class:GridOptions.columnDef#sortDirectionCycle sortDirectionCycle} attribute.
   * @param {boolean} [add] Add this column to the sorting. If not provided or set to `false`, the Grid will reset any existing sorting and sort
   *   by this column only
   * @returns {Promise} A resolved promise that supplies the column.
   */

  Grid.prototype.sortColumn = function sortColumn(column, directionOrAdd, add) {
    var self = this,
        direction = null;

    if (typeof(column) === 'undefined' || !column) {
      throw new Error('No column parameter provided');
    }

    // Second argument can either be a direction or whether to add this column to the existing sort.
    //   If it's a boolean, it's an add, otherwise, it's a direction
    if (typeof(directionOrAdd) === 'boolean') {
      add = directionOrAdd;
    }
    else {
      direction = directionOrAdd;
    }

    if (!add) {
      self.resetColumnSorting(column);
      column.sort.priority = undefined;
      // Get the actual priority since there may be columns which have suppressRemoveSort set
      column.sort.priority = self.getNextColumnSortPriority();
    }
    else if (column.sort.priority === undefined) {
      column.sort.priority = self.getNextColumnSortPriority();
    }

    if (!direction) {
      // Find the current position in the cycle (or -1).
      var i = column.sortDirectionCycle.indexOf(column.sort && column.sort.direction ? column.sort.direction : null);
      // Proceed to the next position in the cycle (or start at the beginning).
      i = (i+1) % column.sortDirectionCycle.length;
      // If suppressRemoveSort is set, and the next position in the cycle would
      // remove the sort, skip it.
      if (column.colDef && column.suppressRemoveSort && !column.sortDirectionCycle[i]) {
        i = (i+1) % column.sortDirectionCycle.length;
      }

      if (column.sortDirectionCycle[i]) {
        column.sort.direction = column.sortDirectionCycle[i];
      } else {
        removeSortOfColumn(column, self);
      }
    }
    else {
      column.sort.direction = direction;
    }

    self.api.core.raise.sortChanged( self, self.getColumnSorting() );

    return $q.when(column);
  };

  var removeSortOfColumn = function removeSortOfColumn(column, grid) {
    // Decrease priority for every col where priority is higher than the removed sort's priority.
    grid.columns.forEach(function (col) {
      if (col.sort && col.sort.priority !== undefined && col.sort.priority > column.sort.priority) {
        col.sort.priority -= 1;
      }
    });

    // Remove sort
    column.sort = {};
  };

  /**
   * communicate to outside world that we are done with initial rendering
   */
  Grid.prototype.renderingComplete = function() {
    if (angular.isFunction(this.options.onRegisterApi)) {
      this.options.onRegisterApi(this.api);
    }
    this.api.core.raise.renderingComplete( this.api );
  };

  Grid.prototype.createRowHashMap = function createRowHashMap() {
    var self = this;

    var hashMap = new RowHashMap();
    hashMap.grid = self;

    return hashMap;
  };


  /**
   * @ngdoc function
   * @name refresh
   * @methodOf ui.grid.class:Grid
   * @description Refresh the rendered grid on screen.
   * @param {boolean} [rowsAltered] Optional flag for refreshing when the number of rows has changed.
   */
  Grid.prototype.refresh = function refresh(rowsAltered) {
    var self = this;

    var p1 = self.processRowsProcessors(self.rows).then(function (renderableRows) {
      self.setVisibleRows(renderableRows);
    }).catch(angular.noop);

    var p2 = self.processColumnsProcessors(self.columns).then(function (renderableColumns) {
      self.setVisibleColumns(renderableColumns);
    }).catch(angular.noop);

    return $q.all([p1, p2]).then(function () {
      self.refreshCanvas(true);
      self.redrawInPlace(rowsAltered);
    }).catch(angular.noop);
  };

  /**
   * @ngdoc function
   * @name refreshRows
   * @methodOf ui.grid.class:Grid
   * @description Refresh the rendered rows on screen?  Note: not functional at present
   * @returns {promise} promise that is resolved when render completes?
   *
   */
  Grid.prototype.refreshRows = function refreshRows() {
    var self = this;

    return self.processRowsProcessors(self.rows)
      .then(function (renderableRows) {
        self.setVisibleRows(renderableRows);

        self.redrawInPlace();

        self.refreshCanvas( true );
      }).catch(angular.noop);
  };

  /**
   * @ngdoc function
   * @name refreshCanvas
   * @methodOf ui.grid.class:Grid
   * @description Builds all styles and recalculates much of the grid sizing
   * @param {object} buildStyles optional parameter.  Use TBD
   * @returns {promise} promise that is resolved when the canvas
   * has been refreshed
   *
   */
  Grid.prototype.refreshCanvas = function(buildStyles) {
    var self = this;

    // gridUtil.logDebug('refreshCanvas');

    var p = $q.defer();

    // Get all the header heights
    var containerHeadersToRecalc = [];
    for (var containerId in self.renderContainers) {
      if (self.renderContainers.hasOwnProperty(containerId)) {
        var container = self.renderContainers[containerId];

        // Skip containers that have no canvasWidth set yet
        if (container.canvasWidth === null || isNaN(container.canvasWidth)) {
          continue;
        }

        if (container.header || container.headerCanvas) {
          container.explicitHeaderHeight = container.explicitHeaderHeight || null;
          container.explicitHeaderCanvasHeight = container.explicitHeaderCanvasHeight || null;

          containerHeadersToRecalc.push(container);
        }
      }
    }

    // Build the styles without the explicit header heights
    if (buildStyles) {
      self.buildStyles();
    }

    /*
     *
     * Here we loop through the headers, measuring each element as well as any header "canvas" it has within it.
     *
     * If any header is less than the largest header height, it will be resized to that so that we don't have headers
     * with different heights, which looks like a rendering problem
     *
     * We'll do the same thing with the header canvases, and give the header CELLS an explicit height if their canvas
     * is smaller than the largest canvas height. That was header cells without extra controls like filtering don't
     * appear shorter than other cells.
     *
     */
    if (containerHeadersToRecalc.length > 0) {
      // Putting in a timeout as it's not calculating after the grid element is rendered and filled out
      $timeout(function() {
        // var oldHeaderHeight = self.grid.headerHeight;
        // self.grid.headerHeight = gridUtil.outerElementHeight(self.header);

        var rebuildStyles = false;

        // Get all the header heights
        var maxHeaderHeight = 0;
        var maxHeaderCanvasHeight = 0;
        var i, container;
        var getHeight = function(oldVal, newVal) {
          if ( oldVal !== newVal) {
            rebuildStyles = true;
          }
          return newVal;
        };
        for (i = 0; i < containerHeadersToRecalc.length; i++) {
          container = containerHeadersToRecalc[i];

          // Skip containers that have no canvasWidth set yet
          if (container.canvasWidth === null || isNaN(container.canvasWidth)) {
            continue;
          }

          if (container.header) {
            var headerHeight = container.headerHeight = getHeight(container.headerHeight, gridUtil.outerElementHeight(container.header));

            // Get the "inner" header height, that is the height minus the top and bottom borders, if present. We'll use it to make sure all the headers have a consistent height
            var topBorder = gridUtil.getBorderSize(container.header, 'top');
            var bottomBorder = gridUtil.getBorderSize(container.header, 'bottom');
            var innerHeaderHeight = parseInt(headerHeight - topBorder - bottomBorder, 10);

            innerHeaderHeight  = innerHeaderHeight < 0 ? 0 : innerHeaderHeight;

            container.innerHeaderHeight = innerHeaderHeight;

            // If the header doesn't have an explicit height set, save the largest header height for use later
            //   Explicit header heights are based off of the max we are calculating here. We never want to base the max on something we're setting explicitly
            if (!container.explicitHeaderHeight && innerHeaderHeight > maxHeaderHeight) {
              maxHeaderHeight = innerHeaderHeight;
            }
          }

          if (container.headerCanvas) {
            var headerCanvasHeight = container.headerCanvasHeight = getHeight(container.headerCanvasHeight, parseInt(gridUtil.outerElementHeight(container.headerCanvas), 10));


            // If the header doesn't have an explicit canvas height, save the largest header canvas height for use later
            //   Explicit header heights are based off of the max we are calculating here. We never want to base the max on something we're setting explicitly
            if (!container.explicitHeaderCanvasHeight && headerCanvasHeight > maxHeaderCanvasHeight) {
              maxHeaderCanvasHeight = headerCanvasHeight;
            }
          }
        }

        // Go through all the headers
        for (i = 0; i < containerHeadersToRecalc.length; i++) {
          container = containerHeadersToRecalc[i];

          /* If:
              1. We have a max header height
              2. This container has a header height defined
              3. And either this container has an explicit header height set, OR its header height is less than the max

              then:

              Give this container's header an explicit height so it will line up with the tallest header
          */
          if (
            maxHeaderHeight > 0 && typeof(container.headerHeight) !== 'undefined' && container.headerHeight !== null &&
            (container.explicitHeaderHeight || container.headerHeight < maxHeaderHeight)
          ) {
            container.explicitHeaderHeight = getHeight(container.explicitHeaderHeight, maxHeaderHeight);
          }

          // Do the same as above except for the header canvas
          if (
            maxHeaderCanvasHeight > 0 && typeof(container.headerCanvasHeight) !== 'undefined' && container.headerCanvasHeight !== null &&
            (container.explicitHeaderCanvasHeight || container.headerCanvasHeight < maxHeaderCanvasHeight)
          ) {
            container.explicitHeaderCanvasHeight = getHeight(container.explicitHeaderCanvasHeight, maxHeaderCanvasHeight);
          }
        }

        // Rebuild styles if the header height has changed
        //   The header height is used in body/viewport calculations and those are then used in other styles so we need it to be available
        if (buildStyles && rebuildStyles) {
          self.buildStyles();
        }

        p.resolve();
      });
    }
    else {
      // Timeout still needs to be here to trigger digest after styles have been rebuilt
      $timeout(function() {
        p.resolve();
      });
    }

    return p.promise;
  };

  function getPrevScrollValue(rowsAdded, prevScrollVal) {
    return rowsAdded || prevScrollVal > 0 ? prevScrollVal : null;
  }

  /**
   * @ngdoc function
   * @name redrawInPlace
   * @methodOf ui.grid.class:Grid
   * @description Redraw the rows and columns based on our current scroll position
   * @param {boolean} [rowsAdded] Optional to indicate rows are added and the scroll percentage must be recalculated
   *
   */
  Grid.prototype.redrawInPlace = function redrawInPlace(rowsAdded) {
    // gridUtil.logDebug('redrawInPlace');

    var self = this;

    for (var i in self.renderContainers) {
      var container = self.renderContainers[i],
        prevScrollTop = getPrevScrollValue(rowsAdded, container.prevScrollTop),
        prevScrollLeft = getPrevScrollValue(rowsAdded, container.prevScrollLeft),
        prevScrolltopPercentage = rowsAdded || prevScrollTop > 0 ? null : container.prevScrolltopPercentage,
        prevScrollleftPercentage = rowsAdded || prevScrollLeft > 0 ? null : container.prevScrollleftPercentage;

      // gridUtil.logDebug('redrawing container', i);

      container.adjustRows(prevScrollTop, prevScrolltopPercentage);
      container.adjustColumns(prevScrollLeft, prevScrollleftPercentage);
    }
  };

    /**
     * @ngdoc function
     * @name hasLeftContainerColumns
     * @methodOf ui.grid.class:Grid
     * @description returns true if leftContainer has columns
     */
    Grid.prototype.hasLeftContainerColumns = function () {
      return this.hasLeftContainer() && this.renderContainers.left.renderedColumns.length > 0;
    };

    /**
     * @ngdoc function
     * @name hasRightContainerColumns
     * @methodOf ui.grid.class:Grid
     * @description returns true if rightContainer has columns
     */
    Grid.prototype.hasRightContainerColumns = function () {
      return this.hasRightContainer() && this.renderContainers.right.renderedColumns.length > 0;
    };

    // Turn the scroll position into a percentage and make it an argument for a scroll event
    function getScrollPercentage(scrollPixels, scrollLength) {
      var percentage = scrollPixels / scrollLength;

      // if the percentage is greater than 1, set it to 1
      return percentage <= 1 ? percentage : 1;
    }

    // Only returns the scroll Y position if the percentage is different from the previous
    function getScrollY(scrollPixels, scrollLength, prevScrolltopPercentage) {
      var scrollPercentage = getScrollPercentage(scrollPixels, scrollLength);

      if (scrollPercentage !== prevScrolltopPercentage) {
        return { percentage: getScrollPercentage(scrollPixels, scrollLength) };
      }

      return undefined;
    }

    // Only returns the scroll X position if the percentage is different from the previous
    function getScrollX(horizScrollPixels, horizScrollLength, prevScrollleftPercentage) {
      var horizPercentage = horizScrollPixels / horizScrollLength;
      horizPercentage = (horizPercentage > 1) ? 1 : horizPercentage;

      if (horizPercentage !== prevScrollleftPercentage) {
        return { percentage: horizPercentage  };
      }

      return undefined;
    }

    /**
     * @ngdoc method
     * @methodOf  ui.grid.class:Grid
     * @name scrollToIfNecessary
     * @description Scrolls the grid to make a certain row and column combo visible,
     *   in the case that it is not completely visible on the screen already.
     * @param {GridRow} gridRow row to make visible
     * @param {GridColumn} gridCol column to make visible
     * @returns {promise} a promise that is resolved when scrolling is complete
     */
    Grid.prototype.scrollToIfNecessary = function (gridRow, gridCol) {
      var self = this;

      var scrollEvent = new ScrollEvent(self, 'uiGrid.scrollToIfNecessary');

      // Alias the visible row and column caches
      var visRowCache = self.renderContainers.body.visibleRowCache;
      var visColCache = self.renderContainers.body.visibleColumnCache;

      /*-- Get the top, left, right, and bottom "scrolled" edges of the grid --*/

      // The top boundary is the current Y scroll position
      var topBound = self.renderContainers.body.prevScrollTop;

      // Don't the let top boundary be less than 0
      topBound = (topBound < 0) ? 0 : topBound;

      // The left boundary is the current X scroll position
      var leftBound = self.renderContainers.body.prevScrollLeft;

      // The bottom boundary is the current Y scroll position, plus the height of the grid, but minus the header height.
      //   Basically this is the viewport height added on to the scroll position
      var bottomBound = self.renderContainers.body.prevScrollTop + self.gridHeight - self.renderContainers.body.headerHeight - self.footerHeight -  self.scrollbarHeight;

      // If there's a horizontal scrollbar, remove its height from the bottom boundary, otherwise we'll be letting it obscure rows
      // if (self.horizontalScrollbarHeight) {
      //   bottomBound = bottomBound - self.horizontalScrollbarHeight;
      // }

      // The right position is the current X scroll position minus the grid width
      var rightBound = self.renderContainers.body.prevScrollLeft + Math.ceil(self.renderContainers.body.getViewportWidth());

      // If there's a vertical scrollbar, subtract it from the right boundary or we'll allow it to obscure cells
      // if (self.verticalScrollbarWidth) {
      //   rightBound = rightBound - self.verticalScrollbarWidth;
      // }

      // We were given a row to scroll to
      if (gridRow !== null) {
        // This is the index of the row we want to scroll to, within the list of rows that can be visible
        var seekRowIndex = visRowCache.indexOf(gridRow);

        // Total vertical scroll length of the grid
        var scrollLength = (self.renderContainers.body.getCanvasHeight() - self.renderContainers.body.getViewportHeight());

        // Add the height of the native horizontal scrollbar to the scroll length, if it's there. Otherwise it will mask over the final row
        // if (self.horizontalScrollbarHeight && self.horizontalScrollbarHeight > 0) {
        //   scrollLength = scrollLength + self.horizontalScrollbarHeight;
        // }

        // This is the minimum amount of pixels we need to scroll vertical in order to see this row.
        var pixelsToSeeRow = (seekRowIndex * self.options.rowHeight);

        // Don't let the pixels required to see the row be less than zero
        pixelsToSeeRow = (pixelsToSeeRow < 0) ? 0 : pixelsToSeeRow;

        var scrollPixels;

        // If the scroll position we need to see the row is LESS than the top boundary, i.e. obscured above the top of the self...
        if (pixelsToSeeRow < Math.floor(topBound)) {
          // Get the different between the top boundary and the required scroll position and subtract it from the current scroll position\
          //   to get the full position we need
          scrollPixels = self.renderContainers.body.prevScrollTop - (topBound - pixelsToSeeRow);

          // Since scrollIfNecessary is called multiple times when enableCellEditOnFocus is true we need to make sure the scrollbarWidth and
          // footerHeight is accounted for to not cause a loop.
          if (gridCol && gridCol.colDef && gridCol.colDef.enableCellEditOnFocus) {
            scrollPixels = scrollPixels - self.footerHeight - self.scrollbarHeight;
          }

          scrollEvent.y = getScrollY(scrollPixels, scrollLength, self.renderContainers.body.prevScrolltopPercentage);
        }
        // Otherwise if the scroll position we need to see the row is MORE than the bottom boundary, i.e. obscured below the bottom of the self...
        else if (pixelsToSeeRow > Math.ceil(bottomBound)) {
          // Get the different between the bottom boundary and the required scroll position and add it to the current scroll position
          //   to get the full position we need
          scrollPixels = pixelsToSeeRow - bottomBound + self.renderContainers.body.prevScrollTop;

          // Scroll to full position plus the height of one row since scrollPixels points to the top pixel of the row
          scrollEvent.y = getScrollY(scrollPixels + self.options.rowHeight, scrollLength, self.renderContainers.body.prevScrolltopPercentage);
        }
      }

      // We were given a column to scroll to
      if (gridCol !== null) {
        // This is the index of the column we want to scroll to, within the list of columns that can be visible
        var seekColumnIndex = visColCache.indexOf(gridCol);

        // Total horizontal scroll length of the grid
        var horizScrollLength = (self.renderContainers.body.getCanvasWidth() - self.renderContainers.body.getViewportWidth());

        // This is the minimum amount of pixels we need to scroll horizontal in order to see this column
        var columnLeftEdge = 0;
        for (var i = 0; i < seekColumnIndex; i++) {
          var col = visColCache[i];
          columnLeftEdge += col.drawnWidth;
        }
        columnLeftEdge = (columnLeftEdge < 0) ? 0 : columnLeftEdge;

        var columnRightEdge = columnLeftEdge + gridCol.drawnWidth;

        // Don't let the pixels required to see the column be less than zero
        columnRightEdge = (columnRightEdge < 0) ? 0 : columnRightEdge;

        var horizScrollPixels;

        // If the scroll position we need to see the column is LESS than the left boundary, i.e. obscured before the left of the self...
        if (columnLeftEdge < leftBound) {
          // Get the different between the left boundary and the required scroll position and subtract it from the current scroll position\
          //   to get the full position we need
          horizScrollPixels = self.renderContainers.body.prevScrollLeft - (leftBound - columnLeftEdge);

          // Turn the scroll position into a percentage and make it an argument for a scroll event
          scrollEvent.x = getScrollX(horizScrollPixels, horizScrollLength, self.renderContainers.body.prevScrollleftPercentage);
        }
        // Otherwise if the scroll position we need to see the column is MORE than the right boundary, i.e. obscured after the right of the self...
        else if (columnRightEdge > rightBound) {
          // Get the different between the right boundary and the required scroll position and add it to the current scroll position
          //   to get the full position we need
          horizScrollPixels = columnRightEdge - rightBound + self.renderContainers.body.prevScrollLeft;

          // Turn the scroll position into a percentage and make it an argument for a scroll event
          scrollEvent.x = getScrollX(horizScrollPixels, horizScrollLength, self.renderContainers.body.prevScrollleftPercentage);
        }
      }

      var deferred = $q.defer();

      // If we need to scroll on either the x or y axes, fire a scroll event
      if (scrollEvent.y || scrollEvent.x) {
        scrollEvent.withDelay = false;
        self.scrollContainers('',scrollEvent);
        var dereg = self.api.core.on.scrollEnd(null,function() {
          deferred.resolve(scrollEvent);
          dereg();
        });
      }
      else {
        deferred.resolve();
      }

      return deferred.promise;
    };

    /**
     * @ngdoc method
     * @methodOf ui.grid.class:Grid
     * @name scrollTo
     * @description Scroll the grid such that the specified
     * row and column is in view
     * @param {object} rowEntity gridOptions.data[] array instance to make visible
     * @param {object} colDef to make visible
     * @returns {promise} a promise that is resolved after any scrolling is finished
     */
    Grid.prototype.scrollTo = function (rowEntity, colDef) {
      var gridRow = null, gridCol = null;

      if (rowEntity !== null && typeof(rowEntity) !== 'undefined' ) {
        gridRow = this.getRow(rowEntity);
      }

      if (colDef !== null && typeof(colDef) !== 'undefined' ) {
        gridCol = this.getColumn(colDef.name ? colDef.name : colDef.field);
      }
      return this.scrollToIfNecessary(gridRow, gridCol);
    };

  /**
   * @ngdoc function
   * @name clearAllFilters
   * @methodOf ui.grid.class:Grid
   * @description Clears all filters and optionally refreshes the visible rows.
   * @param {object} refreshRows Defaults to true.
   * @param {object} clearConditions Defaults to false.
   * @param {object} clearFlags Defaults to false.
   * @returns {promise} If `refreshRows` is true, returns a promise of the rows refreshing.
   */
  Grid.prototype.clearAllFilters = function clearAllFilters(refreshRows, clearConditions, clearFlags) {
    // Default `refreshRows` to true because it will be the most commonly desired behaviour.
    if (refreshRows === undefined) {
      refreshRows = true;
    }
    if (clearConditions === undefined) {
      clearConditions = false;
    }
    if (clearFlags === undefined) {
      clearFlags = false;
    }

    this.columns.forEach(function(column) {
      column.filters.forEach(function(filter) {
        filter.term = undefined;

        if (clearConditions) {
          filter.condition = undefined;
        }

        if (clearFlags) {
          filter.flags = undefined;
        }
      });
    });

    if (refreshRows) {
      return this.refreshRows();
    }
  };


      // Blatantly stolen from Angular as it isn't exposed (yet? 2.0?)
  function RowHashMap() {}

  RowHashMap.prototype = {
    /**
     * Store key value pair
     * @param key key to store can be any type
     * @param value value to store can be any type
     */
    put: function(key, value) {
      this[this.grid.options.rowIdentity(key)] = value;
    },

    /**
     * @param key
     * @returns {Object} the value for the key
     */
    get: function(key) {
      return this[this.grid.options.rowIdentity(key)];
    },

    /**
     * Remove the key/value pair
     * @param key
     */
    remove: function(key) {
      var value = this[key = this.grid.options.rowIdentity(key)];
      delete this[key];
      return value;
    }
  };

  return Grid;
}]);
})();

(function () {

  angular.module('ui.grid')
    .factory('GridApi', ['$q', '$rootScope', 'gridUtil', 'uiGridConstants', 'GridRow',
      function ($q, $rootScope, gridUtil, uiGridConstants, GridRow) {
        /**
         * @ngdoc function
         * @name ui.grid.class:GridApi
         * @description GridApi provides the ability to register public methods events inside the grid and allow
         * for other components to use the api via featureName.raise.methodName and featureName.on.eventName(function(args) {}.
         * <br/>
         * To listen to events, you must add a callback to gridOptions.onRegisterApi
         * <pre>
         *   $scope.gridOptions.onRegisterApi = function(gridApi) {
         *      gridApi.cellNav.on.navigate($scope,function(newRowCol, oldRowCol) {
         *          $log.log('navigation event');
         *      });
         *   };
         * </pre>
         * @param {object} grid grid that owns api
         */
        var GridApi = function GridApi(grid) {
          this.grid = grid;
          this.listeners = [];

          /**
           * @ngdoc function
           * @name renderingComplete
           * @methodOf  ui.grid.api:PublicApi
           * @description Rendering is complete, called at the same
           * time as `onRegisterApi`, but provides a way to obtain
           * that same event within features without stopping end
           * users from getting at the onRegisterApi method.
           *
           * Included in gridApi so that it's always there - otherwise
           * there is still a timing problem with when a feature can
           * call this.
           *
           * @param {GridApi} gridApi the grid api, as normally
           * returned in the onRegisterApi method
           *
           * @example
           * <pre>
           *      gridApi.core.on.renderingComplete( grid );
           * </pre>
           */
          this.registerEvent( 'core', 'renderingComplete' );

          /**
           * @ngdoc event
           * @name filterChanged
           * @eventOf  ui.grid.api:PublicApi
           * @description  is raised after the filter is changed.  The nature
           * of the watch expression doesn't allow notification of what changed,
           * so the receiver of this event will need to re-extract the filter
           * conditions from the columns.
           *
           */
          this.registerEvent( 'core', 'filterChanged' );

          /**
           * @ngdoc function
           * @name setRowInvisible
           * @methodOf  ui.grid.api:PublicApi
           * @description Sets an override on the row to make it always invisible,
           * which will override any filtering or other visibility calculations.
           * If the row is currently visible then sets it to invisible and calls
           * both grid refresh and emits the rowsVisibleChanged event
           * @param {GridRow} row the row we want to make invisible
           */
          this.registerMethod( 'core', 'setRowInvisible', GridRow.prototype.setRowInvisible );

          /**
           * @ngdoc function
           * @name clearRowInvisible
           * @methodOf  ui.grid.api:PublicApi
           * @description Clears any override on visibility for the row so that it returns to
           * using normal filtering and other visibility calculations.
           * If the row is currently invisible then sets it to visible and calls
           * both grid refresh and emits the rowsVisibleChanged event
           * TODO: if a filter is active then we can't just set it to visible?
           * @param {GridRow} row the row we want to make visible
           */
          this.registerMethod( 'core', 'clearRowInvisible', GridRow.prototype.clearRowInvisible );

          /**
           * @ngdoc function
           * @name getVisibleRows
           * @methodOf  ui.grid.api:PublicApi
           * @description Returns all visible rows
           * @param {Grid} grid the grid you want to get visible rows from
           * @returns {array} an array of gridRow
           */
          this.registerMethod( 'core', 'getVisibleRows', this.grid.getVisibleRows );

          /**
           * @ngdoc event
           * @name rowsVisibleChanged
           * @eventOf  ui.grid.api:PublicApi
           * @description  is raised after the rows that are visible
           * change.  The filtering is zero-based, so it isn't possible
           * to say which rows changed (unlike in the selection feature).
           * We can plausibly know which row was changed when setRowInvisible
           * is called, but in that situation the user already knows which row
           * they changed.  When a filter runs we don't know what changed,
           * and that is the one that would have been useful.
           *
           */
          this.registerEvent( 'core', 'rowsVisibleChanged' );

          /**
           * @ngdoc event
           * @name rowsRendered
           * @eventOf  ui.grid.api:PublicApi
           * @description  is raised after the cache of visible rows is changed.
           */
          this.registerEvent( 'core', 'rowsRendered' );


          /**
           * @ngdoc event
           * @name scrollBegin
           * @eventOf  ui.grid.api:PublicApi
           * @description  is raised when scroll begins.  Is throttled, so won't be raised too frequently
           */
          this.registerEvent( 'core', 'scrollBegin' );

          /**
           * @ngdoc event
           * @name scrollEnd
           * @eventOf  ui.grid.api:PublicApi
           * @description  is raised when scroll has finished.  Is throttled, so won't be raised too frequently
           */
          this.registerEvent( 'core', 'scrollEnd' );

          /**
           * @ngdoc event
           * @name canvasHeightChanged
           * @eventOf  ui.grid.api:PublicApi
           * @description  is raised when the canvas height has changed
           * <br/>
           * arguments: oldHeight, newHeight
           */
          this.registerEvent( 'core', 'canvasHeightChanged');

          /**
           * @ngdoc event
           * @name gridDimensionChanged
           * @eventOf  ui.grid.api:PublicApi
           * @description  is raised when the grid dimensions have changed (when autoResize is on)
           * <br/>
           * arguments: oldGridHeight, oldGridWidth, newGridHeight, newGridWidth
           */
          this.registerEvent( 'core', 'gridDimensionChanged');
        };

        /**
         * @ngdoc function
         * @name ui.grid.class:suppressEvents
         * @methodOf ui.grid.class:GridApi
         * @description Used to execute a function while disabling the specified event listeners.
         * Disables the listenerFunctions, executes the callbackFn, and then enables
         * the listenerFunctions again
         * @param {object} listenerFuncs listenerFunc or array of listenerFuncs to suppress. These must be the same
         * functions that were used in the .on.eventName method
         * @param {object} callBackFn function to execute
         * @example
         * <pre>
         *    var navigate = function (newRowCol, oldRowCol) {
         *       //do something on navigate
         *    }
         *
         *    gridApi.cellNav.on.navigate(scope,navigate);
         *
         *
         *    //call the scrollTo event and suppress our navigate listener
         *    //scrollTo will still raise the event for other listeners
         *    gridApi.suppressEvents(navigate, function() {
         *       gridApi.cellNav.scrollTo(aRow, aCol);
         *    });
         *
         * </pre>
         */
        GridApi.prototype.suppressEvents = function (listenerFuncs, callBackFn) {
          var self = this,
            listeners = angular.isArray(listenerFuncs) ? listenerFuncs : [listenerFuncs];

          // find all registered listeners
          var foundListeners = self.listeners.filter(function(listener) {
            return listeners.some(function(l) {
              return listener.handler === l;
            });
          });

          // deregister all the listeners
          foundListeners.forEach(function(l) {
            l.dereg();
          });

          callBackFn();

          // reregister all the listeners
          foundListeners.forEach(function(l) {
              l.dereg = registerEventWithAngular(l.eventId, l.handler, self.grid, l._this);
          });
        };

        /**
         * @ngdoc function
         * @name registerEvent
         * @methodOf ui.grid.class:GridApi
         * @description Registers a new event for the given feature.  The event will get a
         * .raise and .on prepended to it
         * <br>
         * .raise.eventName() - takes no arguments
         * <br/>
         * <br/>
         * .on.eventName(scope, callBackFn, _this)
         * <br/>
         * scope - a scope reference to add a deregister call to the scopes .$on('destroy').  Scope is optional and can be a null value,
         * but in this case you must deregister it yourself via the returned deregister function
         * <br/>
         * callBackFn - The function to call
         * <br/>
         * _this - optional this context variable for callbackFn. If omitted, grid.api will be used for the context
         * <br/>
         * .on.eventName returns a dereg funtion that will remove the listener.  It's not necessary to use it as the listener
         * will be removed when the scope is destroyed.
         * @param {string} featureName name of the feature that raises the event
         * @param {string} eventName  name of the event
         */
        GridApi.prototype.registerEvent = function (featureName, eventName) {
          var self = this;
          if (!self[featureName]) {
            self[featureName] = {};
          }

          var feature = self[featureName];
          if (!feature.on) {
            feature.on = {};
            feature.raise = {};
          }

          var eventId = self.grid.id + featureName + eventName;

          // gridUtil.logDebug('Creating raise event method ' + featureName + '.raise.' + eventName);
          feature.raise[eventName] = function () {
            $rootScope.$emit.apply($rootScope, [eventId].concat(Array.prototype.slice.call(arguments)));
          };

          // gridUtil.logDebug('Creating on event method ' + featureName + '.on.' + eventName);
          feature.on[eventName] = function (scope, handler, _this) {
            if ( scope !== null && typeof(scope.$on) === 'undefined' ) {
              gridUtil.logError('asked to listen on ' + featureName + '.on.' + eventName + ' but scope wasn\'t passed in the input parameters.  It is legitimate to pass null, but you\'ve passed something else, so you probably forgot to provide scope rather than did it deliberately, not registering');
              return;
            }
            var deregAngularOn = registerEventWithAngular(eventId, handler, self.grid, _this);

            // track our listener so we can turn off and on
            var listener = {handler: handler, dereg: deregAngularOn, eventId: eventId, scope: scope, _this: _this};

            self.listeners.push(listener);

            var removeListener = function() {
              listener.dereg();
              var index = self.listeners.indexOf(listener);
              self.listeners.splice(index,1);
            };

            // destroy tracking when scope is destroyed
            if (scope) {
              scope.$on('$destroy', function() {
                removeListener();
              });
            }

            return removeListener;
          };
        };

        function registerEventWithAngular(eventId, handler, grid, _this) {
          return $rootScope.$on(eventId, function (event) {
            var args = Array.prototype.slice.call(arguments);
            args.splice(0, 1); // remove evt argument
            handler.apply(_this ? _this : grid.api, args);
          });
        }

        /**
         * @ngdoc function
         * @name registerEventsFromObject
         * @methodOf ui.grid.class:GridApi
         * @description Registers features and events from a simple objectMap.
         * eventObjectMap must be in this format (multiple features allowed)
         * <pre>
         * {featureName:
         *        {
         *          eventNameOne:function(args) {},
         *          eventNameTwo:function(args) {}
         *        }
         *  }
         * </pre>
         * @param {object} eventObjectMap map of feature/event names
         */
        GridApi.prototype.registerEventsFromObject = function (eventObjectMap) {
          var self = this,
            features = [];

          angular.forEach(eventObjectMap, function (featProp, featPropName) {
            var feature = {name: featPropName, events: []};
            angular.forEach(featProp, function (prop, propName) {
              feature.events.push(propName);
            });
            features.push(feature);
          });

          features.forEach(function (feature) {
            feature.events.forEach(function (event) {
              self.registerEvent(feature.name, event);
            });
          });
        };

        /**
         * @ngdoc function
         * @name registerMethod
         * @methodOf ui.grid.class:GridApi
         * @description Registers a new event for the given feature
         * @param {string} featureName name of the feature
         * @param {string} methodName  name of the method
         * @param {object} callBackFn function to execute
         * @param {object} _this binds callBackFn 'this' to _this.  Defaults to gridApi.grid
         */
        GridApi.prototype.registerMethod = function (featureName, methodName, callBackFn, _this) {
          if (!this[featureName]) {
            this[featureName] = {};
          }

          var feature = this[featureName];

          feature[methodName] = gridUtil.createBoundedWrapper(_this || this.grid, callBackFn);
        };

        /**
         * @ngdoc function
         * @name registerMethodsFromObject
         * @methodOf ui.grid.class:GridApi
         * @description Registers features and methods from a simple objectMap.
         * eventObjectMap must be in this format (multiple features allowed)
         * <br>
         * {featureName:
         *        {
         *          methodNameOne:function(args) {},
         *          methodNameTwo:function(args) {}
         *        }
         * @param {object} methodMap map of feature/event names
         * @param {object} _this binds this to _this for all functions.  Defaults to gridApi.grid
         */
        GridApi.prototype.registerMethodsFromObject = function (methodMap, _this) {
          var self = this;
          var features = [];
          angular.forEach(methodMap, function (featProp, featPropName) {
            var feature = {name: featPropName, methods: []};
            angular.forEach(featProp, function (prop, propName) {
              feature.methods.push({name: propName, fn: prop});
            });
            features.push(feature);
          });

          features.forEach(function (feature) {
            feature.methods.forEach(function (method) {
              self.registerMethod(feature.name, method.name, method.fn, _this);
            });
          });

        };

        return GridApi;
      }]);
})();

(function() {

angular.module('ui.grid')
.factory('GridColumn', ['gridUtil', 'uiGridConstants', 'i18nService', function(gridUtil, uiGridConstants, i18nService) {

  /**
   * ******************************************************************************************
   * PaulL1: Ugly hack here in documentation.  These properties are clearly properties of GridColumn,
   * and need to be noted as such for those extending and building ui-grid itself.
   * However, from an end-developer perspective, they interact with all these through columnDefs,
   * and they really need to be documented there.  I feel like they're relatively static, and
   * I can't find an elegant way for ngDoc to reference to both....so I've duplicated each
   * comment block.  Ugh.
   *
   */

  /**
   * @ngdoc property
   * @name name
   * @propertyOf ui.grid.class:GridColumn
   * @description (mandatory) Each column should have a name, although for backward
   * compatibility with 2.x name can be omitted if field is present.
   *
   * Important - This must be unique to each column on a web page since it can
   * be used as a key for retrieving information such as custom sort algorithms.
   *
   */

  /**
   * @ngdoc property
   * @name name
   * @propertyOf ui.grid.class:GridOptions.columnDef
   * @description (mandatory) Each column should have a name, although for backward
   * compatibility with 2.x name can be omitted if field is present.
   *
   * Important - This must be unique to each column on a web page since it can
   * be used as a key for retrieving information such as custom sort algorithms.
   *
   */

  /**
   * @ngdoc property
   * @name displayName
   * @propertyOf ui.grid.class:GridColumn
   * @description Column name that will be shown in the header. If displayName is not
   * provided then one is generated using the name.
   *
   */

  /**
   * @ngdoc property
   * @name displayName
   * @propertyOf ui.grid.class:GridOptions.columnDef
   * @description Column name that will be shown in the header. If displayName is not
   * provided then one is generated using the name.
   *
   */

  /**
   * @ngdoc property
   * @name field
   * @propertyOf ui.grid.class:GridColumn
   * @description field must be provided if you wish to bind to a
   * property in the data source.  Should be an angular expression that evaluates against grid.options.data
   * array element.  Can be a complex expression: <code>employee.address.city</code>, or can be a function: <code>employee.getFullAddress()</code>.
   * See the angular docs on binding expressions.
   *
   */

  /**
   * @ngdoc property
   * @name field
   * @propertyOf ui.grid.class:GridOptions.columnDef
   * @description field must be provided if you wish to bind to a
   * property in the data source.  Should be an angular expression that evaluates against grid.options.data
   * array element.  Can be a complex expression: <code>employee.address.city</code>, or can be a function: <code>employee.getFullAddress()</code>.    * See the angular docs on binding expressions.    *
   */

  /**
   * @ngdoc property
   * @name filter
   * @propertyOf ui.grid.class:GridColumn
   * @description Filter on this column.
   *
   * Available built-in conditions and types are listed under {@link jui.grid.service:uiGridConstants#properties_filter uiGridOptions.filter}
   * @example
   * <pre>{ term: 'text', condition: uiGridConstants.filter.STARTS_WITH, placeholder: 'type to filter...', ariaLabel: 'Filter for text', flags: { caseSensitive: false }, type: uiGridConstants.filter.SELECT, [ { value: 1, label: 'male' }, { value: 2, label: 'female' } ] }</pre>
   *
   */

  /**
   * @ngdoc property
   * @name extraStyle
   * @propertyOf ui.grid.class:GridColumn
   * @description additional on this column.
   * @example
   * <pre>{extraStyle: {display: 'table-cell'}}</pre>
   *
   */

  /**
   * @ngdoc object
   * @name ui.grid.class:GridColumn
   * @description Represents the viewModel for each column.  Any state or methods needed for a Grid Column
   * are defined on this prototype
   * @param {ColumnDef} colDef the column def to associate with this column
   * @param {number} uid the unique and immutable uid we'd like to allocate to this column
   * @param {Grid} grid the grid we'd like to create this column in
   */
  function GridColumn(colDef, uid, grid) {
    var self = this;

    self.grid = grid;
    self.uid = uid;

    self.updateColumnDef(colDef, true);

    self.aggregationValue = undefined;

    // The footer cell registers to listen for the rowsRendered event, and calls this.  Needed to be
    // in something with a scope so that the dereg would get called
    self.updateAggregationValue = function() {

     // gridUtil.logDebug('getAggregationValue for Column ' + self.colDef.name);

      /**
       * @ngdoc property
       * @name aggregationType
       * @propertyOf ui.grid.class:GridOptions.columnDef
       * @description The aggregation that you'd like to show in the columnFooter for this
       * column.  Valid values are in
       * {@link ui.grid.service:uiGridConstants#properties_aggregationTypes uiGridConstants.aggregationTypes},
       * and currently include `uiGridConstants.aggregationTypes.count`,
       * `uiGridConstants.aggregationTypes.sum`, `uiGridConstants.aggregationTypes.avg`, `uiGridConstants.aggregationTypes.min`,
       * `uiGridConstants.aggregationTypes.max`.
       *
       * You can also provide a function as the aggregation type, in this case your function needs to accept the full
       * set of visible rows, and return a value that should be shown
       */
      if (!self.aggregationType) {
        self.aggregationValue = undefined;
        return;
      }

      var result = 0;
      var visibleRows = self.grid.getVisibleRows();

      var cellValues = function() {
        var values = [];
        visibleRows.forEach(function (row) {
          var cellValue = self.grid.getCellValue(row, self);
          var cellNumber = Number(cellValue);
          if (!isNaN(cellNumber)) {
            values.push(cellNumber);
          }
        });
        return values;
      };

      if (angular.isFunction(self.aggregationType)) {
        self.aggregationValue = self.aggregationType(visibleRows, self);
      }
      else if (self.aggregationType === uiGridConstants.aggregationTypes.count) {
        self.aggregationValue = self.grid.getVisibleRowCount();
      }
      else if (self.aggregationType === uiGridConstants.aggregationTypes.sum) {
        cellValues().forEach(function (value) {
          result += value;
        });
        self.aggregationValue = result;
      }
      else if (self.aggregationType === uiGridConstants.aggregationTypes.avg) {
        cellValues().forEach(function (value) {
          result += value;
        });
        result = result / cellValues().length;
        self.aggregationValue = result;
      }
      else if (self.aggregationType === uiGridConstants.aggregationTypes.min) {
        self.aggregationValue = Math.min.apply(null, cellValues());
      }
      else if (self.aggregationType === uiGridConstants.aggregationTypes.max) {
        self.aggregationValue = Math.max.apply(null, cellValues());
      }
      else {
        self.aggregationValue = '\u00A0';
      }
    };

//     var throttledUpdateAggregationValue = gridUtil.throttle(updateAggregationValue, self.grid.options.aggregationCalcThrottle, { trailing: true, context: self.name });

    /**
     * @ngdoc function
     * @name getAggregationValue
     * @methodOf ui.grid.class:GridColumn
     * @description gets the aggregation value based on the aggregation type for this column.
     * Debounced using scrollDebounce option setting
     */
    this.getAggregationValue =  function() {
//      if (!self.grid.isScrollingVertically && !self.grid.isScrollingHorizontally) {
//        throttledUpdateAggregationValue();
//      }

      return self.aggregationValue;
    };
  }

  /**
   * @ngdoc function
   * @name hideColumn
   * @methodOf ui.grid.class:GridColumn
   * @description Hides the column by setting colDef.visible = false
   */
  GridColumn.prototype.hideColumn = function() {
    this.colDef.visible = false;
  };


  /**
   * @ngdoc method
   * @methodOf ui.grid.class:GridColumn
   * @name setPropertyOrDefault
   * @description Sets a property on the column using the passed in columnDef, and
   * setting the defaultValue if the value cannot be found on the colDef
   * @param {GridColumn} colDef the column def to look in for the property value
   * @param {string} propName the property name we'd like to set
   * @param {object} defaultValue the value to use if the colDef doesn't provide the setting
   */
  GridColumn.prototype.setPropertyOrDefault = function (colDef, propName, defaultValue) {
    var self = this;

    // Use the column definition filter if we were passed it
    if (typeof(colDef[propName]) !== 'undefined' && colDef[propName]) {
      self[propName] = colDef[propName];
    }
    // Otherwise use our own if it's set
    else if (typeof(self[propName]) !== 'undefined') {
      self[propName] = self[propName];
    }
    // Default to empty object for the filter
    else {
      self[propName] = defaultValue ? defaultValue : {};
    }
  };



  /**
   * @ngdoc property
   * @name width
   * @propertyOf ui.grid.class:GridOptions.columnDef
   * @description sets the column width.  Can be either
   * a number or a percentage, or an * for auto.
   * @example
   * <pre>  $scope.gridOptions.columnDefs = [ { field: 'field1', width: 100},
   *                                          { field: 'field2', width: '20%'},
   *                                          { field: 'field3', width: '*' }]; </pre>
   *
   */

  /**
   * @ngdoc property
   * @name minWidth
   * @propertyOf ui.grid.class:GridOptions.columnDef
   * @description Sets the minimum column width.  Should be a number.
   * Defaults to gridOptions.minimumColumnSize if minWidth is not provided.
   * @example
   * <pre>  $scope.gridOptions.columnDefs = [ { field: 'field1', minWidth: 100}]; </pre>
   *
   */

  /**
   * @ngdoc property
   * @name maxWidth
   * @propertyOf ui.grid.class:GridOptions.columnDef
   * @description sets the maximum column width.  Should be a number.
   * @example
   * <pre>  $scope.gridOptions.columnDefs = [ { field: 'field1', maxWidth: 100}]; </pre>
   *
   */

  /**
   * @ngdoc property
   * @name visible
   * @propertyOf ui.grid.class:GridOptions.columnDef
   * @description sets whether or not the column is visible
   * </br>Default is true
   * @example
   * <pre>  $scope.gridOptions.columnDefs = [
   *     { field: 'field1', visible: true},
   *     { field: 'field2', visible: false }
   *   ]; </pre>
   *
   */

 /**
  * @ngdoc property
  * @name sort
  * @propertyOf ui.grid.class:GridOptions.columnDef
  * @description An object of sort information, attributes are:
  *
  * - direction: values are {@link ui.grid.service:uiGridConstants#properties_ASC uiGridConstants.ASC}
  *  or {@link ui.grid.service:uiGridConstants#properties_DESC uiGridConstants.DESC}
  * - ignoreSort: if set to true this sort is ignored (used by tree to manipulate the sort functionality)
  * - priority: says what order to sort the columns in (lower priority gets sorted first). Starts from 0.
  * @example
  * <pre>
  *   $scope.gridOptions.columnDefs = [{
  *     field: 'field1',
  *     sort: {
  *       direction: uiGridConstants.ASC,
  *       ignoreSort: true,
  *       priority: 0
  *      }
  *   }];
  * </pre>
  */


  /**
   * @ngdoc property
   * @name sortingAlgorithm
   * @propertyOf ui.grid.class:GridOptions.columnDef
   * @description Algorithm to use for sorting this column. Takes 'a' and 'b' parameters
   * like any normal sorting function with additional 'rowA', 'rowB', and 'direction' parameters
   * that are the row objects and the current direction of the sort respectively.
   *
   */

   /**
    * @ngdoc property
    * @name defaultSort
    * @propertyOf ui.grid.class:GridOptions.columnDef
    * @description An object of sort information, provides a hidden default ordering of the data
    * when no user sorts are applied, or when a user-provided sort deems two rows to be equal.
    *
    * May be combined with a regular {@link ui.grid.class:GridOptions.columnDef#properties_sort columnDef.sort}
    * to explicitly sort by that column by default.
    *
    * Shares the same object format as {@link ui.grid.class:GridOptions.columnDef#properties_sort columnDef.sort}.
    *
    * Note that a defaultSort can never take priority over an explicit sort.
    * @example
    * <pre>
    *   $scope.gridOptions.columnDefs = [{
    *     field: 'field1',
    *     defaultSort: {
    *       direction: uiGridConstants.ASC,
    *       priority: 0
    *      }
    *   }];
    * </pre>
    */

  /**
   * @ngdoc array
   * @name filters
   * @propertyOf ui.grid.class:GridOptions.columnDef
   * @description Specify multiple filter fields.
   * @example
   * <pre>$scope.gridOptions.columnDefs = [
   *   {
   *     field: 'field1', filters: [
   *       {
   *         term: 'aa',
   *         condition: uiGridConstants.filter.STARTS_WITH,
   *         placeholder: 'starts with...',
   *         ariaLabel: 'Filter for field1',
   *         flags: { caseSensitive: false },
   *         type: uiGridConstants.filter.SELECT,
   *         selectOptions: [ { value: 1, label: 'male' }, { value: 2, label: 'female' } ]
   *       },
   *       {
   *         condition: uiGridConstants.filter.ENDS_WITH,
   *         placeholder: 'ends with...'
   *       }
   *     ]
   *   }
   * ]; </pre>
   *
   *
   */

  /**
   * @ngdoc array
   * @name filters
   * @propertyOf ui.grid.class:GridColumn
   * @description Filters for this column. Includes 'term' property bound to filter input elements.
   * @example
   * <pre>[
   *   {
   *     term: 'foo', // ngModel for <input>
   *     condition: uiGridConstants.filter.STARTS_WITH,
   *     placeholder: 'starts with...',
   *     ariaLabel: 'Filter for foo',
   *     flags: { caseSensitive: false },
   *     type: uiGridConstants.filter.SELECT,
   *     selectOptions: [ { value: 1, label: 'male' }, { value: 2, label: 'female' } ]
   *   },
   *   {
   *     term: 'baz',
   *     condition: uiGridConstants.filter.ENDS_WITH,
   *     placeholder: 'ends with...'
   *   }
   * ] </pre>
   *
   *
   */

  /**
   * @ngdoc array
   * @name menuItems
   * @propertyOf ui.grid.class:GridOptions.columnDef
   * @description used to add menu items to a column.  Refer to the tutorial on this
   * functionality.  A number of settings are supported:
   *
   * - title: controls the title that is displayed in the menu
   * - icon: the icon shown alongside that title
   * - action: the method to call when the menu is clicked
   * - shown: a function to evaluate to determine whether or not to show the item
   * - active: a function to evaluate to determine whether or not the item is currently selected
   * - context: context to pass to the action function, available in this.context in your handler
   * - leaveOpen: if set to true, the menu should stay open after the action, defaults to false
   * @example
   * <pre>  $scope.gridOptions.columnDefs = [
   *   { field: 'field1', menuItems: [
   *     {
   *       title: 'Outer Scope Alert',
   *       icon: 'ui-grid-icon-info-circled',
   *       action: function($event) {
   *         this.context.blargh(); // $scope.blargh() would work too, this is just an example
   *       },
   *       shown: function() { return true; },
   *       active: function() { return true; },
   *       context: $scope
   *     },
   *     {
   *       title: 'Grid ID',
   *       action: function() {
   *         alert('Grid ID: ' + this.grid.id);
   *       }
   *     }
   *   ] }]; </pre>
   *
   */

  // Use colDef.displayName as long as it's not undefined, otherwise default to the field name
  function getDisplayName(colDef) {
    return (colDef.displayName === undefined)
      ? gridUtil.readableColumnName(colDef.name)
      : colDef.displayName;
  }

  /**
   * @ngdoc method
   * @methodOf ui.grid.class:GridColumn
   * @name updateColumnDef
   * @description Moves settings from the columnDef down onto the column,
   * and sets properties as appropriate
   * @param {GridColumn} colDef the column def to look in for the property value
   * @param {boolean} isNew whether the column is being newly created, if not
   * we're updating an existing column, and some items such as the sort shouldn't
   * be copied down
   */
  GridColumn.prototype.updateColumnDef = function(colDef, isNew) {
    var self = this;

    self.colDef = colDef;

    if (colDef.name === undefined) {
      throw new Error('colDef.name is required for column at index ' + self.grid.options.columnDefs.indexOf(colDef));
    }

    self.displayName = getDisplayName(colDef);

    if (!angular.isNumber(self.width) || !self.hasCustomWidth || colDef.allowCustomWidthOverride) {
      var colDefWidth = colDef.width;
      var parseErrorMsg = "Cannot parse column width '" + colDefWidth + "' for column named '" + colDef.name + "'";
      self.hasCustomWidth = false;

      if (!angular.isString(colDefWidth) && !angular.isNumber(colDefWidth)) {
        self.width = '*';
      } else if (angular.isString(colDefWidth)) {
        // See if it ends with a percent
        if (gridUtil.endsWith(colDefWidth, '%')) {
          // If so we should be able to parse the non-percent-sign part to a number
          var percentStr = colDefWidth.replace(/%/g, '');
          var percent = parseInt(percentStr, 10);
          if (isNaN(percent)) {
            throw new Error(parseErrorMsg);
          }
          self.width = colDefWidth;
        }
        // And see if it's a number string
        else if (colDefWidth.match(/^(\d+)$/)) {
          self.width = parseInt(colDefWidth.match(/^(\d+)$/)[1], 10);
        }
        // Otherwise it should be a string of asterisks
        else if (colDefWidth.match(/^\*+$/)) {
          self.width = colDefWidth;
        }
        // No idea, throw an Error
        else {
          throw new Error(parseErrorMsg);
        }
      }
      // Is a number, use it as the width
      else {
        self.width = colDefWidth;
      }
    }

    function isValidWidthValue(value) {
      return angular.isString(value) || angular.isNumber(value);
    }

    ['minWidth', 'maxWidth'].forEach(function (name) {
      var minOrMaxWidth = colDef[name];
      var parseErrorMsg = "Cannot parse column " + name + " '" + minOrMaxWidth + "' for column named '" + colDef.name + "'";

      // default minWidth to the minimumColumnSize
      if (name === 'minWidth' && !isValidWidthValue(minOrMaxWidth) && angular.isDefined(self.grid.options.minimumColumnSize)) {
        minOrMaxWidth = self.grid.options.minimumColumnSize;
      }

      if (!isValidWidthValue(minOrMaxWidth)) {
        // Sets default minWidth and maxWidth values
        self[name] = ((name === 'minWidth') ? 30 : 9000);
      } else if (angular.isString(minOrMaxWidth)) {
        if (minOrMaxWidth.match(/^(\d+)$/)) {
          self[name] = parseInt(minOrMaxWidth.match(/^(\d+)$/)[1], 10);
        } else {
          throw new Error(parseErrorMsg);
        }
      } else {
        self[name] = minOrMaxWidth;
      }
    });

    // use field if it is defined; name if it is not
    self.field = (colDef.field === undefined) ? colDef.name : colDef.field;

    if ( typeof( self.field ) !== 'string' ) {
      gridUtil.logError( 'Field is not a string, this is likely to break the code, Field is: ' + self.field );
    }

    self.name = colDef.name;
    self.displayName = getDisplayName(colDef);

    // self.originalIndex = index;

    self.aggregationType = angular.isDefined(colDef.aggregationType) ? colDef.aggregationType : null;
    self.footerCellTemplate = angular.isDefined(colDef.footerCellTemplate) ? colDef.footerCellTemplate : null;

    /**
     * @ngdoc property
     * @name cellTooltip
     * @propertyOf ui.grid.class:GridOptions.columnDef
     * @description Whether or not to show a tooltip when a user hovers over the cell.
     * If set to false, no tooltip.  If true, the cell value is shown in the tooltip (useful
     * if you have long values in your cells), if a function then that function is called
     * passing in the row and the col `cellTooltip( row, col )`, and the return value is shown in the tooltip,
     * if it is a static string then displays that static string.
     *
     * Defaults to false
     *
     */
    if ( typeof(colDef.cellTooltip) === 'undefined' || colDef.cellTooltip === false ) {
      self.cellTooltip = false;
    } else if ( colDef.cellTooltip === true ) {
      self.cellTooltip = function(row, col) {
        return self.grid.getCellValue( row, col );
      };
    } else if (typeof(colDef.cellTooltip) === 'function' ) {
      self.cellTooltip = colDef.cellTooltip;
    } else {
      self.cellTooltip = function ( row, col ) {
        return col.colDef.cellTooltip;
      };
    }

    /**
     * @ngdoc property
     * @name headerTooltip
     * @propertyOf ui.grid.class:GridOptions.columnDef
     * @description Whether or not to show a tooltip when a user hovers over the header cell.
     * If set to false, no tooltip.  If true, the displayName is shown in the tooltip (useful
     * if you have long values in your headers), if a function then that function is called
     * passing in the row and the col `headerTooltip( col )`, and the return value is shown in the tooltip,
     * if a static string then shows that static string.
     *
     * Defaults to false
     *
     */
    if ( typeof(colDef.headerTooltip) === 'undefined' || colDef.headerTooltip === false ) {
      self.headerTooltip = false;
    }
    else if ( colDef.headerTooltip === true ) {
      self.headerTooltip = function(col) {
        return col.displayName;
      };
    }
    else if (typeof(colDef.headerTooltip) === 'function' ) {
      self.headerTooltip = colDef.headerTooltip;
    }
    else {
      self.headerTooltip = function ( col ) {
        return col.colDef.headerTooltip;
      };
    }


    /**
     * @ngdoc property
     * @name footerCellClass
     * @propertyOf ui.grid.class:GridOptions.columnDef
     * @description footerCellClass can be a string specifying the class to append to a cell
     * or it can be a function(grid, row, col, rowRenderIndex, colRenderIndex) that returns a class name
     *
     */
    self.footerCellClass = colDef.footerCellClass;

    /**
     * @ngdoc property
     * @name cellClass
     * @propertyOf ui.grid.class:GridOptions.columnDef
     * @description cellClass can be a string specifying the class to append to a cell
     * or it can be a function(grid, row, col, rowRenderIndex, colRenderIndex) that returns a class name
     *
     */
    self.cellClass = colDef.cellClass;

    /**
     * @ngdoc property
     * @name headerCellClass
     * @propertyOf ui.grid.class:GridOptions.columnDef
     * @description headerCellClass can be a string specifying the class to append to a cell
     * or it can be a function(grid, row, col, rowRenderIndex, colRenderIndex) that returns a class name
     *
     */
    self.headerCellClass = colDef.headerCellClass;

    /**
     * @ngdoc property
     * @name cellFilter
     * @propertyOf ui.grid.class:GridOptions.columnDef
     * @description cellFilter is a filter to apply to the content of each cell
     * @example
     * <pre>
     *   gridOptions.columnDefs[0].cellFilter = 'date'
     *
     */
    self.cellFilter = colDef.cellFilter ? colDef.cellFilter : "";

    /**
     * @ngdoc boolean
     * @name sortCellFiltered
     * @propertyOf ui.grid.class:GridOptions.columnDef
     * @description (optional) False by default. When `true` uiGrid will apply the cellFilter before
     * sorting the data. Note that when using this option uiGrid will assume that the displayed value is
     * a string, and use the {@link ui.grid.class:RowSorter#sortAlpha sortAlpha} `sortFn`. It is possible
     * to return a non-string value from an angularjs filter, in which case you should define a {@link ui.grid.class:GridOptions.columnDef#sortingAlgorithm sortingAlgorithm}
     * for the column which hanldes the returned type. You may specify one of the `sortingAlgorithms`
     * found in the {@link ui.grid.RowSorter rowSorter} service.
     */
    self.sortCellFiltered = colDef.sortCellFiltered ? true : false;

    /**
     * @ngdoc boolean
     * @name filterCellFiltered
     * @propertyOf ui.grid.class:GridOptions.columnDef
     * @description (optional) False by default. When `true` uiGrid will apply the cellFilter before
     * applying "search" `filters`.
     */
    self.filterCellFiltered = colDef.filterCellFiltered ? true : false;

    /**
     * @ngdoc property
     * @name headerCellFilter
     * @propertyOf ui.grid.class:GridOptions.columnDef
     * @description headerCellFilter is a filter to apply to the content of the column header
     * @example
     * <pre>
     *   gridOptions.columnDefs[0].headerCellFilter = 'translate'
     *
     */
    self.headerCellFilter = colDef.headerCellFilter ? colDef.headerCellFilter : "";

    /**
     * @ngdoc property
     * @name footerCellFilter
     * @propertyOf ui.grid.class:GridOptions.columnDef
     * @description footerCellFilter is a filter to apply to the content of the column footer
     * @example
     * <pre>
     *   gridOptions.columnDefs[0].footerCellFilter = 'date'
     *
     */
    self.footerCellFilter = colDef.footerCellFilter ? colDef.footerCellFilter : "";

    self.visible = gridUtil.isNullOrUndefined(colDef.visible) || colDef.visible;

    self.headerClass = colDef.headerClass;
    // self.cursor = self.sortable ? 'pointer' : 'default';

    // Turn on sorting by default
    self.enableSorting = typeof(colDef.enableSorting) !== 'undefined' ? colDef.enableSorting : self.grid.options.enableSorting;
    self.sortingAlgorithm = colDef.sortingAlgorithm;

    /**
     * @ngdoc property
     * @name sortDirectionCycle
     * @propertyOf ui.grid.class:GridOptions.columnDef
     * @description (optional) An array of {@link ui.grid.service:uiGridConstants#properties_ASC sort directions},
     * specifying the order that they should cycle through as the user repeatedly clicks on the column heading.
     * The default is `[null, uiGridConstants.ASC, uiGridConstants.DESC]`. Null
     * refers to the unsorted state. This does not affect the initial sort
     * direction; use the {@link ui.grid.class:GridOptions.columnDef#sort sort}
     * property for that. If
     * {@link ui.grid.class:GridOptions.columnDef#suppressRemoveSort suppressRemoveSort}
     * is also set, the unsorted state will be skipped even if it is listed here.
     * Each direction may not appear in the list more than once (e.g. `[ASC,
     * DESC, DESC]` is not allowed), and the list may not be empty.
     */
    self.sortDirectionCycle = typeof(colDef.sortDirectionCycle) !== 'undefined' ?
      colDef.sortDirectionCycle :
      [null, uiGridConstants.ASC, uiGridConstants.DESC];

    /**
     * @ngdoc boolean
     * @name suppressRemoveSort
     * @propertyOf ui.grid.class:GridOptions.columnDef
     * @description (optional) False by default. When enabled, this setting hides the removeSort option
     * in the menu, and prevents users from manually removing the sort
     */
    if ( typeof(self.suppressRemoveSort) === 'undefined') {
      self.suppressRemoveSort = typeof(colDef.suppressRemoveSort) !== 'undefined' ? colDef.suppressRemoveSort : false;
    }

    /**
     * @ngdoc property
     * @name enableFiltering
     * @propertyOf ui.grid.class:GridOptions.columnDef
     * @description turn off filtering for an individual column, where
     * you've turned on filtering for the overall grid
     * @example
     * <pre>
     *   gridOptions.columnDefs[0].enableFiltering = false;
     *
     */
    // Turn on filtering by default (it's disabled by default at the Grid level)
    self.enableFiltering = typeof(colDef.enableFiltering) !== 'undefined' ? colDef.enableFiltering : true;

    // Place the filter in the header cell by default
    self.filterContainer = typeof(colDef.filterContainer) !== 'undefined' ? colDef.filterContainer : self.grid.options.filterContainer;

    // self.menuItems = colDef.menuItems;
    self.setPropertyOrDefault(colDef, 'menuItems', []);

    // Use the column definition sort if we were passed it, but only if this is a newly added column
    if ( isNew ) {
      self.setPropertyOrDefault(colDef, 'sort');
    }

    // Use the column definition defaultSort always, unlike normal sort
    self.setPropertyOrDefault(colDef, 'defaultSort');

    // Set up default filters array for when one is not provided.
    //   In other words, this (in column def):
    //
    //       filter: { term: 'something', flags: {}, condition: [CONDITION] }
    //
    //   is just shorthand for this:
    //
    //       filters: [{ term: 'something', flags: {}, condition: [CONDITION] }]
    //
    var defaultFilters = [];
    if (colDef.filter) {
      defaultFilters.push(colDef.filter);
    }
    else if ( colDef.filters ) {
      defaultFilters = colDef.filters;
    }
    else {
      // Add an empty filter definition object, which will
      // translate to a guessed condition and no pre-populated
      // value for the filter <input>.
      defaultFilters.push({});
    }

    /**
     * @ngdoc property
     * @name filter
     * @propertyOf ui.grid.class:GridOptions.columnDef
     * @description Specify a single filter field on this column.
     *
     * A filter consists of a condition, a term, and a placeholder:
     *
     * - condition defines how rows are chosen as matching the filter term. This can be set to
     * one of the constants in {@link ui.grid.service:uiGridConstants#properties_filter uiGridConstants.filter},
     * or you can supply a custom filter function
     * that gets passed the following arguments: [searchTerm, cellValue, row, column].
     * - term: If set, the filter field will be pre-populated
     * with this value.
     * - placeholder: String that will be set to the `<input>.placeholder` attribute.
     * - ariaLabel: String that will be set to the `<input>.ariaLabel` attribute. This is what is read as a label to screen reader users.
     * - noTerm: set this to true if you have defined a custom function in condition, and
     * your custom function doesn't require a term (so it can run even when the term is null)
     * - rawTerm: set this to true if you have defined a custom function in condition, and
     * your custom function requires access to the raw unmodified search term that was entered
     * - flags: only flag currently available is `caseSensitive`, set to false if you don't want
     * case sensitive matching
     * - type: defaults to {@link ui.grid.service:uiGridConstants#properties_filter uiGridConstants.filter.INPUT},
     * which gives a text box.  If set to {@link ui.grid.service:uiGridConstants#properties_filter uiGridConstants.filter.SELECT}
     * then a select box will be shown with options selectOptions
     * - selectOptions: options in the format `[ { value: 1, label: 'male' }]`.  No i18n filter is provided, you need
     * to perform the i18n on the values before you provide them
     * - disableCancelFilterButton: defaults to false. If set to true then the 'x' button that cancels/clears the filter
     * will not be shown.
     * @example
     * <pre>$scope.gridOptions.columnDefs = [
     *   {
     *     field: 'field1',
     *     filter: {
     *       term: 'xx',
     *       condition: uiGridConstants.filter.STARTS_WITH,
     *       placeholder: 'starts with...',
     *       ariaLabel: 'Starts with filter for field1',
     *       flags: { caseSensitive: false },
     *       type: uiGridConstants.filter.SELECT,
     *       selectOptions: [ { value: 1, label: 'male' }, { value: 2, label: 'female' } ],
     *       disableCancelFilterButton: true
     *     }
     *   }
     * ]; </pre>
     *
     */

    // Only set filter if this is a newly added column, if we're updating an existing
    // column then we don't want to put the default filter back if the user may have already
    // removed it.
    // However, we do want to keep the settings if they change, just not the term
    if ( isNew ) {
      self.setPropertyOrDefault(colDef, 'filter');
      self.setPropertyOrDefault(colDef, 'extraStyle');
      self.setPropertyOrDefault(colDef, 'filters', defaultFilters);
    } else if ( self.filters.length === defaultFilters.length ) {
      self.filters.forEach( function( filter, index ) {
        if (typeof(defaultFilters[index].placeholder) !== 'undefined') {
          filter.placeholder = defaultFilters[index].placeholder;
        }
        if (typeof(defaultFilters[index].ariaLabel) !== 'undefined') {
          filter.ariaLabel = defaultFilters[index].ariaLabel;
        }
        if (typeof(defaultFilters[index].flags) !== 'undefined') {
          filter.flags = defaultFilters[index].flags;
        }
        if (typeof(defaultFilters[index].type) !== 'undefined') {
          filter.type = defaultFilters[index].type;
        }
        if (typeof(defaultFilters[index].selectOptions) !== 'undefined') {
          filter.selectOptions = defaultFilters[index].selectOptions;
        }
      });
    }
  };

  /**
   * @ngdoc function
   * @name unsort
   * @methodOf ui.grid.class:GridColumn
   * @description Removes column from the grid sorting
   */
  GridColumn.prototype.unsort = function () {
    // Decrease priority for every col where priority is higher than the removed sort's priority.
    var thisPriority = this.sort.priority;

    this.grid.columns.forEach(function (col) {
      if (col.sort && col.sort.priority !== undefined && col.sort.priority > thisPriority) {
        col.sort.priority -= 1;
      }
    });

    this.sort = {};
    this.grid.api.core.raise.sortChanged( this.grid, this.grid.getColumnSorting() );
  };


  /**
   * @ngdoc function
   * @name getColClass
   * @methodOf ui.grid.class:GridColumn
   * @description Returns the class name for the column
   * @param {bool} prefixDot  if true, will return .className instead of className
   */
  GridColumn.prototype.getColClass = function (prefixDot) {
    var cls = uiGridConstants.COL_CLASS_PREFIX + this.uid;

    return prefixDot ? '.' + cls : cls;
  };

    /**
     * @ngdoc function
     * @name isPinnedLeft
     * @methodOf ui.grid.class:GridColumn
     * @description Returns true if column is in the left render container
     */
    GridColumn.prototype.isPinnedLeft = function () {
      return this.renderContainer === 'left';
    };

    /**
     * @ngdoc function
     * @name isPinnedRight
     * @methodOf ui.grid.class:GridColumn
     * @description Returns true if column is in the right render container
     */
    GridColumn.prototype.isPinnedRight = function () {
      return this.renderContainer === 'right';
    };


    /**
   * @ngdoc function
   * @name getColClassDefinition
   * @methodOf ui.grid.class:GridColumn
   * @description Returns the class definition for th column
   */
  GridColumn.prototype.getColClassDefinition = function () {
    return ' .grid' + this.grid.id + ' ' + this.getColClass(true) + ' { min-width: ' + this.drawnWidth + 'px; max-width: ' + this.drawnWidth + 'px; }';
  };

  /**
   * @ngdoc function
   * @name getRenderContainer
   * @methodOf ui.grid.class:GridColumn
   * @description Returns the render container object that this column belongs to.
   *
   * Columns will be default be in the `body` render container if they aren't allocated to one specifically.
   */
  GridColumn.prototype.getRenderContainer = function getRenderContainer() {
    var self = this;

    var containerId = self.renderContainer;

    if (containerId === null || containerId === '' || containerId === undefined) {
      containerId = 'body';
    }

    return self.grid.renderContainers[containerId];
  };

  /**
   * @ngdoc function
   * @name showColumn
   * @methodOf ui.grid.class:GridColumn
   * @description Makes the column visible by setting colDef.visible = true
   */
  GridColumn.prototype.showColumn = function() {
      this.colDef.visible = true;
  };


  /**
   * @ngdoc property
   * @name aggregationHideLabel
   * @propertyOf ui.grid.class:GridOptions.columnDef
   * @description defaults to false, if set to true hides the label text
   * in the aggregation footer, so only the value is displayed.
   *
   */
  /**
   * @ngdoc function
   * @name getAggregationText
   * @methodOf ui.grid.class:GridColumn
   * @description Gets the aggregation label from colDef.aggregationLabel if
   * specified or by using i18n, including deciding whether or not to display
   * based on colDef.aggregationHideLabel.
   *
   * @param {string} label the i18n lookup value to use for the column label
   *
   */
  GridColumn.prototype.getAggregationText = function () {
    var self = this;
    if ( self.colDef.aggregationHideLabel ) {
      return '';
    }
    else if ( self.colDef.aggregationLabel ) {
      return self.colDef.aggregationLabel;
    }
    else {
      switch ( self.colDef.aggregationType ) {
        case uiGridConstants.aggregationTypes.count:
          return i18nService.getSafeText('aggregation.count');
        case uiGridConstants.aggregationTypes.sum:
          return i18nService.getSafeText('aggregation.sum');
        case uiGridConstants.aggregationTypes.avg:
          return i18nService.getSafeText('aggregation.avg');
        case uiGridConstants.aggregationTypes.min:
          return i18nService.getSafeText('aggregation.min');
        case uiGridConstants.aggregationTypes.max:
          return i18nService.getSafeText('aggregation.max');
        default:
          return '';
      }
    }
  };

  GridColumn.prototype.getCellTemplate = function () {
    var self = this;

    return self.cellTemplatePromise;
  };

  GridColumn.prototype.getCompiledElementFn = function () {
    var self = this;

    return self.compiledElementFnDefer.promise;
  };

  return GridColumn;
}]);

})();

(function() {
angular.module('ui.grid')
.factory('GridOptions', ['gridUtil','uiGridConstants', function(gridUtil, uiGridConstants) {

  /**
   * @ngdoc function
   * @name ui.grid.class:GridOptions
   * @description Default GridOptions class.  GridOptions are defined by the application developer and overlaid
   * over this object.  Setting gridOptions within your controller is the most common method for an application
   * developer to configure the behaviour of their ui-grid
   *
   * @example To define your gridOptions within your controller:
   * <pre>$scope.gridOptions = {
   *   data: $scope.myData,
   *   columnDefs: [
   *     { name: 'field1', displayName: 'pretty display name' },
   *     { name: 'field2', visible: false }
   *  ]
   * };</pre>
   *
   * You can then use this within your html template, when you define your grid:
   * <pre>&lt;div ui-grid="gridOptions"&gt;&lt;/div&gt;</pre>
   *
   * To provide default options for all of the grids within your application, use an angular
   * decorator to modify the GridOptions factory.
   * <pre>
   * app.config(function($provide) {
   *   $provide.decorator('GridOptions',function($delegate) {
   *     var gridOptions;
   *     gridOptions = angular.copy($delegate);
   *     gridOptions.initialize = function(options) {
   *       var initOptions;
   *       initOptions = $delegate.initialize(options);
   *       initOptions.enableColumnMenus = false;
   *       return initOptions;
   *     };
   *     return gridOptions;
   *   });
   * });
   * </pre>
   */
  return {
    initialize: function( baseOptions ) {
      /**
       * @ngdoc function
       * @name onRegisterApi
       * @propertyOf ui.grid.class:GridOptions
       * @description A callback that returns the gridApi once the grid is instantiated, which is
       * then used to interact with the grid programatically.
       *
       * Note that the gridApi.core.renderingComplete event is identical to this
       * callback, but has the advantage that it can be called from multiple places
       * if needed
       *
       * @example
       * <pre>
       *   $scope.gridOptions.onRegisterApi = function ( gridApi ) {
       *     $scope.gridApi = gridApi;
       *     $scope.gridApi.selection.selectAllRows( $scope.gridApi.grid );
       *   };
       * </pre>
       *
       */
      baseOptions.onRegisterApi = baseOptions.onRegisterApi || angular.noop();

      /**
       * @ngdoc object
       * @name data
       * @propertyOf ui.grid.class:GridOptions
       * @description (mandatory) Array of data to be rendered into the grid, providing the data source or data binding for
       * the grid.
       *
       * Most commonly the data is an array of objects, where each object has a number of attributes.
       * Each attribute automatically becomes a column in your grid.  This array could, for example, be sourced from
       * an angularJS $resource query request.  The array can also contain complex objects, refer the binding tutorial
       * for examples of that.
       *
       * The most flexible usage is to set your data on $scope:
       *
       * `$scope.data = data;`
       *
       * And then direct the grid to resolve whatever is in $scope.data:
       *
       * `$scope.gridOptions.data = 'data';`
       *
       * This is the most flexible approach as it allows you to replace $scope.data whenever you feel like it without
       * getting pointer issues.
       *
       * Alternatively you can directly set the data array:
       *
       * `$scope.gridOptions.data = [ ];`
       * or
       *
       * `$http.get('/data/100.json')
       * .success(function(data) {
       *   $scope.myData = data;
       *   $scope.gridOptions.data = $scope.myData;
       *  });`
       *
       * Where you do this, you need to take care in updating the data - you can't just update `$scope.myData` to some other
       * array, you need to update $scope.gridOptions.data to point to that new array as well.
       *
       */
      baseOptions.data = baseOptions.data || [];

      /**
       * @ngdoc array
       * @name columnDefs
       * @propertyOf  ui.grid.class:GridOptions
       * @description Array of columnDef objects.  Only required property is name.
       * The individual options available in columnDefs are documented in the
       * {@link ui.grid.class:GridOptions.columnDef columnDef} section
       * </br>_field property can be used in place of name for backwards compatibility with 2.x_
       *  @example
       *
       * <pre>var columnDefs = [{name: 'field1'}, {name: 'field2'}];</pre>
       *
       */
      baseOptions.columnDefs = baseOptions.columnDefs || [];

      /**
       * @ngdoc object
       * @name ui.grid.class:GridOptions.columnDef
       * @description Definition / configuration of an individual column, which would typically be
       * one of many column definitions within the gridOptions.columnDefs array
       * @example
       * <pre>{name: 'field1', field: 'field1', filter: { term: 'xxx' }}</pre>
       *
       */

      /**
       * @ngdoc object
       * @name enableGridMenu
       * @propertyOf ui.grid.class:GridOptions
       * @description Takes a boolean that adds a settings icon in the top right of the grid, which floats above
       * the column header, when true. The menu by default gives access to show/hide columns, but can be
       * customised to show additional actions.
       *
       * See the {@link #!/tutorial/121_grid_menu Grid Menu tutorial} for more detailed information.
       */

      /**
       * @ngdoc array
       * @name excludeProperties
       * @propertyOf ui.grid.class:GridOptions
       * @description Array of property names in data to ignore when auto-generating column names.  Provides the
       * inverse of columnDefs - columnDefs is a list of columns to include, excludeProperties is a list of columns
       * to exclude.
       *
       * If columnDefs is defined, this will be ignored.
       *
       * Defaults to ['$$hashKey']
       */

      baseOptions.excludeProperties = baseOptions.excludeProperties || ['$$hashKey'];

      /**
       * @ngdoc boolean
       * @name enableRowHashing
       * @propertyOf ui.grid.class:GridOptions
       * @description True by default. When enabled, this setting allows uiGrid to add
       * `$$hashKey`-type properties (similar to Angular) to elements in the `data` array. This allows
       * the grid to maintain state while vastly speeding up the process of altering `data` by adding/moving/removing rows.
       *
       * Note that this DOES add properties to your data that you may not want, but they are stripped out when using `angular.toJson()`. IF
       * you do not want this at all you can disable this setting but you will take a performance hit if you are using large numbers of rows
       * and are altering the data set often.
       */
      baseOptions.enableRowHashing = baseOptions.enableRowHashing !== false;

      /**
       * @ngdoc function
       * @name rowIdentity
       * @methodOf ui.grid.class:GridOptions
       * @description This function is used to get and, if necessary, set the value uniquely identifying this row (i.e. if an identity is not present it will set one).
       *
       * By default it returns the `$$hashKey` property if it exists. If it doesn't it uses gridUtil.nextUid() to generate one
       */
      baseOptions.rowIdentity = baseOptions.rowIdentity || function rowIdentity(row) {
        return gridUtil.hashKey(row);
      };

      /**
       * @ngdoc function
       * @name getRowIdentity
       * @methodOf ui.grid.class:GridOptions
       * @description This function returns the identity value uniquely identifying this row, if one is not present it does not set it.
       *
       * By default it returns the `$$hashKey` property but can be overridden to use any property or set of properties you want.
       */
      baseOptions.getRowIdentity = baseOptions.getRowIdentity || function getRowIdentity(row) {
        return row.$$hashKey;
      };

      /**
       * @ngdoc property
       * @name flatEntityAccess
       * @propertyOf ui.grid.class:GridOptions
       * @description Set to true if your columns are all related directly to fields in a flat object structure - i.e.
       * each of your columns associate directly with a property on each of the entities in your data array.
       *
       * In that situation we can avoid all the logic associated with complex binding to functions or to properties of sub-objects,
       * which can provide a significant speed improvement with large data sets when filtering or sorting.
       *
       * By default false
       */
      baseOptions.flatEntityAccess = baseOptions.flatEntityAccess === true;

      /**
       * @ngdoc property
       * @name showHeader
       * @propertyOf ui.grid.class:GridOptions
       * @description True by default. When set to false, this setting will replace the
       * standard header template with '<div></div>', resulting in no header being shown.
       */
      baseOptions.showHeader = typeof(baseOptions.showHeader) !== "undefined" ? baseOptions.showHeader : true;

      /**
       * @ngdoc property
       * @name headerRowHeight
       * @propertyOf ui.grid.class:GridOptions
       * @description The height of the header in pixels, defaults to 30.
       * Although, we recommend that you alter header height with CSS rather than using this option:
       *
       * <pre>
       *     .grid .ui-grid-header-cell {
       *         height: 60px;
       *     }
       * </pre>
       **/
      if (!baseOptions.showHeader) {
        baseOptions.headerRowHeight = 0;
      }
      else {
        baseOptions.headerRowHeight = typeof(baseOptions.headerRowHeight) !== "undefined" ? baseOptions.headerRowHeight : 30;
      }

      /**
       * @ngdoc property
       * @name rowHeight
       * @propertyOf ui.grid.class:GridOptions
       * @description The height of the row in pixels,  Can be passed as integer or string. defaults to 30.
       *
       */

      if (typeof baseOptions.rowHeight === "string") {
        baseOptions.rowHeight = parseInt(baseOptions.rowHeight) || 30;
      }

      else {
        baseOptions.rowHeight = baseOptions.rowHeight || 30;
      }

      /**
       * @ngdoc integer
       * @name minRowsToShow
       * @propertyOf ui.grid.class:GridOptions
       * @description Minimum number of rows to show when the grid doesn't have a defined height. Defaults to "10".
       */
      baseOptions.minRowsToShow = typeof(baseOptions.minRowsToShow) !== "undefined" ? baseOptions.minRowsToShow : 10;

      /**
       * @ngdoc property
       * @name showGridFooter
       * @propertyOf ui.grid.class:GridOptions
       * @description Whether or not to show the footer, defaults to false
       * The footer display Total Rows and Visible Rows (filtered rows)
       */
      baseOptions.showGridFooter = baseOptions.showGridFooter === true;

      /**
       * @ngdoc property
       * @name showColumnFooter
       * @propertyOf ui.grid.class:GridOptions
       * @description Whether or not to show the column footer, defaults to false
       * The column footer displays column aggregates
       */
      baseOptions.showColumnFooter = baseOptions.showColumnFooter === true;

      /**
       * @ngdoc property
       * @name columnFooterHeight
       * @propertyOf ui.grid.class:GridOptions
       * @description The height of the footer rows (column footer and grid footer) in pixels
       *
       */
      baseOptions.columnFooterHeight = typeof(baseOptions.columnFooterHeight) !== "undefined" ? baseOptions.columnFooterHeight : 30;
      baseOptions.gridFooterHeight = typeof(baseOptions.gridFooterHeight) !== "undefined" ? baseOptions.gridFooterHeight : 30;

      baseOptions.columnWidth = typeof(baseOptions.columnWidth) !== "undefined" ? baseOptions.columnWidth : 50;

      /**
       * @ngdoc property
       * @name maxVisibleColumnCount
       * @propertyOf ui.grid.class:GridOptions
       * @description Defaults to 200
       *
       */
      baseOptions.maxVisibleColumnCount = typeof(baseOptions.maxVisibleColumnCount) !== "undefined" ? baseOptions.maxVisibleColumnCount : 200;

      /**
       * @ngdoc property
       * @name virtualizationThreshold
       * @propertyOf ui.grid.class:GridOptions
       * @description Turn virtualization on when number of data elements goes over this number, defaults to 20
       */
      baseOptions.virtualizationThreshold = typeof(baseOptions.virtualizationThreshold) !== "undefined" ? baseOptions.virtualizationThreshold : 20;

      /**
       * @ngdoc property
       * @name columnVirtualizationThreshold
       * @propertyOf ui.grid.class:GridOptions
       * @description Turn virtualization on when number of columns goes over this number, defaults to 10
       */
      baseOptions.columnVirtualizationThreshold = typeof(baseOptions.columnVirtualizationThreshold) !== "undefined" ? baseOptions.columnVirtualizationThreshold : 10;

      /**
       * @ngdoc property
       * @name excessRows
       * @propertyOf ui.grid.class:GridOptions
       * @description Extra rows to to render outside of the viewport, which helps with smoothness of scrolling.
       * Defaults to 4
       */
      baseOptions.excessRows = typeof(baseOptions.excessRows) !== "undefined" ? baseOptions.excessRows : 4;

      /**
       * @ngdoc property
       * @name scrollThreshold
       * @propertyOf ui.grid.class:GridOptions
       * @description Throttles the grid scrolling by the amount of rows set, which helps with smoothness of scrolling.
       * Defaults to 4.
       */
      baseOptions.scrollThreshold = typeof(baseOptions.scrollThreshold) !== "undefined" ? baseOptions.scrollThreshold : 4;

      /**
       * @ngdoc property
       * @name excessColumns
       * @propertyOf ui.grid.class:GridOptions
       * @description Extra columns to to render outside of the viewport, which helps with smoothness of scrolling.
       * Defaults to 4
       */
      baseOptions.excessColumns = typeof(baseOptions.excessColumns) !== "undefined" ? baseOptions.excessColumns : 4;

      /**
       * @ngdoc property
       * @name aggregationCalcThrottle
       * @propertyOf ui.grid.class:GridOptions
       * @description Default time in milliseconds to throttle aggregation calcuations, defaults to 500ms
       */
      baseOptions.aggregationCalcThrottle = typeof(baseOptions.aggregationCalcThrottle) !== "undefined" ? baseOptions.aggregationCalcThrottle : 500;

      /**
       * @ngdoc property
       * @name wheelScrollThrottle
       * @propertyOf ui.grid.class:GridOptions
       * @description Default time in milliseconds to throttle scroll events to, defaults to 70ms
       */
      baseOptions.wheelScrollThrottle = typeof(baseOptions.wheelScrollThrottle) !== "undefined" ? baseOptions.wheelScrollThrottle : 70;


      /**
       * @ngdoc property
       * @name scrollDebounce
       * @propertyOf ui.grid.class:GridOptions
       * @description Default time in milliseconds to debounce scroll events, defaults to 300ms
       */
      baseOptions.scrollDebounce = typeof(baseOptions.scrollDebounce) !== "undefined" ? baseOptions.scrollDebounce : 300;

      /**
       * @ngdoc boolean
       * @name enableSorting
       * @propertyOf ui.grid.class:GridOptions
       * @description True by default. When enabled, this setting adds sort
       * widgets to the column headers, allowing sorting of the data for the entire grid.
       * Sorting can then be disabled / enabled on individual columns using the columnDefs,
       * if it set, it will override GridOptions enableSorting setting.
       */
      baseOptions.enableSorting = baseOptions.enableSorting !== false;

      /**
       * @ngdoc boolean
       * @name enableFiltering
       * @propertyOf ui.grid.class:GridOptions
       * @description False by default. When enabled, this setting adds filter
       * boxes to each column header, allowing filtering within the column for the entire grid.
       * Filtering can then be disabled on individual columns using the columnDefs.
       */
      baseOptions.enableFiltering = baseOptions.enableFiltering === true;

      /**
       * @ngdoc string
       * @name filterContainer
       * @propertyOf ui.grid.class:GridOptions
       * @description Sets the parent element for the column filter. `headerCell` places
       * it in the header cell. `columnMenu` places it in the column menu.
       * Can be changed for individual columns using the columnDefs.
       * Defaults to `headerCell`
       */
      baseOptions.filterContainer = typeof(baseOptions.filterContainer) !== "undefined" ? baseOptions.filterContainer : "headerCell";

      /**
       * @ngdoc boolean
       * @name enableColumnMenus
       * @propertyOf ui.grid.class:GridOptions
       * @description True by default. When enabled, this setting displays a column
       * menu within each column.
       * By default column menu's trigger is hidden before mouse over, but you can always force it to be visible with CSS:
       *
       * <pre>
       *  .ui-grid-column-menu-button {
       *    display: block;
       *  }
       * </pre>
       */
      baseOptions.enableColumnMenus = baseOptions.enableColumnMenus !== false;

      /**
       * @ngdoc boolean
       * @name enableVerticalScrollbar
       * @propertyOf ui.grid.class:GridOptions
       * @description {@link ui.grid.service:uiGridConstants#properties_scrollbars uiGridConstants.scrollbars.ALWAYS} by default.
       * This settings controls the vertical scrollbar for the grid.
       * Supported values: uiGridConstants.scrollbars.ALWAYS, uiGridConstants.scrollbars.NEVER, uiGridConstants.scrollbars.WHEN_NEEDED
       */
      baseOptions.enableVerticalScrollbar = typeof(baseOptions.enableVerticalScrollbar) !== "undefined" ? baseOptions.enableVerticalScrollbar : uiGridConstants.scrollbars.ALWAYS;

      /**
       * @ngdoc boolean
       * @name enableHorizontalScrollbar
       * @propertyOf ui.grid.class:GridOptions
       * @description {@link ui.grid.service:uiGridConstants#properties_scrollbars uiGridConstants.scrollbars.ALWAYS} by default.
       * This settings controls the horizontal scrollbar for the grid.
       * Supported values: uiGridConstants.scrollbars.ALWAYS, uiGridConstants.scrollbars.NEVER, uiGridConstants.scrollbars.WHEN_NEEDED
       */
      baseOptions.enableHorizontalScrollbar = typeof(baseOptions.enableHorizontalScrollbar) !== "undefined" ? baseOptions.enableHorizontalScrollbar : uiGridConstants.scrollbars.ALWAYS;

      /**
       * @ngdoc boolean
       * @name enableMinHeightCheck
       * @propertyOf ui.grid.class:GridOptions
       * @description True by default. When enabled, a newly initialized grid will check to see if it is tall enough to display
       * at least one row of data.  If the grid is not tall enough, it will resize the DOM element to display minRowsToShow number
       * of rows.
       */
       baseOptions.enableMinHeightCheck = baseOptions.enableMinHeightCheck !== false;

      /**
       * @ngdoc boolean
       * @name minimumColumnSize
       * @propertyOf ui.grid.class:GridOptions
       * @description Sets the default minimum column width, in other words,
       * it defines the default value for a column minWidth attribute if that is not otherwise specified.
       * Should be a number. Defaults to 30 pixels.
       */
      baseOptions.minimumColumnSize = typeof(baseOptions.minimumColumnSize) !== "undefined" ? baseOptions.minimumColumnSize : 30;

      /**
       * @ngdoc function
       * @name rowEquality
       * @methodOf ui.grid.class:GridOptions
       * @description By default, rows are compared using object equality.  This option can be overridden
       * to compare on any data item property or function
       * @param {object} entityA First Data Item to compare
       * @param {object} entityB Second Data Item to compare
       */
      baseOptions.rowEquality = baseOptions.rowEquality || function(entityA, entityB) {
        return entityA === entityB;
      };

      /**
       * @ngdoc string
       * @name headerTemplate
       * @propertyOf ui.grid.class:GridOptions
       * @description Null by default. When provided, this setting uses a custom header
       * template, rather than the default template. Can be set to either the name of a template file:
       * <pre>  $scope.gridOptions.headerTemplate = 'header_template.html';</pre>
       * inline html
       * <pre>  $scope.gridOptions.headerTemplate = '<div class="ui-grid-top-panel" style="text-align: center">I am a Custom Grid Header</div>'</pre>
       * or the id of a precompiled template (TBD how to use this).
       * </br>Refer to the custom header tutorial for more information.
       * If you want no header at all, you can set to an empty div:
       * <pre>  $scope.gridOptions.headerTemplate = '<div></div>';</pre>
       *
       * If you want to only have a static header, then you can set to static content.  If
       * you want to tailor the existing column headers, then you should look at the
       * current 'ui-grid-header.html' template in github as your starting point.
       *
       */
      baseOptions.headerTemplate = baseOptions.headerTemplate || null;

      /**
       * @ngdoc string
       * @name footerTemplate
       * @propertyOf ui.grid.class:GridOptions
       * @description (optional) ui-grid/ui-grid-footer by default.  This footer shows the per-column
       * aggregation totals.
       * When provided, this setting uses a custom footer template. Can be set to either the name of a template file 'footer_template.html', inline html
       * <pre>'<div class="ui-grid-bottom-panel" style="text-align: center">I am a Custom Grid Footer</div>'</pre>, or the id
       * of a precompiled template (TBD how to use this).  Refer to the custom footer tutorial for more information.
       */
      baseOptions.footerTemplate = baseOptions.footerTemplate || 'ui-grid/ui-grid-footer';

      /**
       * @ngdoc string
       * @name gridFooterTemplate
       * @propertyOf ui.grid.class:GridOptions
       * @description (optional) ui-grid/ui-grid-grid-footer by default. This template by default shows the
       * total items at the bottom of the grid, and the selected items if selection is enabled.
       */
      baseOptions.gridFooterTemplate = baseOptions.gridFooterTemplate || 'ui-grid/ui-grid-grid-footer';

      /**
       * @ngdoc string
       * @name rowTemplate
       * @propertyOf ui.grid.class:GridOptions
       * @description 'ui-grid/ui-grid-row' by default. When provided, this setting uses a
       * custom row template.  Can be set to either the name of a template file:
       * <pre> $scope.gridOptions.rowTemplate = 'row_template.html';</pre>
       * inline html
       * <pre>  $scope.gridOptions.rowTemplate = '<div style="background-color: aquamarine" ng-click="grid.appScope.fnOne(row)" ng-repeat="col in colContainer.renderedColumns track by col.colDef.name" class="ui-grid-cell" ui-grid-cell></div>';</pre>
       * or the id of a precompiled template (TBD how to use this) can be provided.
       * </br>Refer to the custom row template tutorial for more information.
       */
      baseOptions.rowTemplate = baseOptions.rowTemplate || 'ui-grid/ui-grid-row';

      /**
      * @ngdoc string
      * @name gridMenuTemplate
      * @propertyOf ui.grid.class:GridOptions
      * @description 'ui-grid/uiGridMenu' by default. When provided, this setting uses a
      * custom grid menu template.
      */
      baseOptions.gridMenuTemplate = baseOptions.gridMenuTemplate || 'ui-grid/uiGridMenu';

            /**
       * @ngdoc string
       * @name menuButtonTemplate
       * @propertyOf ui.grid.class:GridOptions
       * @description 'ui-grid/ui-grid-menu-button' by default. When provided, this setting uses a custom grid menu button
       * template. Can be set to either the name of a template file 'menuButton_template.html', inline html
       * <pre>'<div class="ui-grid-menu-button" ng-click="customToggleMenu()"><div class="ui-grid-icon-container"><i class="ui-grid-icon=menu">&nbsp;</i></div></div><div ui-grid-menu menu-items="menuItems"></div>'</pre>, or the id
       * of a precompiled template (TBD how to use this).  Refer to the custom footer tutorial for more information.
       */
      baseOptions.menuButtonTemplate = baseOptions.menuButtonTemplate || 'ui-grid/ui-grid-menu-button';

      /**
       * @ngdoc string
       * @name menuItemTemplate
       * @propertyOf ui.grid.class:GridOptions
       * @description 'ui-grid/uiGridMenuItem' by default. When provided, this setting uses a custom grid menu item
       * template. Can be set to either the name of a template file 'menuItem_template.html', inline html
       * <pre>'<li class="ui-grid-menu-item"><label>{{name}}</label></li>'</pre>, or the id
       * of a precompiled template (TBD how to use this).  Refer to the custom footer tutorial for more information.
       */
      baseOptions.menuItemTemplate = baseOptions.menuItemTemplate || 'ui-grid/uiGridMenuItem';

      /**
       * @ngdoc object
       * @name appScopeProvider
       * @propertyOf ui.grid.class:GridOptions
       * @description by default, the parent scope of the ui-grid element will be assigned to grid.appScope
       * this property allows you to assign any reference you want to grid.appScope
       */
      baseOptions.appScopeProvider = baseOptions.appScopeProvider || null;

      return baseOptions;
    }
  };
}]);
})();

(function() {

angular.module('ui.grid')

  /**
   * @ngdoc function
   * @name ui.grid.class:GridRenderContainer
   * @description The grid has render containers, allowing the ability to have pinned columns.  If the grid
   * is right-to-left then there may be a right render container, if left-to-right then there may
   * be a left render container.  There is always a body render container.
   * @param {string} name The name of the render container ('body', 'left', or 'right')
   * @param {Grid} grid the grid the render container is in
   * @param {object} options the render container options
   */
.factory('GridRenderContainer', ['gridUtil', 'uiGridConstants', function(gridUtil, uiGridConstants) {
  function GridRenderContainer(name, grid, options) {
    var self = this;

    // if (gridUtil.type(grid) !== 'Grid') {
    //   throw new Error('Grid argument is not a Grid object');
    // }

    self.name = name;

    self.grid = grid;

    // self.rowCache = [];
    // self.columnCache = [];

    self.visibleRowCache = [];
    self.visibleColumnCache = [];

    self.renderedRows = [];
    self.renderedColumns = [];

    self.prevScrollTop = 0;
    self.prevScrolltopPercentage = 0;
    self.prevRowScrollIndex = 0;

    self.prevScrollLeft = 0;
    self.prevScrollleftPercentage = 0;
    self.prevColumnScrollIndex = 0;

    self.columnStyles = '';

    self.viewportAdjusters = [];

    /**
     *  @ngdoc boolean
     *  @name hasHScrollbar
     *  @propertyOf  ui.grid.class:GridRenderContainer
     *  @description flag to signal that container has a horizontal scrollbar
     */
    self.hasHScrollbar = false;

    /**
     *  @ngdoc boolean
     *  @name hasVScrollbar
     *  @propertyOf  ui.grid.class:GridRenderContainer
     *  @description flag to signal that container has a vertical scrollbar
     */
    self.hasVScrollbar = false;

    /**
     *  @ngdoc boolean
     *  @name canvasHeightShouldUpdate
     *  @propertyOf  ui.grid.class:GridRenderContainer
     *  @description flag to signal that container should recalculate the canvas size
     */
    self.canvasHeightShouldUpdate = true;

    /**
     *  @ngdoc boolean
     *  @name canvasHeight
     *  @propertyOf  ui.grid.class:GridRenderContainer
     *  @description last calculated canvas height value
     */
    self.$$canvasHeight = 0;

    if (options && angular.isObject(options)) {
      angular.extend(self, options);
    }

    grid.registerStyleComputation({
      priority: 5,
      func: function () {
        self.updateColumnWidths();
        return self.columnStyles;
      }
    });
  }


  GridRenderContainer.prototype.reset = function reset() {
    // this.rowCache.length = 0;
    // this.columnCache.length = 0;

    this.visibleColumnCache.length = 0;
    this.visibleRowCache.length = 0;

    this.renderedRows.length = 0;
    this.renderedColumns.length = 0;
  };

  // TODO(c0bra): calculate size?? Should this be in a stackable directive?


  GridRenderContainer.prototype.containsColumn = function (col) {
     return this.visibleColumnCache.indexOf(col) !== -1;
  };

  GridRenderContainer.prototype.minRowsToRender = function minRowsToRender() {
    var self = this;
    var minRows = 0;
    var rowAddedHeight = 0;
    var viewPortHeight = self.getViewportHeight();
    for (var i = self.visibleRowCache.length - 1; rowAddedHeight < viewPortHeight && i >= 0; i--) {
      rowAddedHeight += self.visibleRowCache[i].height;
      minRows++;
    }
    return minRows;
  };

  GridRenderContainer.prototype.minColumnsToRender = function minColumnsToRender() {
    var self = this;
    var viewportWidth = this.getViewportWidth();

    var min = 0;
    var totalWidth = 0;

    for (var i = 0; i < self.visibleColumnCache.length; i++) {
      var col = self.visibleColumnCache[i];

      if (totalWidth < viewportWidth) {
        totalWidth += col.drawnWidth ? col.drawnWidth : 0;
        min++;
      }
      else {
        var currWidth = 0;
        for (var j = i; j >= i - min; j--) {
          currWidth += self.visibleColumnCache[j].drawnWidth ? self.visibleColumnCache[j].drawnWidth : 0;
        }
        if (currWidth < viewportWidth) {
          min++;
        }
      }
    }

    return min;
  };

  GridRenderContainer.prototype.getVisibleRowCount = function getVisibleRowCount() {
    return this.visibleRowCache.length;
  };

  /**
   * @ngdoc function
   * @name registerViewportAdjuster
   * @methodOf ui.grid.class:GridRenderContainer
   * @description Registers an adjuster to the render container's available width or height.  Adjusters are used
   * to tell the render container that there is something else consuming space, and to adjust it's size
   * appropriately.
   * @param {function} func the adjuster function we want to register
   */

  GridRenderContainer.prototype.registerViewportAdjuster = function registerViewportAdjuster(func) {
    this.viewportAdjusters.push(func);
  };

  /**
   * @ngdoc function
   * @name removeViewportAdjuster
   * @methodOf ui.grid.class:GridRenderContainer
   * @description Removes an adjuster, should be used when your element is destroyed
   * @param {function} func the adjuster function we want to remove
   */
  GridRenderContainer.prototype.removeViewportAdjuster = function removeViewportAdjuster(func) {
    var idx = this.viewportAdjusters.indexOf(func);

    if (idx > -1) {
      this.viewportAdjusters.splice(idx, 1);
    }
  };

  /**
   * @ngdoc function
   * @name getViewportAdjustment
   * @methodOf ui.grid.class:GridRenderContainer
   * @description Gets the adjustment based on the viewportAdjusters.
   * @returns {object} a hash of { height: x, width: y }.  Usually the values will be negative
   */
  GridRenderContainer.prototype.getViewportAdjustment = function getViewportAdjustment() {
    var self = this;

    var adjustment = { height: 0, width: 0 };

    self.viewportAdjusters.forEach(function (func) {
      adjustment = func.call(this, adjustment);
    });

    return adjustment;
  };

  GridRenderContainer.prototype.getMargin = function getMargin(side) {
    var self = this;

    var amount = 0;

    self.viewportAdjusters.forEach(function (func) {
      var adjustment = func.call(this, { height: 0, width: 0 });

      if (adjustment.side && adjustment.side === side) {
        amount += adjustment.width * -1;
      }
    });

    return amount;
  };

  GridRenderContainer.prototype.getViewportHeight = function getViewportHeight() {
    var self = this;

    var headerHeight = (self.headerHeight) ? self.headerHeight : self.grid.headerHeight;

    var viewPortHeight = self.grid.gridHeight - headerHeight - self.grid.footerHeight;


    var adjustment = self.getViewportAdjustment();

    viewPortHeight = viewPortHeight + adjustment.height;

    return viewPortHeight;
  };

  GridRenderContainer.prototype.getViewportWidth = function getViewportWidth() {
    var self = this;

    var viewportWidth = self.grid.gridWidth;

    // if (typeof(self.grid.verticalScrollbarWidth) !== 'undefined' && self.grid.verticalScrollbarWidth !== undefined &&
    //  self.grid.verticalScrollbarWidth > 0) {
    //   viewPortWidth = viewPortWidth - self.grid.verticalScrollbarWidth;
    // }

    // var viewportWidth = 0;\
    // self.visibleColumnCache.forEach(function (column) {
    //   viewportWidth += column.drawnWidth;
    // });

    var adjustment = self.getViewportAdjustment();

    viewportWidth = viewportWidth + adjustment.width;

    return viewportWidth;
  };

  GridRenderContainer.prototype.getHeaderViewportWidth = function getHeaderViewportWidth() {
    return this.getViewportWidth();
  };


  /**
   * @ngdoc function
   * @name getCanvasHeight
   * @methodOf ui.grid.class:GridRenderContainer
   * @description Returns the total canvas height.   Only recalculates if canvasHeightShouldUpdate = false
   * @returns {number} total height of all the visible rows in the container
   */
  GridRenderContainer.prototype.getCanvasHeight = function getCanvasHeight() {
    var self = this;

    if (!self.canvasHeightShouldUpdate) {
      return self.$$canvasHeight;
    }

    var oldCanvasHeight = self.$$canvasHeight;

    self.$$canvasHeight = 0;

    self.visibleRowCache.forEach(function(row) {
      self.$$canvasHeight += row.height;
    });


    self.canvasHeightShouldUpdate = false;

    self.grid.api.core.raise.canvasHeightChanged(oldCanvasHeight, self.$$canvasHeight);

    return self.$$canvasHeight;
  };

  GridRenderContainer.prototype.getVerticalScrollLength = function getVerticalScrollLength() {
    return this.getCanvasHeight() - this.getViewportHeight() + this.grid.scrollbarHeight !== 0 ? this.getCanvasHeight() - this.getViewportHeight() + this.grid.scrollbarHeight : -1;
  };

  GridRenderContainer.prototype.getHorizontalScrollLength = function getHorizontalScrollLength() {
    return this.getCanvasWidth() - this.getViewportWidth() + this.grid.scrollbarWidth !== 0 ? this.getCanvasWidth() - this.getViewportWidth() + this.grid.scrollbarWidth : -1;
  };

  GridRenderContainer.prototype.getCanvasWidth = function getCanvasWidth() {
    var self = this;

    return self.canvasWidth;
  };

  GridRenderContainer.prototype.setRenderedRows = function setRenderedRows(newRows) {
    this.renderedRows.length = newRows.length;
    for (var i = 0; i < newRows.length; i++) {
      this.renderedRows[i] = newRows[i];
    }
  };

  GridRenderContainer.prototype.setRenderedColumns = function setRenderedColumns(newColumns) {
    // OLD:
    this.renderedColumns.length = newColumns.length;
    for (var i = 0; i < newColumns.length; i++) {
      this.renderedColumns[i] = newColumns[i];
    }

    this.updateColumnOffset();
  };

  GridRenderContainer.prototype.updateColumnOffset = function updateColumnOffset() {
    // Calculate the width of the columns on the left side that are no longer rendered.
    //  That will be the offset for the columns as we scroll horizontally.
    var hiddenColumnsWidth = 0;
    for (var i = 0; i < this.currentFirstColumn; i++) {
      hiddenColumnsWidth += this.visibleColumnCache[i].drawnWidth;
    }

    this.columnOffset = hiddenColumnsWidth;
  };

  GridRenderContainer.prototype.scrollVertical = function (newScrollTop) {
    var vertScrollPercentage = -1;

    if (newScrollTop !== this.prevScrollTop) {
      var yDiff = newScrollTop - this.prevScrollTop;

      if (yDiff > 0 ) { this.grid.scrollDirection = uiGridConstants.scrollDirection.DOWN; }
      if (yDiff < 0 ) { this.grid.scrollDirection = uiGridConstants.scrollDirection.UP; }

      var vertScrollLength = this.getVerticalScrollLength();

      vertScrollPercentage = newScrollTop / vertScrollLength;

      if (vertScrollPercentage > 1) { vertScrollPercentage = 1; }
      if (vertScrollPercentage < 0) { vertScrollPercentage = 0; }

      this.adjustScrollVertical(newScrollTop, vertScrollPercentage);
      return vertScrollPercentage;
    }
  };

  GridRenderContainer.prototype.scrollHorizontal = function(newScrollLeft) {
    var horizScrollPercentage = -1;

    // Handle RTL here
    if (newScrollLeft !== this.prevScrollLeft) {
      var xDiff = newScrollLeft - this.prevScrollLeft;

      if (xDiff > 0) { this.grid.scrollDirection = uiGridConstants.scrollDirection.RIGHT; }
      if (xDiff < 0) { this.grid.scrollDirection = uiGridConstants.scrollDirection.LEFT; }

      var horizScrollLength = this.getHorizontalScrollLength();
      if (horizScrollLength !== 0) {
        horizScrollPercentage = newScrollLeft / horizScrollLength;
      }
      else {
        horizScrollPercentage = 0;
      }

      this.adjustScrollHorizontal(newScrollLeft, horizScrollPercentage);
      return horizScrollPercentage;
    }
  };

  GridRenderContainer.prototype.adjustScrollVertical = function adjustScrollVertical(scrollTop, scrollPercentage, force) {
    if (this.prevScrollTop === scrollTop && !force) {
      return;
    }

    if (typeof(scrollTop) === 'undefined' || scrollTop === undefined || scrollTop === null) {
      scrollTop = (this.getCanvasHeight() - this.getViewportHeight()) * scrollPercentage;
    }

    this.adjustRows(scrollTop, scrollPercentage, false);

    this.prevScrollTop = scrollTop;
    this.prevScrolltopPercentage = scrollPercentage;

    this.grid.queueRefresh();
  };

  GridRenderContainer.prototype.adjustScrollHorizontal = function adjustScrollHorizontal(scrollLeft, scrollPercentage, force) {
    if (this.prevScrollLeft === scrollLeft && !force) {
      return;
    }

    if (typeof(scrollLeft) === 'undefined' || scrollLeft === undefined || scrollLeft === null) {
      scrollLeft = (this.getCanvasWidth() - this.getViewportWidth()) * scrollPercentage;
    }

    this.adjustColumns(scrollLeft, scrollPercentage);

    this.prevScrollLeft = scrollLeft;
    this.prevScrollleftPercentage = scrollPercentage;

    this.grid.queueRefresh();
  };

  GridRenderContainer.prototype.adjustRows = function adjustRows(scrollTop, scrollPercentage, postDataLoaded) {
    var self = this;

    var minRows = self.minRowsToRender();

    var rowCache = self.visibleRowCache;

    var maxRowIndex = rowCache.length - minRows;

    // Calculate the scroll percentage according to the scrollTop location, if no percentage was provided
    if ((typeof(scrollPercentage) === 'undefined' || scrollPercentage === null) && scrollTop) {
      scrollPercentage = scrollTop / self.getVerticalScrollLength();
    }

    var rowIndex = Math.ceil(Math.min(maxRowIndex, maxRowIndex * scrollPercentage));

    // Define a max row index that we can't scroll past
    if (rowIndex > maxRowIndex) {
      rowIndex = maxRowIndex;
    }

    var newRange = [];
    if (rowCache.length > self.grid.options.virtualizationThreshold) {
      if (!(typeof(scrollTop) === 'undefined' || scrollTop === null)) {
        // Have we hit the threshold going down?
        if ( !self.grid.suppressParentScrollDown && self.prevScrollTop < scrollTop && rowIndex < self.prevRowScrollIndex + self.grid.options.scrollThreshold && rowIndex < maxRowIndex) {
          return;
        }
        // Have we hit the threshold going up?
        if ( !self.grid.suppressParentScrollUp && self.prevScrollTop > scrollTop && rowIndex > self.prevRowScrollIndex - self.grid.options.scrollThreshold && rowIndex < maxRowIndex) {
          return;
        }
      }

      var rangeStart = Math.max(0, rowIndex - self.grid.options.excessRows);
      var rangeEnd = Math.min(rowCache.length, rowIndex + minRows + self.grid.options.excessRows);

      newRange = [rangeStart, rangeEnd];
    }
    else {
      var maxLen = self.visibleRowCache.length;
      newRange = [0, Math.max(maxLen, minRows + self.grid.options.excessRows)];
    }

    self.updateViewableRowRange(newRange);

    self.prevRowScrollIndex = rowIndex;
  };

  GridRenderContainer.prototype.adjustColumns = function adjustColumns(scrollLeft, scrollPercentage) {
    var self = this;

    var minCols = self.minColumnsToRender();

    var columnCache = self.visibleColumnCache;
    var maxColumnIndex = columnCache.length - minCols;

    // Calculate the scroll percentage according to the scrollLeft location, if no percentage was provided
    if ((typeof(scrollPercentage) === 'undefined' || scrollPercentage === null) && scrollLeft) {
      scrollPercentage = scrollLeft / self.getHorizontalScrollLength();
    }

    var colIndex = Math.ceil(Math.min(maxColumnIndex, maxColumnIndex * scrollPercentage));

    // Define a max row index that we can't scroll past
    if (colIndex > maxColumnIndex) {
      colIndex = maxColumnIndex;
    }

    var newRange = [];
    if (columnCache.length > self.grid.options.columnVirtualizationThreshold && self.getCanvasWidth() > self.getViewportWidth()) {
      var rangeStart = Math.max(0, colIndex - self.grid.options.excessColumns);
      var rangeEnd = Math.min(columnCache.length, colIndex + minCols + self.grid.options.excessColumns);

      newRange = [rangeStart, rangeEnd];
    }
    else {
      var maxLen = self.visibleColumnCache.length;

      newRange = [0, Math.max(maxLen, minCols + self.grid.options.excessColumns)];
    }

    self.updateViewableColumnRange(newRange);

    self.prevColumnScrollIndex = colIndex;
  };

  // Method for updating the visible rows
  GridRenderContainer.prototype.updateViewableRowRange = function updateViewableRowRange(renderedRange) {
    // Slice out the range of rows from the data
    // var rowArr = uiGridCtrl.grid.rows.slice(renderedRange[0], renderedRange[1]);
    var rowArr = this.visibleRowCache.slice(renderedRange[0], renderedRange[1]);

    // Define the top-most rendered row
    this.currentTopRow = renderedRange[0];

    this.setRenderedRows(rowArr);
  };

  // Method for updating the visible columns
  GridRenderContainer.prototype.updateViewableColumnRange = function updateViewableColumnRange(renderedRange) {
    // Slice out the range of rows from the data
    // var columnArr = uiGridCtrl.grid.columns.slice(renderedRange[0], renderedRange[1]);
    var columnArr = this.visibleColumnCache.slice(renderedRange[0], renderedRange[1]);

    // Define the left-most rendered columns
    this.currentFirstColumn = renderedRange[0];

    this.setRenderedColumns(columnArr);
  };

  GridRenderContainer.prototype.headerCellWrapperStyle = function () {
    var self = this;

    if (self.currentFirstColumn !== 0) {
      var offset = self.columnOffset;

      if (self.grid.isRTL()) {
        return { 'margin-right': offset + 'px' };
      }
      else {
        return { 'margin-left': offset + 'px' };
      }
    }

    return null;
  };

    /**
     *  @ngdoc boolean
     *  @name updateColumnWidths
     *  @propertyOf  ui.grid.class:GridRenderContainer
     *  @description Determine the appropriate column width of each column across all render containers.
     *
     *  Column width is easy when each column has a specified width.  When columns are variable width (i.e.
     *  have an * or % of the viewport) then we try to calculate so that things fit in.  The problem is that
     *  we have multiple render containers, and we don't want one render container to just take the whole viewport
     *  when it doesn't need to - we want things to balance out across the render containers.
     *
     *  To do this, we use this method to calculate all the renderContainers, recognising that in a given render
     *  cycle it'll get called once per render container, so it needs to return the same values each time.
     *
     *  The constraints on this method are therefore:
     *  - must return the same value when called multiple times, to do this it needs to rely on properties of the
     *    columns, but not properties that change when this is called (so it shouldn't rely on drawnWidth)
     *
     *  The general logic of this method is:
     *  - calculate our total available width
     *  - look at all the columns across all render containers, and work out which have widths and which have
     *    constraints such as % or * or something else
     *  - for those with *, count the total number of * we see and add it onto a running total, add this column to an * array
     *  - for those with a %, allocate the % as a percentage of the viewport, having consideration of min and max
     *  - for those with manual width (in pixels) we set the drawnWidth to the specified width
     *  - we end up with an asterisks array still to process
     *  - we look at our remaining width.  If it's greater than zero, we divide it up among the asterisk columns, then process
     *    them for min and max width constraints
     *  - if it's zero or less, we set the asterisk columns to their minimum widths
     *  - we use parseInt quite a bit, as we try to make all our column widths integers
     */
  GridRenderContainer.prototype.updateColumnWidths = function () {
    var self = this;

    var asterisksArray = [],
        asteriskNum = 0,
        usedWidthSum = 0,
        ret = '',
        pinRightColumn = false,
        fixedNumberArray = [],
        percentageArray = [],
        totalPercentage = 0;

    // Get the width of the viewport
    var availableWidth = self.grid.getViewportWidth() - self.grid.scrollbarWidth;

    // get all the columns across all render containers, we have to calculate them all or one render container
    // could consume the whole viewport
    var columnCache = [];
    angular.forEach(self.grid.renderContainers, function (container) {
      columnCache = columnCache.concat(container.visibleColumnCache);
    });

    // look at each column, process any manual values or %, put the * into an array to look at later
    columnCache.forEach(function (column) {
      var width = 0;
      // Skip hidden columns
      if (!column.visible) { return; }

      if (pinRightColumn) {
        availableWidth += self.grid.scrollbarWidth;
      }

      if (!pinRightColumn && column.colDef.pinnedRight) {
        pinRightColumn = true;
      }

      if (angular.isNumber(column.width)) {
        // pixel width, set to this value
        width = parseInt(column.width, 10);
        usedWidthSum = usedWidthSum + width;
        column.drawnWidth = width;

        fixedNumberArray.push(column);
      } else if (gridUtil.endsWith(column.width, '%')) {
        // percentage width, set to percentage of the viewport
        // round down to int - some browsers don't play nice with float maxWidth
        var percentageIntegerValue = parseInt(column.width.replace(/%/g, ''), 10);
        width = parseInt(percentageIntegerValue / 100 * availableWidth);

        if (width > column.maxWidth) {
          width = column.maxWidth;
        }

        if (width < column.minWidth) {
          width = column.minWidth;
        }

        usedWidthSum = usedWidthSum + width;
        column.drawnWidth = width;

        totalPercentage = totalPercentage + percentageIntegerValue;
        percentageArray.push(column);
      } else if (angular.isString(column.width) && column.width.indexOf('*') !== -1) {
        // is an asterisk column, the gridColumn already checked the string consists only of '****'
        asteriskNum = asteriskNum + column.width.length;
        asterisksArray.push(column);
      }
    });

    // Get the remaining width (available width subtracted by the used widths sum)
    var remainingWidth = availableWidth - usedWidthSum;

    if (asterisksArray.length > 0) {
      // the width that each asterisk value would be assigned (this can be negative)
      var asteriskVal = remainingWidth / asteriskNum;

      asterisksArray.forEach(function (column) {
        var width = parseInt(column.width.length * asteriskVal, 10);

        if (width > column.maxWidth) {
            width = column.maxWidth;
        }

        if (width < column.minWidth) {
            width = column.minWidth;
        }

        usedWidthSum = usedWidthSum + width;
        column.drawnWidth = width;
      });
    }

    // If there are no columns with asterisk widths then check if there are any with % widths and
    // use them as a fallback for adjusting column widths up or down if we have remaining grid width
    // or need to claw some width back
    var variableWidthColumnArray;
    if (asterisksArray.length > 0) {
      variableWidthColumnArray = asterisksArray;
    } else if (percentageArray.length > 0 && fixedNumberArray.length === 0 && totalPercentage === 100) {
      variableWidthColumnArray = percentageArray;
    }

    if (!angular.isUndefined(variableWidthColumnArray)) {
      // If the grid width didn't divide evenly into the column widths and we have pixels left over, or our
      // calculated widths would have the grid narrower than the available space,
      // dole the remainder out one by one to make everything fit
      var processColumnUpwards = function (column) {
        if (column.drawnWidth < column.maxWidth && leftoverWidth > 0) {
          column.drawnWidth++;
          usedWidthSum++;
          leftoverWidth--;
          columnsToChange = true;
        }
      };

      var leftoverWidth = availableWidth - usedWidthSum;
      var columnsToChange = true;

      while (leftoverWidth > 0 && columnsToChange) {
        columnsToChange = false;
        variableWidthColumnArray.forEach(processColumnUpwards);
      }

      // We can end up with too much width even though some columns aren't at their max width, in this situation
      // we can trim the columns a little
      var processColumnDownwards = function (column) {
        if (column.drawnWidth > column.minWidth && excessWidth > 0) {
          column.drawnWidth--;
          usedWidthSum--;
          excessWidth--;
          columnsToChange = true;
        }
      };

      var excessWidth = usedWidthSum - availableWidth;
      columnsToChange = true;

      while (excessWidth > 0 && columnsToChange) {
        columnsToChange = false;
        variableWidthColumnArray.forEach(processColumnDownwards);
      }
    }

    // all that was across all the renderContainers, now we need to work out what that calculation decided for
    // our renderContainer
    var canvasWidth = 0;
    self.visibleColumnCache.forEach(function(column) {
      if ( column.visible ) {
        canvasWidth = canvasWidth + column.drawnWidth;
      }
    });

    // Build the CSS
    columnCache.forEach(function (column) {
      ret = ret + column.getColClassDefinition();
    });

    self.canvasWidth = canvasWidth;

    // Return the styles back to buildStyles which pops them into the `customStyles` scope variable
    // return ret;

    // Set this render container's column styles so they can be used in style computation
    this.columnStyles = ret;
  };

  GridRenderContainer.prototype.needsHScrollbarPlaceholder = function () {
    var self = this,
      containerBody;

    if (self.name === 'left' || self.name === 'right' && !this.hasHScrollbar && !this.grid.disableScrolling) {
      if (self.grid.options.enableHorizontalScrollbar === uiGridConstants.scrollbars.ALWAYS) {
        return true;
      }
      containerBody = this.grid.element[0].querySelector('.ui-grid-render-container-body .ui-grid-viewport');
      return containerBody.scrollWidth > containerBody.offsetWidth;
    }
    return false;
  };

  GridRenderContainer.prototype.getViewportStyle = function () {
    var self = this;
    var styles = {};
    var scrollbarVisibility = {};

    scrollbarVisibility[uiGridConstants.scrollbars.ALWAYS] = 'scroll';
    scrollbarVisibility[uiGridConstants.scrollbars.WHEN_NEEDED] = 'auto';

    self.hasHScrollbar = false;
    self.hasVScrollbar = false;

    if (self.grid.disableScrolling) {
      styles['overflow-x'] = 'hidden';
      styles['overflow-y'] = 'hidden';
      return styles;
    }

    if (self.name === 'body') {
      self.hasHScrollbar = self.grid.options.enableHorizontalScrollbar !== uiGridConstants.scrollbars.NEVER;
      if (!self.grid.isRTL()) {
        if (!self.grid.hasRightContainerColumns()) {
          self.hasVScrollbar = self.grid.options.enableVerticalScrollbar !== uiGridConstants.scrollbars.NEVER;
        }
      }
      else {
        if (!self.grid.hasLeftContainerColumns()) {
          self.hasVScrollbar = self.grid.options.enableVerticalScrollbar !== uiGridConstants.scrollbars.NEVER;
        }
      }
    }
    else if (self.name === 'left') {
      self.hasVScrollbar = self.grid.isRTL() ? self.grid.options.enableVerticalScrollbar !== uiGridConstants.scrollbars.NEVER : false;
    }
    else {
      self.hasVScrollbar = !self.grid.isRTL() ? self.grid.options.enableVerticalScrollbar !== uiGridConstants.scrollbars.NEVER : false;
    }

    styles['overflow-x'] = self.hasHScrollbar ? scrollbarVisibility[self.grid.options.enableHorizontalScrollbar] : 'hidden';
    styles['overflow-y'] = self.hasVScrollbar ? scrollbarVisibility[self.grid.options.enableVerticalScrollbar] : 'hidden';

    return styles;
  };

  return GridRenderContainer;
}]);

})();

(function() {

angular.module('ui.grid')
.factory('GridRow', ['gridUtil', 'uiGridConstants', function(gridUtil, uiGridConstants) {

   /**
   * @class GridRow
   * @ngdoc function
   * @name ui.grid.class:GridRow
   * @description GridRow is the viewModel for one logical row on the grid.  A grid Row is not necessarily a one-to-one
   * relation to gridOptions.data.
   * @param {object} entity the array item from GridOptions.data
   * @param {number} index the current position of the row in the array
   * @param {Grid} grid reference to the parent grid
   */
  function GridRow(entity, index, grid) {

     /**
      *  @ngdoc object
      *  @name grid
      *  @propertyOf  ui.grid.class:GridRow
      *  @description A reference back to the grid
      */
     this.grid = grid;

     /**
      *  @ngdoc object
      *  @name entity
      *  @propertyOf  ui.grid.class:GridRow
      *  @description A reference to an item in gridOptions.data[]
      */
    this.entity = entity;

     /**
      *  @ngdoc object
      *  @name uid
      *  @propertyOf  ui.grid.class:GridRow
      *  @description  UniqueId of row
      */
     this.uid = gridUtil.nextUid();

     /**
      *  @ngdoc object
      *  @name visible
      *  @propertyOf  ui.grid.class:GridRow
      *  @description If true, the row will be rendered
      */
    // Default to true
    this.visible = true;

     /**
      *  @ngdoc object
      *  @name isSelected
      *  @propertyOf  ui.grid.class:GridRow
      *  @description Marks if the row has been selected
      */
     // Default to false
     this.isSelected = false;


    this.$$height = grid.options.rowHeight;

  }

    /**
     *  @ngdoc object
     *  @name height
     *  @propertyOf ui.grid.class:GridRow
     *  @description height of each individual row. changing the height will flag all
     *  row renderContainers to recalculate their canvas height
     */
    Object.defineProperty(GridRow.prototype, 'height', {
      get: function() {
        return this.$$height;
      },
      set: function(height) {
        if (height !== this.$$height) {
          this.grid.updateCanvasHeight();
          this.$$height = height;
        }
      }
    });

  /**
   * @ngdoc function
   * @name getQualifiedColField
   * @methodOf ui.grid.class:GridRow
   * @description returns the qualified field name as it exists on scope
   * ie: row.entity.fieldA
   * @param {GridColumn} col column instance
   * @returns {string} resulting name that can be evaluated on scope
   */
    GridRow.prototype.getQualifiedColField = function(col) {
      return 'row.' + this.getEntityQualifiedColField(col);
    };

    /**
     * @ngdoc function
     * @name getEntityQualifiedColField
     * @methodOf ui.grid.class:GridRow
     * @description returns the qualified field name minus the row path
     * ie: entity.fieldA
     * @param {GridColumn} col column instance
     * @returns {string} resulting name that can be evaluated against a row
     */
  GridRow.prototype.getEntityQualifiedColField = function(col) {
    var base = 'entity';
    if ( col.field === uiGridConstants.ENTITY_BINDING ) {
      return base;
    }
    return gridUtil.preEval(base + '.' + col.field);
  };


  /**
   * @ngdoc function
   * @name setRowInvisible
   * @methodOf  ui.grid.class:GridRow
   * @description Sets an override on the row that forces it to always
   * be invisible. Emits the rowsVisibleChanged event if it changed the row visibility.
   *
   * This method can be called from the api, passing in the gridRow we want
   * altered.  It should really work by calling gridRow.setRowInvisible, but that's
   * not the way I coded it, and too late to change now.  Changed to just call
   * the internal function row.setThisRowInvisible().
   *
   * @param {GridRow} row the row we want to set to invisible
   *
   */
  GridRow.prototype.setRowInvisible = function ( row ) {
    if (row && row.setThisRowInvisible) {
      row.setThisRowInvisible( 'user' );
    }
  };


  /**
   * @ngdoc function
   * @name clearRowInvisible
   * @methodOf  ui.grid.class:GridRow
   * @description Clears an override on the row that forces it to always
   * be invisible. Emits the rowsVisibleChanged event if it changed the row visibility.
   *
   * This method can be called from the api, passing in the gridRow we want
   * altered.  It should really work by calling gridRow.clearRowInvisible, but that's
   * not the way I coded it, and too late to change now.  Changed to just call
   * the internal function row.clearThisRowInvisible().
   *
   * @param {GridRow} row the row we want to clear the invisible flag
   *
   */
  GridRow.prototype.clearRowInvisible = function ( row ) {
    if (row && row.clearThisRowInvisible) {
      row.clearThisRowInvisible( 'user' );
    }
  };


  /**
   * @ngdoc function
   * @name setThisRowInvisible
   * @methodOf  ui.grid.class:GridRow
   * @description Sets an override on the row that forces it to always
   * be invisible. Emits the rowsVisibleChanged event if it changed the row visibility
   *
   * @param {string} reason the reason (usually the module) for the row to be invisible.
   * E.g. grouping, user, filter
   * @param {boolean} fromRowsProcessor whether we were called from a rowsProcessor, passed through to evaluateRowVisibility
   */
  GridRow.prototype.setThisRowInvisible = function ( reason, fromRowsProcessor ) {
    if ( !this.invisibleReason ) {
      this.invisibleReason = {};
    }
    this.invisibleReason[reason] = true;
    this.evaluateRowVisibility( fromRowsProcessor);
  };


  /**
   * @ngdoc function
   * @name clearRowInvisible
   * @methodOf ui.grid.class:GridRow
   * @description Clears any override on the row visibility, returning it
   * to normal visibility calculations.  Emits the rowsVisibleChanged
   * event
   *
   * @param {string} reason the reason (usually the module) for the row to be invisible.
   * E.g. grouping, user, filter
   * @param {boolean} fromRowsProcessor whether we were called from a rowsProcessor, passed through to evaluateRowVisibility
   */
  GridRow.prototype.clearThisRowInvisible = function ( reason, fromRowsProcessor ) {
    if (typeof(this.invisibleReason) !== 'undefined' ) {
      delete this.invisibleReason[reason];
    }
    this.evaluateRowVisibility( fromRowsProcessor );
  };


  /**
   * @ngdoc function
   * @name evaluateRowVisibility
   * @methodOf ui.grid.class:GridRow
   * @description Determines whether the row should be visible based on invisibleReason,
   * and if it changes the row visibility, then emits the rowsVisibleChanged event.
   *
   * Queues a grid refresh, but doesn't call it directly to avoid hitting lots of grid refreshes.
   * @param {boolean} fromRowProcessor if true, then it won't raise events or queue the refresh, the
   * row processor does that already
   */
  GridRow.prototype.evaluateRowVisibility = function ( fromRowProcessor ) {
    var newVisibility = true;
    if ( typeof(this.invisibleReason) !== 'undefined' ) {
      angular.forEach(this.invisibleReason, function( value, key ) {
        if ( value ) {
          newVisibility = false;
        }
      });
    }

    if ( typeof(this.visible) === 'undefined' || this.visible !== newVisibility ) {
      this.visible = newVisibility;
      if ( !fromRowProcessor ) {
        this.grid.queueGridRefresh();
        this.grid.api.core.raise.rowsVisibleChanged(this);
      }
    }
  };


  return GridRow;
}]);

})();

(function() {
  'use strict';
  /**
   * @ngdoc object
   * @name ui.grid.class:GridRowColumn
   * @param {GridRow} row The row for this pair
   * @param {GridColumn} column The column for this pair
   * @description A row and column pair that represents the intersection of these two entities.
   * Must be instantiated as a constructor using the `new` keyword.
   */
  angular.module('ui.grid')
  .factory('GridRowColumn', ['$parse', '$filter',
    function GridRowColumnFactory($parse, $filter) {
      var GridRowColumn = function GridRowColumn(row, col) {
        if ( !(this instanceof GridRowColumn)) {
          throw "Using GridRowColumn as a function insead of as a constructor. Must be called with `new` keyword";
        }

        /**
         * @ngdoc object
         * @name row
         * @propertyOf ui.grid.class:GridRowColumn
         * @description {@link ui.grid.class:GridRow }
         */
        this.row = row;
        /**
         * @ngdoc object
         * @name col
         * @propertyOf ui.grid.class:GridRowColumn
         * @description {@link ui.grid.class:GridColumn }
         */
        this.col = col;
      };

      /**
       * @ngdoc function
       * @name getIntersectionValueRaw
       * @methodOf ui.grid.class:GridRowColumn
       * @description Gets the intersection of where the row and column meet.
       * @returns {String|Number|Object} The value from the grid data that this GridRowColumn points too.
       *          If the column has a cellFilter this will NOT return the filtered value.
       */
      GridRowColumn.prototype.getIntersectionValueRaw = function() {
        var getter = $parse(this.row.getEntityQualifiedColField(this.col));
        var context = this.row;
        return getter(context);
      };
      return GridRowColumn;
    }
  ]);
})();

(function () {
  angular.module('ui.grid')
    .factory('ScrollEvent', ['gridUtil', function (gridUtil) {

      /**
       * @ngdoc function
       * @name ui.grid.class:ScrollEvent
       * @description Model for all scrollEvents
       * @param {Grid} grid that owns the scroll event
       * @param {GridRenderContainer} sourceRowContainer that owns the scroll event. Can be null
       * @param {GridRenderContainer} sourceColContainer that owns the scroll event. Can be null
       * @param {string} source the source of the event - from uiGridConstants.scrollEventSources or a string value of directive/service/factory.functionName
       */
      function ScrollEvent(grid, sourceRowContainer, sourceColContainer, source) {
        var self = this;
        if (!grid) {
          throw new Error("grid argument is required");
        }

        /**
         *  @ngdoc object
         *  @name grid
         *  @propertyOf  ui.grid.class:ScrollEvent
         *  @description A reference back to the grid
         */
         self.grid = grid;



        /**
         *  @ngdoc object
         *  @name source
         *  @propertyOf  ui.grid.class:ScrollEvent
         *  @description the source of the scroll event. limited to values from uiGridConstants.scrollEventSources
         */
        self.source = source;


        /**
         *  @ngdoc object
         *  @name noDelay
         *  @propertyOf  ui.grid.class:ScrollEvent
         *  @description most scroll events from the mouse or trackpad require delay to operate properly
         *  set to false to eliminate delay.  Useful for scroll events that the grid causes, such as scrolling to make a row visible.
         */
        self.withDelay = true;

        self.sourceRowContainer = sourceRowContainer;
        self.sourceColContainer = sourceColContainer;

        self.newScrollLeft = null;
        self.newScrollTop = null;
        self.x = null;
        self.y = null;

        self.verticalScrollLength = -9999999;
        self.horizontalScrollLength = -999999;


        /**
         *  @ngdoc function
         *  @name fireThrottledScrollingEvent
         *  @methodOf  ui.grid.class:ScrollEvent
         *  @description fires a throttled event using grid.api.core.raise.scrollEvent
         */
        self.fireThrottledScrollingEvent = gridUtil.throttle(function(sourceContainerId) {
          self.grid.scrollContainers(sourceContainerId, self);
        }, self.grid.options.wheelScrollThrottle, {trailing: true});

      }


      /**
       *  @ngdoc function
       *  @name getNewScrollLeft
       *  @methodOf  ui.grid.class:ScrollEvent
       *  @description returns newScrollLeft property if available; calculates a new value if it isn't
       */
      ScrollEvent.prototype.getNewScrollLeft = function(colContainer, viewport) {
        var self = this;

        if (!self.newScrollLeft) {
          var scrollWidth = (colContainer.getCanvasWidth() - colContainer.getViewportWidth());

          var oldScrollLeft = gridUtil.normalizeScrollLeft(viewport, self.grid);

          var scrollXPercentage;
          if (typeof(self.x.percentage) !== 'undefined' && self.x.percentage !== undefined) {
            scrollXPercentage = self.x.percentage;
          }
          else if (typeof(self.x.pixels) !== 'undefined' && self.x.pixels !== undefined) {
            scrollXPercentage = self.x.percentage = (oldScrollLeft + self.x.pixels) / scrollWidth;
          }
          else {
            throw new Error("No percentage or pixel value provided for scroll event X axis");
          }

          return Math.max(0, scrollXPercentage * scrollWidth);
        }

        return self.newScrollLeft;
      };


      /**
       *  @ngdoc function
       *  @name getNewScrollTop
       *  @methodOf  ui.grid.class:ScrollEvent
       *  @description returns newScrollTop property if available; calculates a new value if it isn't
       */
      ScrollEvent.prototype.getNewScrollTop = function(rowContainer, viewport) {
        var self = this;


        if (!self.newScrollTop) {
          var scrollLength = rowContainer.getVerticalScrollLength();

          var oldScrollTop = viewport[0].scrollTop;

          var scrollYPercentage;
          if (typeof(self.y.percentage) !== 'undefined' && self.y.percentage !== undefined) {
            scrollYPercentage = self.y.percentage;
          }
          else if (typeof(self.y.pixels) !== 'undefined' && self.y.pixels !== undefined) {
            scrollYPercentage = self.y.percentage = (oldScrollTop + self.y.pixels) / scrollLength;
          }
          else {
            throw new Error("No percentage or pixel value provided for scroll event Y axis");
          }

          return Math.max(0, scrollYPercentage * scrollLength);
        }

        return self.newScrollTop;
      };

      ScrollEvent.prototype.atTop = function(scrollTop) {
        return (this.y && (this.y.percentage === 0 || this.verticalScrollLength < 0) && scrollTop === 0);
      };

      ScrollEvent.prototype.atBottom = function(scrollTop) {
        return (this.y && (this.y.percentage === 1 || this.verticalScrollLength === 0) && scrollTop > 0);
      };

      ScrollEvent.prototype.atLeft = function(scrollLeft) {
        return (this.x && (this.x.percentage === 0 || this.horizontalScrollLength < 0) && scrollLeft === 0);
      };

      ScrollEvent.prototype.atRight = function(scrollLeft) {
        return (this.x && (this.x.percentage === 1 || this.horizontalScrollLength ===0) && scrollLeft > 0);
      };


      ScrollEvent.Sources = {
        ViewPortScroll: 'ViewPortScroll',
        RenderContainerMouseWheel: 'RenderContainerMouseWheel',
        RenderContainerTouchMove: 'RenderContainerTouchMove',
        Other: 99
      };

      return ScrollEvent;
    }]);



})();

(function () {
  'use strict';
  /**
   *  @ngdoc object
   *  @name ui.grid.service:gridClassFactory
   *
   *  @description factory to return dom specific instances of a grid
   *
   */
  angular.module('ui.grid').service('gridClassFactory', ['gridUtil', '$q', '$compile', '$templateCache', 'uiGridConstants', 'Grid', 'GridColumn', 'GridRow',
    function (gridUtil, $q, $compile, $templateCache, uiGridConstants, Grid, GridColumn, GridRow) {

      var service = {
        /**
         * @ngdoc method
         * @name createGrid
         * @methodOf ui.grid.service:gridClassFactory
         * @description Creates a new grid instance. Each instance will have a unique id
         * @param {object} options An object map of options to pass into the created grid instance.
         * @returns {Grid} grid
         */
        createGrid : function(options) {
          options = (typeof(options) !== 'undefined') ? options : {};
          options.id = gridUtil.newId();
          var grid = new Grid(options);

          // NOTE/TODO: rowTemplate should always be defined...
          if (grid.options.rowTemplate) {
            var rowTemplateFnPromise = $q.defer();
            grid.getRowTemplateFn = rowTemplateFnPromise.promise;

            gridUtil.getTemplate(grid.options.rowTemplate)
              .then(
                function (template) {
                  var rowTemplateFn = $compile(template);
                  rowTemplateFnPromise.resolve(rowTemplateFn);
                },
                function () {
                  // Todo handle response error here?
                  throw new Error("Couldn't fetch/use row template '" + grid.options.rowTemplate + "'");
                }).catch(angular.noop);
          }

          grid.registerColumnBuilder(service.defaultColumnBuilder);

          // Row builder for custom row templates
          grid.registerRowBuilder(service.rowTemplateAssigner);

          // Reset all rows to visible initially
          grid.registerRowsProcessor(function allRowsVisible(rows) {
            rows.forEach(function (row) {
              row.evaluateRowVisibility( true );
            });

            return rows;
          }, 50);

          grid.registerColumnsProcessor(function applyColumnVisibility(columns) {
            columns.forEach(function (column) {
              column.visible = angular.isDefined(column.colDef.visible) ? column.colDef.visible : true;
            });

            return columns;
          }, 50);

          grid.registerRowsProcessor(grid.searchRows, 100);

          // Register the default row processor, it sorts rows by selected columns
          if (grid.options.externalSort && angular.isFunction(grid.options.externalSort)) {
            grid.registerRowsProcessor(grid.options.externalSort, 200);
          }
          else {
            grid.registerRowsProcessor(grid.sortByColumn, 200);
          }

          return grid;
        },

        /**
         * @ngdoc function
         * @name defaultColumnBuilder
         * @methodOf ui.grid.service:gridClassFactory
         * @description Processes designTime column definitions and applies them to col for the
         *              core grid features
         * @param {object} colDef reference to column definition
         * @param {GridColumn} col reference to gridCol
         * @param {object} gridOptions reference to grid options
         */
        defaultColumnBuilder: function (colDef, col, gridOptions) {

          var templateGetPromises = [];

          // Abstracts the standard template processing we do for every template type.
          var processTemplate = function( templateType, providedType, defaultTemplate, filterType, tooltipType ) {
            if ( !colDef[templateType] ) {
              col[providedType] = defaultTemplate;
            } else {
              col[providedType] = colDef[templateType];
            }

            var templatePromise = gridUtil.getTemplate(col[providedType])
              .then(
                function (template) {
                  if ( angular.isFunction(template) ) { template = template(); }
                  var tooltipCall = ( tooltipType === 'cellTooltip' )
                      ? 'col.cellTooltip(row,col)'
                      : 'col.headerTooltip(col)';
                  if ( tooltipType && col[tooltipType] === false ) {
                    template = template.replace(uiGridConstants.TOOLTIP, '');
                  } else if ( tooltipType && col[tooltipType] ) {
                    template = template.replace(uiGridConstants.TOOLTIP, 'title="{{' + tooltipCall + ' CUSTOM_FILTERS }}"');
                  }

                  if ( filterType ) {
                    col[templateType] = template.replace(uiGridConstants.CUSTOM_FILTERS, function() {
                      return col[filterType] ? "|" + col[filterType] : "";
                    });
                  } else {
                    col[templateType] = template;
                  }
                },
                function () {
                  throw new Error("Couldn't fetch/use colDef." + templateType + " '" + colDef[templateType] + "'");
                }).catch(angular.noop);

            templateGetPromises.push(templatePromise);

            return templatePromise;
          };


          /**
           * @ngdoc property
           * @name cellTemplate
           * @propertyOf ui.grid.class:GridOptions.columnDef
           * @description a custom template for each cell in this column.  The default
           * is ui-grid/uiGridCell.  If you are using the cellNav feature, this template
           * must contain a div that can receive focus.
           *
           */
          col.cellTemplatePromise = processTemplate( 'cellTemplate', 'providedCellTemplate', 'ui-grid/uiGridCell', 'cellFilter', 'cellTooltip' );

          /**
           * @ngdoc property
           * @name headerCellTemplate
           * @propertyOf ui.grid.class:GridOptions.columnDef
           * @description a custom template for the header for this column.  The default
           * is ui-grid/uiGridHeaderCell
           *
           */
          col.headerCellTemplatePromise = processTemplate( 'headerCellTemplate', 'providedHeaderCellTemplate', 'ui-grid/uiGridHeaderCell', 'headerCellFilter', 'headerTooltip' );

          /**
           * @ngdoc property
           * @name footerCellTemplate
           * @propertyOf ui.grid.class:GridOptions.columnDef
           * @description a custom template for the footer for this column.  The default
           * is ui-grid/uiGridFooterCell
           *
           */
          col.footerCellTemplatePromise = processTemplate( 'footerCellTemplate', 'providedFooterCellTemplate', 'ui-grid/uiGridFooterCell', 'footerCellFilter' );

          /**
           * @ngdoc property
           * @name filterHeaderTemplate
           * @propertyOf ui.grid.class:GridOptions.columnDef
           * @description a custom template for the filter input.  The default is ui-grid/ui-grid-filter
           *
           */
          col.filterHeaderTemplatePromise = processTemplate( 'filterHeaderTemplate', 'providedFilterHeaderTemplate', 'ui-grid/ui-grid-filter' );

          // Create a promise for the compiled element function
          col.compiledElementFnDefer = $q.defer();

          return $q.all(templateGetPromises);
        },

        rowTemplateAssigner: function rowTemplateAssigner(row) {
          var grid = this;

          // Row has no template assigned to it
          if (!row.rowTemplate) {
            // Use the default row template from the grid
            row.rowTemplate = grid.options.rowTemplate;

            // Use the grid's function for fetching the compiled row template function
            row.getRowTemplateFn = grid.getRowTemplateFn;
          }
          // Row has its own template assigned
          else {
            // Create a promise for the compiled row template function
            var perRowTemplateFnPromise = $q.defer();
            row.getRowTemplateFn = perRowTemplateFnPromise.promise;

            // Get the row template
            gridUtil.getTemplate(row.rowTemplate)
              .then(function (template) {
                // Compile the template
                var rowTemplateFn = $compile(template);

                // Resolve the compiled template function promise
                perRowTemplateFnPromise.resolve(rowTemplateFn);
              },
              function () {
                // Todo handle response error here?
                throw new Error("Couldn't fetch/use row template '" + row.rowTemplate + "'");
              });
          }

          return row.getRowTemplateFn;
        }
      };

      // class definitions (moved to separate factories)

      return service;
    }]);

})();

(function() {

var module = angular.module('ui.grid');

function escapeRegExp(str) {
  return str.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, "\\$&");
}


/**
 *  @ngdoc service
 *  @name ui.grid.service:rowSearcher
 *
 *  @description Service for searching/filtering rows based on column value conditions.
 */
module.service('rowSearcher', ['gridUtil', 'uiGridConstants', function (gridUtil, uiGridConstants) {
  var defaultCondition = uiGridConstants.filter.CONTAINS;

  var rowSearcher = {};

  /**
   * @ngdoc function
   * @name getTerm
   * @methodOf ui.grid.service:rowSearcher
   * @description Get the term from a filter
   * Trims leading and trailing whitespace
   * @param {object} filter object to use
   * @returns {object} Parsed term
   */
  rowSearcher.getTerm = function getTerm(filter) {
    if (typeof(filter.term) === 'undefined') { return filter.term; }

    var term = filter.term;

    // Strip leading and trailing whitespace if the term is a string
    if (typeof(term) === 'string') {
      term = term.trim();
    }

    return term;
  };

  /**
   * @ngdoc function
   * @name stripTerm
   * @methodOf ui.grid.service:rowSearcher
   * @description Remove leading and trailing asterisk (*) from the filter's term
   * @param {object} filter object to use
   * @returns {uiGridConstants.filter<int>} Value representing the condition constant value
   */
  rowSearcher.stripTerm = function stripTerm(filter) {
    var term = rowSearcher.getTerm(filter);

    if (typeof(term) === 'string') {
      return escapeRegExp(term.replace(/(^\*|\*$)/g, ''));
    }
    else {
      return term;
    }
  };


  /**
   * @ngdoc function
   * @name guessCondition
   * @methodOf ui.grid.service:rowSearcher
   * @description Guess the condition for a filter based on its term
   * <br>
   * Defaults to STARTS_WITH. Uses CONTAINS for strings beginning and ending with *s (*bob*).
   * Uses STARTS_WITH for strings ending with * (bo*). Uses ENDS_WITH for strings starting with * (*ob).
   * @param {object} filter object to use
   * @returns {uiGridConstants.filter<int>} Value representing the condition constant value
   */
  rowSearcher.guessCondition = function guessCondition(filter) {
    if (typeof(filter.term) === 'undefined' || !filter.term) {
      return defaultCondition;
    }

    var term = rowSearcher.getTerm(filter);

    if (/\*/.test(term)) {
      var regexpFlags = '';
      if (!filter.flags || !filter.flags.caseSensitive) {
        regexpFlags += 'i';
      }

      var reText = term.replace(/(\\)?\*/g, function ($0, $1) { return $1 ? $0 : '[\\s\\S]*?'; });
      return new RegExp('^' + reText + '$', regexpFlags);
    }
    // Otherwise default to default condition
    else {
      return defaultCondition;
    }
  };


  /**
   * @ngdoc function
   * @name setupFilters
   * @methodOf ui.grid.service:rowSearcher
   * @description For a given columns filters (either col.filters, or [col.filter] can be passed in),
   * do all the parsing and pre-processing and store that data into a new filters object.  The object
   * has the condition, the flags, the stripped term, and a parsed reg exp if there was one.
   *
   * We could use a forEach in here, since it's much less performance sensitive, but since we're using
   * for loops everywhere else in this module...
   *
   * @param {array} filters the filters from the column (col.filters or [col.filter])
   * @returns {array} An array of parsed/preprocessed filters
   */
  rowSearcher.setupFilters = function setupFilters( filters ) {
    var newFilters = [];

    var filtersLength = filters.length;
    for ( var i = 0; i < filtersLength; i++ ) {
      var filter = filters[i];

      if ( filter.noTerm || !gridUtil.isNullOrUndefined(filter.term) ) {
        var newFilter = {};

        var regexpFlags = '';
        if (!filter.flags || !filter.flags.caseSensitive) {
          regexpFlags += 'i';
        }

        if ( !gridUtil.isNullOrUndefined(filter.term) ) {
          // it is possible to have noTerm.
          if ( filter.rawTerm ) {
            newFilter.term = filter.term;
          } else {
            newFilter.term = rowSearcher.stripTerm(filter);
          }
        }
        newFilter.noTerm = filter.noTerm;

        if ( filter.condition ) {
          newFilter.condition = filter.condition;
        } else {
          newFilter.condition = rowSearcher.guessCondition(filter);
        }

        newFilter.flags = angular.extend( { caseSensitive: false, date: false }, filter.flags );

        if (newFilter.condition === uiGridConstants.filter.STARTS_WITH) {
          newFilter.startswithRE = new RegExp('^' + newFilter.term, regexpFlags);
        }

         if (newFilter.condition === uiGridConstants.filter.ENDS_WITH) {
          newFilter.endswithRE = new RegExp(newFilter.term + '$', regexpFlags);
        }

        if (newFilter.condition === uiGridConstants.filter.CONTAINS) {
          newFilter.containsRE = new RegExp(newFilter.term, regexpFlags);
        }

        if (newFilter.condition === uiGridConstants.filter.EXACT) {
          newFilter.exactRE = new RegExp('^' + newFilter.term + '$', regexpFlags);
        }

        newFilters.push(newFilter);
      }
    }
    return newFilters;
  };


  /**
   * @ngdoc function
   * @name runColumnFilter
   * @methodOf ui.grid.service:rowSearcher
   * @description Runs a single pre-parsed filter against a cell, returning true
   * if the cell matches that one filter.
   *
   * @param {Grid} grid the grid we're working against
   * @param {GridRow} row the row we're matching against
   * @param {GridColumn} column the column that we're working against
   * @param {object} filter the specific, preparsed, filter that we want to test
   * @returns {boolean} true if we match (row stays visible)
   */
  rowSearcher.runColumnFilter = function runColumnFilter(grid, row, column, filter) {
    // Cache typeof condition
    var conditionType = typeof(filter.condition);

    // Term to search for.
    var term = filter.term;

    // Get the column value for this row
    var value;
    if ( column.filterCellFiltered ) {
      value = grid.getCellDisplayValue(row, column);
    } else {
      value = grid.getCellValue(row, column);
    }


    // If the filter's condition is a RegExp, then use it
    if (filter.condition instanceof RegExp) {
      return filter.condition.test(value);
    }

    // If the filter's condition is a function, run it
    if (conditionType === 'function') {
      return filter.condition(term, value, row, column);
    }

    if (filter.startswithRE) {
      return filter.startswithRE.test(value);
    }

    if (filter.endswithRE) {
      return filter.endswithRE.test(value);
    }

    if (filter.containsRE) {
      return filter.containsRE.test(value);
    }

    if (filter.exactRE) {
      return filter.exactRE.test(value);
    }

    if (filter.condition === uiGridConstants.filter.NOT_EQUAL) {
      var regex = new RegExp('^' + term + '$');
      return !regex.exec(value);
    }

    if (typeof(value) === 'number' && typeof(term) === 'string' ) {
      // if the term has a decimal in it, it comes through as '9\.4', we need to take out the \
      // the same for negative numbers
      // TODO: I suspect the right answer is to look at escapeRegExp at the top of this code file, maybe it's not needed?
      var tempFloat = parseFloat(term.replace(/\\\./,'.').replace(/\\\-/,'-'));
      if (!isNaN(tempFloat)) {
        term = tempFloat;
      }
    }

    if (filter.flags.date === true) {
      value = new Date(value);
      // If the term has a dash in it, it comes through as '\-' -- we need to take out the '\'.
      term = new Date(term.replace(/\\/g, ''));
    }

    if (filter.condition === uiGridConstants.filter.GREATER_THAN) {
      return (value > term);
    }

    if (filter.condition === uiGridConstants.filter.GREATER_THAN_OR_EQUAL) {
      return (value >= term);
    }

    if (filter.condition === uiGridConstants.filter.LESS_THAN) {
      return (value < term);
    }

    if (filter.condition === uiGridConstants.filter.LESS_THAN_OR_EQUAL) {
      return (value <= term);
    }

    return true;
  };


  /**
   * @ngdoc boolean
   * @name useExternalFiltering
   * @propertyOf ui.grid.class:GridOptions
   * @description False by default. When enabled, this setting suppresses the internal filtering.
   * All UI logic will still operate, allowing filter conditions to be set and modified.
   *
   * The external filter logic can listen for the `filterChange` event, which fires whenever
   * a filter has been adjusted.
   */
  /**
   * @ngdoc function
   * @name searchColumn
   * @methodOf ui.grid.service:rowSearcher
   * @description Process provided filters on provided column against a given row. If the row meets
   * the conditions on all the filters, return true.
   * @param {Grid} grid Grid to search in
   * @param {GridRow} row Row to search on
   * @param {GridColumn} column Column with the filters to use
   * @param {array} filters array of pre-parsed/preprocessed filters to apply
   * @returns {boolean} Whether the column matches or not.
   */
  rowSearcher.searchColumn = function searchColumn(grid, row, column, filters) {
    if (grid.options.useExternalFiltering) {
      return true;
    }

    var filtersLength = filters.length;
    for (var i = 0; i < filtersLength; i++) {
      var filter = filters[i];

      if ( !gridUtil.isNullOrUndefined(filter.term) && filter.term !== '' || filter.noTerm ) {
        var ret = rowSearcher.runColumnFilter(grid, row, column, filter);
        if (!ret) {
          return false;
        }
      }
    }

    return true;
  };


  /**
   * @ngdoc function
   * @name search
   * @methodOf ui.grid.service:rowSearcher
   * @description Run a search across the given rows and columns, marking any rows that don't
   * match the stored col.filters or col.filter as invisible.
   * @param {Grid} grid Grid instance to search inside
   * @param {Array[GridRow]} rows GridRows to filter
   * @param {Array[GridColumn]} columns GridColumns with filters to process
   */
  rowSearcher.search = function search(grid, rows, columns) {
    /*
     * Added performance optimisations into this code base, as this logic creates deeply nested
     * loops and is therefore very performance sensitive.  In particular, avoiding forEach as
     * this impacts some browser optimisers (particularly Chrome), using iterators instead
     */

    // Don't do anything if we weren't passed any rows
    if (!rows) {
      return;
    }

    // don't filter if filtering currently disabled
    if (!grid.options.enableFiltering) {
      return rows;
    }

    // Build list of filters to apply
    var filterData = [];

    var colsLength = columns.length;

    var hasTerm = function( filters ) {
      var hasTerm = false;

      filters.forEach( function (filter) {
        if ( !gridUtil.isNullOrUndefined(filter.term) && filter.term !== '' || filter.noTerm ) {
          hasTerm = true;
        }
      });

      return hasTerm;
    };

    for (var i = 0; i < colsLength; i++) {
      var col = columns[i];

      if (typeof(col.filters) !== 'undefined' && hasTerm(col.filters) ) {
        filterData.push( { col: col, filters: rowSearcher.setupFilters(col.filters) } );
      }
    }

    if (filterData.length > 0) {
      // define functions outside the loop, performance optimisation
      var foreachRow = function(grid, row, col, filters) {
        if ( row.visible && !rowSearcher.searchColumn(grid, row, col, filters) ) {
          row.visible = false;
        }
      };

      var foreachFilterCol = function(grid, filterData) {
        var rowsLength = rows.length;
        for ( var i = 0; i < rowsLength; i++) {
          foreachRow(grid, rows[i], filterData.col, filterData.filters);
        }
      };

      // nested loop itself - foreachFilterCol, which in turn calls foreachRow
      var filterDataLength = filterData.length;
      for ( var j = 0; j < filterDataLength; j++) {
        foreachFilterCol( grid, filterData[j] );
      }

      if (grid.api.core.raise.rowsVisibleChanged) {
        grid.api.core.raise.rowsVisibleChanged();
      }

      // drop any invisible rows
      // keeping these, as needed with filtering for trees - we have to come back and make parent nodes visible if child nodes are selected in the filter
      // rows = rows.filter(function(row) { return row.visible; });

    }

    return rows;
  };

  return rowSearcher;
}]);

})();

(function() {

var module = angular.module('ui.grid');

/**
 * @ngdoc object
 * @name ui.grid.class:rowSorter
 * @description rowSorter provides the default sorting mechanisms,
 * including guessing column types and applying appropriate sort
 * algorithms
 *
 */

module.service('rowSorter', ['$parse', 'uiGridConstants', function ($parse, uiGridConstants) {
  var currencyRegexStr =
    '(' +
    uiGridConstants.CURRENCY_SYMBOLS
      .map(function (a) { return '\\' + a; }) // Escape all the currency symbols ($ at least will jack up this regex)
      .join('|') + // Join all the symbols together with |s
    ')?';

  // /^[-+]?[£$¤¥]?[\d,.]+%?$/
  var numberStrRegex = new RegExp('^[-+]?' + currencyRegexStr + '[\\d,.]+' + currencyRegexStr + '%?$');

  var rowSorter = {
    // Cache of sorting functions. Once we create them, we don't want to keep re-doing it
    //   this takes a piece of data from the cell and tries to determine its type and what sorting
    //   function to use for it
    colSortFnCache: {}
  };


  /**
   * @ngdoc method
   * @methodOf ui.grid.class:rowSorter
   * @name guessSortFn
   * @description Assigns a sort function to use based on the itemType in the column
   * @param {string} itemType one of 'number', 'boolean', 'string', 'date', 'object'.  And
   * error will be thrown for any other type.
   * @returns {function} a sort function that will sort that type
   */
  rowSorter.guessSortFn = function guessSortFn(itemType) {
    switch (itemType) {
      case "number":
        return rowSorter.sortNumber;
      case "numberStr":
        return rowSorter.sortNumberStr;
      case "boolean":
        return rowSorter.sortBool;
      case "string":
        return rowSorter.sortAlpha;
      case "date":
        return rowSorter.sortDate;
      case "object":
        return rowSorter.basicSort;
      default:
        throw new Error('No sorting function found for type: ' + itemType);
    }
  };


  /**
   * @ngdoc method
   * @methodOf ui.grid.class:rowSorter
   * @name handleNulls
   * @description Sorts nulls and undefined to the bottom (top when
   * descending).  Called by each of the internal sorters before
   * attempting to sort.  Note that this method is available on the core api
   * via gridApi.core.sortHandleNulls
   * @param {object} a sort value a
   * @param {object} b sort value b
   * @returns {number} null if there were no nulls/undefineds, otherwise returns
   * a sort value that should be passed back from the sort function
   */
  rowSorter.handleNulls = function handleNulls(a, b) {
    // We want to allow zero values and false values to be evaluated in the sort function
    if ((!a && a !== 0 && a !== false) || (!b && b !== 0 && b !== false)) {
      // We want to force nulls and such to the bottom when we sort... which effectively is "greater than"
      if ((!a && a !== 0 && a !== false) && (!b && b !== 0 && b !== false)) {
        return 0;
      }
      else if (!a && a !== 0 && a !== false) {
        return 1;
      }
      else if (!b && b !== 0 && b !== false) {
        return -1;
      }
    }
    return null;
  };


  /**
   * @ngdoc method
   * @methodOf ui.grid.class:rowSorter
   * @name basicSort
   * @description Sorts any values that provide the < method, including strings
   * or numbers.  Handles nulls and undefined through calling handleNulls
   * @param {object} a sort value a
   * @param {object} b sort value b
   * @returns {number} normal sort function, returns -ve, 0, +ve
   */
  rowSorter.basicSort = function basicSort(a, b) {
    var nulls = rowSorter.handleNulls(a, b);
    if ( nulls !== null ) {
      return nulls;
    } else {
      if (a === b) {
        return 0;
      }
      if (a < b) {
        return -1;
      }
      return 1;
    }
  };


  /**
   * @ngdoc method
   * @methodOf ui.grid.class:rowSorter
   * @name sortNumber
   * @description Sorts numerical values.  Handles nulls and undefined through calling handleNulls
   * @param {object} a sort value a
   * @param {object} b sort value b
   * @returns {number} normal sort function, returns -ve, 0, +ve
   */
  rowSorter.sortNumber = function sortNumber(a, b) {
    var nulls = rowSorter.handleNulls(a, b);
    if ( nulls !== null ) {
      return nulls;
    } else {
      return a - b;
    }
  };


  /**
   * @ngdoc method
   * @methodOf ui.grid.class:rowSorter
   * @name sortNumberStr
   * @description Sorts numerical values that are stored in a string (i.e. parses them to numbers first).
   * Handles nulls and undefined through calling handleNulls
   * @param {object} a sort value a
   * @param {object} b sort value b
   * @returns {number} normal sort function, returns -ve, 0, +ve
   */
  rowSorter.sortNumberStr = function sortNumberStr(a, b) {
    var nulls = rowSorter.handleNulls(a, b);
    if ( nulls !== null ) {
      return nulls;
    } else {
      var numA, // The parsed number form of 'a'
          numB, // The parsed number form of 'b'
          badA = false,
          badB = false;

      // Try to parse 'a' to a float
      numA = parseFloat(a.replace(/[^0-9.-]/g, ''));

      // If 'a' couldn't be parsed to float, flag it as bad
      if (isNaN(numA)) {
          badA = true;
      }

      // Try to parse 'b' to a float
      numB = parseFloat(b.replace(/[^0-9.-]/g, ''));

      // If 'b' couldn't be parsed to float, flag it as bad
      if (isNaN(numB)) {
          badB = true;
      }

      // We want bad ones to get pushed to the bottom... which effectively is "greater than"
      if (badA && badB) {
          return 0;
      }

      if (badA) {
          return 1;
      }

      if (badB) {
          return -1;
      }

      return numA - numB;
    }
  };


  /**
   * @ngdoc method
   * @methodOf ui.grid.class:rowSorter
   * @name sortAlpha
   * @description Sorts string values. Handles nulls and undefined through calling handleNulls
   * @param {object} a sort value a
   * @param {object} b sort value b
   * @returns {number} normal sort function, returns -ve, 0, +ve
   */
  rowSorter.sortAlpha = function sortAlpha(a, b) {
    var nulls = rowSorter.handleNulls(a, b);
    if ( nulls !== null ) {
      return nulls;
    } else {
      var strA = a.toString().toLowerCase(),
          strB = b.toString().toLowerCase();

      return strA === strB ? 0 : strA.localeCompare(strB);
    }
  };


  /**
   * @ngdoc method
   * @methodOf ui.grid.class:rowSorter
   * @name sortDate
   * @description Sorts date values. Handles nulls and undefined through calling handleNulls.
   * Handles date strings by converting to Date object if not already an instance of Date
   * @param {object} a sort value a
   * @param {object} b sort value b
   * @returns {number} normal sort function, returns -ve, 0, +ve
   */
  rowSorter.sortDate = function sortDate(a, b) {
    var nulls = rowSorter.handleNulls(a, b);
    if ( nulls !== null ) {
      return nulls;
    } else {
      if (!(a instanceof Date)) {
        a = new Date(a);
      }
      if (!(b instanceof Date)) {
        b = new Date(b);
      }
      var timeA = a.getTime(),
          timeB = b.getTime();

      return timeA === timeB ? 0 : (timeA < timeB ? -1 : 1);
    }
  };


  /**
   * @ngdoc method
   * @methodOf ui.grid.class:rowSorter
   * @name sortBool
   * @description Sorts boolean values, true is considered larger than false.
   * Handles nulls and undefined through calling handleNulls
   * @param {object} a sort value a
   * @param {object} b sort value b
   * @returns {number} normal sort function, returns -ve, 0, +ve
   */
  rowSorter.sortBool = function sortBool(a, b) {
    var nulls = rowSorter.handleNulls(a, b);
    if ( nulls !== null ) {
      return nulls;
    } else {
      if (a && b) {
        return 0;
      }

      if (!a && !b) {
        return 0;
      }
      else {
        return a ? 1 : -1;
      }
    }
  };


  /**
   * @ngdoc method
   * @methodOf ui.grid.class:rowSorter
   * @name getSortFn
   * @description Get the sort function for the column.  Looks first in
   * rowSorter.colSortFnCache using the column name, failing that it
   * looks at col.sortingAlgorithm (and puts it in the cache), failing that
   * it guesses the sort algorithm based on the data type.
   *
   * The cache currently seems a bit pointless, as none of the work we do is
   * processor intensive enough to need caching.  Presumably in future we might
   * inspect the row data itself to guess the sort function, and in that case
   * it would make sense to have a cache, the infrastructure is in place to allow
   * that.
   *
   * @param {Grid} grid the grid to consider
   * @param {GridColumn} col the column to find a function for
   * @param {array} rows an array of grid rows.  Currently unused, but presumably in future
   * we might inspect the rows themselves to decide what sort of data might be there
   * @returns {function} the sort function chosen for the column
   */
  rowSorter.getSortFn = function getSortFn(grid, col, rows) {
    var sortFn, item;

    // See if we already figured out what to use to sort the column and have it in the cache
    if (rowSorter.colSortFnCache[col.colDef.name]) {
      sortFn = rowSorter.colSortFnCache[col.colDef.name];
    }
    // If the column has its OWN sorting algorithm, use that
    else if (col.sortingAlgorithm !== undefined) {
      sortFn = col.sortingAlgorithm;
      rowSorter.colSortFnCache[col.colDef.name] = col.sortingAlgorithm;
    }
    // Always default to sortAlpha when sorting after a cellFilter
    else if ( col.sortCellFiltered && col.cellFilter ) {
      sortFn = rowSorter.sortAlpha;
      rowSorter.colSortFnCache[col.colDef.name] = sortFn;
    }
    // Try and guess what sort function to use
    else {
      // Guess the sort function
      sortFn = rowSorter.guessSortFn(col.colDef.type);

      // If we found a sort function, cache it
      if (sortFn) {
        rowSorter.colSortFnCache[col.colDef.name] = sortFn;
      }
      else {
        // We assign the alpha sort because anything that is null/undefined will never get passed to
        // the actual sorting function. It will get caught in our null check and returned to be sorted
        // down to the bottom
        sortFn = rowSorter.sortAlpha;
      }
    }

    return sortFn;
  };



  /**
   * @ngdoc method
   * @methodOf ui.grid.class:rowSorter
   * @name prioritySort
   * @description Used where multiple columns are present in the sort criteria,
   * we determine which column should take precedence in the sort by sorting
   * the columns based on their sort.priority
   *
   * @param {gridColumn} a column a
   * @param {gridColumn} b column b
   * @returns {number} normal sort function, returns -ve, 0, +ve
   */
  rowSorter.prioritySort = function (a, b) {
    // Both columns have a sort priority
    if (a.sort && a.sort.priority !== undefined && b.sort && b.sort.priority !== undefined) {
      // A is higher priority
      if (a.sort.priority < b.sort.priority) {
        return -1;
      }
      // Equal
      else if (a.sort.priority === b.sort.priority) {
        return 0;
      }
      // B is higher
      else {
        return 1;
      }
    }
    // Only A has a priority
    else if (a.sort && a.sort.priority !== undefined) {
      return -1;
    }
    // Only B has a priority
    else if (b.sort && b.sort.priority !== undefined) {
      return 1;
    }
    // Neither has a priority
    else {
      return 0;
    }
  };


  /**
   * @ngdoc object
   * @name useExternalSorting
   * @propertyOf ui.grid.class:GridOptions
   * @description Prevents the internal sorting from executing.  Events will
   * still be fired when the sort changes, and the sort information on
   * the columns will be updated, allowing an external sorter (for example,
   * server sorting) to be implemented.  Defaults to false.
   *
   */
  /**
   * @ngdoc method
   * @methodOf ui.grid.class:rowSorter
   * @name sort
   * @description sorts the grid
   * @param {Object} grid the grid itself
   * @param {array} rows the rows to be sorted
   * @param {array} columns the columns in which to look
   * for sort criteria
   * @returns {array} sorted rows
   */
  rowSorter.sort = function rowSorterSort(grid, rows, columns) {
    // first make sure we are even supposed to do work
    if (!rows) {
      return;
    }

    if (grid.options.useExternalSorting) {
      return rows;
    }

    // Build the list of columns to sort by
    var sortCols = [];
    var defaultSortCols = [];
    columns.forEach(function (col) {
      if (col.sort && !col.sort.ignoreSort && col.sort.direction && (col.sort.direction === uiGridConstants.ASC || col.sort.direction === uiGridConstants.DESC)) {
        sortCols.push({
          col: col,
          sort: col.sort
        });
      } else if ( col.defaultSort && col.defaultSort.direction && (col.defaultSort.direction === uiGridConstants.ASC || col.defaultSort.direction === uiGridConstants.DESC) ) {
        defaultSortCols.push({
          col: col,
          sort: col.defaultSort
        });
      }
    });

    // Sort the "sort columns" by their sort priority
    sortCols = sortCols.sort(rowSorter.prioritySort);
    defaultSortCols = defaultSortCols.sort(rowSorter.prioritySort);
    sortCols = sortCols.concat(defaultSortCols);

    // Now rows to sort by, maintain original order
    if (sortCols.length === 0) {
      return rows;
    }

    // Re-usable variables
    var col, direction;

    // put a custom index field on each row, used to make a stable sort out of unstable sorts (e.g. Chrome)
    var setIndex = function( row, idx ) {
      row.entity.$$uiGridIndex = idx;
    };
    rows.forEach(setIndex);

    // IE9-11 HACK.... the 'rows' variable would be empty where we call rowSorter.getSortFn(...) below. We have to use a separate reference
    // var d = data.slice(0);
    var r = rows.slice(0);

    // Now actually sort the data
    var rowSortFn = function (rowA, rowB) {
      var tem = 0,
          idx = 0,
          sortFn;

      while (tem === 0 && idx < sortCols.length) {
        // grab the metadata for the rest of the logic
        col = sortCols[idx].col;
        direction = sortCols[idx].sort.direction;

        sortFn = rowSorter.getSortFn(grid, col, r);

        // Webpack's compress will hoist and combine propA, propB into one var and break sorting functionality
        // Wrapping in function prevents that unexpected behavior
        var props = getCellValues(grid, rowA, rowB, col);
        var propA = props[0];
        var propB = props[1];
        tem = sortFn(propA, propB, rowA, rowB, direction, col);

        idx++;
      }

      // Chrome doesn't implement a stable sort function.  If our sort returns 0
      // (i.e. the items are equal), and we're at the last sort column in the list,
      // then return the previous order using our custom
      // index variable
      if (tem === 0 ) {
        return rowA.entity.$$uiGridIndex - rowB.entity.$$uiGridIndex;
      }

      // Made it this far, we don't have to worry about null & undefined
      if (direction === uiGridConstants.ASC) {
        return tem;
      } else {
        return 0 - tem;
      }
    };

    var newRows = rows.sort(rowSortFn);

    // remove the custom index field on each row, used to make a stable sort out of unstable sorts (e.g. Chrome)
    var clearIndex = function( row, idx ) {
       delete row.entity.$$uiGridIndex;
    };
    rows.forEach(clearIndex);

    return newRows;
  };

  function getCellValues(grid, rowA, rowB, col) {
    var propA, propB;

    if ( col.sortCellFiltered ) {
      propA = grid.getCellDisplayValue(rowA, col);
      propB = grid.getCellDisplayValue(rowB, col);
    } else {
      propA = grid.getCellValue(rowA, col);
      propB = grid.getCellValue(rowB, col);
    }

    return [propA, propB];
  }

  return rowSorter;
}]);

})();

(function() {

var module = angular.module('ui.grid');

var bindPolyfill;
if (typeof Function.prototype.bind !== "function") {
  bindPolyfill = function() {
    var slice = Array.prototype.slice;
    return function(context) {
      var fn = this,
        args = slice.call(arguments, 1);
      if (args.length) {
        return function() {
          return arguments.length ? fn.apply(context, args.concat(slice.call(arguments))) : fn.apply(context, args);
        };
      }
      return function() {
        return arguments.length ? fn.apply(context, arguments) : fn.call(context);
      };
    };
  };
}

function  getStyles (elem) {
  var e = elem;
  if (typeof(e.length) !== 'undefined' && e.length) {
    e = elem[0];
  }

  return e.ownerDocument.defaultView.getComputedStyle(e, null);
}

var rnumnonpx = new RegExp( "^(" + (/[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/).source + ")(?!px)[a-z%]+$", "i" ),
    // swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
    // see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
    rdisplayswap = /^(block|none|table(?!-c[ea]).+)/,
    cssShow = { position: "absolute", visibility: "hidden", display: "block" };

function augmentWidthOrHeight( elem, name, extra, isBorderBox, styles ) {
  var i = extra === ( isBorderBox ? 'border' : 'content' ) ?
          // If we already have the right measurement, avoid augmentation
          4 :
          // Otherwise initialize for horizontal or vertical properties
          name === 'width' ? 1 : 0,

          val = 0;

  var sides = ['Top', 'Right', 'Bottom', 'Left'];

  for ( ; i < 4; i += 2 ) {
    var side = sides[i];
    // dump('side', side);

    // both box models exclude margin, so add it if we want it
    if ( extra === 'margin' ) {
      var marg = parseFloat(styles[extra + side]);
      if (!isNaN(marg)) {
        val += marg;
      }
    }
    // dump('val1', val);

    if ( isBorderBox ) {
      // border-box includes padding, so remove it if we want content
      if ( extra === 'content' ) {
        var padd = parseFloat(styles['padding' + side]);
        if (!isNaN(padd)) {
          val -= padd;
          // dump('val2', val);
        }
      }

      // at this point, extra isn't border nor margin, so remove border
      if ( extra !== 'margin' ) {
        var bordermarg = parseFloat(styles['border' + side + 'Width']);
        if (!isNaN(bordermarg)) {
          val -= bordermarg;
          // dump('val3', val);
        }
      }
    }
    else {
      // at this point, extra isn't content, so add padding
      var nocontentPad = parseFloat(styles['padding' + side]);
      if (!isNaN(nocontentPad)) {
        val += nocontentPad;
        // dump('val4', val);
      }

      // at this point, extra isn't content nor padding, so add border
      if ( extra !== 'padding') {
        var nocontentnopad = parseFloat(styles['border' + side + 'Width']);
        if (!isNaN(nocontentnopad)) {
          val += nocontentnopad;
          // dump('val5', val);
        }
      }
    }
  }

  // dump('augVal', val);

  return val;
}

function getWidthOrHeight( elem, name, extra ) {
  // Start with offset property, which is equivalent to the border-box value
  var valueIsBorderBox = true,
          val, // = name === 'width' ? elem.offsetWidth : elem.offsetHeight,
          styles = getStyles(elem),
          isBorderBox = styles['boxSizing'] === 'border-box';

  // some non-html elements return undefined for offsetWidth, so check for null/undefined
  // svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
  // MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
  if ( val <= 0 || val == null ) {
    // Fall back to computed then uncomputed css if necessary
    val = styles[name];
    if ( val < 0 || val == null ) {
      val = elem.style[ name ];
    }

    // Computed unit is not pixels. Stop here and return.
    if ( rnumnonpx.test(val) ) {
      return val;
    }

    // we need the check for style in case a browser which returns unreliable values
    // for getComputedStyle silently falls back to the reliable elem.style
    valueIsBorderBox = isBorderBox &&
            ( true || val === elem.style[ name ] ); // use 'true' instead of 'support.boxSizingReliable()'

    // Normalize "", auto, and prepare for extra
    val = parseFloat( val ) || 0;
  }

  // use the active box-sizing model to add/subtract irrelevant styles
  var ret = ( val +
    augmentWidthOrHeight(
      elem,
      name,
      extra || ( isBorderBox ? "border" : "content" ),
      valueIsBorderBox,
      styles
    )
  );

  // dump('ret', ret, val);
  return ret;
}

function getLineHeight(elm) {
  elm = angular.element(elm)[0];
  var parent = elm.parentElement;

  if (!parent) {
    parent = document.getElementsByTagName('body')[0];
  }

  return parseInt( getStyles(parent).fontSize ) || parseInt( getStyles(elm).fontSize ) || 16;
}

var uid = ['0', '0', '0', '0'];
var uidPrefix = 'uiGrid-';

/**
 *  @ngdoc service
 *  @name ui.grid.service:GridUtil
 *
 *  @description Grid utility functions
 */
module.service('gridUtil', ['$log', '$window', '$document', '$http', '$templateCache', '$timeout', '$interval', '$injector', '$q', '$interpolate', 'uiGridConstants',
  function ($log, $window, $document, $http, $templateCache, $timeout, $interval, $injector, $q, $interpolate, uiGridConstants) {
  var s = {

    augmentWidthOrHeight: augmentWidthOrHeight,

    getStyles: getStyles,

    /**
     * @ngdoc method
     * @name createBoundedWrapper
     * @methodOf ui.grid.service:GridUtil
     *
     * @param {object} object to bind 'this' to
     * @param {method} method to bind
     * @returns {Function} The wrapper that performs the binding
     *
     * @description
     * Binds given method to given object.
     *
     * By means of a wrapper, ensures that ``method`` is always bound to
     * ``object`` regardless of its calling environment.
     * Iow, inside ``method``, ``this`` always points to ``object``.
     *
     * See http://alistapart.com/article/getoutbindingsituations
     *
     */
    createBoundedWrapper: function(object, method) {
        return function() {
            return method.apply(object, arguments);
        };
    },


    /**
     * @ngdoc method
     * @name readableColumnName
     * @methodOf ui.grid.service:GridUtil
     *
     * @param {string} columnName Column name as a string
     * @returns {string} Column name appropriately capitalized and split apart
     *
       @example
       <example module="app">
        <file name="app.js">
          var app = angular.module('app', ['ui.grid']);

          app.controller('MainCtrl', ['$scope', 'gridUtil', function ($scope, gridUtil) {
            $scope.name = 'firstName';
            $scope.columnName = function(name) {
              return gridUtil.readableColumnName(name);
            };
          }]);
        </file>
        <file name="index.html">
          <div ng-controller="MainCtrl">
            <strong>Column name:</strong> <input ng-model="name" />
            <br>
            <strong>Output:</strong> <span ng-bind="columnName(name)"></span>
          </div>
        </file>
      </example>
     */
    readableColumnName: function (columnName) {
      // Convert underscores to spaces
      if (typeof(columnName) === 'undefined' || columnName === undefined || columnName === null) { return columnName; }

      if (typeof(columnName) !== 'string') {
        columnName = String(columnName);
      }

      return columnName.replace(/_+/g, ' ')
        // Replace a completely all-capsed word with a first-letter-capitalized version
        .replace(/^[A-Z]+$/, function (match) {
          return match.toLowerCase();
        })
        // Capitalize the first letter of words
        .replace(/([\w\u00C0-\u017F]+)/g, function (match) {
          return match.charAt(0).toUpperCase() + match.slice(1);
        })
        // Put a space in between words that have partial capilizations (i.e. 'firstName' becomes 'First Name')
        // .replace(/([A-Z]|[A-Z]\w+)([A-Z])/g, "$1 $2");
        // .replace(/(\w+?|\w)([A-Z])/g, "$1 $2");
        .replace(/(\w+?(?=[A-Z]))/g, '$1 ');
    },

    /**
     * @ngdoc method
     * @name getColumnsFromData
     * @methodOf ui.grid.service:GridUtil
     * @description Return a list of column names, given a data set
     *
     * @param {string} data Data array for grid
     * @returns {Object} Column definitions with field accessor and column name
     *
     * @example
       <pre>
         var data = [
           { firstName: 'Bob', lastName: 'Jones' },
           { firstName: 'Frank', lastName: 'Smith' }
         ];

         var columnDefs = GridUtil.getColumnsFromData(data, excludeProperties);

         columnDefs == [
          {
            field: 'firstName',
            name: 'First Name'
          },
          {
            field: 'lastName',
            name: 'Last Name'
          }
         ];
       </pre>
     */
    getColumnsFromData: function (data, excludeProperties) {
      var columnDefs = [];

      if (!data || typeof(data[0]) === 'undefined' || data[0] === undefined) { return []; }
      if (angular.isUndefined(excludeProperties)) { excludeProperties = []; }

      var item = data[0];

      angular.forEach(item,function (prop, propName) {
        if ( excludeProperties.indexOf(propName) === -1) {
          columnDefs.push({
            name: propName
          });
        }
      });

      return columnDefs;
    },

    /**
     * @ngdoc method
     * @name newId
     * @methodOf ui.grid.service:GridUtil
     * @description Return a unique ID string
     *
     * @returns {string} Unique string
     *
     * @example
       <pre>
        var id = GridUtil.newId();

        # 1387305700482;
       </pre>
     */
    newId: (function() {
      var seedId = new Date().getTime();
      return function() {
          return seedId += 1;
      };
    })(),


    /**
     * @ngdoc method
     * @name getTemplate
     * @methodOf ui.grid.service:GridUtil
     * @description Get's template from cache / element / url
     *
     * @param {string|element|promise} template Either a string representing the template id, a string representing the template url,
     *   an jQuery/Angualr element, or a promise that returns the template contents to use.
     * @returns {object} a promise resolving to template contents
     *
     * @example
     <pre>
     GridUtil.getTemplate(url).then(function (contents) {
          alert(contents);
        })
     </pre>
     */
    getTemplate: function (template) {
      // Try to fetch the template out of the templateCache
      if ($templateCache.get(template)) {
        return s.postProcessTemplate($templateCache.get(template));
      }

      // See if the template is itself a promise
      if (angular.isFunction(template.then)) {
        return template.then(s.postProcessTemplate).catch(angular.noop);
      }

      // If the template is an element, return the element
      try {
        if (angular.element(template).length > 0) {
          return $q.when(template).then(s.postProcessTemplate).catch(angular.noop);
        }
      }
      catch (err) {
        // do nothing; not valid html
      }

      // s.logDebug('fetching url', template);

      // Default to trying to fetch the template as a url with $http
      return $http({ method: 'GET', url: template})
        .then(
          function (result) {
            var templateHtml = result.data.trim();
            // put in templateCache for next call
            $templateCache.put(template, templateHtml);
            return templateHtml;
          },
          function (err) {
            throw new Error("Could not get template " + template + ": " + err);
          }
        )
        .then(s.postProcessTemplate).catch(angular.noop);
    },

    //
    postProcessTemplate: function (template) {
      var startSym = $interpolate.startSymbol(),
          endSym = $interpolate.endSymbol();

      // If either of the interpolation symbols have been changed, we need to alter this template
      if (startSym !== '{{' || endSym !== '}}') {
        template = template.replace(/\{\{/g, startSym);
        template = template.replace(/\}\}/g, endSym);
      }

      return $q.when(template);
    },

    /**
     * @ngdoc method
     * @name guessType
     * @methodOf ui.grid.service:GridUtil
     * @description guesses the type of an argument
     *
     * @param {string/number/bool/object} item variable to examine
     * @returns {string} one of the following
     * - 'string'
     * - 'boolean'
     * - 'number'
     * - 'date'
     * - 'object'
     */
    guessType : function (item) {
      var itemType = typeof(item);

      // Check for numbers and booleans
      switch (itemType) {
        case "number":
        case "boolean":
        case "string":
          return itemType;
        default:
          if (angular.isDate(item)) {
            return "date";
          }
          return "object";
      }
    },


  /**
    * @ngdoc method
    * @name elementWidth
    * @methodOf ui.grid.service:GridUtil
    *
    * @param {element} elem DOM element
    * @param {string} [extra] Optional modifier for calculation. Use 'margin' to account for margins on element
    *
    * @returns {number} Element width in pixels, accounting for any borders, etc.
    */
    elementWidth: function (elem) {

    },

    /**
    * @ngdoc method
    * @name elementHeight
    * @methodOf ui.grid.service:GridUtil
    *
    * @param {element} elem DOM element
    * @param {string} [extra] Optional modifier for calculation. Use 'margin' to account for margins on element
    *
    * @returns {number} Element height in pixels, accounting for any borders, etc.
    */
    elementHeight: function (elem) {

    },

    isVisible: function (elem) {
      return !!( elem[0].offsetWidth || elem[0].offsetHeight || elem[0].getClientRects().length )
    },

    // Thanks to http://stackoverflow.com/a/13382873/888165
    getScrollbarWidth: function() {
        var outer = document.createElement("div");

        outer.style.visibility = "hidden";
        outer.style.width = "100px";
        outer.style.msOverflowStyle = "scrollbar"; // needed for WinJS apps

        document.body.appendChild(outer);

        var widthNoScroll = outer.offsetWidth;
        // force scrollbars
        outer.style.overflow = "scroll";
        outer.style.position = "absolute"; // force Firefox to draw a scrollbar

        // add innerdiv
        var inner = document.createElement("div");
        inner.style.width = "100%";
        outer.appendChild(inner);

        var widthWithScroll = inner.offsetWidth;

        // remove divs
        outer.parentNode.removeChild(outer);

        return widthNoScroll - widthWithScroll;
    },

    swap: function( elem, options, callback, args ) {
      var ret, name,
              old = {};

      // Remember the old values, and insert the new ones
      for ( name in options ) {
        old[ name ] = elem.style[ name ];
        elem.style[ name ] = options[ name ];
      }

      ret = callback.apply( elem, args || [] );

      // Revert the old values
      for ( name in options ) {
        elem.style[ name ] = old[ name ];
      }

      return ret;
    },

    fakeElement: function( elem, options, callback, args ) {
      var ret, name,
          newElement = angular.element(elem).clone()[0];

      for ( name in options ) {
        newElement.style[ name ] = options[ name ];
      }

      angular.element(document.body).append(newElement);

      ret = callback.call( newElement, newElement );

      angular.element(newElement).remove();

      return ret;
    },

    /**
    * @ngdoc method
    * @name normalizeWheelEvent
    * @methodOf ui.grid.service:GridUtil
    *
    * @param {event} event A mouse wheel event
    *
    * @returns {event} A normalized event
    *
    * @description
    * Given an event from this list:
    *
    * `wheel, mousewheel, DomMouseScroll, MozMousePixelScroll`
    *
    * "normalize" it
    * so that it stays consistent no matter what browser it comes from (i.e. scale it correctly and make sure the direction is right.)
    */
    normalizeWheelEvent: function (event) {
      // var toFix = ['wheel', 'mousewheel', 'DOMMouseScroll', 'MozMousePixelScroll'];
      // var toBind = 'onwheel' in document || document.documentMode >= 9 ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'];
      var lowestDelta, lowestDeltaXY;

      var orgEvent   = event || window.event,
          args       = [].slice.call(arguments, 1),
          delta      = 0,
          deltaX     = 0,
          deltaY     = 0,
          absDelta   = 0,
          absDeltaXY = 0,
          fn;

      // event = $.event.fix(orgEvent);
      // event.type = 'mousewheel';

      // NOTE: jQuery masks the event and stores it in the event as originalEvent
      if (orgEvent.originalEvent) {
        orgEvent = orgEvent.originalEvent;
      }

      // Old school scrollwheel delta
      if ( orgEvent.wheelDelta ) { delta = orgEvent.wheelDelta; }
      if ( orgEvent.detail )     { delta = orgEvent.detail * -1; }

      // At a minimum, setup the deltaY to be delta
      deltaY = delta;

      // Firefox < 17 related to DOMMouseScroll event
      if ( orgEvent.axis !== undefined && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
          deltaY = 0;
          deltaX = delta * -1;
      }

      // New school wheel delta (wheel event)
      if ( orgEvent.deltaY ) {
          deltaY = orgEvent.deltaY * -1;
          delta  = deltaY;
      }
      if ( orgEvent.deltaX ) {
          deltaX = orgEvent.deltaX;
          delta  = deltaX * -1;
      }

      // Webkit
      if ( orgEvent.wheelDeltaY !== undefined ) { deltaY = orgEvent.wheelDeltaY; }
      if ( orgEvent.wheelDeltaX !== undefined ) { deltaX = orgEvent.wheelDeltaX; }

      // Look for lowest delta to normalize the delta values
      absDelta = Math.abs(delta);
      if ( !lowestDelta || absDelta < lowestDelta ) { lowestDelta = absDelta; }
      absDeltaXY = Math.max(Math.abs(deltaY), Math.abs(deltaX));
      if ( !lowestDeltaXY || absDeltaXY < lowestDeltaXY ) { lowestDeltaXY = absDeltaXY; }

      // Get a whole value for the deltas
      fn     = delta > 0 ? 'floor' : 'ceil';
      delta  = Math[fn](delta  / lowestDelta);
      deltaX = Math[fn](deltaX / lowestDeltaXY);
      deltaY = Math[fn](deltaY / lowestDeltaXY);

      return {
        delta: delta,
        deltaX: deltaX,
        deltaY: deltaY
      };
    },

    // Stolen from Modernizr
    // TODO: make this, and everythign that flows from it, robust
    // http://www.stucox.com/blog/you-cant-detect-a-touchscreen/
    isTouchEnabled: function() {
      var bool;

      if (('ontouchstart' in $window) || $window.DocumentTouch && $document instanceof DocumentTouch) {
        bool = true;
      }

      return bool;
    },

    isNullOrUndefined: function(obj) {
      return (obj === undefined || obj === null);
    },

    endsWith: function(str, suffix) {
      if (!str || !suffix || typeof str !== "string") {
        return false;
      }
      return str.indexOf(suffix, str.length - suffix.length) !== -1;
    },

    arrayContainsObjectWithProperty: function(array, propertyName, propertyValue) {
        var found = false;
        angular.forEach(array, function (object) {
            if (object[propertyName] === propertyValue) {
                found = true;
            }
        });
        return found;
    },

    numericAndNullSort: function (a, b) {
      if (a === null) { return 1; }
      if (b === null) { return -1; }
      if (a === null && b === null) { return 0; }
      return a - b;
    },

    // Disable ngAnimate animations on an element
    disableAnimations: function (element) {
      var $animate;
      try {
        $animate = $injector.get('$animate');
        // See: http://brianhann.com/angular-1-4-breaking-changes-to-be-aware-of/#animate
        if (angular.version.major > 1 || (angular.version.major === 1 && angular.version.minor >= 4)) {
          $animate.enabled(element, false);
        } else {
          $animate.enabled(false, element);
        }
      }
      catch (e) {}
    },

    enableAnimations: function (element) {
      var $animate;
      try {
        $animate = $injector.get('$animate');
        // See: http://brianhann.com/angular-1-4-breaking-changes-to-be-aware-of/#animate
        if (angular.version.major > 1 || (angular.version.major === 1 && angular.version.minor >= 4)) {
          $animate.enabled(element, true);
        } else {
          $animate.enabled(true, element);
        }
        return $animate;
      }
      catch (e) {}
    },

    // Blatantly stolen from Angular as it isn't exposed (yet)
    nextUid: function nextUid() {
      var index = uid.length;
      var digit;

      while (index) {
        index--;
        digit = uid[index].charCodeAt(0);
        if (digit === 57 /*'9'*/) {
          uid[index] = 'A';
          return uidPrefix + uid.join('');
        }
        if (digit === 90  /*'Z'*/) {
          uid[index] = '0';
        } else {
          uid[index] = String.fromCharCode(digit + 1);
          return uidPrefix + uid.join('');
        }
      }
      uid.unshift('0');

      return uidPrefix + uid.join('');
    },

    // Blatantly stolen from Angular as it isn't exposed (yet)
    hashKey: function hashKey(obj) {
      var objType = typeof obj,
          key;

      if (objType === 'object' && obj !== null) {
        if (typeof (key = obj.$$hashKey) === 'function') {
          // must invoke on object to keep the right this
          key = obj.$$hashKey();
        }
        else if (typeof(obj.$$hashKey) !== 'undefined' && obj.$$hashKey) {
          key = obj.$$hashKey;
        }
        else if (key === undefined) {
          key = obj.$$hashKey = s.nextUid();
        }
      }
      else {
        key = obj;
      }

      return objType + ': ' + key;
    },

    resetUids: function () {
      uid = ['0', '0', '0'];
    },

    /**
     * @ngdoc method
     * @methodOf ui.grid.service:GridUtil
     * @name logError
     * @description wraps the $log method, allowing us to choose different
     * treatment within ui-grid if we so desired.  At present we only log
     * error messages if uiGridConstants.LOG_ERROR_MESSAGES is set to true
     * @param {string} logMessage message to be logged to the console
     *
     */
    logError: function( logMessage ) {
      if ( uiGridConstants.LOG_ERROR_MESSAGES ) {
        $log.error( logMessage );
      }
    },

    /**
     * @ngdoc method
     * @methodOf ui.grid.service:GridUtil
     * @name logWarn
     * @description wraps the $log method, allowing us to choose different
     * treatment within ui-grid if we so desired.  At present we only log
     * warning messages if uiGridConstants.LOG_WARN_MESSAGES is set to true
     * @param {string} logMessage message to be logged to the console
     *
     */
    logWarn: function( logMessage ) {
      if ( uiGridConstants.LOG_WARN_MESSAGES ) {
        $log.warn( logMessage );
      }
    },

    /**
     * @ngdoc method
     * @methodOf ui.grid.service:GridUtil
     * @name logDebug
     * @description wraps the $log method, allowing us to choose different
     * treatment within ui-grid if we so desired.  At present we only log
     * debug messages if uiGridConstants.LOG_DEBUG_MESSAGES is set to true
     *
     */
    logDebug: function() {
      if ( uiGridConstants.LOG_DEBUG_MESSAGES ) {
        $log.debug.apply($log, arguments);
      }
    }

  };

  /**
   * @ngdoc object
   * @name focus
   * @propertyOf ui.grid.service:GridUtil
   * @description Provides a set of methods to set the document focus inside the grid.
   * See {@link ui.grid.service:GridUtil.focus} for more information.
   */

  /**
   * @ngdoc object
   * @name ui.grid.service:GridUtil.focus
   * @description Provides a set of methods to set the document focus inside the grid.
   * Timeouts are utilized to ensure that the focus is invoked after any other event has been triggered.
   * e.g. click events that need to run before the focus or
   * inputs elements that are in a disabled state but are enabled when those events
   * are triggered.
   */
  s.focus = {
    queue: [],
    // http://stackoverflow.com/questions/25596399/set-element-focus-in-angular-way
    /**
     * @ngdoc method
     * @methodOf ui.grid.service:GridUtil.focus
     * @name byId
     * @description Sets the focus of the document to the given id value.
     * If provided with the grid object it will automatically append the grid id.
     * This is done to encourage unique dom id's as it allows for multiple grids on a
     * page.
     * @param {String} id the id of the dom element to set the focus on
     * @param {Object=} Grid the grid object for this grid instance. See: {@link ui.grid.class:Grid}
     * @param {Number} Grid.id the unique id for this grid. Already set on an initialized grid object.
     * @returns {Promise} The `$timeout` promise that will be resolved once focus is set. If another focus is requested before this request is evaluated.
     * then the promise will fail with the `'canceled'` reason.
     */
    byId: function (id, Grid) {
      this._purgeQueue();
      var promise = $timeout(function() {
        var elementID = (Grid && Grid.id ? Grid.id + '-' : '') + id;
        var element = $window.document.getElementById(elementID);
        if (element) {
          element.focus();
        } else {
          s.logWarn('[focus.byId] Element id ' + elementID + ' was not found.');
        }
      }, 0, false);
      this.queue.push(promise);
      return promise;
    },

    /**
     * @ngdoc method
     * @methodOf ui.grid.service:GridUtil.focus
     * @name byElement
     * @description Sets the focus of the document to the given dom element.
     * @param {(element|angular.element)} element the DOM element to set the focus on
     * @returns {Promise} The `$timeout` promise that will be resolved once focus is set. If another focus is requested before this request is evaluated.
     * then the promise will fail with the `'canceled'` reason.
     */
    byElement: function(element) {
      if (!angular.isElement(element)) {
        s.logWarn("Trying to focus on an element that isn\'t an element.");
        return $q.reject('not-element');
      }
      element = angular.element(element);
      this._purgeQueue();
      var promise = $timeout(function() {
        if (element) {
          element[0].focus();
        }
      }, 0, false);
      this.queue.push(promise);
      return promise;
    },
    /**
     * @ngdoc method
     * @methodOf ui.grid.service:GridUtil.focus
     * @name bySelector
     * @description Sets the focus of the document to the given dom element.
     * @param {(element|angular.element)} parentElement the parent/ancestor of the dom element that you are selecting using the query selector
     * @param {String} querySelector finds the dom element using the {@link http://www.w3schools.com/jsref/met_document_queryselector.asp querySelector}
     * @param {boolean} [aSync=false] If true then the selector will be querried inside of a timeout. Otherwise the selector will be querried imidately
     * then the focus will be called.
     * @returns {Promise} The `$timeout` promise that will be resolved once focus is set. If another focus is requested before this request is evaluated.
     * then the promise will fail with the `'canceled'` reason.
     */
    bySelector: function(parentElement, querySelector, aSync) {
      var self = this;
      if (!angular.isElement(parentElement)) {
        throw new Error("The parent element is not an element.");
      }
      // Ensure that this is an angular element.
      // It is fine if this is already an angular element.
      parentElement = angular.element(parentElement);
      var focusBySelector = function() {
        var element = parentElement[0].querySelector(querySelector);
        return self.byElement(element);
      };
      this._purgeQueue();
      if (aSync) { // Do this asynchronysly
        var promise = $timeout(focusBySelector, 0, false);
        this.queue.push(promise);
        return promise;
      } else {
        return focusBySelector();
      }
    },
    _purgeQueue: function() {
      this.queue.forEach(function(element) {
        $timeout.cancel(element);
      });
      this.queue = [];
    }
  };


  ['width', 'height'].forEach(function (name) {
    var capsName = name.charAt(0).toUpperCase() + name.substr(1);

    s['element' + capsName] = function (elem, extra) {
      var e = elem;
      if (e && typeof(e.length) !== 'undefined' && e.length) {
        e = elem[0];
      }

      if (e && e !== null) {
        var styles = getStyles(e);
        return e.offsetWidth === 0 && rdisplayswap.test(styles.display) ?
          s.swap(e, cssShow, function() {
            return getWidthOrHeight(e, name, extra );
          }) :
          getWidthOrHeight( e, name, extra );
      } else {
        return null;
      }
    };

    s['outerElement' + capsName] = function (elem, margin) {
      return elem ? s['element' + capsName].call(this, elem, margin ? 'margin' : 'border') : null;
    };
  });

  // http://stackoverflow.com/a/24107550/888165
  s.closestElm = function closestElm(el, selector) {
    if (typeof(el.length) !== 'undefined' && el.length) {
      el = el[0];
    }

    var matchesFn;

    // find vendor prefix
    ['matches','webkitMatchesSelector','mozMatchesSelector','msMatchesSelector','oMatchesSelector'].some(function(fn) {
        if (typeof document.body[fn] === 'function') {
            matchesFn = fn;
            return true;
        }
        return false;
    });

    // traverse parents
    var parent;
    while (el !== null) {
      parent = el.parentElement;
      if (parent !== null && parent[matchesFn](selector)) {
          return parent;
      }
      el = parent;
    }

    return null;
  };

  s.type = function (obj) {
    var text = Function.prototype.toString.call(obj.constructor);
    return text.match(/function (.*?)\(/)[1];
  };

  s.getBorderSize = function getBorderSize(elem, borderType) {
    if (typeof(elem.length) !== 'undefined' && elem.length) {
      elem = elem[0];
    }

    var styles = getStyles(elem);

    // If a specific border is supplied, like 'top', read the 'borderTop' style property
    if (borderType) {
      borderType = 'border' + borderType.charAt(0).toUpperCase() + borderType.slice(1);
    }
    else {
      borderType = 'border';
    }

    borderType += 'Width';

    var val = parseInt(styles[borderType], 10);

    if (isNaN(val)) {
      return 0;
    }
    else {
      return val;
    }
  };

  // http://stackoverflow.com/a/22948274/888165
  // TODO: Opera? Mobile?
  s.detectBrowser = function detectBrowser() {
    var userAgent = $window.navigator.userAgent;

    var browsers = {chrome: /chrome/i, safari: /safari/i, firefox: /firefox/i, ie: /internet explorer|trident\//i};

    for (var key in browsers) {
      if (browsers[key].test(userAgent)) {
        return key;
      }
    }

    return 'unknown';
  };

  // Borrowed from https://github.com/othree/jquery.rtl-scroll-type
  // Determine the scroll "type" this browser is using for RTL
  s.rtlScrollType = function rtlScrollType() {
    if (rtlScrollType.type) {
      return rtlScrollType.type;
    }

    var definer = angular.element('<div dir="rtl" style="font-size: 14px; width: 1px; height: 1px; position: absolute; top: -1000px; overflow: scroll">A</div>')[0],
        type = 'reverse';

    document.body.appendChild(definer);

    if (definer.scrollLeft > 0) {
      type = 'default';
    }
    else {
      definer.scrollLeft = 1;
      if (definer.scrollLeft === 0) {
        type = 'negative';
      }
    }

    angular.element(definer).remove();
    rtlScrollType.type = type;

    return type;
  };

    /**
     * @ngdoc method
     * @name normalizeScrollLeft
     * @methodOf ui.grid.service:GridUtil
     *
     * @param {element} element The element to get the `scrollLeft` from.
     * @param {grid} grid -  grid used to normalize (uses the rtl property)
     *
     * @returns {number} A normalized scrollLeft value for the current browser.
     *
     * @description
     * Browsers currently handle RTL in different ways, resulting in inconsistent scrollLeft values. This method normalizes them
     */
  s.normalizeScrollLeft = function normalizeScrollLeft(element, grid) {
    if (typeof(element.length) !== 'undefined' && element.length) {
      element = element[0];
    }

    var scrollLeft = element.scrollLeft;

    if (grid.isRTL()) {
      switch (s.rtlScrollType()) {
        case 'default':
          return element.scrollWidth - scrollLeft - element.clientWidth;
        case 'negative':
          return Math.abs(scrollLeft);
        case 'reverse':
          return scrollLeft;
      }
    }

    return scrollLeft;
  };

  /**
  * @ngdoc method
  * @name denormalizeScrollLeft
  * @methodOf ui.grid.service:GridUtil
  *
  * @param {element} element The element to normalize the `scrollLeft` value for
  * @param {number} scrollLeft The `scrollLeft` value to denormalize.
  * @param {grid} grid The grid that owns the scroll event.
  *
  * @returns {number} A normalized scrollLeft value for the current browser.
  *
  * @description
  * Browsers currently handle RTL in different ways, resulting in inconsistent scrollLeft values. This method denormalizes a value for the current browser.
  */
  s.denormalizeScrollLeft = function denormalizeScrollLeft(element, scrollLeft, grid) {
    if (typeof(element.length) !== 'undefined' && element.length) {
      element = element[0];
    }

    if (grid.isRTL()) {
      switch (s.rtlScrollType()) {
        case 'default':
          // Get the max scroll for the element
          var maxScrollLeft = element.scrollWidth - element.clientWidth;

          // Subtract the current scroll amount from the max scroll
          return maxScrollLeft - scrollLeft;
        case 'negative':
          return scrollLeft * -1;
        case 'reverse':
          return scrollLeft;
      }
    }

    return scrollLeft;
  };

    /**
     * @ngdoc method
     * @name preEval
     * @methodOf ui.grid.service:GridUtil
     *
     * @param {string} path Path to evaluate
     *
     * @returns {string} A path that is normalized.
     *
     * @description
     * Takes a field path and converts it to bracket notation to allow for special characters in path
     * @example
     * <pre>
     * gridUtil.preEval('property') == 'property'
     * gridUtil.preEval('nested.deep.prop-erty') = "nested['deep']['prop-erty']"
     * </pre>
     */
  s.preEval = function (path) {
    var m = uiGridConstants.BRACKET_REGEXP.exec(path);
    if (m) {
      return (m[1] ? s.preEval(m[1]) : m[1]) + m[2] + (m[3] ? s.preEval(m[3]) : m[3]);
    } else {
      path = path.replace(uiGridConstants.APOS_REGEXP, '\\\'');
      var parts = path.split(uiGridConstants.DOT_REGEXP);
      var preparsed = [parts.shift()];    // first item must be var notation, thus skip
      angular.forEach(parts, function (part) {
        preparsed.push(part.replace(uiGridConstants.FUNC_REGEXP, '\']$1'));
      });
      return preparsed.join('[\'');
    }
  };

  /**
   * @ngdoc method
   * @name debounce
   * @methodOf ui.grid.service:GridUtil
   *
   * @param {function} func function to debounce
   * @param {number} wait milliseconds to delay
   * @param {boolean} immediate execute before delay
   *
   * @returns {function} A function that can be executed as debounced function
   *
   * @description
   * Copied from https://github.com/shahata/angular-debounce
   * Takes a function, decorates it to execute only 1 time after multiple calls, and returns the decorated function
   * @example
   * <pre>
   * var debouncedFunc =  gridUtil.debounce(function() {alert('debounced');}, 500);
   * debouncedFunc();
   * debouncedFunc();
   * debouncedFunc();
   * </pre>
   */
  s.debounce =  function (func, wait, immediate) {
    var timeout, args, context, result;
    function debounce() {
      /* jshint validthis: true */
      context = this;
      args = arguments;
      var later = function () {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
        }
      };
      var callNow = immediate && !timeout;
      if (timeout) {
        $timeout.cancel(timeout);
      }
      timeout = $timeout(later, wait, false);
      if (callNow) {
        result = func.apply(context, args);
      }
      return result;
    }
    debounce.cancel = function () {
      $timeout.cancel(timeout);
      timeout = null;
    };
    return debounce;
  };

  /**
   * @ngdoc method
   * @name throttle
   * @methodOf ui.grid.service:GridUtil
   *
   * @param {function} func function to throttle
   * @param {number} wait milliseconds to delay after first trigger
   * @param {Object} options to use in throttle.
   *
   * @returns {function} A function that can be executed as throttled function
   *
   * @description
   * Adapted from debounce function (above)
   * Potential keys for Params Object are:
   *    trailing (bool) - whether to trigger after throttle time ends if called multiple times
   * Updated to use $interval rather than $timeout, as protractor (e2e tests) is able to work with $interval,
   * but not with $timeout
   *
   * Note that when using throttle, you need to use throttle to create a new function upfront, then use the function
   * return from that call each time you need to call throttle.  If you call throttle itself repeatedly, the lastCall
   * variable will get overwritten and the throttling won't work
   *
   * @example
   * <pre>
   * var throttledFunc =  gridUtil.throttle(function() {console.log('throttled');}, 500, {trailing: true});
   * throttledFunc(); //=> logs throttled
   * throttledFunc(); //=> queues attempt to log throttled for ~500ms (since trailing param is truthy)
   * throttledFunc(); //=> updates arguments to keep most-recent request, but does not do anything else.
   * </pre>
   */
  s.throttle = function(func, wait, options) {
    options = options || {};
    var lastCall = 0, queued = null, context, args;

    function runFunc(endDate) {
      lastCall = +new Date();
      func.apply(context, args);
      $interval(function() {queued = null; }, 0, 1, false);
    }

    return function() {
      /* jshint validthis: true */
      context = this;
      args = arguments;
      if (queued === null) {
        var sinceLast = +new Date() - lastCall;
        if (sinceLast > wait) {
          runFunc();
        }
        else if (options.trailing) {
          queued = $interval(runFunc, wait - sinceLast, 1, false);
        }
      }
    };
  };

  s.on = {};
  s.off = {};
  s._events = {};

  s.addOff = function (eventName) {
    s.off[eventName] = function (elm, fn) {
      var idx = s._events[eventName].indexOf(fn);
      if (idx > 0) {
        s._events[eventName].removeAt(idx);
      }
    };
  };

  var mouseWheeltoBind = ( 'onwheel' in document || document.documentMode >= 9 ) ? ['wheel'] : ['mousewheel', 'DomMouseScroll', 'MozMousePixelScroll'],
      nullLowestDeltaTimeout,
      lowestDelta;

  s.on.mousewheel = function (elm, fn) {
    if (!elm || !fn) { return; }

    var $elm = angular.element(elm);

    // Store the line height and page height for this particular element
    $elm.data('mousewheel-line-height', getLineHeight($elm));
    $elm.data('mousewheel-page-height', s.elementHeight($elm));
    if (!$elm.data('mousewheel-callbacks')) { $elm.data('mousewheel-callbacks', {}); }

    var cbs = $elm.data('mousewheel-callbacks');
    cbs[fn] = (Function.prototype.bind || bindPolyfill).call(mousewheelHandler, $elm[0], fn);

    // Bind all the mousew heel events
    for ( var i = mouseWheeltoBind.length; i; ) {
      $elm.on(mouseWheeltoBind[--i], cbs[fn]);
    }
    $elm.on('$destroy', function unbindEvents() {
      for ( var i = mouseWheeltoBind.length; i; ) {
        $elm.off(mouseWheeltoBind[--i], cbs[fn]);
      }
    });
  };
  s.off.mousewheel = function (elm, fn) {
    var $elm = angular.element(elm);

    var cbs = $elm.data('mousewheel-callbacks');
    var handler = cbs[fn];

    if (handler) {
      for ( var i = mouseWheeltoBind.length; i; ) {
        $elm.off(mouseWheeltoBind[--i], handler);
      }
    }

    delete cbs[fn];

    if (Object.keys(cbs).length === 0) {
      $elm.removeData('mousewheel-line-height');
      $elm.removeData('mousewheel-page-height');
      $elm.removeData('mousewheel-callbacks');
    }
  };

  function mousewheelHandler(fn, event) {
    var $elm = angular.element(this);

    var delta      = 0,
        deltaX     = 0,
        deltaY     = 0,
        absDelta   = 0,
        offsetX    = 0,
        offsetY    = 0;

    // jQuery masks events
    if (event.originalEvent) { event = event.originalEvent; }

    if ( 'detail'      in event ) { deltaY = event.detail * -1;      }
    if ( 'wheelDelta'  in event ) { deltaY = event.wheelDelta;       }
    if ( 'wheelDeltaY' in event ) { deltaY = event.wheelDeltaY;      }
    if ( 'wheelDeltaX' in event ) { deltaX = event.wheelDeltaX * -1; }

    // Firefox < 17 horizontal scrolling related to DOMMouseScroll event
    if ( 'axis' in event && event.axis === event.HORIZONTAL_AXIS ) {
      deltaX = deltaY * -1;
      deltaY = 0;
    }

    // Set delta to be deltaY or deltaX if deltaY is 0 for backwards compatabilitiy
    delta = deltaY === 0 ? deltaX : deltaY;

    // New school wheel delta (wheel event)
    if ( 'deltaY' in event ) {
      deltaY = event.deltaY * -1;
      delta  = deltaY;
    }
    if ( 'deltaX' in event ) {
      deltaX = event.deltaX;
      if ( deltaY === 0 ) { delta  = deltaX * -1; }
    }

    // No change actually happened, no reason to go any further
    if ( deltaY === 0 && deltaX === 0 ) { return; }

    // Need to convert lines and pages to pixels if we aren't already in pixels
    // There are three delta modes:
    //   * deltaMode 0 is by pixels, nothing to do
    //   * deltaMode 1 is by lines
    //   * deltaMode 2 is by pages
    if ( event.deltaMode === 1 ) {
        var lineHeight = $elm.data('mousewheel-line-height');
        delta  *= lineHeight;
        deltaY *= lineHeight;
        deltaX *= lineHeight;
    }
    else if ( event.deltaMode === 2 ) {
        var pageHeight = $elm.data('mousewheel-page-height');
        delta  *= pageHeight;
        deltaY *= pageHeight;
        deltaX *= pageHeight;
    }

    // Store lowest absolute delta to normalize the delta values
    absDelta = Math.max( Math.abs(deltaY), Math.abs(deltaX) );

    if ( !lowestDelta || absDelta < lowestDelta ) {
      lowestDelta = absDelta;

      // Adjust older deltas if necessary
      if ( shouldAdjustOldDeltas(event, absDelta) ) {
        lowestDelta /= 40;
      }
    }

    // Get a whole, normalized value for the deltas
    delta  = Math[ delta  >= 1 ? 'floor' : 'ceil' ](delta  / lowestDelta);
    deltaX = Math[ deltaX >= 1 ? 'floor' : 'ceil' ](deltaX / lowestDelta);
    deltaY = Math[ deltaY >= 1 ? 'floor' : 'ceil' ](deltaY / lowestDelta);

    var newEvent = {
      originalEvent: event,
      deltaX: deltaX,
      deltaY: deltaY,
      deltaFactor: lowestDelta,
      preventDefault: function () { event.preventDefault(); },
      stopPropagation: function () { event.stopPropagation(); }
    };

    // Clearout lowestDelta after sometime to better
    // handle multiple device types that give
    // a different lowestDelta
    // Ex: trackpad = 3 and mouse wheel = 120
    if (nullLowestDeltaTimeout) { clearTimeout(nullLowestDeltaTimeout); }
    nullLowestDeltaTimeout = setTimeout(nullLowestDelta, 200);

    fn.call($elm[0], newEvent);
  }

  function nullLowestDelta() {
    lowestDelta = null;
  }

  function shouldAdjustOldDeltas(orgEvent, absDelta) {
    // If this is an older event and the delta is divisable by 120,
    // then we are assuming that the browser is treating this as an
    // older mouse wheel event and that we should divide the deltas
    // by 40 to try and get a more usable deltaFactor.
    // Side note, this actually impacts the reported scroll distance
    // in older browsers and can cause scrolling to be slower than native.
    // Turn this off by setting $.event.special.mousewheel.settings.adjustOldDeltas to false.
    return orgEvent.type === 'mousewheel' && absDelta % 120 === 0;
  }

  return s;
}]);

// Add 'px' to the end of a number string if it doesn't have it already
module.filter('px', function() {
  return function(str) {
    if (str.match(/^[\d\.]+$/)) {
      return str + 'px';
    }
    else {
      return str;
    }
  };
});

})();

/**
 * @ngdoc overview
 * @name ui.grid.i18n
 * @description
 *
 *  # ui.grid.i18n
 * This module provides i18n functions to ui.grid and any application that wants to use it

 *
 * <div doc-module-components="ui.grid.i18n"></div>
 */

(function () {
  var DIRECTIVE_ALIASES = ['uiT', 'uiTranslate'];
  var FILTER_ALIASES = ['t', 'uiTranslate'];

  var module = angular.module('ui.grid.i18n');


  /**
   *  @ngdoc object
   *  @name ui.grid.i18n.constant:i18nConstants
   *
   *  @description constants available in i18n module
   */
  module.constant('i18nConstants', {
    MISSING: '[MISSING]',
    UPDATE_EVENT: '$uiI18n',

    LOCALE_DIRECTIVE_ALIAS: 'uiI18n',
    // default to english
    DEFAULT_LANG: 'en'
  });

//    module.config(['$provide', function($provide) {
//        $provide.decorator('i18nService', ['$delegate', function($delegate) {}])}]);

  /**
   *  @ngdoc service
   *  @name ui.grid.i18n.service:i18nService
   *
   *  @description Services for i18n
   */
  module.service('i18nService', ['$log', '$parse', 'i18nConstants', '$rootScope',
    function ($log, $parse, i18nConstants, $rootScope) {

      var langCache = {
        _langs: {},
        current: null,
        fallback: i18nConstants.DEFAULT_LANG,
        get: function (lang) {
          var self = this,
            fallbackLang = self.getFallbackLang();

          if (lang !== self.fallback) {
            return angular.extend({}, self._langs[fallbackLang],
              self._langs[lang.toLowerCase()]);
          }

          return self._langs[lang.toLowerCase()];
        },
        add: function (lang, strings) {
          var lower = lang.toLowerCase();
          if (!this._langs[lower]) {
            this._langs[lower] = {};
          }
          angular.merge(this._langs[lower], strings);
        },
        getAllLangs: function () {
          var langs = [];
          if (!this._langs) {
            return langs;
          }

          for (var key in this._langs) {
            langs.push(key);
          }

          return langs;
        },
        setCurrent: function (lang) {
          this.current = lang.toLowerCase();
        },
        setFallback: function (lang) {
          this.fallback = lang.toLowerCase();
        },
        getCurrentLang: function () {
          return this.current;
        },
        getFallbackLang: function () {
          return this.fallback.toLowerCase();
        }
      };

      var service = {

        /**
         * @ngdoc service
         * @name add
         * @methodOf ui.grid.i18n.service:i18nService
         * @description  Adds the languages and strings to the cache. Decorate this service to
         * add more translation strings
         * @param {string} langs languages to add
         * @param {object} stringMaps of strings to add grouped by property names
         * @example
         * <pre>
         *      i18nService.add('en', {
         *         aggregate: {
         *                 label1: 'items',
         *                 label2: 'some more items'
         *                 }
         *         },
         *         groupPanel: {
         *              description: 'Drag a column header here and drop it to group by that column.'
         *           }
         *      }
         * </pre>
         */
        add: function (langs, stringMaps) {
          if (typeof(langs) === 'object') {
            angular.forEach(langs, function (lang) {
              if (lang) {
                langCache.add(lang, stringMaps);
              }
            });
          } else {
            langCache.add(langs, stringMaps);
          }
        },

        /**
         * @ngdoc service
         * @name getAllLangs
         * @methodOf ui.grid.i18n.service:i18nService
         * @description  return all currently loaded languages
         * @returns {array} string
         */
        getAllLangs: function () {
          return langCache.getAllLangs();
        },

        /**
         * @ngdoc service
         * @name get
         * @methodOf ui.grid.i18n.service:i18nService
         * @description  return all currently loaded languages
         * @param {string} lang to return.  If not specified, returns current language
         * @returns {object} the translation string maps for the language
         */
        get: function (lang) {
          var language = lang ? lang : service.getCurrentLang();
          return langCache.get(language);
        },

        /**
         * @ngdoc service
         * @name getSafeText
         * @methodOf ui.grid.i18n.service:i18nService
         * @description  returns the text specified in the path or a Missing text if text is not found
         * @param {String} path property path to use for retrieving text from string map
         * @param {String} [lang] to return.  If not specified, returns current language
         * @returns {object} the translation for the path
         * @example
         * <pre>
         * i18nService.getSafeText('sort.ascending')
         * </pre>
         */
        getSafeText: function (path, lang) {
          var language = lang || service.getCurrentLang(),
            trans = langCache.get(language),
            missing = i18nConstants.MISSING + path,
            getter = $parse(path);

          if (!trans) {
            return missing;
          }

          return getter(trans) || missing;
        },

        /**
         * @ngdoc service
         * @name setCurrentLang
         * @methodOf ui.grid.i18n.service:i18nService
         * @description sets the current language to use in the application
         * $broadcasts the i18nConstants.UPDATE_EVENT on the $rootScope
         * @param {string} lang to set
         * @example
         * <pre>
         * i18nService.setCurrentLang('fr');
         * </pre>
         */
        setCurrentLang: function (lang) {
          if (lang) {
            langCache.setCurrent(lang);
            $rootScope.$broadcast(i18nConstants.UPDATE_EVENT);
          }
        },

        /**
         * @ngdoc service
         * @name setFallbackLang
         * @methodOf ui.grid.i18n.service:i18nService
         * @description sets the fallback language to use in the application.
         * The default fallback language is english.
         * @param {string} lang to set
         * @example
         * <pre>
         * i18nService.setFallbackLang('en');
         * </pre>
         */
        setFallbackLang: function (lang) {
          if (lang) {
            langCache.setFallback(lang);
          }
        },

        /**
         * @ngdoc service
         * @name getCurrentLang
         * @methodOf ui.grid.i18n.service:i18nService
         * @description returns the current language used in the application
         */
        getCurrentLang: function () {
          var lang = langCache.getCurrentLang();
          if (!lang) {
            lang = i18nConstants.DEFAULT_LANG;
            langCache.setCurrent(lang);
          }
          return lang;
        },

        /**
         * @ngdoc service
         * @name getFallbackLang
         * @methodOf ui.grid.i18n.service:i18nService
         * @description returns the fallback language used in the application
         */
        getFallbackLang: function () {
          return langCache.getFallbackLang();
        }
      };

      return service;
    }]);

  function localeDirective(i18nService, i18nConstants) {
    return {
      compile: function () {
        return {
          pre: function ($scope, $elm, $attrs) {
            var alias = i18nConstants.LOCALE_DIRECTIVE_ALIAS;
            // check for watchable property
            var lang = $scope.$eval($attrs[alias]);
            if (lang) {
              $scope.$watch($attrs[alias], function () {
                i18nService.setCurrentLang(lang);
              });
            } else if ($attrs.$$observers) {
              $attrs.$observe(alias, function () {
                i18nService.setCurrentLang($attrs[alias] || i18nConstants.DEFAULT_LANG);
              });
            }
          }
        };
      }
    };
  }

  module.directive('uiI18n', ['i18nService', 'i18nConstants', localeDirective]);

  // directive syntax
  function uitDirective(i18nService, i18nConstants) {
    return {
      restrict: 'EA',
      compile: function () {
        return {
          pre: function ($scope, $elm, $attrs) {
            var listener, observer, prop,
              alias1 = DIRECTIVE_ALIASES[0],
              alias2 = DIRECTIVE_ALIASES[1],
              token = $attrs[alias1] || $attrs[alias2] || $elm.html();

            function translateToken(property) {
              var safeText = i18nService.getSafeText(property);

              $elm.html(safeText);
            }

            if ($attrs.$$observers) {
              prop = $attrs[alias1] ? alias1 : alias2;
              observer = $attrs.$observe(prop, function (result) {
                if (result) {
                  translateToken(result);
                }
              });
            }

            listener = $scope.$on(i18nConstants.UPDATE_EVENT, function() {
              if (observer) {
                observer($attrs[alias1] || $attrs[alias2]);
              } else {
                // set text based on i18n current language
                translateToken(token);
              }
            });
            $scope.$on('$destroy', listener);

            translateToken(token);
          }
        };
      }
    };
  }

  angular.forEach(DIRECTIVE_ALIASES, function ( alias ) {
    module.directive(alias, ['i18nService', 'i18nConstants', uitDirective]);
  });

  // optional filter syntax
  function uitFilter(i18nService) {
    return function (data, lang) {
      // set text based on i18n current language
      return i18nService.getSafeText(data, lang);
    };
  }

  angular.forEach(FILTER_ALIASES, function ( alias ) {
    module.filter(alias, ['i18nService', uitFilter]);
  });
})();

(function () {
  'use strict';

  /**
   * @ngdoc overview
   * @name ui.grid.edit
   * @description
   *
   * # ui.grid.edit
   *
   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
   *
   * This module provides cell editing capability to ui.grid. The goal was to emulate keying data in a spreadsheet via
   * a keyboard.
   * <br/>
   * <br/>
   * To really get the full spreadsheet-like data entry, the ui.grid.cellNav module should be used. This will allow the
   * user to key data and then tab, arrow, or enter to the cells beside or below.
   *
   * <div doc-module-components="ui.grid.edit"></div>
   */

  var module = angular.module('ui.grid.edit', ['ui.grid']);

  /**
   *  @ngdoc object
   *  @name ui.grid.edit.constant:uiGridEditConstants
   *
   *  @description constants available in edit module
   */
  module.constant('uiGridEditConstants', {
    EDITABLE_CELL_TEMPLATE: /EDITABLE_CELL_TEMPLATE/g,
    // must be lowercase because template bulder converts to lower
    EDITABLE_CELL_DIRECTIVE: /editable_cell_directive/g,
    events: {
      BEGIN_CELL_EDIT: 'uiGridEventBeginCellEdit',
      END_CELL_EDIT: 'uiGridEventEndCellEdit',
      CANCEL_CELL_EDIT: 'uiGridEventCancelCellEdit'
    }
  });

  /**
   *  @ngdoc service
   *  @name ui.grid.edit.service:uiGridEditService
   *
   *  @description Services for editing features
   */
  module.service('uiGridEditService', ['$q', 'uiGridConstants', 'gridUtil',
    function ($q, uiGridConstants, gridUtil) {

      var service = {

        initializeGrid: function (grid) {

          service.defaultGridOptions(grid.options);

          grid.registerColumnBuilder(service.editColumnBuilder);
          grid.edit = {};

          /**
           *  @ngdoc object
           *  @name ui.grid.edit.api:PublicApi
           *
           *  @description Public Api for edit feature
           */
          var publicApi = {
            events: {
              edit: {
                /**
                 * @ngdoc event
                 * @name afterCellEdit
                 * @eventOf  ui.grid.edit.api:PublicApi
                 * @description raised when cell editing is complete
                 * <pre>
                 *      gridApi.edit.on.afterCellEdit(scope,function(rowEntity, colDef) {})
                 * </pre>
                 * @param {object} rowEntity the options.data element that was edited
                 * @param {object} colDef the column that was edited
                 * @param {object} newValue new value
                 * @param {object} oldValue old value
                 */
                afterCellEdit: function (rowEntity, colDef, newValue, oldValue) {
                },
                /**
                 * @ngdoc event
                 * @name beginCellEdit
                 * @eventOf  ui.grid.edit.api:PublicApi
                 * @description raised when cell editing starts on a cell
                 * <pre>
                 *      gridApi.edit.on.beginCellEdit(scope,function(rowEntity, colDef) {})
                 * </pre>
                 * @param {object} rowEntity the options.data element that was edited
                 * @param {object} colDef the column that was edited
                 * @param {object} triggerEvent the event that triggered the edit.  Useful to prevent losing keystrokes on some
                 *                 complex editors
                 */
                beginCellEdit: function (rowEntity, colDef, triggerEvent) {
                },
                /**
                 * @ngdoc event
                 * @name cancelCellEdit
                 * @eventOf  ui.grid.edit.api:PublicApi
                 * @description raised when cell editing is cancelled on a cell
                 * <pre>
                 *      gridApi.edit.on.cancelCellEdit(scope,function(rowEntity, colDef) {})
                 * </pre>
                 * @param {object} rowEntity the options.data element that was edited
                 * @param {object} colDef the column that was edited
                 */
                cancelCellEdit: function (rowEntity, colDef) {
                }
              }
            },
            methods: {
              edit: { }
            }
          };

          grid.api.registerEventsFromObject(publicApi.events);
          // grid.api.registerMethodsFromObject(publicApi.methods);
        },

        defaultGridOptions: function (gridOptions) {

          /**
           *  @ngdoc object
           *  @name ui.grid.edit.api:GridOptions
           *
           *  @description Options for configuring the edit feature, these are available to be
           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
           */

          /**
           *  @ngdoc object
           *  @name enableCellEdit
           *  @propertyOf  ui.grid.edit.api:GridOptions
           *  @description If defined, sets the default value for the editable flag on each individual colDefs
           *  if their individual enableCellEdit configuration is not defined. Defaults to undefined.
           */

          /**
           *  @ngdoc object
           *  @name cellEditableCondition
           *  @propertyOf  ui.grid.edit.api:GridOptions
           *  @description If specified, either a value or function to be used by all columns before editing.
           *  If false, then editing of cell is not allowed.
           *  @example
           *  <pre>
           *  function($scope, triggerEvent) {
           *    //use $scope.row.entity, $scope.col.colDef and triggerEvent to determine if editing is allowed
           *    return true;
           *  }
           *  </pre>
           */
          gridOptions.cellEditableCondition = gridOptions.cellEditableCondition === undefined ? true : gridOptions.cellEditableCondition;

          /**
           *  @ngdoc object
           *  @name editableCellTemplate
           *  @propertyOf  ui.grid.edit.api:GridOptions
           *  @description If specified, cellTemplate to use as the editor for all columns.
           *  <br/> defaults to 'ui-grid/cellTextEditor'
           */

          /**
           *  @ngdoc object
           *  @name enableCellEditOnFocus
           *  @propertyOf  ui.grid.edit.api:GridOptions
           *  @description If true, then editor is invoked as soon as cell receives focus. Default false.
           *  <br/>_requires cellNav feature and the edit feature to be enabled_
           */
            // enableCellEditOnFocus can only be used if cellnav module is used
          gridOptions.enableCellEditOnFocus = gridOptions.enableCellEditOnFocus === undefined ? false : gridOptions.enableCellEditOnFocus;
        },

        /**
         * @ngdoc service
         * @name editColumnBuilder
         * @methodOf ui.grid.edit.service:uiGridEditService
         * @description columnBuilder function that adds edit properties to grid column
         * @returns {promise} promise that will load any needed templates when resolved
         */
        editColumnBuilder: function (colDef, col, gridOptions) {

          var promises = [];

          /**
           *  @ngdoc object
           *  @name ui.grid.edit.api:ColumnDef
           *
           *  @description Column Definition for edit feature, these are available to be
           *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
           */

          /**
           *  @ngdoc object
           *  @name enableCellEdit
           *  @propertyOf  ui.grid.edit.api:ColumnDef
           *  @description enable editing on column
           */
          colDef.enableCellEdit = colDef.enableCellEdit === undefined ? (gridOptions.enableCellEdit === undefined ?
            (colDef.type !== 'object') : gridOptions.enableCellEdit) : colDef.enableCellEdit;

          /**
           *  @ngdoc object
           *  @name cellEditableCondition
           *  @propertyOf  ui.grid.edit.api:ColumnDef
           *  @description If specified, either a value or function evaluated before editing cell.  If falsy, then editing of cell is not allowed.
           *  @example
           *  <pre>
           *  function($scope, triggerEvent) {
           *    //use $scope.row.entity, $scope.col.colDef and triggerEvent to determine if editing is allowed
           *    return true;
           *  }
           *  </pre>
           */
          colDef.cellEditableCondition = colDef.cellEditableCondition === undefined ? gridOptions.cellEditableCondition :  colDef.cellEditableCondition;

          /**
           *  @ngdoc object
           *  @name editableCellTemplate
           *  @propertyOf  ui.grid.edit.api:ColumnDef
           *  @description cell template to be used when editing this column. Can be Url or text template
           *  <br/>Defaults to gridOptions.editableCellTemplate
           */
          if (colDef.enableCellEdit) {
            colDef.editableCellTemplate = colDef.editableCellTemplate || gridOptions.editableCellTemplate || 'ui-grid/cellEditor';

            promises.push(gridUtil.getTemplate(colDef.editableCellTemplate)
              .then(
              function (template) {
                col.editableCellTemplate = template;
              },
              function (res) {
                // Todo handle response error here?
                throw new Error("Couldn't fetch/use colDef.editableCellTemplate '" + colDef.editableCellTemplate + "'");
              }));
          }

          /**
           *  @ngdoc object
           *  @name enableCellEditOnFocus
           *  @propertyOf  ui.grid.edit.api:ColumnDef
           *  @requires ui.grid.cellNav
           *  @description If true, then editor is invoked as soon as cell receives focus. Default false.
           *  <br>_requires both the cellNav feature and the edit feature to be enabled_
           */
            // enableCellEditOnFocus can only be used if cellnav module is used
          colDef.enableCellEditOnFocus = colDef.enableCellEditOnFocus === undefined ? gridOptions.enableCellEditOnFocus : colDef.enableCellEditOnFocus;


          /**
           *  @ngdoc string
           *  @name editModelField
           *  @propertyOf  ui.grid.edit.api:ColumnDef
           *  @description a bindable string value that is used when binding to edit controls instead of colDef.field
           *  <br/> example: You have a complex property on and object like state:{abbrev: 'MS',name: 'Mississippi'}.  The
           *  grid should display state.name in the cell and sort/filter based on the state.name property but the editor
           *  requires the full state object.
           *  <br/>colDef.field = 'state.name'
           *  <br/>colDef.editModelField = 'state'
           */
          // colDef.editModelField

          return $q.all(promises);
        },

        /**
         * @ngdoc service
         * @name isStartEditKey
         * @methodOf ui.grid.edit.service:uiGridEditService
         * @description  Determines if a keypress should start editing.  Decorate this service to override with your
         * own key events.  See service decorator in angular docs.
         * @param {Event} evt keydown event
         * @returns {boolean} true if an edit should start
         */
        isStartEditKey: function (evt) {
          return !(evt.metaKey ||
              evt.keyCode === uiGridConstants.keymap.ESC ||
              evt.keyCode === uiGridConstants.keymap.SHIFT ||
              evt.keyCode === uiGridConstants.keymap.CTRL ||
              evt.keyCode === uiGridConstants.keymap.ALT ||
              evt.keyCode === uiGridConstants.keymap.WIN ||
              evt.keyCode === uiGridConstants.keymap.CAPSLOCK ||

             evt.keyCode === uiGridConstants.keymap.LEFT ||
            (evt.keyCode === uiGridConstants.keymap.TAB && evt.shiftKey) ||

            evt.keyCode === uiGridConstants.keymap.RIGHT ||
            evt.keyCode === uiGridConstants.keymap.TAB ||

            evt.keyCode === uiGridConstants.keymap.UP ||
            (evt.keyCode === uiGridConstants.keymap.ENTER && evt.shiftKey) ||

            evt.keyCode === uiGridConstants.keymap.DOWN ||
            evt.keyCode === uiGridConstants.keymap.ENTER);
        }
      };

      return service;

    }]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.edit.directive:uiGridEdit
   *  @element div
   *  @restrict A
   *
   *  @description Adds editing features to the ui-grid directive.
   *
   *  @example
   <example module="app">
   <file name="app.js">
   var app = angular.module('app', ['ui.grid', 'ui.grid.edit']);

   app.controller('MainCtrl', ['$scope', function ($scope) {
      $scope.data = [
        { name: 'Bob', title: 'CEO' },
            { name: 'Frank', title: 'Lowly Developer' }
      ];

      $scope.columnDefs = [
        {name: 'name', enableCellEdit: true},
        {name: 'title', enableCellEdit: true}
      ];
    }]);
   </file>
   <file name="index.html">
   <div ng-controller="MainCtrl">
   <div ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-edit></div>
   </div>
   </file>
   </example>
   */
  module.directive('uiGridEdit', ['gridUtil', 'uiGridEditService', function (gridUtil, uiGridEditService) {
    return {
      replace: true,
      priority: 0,
      require: '^uiGrid',
      scope: false,
      compile: function () {
        return {
          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
            uiGridEditService.initializeGrid(uiGridCtrl.grid);
          },
          post: function ($scope, $elm, $attrs, uiGridCtrl) {
          }
        };
      }
    };
  }]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.edit.directive:uiGridRenderContainer
   *  @element div
   *  @restrict A
   *
   *  @description Adds keydown listeners to renderContainer element so we can capture when to begin edits
   *
   */
  module.directive('uiGridViewport', [ 'uiGridEditConstants',
    function ( uiGridEditConstants) {
      return {
        replace: true,
        priority: -99998, // run before cellNav
        require: ['^uiGrid', '^uiGridRenderContainer'],
        scope: false,
        compile: function () {
          return {
            post: function ($scope, $elm, $attrs, controllers) {
              var uiGridCtrl = controllers[0];

              // Skip attaching if edit and cellNav is not enabled
              if (!uiGridCtrl.grid.api.edit || !uiGridCtrl.grid.api.cellNav) { return; }

              var containerId =  controllers[1].containerId;
              // no need to process for other containers
              if (containerId !== 'body') {
                return;
              }

              // refocus on the grid
              $scope.$on(uiGridEditConstants.events.CANCEL_CELL_EDIT, function () {
                uiGridCtrl.focus();
              });
              $scope.$on(uiGridEditConstants.events.END_CELL_EDIT, function () {
                uiGridCtrl.focus();
              });
            }
          };
        }
      };
    }]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.edit.directive:uiGridCell
   *  @element div
   *  @restrict A
   *
   *  @description Stacks on top of ui.grid.uiGridCell to provide in-line editing capabilities to the cell
   *  Editing Actions.
   *
   *  Binds edit start events to the uiGridCell element.  When the events fire, the gridCell element is appended
   *  with the columnDef.editableCellTemplate element ('cellEditor.html' by default).
   *
   *  The editableCellTemplate should respond to uiGridEditConstants.events.BEGIN\_CELL\_EDIT angular event
   *  and do the initial steps needed to edit the cell (setfocus on input element, etc).
   *
   *  When the editableCellTemplate recognizes that the editing is ended (blur event, Enter key, etc.)
   *  it should emit the uiGridEditConstants.events.END\_CELL\_EDIT event.
   *
   *  If editableCellTemplate recognizes that the editing has been cancelled (esc key)
   *  it should emit the uiGridEditConstants.events.CANCEL\_CELL\_EDIT event.  The original value
   *  will be set back on the model by the uiGridCell directive.
   *
   *  Events that invoke editing:
   *    - dblclick
   *    - F2 keydown (when using cell selection)
   *
   *  Events that end editing:
   *    - Dependent on the specific editableCellTemplate
   *    - Standards should be blur and enter keydown
   *
   *  Events that cancel editing:
   *    - Dependent on the specific editableCellTemplate
   *    - Standards should be Esc keydown
   *
   *  Grid Events that end editing:
   *    - uiGridConstants.events.GRID_SCROLL
   *
   */

  /**
   *  @ngdoc object
   *  @name ui.grid.edit.api:GridRow
   *
   *  @description GridRow options for edit feature, these are available to be
   *  set internally only, by other features
   */

  /**
   *  @ngdoc object
   *  @name enableCellEdit
   *  @propertyOf  ui.grid.edit.api:GridRow
   *  @description enable editing on row, grouping for example might disable editing on group header rows
   */

  module.directive('uiGridCell',
    ['$compile', '$injector', '$timeout', 'uiGridConstants', 'uiGridEditConstants', 'gridUtil', '$parse', 'uiGridEditService', '$rootScope', '$q',
      function ($compile, $injector, $timeout, uiGridConstants, uiGridEditConstants, gridUtil, $parse, uiGridEditService, $rootScope, $q) {
        var touchstartTimeout = 500;
        if ($injector.has('uiGridCellNavService')) {
          var uiGridCellNavService = $injector.get('uiGridCellNavService');
        }

        return {
          priority: -100, // run after default uiGridCell directive
          restrict: 'A',
          scope: false,
          require: '?^uiGrid',
          link: function ($scope, $elm, $attrs, uiGridCtrl) {
            var html,
              origCellValue,
              cellModel,
              cancelTouchstartTimeout,
              inEdit = false;

            var editCellScope;

            if (!$scope.col.colDef.enableCellEdit) {
              return;
            }

            var cellNavNavigateDereg = function() {};
            var viewPortKeyDownDereg = function() {};


            var setEditable = function() {
              if ($scope.col.colDef.enableCellEdit && $scope.row.enableCellEdit !== false) {
                if (!$scope.beginEditEventsWired) { // prevent multiple attachments
                  registerBeginEditEvents();
                }
              } else {
                if ($scope.beginEditEventsWired) {
                  cancelBeginEditEvents();
                }
              }
            };

            setEditable();

            var rowWatchDereg = $scope.$watch('row', function (n, o) {
              if (n !== o) {
                setEditable();
              }
            });


            $scope.$on('$destroy', function destroyEvents() {
              rowWatchDereg();
              // unbind all jquery events in order to avoid memory leaks
              $elm.off();
            });

            function registerBeginEditEvents() {
              $elm.on('dblclick', beginEdit);

              // Add touchstart handling. If the users starts a touch and it doesn't end after X milliseconds, then start the edit
              $elm.on('touchstart', touchStart);

              if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {

                viewPortKeyDownDereg = uiGridCtrl.grid.api.cellNav.on.viewPortKeyDown($scope, function (evt, rowCol) {
                  if (rowCol === null) {
                    return;
                  }

                  if (rowCol.row === $scope.row && rowCol.col === $scope.col && !$scope.col.colDef.enableCellEditOnFocus) {
                    // important to do this before scrollToIfNecessary
                    beginEditKeyDown(evt);
                  }
                });

                cellNavNavigateDereg = uiGridCtrl.grid.api.cellNav.on.navigate($scope, function (newRowCol, oldRowCol, evt) {
                  if ($scope.col.colDef.enableCellEditOnFocus) {
                    // Don't begin edit if the cell hasn't changed
                    if (newRowCol.row === $scope.row && newRowCol.col === $scope.col &&
                      (evt === null || (evt && (evt.type === 'click' || evt.type === 'keydown')))) {
                      $timeout(function() {
                        beginEdit(evt);
                      });
                    }
                  }
                });
              }

              $scope.beginEditEventsWired = true;
            }

            function touchStart(event) {
              // jQuery masks events
              if (typeof(event.originalEvent) !== 'undefined' && event.originalEvent !== undefined) {
                event = event.originalEvent;
              }

              // Bind touchend handler
              $elm.on('touchend', touchEnd);

              // Start a timeout
              cancelTouchstartTimeout = $timeout(function() { }, touchstartTimeout);

              // Timeout's done! Start the edit
              cancelTouchstartTimeout.then(function () {
                // Use setTimeout to start the edit because beginEdit expects to be outside of $digest
                setTimeout(beginEdit, 0);

                // Undbind the touchend handler, we don't need it anymore
                $elm.off('touchend', touchEnd);
              }).catch(angular.noop);
            }

            // Cancel any touchstart timeout
            function touchEnd() {
              $timeout.cancel(cancelTouchstartTimeout);
              $elm.off('touchend', touchEnd);
            }

            function cancelBeginEditEvents() {
              $elm.off('dblclick', beginEdit);
              $elm.off('keydown', beginEditKeyDown);
              $elm.off('touchstart', touchStart);
              cellNavNavigateDereg();
              viewPortKeyDownDereg();
              $scope.beginEditEventsWired = false;
            }

            function beginEditKeyDown(evt) {
              if (uiGridEditService.isStartEditKey(evt)) {
                beginEdit(evt);
              }
            }

            function shouldEdit(col, row, triggerEvent) {
              return !row.isSaving &&
                ( angular.isFunction(col.colDef.cellEditableCondition) ?
                    col.colDef.cellEditableCondition($scope, triggerEvent) :
                    col.colDef.cellEditableCondition );
            }


            function beginEdit(triggerEvent) {
              // we need to scroll the cell into focus before invoking the editor
              $scope.grid.api.core.scrollToIfNecessary($scope.row, $scope.col)
                .then(function () {
                  beginEditAfterScroll(triggerEvent);
                });
            }

            /**
             *  @ngdoc property
             *  @name editDropdownOptionsArray
             *  @propertyOf ui.grid.edit.api:ColumnDef
             *  @description an array of values in the format
             *  [ {id: xxx, value: xxx} ], which is populated
             *  into the edit dropdown
             *
             */
            /**
             *  @ngdoc property
             *  @name editDropdownIdLabel
             *  @propertyOf ui.grid.edit.api:ColumnDef
             *  @description the label for the "id" field
             *  in the editDropdownOptionsArray.  Defaults
             *  to 'id'
             *  @example
             *  <pre>
             *    $scope.gridOptions = {
             *      columnDefs: [
             *        {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',
             *          editDropdownOptionsArray: [{code: 1, status: 'active'}, {code: 2, status: 'inactive'}],
             *          editDropdownIdLabel: 'code', editDropdownValueLabel: 'status' }
             *      ],
             *  </pre>
             *
             */
            /**
             *  @ngdoc property
             *  @name editDropdownRowEntityOptionsArrayPath
             *  @propertyOf ui.grid.edit.api:ColumnDef
             *  @description a path to a property on row.entity containing an
             *  array of values in the format
             *  [ {id: xxx, value: xxx} ], which will be used to populate
             *  the edit dropdown.  This can be used when the dropdown values are dependent on
             *  the backing row entity.
             *  If this property is set then editDropdownOptionsArray will be ignored.
             *  @example
             *  <pre>
             *    $scope.gridOptions = {
             *      columnDefs: [
             *        {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',
             *          editDropdownRowEntityOptionsArrayPath: 'foo.bars[0].baz',
             *          editDropdownIdLabel: 'code', editDropdownValueLabel: 'status' }
             *      ],
             *  </pre>
             *
             */
            /**
             *  @ngdoc service
             *  @name editDropdownOptionsFunction
             *  @methodOf ui.grid.edit.api:ColumnDef
             *  @description a function returning an array of values in the format
             *  [ {id: xxx, value: xxx} ], which will be used to populate
             *  the edit dropdown.  This can be used when the dropdown values are dependent on
             *  the backing row entity with some kind of algorithm.
             *  If this property is set then both editDropdownOptionsArray and
             *  editDropdownRowEntityOptionsArrayPath will be ignored.
             *  @param {object} rowEntity the options.data element that the returned array refers to
             *  @param {object} colDef the column that implements this dropdown
             *  @returns {object} an array of values in the format
             *  [ {id: xxx, value: xxx} ] used to populate the edit dropdown
             *  @example
             *  <pre>
             *    $scope.gridOptions = {
             *      columnDefs: [
             *        {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',
             *          editDropdownOptionsFunction: function(rowEntity, colDef) {
             *            if (rowEntity.foo === 'bar') {
             *              return [{id: 'bar1', value: 'BAR 1'},
             *                      {id: 'bar2', value: 'BAR 2'},
             *                      {id: 'bar3', value: 'BAR 3'}];
             *            } else {
             *              return [{id: 'foo1', value: 'FOO 1'},
             *                      {id: 'foo2', value: 'FOO 2'}];
             *            }
             *          },
             *          editDropdownIdLabel: 'code', editDropdownValueLabel: 'status' }
             *      ],
             *  </pre>
             *
             */
            /**
             *  @ngdoc property
             *  @name editDropdownValueLabel
             *  @propertyOf ui.grid.edit.api:ColumnDef
             *  @description the label for the "value" field
             *  in the editDropdownOptionsArray.  Defaults
             *  to 'value'
             *  @example
             *  <pre>
             *    $scope.gridOptions = {
             *      columnDefs: [
             *        {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',
             *          editDropdownOptionsArray: [{code: 1, status: 'active'}, {code: 2, status: 'inactive'}],
             *          editDropdownIdLabel: 'code', editDropdownValueLabel: 'status' }
             *      ],
             *  </pre>
             *
             */
            /**
             *  @ngdoc property
             *  @name editDropdownFilter
             *  @propertyOf ui.grid.edit.api:ColumnDef
             *  @description A filter that you would like to apply to the values in the options list
             *  of the dropdown.  For example if you were using angular-translate you might set this
             *  to `'translate'`
             *  @example
             *  <pre>
             *    $scope.gridOptions = {
             *      columnDefs: [
             *        {name: 'status', editableCellTemplate: 'ui-grid/dropdownEditor',
             *          editDropdownOptionsArray: [{code: 1, status: 'active'}, {code: 2, status: 'inactive'}],
             *          editDropdownIdLabel: 'code', editDropdownValueLabel: 'status', editDropdownFilter: 'translate' }
             *      ],
             *  </pre>
             *
             */
            function beginEditAfterScroll(triggerEvent) {
              // If we are already editing, then just skip this so we don't try editing twice...
              if (inEdit) {
                return;
              }

              if (!shouldEdit($scope.col, $scope.row, triggerEvent)) {
                return;
              }

              var modelField = $scope.row.getQualifiedColField($scope.col);
              if ($scope.col.colDef.editModelField) {
                modelField = gridUtil.preEval('row.entity.' + $scope.col.colDef.editModelField);
              }

              cellModel = $parse(modelField);

              // get original value from the cell
              origCellValue = cellModel($scope);

              html = $scope.col.editableCellTemplate;
              html = html.replace(uiGridConstants.MODEL_COL_FIELD, modelField);
              html = html.replace(uiGridConstants.COL_FIELD, 'grid.getCellValue(row, col)');

              var optionFilter = $scope.col.colDef.editDropdownFilter ? '|' + $scope.col.colDef.editDropdownFilter : '';
              html = html.replace(uiGridConstants.CUSTOM_FILTERS, optionFilter);

              var inputType = 'text';
              switch ($scope.col.colDef.type) {
                case 'boolean':
                  inputType = 'checkbox';
                  break;
                case 'number':
                  inputType = 'number';
                  break;
                case 'date':
                  inputType = 'date';
                  break;
              }
              html = html.replace('INPUT_TYPE', inputType);

              // In order to fill dropdown options we use:
              // - A function/promise or
              // - An array inside of row entity if no function exists or
              // - A single array for the whole column if none of the previous exists.
              var editDropdownOptionsFunction = $scope.col.colDef.editDropdownOptionsFunction;
              if (editDropdownOptionsFunction) {
                $q.when(editDropdownOptionsFunction($scope.row.entity, $scope.col.colDef))
                        .then(function(result) {
                  $scope.editDropdownOptionsArray = result;
                });
              } else {
                var editDropdownRowEntityOptionsArrayPath = $scope.col.colDef.editDropdownRowEntityOptionsArrayPath;
                if (editDropdownRowEntityOptionsArrayPath) {
                  $scope.editDropdownOptionsArray =  resolveObjectFromPath($scope.row.entity, editDropdownRowEntityOptionsArrayPath);
                }
                else {
                  $scope.editDropdownOptionsArray = $scope.col.colDef.editDropdownOptionsArray;
                }
              }
              $scope.editDropdownIdLabel = $scope.col.colDef.editDropdownIdLabel ? $scope.col.colDef.editDropdownIdLabel : 'id';
              $scope.editDropdownValueLabel = $scope.col.colDef.editDropdownValueLabel ? $scope.col.colDef.editDropdownValueLabel : 'value';

              var createEditor = function() {
                inEdit = true;
                cancelBeginEditEvents();
                var cellElement = angular.element(html);
                $elm.append(cellElement);
                editCellScope = $scope.$new();
                $compile(cellElement)(editCellScope);
                var gridCellContentsEl = angular.element($elm.children()[0]);
                gridCellContentsEl.addClass('ui-grid-cell-contents-hidden');
              };
              if (!$rootScope.$$phase) {
                $scope.$apply(createEditor);
              } else {
                createEditor();
              }

              // stop editing when grid is scrolled
              var deregOnGridScroll = $scope.col.grid.api.core.on.scrollBegin($scope, function () {
                if ($scope.grid.disableScrolling) {
                  return;
                }
                endEdit();
                $scope.grid.api.edit.raise.afterCellEdit($scope.row.entity, $scope.col.colDef, cellModel($scope), origCellValue);
                deregOnGridScroll();
                deregOnEndCellEdit();
                deregOnCancelCellEdit();
              });

              // end editing
              var deregOnEndCellEdit = $scope.$on(uiGridEditConstants.events.END_CELL_EDIT, function () {
                endEdit();
                $scope.grid.api.edit.raise.afterCellEdit($scope.row.entity, $scope.col.colDef, cellModel($scope), origCellValue);
                deregOnEndCellEdit();
                deregOnGridScroll();
                deregOnCancelCellEdit();
              });

              // cancel editing
              var deregOnCancelCellEdit = $scope.$on(uiGridEditConstants.events.CANCEL_CELL_EDIT, function () {
                cancelEdit();
                deregOnCancelCellEdit();
                deregOnGridScroll();
                deregOnEndCellEdit();
              });

              $scope.$broadcast(uiGridEditConstants.events.BEGIN_CELL_EDIT, triggerEvent);
              $timeout(function () {
                // execute in a timeout to give any complex editor templates a cycle to completely render
                $scope.grid.api.edit.raise.beginCellEdit($scope.row.entity, $scope.col.colDef, triggerEvent);
              });
            }

            function endEdit() {
              $scope.grid.disableScrolling = false;
              if (!inEdit) {
                return;
              }

              // sometimes the events can't keep up with the keyboard and grid focus is lost, so always focus
              // back to grid here. The focus call needs to be before the $destroy and removal of the control,
              // otherwise ng-model-options of UpdateOn: 'blur' will not work.
              if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {
                uiGridCtrl.focus();
              }

              var gridCellContentsEl = angular.element($elm.children()[0]);
              // remove edit element
              editCellScope.$destroy();
              var children = $elm.children();
              for (var i = 1; i < children.length; i++) {
                angular.element(children[i]).remove();
              }
              gridCellContentsEl.removeClass('ui-grid-cell-contents-hidden');
              inEdit = false;
              registerBeginEditEvents();
              $scope.grid.api.core.notifyDataChange( uiGridConstants.dataChange.EDIT );
            }

            function cancelEdit() {
              $scope.grid.disableScrolling = false;
              if (!inEdit) {
                return;
              }
              cellModel.assign($scope, origCellValue);
              $scope.$apply();

              $scope.grid.api.edit.raise.cancelCellEdit($scope.row.entity, $scope.col.colDef);
              endEdit();
            }

            // resolves a string path against the given object
            // shamelessly borrowed from
            // http://stackoverflow.com/questions/6491463/accessing-nested-javascript-objects-with-string-key
            function resolveObjectFromPath(object, path) {
              path = path.replace(/\[(\w+)\]/g, '.$1'); // convert indexes to properties
              path = path.replace(/^\./, '');           // strip a leading dot
              var a = path.split('.');
              while (a.length) {
                  var n = a.shift();
                  if (n in object) {
                      object = object[n];
                  } else {
                      return;
                  }
              }
              return object;
            }
          }
        };
      }]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.edit.directive:uiGridEditor
   *  @element div
   *  @restrict A
   *
   *  @description input editor directive for editable fields.
   *  Provides EndEdit and CancelEdit events
   *
   *  Events that end editing:
   *     blur and enter keydown
   *
   *  Events that cancel editing:
   *    - Esc keydown
   *
   */
  module.directive('uiGridEditor',
    ['gridUtil', 'uiGridConstants', 'uiGridEditConstants','$timeout', 'uiGridEditService',
      function (gridUtil, uiGridConstants, uiGridEditConstants, $timeout, uiGridEditService) {
        return {
          scope: true,
          require: ['?^uiGrid', '?^uiGridRenderContainer', 'ngModel'],
          compile: function () {
            return {
              pre: function ($scope, $elm, $attrs) {

              },
              post: function ($scope, $elm, $attrs, controllers) {
                var uiGridCtrl, renderContainerCtrl, ngModel;
                if (controllers[0]) { uiGridCtrl = controllers[0]; }
                if (controllers[1]) { renderContainerCtrl = controllers[1]; }
                if (controllers[2]) { ngModel = controllers[2]; }

                // set focus at start of edit
                $scope.$on(uiGridEditConstants.events.BEGIN_CELL_EDIT, function () {
                  // must be in a timeout since it requires a new digest cycle
                  $timeout(function () {
                    $elm[0].focus();
                    // only select text if it is not being replaced below in the cellNav viewPortKeyPress
                    if ($elm[0].select && ($scope.col.colDef.enableCellEditOnFocus || !(uiGridCtrl && uiGridCtrl.grid.api.cellNav))) {
                      $elm[0].select();
                    }
                    else {
                      // some browsers (Chrome) stupidly, imo, support the w3 standard that number, email, ...
                      // fields should not allow setSelectionRange.  We ignore the error for those browsers
                      // https://www.w3.org/Bugs/Public/show_bug.cgi?id=24796
                      try {
                        $elm[0].setSelectionRange($elm[0].value.length, $elm[0].value.length);
                      }
                      catch (ex) {
                        // ignore
                      }
                    }
                  });

                  // set the keystroke that started the edit event
                  // we must do this because the BeginEdit is done in a different event loop than the intitial
                  // keydown event
                  // fire this event for the keypress that is received
                  if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {
                    var viewPortKeyDownUnregister = uiGridCtrl.grid.api.cellNav.on.viewPortKeyPress($scope, function (evt, rowCol) {
                      if (uiGridEditService.isStartEditKey(evt)) {
                        var code = typeof evt.which === 'number' ? evt.which : evt.keyCode;
                        if (code > 0) {
                          ngModel.$setViewValue(String.fromCharCode(code), evt);
                          ngModel.$render();
                        }
                      }
                      viewPortKeyDownUnregister();
                    });
                  }

                  // macOS will blur the checkbox when clicked in Safari and Firefox,
                  // to get around this, we disable the blur handler on mousedown,
                  // and then focus the checkbox and re-enable the blur handler after $timeout
                  $elm.on('mousedown', function(evt) {
                    if ($elm[0].type === 'checkbox') {
                      $elm.off('blur', $scope.stopEdit);
                      $timeout(function() {
                        $elm[0].focus();
                        $elm.on('blur', $scope.stopEdit);
                      });
                    }
                  });

                  $elm.on('blur', $scope.stopEdit);
                });


                $scope.deepEdit = false;

                $scope.stopEdit = function (evt) {
                  if ($scope.inputForm && !$scope.inputForm.$valid) {
                    evt.stopPropagation();
                    $scope.$emit(uiGridEditConstants.events.CANCEL_CELL_EDIT);
                  }
                  else {
                    $scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);
                  }
                  $scope.deepEdit = false;
                };


                $elm.on('click', function (evt) {
                  if ($elm[0].type !== 'checkbox') {
                    $scope.deepEdit = true;
                    $scope.$applyAsync(function () {
                      $scope.grid.disableScrolling = true;
                    });
                  }
                });

                $elm.on('keydown', function (evt) {
                  switch (evt.keyCode) {
                    case uiGridConstants.keymap.ESC:
                      evt.stopPropagation();
                      $scope.$emit(uiGridEditConstants.events.CANCEL_CELL_EDIT);
                      break;
                  }

                  if ($scope.deepEdit &&
                    (evt.keyCode === uiGridConstants.keymap.LEFT ||
                     evt.keyCode === uiGridConstants.keymap.RIGHT ||
                     evt.keyCode === uiGridConstants.keymap.UP ||
                     evt.keyCode === uiGridConstants.keymap.DOWN)) {
                    evt.stopPropagation();
                  }
                  // Pass the keydown event off to the cellNav service, if it exists
                  else if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {
                    evt.uiGridTargetRenderContainerId = renderContainerCtrl.containerId;
                    if (uiGridCtrl.cellNav.handleKeyDown(evt) !== null) {
                      $scope.stopEdit(evt);
                    }
                  }
                  else {
                    // handle enter and tab for editing not using cellNav
                    switch (evt.keyCode) {
                      case uiGridConstants.keymap.ENTER: // Enter (Leave Field)
                      case uiGridConstants.keymap.TAB:
                        evt.stopPropagation();
                        evt.preventDefault();
                        $scope.stopEdit(evt);
                        break;
                    }
                  }

                  return true;
                });

                $scope.$on('$destroy', function unbindEvents() {
                  // unbind all jquery events in order to avoid memory leaks
                  $elm.off();
                });
              }
            };
          }
        };
      }]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.edit.directive:input
   *  @element input
   *  @restrict E
   *
   *  @description directive to provide binding between input[date] value and ng-model for angular 1.2
   *  It is similar to input[date] directive of angular 1.3
   *
   *  Supported date format for input is 'yyyy-MM-dd'
   *  The directive will set the $valid property of input element and the enclosing form to false if
   *  model is invalid date or value of input is entered wrong.
   *
   */
    module.directive('uiGridEditor', ['$filter', function ($filter) {
      function parseDateString(dateString) {
        if (typeof(dateString) === 'undefined' || dateString === '') {
          return null;
        }
        var parts = dateString.split('-');
        if (parts.length !== 3) {
          return null;
        }
        var year = parseInt(parts[0], 10);
        var month = parseInt(parts[1], 10);
        var day = parseInt(parts[2], 10);

        if (month < 1 || year < 1 || day < 1) {
          return null;
        }
        return new Date(year, (month - 1), day);
      }
      return {
        priority: -100, // run after default uiGridEditor directive
        require: '?ngModel',
        link: function (scope, element, attrs, ngModel) {
          if (angular.version.minor === 2 && attrs.type && attrs.type === 'date' && ngModel) {
            ngModel.$formatters.push(function (modelValue) {
              ngModel.$setValidity(null,(!modelValue || !isNaN(modelValue.getTime())));
              return $filter('date')(modelValue, 'yyyy-MM-dd');
            });

            ngModel.$parsers.push(function (viewValue) {
              if (viewValue && viewValue.length > 0) {
                var dateValue = parseDateString(viewValue);
                ngModel.$setValidity(null, (dateValue && !isNaN(dateValue.getTime())));
                return dateValue;
              }
              else {
                ngModel.$setValidity(null, true);
                return null;
              }
            });
          }
        }
      };
    }]);


  /**
   *  @ngdoc directive
   *  @name ui.grid.edit.directive:uiGridEditDropdown
   *  @element div
   *  @restrict A
   *
   *  @description dropdown editor for editable fields.
   *  Provides EndEdit and CancelEdit events
   *
   *  Events that end editing:
   *     blur and enter keydown, and any left/right nav
   *
   *  Events that cancel editing:
   *    - Esc keydown
   *
   */
  module.directive('uiGridEditDropdown',
    ['uiGridConstants', 'uiGridEditConstants', '$timeout',
      function (uiGridConstants, uiGridEditConstants, $timeout) {
        return {
          require: ['?^uiGrid', '?^uiGridRenderContainer'],
          scope: true,
          compile: function () {
            return {
              pre: function ($scope, $elm, $attrs) {

              },
              post: function ($scope, $elm, $attrs, controllers) {
                var uiGridCtrl = controllers[0];
                var renderContainerCtrl = controllers[1];

                // set focus at start of edit
                $scope.$on(uiGridEditConstants.events.BEGIN_CELL_EDIT, function () {
                  $timeout(function() {
                    $elm[0].focus();
                  });

                  $elm[0].style.width = ($elm[0].parentElement.offsetWidth - 1) + 'px';
                  $elm.on('blur', function (evt) {
                    $scope.stopEdit(evt);
                  });
                });


                $scope.stopEdit = function (evt) {
                  // no need to validate a dropdown - invalid values shouldn't be
                  // available in the list
                  $scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);
                };

                $elm.on('keydown', function (evt) {
                  switch (evt.keyCode) {
                    case uiGridConstants.keymap.ESC:
                      evt.stopPropagation();
                      $scope.$emit(uiGridEditConstants.events.CANCEL_CELL_EDIT);
                      break;
                  }
                  if (uiGridCtrl && uiGridCtrl.grid.api.cellNav) {
                    evt.uiGridTargetRenderContainerId = renderContainerCtrl.containerId;
                    if (uiGridCtrl.cellNav.handleKeyDown(evt) !== null) {
                      $scope.stopEdit(evt);
                    }
                  }
                  else {
                    // handle enter and tab for editing not using cellNav
                    switch (evt.keyCode) {
                      case uiGridConstants.keymap.ENTER: // Enter (Leave Field)
                      case uiGridConstants.keymap.TAB:
                        evt.stopPropagation();
                        evt.preventDefault();
                        $scope.stopEdit(evt);
                        break;
                    }
                  }
                  return true;
                });

                $scope.$on('$destroy', function unbindEvents() {
                  // unbind jquery events to prevent memory leaks
                  $elm.off();
                });
              }
            };
          }
        };
      }]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.edit.directive:uiGridEditFileChooser
   *  @element div
   *  @restrict A
   *
   *  @description input editor directive for editable fields.
   *  Provides EndEdit and CancelEdit events
   *
   *  Events that end editing:
   *     blur and enter keydown
   *
   *  Events that cancel editing:
   *    - Esc keydown
   *
   */
  module.directive('uiGridEditFileChooser',
    ['gridUtil', 'uiGridConstants', 'uiGridEditConstants',
      function (gridUtil, uiGridConstants, uiGridEditConstants) {
        return {
          scope: true,
          require: ['?^uiGrid', '?^uiGridRenderContainer'],
          compile: function () {
            return {
              pre: function ($scope, $elm, $attrs) {

              },
              post: function ($scope, $elm) {
                function handleFileSelect(event) {
                  var target = event.srcElement || event.target;

                  if (target && target.files && target.files.length > 0) {
                    /**
                     *  @ngdoc property
                     *  @name editFileChooserCallback
                     *  @propertyOf  ui.grid.edit.api:ColumnDef
                     *  @description A function that should be called when any files have been chosen
                     *  by the user.  You should use this to process the files appropriately for your
                     *  application.
                     *
                     *  It passes the gridCol, the gridRow (from which you can get gridRow.entity),
                     *  and the files.  The files are in the format as returned from the file chooser,
                     *  an array of files, with each having useful information such as:
                     *  - `files[0].lastModifiedDate`
                     *  - `files[0].name`
                     *  - `files[0].size`  (appears to be in bytes)
                     *  - `files[0].type`  (MIME type by the looks)
                     *
                     *  Typically you would do something with these files - most commonly you would
                     *  use the filename or read the file itself in.  The example function does both.
                     *
                     *  @example
                     *  <pre>
                     *  editFileChooserCallBack: function(gridRow, gridCol, files ) {
                     *    // ignore all but the first file, it can only choose one anyway
                     *    // set the filename into this column
                     *    gridRow.entity.filename = file[0].name;
                     *
                     *    // read the file and set it into a hidden column, which we may do stuff with later
                     *    var setFile = function(fileContent) {
                     *      gridRow.entity.file = fileContent.currentTarget.result;
                     *    };
                     *    var reader = new FileReader();
                     *    reader.onload = setFile;
                     *    reader.readAsText( files[0] );
                     *  }
                     *  </pre>
                     */
                    if ( typeof($scope.col.colDef.editFileChooserCallback) === 'function' ) {
                      $scope.col.colDef.editFileChooserCallback($scope.row, $scope.col, target.files);
                    } else {
                      gridUtil.logError('You need to set colDef.editFileChooserCallback to use the file chooser');
                    }

                    target.form.reset();
                    $scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);
                  } else {
                    $scope.$emit(uiGridEditConstants.events.CANCEL_CELL_EDIT);
                  }
                  $elm[0].removeEventListener('change', handleFileSelect, false);
                }

                $elm[0].addEventListener('change', handleFileSelect, false);

                $scope.$on(uiGridEditConstants.events.BEGIN_CELL_EDIT, function () {
                  $elm[0].focus();
                  $elm[0].select();

                  $elm.on('blur', function () {
                    $scope.$emit(uiGridEditConstants.events.END_CELL_EDIT);
                    $elm.off();
                  });
                });
              }
            };
          }
        };
      }]);
})();

(function () {
  'use strict';

  /**
   * @ngdoc overview
   * @name ui.grid.emptyBaseLayer
   * @description
   *
   * # ui.grid.emptyBaseLayer
   *
   * <div class="alert alert-warning" role="alert"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>
   *
   * This module provides the ability to have the background of the ui-grid be empty rows, this would be displayed in the case were
   * the grid height is greater then the amount of rows displayed.
   *
   * <div doc-module-components="ui.grid.emptyBaseLayer"></div>
   */
  var module = angular.module('ui.grid.emptyBaseLayer', ['ui.grid']);


  /**
   *  @ngdoc service
   *  @name ui.grid.emptyBaseLayer.service:uiGridBaseLayerService
   *
   *  @description Services for the empty base layer grid
   */
  module.service('uiGridBaseLayerService', ['gridUtil', '$compile', function (gridUtil, $compile) {
    return {
      initializeGrid: function (grid, disableEmptyBaseLayer) {

        /**
         *  @ngdoc object
         *  @name ui.grid.emptyBaseLayer.api:GridOptions
         *
         *  @description GridOptions for emptyBaseLayer feature, these are available to be
         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
         */
        grid.baseLayer = {
          emptyRows: []
        };

        /**
         *  @ngdoc object
         *  @name enableEmptyGridBaseLayer
         *  @propertyOf  ui.grid.emptyBaseLayer.api:GridOptions
         *  @description Enable empty base layer, which shows empty rows as background on the entire grid
         *  <br/>Defaults to true, if the directive is used.
         *  <br/>Set to false either by setting this attribute or passing false to the directive.
         */
        // default option to true unless it was explicitly set to false
        if (grid.options.enableEmptyGridBaseLayer !== false) {
          grid.options.enableEmptyGridBaseLayer = !disableEmptyBaseLayer;
        }
      },

      setNumberOfEmptyRows: function(viewportHeight, grid) {
        var rowHeight = grid.options.rowHeight,
          rows = Math.ceil(viewportHeight / rowHeight);

        if (rows > 0) {
          grid.baseLayer.emptyRows = [];
          for (var i = 0; i < rows; i++) {
            grid.baseLayer.emptyRows.push({});
          }
        }
      }
    };
  }]);

  /**
   *  @ngdoc object
   *  @name ui.grid.emptyBaseLayer.directive:uiGridEmptyBaseLayer
   *  @description Shows empty rows in the background of the ui-grid, these span
   *  the full height of the ui-grid, so that there won't be blank space below the shown rows.
   *  @example
   *  <pre>
   *  <div ui-grid="gridOptions" class="grid" ui-grid-empty-base-layer></div>
   *  </pre>
   *  Or you can enable/disable it dynamically by passing in true or false. It doesn't
   *  the value, so it would only be set on initial render.
   *  <pre>
   *  <div ui-grid="gridOptions" class="grid" ui-grid-empty-base-layer="false"></div>
   *  </pre>
   */
  module.directive('uiGridEmptyBaseLayer', ['gridUtil', 'uiGridBaseLayerService',
      '$parse',
    function (gridUtil, uiGridBaseLayerService, $parse) {
      return {
        require: '^uiGrid',
        scope: false,
        compile: function () {
          return {
            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
              var disableEmptyBaseLayer = $parse($attrs.uiGridEmptyBaseLayer)($scope) === false;

              uiGridBaseLayerService.initializeGrid(uiGridCtrl.grid, disableEmptyBaseLayer);
            },
            post: function ($scope, $elm, $attrs, uiGridCtrl) {
              if (!uiGridCtrl.grid.options.enableEmptyGridBaseLayer) {
                return;
              }

              var renderBodyContainer = uiGridCtrl.grid.renderContainers.body,
                viewportHeight = renderBodyContainer.getViewportHeight();

              function heightHasChanged() {
                var newViewPortHeight = renderBodyContainer.getViewportHeight();

                if (newViewPortHeight !== viewportHeight) {
                  viewportHeight = newViewPortHeight;
                  return true;
                }
                return false;
              }

              function getEmptyBaseLayerCss(viewportHeight) {
                // Set ui-grid-empty-base-layer height
                return '.grid' + uiGridCtrl.grid.id +
                  ' .ui-grid-render-container ' +
                  '.ui-grid-empty-base-layer-container.ui-grid-canvas ' +
                  '{ height: ' + viewportHeight + 'px; }';
              }

              uiGridCtrl.grid.registerStyleComputation({
                func: function() {
                  if (heightHasChanged()) {
                    uiGridBaseLayerService.setNumberOfEmptyRows(viewportHeight, uiGridCtrl.grid);
                  }
                  return getEmptyBaseLayerCss(viewportHeight);
                }
              });
            }
          };
        }
      };
    }]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.emptyBaseLayer.directive:uiGridViewport
   *  @description stacks on the uiGridViewport directive to append the empty grid base layer html elements to the
   *  default gridRow template
   */
  module.directive('uiGridViewport',
    ['$compile', 'gridUtil', '$templateCache',
      function ($compile, gridUtil, $templateCache) {
        return {
          priority: -200,
          scope: false,
          compile: function ($elm) {
            var emptyBaseLayerContainer = $templateCache.get('ui-grid/emptyBaseLayerContainer');
            $elm.prepend(emptyBaseLayerContainer);
            return {
              pre: function ($scope, $elm, $attrs, controllers) {
              },
              post: function ($scope, $elm, $attrs, controllers) {
              }
            };
          }
        };
      }]);

})();

(function () {
  'use strict';

  /**
   * @ngdoc overview
   * @name ui.grid.expandable
   * @description
   *
   * # ui.grid.expandable
   *
   * <div class="alert alert-warning" role="alert"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>
   *
   * This module provides the ability to create subgrids with the ability to expand a row
   * to show the subgrid.
   *
   * <div doc-module-components="ui.grid.expandable"></div>
   */
  var module = angular.module('ui.grid.expandable', ['ui.grid']);

  /**
   *  @ngdoc service
   *  @name ui.grid.expandable.service:uiGridExpandableService
   *
   *  @description Services for the expandable grid
   */
  module.service('uiGridExpandableService', ['gridUtil', function (gridUtil) {
    var service = {
      initializeGrid: function (grid) {

        grid.expandable = {};
        grid.expandable.expandedAll = false;

        /**
         *  @ngdoc boolean
         *  @name enableOnDblClickExpand
         *  @propertyOf  ui.grid.expandable.api:GridOptions
         *  @description Defaults to true.
         *  @example
         *  <pre>
         *    $scope.gridOptions = {
         *      onDblClickExpand: false
         *    }
         *  </pre>
         */
        grid.options.enableOnDblClickExpand = grid.options.enableOnDblClickExpand !== false;
        /**
         *  @ngdoc boolean
         *  @name enableExpandable
         *  @propertyOf  ui.grid.expandable.api:GridOptions
         *  @description Whether or not to use expandable feature, allows you to turn off expandable on specific grids
         *  within your application, or in specific modes on _this_ grid. Defaults to true.
         *  @example
         *  <pre>
         *    $scope.gridOptions = {
         *      enableExpandable: false
         *    }
         *  </pre>
         */
        grid.options.enableExpandable = grid.options.enableExpandable !== false;

        /**
         *  @ngdoc object
         *  @name showExpandAllButton
         *  @propertyOf  ui.grid.expandable.api:GridOptions
         *  @description Whether or not to display the expand all button, allows you to hide expand all button on specific grids
         *  within your application, or in specific modes on _this_ grid. Defaults to true.
         *  @example
         *  <pre>
         *    $scope.gridOptions = {
         *      showExpandAllButton: false
         *    }
         *  </pre>
         */
        grid.options.showExpandAllButton = grid.options.showExpandAllButton !== false;

        /**
         *  @ngdoc object
         *  @name expandableRowHeight
         *  @propertyOf  ui.grid.expandable.api:GridOptions
         *  @description Height in pixels of the expanded subgrid.  Defaults to
         *  150
         *  @example
         *  <pre>
         *    $scope.gridOptions = {
         *      expandableRowHeight: 150
         *    }
         *  </pre>
         */
        grid.options.expandableRowHeight = grid.options.expandableRowHeight || 150;

        /**
         *  @ngdoc object
         *  @name expandableRowHeaderWidth
         *  @propertyOf  ui.grid.expandable.api:GridOptions
         *  @description Width in pixels of the expandable column. Defaults to 40
         *  @example
         *  <pre>
         *    $scope.gridOptions = {
         *      expandableRowHeaderWidth: 40
         *    }
         *  </pre>
         */
        grid.options.expandableRowHeaderWidth = grid.options.expandableRowHeaderWidth || 40;

        /**
         *  @ngdoc object
         *  @name expandableRowTemplate
         *  @propertyOf  ui.grid.expandable.api:GridOptions
         *  @description Mandatory. The template for your expanded row
         *  @example
         *  <pre>
         *    $scope.gridOptions = {
         *      expandableRowTemplate: 'expandableRowTemplate.html'
         *    }
         *  </pre>
         */
        if ( grid.options.enableExpandable && !grid.options.expandableRowTemplate ) {
          gridUtil.logError( 'You have not set the expandableRowTemplate, disabling expandable module' );
          grid.options.enableExpandable = false;
        }

        /**
         *  @ngdoc object
         *  @name ui.grid.expandable.api:PublicApi
         *
         *  @description Public Api for expandable feature
         */
        /**
         *  @ngdoc object
         *  @name ui.grid.expandable.api:GridRow
         *
         *  @description Additional properties added to GridRow when using the expandable module
         */
        /**
         *  @ngdoc object
         *  @name ui.grid.expandable.api:GridOptions
         *
         *  @description Options for configuring the expandable feature, these are available to be
         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
         */
        var publicApi = {
          events: {
            expandable: {
              /**
               * @ngdoc event
               * @name rowExpandedBeforeStateChanged
               * @eventOf  ui.grid.expandable.api:PublicApi
               * @description raised when row is expanding or collapsing
               * <pre>
               *      gridApi.expandable.on.rowExpandedBeforeStateChanged(scope,function(row, event) {})
               * </pre>
               * @param {scope} scope the application scope
               * @param {GridRow} row the row that was expanded
               * @param {Event} evt object if raised from an event
               */
              rowExpandedBeforeStateChanged: function(scope, row, evt) {},

              /**
               * @ngdoc event
               * @name rowExpandedStateChanged
               * @eventOf  ui.grid.expandable.api:PublicApi
               * @description raised when row expanded or collapsed
               * <pre>
               *      gridApi.expandable.on.rowExpandedStateChanged(scope,function(row, event) {})
               * </pre>
               * @param {scope} scope the application scope
               * @param {GridRow} row the row that was expanded
               * @param {Event} evt object if raised from an event
               */
              rowExpandedStateChanged: function (scope, row, evt) {},

              /**
               * @ngdoc event
               * @name rowExpandedRendered
               * @eventOf  ui.grid.expandable.api:PublicApi
               * @description raised when expanded row is rendered
               * <pre>
               *      gridApi.expandable.on.rowExpandedRendered(scope,function(row, event) {})
               * </pre>
               * @param {scope} scope the application scope
               * @param {GridRow} row the row that was expanded
               * @param {Event} evt object if raised from an event
               */
              rowExpandedRendered: function (scope, row, evt) {}
            }
          },

          methods: {
            expandable: {
              /**
               * @ngdoc method
               * @name toggleRowExpansion
               * @methodOf  ui.grid.expandable.api:PublicApi
               * @description Toggle a specific row
               * <pre>
               *      gridApi.expandable.toggleRowExpansion(rowEntity, event);
               * </pre>
               * @param {object} rowEntity the data entity for the row you want to expand
               * @param {Event} [e] event (if exist)
               */
              toggleRowExpansion: function (rowEntity, e) {
                var row = grid.getRow(rowEntity);

                if (row !== null) {
                  service.toggleRowExpansion(grid, row, e);
                }
              },

              /**
               * @ngdoc method
               * @name expandAllRows
               * @methodOf  ui.grid.expandable.api:PublicApi
               * @description Expand all subgrids.
               * <pre>
               *      gridApi.expandable.expandAllRows();
               * </pre>
               */
              expandAllRows: function() {
                service.expandAllRows(grid);
              },

              /**
               * @ngdoc method
               * @name collapseAllRows
               * @methodOf  ui.grid.expandable.api:PublicApi
               * @description Collapse all subgrids.
               * <pre>
               *      gridApi.expandable.collapseAllRows();
               * </pre>
               */
              collapseAllRows: function() {
                service.collapseAllRows(grid);
              },

              /**
               * @ngdoc method
               * @name toggleAllRows
               * @methodOf  ui.grid.expandable.api:PublicApi
               * @description Toggle all subgrids.
               * <pre>
               *      gridApi.expandable.toggleAllRows();
               * </pre>
               */
              toggleAllRows: function() {
                service.toggleAllRows(grid);
              },
              /**
               * @ngdoc function
               * @name expandRow
               * @methodOf  ui.grid.expandable.api:PublicApi
               * @description Expand the data row
               * @param {object} rowEntity gridOptions.data[] array instance
               */
              expandRow: function (rowEntity) {
                var row = grid.getRow(rowEntity);

                if (row !== null && !row.isExpanded) {
                  service.toggleRowExpansion(grid, row);
                }
              },
              /**
               * @ngdoc function
               * @name collapseRow
               * @methodOf  ui.grid.expandable.api:PublicApi
               * @description Collapse the data row
               * @param {object} rowEntity gridOptions.data[] array instance
               */
              collapseRow: function (rowEntity) {
                var row = grid.getRow(rowEntity);

                if (row !== null && row.isExpanded) {
                  service.toggleRowExpansion(grid, row);
                }
              },
              /**
               * @ngdoc function
               * @name getExpandedRows
               * @methodOf  ui.grid.expandable.api:PublicApi
               * @description returns all expandedRow's entity references
               */
              getExpandedRows: function () {
                return service.getExpandedRows(grid).map(function (gridRow) {
                  return gridRow.entity;
                });
              }
            }
          }
        };
        grid.api.registerEventsFromObject(publicApi.events);
        grid.api.registerMethodsFromObject(publicApi.methods);
      },

      /**
       *
       * @param grid
       * @param row
       * @param {Event} [e] event (if exist)
       */
      toggleRowExpansion: function (grid, row, e) {
        // trigger the "before change" event. Can change row height dynamically this way.
        grid.api.expandable.raise.rowExpandedBeforeStateChanged(row);
        /**
         *  @ngdoc object
         *  @name isExpanded
         *  @propertyOf  ui.grid.expandable.api:GridRow
         *  @description Whether or not the row is currently expanded.
         *  @example
         *  <pre>
         *    $scope.api.expandable.on.rowExpandedStateChanged($scope, function (row) {
         *      if (row.isExpanded) {
         *        //...
         *      }
         *    });
         *  </pre>
         */
        row.isExpanded = !row.isExpanded;
        if (angular.isUndefined(row.expandedRowHeight)) {
          row.expandedRowHeight = grid.options.expandableRowHeight;
        }

        if (row.isExpanded) {
          row.height = row.grid.options.rowHeight + row.expandedRowHeight;
          grid.expandable.expandedAll = service.getExpandedRows(grid).length === grid.rows.length;
        }
        else {
          row.height = row.grid.options.rowHeight;
          grid.expandable.expandedAll = false;
        }
        grid.api.expandable.raise.rowExpandedStateChanged(row, e);

        // fire event on render complete
        function _tWatcher() {
          if (row.expandedRendered) {
            grid.api.expandable.raise.rowExpandedRendered(row, e);
          }
          else {
            window.setTimeout(_tWatcher, 1e2);
          }
        }
        _tWatcher();
      },

      expandAllRows: function(grid) {
        grid.renderContainers.body.visibleRowCache.forEach( function(row) {
          if (!row.isExpanded && !(row.entity.subGridOptions && row.entity.subGridOptions.disableRowExpandable)) {
            service.toggleRowExpansion(grid, row);
          }
        });
        grid.expandable.expandedAll = true;
        grid.queueGridRefresh();
      },

      collapseAllRows: function(grid) {
        grid.renderContainers.body.visibleRowCache.forEach( function(row) {
          if (row.isExpanded) {
            service.toggleRowExpansion(grid, row);
          }
        });
        grid.expandable.expandedAll = false;
        grid.queueGridRefresh();
      },

      toggleAllRows: function(grid) {
        if (grid.expandable.expandedAll) {
          service.collapseAllRows(grid);
        }
        else {
          service.expandAllRows(grid);
        }
      },

      getExpandedRows: function (grid) {
        return grid.rows.filter(function (row) {
          return row.isExpanded;
        });
      }
    };
    return service;
  }]);

  /**
   *  @ngdoc object
   *  @name enableExpandableRowHeader
   *  @propertyOf  ui.grid.expandable.api:GridOptions
   *  @description Show a rowHeader to provide the expandable buttons.  If set to false then implies
   *  you're going to use a custom method for expanding and collapsing the subgrids. Defaults to true.
   *  @example
   *  <pre>
   *    $scope.gridOptions = {
   *      enableExpandableRowHeader: false
   *    }
   *  </pre>
   */

  module.directive('uiGridExpandable', ['uiGridExpandableService', '$templateCache',
    function (uiGridExpandableService, $templateCache) {
      return {
        replace: true,
        priority: 0,
        require: '^uiGrid',
        scope: false,
        compile: function () {
          return {
            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
              uiGridExpandableService.initializeGrid(uiGridCtrl.grid);

              if (!uiGridCtrl.grid.options.enableExpandable) {
                return;
              }

              if (uiGridCtrl.grid.options.enableExpandableRowHeader !== false ) {
                var expandableRowHeaderColDef = {
                  name: 'expandableButtons',
                  displayName: '',
                  exporterSuppressExport: true,
                  enableColumnResizing: false,
                  enableColumnMenu: false,
                  width: uiGridCtrl.grid.options.expandableRowHeaderWidth || 30
                };

                expandableRowHeaderColDef.cellTemplate = $templateCache.get('ui-grid/expandableRowHeader');
                expandableRowHeaderColDef.headerCellTemplate = $templateCache.get('ui-grid/expandableTopRowHeader');
                uiGridCtrl.grid.addRowHeaderColumn(expandableRowHeaderColDef, -90);
              }
            },
            post: function ($scope, $elm, $attrs, uiGridCtrl) {}
          };
        }
      };
    }]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.expandable.directive:uiGrid
   *  @description stacks on the uiGrid directive to register child grid with parent row when child is created
   */
  module.directive('uiGrid',
    function () {
      return {
        replace: true,
        priority: 599,
        require: '^uiGrid',
        scope: false,
        compile: function () {
          return {
            pre: function ($scope, $elm, $attrs, uiGridCtrl) {

              uiGridCtrl.grid.api.core.on.renderingComplete($scope, function() {
                // if a parent grid row is on the scope, then add the parentRow property to this childGrid
                if ($scope.row && $scope.row.grid && $scope.row.grid.options
                  && $scope.row.grid.options.enableExpandable) {

                  /**
                   *  @ngdoc directive
                   *  @name ui.grid.expandable.class:Grid
                   *  @description Additional Grid properties added by expandable module
                   */

                  /**
                   *  @ngdoc object
                   *  @name parentRow
                   *  @propertyOf ui.grid.expandable.class:Grid
                   *  @description reference to the expanded parent row that owns this grid
                   */
                  uiGridCtrl.grid.parentRow = $scope.row;

                  // todo: adjust height on parent row when child grid height changes. we need some sort of gridHeightChanged event
                 // uiGridCtrl.grid.core.on.canvasHeightChanged($scope, function(oldHeight, newHeight) {
                 //   uiGridCtrl.grid.parentRow = newHeight;
                 // });
                }
              });
            },
            post: function ($scope, $elm, $attrs, uiGridCtrl) {}
          };
        }
      };
    });

  /**
   *  @ngdoc directive
   *  @name ui.grid.expandable.directive:uiGridExpandableRow
   *  @description directive to render the Row template on Expand
   */
  module.directive('uiGridExpandableRow',
  ['uiGridExpandableService', '$compile', 'uiGridConstants','gridUtil',
    function (uiGridExpandableService, $compile, uiGridConstants, gridUtil) {

      return {
        replace: false,
        priority: 0,
        scope: false,
        compile: function () {
          return {
            pre: function ($scope, $elm) {
              gridUtil.getTemplate($scope.grid.options.expandableRowTemplate).then(
                function (template) {
                  if ($scope.grid.options.expandableRowScope) {
                    /**
                     *  @ngdoc object
                     *  @name expandableRowScope
                     *  @propertyOf  ui.grid.expandable.api:GridOptions
                     *  @description  Variables of object expandableScope will be available in the scope of the expanded subgrid
                     *  @example
                     *  <pre>
                     *    $scope.gridOptions = {
                     *      expandableRowScope: expandableScope
                     *    }
                     *  </pre>
                     */
                    var expandableRowScope = $scope.grid.options.expandableRowScope;

                    for (var property in expandableRowScope) {
                      if (expandableRowScope.hasOwnProperty(property)) {
                        $scope[property] = expandableRowScope[property];
                      }
                    }
                  }
                  var expandedRowElement = angular.element(template);

                  expandedRowElement = $compile(expandedRowElement)($scope);
                  $elm.append(expandedRowElement);
                  $scope.row.element = $elm;
                  $scope.row.expandedRendered = true;
              });
            },

            post: function ($scope, $elm) {
              $scope.row.element = $elm;
              $scope.$on('$destroy', function() {
                $scope.row.expandedRendered = false;
              });
            }
          };
        }
      };
    }]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.expandable.directive:uiGridRow
   *  @description stacks on the uiGridRow directive to add support for expandable rows
   */
  module.directive('uiGridRow',
      function () {
        return {
          priority: -200,
          scope: false,
          compile: function () {
            return {
              pre: function ($scope, $elm) {
                if (!$scope.grid.options.enableExpandable) {
                  return;
                }

                $scope.expandableRow = {};

                $scope.expandableRow.shouldRenderExpand = function () {
                  return $scope.colContainer.name === 'body'
                    && $scope.grid.options.enableExpandable !== false
                    && $scope.row.isExpanded
                    && (!$scope.grid.isScrollingVertically || $scope.row.expandedRendered);
                };

                $scope.expandableRow.shouldRenderFiller = function () {
                  return $scope.row.isExpanded
                    && (
                      $scope.colContainer.name !== 'body'
                      || ($scope.grid.isScrollingVertically && !$scope.row.expandedRendered));
                };

                if ($scope.grid.options.enableOnDblClickExpand) {
                  $elm.on('dblclick', function (event) {
                    // if necessary, it is possible for everyone to stop the processing of a single click OR
                    // Inside the Config in the output agent to enter a line:
                    // event.stopPropagation()
                    $scope.grid.api.expandable.toggleRowExpansion($scope.row.entity, event);
                  });
                }
              },
              post: function ($scope, $elm, $attrs, controllers) {}
            };
          }
        };
      });

  /**
   *  @ngdoc directive
   *  @name ui.grid.expandable.directive:uiGridViewport
   *  @description stacks on the uiGridViewport directive to append the expandable row html elements to the
   *  default gridRow template
   */
  module.directive('uiGridViewport',
    ['$compile', 'gridUtil', '$templateCache',
      function ($compile, gridUtil, $templateCache) {
        return {
          priority: -200,
          scope: false,
          compile: function ($elm) {

             // todo: this adds ng-if watchers to each row even if the grid is not using expandable directive
             //      or options.enableExpandable == false
             //      The alternative is to compile the template and append to each row in a uiGridRow directive

            var rowRepeatDiv = angular.element($elm.children().children()[0]),
              expandedRowFillerElement = $templateCache.get('ui-grid/expandableScrollFiller'),
              expandedRowElement = $templateCache.get('ui-grid/expandableRow');

            rowRepeatDiv.append(expandedRowElement);
            rowRepeatDiv.append(expandedRowFillerElement);
            return {
              pre: function ($scope, $elm, $attrs, controllers) {
              },
              post: function ($scope, $elm, $attrs, controllers) {
              }
            };
          }
        };
      }]);

})();

/* global ExcelBuilder */
/* global console */

(function () {
  'use strict';

  /**
   * @ngdoc overview
   * @name ui.grid.exporter
   * @description
   *
   * # ui.grid.exporter
   *
   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
   *
   * This module provides the ability to export data from the grid.
   *
   * Data can be exported in a range of formats, and all data, visible
   * data, or selected rows can be exported, with all columns or visible
   * columns.
   *
   * No UI is provided, the caller should provide their own UI/buttons
   * as appropriate, or enable the gridMenu
   *
   * <br/>
   * <br/>
   *
   * <div doc-module-components="ui.grid.exporter"></div>
   */

  var module = angular.module('ui.grid.exporter', ['ui.grid']);

  /**
   *  @ngdoc object
   *  @name ui.grid.exporter.constant:uiGridExporterConstants
   *
   *  @description constants available in exporter module
   */
  /**
   * @ngdoc property
   * @propertyOf ui.grid.exporter.constant:uiGridExporterConstants
   * @name ALL
   * @description export all data, including data not visible.  Can
   * be set for either rowTypes or colTypes
   */
  /**
   * @ngdoc property
   * @propertyOf ui.grid.exporter.constant:uiGridExporterConstants
   * @name VISIBLE
   * @description export only visible data, including data not visible.  Can
   * be set for either rowTypes or colTypes
   */
  /**
   * @ngdoc property
   * @propertyOf ui.grid.exporter.constant:uiGridExporterConstants
   * @name SELECTED
   * @description export all data, including data not visible.  Can
   * be set only for rowTypes, selection of only some columns is
   * not supported
   */
  module.constant('uiGridExporterConstants', {
    featureName: 'exporter',
    rowHeaderColName: 'treeBaseRowHeaderCol',
    selectionRowHeaderColName: 'selectionRowHeaderCol',
    ALL: 'all',
    VISIBLE: 'visible',
    SELECTED: 'selected',
    CSV_CONTENT: 'CSV_CONTENT',
    BUTTON_LABEL: 'BUTTON_LABEL',
    FILE_NAME: 'FILE_NAME'
  });

  /**
   *  @ngdoc service
   *  @name ui.grid.exporter.service:uiGridExporterService
   *
   *  @description Services for exporter feature
   */
  module.service('uiGridExporterService', ['$filter', '$q', 'uiGridExporterConstants', 'gridUtil', '$compile', '$interval', 'i18nService',
    function ($filter, $q, uiGridExporterConstants, gridUtil, $compile, $interval, i18nService) {
      var service = {

        delay: 100,

        initializeGrid: function (grid) {

          // add feature namespace and any properties to grid for needed state
          grid.exporter = {};
          this.defaultGridOptions(grid.options);

          /**
           *  @ngdoc object
           *  @name ui.grid.exporter.api:PublicApi
           *
           *  @description Public Api for exporter feature
           */
          var publicApi = {
            events: {
              exporter: {
              }
            },
            methods: {
              exporter: {
                /**
                 * @ngdoc function
                 * @name csvExport
                 * @methodOf  ui.grid.exporter.api:PublicApi
                 * @description Exports rows from the grid in csv format,
                 * the data exported is selected based on the provided options
                 * @param {string} rowTypes which rows to export, valid values are
                 * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
                 * uiGridExporterConstants.SELECTED
                 * @param {string} colTypes which columns to export, valid values are
                 * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE
                 */
                csvExport: function (rowTypes, colTypes) {
                  service.csvExport(grid, rowTypes, colTypes);
                },
                /**
                 * @ngdoc function
                 * @name pdfExport
                 * @methodOf  ui.grid.exporter.api:PublicApi
                 * @description Exports rows from the grid in pdf format,
                 * the data exported is selected based on the provided options
                 * Note that this function has a dependency on pdfMake, all
                 * going well this has been installed for you.
                 * The resulting pdf opens in a new browser window.
                 * @param {string} rowTypes which rows to export, valid values are
                 * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
                 * uiGridExporterConstants.SELECTED
                 * @param {string} colTypes which columns to export, valid values are
                 * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE
                 */
                pdfExport: function (rowTypes, colTypes) {
                  service.pdfExport(grid, rowTypes, colTypes);
                },
                /**
                 * @ngdoc function
                 * @name excelExport
                 * @methodOf  ui.grid.exporter.api:PublicApi
                 * @description Exports rows from the grid in excel format,
                 * the data exported is selected based on the provided options
                 * @param {string} rowTypes which rows to export, valid values are
                 * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
                 * uiGridExporterConstants.SELECTED
                 * @param {string} colTypes which columns to export, valid values are
                 * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE
                 */
                excelExport: function (rowTypes, colTypes) {
                  service.excelExport(grid, rowTypes, colTypes);
                }
              }
            }
          };

          grid.api.registerEventsFromObject(publicApi.events);

          grid.api.registerMethodsFromObject(publicApi.methods);

          if (grid.api.core.addToGridMenu) {
            service.addToMenu( grid );
          } else {
            // order of registration is not guaranteed, register in a little while
            $interval( function() {
              if (grid.api.core.addToGridMenu) {
                service.addToMenu( grid );
              }
            }, this.delay, 1);
          }

        },

        defaultGridOptions: function (gridOptions) {
          // default option to true unless it was explicitly set to false
          /**
           * @ngdoc object
           * @name ui.grid.exporter.api:GridOptions
           *
           * @description GridOptions for exporter feature, these are available to be
           * set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
           */
          /**
           * @ngdoc object
           * @name ui.grid.exporter.api:ColumnDef
           * @description ColumnDef settings for exporter
           */
          /**
           * @ngdoc object
           * @name exporterSuppressMenu
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description Don't show the export menu button, implying the user
           * will roll their own UI for calling the exporter
           * <br/>Defaults to false
           */
          gridOptions.exporterSuppressMenu = gridOptions.exporterSuppressMenu === true;
          /**
           * @ngdoc object
           * @name exporterMenuLabel
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description The text to show on the exporter menu button
           * link
           * <br/>Defaults to 'Export'
           */
          gridOptions.exporterMenuLabel = gridOptions.exporterMenuLabel ? gridOptions.exporterMenuLabel : 'Export';
          /**
           * @ngdoc object
           * @name exporterSuppressColumns
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description Columns that should not be exported.  The selectionRowHeader is already automatically
           * suppressed, but if you had a button column or some other "system" column that shouldn't be shown in the
           * output then add it in this list.  You should provide an array of column names.
           * <br/>Defaults to: []
           * <pre>
           *   gridOptions.exporterSuppressColumns = [ 'buttons' ];
           * </pre>
           */
          gridOptions.exporterSuppressColumns = gridOptions.exporterSuppressColumns ? gridOptions.exporterSuppressColumns : [];
          /**
           * @ngdoc object
           * @name exporterCsvColumnSeparator
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description The character to use as column separator
           * link
           * <br/>Defaults to ','
           */
          gridOptions.exporterCsvColumnSeparator = gridOptions.exporterCsvColumnSeparator ? gridOptions.exporterCsvColumnSeparator : ',';
          /**
           * @ngdoc object
           * @name exporterCsvFilename
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description The default filename to use when saving the downloaded csv.
           * This will only work in some browsers.
           * <br/>Defaults to 'download.csv'
           */
          gridOptions.exporterCsvFilename = gridOptions.exporterCsvFilename ? gridOptions.exporterCsvFilename : 'download.csv';
          /**
           * @ngdoc object
           * @name exporterPdfFilename
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description The default filename to use when saving the downloaded pdf, only used in IE (other browsers open pdfs in a new window)
           * <br/>Defaults to 'download.pdf'
           */
          gridOptions.exporterPdfFilename = gridOptions.exporterPdfFilename ? gridOptions.exporterPdfFilename : 'download.pdf';
          /**
           * @ngdoc object
           * @name exporterExcelFilename
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description The default filename to use when saving the downloaded excel, only used in IE (other browsers open excels in a new window)
           * <br/>Defaults to 'download.xlsx'
           */
          gridOptions.exporterExcelFilename = gridOptions.exporterExcelFilename ? gridOptions.exporterExcelFilename : 'download.xlsx';

          /**
           * @ngdoc object
           * @name exporterExcelSheetName
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description The default sheetname to use when saving the downloaded to excel
           * <br/>Defaults to 'Sheet1'
           */
          gridOptions.exporterExcelSheetName = gridOptions.exporterExcelSheetName ? gridOptions.exporterExcelSheetName : 'Sheet1';

          /**
           * @ngdoc object
           * @name exporterOlderExcelCompatibility
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description Some versions of excel don't like the utf-16 BOM on the front, and it comes
           * through as ï»¿ in the first column header.  Setting this option to false will suppress this, at the
           * expense of proper utf-16 handling in applications that do recognise the BOM
           * <br/>Defaults to false
           */
          gridOptions.exporterOlderExcelCompatibility = gridOptions.exporterOlderExcelCompatibility === true;
          /**
           * @ngdoc object
           * @name exporterIsExcelCompatible
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description Separator header, used to set a custom column separator in a csv file, only works on MS Excel.
           * Used it on other programs will make csv content display unproperly. Setting this option to false won't add this header.
           * <br/>Defaults to false
           */
          gridOptions.exporterIsExcelCompatible = gridOptions.exporterIsExcelCompatible === true;
          /**
           * @ngdoc object
           * @name exporterMenuItemOrder
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description An option to determine the starting point for the menu items created by the exporter
           * <br/>Defaults to 200
           */
          gridOptions.exporterMenuItemOrder = gridOptions.exporterMenuItemOrder ? gridOptions.exporterMenuItemOrder : 200;
          /**
           * @ngdoc object
           * @name exporterPdfDefaultStyle
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description The default style in pdfMake format
           * <br/>Defaults to:
           * <pre>
           *   {
           *     fontSize: 11
           *   }
           * </pre>
           */
          gridOptions.exporterPdfDefaultStyle = gridOptions.exporterPdfDefaultStyle ? gridOptions.exporterPdfDefaultStyle : { fontSize: 11 };
          /**
           * @ngdoc object
           * @name exporterPdfTableStyle
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description The table style in pdfMake format
           * <br/>Defaults to:
           * <pre>
           *   {
           *     margin: [0, 5, 0, 15]
           *   }
           * </pre>
           */
          gridOptions.exporterPdfTableStyle = gridOptions.exporterPdfTableStyle ? gridOptions.exporterPdfTableStyle : { margin: [0, 5, 0, 15] };
          /**
           * @ngdoc object
           * @name exporterPdfTableHeaderStyle
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description The tableHeader style in pdfMake format
           * <br/>Defaults to:
           * <pre>
           *   {
           *     bold: true,
           *     fontSize: 12,
           *     color: 'black'
           *   }
           * </pre>
           */
          gridOptions.exporterPdfTableHeaderStyle = gridOptions.exporterPdfTableHeaderStyle ? gridOptions.exporterPdfTableHeaderStyle : { bold: true, fontSize: 12, color: 'black' };
          /**
           * @ngdoc object
           * @name exporterPdfHeader
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description The header section for pdf exports.  Can be
           * simple text:
           * <pre>
           *   gridOptions.exporterPdfHeader = 'My Header';
           * </pre>
           * Can be a more complex object in pdfMake format:
           * <pre>
           *   gridOptions.exporterPdfHeader = {
           *     columns: [
           *       'Left part',
           *       { text: 'Right part', alignment: 'right' }
           *     ]
           *   };
           * </pre>
           * Or can be a function, allowing page numbers and the like
           * <pre>
           *   gridOptions.exporterPdfHeader: function(currentPage, pageCount) { return currentPage.toString() + ' of ' + pageCount; };
           * </pre>
           */
          gridOptions.exporterPdfHeader = gridOptions.exporterPdfHeader ? gridOptions.exporterPdfHeader : null;
          /**
           * @ngdoc object
           * @name exporterPdfFooter
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description The header section for pdf exports.  Can be
           * simple text:
           * <pre>
           *   gridOptions.exporterPdfFooter = 'My Footer';
           * </pre>
           * Can be a more complex object in pdfMake format:
           * <pre>
           *   gridOptions.exporterPdfFooter = {
           *     columns: [
           *       'Left part',
           *       { text: 'Right part', alignment: 'right' }
           *     ]
           *   };
           * </pre>
           * Or can be a function, allowing page numbers and the like
           * <pre>
           *   gridOptions.exporterPdfFooter: function(currentPage, pageCount) { return currentPage.toString() + ' of ' + pageCount; };
           * </pre>
           */
          gridOptions.exporterPdfFooter = gridOptions.exporterPdfFooter ? gridOptions.exporterPdfFooter : null;
          /**
           * @ngdoc object
           * @name exporterPdfOrientation
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description The orientation, should be a valid pdfMake value,
           * 'landscape' or 'portrait'
           * <br/>Defaults to landscape
           */
          gridOptions.exporterPdfOrientation = gridOptions.exporterPdfOrientation ? gridOptions.exporterPdfOrientation : 'landscape';
          /**
           * @ngdoc object
           * @name exporterPdfPageSize
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description The orientation, should be a valid pdfMake
           * paper size, usually 'A4' or 'LETTER'
           * {@link https://github.com/bpampuch/pdfmake/blob/master/src/standardPageSizes.js pdfMake page sizes}
           * <br/>Defaults to A4
           */
          gridOptions.exporterPdfPageSize = gridOptions.exporterPdfPageSize ? gridOptions.exporterPdfPageSize : 'A4';
          /**
           * @ngdoc object
           * @name exporterPdfMaxGridWidth
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description The maxium grid width - the current grid width
           * will be scaled to match this, with any fixed width columns
           * being adjusted accordingly.
           * <br/>Defaults to 720 (for A4 landscape), use 670 for LETTER
           */
          gridOptions.exporterPdfMaxGridWidth = gridOptions.exporterPdfMaxGridWidth ? gridOptions.exporterPdfMaxGridWidth : 720;
          /**
           * @ngdoc object
           * @name exporterPdfTableLayout
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description A tableLayout in pdfMake format,
           * controls gridlines and the like.  We use the default
           * layout usually.
           * <br/>Defaults to null, which means no layout
           */

          /**
           * @ngdoc object
           * @name exporterMenuAllData
           * @propertyOf ui.grid.exporter.api:GridOptions
           * @description Add export all data as cvs/pdf menu items to the ui-grid grid menu, if it's present.  Defaults to true.
           */
          gridOptions.exporterMenuAllData = gridOptions.exporterMenuAllData !== undefined ? gridOptions.exporterMenuAllData : true;

          /**
           * @ngdoc object
           * @name exporterMenuVisibleData
           * @propertyOf ui.grid.exporter.api:GridOptions
           * @description Add export visible data as cvs/pdf menu items to the ui-grid grid menu, if it's present.  Defaults to true.
           */
          gridOptions.exporterMenuVisibleData = gridOptions.exporterMenuVisibleData !== undefined ? gridOptions.exporterMenuVisibleData : true;

          /**
           * @ngdoc object
           * @name exporterMenuSelectedData
           * @propertyOf ui.grid.exporter.api:GridOptions
           * @description Add export selected data as cvs/pdf menu items to the ui-grid grid menu, if it's present.  Defaults to true.
           */
          gridOptions.exporterMenuSelectedData = gridOptions.exporterMenuSelectedData !== undefined ? gridOptions.exporterMenuSelectedData : true;

          /**
           * @ngdoc object
           * @name exporterMenuCsv
           * @propertyOf ui.grid.exporter.api:GridOptions
           * @description Add csv export menu items to the ui-grid grid menu, if it's present.  Defaults to true.
           */
          gridOptions.exporterMenuCsv = gridOptions.exporterMenuCsv !== undefined ? gridOptions.exporterMenuCsv : true;

          /**
           * @ngdoc object
           * @name exporterMenuPdf
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description Add pdf export menu items to the ui-grid grid menu, if it's present.  Defaults to true.
           */
          gridOptions.exporterMenuPdf = gridOptions.exporterMenuPdf !== undefined ? gridOptions.exporterMenuPdf : true;

          /**
           * @ngdoc object
           * @name exporterMenuExcel
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description Add excel export menu items to the ui-grid grid menu, if it's present.  Defaults to true.
           */
          gridOptions.exporterMenuExcel = gridOptions.exporterMenuExcel !== undefined ? gridOptions.exporterMenuExcel : true;

          /**
           * @ngdoc object
           * @name exporterPdfCustomFormatter
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description A custom callback routine that changes the pdf document, adding any
           * custom styling or content that is supported by pdfMake.  Takes in the complete docDefinition, and
           * must return an updated docDefinition ready for pdfMake.
           * @example
           * In this example we add a style to the style array, so that we can use it in our
           * footer definition.
           * <pre>
           *   gridOptions.exporterPdfCustomFormatter = function ( docDefinition ) {
           *     docDefinition.styles.footerStyle = { bold: true, fontSize: 10 };
           *     return docDefinition;
           *   }
           *
           *   gridOptions.exporterPdfFooter = { text: 'My footer', style: 'footerStyle' }
           * </pre>
           */
          gridOptions.exporterPdfCustomFormatter = ( gridOptions.exporterPdfCustomFormatter && typeof( gridOptions.exporterPdfCustomFormatter ) === 'function' ) ? gridOptions.exporterPdfCustomFormatter : function ( docDef ) { return docDef; };

          /**
           * @ngdoc object
           * @name exporterHeaderFilterUseName
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description Defaults to false, which leads to `displayName` being passed into the headerFilter.
           * If set to true, then will pass `name` instead.
           *
           *
           * @example
           * <pre>
           *   gridOptions.exporterHeaderFilterUseName = true;
           * </pre>
           */
          gridOptions.exporterHeaderFilterUseName = gridOptions.exporterHeaderFilterUseName === true;

          /**
           * @ngdoc object
           * @name exporterHeaderFilter
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description A function to apply to the header displayNames before exporting.  Useful for internationalisation,
           * for example if you were using angular-translate you'd set this to `$translate.instant`.  Note that this
           * call must be synchronous, it cannot be a call that returns a promise.
           *
           * Behaviour can be changed to pass in `name` instead of `displayName` through use of `exporterHeaderFilterUseName: true`.
           *
           * @example
           * <pre>
           *   gridOptions.exporterHeaderFilter = function( displayName ) { return 'col: ' + name; };
           * </pre>
           * OR
           * <pre>
           *   gridOptions.exporterHeaderFilter = $translate.instant;
           * </pre>
           */

          /**
           * @ngdoc function
           * @name exporterFieldCallback
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description A function to call for each field before exporting it.  Allows
           * massaging of raw data into a display format, for example if you have applied
           * filters to convert codes into decodes, or you require
           * a specific date format in the exported content.
           *
           * The method is called once for each field exported, and provides the grid, the
           * gridCol and the GridRow for you to use as context in massaging the data.
           *
           * @param {Grid} grid provides the grid in case you have need of it
           * @param {GridRow} row the row from which the data comes
           * @param {GridColumn} col the column from which the data comes
           * @param {object} value the value for your massaging
           * @returns {object} you must return the massaged value ready for exporting
           *
           * @example
           * <pre>
           *   gridOptions.exporterFieldCallback = function ( grid, row, col, value ) {
           *     if ( col.name === 'status' ) {
           *       value = decodeStatus( value );
           *     }
           *     return value;
           *   }
           * </pre>
           */
          gridOptions.exporterFieldCallback = gridOptions.exporterFieldCallback ? gridOptions.exporterFieldCallback : defaultExporterFieldCallback;

          /**
           * @ngdoc function
           * @name exporterFieldFormatCallback
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description A function to call for each field before exporting it.  Allows
           * general object to be return to modify the format of a cell in the case of
           * excel exports
           *
           * The method is called once for each field exported, and provides the grid, the
           * gridCol and the GridRow for you to use as context in massaging the data.
           *
           * @param {Grid} grid provides the grid in case you have need of it
           * @param {GridRow} row the row from which the data comes
           * @param {GridColumn} col the column from which the data comes
           * @param {object} value the value for your massaging
           * @returns {object} you must return the massaged value ready for exporting
           *
           * @example
           * <pre>
           *   gridOptions.exporterFieldCallback = function ( grid, row, col, value ) {
           *     if ( col.name === 'status' ) {
           *       value = decodeStatus( value );
           *     }
           *     return value;
           *   }
           * </pre>
           */
          gridOptions.exporterFieldFormatCallback = gridOptions.exporterFieldFormatCallback ? gridOptions.exporterFieldFormatCallback : function( grid, row, col, value ) { return null; };

          /**
           * @ngdoc function
           * @name exporterExcelCustomFormatters
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description A function to call to setup formatters and store on docDefinition.
           *
           * The method is called at the start and can setup all the formatters to export to excel
           *
           * @param {Grid} grid provides the grid in case you have need of it
           * @param {Workbook} row the row from which the data comes
           * @param {docDefinition} The docDefinition that will have styles as a object to store formatters
           * @returns {docDefinition} Updated docDefinition with formatter styles
           *
           * @example
           * <pre>
           *   gridOptions.exporterExcelCustomFormatters = function(grid, workbook, docDefinition) {
           *     const formatters = {};
           *     const stylesheet = workbook.getStyleSheet();
           *     const headerFormatDefn = {
           *       'font': { 'size': 11, 'fontName': 'Calibri', 'bold': true },
           *       'alignment': { 'wrapText': false }
           *     };
           *
           *     formatters['header'] = headerFormatter;
           *     Object.assign(docDefinition.styles , formatters);
           *     grid.docDefinition = docDefinition;
           *     return docDefinition;
           *   }
           * </pre>
           */
          gridOptions.exporterExcelCustomFormatters = gridOptions.exporterExcelCustomFormatters ? gridOptions.exporterExcelCustomFormatters : function( grid, workbook, docDefinition ) { return docDefinition; };

          /**
           * @ngdoc function
           * @name exporterExcelHeader
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description A function to write formatted header data to sheet.
           *
           * The method is called to provide custom header building for Excel. This data comes before the grid header
           *
           * @param {grid} grid provides the grid in case you have need of it
           * @param {Workbook} row the row from which the data comes
           * @param {Sheet} the sheet to insert data
           * @param {docDefinition} The docDefinition that will have styles as a object to store formatters
           * @returns {docDefinition} Updated docDefinition with formatter styles
           *
           * @example
           * <pre>
           *   gridOptions.exporterExcelCustomFormatters = function (grid, workbook, sheet, docDefinition) {
           *      const headerFormatter = docDefinition.styles['header'];
           *      let cols = [];
           *      // push data in A1 cell with metadata formatter
           *      cols.push({ value: 'Summary Report', metadata: {style: headerFormatter.id} });
           *      sheet.data.push(cols);
           *   }
           * </pre>
           */
          gridOptions.exporterExcelHeader = gridOptions.exporterExcelHeader ? gridOptions.exporterExcelHeader : function( grid, workbook, sheet, docDefinition ) { return null; };


          /**
           * @ngdoc object
           * @name exporterColumnScaleFactor
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description A scaling factor to divide the drawnwidth of a column to convert to target excel column
           * format size
           * @example
           * In this example we add a number to divide the drawnwidth of a column to get the excel width.
           * <br/>Defaults to 3.5
           */
          gridOptions.exporterColumnScaleFactor = gridOptions.exporterColumnScaleFactor ? gridOptions.exporterColumnScaleFactor : 3.5;

          /**
           * @ngdoc object
           * @name exporterFieldApplyFilters
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description Defaults to false, which leads to filters being evaluated on export           *
           *
           * @example
           * <pre>
           *   gridOptions.exporterFieldApplyFilters = true;
           * </pre>
           */
          gridOptions.exporterFieldApplyFilters = gridOptions.exporterFieldApplyFilters === true;

          /**
           * @ngdoc function
           * @name exporterAllDataFn
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description This promise is needed when exporting all rows,
           * and the data need to be provided by server side. Default is null.
           * @returns {Promise} a promise to load all data from server
           *
           * @example
           * <pre>
           *   gridOptions.exporterAllDataFn = function () {
           *     return $http.get('/data/100.json')
           *   }
           * </pre>
           */
          gridOptions.exporterAllDataFn = gridOptions.exporterAllDataFn ? gridOptions.exporterAllDataFn : null;

          /**
           * @ngdoc function
           * @name exporterAllDataPromise
           * @propertyOf  ui.grid.exporter.api:GridOptions
           * @description DEPRECATED - exporterAllDataFn used to be
           * called this, but it wasn't a promise, it was a function that returned
           * a promise.  Deprecated, but supported for backward compatibility, use
           * exporterAllDataFn instead.
           * @returns {Promise} a promise to load all data from server
           *
           * @example
           * <pre>
           *   gridOptions.exporterAllDataFn = function () {
           *     return $http.get('/data/100.json')
           *   }
           * </pre>
           */
          if ( gridOptions.exporterAllDataFn === null && gridOptions.exporterAllDataPromise ) {
            gridOptions.exporterAllDataFn = gridOptions.exporterAllDataPromise;
          }
        },


        /**
         * @ngdoc function
         * @name addToMenu
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Adds export items to the grid menu,
         * allowing the user to select export options
         * @param {Grid} grid the grid from which data should be exported
         */
        addToMenu: function ( grid ) {
          grid.api.core.addToGridMenu( grid, [
            {
              title: i18nService.getSafeText('gridMenu.exporterAllAsCsv'),
              action: function () {
                grid.api.exporter.csvExport( uiGridExporterConstants.ALL, uiGridExporterConstants.ALL );
              },
              shown: function() {
                return grid.options.exporterMenuCsv && grid.options.exporterMenuAllData;
              },
              order: grid.options.exporterMenuItemOrder
            },
            {
              title: i18nService.getSafeText('gridMenu.exporterVisibleAsCsv'),
              action: function () {
                grid.api.exporter.csvExport( uiGridExporterConstants.VISIBLE, uiGridExporterConstants.VISIBLE );
              },
              shown: function() {
                return grid.options.exporterMenuCsv && grid.options.exporterMenuVisibleData;
              },
              order: grid.options.exporterMenuItemOrder + 1
            },
            {
              title: i18nService.getSafeText('gridMenu.exporterSelectedAsCsv'),
              action: function () {
                grid.api.exporter.csvExport( uiGridExporterConstants.SELECTED, uiGridExporterConstants.VISIBLE );
              },
              shown: function() {
                return grid.options.exporterMenuCsv && grid.options.exporterMenuSelectedData &&
                       ( grid.api.selection && grid.api.selection.getSelectedRows().length > 0 );
              },
              order: grid.options.exporterMenuItemOrder + 2
            },
            {
              title: i18nService.getSafeText('gridMenu.exporterAllAsPdf'),
              action: function () {
                grid.api.exporter.pdfExport( uiGridExporterConstants.ALL, uiGridExporterConstants.ALL );
              },
              shown: function() {
                return grid.options.exporterMenuPdf && grid.options.exporterMenuAllData;
              },
              order: grid.options.exporterMenuItemOrder + 3
            },
            {
              title: i18nService.getSafeText('gridMenu.exporterVisibleAsPdf'),
              action: function () {
                grid.api.exporter.pdfExport( uiGridExporterConstants.VISIBLE, uiGridExporterConstants.VISIBLE );
              },
              shown: function() {
                return grid.options.exporterMenuPdf && grid.options.exporterMenuVisibleData;
              },
              order: grid.options.exporterMenuItemOrder + 4
            },
            {
              title: i18nService.getSafeText('gridMenu.exporterSelectedAsPdf'),
              action: function () {
                grid.api.exporter.pdfExport( uiGridExporterConstants.SELECTED, uiGridExporterConstants.VISIBLE );
              },
              shown: function() {
                return grid.options.exporterMenuPdf && grid.options.exporterMenuSelectedData &&
                       ( grid.api.selection && grid.api.selection.getSelectedRows().length > 0 );
              },
              order: grid.options.exporterMenuItemOrder + 5
            },
            {
              title: i18nService.getSafeText('gridMenu.exporterAllAsExcel'),
              action: function () {
                grid.api.exporter.excelExport( uiGridExporterConstants.ALL, uiGridExporterConstants.ALL );
              },
              shown: function() {
                return grid.options.exporterMenuExcel && grid.options.exporterMenuAllData;
              },
              order: grid.options.exporterMenuItemOrder + 6
            },
            {
              title: i18nService.getSafeText('gridMenu.exporterVisibleAsExcel'),
              action: function () {
                grid.api.exporter.excelExport( uiGridExporterConstants.VISIBLE, uiGridExporterConstants.VISIBLE );
              },
              shown: function() {
                return grid.options.exporterMenuExcel && grid.options.exporterMenuVisibleData;
              },
              order: grid.options.exporterMenuItemOrder + 7
            },
            {
              title: i18nService.getSafeText('gridMenu.exporterSelectedAsExcel'),
              action: function () {
                grid.api.exporter.excelExport( uiGridExporterConstants.SELECTED, uiGridExporterConstants.VISIBLE );
              },
              shown: function() {
                return grid.options.exporterMenuExcel && grid.options.exporterMenuSelectedData &&
                  ( grid.api.selection && grid.api.selection.getSelectedRows().length > 0 );
              },
              order: grid.options.exporterMenuItemOrder + 8
            }
          ]);
        },


        /**
         * @ngdoc function
         * @name csvExport
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Exports rows from the grid in csv format,
         * the data exported is selected based on the provided options
         * @param {Grid} grid the grid from which data should be exported
         * @param {string} rowTypes which rows to export, valid values are
         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
         * uiGridExporterConstants.SELECTED
         * @param {string} colTypes which columns to export, valid values are
         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
         * uiGridExporterConstants.SELECTED
         */
        csvExport: function (grid, rowTypes, colTypes) {
          var self = this;
          this.loadAllDataIfNeeded(grid, rowTypes, colTypes).then(function() {
            var exportColumnHeaders = grid.options.showHeader ? self.getColumnHeaders(grid, colTypes) : [];
            var exportData = self.getData(grid, rowTypes, colTypes);
            var csvContent = self.formatAsCsv(exportColumnHeaders, exportData, grid.options.exporterCsvColumnSeparator);

            self.downloadFile (grid.options.exporterCsvFilename, csvContent, grid.options.exporterCsvColumnSeparator, grid.options.exporterOlderExcelCompatibility, grid.options.exporterIsExcelCompatible);
          });
        },

        /**
         * @ngdoc function
         * @name loadAllDataIfNeeded
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description When using server side pagination, use exporterAllDataFn to
         * load all data before continuing processing.
         * When using client side pagination, return a resolved promise so processing
         * continues immediately
         * @param {Grid} grid the grid from which data should be exported
         * @param {string} rowTypes which rows to export, valid values are
         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
         * uiGridExporterConstants.SELECTED
         * @param {string} colTypes which columns to export, valid values are
         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
         * uiGridExporterConstants.SELECTED
         */
        loadAllDataIfNeeded: function (grid, rowTypes, colTypes) {
          if ( rowTypes === uiGridExporterConstants.ALL && grid.rows.length !== grid.options.totalItems && grid.options.exporterAllDataFn) {
            return grid.options.exporterAllDataFn()
              .then(function(allData) {
                grid.modifyRows(allData);
              });
          } else {
            var deferred = $q.defer();
            deferred.resolve();
            return deferred.promise;
          }
        },

        /**
         * @ngdoc property
         * @propertyOf ui.grid.exporter.api:ColumnDef
         * @name exporterSuppressExport
         * @description Suppresses export for this column.  Used by selection and expandable.
         */

        /**
         * @ngdoc function
         * @name getColumnHeaders
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Gets the column headers from the grid to use
         * as a title row for the exported file, all headers have
         * headerCellFilters applied as appropriate.
         *
         * Column headers are an array of objects, each object has
         * name, displayName, width and align attributes.  Only name is
         * used for csv, all attributes are used for pdf.
         *
         * @param {Grid} grid the grid from which data should be exported
         * @param {string} colTypes which columns to export, valid values are
         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
         * uiGridExporterConstants.SELECTED
         */
        getColumnHeaders: function (grid, colTypes) {
          var headers = [],
            columns;

          if ( colTypes === uiGridExporterConstants.ALL ) {
            columns = grid.columns;
          } else {
            var leftColumns = grid.renderContainers.left ? grid.renderContainers.left.visibleColumnCache.filter( function( column ) { return column.visible; } ) : [],
              bodyColumns = grid.renderContainers.body ? grid.renderContainers.body.visibleColumnCache.filter( function( column ) { return column.visible; } ) : [],
              rightColumns = grid.renderContainers.right ? grid.renderContainers.right.visibleColumnCache.filter( function( column ) { return column.visible; } ) : [];

            columns = leftColumns.concat(bodyColumns, rightColumns);
          }

          columns.forEach( function( gridCol ) {
            // $$hashKey check since when grouping and sorting pragmatically this ends up in export. Filtering it out
            if ( gridCol.colDef.exporterSuppressExport !== true  && gridCol.field !== '$$hashKey' &&
                 grid.options.exporterSuppressColumns.indexOf( gridCol.name ) === -1 ) {
              var headerEntry = {
                name: gridCol.field,
                displayName: getDisplayName(grid, gridCol),
                width: gridCol.drawnWidth ? gridCol.drawnWidth : gridCol.width,
                align: gridCol.colDef.align ? gridCol.colDef.align : (gridCol.colDef.type === 'number' ? 'right' : 'left')
              };

              headers.push(headerEntry);
            }
          });

          return headers;
        },

        /**
         * @ngdoc property
         * @propertyOf ui.grid.exporter.api:ColumnDef
         * @name exporterPdfAlign
         * @description the alignment you'd like for this specific column when
         * exported into a pdf.  Can be 'left', 'right', 'center' or any other
         * valid pdfMake alignment option.
         */

        /**
         * @ngdoc object
         * @name ui.grid.exporter.api:GridRow
         * @description GridRow settings for exporter
         */

        /**
         * @ngdoc object
         * @name exporterEnableExporting
         * @propertyOf  ui.grid.exporter.api:GridRow
         * @description If set to false, then don't export this row, notwithstanding visible or
         * other settings
         * <br/>Defaults to true
         */

        /**
         * @ngdoc function
         * @name getRowsFromNode
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Gets rows from a node. If the node is grouped it will
         * recurse down into the children to get to the raw data element
         * which is a row without children (a leaf).
         * @param {Node} aNode the tree node on the grid
         * @returns {Array} an array of leaf nodes
         */
        getRowsFromNode: function(aNode) {
          var rows = [];
          for (var i = 0; i<aNode.children.length; i++) {
            if (aNode.children[i].children && aNode.children[i].children.length === 0) {
              rows.push(aNode.children[i]);
            } else {
              var nodeRows = this.getRowsFromNode(aNode.children[i]);
              rows = rows.concat(nodeRows);
            }
          }
          return rows;
        },

        /**
         * @ngdoc function
         * @name getDataSorted
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Gets rows from a node. If the node is grouped it will
         * recurse down into the children to get to the raw data element
         * which is a row without children (a leaf). If the grid is not
         * grouped this will return just the raw rows
         * @param {Grid} grid the grid from which data should be exported
         * @returns {Array} an array of leaf nodes
         */
        getDataSorted: function (grid) {
          if (!grid.treeBase || grid.treeBase.numberLevels === 0) {
            return grid.rows;
          }
          var rows = [];

          for (var i = 0; i< grid.treeBase.tree.length; i++) {
            var nodeRows = this.getRowsFromNode(grid.treeBase.tree[i]);

            for (var j = 0; j<nodeRows.length; j++) {
              rows.push(nodeRows[j].row);
            }
          }
          return rows;
        },

        /**
         * @ngdoc function
         * @name getData
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Gets data from the grid based on the provided options,
         * all cells have cellFilters applied as appropriate.  Any rows marked
         * `exporterEnableExporting: false` will not be exported
         * @param {Grid} grid the grid from which data should be exported
         * @param {string} rowTypes which rows to export, valid values are
         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
         * uiGridExporterConstants.SELECTED
         * @param {string} colTypes which columns to export, valid values are
         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
         * uiGridExporterConstants.SELECTED
         * @param {boolean} applyCellFilters whether or not to get the display value or the raw value of the data
         */
        getData: function (grid, rowTypes, colTypes, applyCellFilters) {
          var data = [],
            rows,
            columns;

          switch ( rowTypes ) {
            case uiGridExporterConstants.ALL:
              rows = this.getDataSorted(grid, rowTypes, colTypes, applyCellFilters);
              break;
            case uiGridExporterConstants.VISIBLE:
              rows = grid.getVisibleRows();
              break;
            case uiGridExporterConstants.SELECTED:
              if ( grid.api.selection ) {
                rows = grid.api.selection.getSelectedGridRows();
              } else {
                gridUtil.logError('selection feature must be enabled to allow selected rows to be exported');
              }
              break;
          }

          if ( colTypes === uiGridExporterConstants.ALL ) {
            columns = grid.columns;
          } else {
            var leftColumns = grid.renderContainers.left ? grid.renderContainers.left.visibleColumnCache.filter( function( column ) { return column.visible; } ) : [];
            var bodyColumns = grid.renderContainers.body ? grid.renderContainers.body.visibleColumnCache.filter( function( column ) { return column.visible; } ) : [];
            var rightColumns = grid.renderContainers.right ? grid.renderContainers.right.visibleColumnCache.filter( function( column ) { return column.visible; } ) : [];

            columns = leftColumns.concat(bodyColumns, rightColumns);
          }

          rows.forEach(function( row ) {
            if (row.exporterEnableExporting !== false) {
              var extractedRow = [];

              columns.forEach( function( gridCol ) {
                // $$hashKey check since when grouping and sorting programmatically this ends up in export. Filtering it out
                if ( (gridCol.visible || colTypes === uiGridExporterConstants.ALL ) &&
                     gridCol.colDef.exporterSuppressExport !== true && gridCol.field !== '$$hashKey' &&
                     grid.options.exporterSuppressColumns.indexOf( gridCol.name ) === -1 ) {
                  var cellValue = applyCellFilters ? grid.getCellDisplayValue( row, gridCol ) : grid.getCellValue( row, gridCol ),
                    extractedField = { value: grid.options.exporterFieldCallback( grid, row, gridCol, cellValue ) },
                    extension = grid.options.exporterFieldFormatCallback( grid, row, gridCol, cellValue );

                  if (extension) {
                    Object.assign(extractedField, extension);
                  }
                  if ( gridCol.colDef.exporterPdfAlign ) {
                    extractedField.alignment = gridCol.colDef.exporterPdfAlign;
                  }
                  extractedRow.push(extractedField);
                }
              });

              data.push(extractedRow);
            }
          });

          return data;
        },


        /**
         * @ngdoc function
         * @name formatAsCsv
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Formats the column headers and data as a CSV,
         * and sends that data to the user
         * @param {array} exportColumnHeaders an array of column headers,
         * where each header is an object with name, width and maybe alignment
         * @param {array} exportData an array of rows, where each row is
         * an array of column data
         * @param {string} separator a string that represents the separator to be used in the csv file
         * @returns {string} csv the formatted csv as a string
         */
        formatAsCsv: function (exportColumnHeaders, exportData, separator) {
          var self = this,
            bareHeaders = exportColumnHeaders.map(function(header) { return { value: header.displayName };}),
            csv = bareHeaders.length > 0 ? (self.formatRowAsCsv(this, separator)(bareHeaders) + '\n') : '';

          csv += exportData.map(this.formatRowAsCsv(this, separator)).join('\n');

          return csv;
        },

        /**
         * @ngdoc function
         * @name formatRowAsCsv
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Renders a single field as a csv field, including
         * quotes around the value
         * @param {exporterService} exporter pass in exporter
         * @param {string} separator the string to be used to join the row data
         * @returns {function} A function that returns a csv-ified version of the row
         */
        formatRowAsCsv: function (exporter, separator) {
          return function (row) {
            return row.map(exporter.formatFieldAsCsv).join(separator);
          };
        },

        /**
         * @ngdoc function
         * @name formatFieldAsCsv
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Renders a single field as a csv field, including
         * quotes around the value
         * @param {field} field the field to be turned into a csv string,
         * may be of any type
         * @returns {string} a csv-ified version of the field
         */
        formatFieldAsCsv: function (field) {
          if (field.value == null) { // we want to catch anything null-ish, hence just == not ===
            return '';
          }
          if (typeof(field.value) === 'number') {
            return field.value;
          }
          if (typeof(field.value) === 'boolean') {
            return (field.value ? 'TRUE' : 'FALSE') ;
          }
          if (typeof(field.value) === 'string') {
            return '"' + field.value.replace(/"/g,'""') + '"';
          }
          if (typeof(field.value) === 'object' && !(field.value instanceof Date)) {
            return '"' + JSON.stringify(field.value).replace(/"/g,'""') + '"';
          }
          // if field type is date, numberStr
          return JSON.stringify(field.value);
        },

        /**
         * @ngdoc function
         * @name isIE
         * @methodOf ui.grid.exporter.service:uiGridExporterService
         * @description Checks whether current browser is IE and returns it's version if it is
        */
        isIE: function () {
          var match = navigator.userAgent.search(/(?:Edge|MSIE|Trident\/.*; rv:)/);
          var isIE = false;

          if (match !== -1) {
            isIE = true;
          }

          return isIE;
        },


        /**
         * @ngdoc function
         * @name downloadFile
         * @methodOf ui.grid.exporter.service:uiGridExporterService
         * @description Triggers download of a csv file.  Logic provided
         * by @cssensei (from his colleagues at https://github.com/ifeelgoods) in issue #2391
         * @param {string} fileName the filename we'd like our file to be
         * given
         * @param {string} csvContent the csv content that we'd like to
         * download as a file
         * @param {string} columnSeparator The separator to be used by the columns
         * @param {boolean} exporterOlderExcelCompatibility whether or not we put a utf-16 BOM on the from (\uFEFF)
          * @param {boolean} exporterIsExcelCompatible whether or not we add separator header ('sep=X')
         */
        downloadFile: function (fileName, csvContent, columnSeparator, exporterOlderExcelCompatibility, exporterIsExcelCompatible) {
          var D = document,
            a = D.createElement('a'),
            strMimeType = 'application/octet-stream;charset=utf-8',
            rawFile,
            ieVersion = this.isIE();

          if (exporterIsExcelCompatible) {
              csvContent = 'sep=' + columnSeparator + '\r\n' + csvContent;
          }

          // IE10+
          if (navigator.msSaveBlob) {
            return navigator.msSaveOrOpenBlob(
              new Blob(
                [exporterOlderExcelCompatibility ? "\uFEFF" : '', csvContent],
                { type: strMimeType } ),
              fileName
            );
          }

          if (ieVersion) {
            var frame = D.createElement('iframe');

            document.body.appendChild(frame);

            frame.contentWindow.document.open('text/html', 'replace');
            frame.contentWindow.document.write(csvContent);
            frame.contentWindow.document.close();
            frame.contentWindow.focus();
            frame.contentWindow.document.execCommand('SaveAs', true, fileName);

            document.body.removeChild(frame);
            return true;
          }

          // html5 A[download]
          if ('download' in a) {
            var blob = new Blob(
              [exporterOlderExcelCompatibility ? "\uFEFF" : '', csvContent],
              { type: strMimeType }
            );
            rawFile = URL.createObjectURL(blob);
            a.setAttribute('download', fileName);
          } else {
            rawFile = 'data: ' + strMimeType + ',' + encodeURIComponent(csvContent);
            a.setAttribute('target', '_blank');
          }

          a.href = rawFile;
          a.setAttribute('style', 'display:none;');
          D.body.appendChild(a);
          setTimeout(function() {
            if (a.click) {
              a.click();
              // Workaround for Safari 5
            } else if (document.createEvent) {
              var eventObj = document.createEvent('MouseEvents');
              eventObj.initEvent('click', true, true);
              a.dispatchEvent(eventObj);
            }
            D.body.removeChild(a);

          }, this.delay);
        },

        /**
         * @ngdoc function
         * @name pdfExport
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Exports rows from the grid in pdf format,
         * the data exported is selected based on the provided options.
         * Note that this function has a dependency on pdfMake, which must
         * be installed.  The resulting pdf opens in a new
         * browser window.
         * @param {Grid} grid the grid from which data should be exported
         * @param {string} rowTypes which rows to export, valid values are
         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
         * uiGridExporterConstants.SELECTED
         * @param {string} colTypes which columns to export, valid values are
         * uiGridExporterConstants.ALL, uiGridExporterConstants.VISIBLE,
         * uiGridExporterConstants.SELECTED
         */
        pdfExport: function (grid, rowTypes, colTypes) {
          var self = this;

          this.loadAllDataIfNeeded(grid, rowTypes, colTypes).then(function () {
            var exportColumnHeaders = self.getColumnHeaders(grid, colTypes),
              exportData = self.getData(grid, rowTypes, colTypes),
              docDefinition = self.prepareAsPdf(grid, exportColumnHeaders, exportData);

            if (self.isIE() || navigator.appVersion.indexOf('Edge') !== -1) {
              self.downloadPDF(grid.options.exporterPdfFilename, docDefinition);
            } else {
              pdfMake.createPdf(docDefinition).open();
            }
          });
        },


        /**
         * @ngdoc function
         * @name downloadPdf
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Generates and retrieves the pdf as a blob, then downloads
         * it as a file.  Only used in IE, in all other browsers we use the native
         * pdfMake.open function to just open the PDF
         * @param {string} fileName the filename to give to the pdf, can be set
         * through exporterPdfFilename
         * @param {object} docDefinition a pdf docDefinition that we can generate
         * and get a blob from
         */
        downloadPDF: function (fileName, docDefinition) {
          var D = document,
            a = D.createElement('a'),
            ieVersion;

          ieVersion = this.isIE(); // This is now a boolean value
          var doc = pdfMake.createPdf(docDefinition);
          var blob;

          doc.getBuffer( function (buffer) {
            blob = new Blob([buffer]);

            // IE10+
            if (navigator.msSaveBlob) {
              return navigator.msSaveBlob(
                blob, fileName
              );
            }

            // Previously:  && ieVersion < 10
            // ieVersion now returns a boolean for the
            // sake of sanity. We just check `msSaveBlob` first.
            if (ieVersion) {
              var frame = D.createElement('iframe');
              document.body.appendChild(frame);

              frame.contentWindow.document.open('text/html', 'replace');
              frame.contentWindow.document.write(blob);
              frame.contentWindow.document.close();
              frame.contentWindow.focus();
              frame.contentWindow.document.execCommand('SaveAs', true, fileName);

              document.body.removeChild(frame);
              return true;
            }
          });
        },


        /**
         * @ngdoc function
         * @name renderAsPdf
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Renders the data into a pdf, and opens that pdf.
         *
         * @param {Grid} grid the grid from which data should be exported
         * @param {array} exportColumnHeaders an array of column headers,
         * where each header is an object with name, width and maybe alignment
         * @param {array} exportData an array of rows, where each row is
         * an array of column data
         * @returns {object} a pdfMake format document definition, ready
         * for generation
         */
        prepareAsPdf: function(grid, exportColumnHeaders, exportData) {
          var headerWidths = this.calculatePdfHeaderWidths( grid, exportColumnHeaders );

          var headerColumns = exportColumnHeaders.map( function( header ) {
            return { text: header.displayName, style: 'tableHeader' };
          });

          var stringData = exportData.map(this.formatRowAsPdf(this));

          var allData = [headerColumns].concat(stringData);

          var docDefinition = {
            pageOrientation: grid.options.exporterPdfOrientation,
            pageSize: grid.options.exporterPdfPageSize,
            content: [{
              style: 'tableStyle',
              table: {
                headerRows: 1,
                widths: headerWidths,
                body: allData
              }
            }],
            styles: {
              tableStyle: grid.options.exporterPdfTableStyle,
              tableHeader: grid.options.exporterPdfTableHeaderStyle
            },
            defaultStyle: grid.options.exporterPdfDefaultStyle
          };

          if ( grid.options.exporterPdfLayout ) {
            docDefinition.layout = grid.options.exporterPdfLayout;
          }

          if ( grid.options.exporterPdfHeader ) {
            docDefinition.header = grid.options.exporterPdfHeader;
          }

          if ( grid.options.exporterPdfFooter ) {
            docDefinition.footer = grid.options.exporterPdfFooter;
          }

          if ( grid.options.exporterPdfCustomFormatter ) {
            docDefinition = grid.options.exporterPdfCustomFormatter( docDefinition );
          }
          return docDefinition;

        },


        /**
         * @ngdoc function
         * @name calculatePdfHeaderWidths
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Determines the column widths base on the
         * widths we got from the grid.  If the column is drawn
         * then we have a drawnWidth.  If the column is not visible
         * then we have '*', 'x%' or a width.  When columns are
         * not visible they don't contribute to the overall gridWidth,
         * so we need to adjust to allow for extra columns
         *
         * Our basic heuristic is to take the current gridWidth, plus
         * numeric columns and call this the base gridwidth.
         *
         * To that we add 100 for any '*' column, and x% of the base gridWidth
         * for any column that is a %
         *
         * @param {Grid} grid the grid from which data should be exported
         * @param {array} exportHeaders array of header information
         * @returns {object} an array of header widths
         */
        calculatePdfHeaderWidths: function ( grid, exportHeaders ) {
          var baseGridWidth = 0;

          exportHeaders.forEach(function(value) {
            if (typeof(value.width) === 'number') {
              baseGridWidth += value.width;
            }
          });

          var extraColumns = 0;

          exportHeaders.forEach(function(value) {
            if (value.width === '*') {
              extraColumns += 100;
            }
            if (typeof(value.width) === 'string' && value.width.match(/(\d)*%/)) {
              var percent = parseInt(value.width.match(/(\d)*%/)[0]);

              value.width = baseGridWidth * percent / 100;
              extraColumns += value.width;
            }
          });

          var gridWidth = baseGridWidth + extraColumns;

          return exportHeaders.map(function( header ) {
            return header.width === '*' ? header.width : header.width * grid.options.exporterPdfMaxGridWidth / gridWidth;
          });
        },

        /**
         * @ngdoc function
         * @name formatRowAsPdf
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Renders a row in a format consumable by PDF,
         * mainly meaning casting everything to a string
         * @param {exporterService} exporter pass in exporter
         * @param {array} row the row to be turned into a csv string
         * @returns {string} a csv-ified version of the row
         */
        formatRowAsPdf: function ( exporter ) {
          return function( row ) {
            return row.map(exporter.formatFieldAsPdfString);
          };
        },


        /**
         * @ngdoc function
         * @name formatFieldAsCsv
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Renders a single field as a pdf-able field, which
         * is different from a csv field only in that strings don't have quotes
         * around them
         * @param {field} field the field to be turned into a pdf string,
         * may be of any type
         * @returns {string} a string-ified version of the field
         */
        formatFieldAsPdfString: function (field) {
          var returnVal;

          if (field.value == null) { // we want to catch anything null-ish, hence just == not ===
            returnVal = '';
          } else if (typeof(field.value) === 'number') {
            returnVal = field.value.toString();
          } else if (typeof(field.value) === 'boolean') {
            returnVal = (field.value ? 'TRUE' : 'FALSE') ;
          } else if (typeof(field.value) === 'string') {
            returnVal = field.value.replace(/"/g,'""');
          } else if (field.value instanceof Date) {
            returnVal = JSON.stringify(field.value).replace(/^"/,'').replace(/"$/,'');
          } else if (typeof(field.value) === 'object') {
            returnVal = field.value;
          } else {
            returnVal = JSON.stringify(field.value).replace(/^"/,'').replace(/"$/,'');
          }

          if (field.alignment && typeof(field.alignment) === 'string' ) {
            returnVal = { text: returnVal, alignment: field.alignment };
          }

          return returnVal;
        },

        /**
         * @ngdoc function
         * @name formatAsExcel
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Formats the column headers and data as a excel,
         * and sends that data to the user
         * @param {array} exportColumnHeaders an array of column headers,
         * where each header is an object with name, width and maybe alignment
         * @param {array} exportData an array of rows, where each row is
         * an array of column data
         * @param {string} separator a string that represents the separator to be used in the csv file
         * @returns {string} csv the formatted excel as a string
         */
        formatAsExcel: function (exportColumnHeaders, exportData, workbook, sheet, docDefinition) {
          var bareHeaders = exportColumnHeaders.map(function(header) {return { value: header.displayName };});

          var sheetData = [];
          var headerData = [];
          for (var i = 0; i < bareHeaders.length; i++) {
            // TODO - probably need callback to determine header value and header styling
            var exportStyle = 'header';
            switch (exportColumnHeaders[i].align) {
              case 'center':
                exportStyle = 'headerCenter';
                break;
              case 'right':
                exportStyle = 'headerRight';
                break;
            }
            var metadata = (docDefinition.styles && docDefinition.styles[exportStyle]) ? {style: docDefinition.styles[exportStyle].id} : null;
            headerData.push({value: bareHeaders[i].value, metadata: metadata});
          }
          sheetData.push(headerData);

          var result = exportData.map(this.formatRowAsExcel(this, workbook, sheet));
          for (var j = 0; j<result.length; j++) {
            sheetData.push(result[j]);
          }
          return sheetData;
        },

        /**
         * @ngdoc function
         * @name formatRowAsExcel
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Renders a single field as a csv field, including
         * quotes around the value
         * @param {exporterService} exporter pass in exporter
         * @param {array} row the row to be turned into a excel string
         * @returns {array} array of cell objects (i.e. {value: x, metadata: y})
         */
        formatRowAsExcel: function (exporter, workbook, sheet) {
          return function (row) {
            var values = [];
            for (var i = 0; i<row.length; i++) {
              var value = exporter.formatFieldAsExcel(row[i], workbook, sheet);
              values.push({value: value, metadata: row[i].metadata});
            }
            return values;
          };
        },

        /**
         * @ngdoc function
         * @name formatFieldAsExcel
         * @methodOf  ui.grid.exporter.service:uiGridExporterService
         * @description Renders a single field as a excel-ified field
         * @param {field} field the field to be excel-ified,
         * may be of any type
         * @returns {string} a excel-ified version of the field
         */
        formatFieldAsExcel: function (field, workbook, sheet, formatters) {
          if (field.value == null) { // we want to catch anything null-ish, hence just == not ===
            return '';
          }
          if ((typeof(field.value) === 'number') || (typeof(field.value) === 'string')) {
            return field.value;
          }
          if (typeof(field.value) === 'boolean') {
            return (field.value ? 'TRUE' : 'FALSE') ;
          }

          return JSON.stringify(field.value);
        },

        prepareAsExcel: function(grid, workbook, sheet) {
          var docDefinition = {
            styles: {

            }
          };

          if ( grid.options.exporterExcelCustomFormatters ) {
            docDefinition = grid.options.exporterExcelCustomFormatters( grid, workbook, docDefinition );
          }
          if ( grid.options.exporterExcelHeader ) {
            if (angular.isFunction( grid.options.exporterExcelHeader )) {
              grid.options.exporterExcelHeader(grid, workbook, sheet, docDefinition);
            } else {
              var headerText = grid.options.exporterExcelHeader.text;
              var style = grid.options.exporterExcelHeader.style;
              sheet.data.push([{value: headerText, metadata: {style: docDefinition.styles[style].id}}]);
            }
          }

          return docDefinition;
        },

        excelExport: function (grid, rowTypes, colTypes) {
          var self = this;
          this.loadAllDataIfNeeded(grid, rowTypes, colTypes).then(function() {
            var exportColumnHeaders = grid.options.showHeader ? self.getColumnHeaders(grid, colTypes) : [];

            var workbook = new ExcelBuilder.Workbook();
            var aName = grid.options.exporterExcelSheetName ? grid.options.exporterExcelSheetName : 'Sheet1';
            var sheet = new ExcelBuilder.Worksheet({name: aName});
            workbook.addWorksheet(sheet);
            var docDefinition = self.prepareAsExcel(grid, workbook, sheet);

            // The standard column width in Microsoft Excel 2000 is 8.43 characters based on fixed-width Courier font
            // Width of 10 in excel is 75 pixels
            var colWidths = [];
            var startDataIndex = grid.treeBase ? grid.treeBase.numberLevels : (grid.enableRowSelection ? 1 : 0);
            for (var i = startDataIndex; i < grid.columns.length; i++) {
              if (grid.columns[i].field !== uiGridExporterConstants.rowHeaderColName &&
                grid.columns[i].field !== uiGridExporterConstants.selectionRowHeaderColName) {

                colWidths.push({width: (grid.columns[i].drawnWidth / grid.options.exporterColumnScaleFactor)});
              }
            }
            sheet.setColumns(colWidths);

            var exportData = self.getData(grid, rowTypes, colTypes, grid.options.exporterFieldApplyFilters);

            var excelContent = self.formatAsExcel(exportColumnHeaders, exportData, workbook, sheet, docDefinition);
            sheet.setData(sheet.data.concat(excelContent));

            ExcelBuilder.Builder.createFile(workbook, {type: 'blob'}).then(function(result) {
              self.downloadFile (grid.options.exporterExcelFilename, result, grid.options.exporterCsvColumnSeparator,
                grid.options.exporterOlderExcelCompatibility);
            });
          });
        }
      };

      function getDisplayName(grid, gridCol) {
        if (grid.options.exporterHeaderFilter) {
          return grid.options.exporterHeaderFilterUseName ?
            grid.options.exporterHeaderFilter(gridCol.name) :
            grid.options.exporterHeaderFilter(gridCol.displayName);
        }

        return gridCol.headerCellFilter ?
          $filter(gridCol.headerCellFilter)(gridCol.displayName) :
          gridCol.displayName;
      }

      function defaultExporterFieldCallback(grid, row, col, value) {
        // fix to handle cases with 'number : 1' or 'date:MM-dd-YYYY', etc.. We needed to split the string
        if (col.cellFilter) {
					var args, filter, arg1, arg2;
					// remove space, single/double to mantein retro-compatibility
					args = col.cellFilter.replace(/[\'\"\s]/g, "").split(':');
					filter = args[0] ? args[0] : null;
					arg1 = args[1] ? args[1] : null;
					arg2 = args[2] ? args[2] : null;
          return $filter(filter)(value, arg1, arg2);
        } else {
          return value;
        }
      }

      return service;
    }
  ]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.exporter.directive:uiGridExporter
   *  @element div
   *  @restrict A
   *
   *  @description Adds exporter features to grid
   *
   *  @example
   <example module="app">
   <file name="app.js">
   var app = angular.module('app', ['ui.grid', 'ui.grid.exporter']);

   app.controller('MainCtrl', ['$scope', function ($scope) {
      $scope.data = [
        { name: 'Bob', title: 'CEO' },
            { name: 'Frank', title: 'Lowly Developer' }
      ];

      $scope.gridOptions = {
        enableGridMenu: true,
        exporterMenuCsv: false,
        columnDefs: [
          {name: 'name', enableCellEdit: true},
          {name: 'title', enableCellEdit: true}
        ],
        data: $scope.data
      };
    }]);
   </file>
   <file name="index.html">
   <div ng-controller="MainCtrl">
   <div ui-grid="gridOptions" ui-grid-exporter></div>
   </div>
   </file>
   </example>
   */
  module.directive('uiGridExporter', ['uiGridExporterConstants', 'uiGridExporterService', 'gridUtil', '$compile',
    function (uiGridExporterConstants, uiGridExporterService, gridUtil, $compile) {
      return {
        replace: true,
        priority: 0,
        require: '^uiGrid',
        scope: false,
        link: function ($scope, $elm, $attrs, uiGridCtrl) {
          uiGridExporterService.initializeGrid(uiGridCtrl.grid);
          uiGridCtrl.grid.exporter.$scope = $scope;
        }
      };
    }
  ]);
})();

(function () {
  'use strict';

  /**
   * @ngdoc overview
   * @name ui.grid.grouping
   * @description
   *
   * # ui.grid.grouping
   *
   * <div class="alert alert-warning" role="alert"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>
   *
   * This module provides grouping of rows based on the data in them, similar
   * in concept to excel grouping.  You can group multiple columns, resulting in
   * nested grouping.
   *
   * In concept this feature is similar to sorting + grid footer/aggregation, it
   * sorts the data based on the grouped columns, then creates group rows that
   * reflect a break in the data.  Each of those group rows can have aggregations for
   * the data within that group.
   *
   * This feature leverages treeBase to provide the tree functionality itself,
   * the key thing this feature does therefore is to set treeLevels on the rows
   * and insert the group headers.
   *
   * Design information:
   * -------------------
   *
   * Each column will get new menu items - group by, and aggregate by.  Group by
   * will cause this column to be sorted (if not already), and will move this column
   * to the front of the sorted columns (i.e. grouped columns take precedence over
   * sorted columns).  It will respect the sort order already set if there is one,
   * and it will allow the sorting logic to change that sort order, it just forces
   * the column to the front of the sorting.  You can group by multiple columns, the
   * logic will add this column to the sorting after any already grouped columns.
   *
   * Once a grouping is defined, grouping logic is added to the rowsProcessors.  This
   * will process the rows, identifying a break in the data value, and inserting a grouping row.
   * Grouping rows have specific attributes on them:
   *
   *  - internalRow = true: tells us that this isn't a real row, so we can ignore it
   *    from any processing that it looking at core data rows.  This is used by the core
   *    logic (or will be one day), as it's not grouping specific
   *  - groupHeader = true: tells us this is a groupHeader.  This is used by the grouping logic
   *    to know if this is a groupHeader row or not
   *
   * Since the logic is baked into the rowsProcessors, it should get triggered whenever
   * row order or filtering or anything like that is changed.  In order to avoid the row instantiation
   * time, and to preserve state across invocations, we hold a cache of the rows that we created
   * last time, and we use them again this time if we can.
   *
   * By default rows are collapsed, which means all data rows have their visible property
   * set to false, and only level 0 group rows are set to visible.
   *
   * <br/>
   * <br/>
   *
   * <div doc-module-components="ui.grid.grouping"></div>
   */

  var module = angular.module('ui.grid.grouping', ['ui.grid', 'ui.grid.treeBase']);

  /**
   *  @ngdoc object
   *  @name ui.grid.grouping.constant:uiGridGroupingConstants
   *
   *  @description constants available in grouping module, this includes
   *  all the constants declared in the treeBase module (these are manually copied
   *  as there isn't an easy way to include constants in another constants file, and
   *  we don't want to make users include treeBase)
   *
   */
  module.constant('uiGridGroupingConstants', {
    featureName: "grouping",
    rowHeaderColName: 'treeBaseRowHeaderCol',
    EXPANDED: 'expanded',
    COLLAPSED: 'collapsed',
    aggregation: {
      COUNT: 'count',
      SUM: 'sum',
      MAX: 'max',
      MIN: 'min',
      AVG: 'avg'
    }
  });

  /**
   *  @ngdoc service
   *  @name ui.grid.grouping.service:uiGridGroupingService
   *
   *  @description Services for grouping features
   */
  module.service('uiGridGroupingService', ['$q', 'uiGridGroupingConstants', 'gridUtil', 'rowSorter', 'GridRow', 'gridClassFactory', 'i18nService', 'uiGridConstants', 'uiGridTreeBaseService',
  function ($q, uiGridGroupingConstants, gridUtil, rowSorter, GridRow, gridClassFactory, i18nService, uiGridConstants, uiGridTreeBaseService) {
    var service = {
      initializeGrid: function (grid, $scope) {
        uiGridTreeBaseService.initializeGrid( grid, $scope );

        // add feature namespace and any properties to grid for needed
        /**
         *  @ngdoc object
         *  @name ui.grid.grouping.grid:grouping
         *
         *  @description Grid properties and functions added for grouping
         */
        grid.grouping = {};

        /**
         *  @ngdoc property
         *  @propertyOf ui.grid.grouping.grid:grouping
         *  @name groupHeaderCache
         *
         *  @description Cache that holds the group header rows we created last time, we'll
         *  reuse these next time, not least because they hold our expanded states.
         *
         *  We need to take care with these that they don't become a memory leak, we
         *  create a new cache each time using the values from the old cache.  This works
         *  so long as we're creating group rows for invisible rows as well.
         *
         *  The cache is a nested hash, indexed on the value we grouped by.  So if we
         *  grouped by gender then age, we'd maybe have something like:
         *  ```
         *    {
         *      male: {
         *        row: <pointer to the old row>,
         *        children: {
         *          22: { row: <pointer to the old row> },
         *          31: { row: <pointer to the old row> }
         *      },
         *      female: {
         *        row: <pointer to the old row>,
         *        children: {
         *          28: { row: <pointer to the old row> },
         *          55: { row: <pointer to the old row> }
         *      }
         *    }
         *  ```
         *
         *  We create new rows for any missing rows, this means that they come in as collapsed.
         *
         */
        grid.grouping.groupHeaderCache = {};

        service.defaultGridOptions(grid.options);

        grid.registerRowsProcessor(service.groupRows, 400);

        grid.registerColumnBuilder( service.groupingColumnBuilder);

        grid.registerColumnsProcessor(service.groupingColumnProcessor, 400);

        /**
         *  @ngdoc object
         *  @name ui.grid.grouping.api:PublicApi
         *
         *  @description Public Api for grouping feature
         */
        var publicApi = {
          events: {
            grouping: {
              /**
               * @ngdoc event
               * @eventOf ui.grid.grouping.api:PublicApi
               * @name aggregationChanged
               * @description raised whenever aggregation is changed, added or removed from a column
               *
               * <pre>
               *      gridApi.grouping.on.aggregationChanged(scope,function(col) {})
               * </pre>
               * @param {GridColumn} col the column on which aggregation changed. The aggregation
               * type is available as `col.treeAggregation.type`
               */
              aggregationChanged: {},
              /**
               * @ngdoc event
               * @eventOf ui.grid.grouping.api:PublicApi
               * @name groupingChanged
               * @description raised whenever the grouped columns changes
               *
               * <pre>
               *      gridApi.grouping.on.groupingChanged(scope,function(col) {})
               * </pre>
               * @param {GridColumn} col the column on which grouping changed. The new grouping is
               * available as `col.grouping`
               */
              groupingChanged: {}
            }
          },
          methods: {
            grouping: {
              /**
               * @ngdoc function
               * @name getGrouping
               * @methodOf  ui.grid.grouping.api:PublicApi
               * @description Get the grouping configuration for this grid,
               * used by the saveState feature.  Adds expandedState to the information
               * provided by the internal getGrouping, and removes any aggregations that have a source
               * of grouping (i.e. will be automatically reapplied when we regroup the column)
               * Returned grouping is an object
               *   `{ grouping: groupArray, treeAggregations: aggregateArray, expandedState: hash }`
               * where grouping contains an array of objects:
               *   `{ field: column.field, colName: column.name, groupPriority: column.grouping.groupPriority }`
               * and aggregations contains an array of objects:
               *   `{ field: column.field, colName: column.name, aggregation: column.grouping.aggregation }`
               * and expandedState is a hash of the currently expanded nodes
               *
               * The groupArray will be sorted by groupPriority.
               *
               * @param {boolean} getExpanded whether or not to return the expanded state
               * @returns {object} grouping configuration
               */
              getGrouping: function ( getExpanded ) {
                var grouping = service.getGrouping(grid);

                grouping.grouping.forEach( function( group ) {
                  group.colName = group.col.name;
                  delete group.col;
                });

                grouping.aggregations.forEach( function( aggregation ) {
                  aggregation.colName = aggregation.col.name;
                  delete aggregation.col;
                });

                grouping.aggregations = grouping.aggregations.filter( function( aggregation ) {
                  return !aggregation.aggregation.source || aggregation.aggregation.source !== 'grouping';
                });

                if ( getExpanded ) {
                  grouping.rowExpandedStates = service.getRowExpandedStates( grid.grouping.groupingHeaderCache );
                }

                return grouping;
              },

              /**
               * @ngdoc function
               * @name setGrouping
               * @methodOf  ui.grid.grouping.api:PublicApi
               * @description Set the grouping configuration for this grid,
               * used by the saveState feature, but can also be used by any
               * user to specify a combined grouping and aggregation configuration
               * @param {object} config the config you want to apply, in the format
               * provided out by getGrouping
               */
              setGrouping: function ( config ) {
                service.setGrouping(grid, config);
              },

              /**
               * @ngdoc function
               * @name groupColumn
               * @methodOf  ui.grid.grouping.api:PublicApi
               * @description Adds this column to the existing grouping, at the end of the priority order.
               * If the column doesn't have a sort, adds one, by default ASC
               *
               * This column will move to the left of any non-group columns, the
               * move is handled in a columnProcessor, so gets called as part of refresh
               *
               * @param {string} columnName the name of the column we want to group
               */
              groupColumn: function(columnName) {
                var column = grid.getColumn(columnName);

                service.groupColumn(grid, column);
              },

              /**
               * @ngdoc function
               * @name ungroupColumn
               * @methodOf  ui.grid.grouping.api:PublicApi
               * @description Removes the groupPriority from this column.  If the
               * column was previously aggregated the aggregation will come back.
               * The sort will remain.
               *
               * This column will move to the right of any other group columns, the
               * move is handled in a columnProcessor, so gets called as part of refresh
               *
               * @param {string} columnName the name of the column we want to ungroup
               */
              ungroupColumn: function(columnName) {
                var column = grid.getColumn(columnName);

                service.ungroupColumn(grid, column);
              },

              /**
               * @ngdoc function
               * @name clearGrouping
               * @methodOf  ui.grid.grouping.api:PublicApi
               * @description Clear any grouped columns and any aggregations.  Doesn't remove sorting,
               * as we don't know whether that sorting was added by grouping or was there beforehand
               *
               */
              clearGrouping: function() {
                service.clearGrouping(grid);
              },

              /**
               * @ngdoc function
               * @name aggregateColumn
               * @methodOf  ui.grid.grouping.api:PublicApi
               * @description Sets the aggregation type on a column, if the
               * column is currently grouped then it removes the grouping first.
               * If the aggregationDef is null then will result in the aggregation
               * being removed
               *
               * @param {string} columnName the column we want to aggregate
               * @param {string|function} aggregationDef one of the recognised types
               * from uiGridGroupingConstants or a custom aggregation function.
               * @param {string} aggregationLabel (optional) The label to use for this aggregation.
               */
              aggregateColumn: function(columnName, aggregationDef, aggregationLabel) {
                var column = grid.getColumn(columnName);

                service.aggregateColumn(grid, column, aggregationDef, aggregationLabel);
              }
            }
          }
        };

        grid.api.registerEventsFromObject(publicApi.events);

        grid.api.registerMethodsFromObject(publicApi.methods);

        grid.api.core.on.sortChanged($scope, service.tidyPriorities);
      },

      defaultGridOptions: function (gridOptions) {
        // default option to true unless it was explicitly set to false
        /**
         *  @ngdoc object
         *  @name ui.grid.grouping.api:GridOptions
         *
         *  @description GridOptions for grouping feature, these are available to be
         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
         */

        /**
         *  @ngdoc object
         *  @name enableGrouping
         *  @propertyOf  ui.grid.grouping.api:GridOptions
         *  @description Enable row grouping for entire grid.
         *  <br/>Defaults to true
         */
        gridOptions.enableGrouping = gridOptions.enableGrouping !== false;

        /**
         *  @ngdoc object
         *  @name groupingShowCounts
         *  @propertyOf  ui.grid.grouping.api:GridOptions
         *  @description shows counts on the groupHeader rows. Not that if you are using a cellFilter or a
         *  sortingAlgorithm which relies on a specific format or data type, showing counts may cause that
         *  to break, since the group header rows will always be a string with groupingShowCounts enabled.
         *  <br/>Defaults to true except on columns of types 'date' and 'object'
         */
        gridOptions.groupingShowCounts = gridOptions.groupingShowCounts !== false;

        /**
         *  @ngdoc object
         *  @name groupingNullLabel
         *  @propertyOf  ui.grid.grouping.api:GridOptions
         *  @description The string to use for the grouping header row label on rows which contain a null or undefined value in the grouped column.
         *  <br/>Defaults to "Null"
         */
        gridOptions.groupingNullLabel = typeof(gridOptions.groupingNullLabel) === 'undefined' ? 'Null' : gridOptions.groupingNullLabel;

        /**
         *  @ngdoc object
         *  @name enableGroupHeaderSelection
         *  @propertyOf  ui.grid.grouping.api:GridOptions
         *  @description Allows group header rows to be selected.
         *  <br/>Defaults to false
         */
        gridOptions.enableGroupHeaderSelection = gridOptions.enableGroupHeaderSelection === true;
      },


      /**
       * @ngdoc function
       * @name groupingColumnBuilder
       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
       * @description Sets the grouping defaults based on the columnDefs
       *
       * @param {object} colDef columnDef we're basing on
       * @param {GridColumn} col the column we're to update
       * @param {object} gridOptions the options we should use
       * @returns {promise} promise for the builder - actually we do it all inline so it's immediately resolved
       */
      groupingColumnBuilder: function (colDef, col, gridOptions) {
        /**
         *  @ngdoc object
         *  @name ui.grid.grouping.api:ColumnDef
         *
         *  @description ColumnDef for grouping feature, these are available to be
         *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
         */

        /**
         *  @ngdoc object
         *  @name enableGrouping
         *  @propertyOf  ui.grid.grouping.api:ColumnDef
         *  @description Enable grouping on this column
         *  <br/>Defaults to true.
         */
        if (colDef.enableGrouping === false) {
          return;
        }

        /**
         *  @ngdoc object
         *  @name grouping
         *  @propertyOf  ui.grid.grouping.api:ColumnDef
         *  @description Set the grouping for a column.  Format is:
         *  ```
         *    {
         *      groupPriority: <number, starts at 0, if less than 0 or undefined then we're aggregating in this column>
         *    }
         *  ```
         *
         *  **Note that aggregation used to be included in grouping, but is now separately set on the column via treeAggregation
         *  setting in treeBase**
         *
         *  We group in the priority order given, this will also put these columns to the high order of the sort irrespective
         *  of the sort priority given them.  If there is no sort defined then we sort ascending, if there is a sort defined then
         *  we use that sort.
         *
         *  If the groupPriority is undefined or less than 0, then we expect to be aggregating, and we look at the
         *  aggregation types to determine what sort of aggregation we can do.  Values are in the constants file, but
         *  include SUM, COUNT, MAX, MIN
         *
         *  groupPriorities should generally be sequential, if they're not then the next time getGrouping is called
         *  we'll renumber them to be sequential.
         *  <br/>Defaults to undefined.
         */

        if ( typeof(col.grouping) === 'undefined' && typeof(colDef.grouping) !== 'undefined') {
          col.grouping = angular.copy(colDef.grouping);
          if ( typeof(col.grouping.groupPriority) !== 'undefined' && col.grouping.groupPriority > -1 ) {
            col.treeAggregationFn = uiGridTreeBaseService.nativeAggregations()[uiGridGroupingConstants.aggregation.COUNT].aggregationFn;
            col.treeAggregationFinalizerFn = service.groupedFinalizerFn;
          }
        } else if (typeof(col.grouping) === 'undefined') {
          col.grouping = {};
        }

        if (typeof(col.grouping) !== 'undefined' && typeof(col.grouping.groupPriority) !== 'undefined' && col.grouping.groupPriority >= 0) {
          col.suppressRemoveSort = true;
        }

        var groupColumn = {
          name: 'ui.grid.grouping.group',
          title: i18nService.get().grouping.group,
          icon: 'ui-grid-icon-indent-right',
          shown: function () {
            return typeof(this.context.col.grouping) === 'undefined' ||
                   typeof(this.context.col.grouping.groupPriority) === 'undefined' ||
                   this.context.col.grouping.groupPriority < 0;
          },
          action: function () {
            service.groupColumn( this.context.col.grid, this.context.col );
          }
        };

        var ungroupColumn = {
          name: 'ui.grid.grouping.ungroup',
          title: i18nService.get().grouping.ungroup,
          icon: 'ui-grid-icon-indent-left',
          shown: function () {
            return typeof(this.context.col.grouping) !== 'undefined' &&
                   typeof(this.context.col.grouping.groupPriority) !== 'undefined' &&
                   this.context.col.grouping.groupPriority >= 0;
          },
          action: function () {
            service.ungroupColumn( this.context.col.grid, this.context.col );
          }
        };

        var aggregateRemove = {
          name: 'ui.grid.grouping.aggregateRemove',
          title: i18nService.get().grouping.aggregate_remove,
          shown: function () {
            return typeof(this.context.col.treeAggregationFn) !== 'undefined';
          },
          action: function () {
            service.aggregateColumn( this.context.col.grid, this.context.col, null);
          }
        };

        // generic adder for the aggregation menus, which follow a pattern
        var addAggregationMenu = function(type, title) {
          title = title || i18nService.get().grouping['aggregate_' + type] || type;
          var menuItem = {
            name: 'ui.grid.grouping.aggregate' + type,
            title: title,
            shown: function () {
              return typeof(this.context.col.treeAggregation) === 'undefined' ||
                     typeof(this.context.col.treeAggregation.type) === 'undefined' ||
                     this.context.col.treeAggregation.type !== type;
            },
            action: function () {
              service.aggregateColumn( this.context.col.grid, this.context.col, type);
            }
          };

          if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.grouping.aggregate' + type)) {
            col.menuItems.push(menuItem);
          }
        };

        /**
         *  @ngdoc object
         *  @name groupingShowGroupingMenu
         *  @propertyOf  ui.grid.grouping.api:ColumnDef
         *  @description Show the grouping (group and ungroup items) menu on this column
         *  <br/>Defaults to true.
         */
        if ( col.colDef.groupingShowGroupingMenu !== false ) {
          if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.grouping.group')) {
            col.menuItems.push(groupColumn);
          }

          if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.grouping.ungroup')) {
            col.menuItems.push(ungroupColumn);
          }
        }


        /**
         *  @ngdoc object
         *  @name groupingShowAggregationMenu
         *  @propertyOf  ui.grid.grouping.api:ColumnDef
         *  @description Show the aggregation menu on this column
         *  <br/>Defaults to true.
         */
        if ( col.colDef.groupingShowAggregationMenu !== false ) {
          angular.forEach(uiGridTreeBaseService.nativeAggregations(), function(aggregationDef, name) {
            addAggregationMenu(name);
          });
          angular.forEach(gridOptions.treeCustomAggregations, function(aggregationDef, name) {
            addAggregationMenu(name, aggregationDef.menuTitle);
          });

          if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.grouping.aggregateRemove')) {
            col.menuItems.push(aggregateRemove);
          }
        }
      },




      /**
       * @ngdoc function
       * @name groupingColumnProcessor
       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
       * @description Moves the columns around based on which are grouped
       *
       * @param {array} columns the columns to consider rendering
       * @param {array} rows the grid rows, which we don't use but are passed to us
       * @returns {array} updated columns array
       */
      groupingColumnProcessor: function( columns, rows ) {
        columns = service.moveGroupColumns(this, columns, rows);
        return columns;
      },

      /**
       * @ngdoc function
       * @name groupedFinalizerFn
       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
       * @description Used on group columns to display the rendered value and optionally
       * display the count of rows.
       *
       * @param {aggregation} aggregation The aggregation entity for a grouped column
       */
      groupedFinalizerFn: function( aggregation ) {
        var col = this;

        if ( typeof(aggregation.groupVal) !== 'undefined') {
          aggregation.rendered = aggregation.groupVal;
          if ( col.grid.options.groupingShowCounts && col.colDef.type !== 'date' && col.colDef.type !== 'object' ) {
            aggregation.rendered += (' (' + aggregation.value + ')');
          }
        } else {
          aggregation.rendered = null;
        }
      },

      /**
       * @ngdoc function
       * @name moveGroupColumns
       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
       * @description Moves the column order so that the grouped columns are lined up
       * to the left (well, unless you're RTL, then it's the right).  By doing this in
       * the columnsProcessor, we make it transient - when the column is ungrouped it'll
       * go back to where it was.
       *
       * Does nothing if the option `moveGroupColumns` is set to false.
       *
       * @param {Grid} grid grid object
       * @param {array} columns the columns that we should process/move
       * @returns {array} updated columns
       */
      moveGroupColumns: function( grid, columns ) {
        if ( grid.options.moveGroupColumns === false) {
          return columns;
        }

        columns.forEach(function(column, index) {
          // position used to make stable sort in moveGroupColumns
          column.groupingPosition = index;
        });

        columns.sort(function(a, b) {
          var a_group, b_group;

          if (a.isRowHeader) {
            a_group = a.headerPriority;
          }
          else if ( typeof(a.grouping) === 'undefined' || typeof(a.grouping.groupPriority) === 'undefined' || a.grouping.groupPriority < 0) {
            a_group = null;
          }
          else {
            a_group = a.grouping.groupPriority;
          }

          if (b.isRowHeader) {
            b_group = b.headerPriority;
          }
          else if ( typeof(b.grouping) === 'undefined' || typeof(b.grouping.groupPriority) === 'undefined' || b.grouping.groupPriority < 0) {
            b_group = null;
          }
          else {
            b_group = b.grouping.groupPriority;
          }

          // groups get sorted to the top
          if ( a_group !== null && b_group === null) { return -1; }
          if ( b_group !== null && a_group === null) { return 1; }
          if ( a_group !== null && b_group !== null) {return a_group - b_group; }

          return a.groupingPosition - b.groupingPosition;
        });

        columns.forEach( function(column) {
          delete column.groupingPosition;
        });

        return columns;
      },


      /**
       * @ngdoc function
       * @name groupColumn
       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
       * @description Adds this column to the existing grouping, at the end of the priority order.
       * If the column doesn't have a sort, adds one, by default ASC
       *
       * This column will move to the left of any non-group columns, the
       * move is handled in a columnProcessor, so gets called as part of refresh
       *
       * @param {Grid} grid grid object
       * @param {GridColumn} column the column we want to group
       */
      groupColumn: function( grid, column) {
        if ( typeof(column.grouping) === 'undefined' ) {
          column.grouping = {};
        }

        // set the group priority to the next number in the hierarchy
        var existingGrouping = service.getGrouping( grid );
        column.grouping.groupPriority = existingGrouping.grouping.length;

        // save sort in order to restore it when column is ungrouped
        column.previousSort = angular.copy(column.sort);

        // add sort if not present
        if ( !column.sort ) {
          column.sort = { direction: uiGridConstants.ASC };
        } else if ( typeof(column.sort.direction) === 'undefined' || column.sort.direction === null ) {
          column.sort.direction = uiGridConstants.ASC;
        }

        column.treeAggregation = { type: uiGridGroupingConstants.aggregation.COUNT, source: 'grouping' };

        if ( column.colDef && angular.isFunction(column.colDef.customTreeAggregationFn) ) {
          column.treeAggregationFn = column.colDef.customTreeAggregationFn;
        } else {
          column.treeAggregationFn = uiGridTreeBaseService.nativeAggregations()[uiGridGroupingConstants.aggregation.COUNT].aggregationFn;
        }

        column.treeAggregationFinalizerFn = service.groupedFinalizerFn;

        grid.api.grouping.raise.groupingChanged(column);
        // This indirectly calls service.tidyPriorities( grid );
        grid.api.core.raise.sortChanged(grid, grid.getColumnSorting());

        grid.queueGridRefresh();
      },


       /**
       * @ngdoc function
       * @name ungroupColumn
       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
       * @description Removes the groupPriority from this column.  If the
       * column was previously aggregated the aggregation will come back.
       * The sort will remain.
       *
       * This column will move to the right of any other group columns, the
       * move is handled in a columnProcessor, so gets called as part of refresh
       *
       * @param {Grid} grid grid object
       * @param {GridColumn} column the column we want to ungroup
       */
      ungroupColumn: function( grid, column) {
        if ( typeof(column.grouping) === 'undefined' ) {
          return;
        }

        delete column.grouping.groupPriority;
        delete column.treeAggregation;
        delete column.customTreeAggregationFinalizer;

        if (column.previousSort) {
          column.sort = column.previousSort;
          delete column.previousSort;
        }

        service.tidyPriorities( grid );

        grid.api.grouping.raise.groupingChanged(column);
        grid.api.core.raise.sortChanged(grid, grid.getColumnSorting());

        grid.queueGridRefresh();
      },

      /**
       * @ngdoc function
       * @name aggregateColumn
       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
       * @description Sets the aggregation type on a column, if the
       * column is currently grouped then it removes the grouping first.
       *
       * @param {Grid} grid grid object
       * @param {GridColumn} column the column we want to aggregate
       * @param {string} aggregationType of the recognised types from uiGridGroupingConstants or one of the custom aggregations from gridOptions
       */
      aggregateColumn: function( grid, column, aggregationType) {
        if (typeof(column.grouping) !== 'undefined' && typeof(column.grouping.groupPriority) !== 'undefined' && column.grouping.groupPriority >= 0) {
          service.ungroupColumn( grid, column );
        }

        var aggregationDef = {};

        if ( typeof(grid.options.treeCustomAggregations[aggregationType]) !== 'undefined' ) {
          aggregationDef = grid.options.treeCustomAggregations[aggregationType];
        } else if ( typeof(uiGridTreeBaseService.nativeAggregations()[aggregationType]) !== 'undefined' ) {
          aggregationDef = uiGridTreeBaseService.nativeAggregations()[aggregationType];
        }

        column.treeAggregation = { type: aggregationType, label:  i18nService.get().aggregation[aggregationDef.label] || aggregationDef.label };
        column.treeAggregationFn = aggregationDef.aggregationFn;
        column.treeAggregationFinalizerFn = aggregationDef.finalizerFn;

        grid.api.grouping.raise.aggregationChanged(column);

        grid.queueGridRefresh();
      },


      /**
       * @ngdoc function
       * @name setGrouping
       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
       * @description Set the grouping based on a config object, used by the save state feature
       * (more specifically, by the restore function in that feature )
       *
       * @param {Grid} grid grid object
       * @param {object} config the config we want to set, same format as that returned by getGrouping
       */
      setGrouping: function ( grid, config ) {
        if ( typeof(config) === 'undefined' ) {
          return;
        }

        // first remove any existing grouping
        service.clearGrouping(grid);

        if ( config.grouping && config.grouping.length && config.grouping.length > 0 ) {
          config.grouping.forEach( function( group ) {
            var col = grid.getColumn(group.colName);

            if ( col ) {
              service.groupColumn( grid, col );
            }
          });
        }

        if ( config.aggregations && config.aggregations.length ) {
          config.aggregations.forEach( function( aggregation ) {
            var col = grid.getColumn(aggregation.colName);

            if ( col ) {
              service.aggregateColumn( grid, col, aggregation.aggregation.type );
            }
          });
        }

        if ( config.rowExpandedStates ) {
          service.applyRowExpandedStates( grid.grouping.groupingHeaderCache, config.rowExpandedStates );
        }
      },


      /**
       * @ngdoc function
       * @name clearGrouping
       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
       * @description Clear any grouped columns and any aggregations.  Doesn't remove sorting,
       * as we don't know whether that sorting was added by grouping or was there beforehand
       *
       * @param {Grid} grid grid object
       */
      clearGrouping: function( grid ) {
        var currentGrouping = service.getGrouping(grid);

        if ( currentGrouping.grouping.length > 0 ) {
          currentGrouping.grouping.forEach( function( group ) {
            if (!group.col) {
              // should have a group.colName if there's no col
              group.col = grid.getColumn(group.colName);
            }
            service.ungroupColumn(grid, group.col);
          });
        }

        if ( currentGrouping.aggregations.length > 0 ) {
          currentGrouping.aggregations.forEach( function( aggregation ) {
            if (!aggregation.col) {
              // should have a group.colName if there's no col
              aggregation.col = grid.getColumn(aggregation.colName);
            }
            service.aggregateColumn(grid, aggregation.col, null);
          });
        }
      },


      /**
       * @ngdoc function
       * @name tidyPriorities
       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
       * @description Renumbers groupPriority and sortPriority such that
       * groupPriority is contiguous, and sortPriority either matches
       * groupPriority (for group columns), and otherwise is contiguous and
       * higher than groupPriority.
       *
       * @param {Grid} grid grid object
       */
      tidyPriorities: function( grid ) {
        // if we're called from sortChanged, grid is in this, not passed as param, the param can be a column or undefined
        if ( ( typeof(grid) === 'undefined' || typeof(grid.grid) !== 'undefined' ) && typeof(this.grid) !== 'undefined' ) {
          grid = this.grid;
        }

        var groupArray = [],
          sortArray = [];

        grid.columns.forEach( function(column, index) {
          if ( typeof(column.grouping) !== 'undefined' && typeof(column.grouping.groupPriority) !== 'undefined' && column.grouping.groupPriority >= 0) {
            groupArray.push(column);
          }
          else if ( typeof(column.sort) !== 'undefined' && typeof(column.sort.priority) !== 'undefined' && column.sort.priority >= 0) {
            sortArray.push(column);
          }
        });

        groupArray.sort(function(a, b) { return a.grouping.groupPriority - b.grouping.groupPriority; });
        groupArray.forEach( function(column, index) {
          column.grouping.groupPriority = index;
          column.suppressRemoveSort = true;
          if ( typeof(column.sort) === 'undefined') {
            column.sort = {};
          }
          column.sort.priority = index;
        });

        var i = groupArray.length;

        sortArray.sort(function(a, b) { return a.sort.priority - b.sort.priority; });
        sortArray.forEach(function(column) {
          column.sort.priority = i;
          column.suppressRemoveSort = column.colDef.suppressRemoveSort;
          i++;
        });
      },

      /**
       * @ngdoc function
       * @name groupRows
       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
       * @description The rowProcessor that creates the groupHeaders (i.e. does
       * the actual grouping).
       *
       * Assumes it is always called after the sorting processor, guaranteed by the priority setting
       *
       * Processes all the rows in order, inserting a groupHeader row whenever there is a change
       * in value of a grouped row, based on the sortAlgorithm used for the column.  The group header row
       * is looked up in the groupHeaderCache, and used from there if there is one. The entity is reset
       * to {} if one is found.
       *
       * As it processes it maintains a `processingState` array. This records, for each level of grouping we're
       * working with, the following information:
       * ```
       *   {
       *     fieldName: name,
       *     col: col,
       *     initialised: boolean,
       *     currentValue: value,
       *     currentRow: gridRow,
       *   }
       * ```
       * We look for changes in the currentValue at any of the levels.  Where we find a change we:
       *
       * - create a new groupHeader row in the array
       *
       * @param {array} renderableRows the rows we want to process, usually the output from the previous rowProcessor
       * @returns {array} the updated rows, including our new group rows
       */
      groupRows: function( renderableRows ) {
        if (renderableRows.length === 0) {
          return renderableRows;
        }

        var grid = this;
        grid.grouping.oldGroupingHeaderCache = grid.grouping.groupingHeaderCache || {};
        grid.grouping.groupingHeaderCache = {};

        var processingState = service.initialiseProcessingState( grid );

        // processes each of the fields we are grouping by, checks if the value has changed and inserts a groupHeader
        // Broken out as shouldn't create functions in a loop.
        var updateProcessingState = function( groupFieldState, stateIndex ) {
          var fieldValue = grid.getCellValue(row, groupFieldState.col);

          // look for change of value - and insert a header
          if ( !groupFieldState.initialised || rowSorter.getSortFn(grid, groupFieldState.col, renderableRows)(fieldValue, groupFieldState.currentValue) !== 0 ) {
            service.insertGroupHeader( grid, renderableRows, i, processingState, stateIndex );
            i++;
          }
        };

        // use a for loop because it's tolerant of the array length changing whilst we go - we can
        // manipulate the iterator when we insert groupHeader rows
        for (var i = 0; i < renderableRows.length; i++ ) {
          var row = renderableRows[i];

          if ( row.visible ) {
            processingState.forEach( updateProcessingState );
          }
        }

        delete grid.grouping.oldGroupingHeaderCache;
        return renderableRows;
      },


      /**
       * @ngdoc function
       * @name initialiseProcessingState
       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
       * @description Creates the processing state array that is used
       * for groupRows.
       *
       * @param {Grid} grid grid object
       * @returns {array} an array in the format described in the groupRows method,
       * initialised with blank values
       */
      initialiseProcessingState: function( grid ) {
        var processingState = [];
        var columnSettings = service.getGrouping( grid );

        columnSettings.grouping.forEach( function( groupItem, index) {
          processingState.push({
            fieldName: groupItem.field,
            col: groupItem.col,
            initialised: false,
            currentValue: null,
            currentRow: null
          });
        });

        return processingState;
      },


      /**
       * @ngdoc function
       * @name getGrouping
       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
       * @description Get the grouping settings from the columns.  As a side effect
       * this always renumbers the grouping starting at 0
       * @param {Grid} grid grid object
       * @returns {array} an array of the group fields, in order of priority
       */
      getGrouping: function( grid ) {
        var groupArray = [],
          aggregateArray = [];

        // get all the grouping
        grid.columns.forEach(function(column) {
          if ( column.grouping ) {
            if ( typeof(column.grouping.groupPriority) !== 'undefined' && column.grouping.groupPriority >= 0) {
              groupArray.push({ field: column.field, col: column, groupPriority: column.grouping.groupPriority, grouping: column.grouping });
            }
          }
          if ( column.treeAggregation && column.treeAggregation.type ) {
            aggregateArray.push({ field: column.field, col: column, aggregation: column.treeAggregation });
          }
        });

        // sort grouping into priority order
        groupArray.sort( function(a, b) {
          return a.groupPriority - b.groupPriority;
        });

        // renumber the priority in case it was somewhat messed up, then remove the grouping reference
        groupArray.forEach( function( group, index) {
          group.grouping.groupPriority = index;
          group.groupPriority = index;
          delete group.grouping;
        });

        return { grouping: groupArray, aggregations: aggregateArray };
      },


      /**
       * @ngdoc function
       * @name insertGroupHeader
       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
       * @description Create a group header row, and link it to the various configuration
       * items that we use.
       *
       * Look for the row in the oldGroupingHeaderCache, write the row into the new groupingHeaderCache.
       *
       * @param {Grid} grid grid object
       * @param {array} renderableRows the rows that we are processing
       * @param {number} rowIndex the row we were up to processing
       * @param {array} processingState the current processing state
       * @param {number} stateIndex the processing state item that we were on when we triggered a new group header -
       * i.e. the column that we want to create a header for
       */
      insertGroupHeader: function( grid, renderableRows, rowIndex, processingState, stateIndex ) {
        // set the value that caused the end of a group into the header row and the processing state
        var col = processingState[stateIndex].col,
          newValue = grid.getCellValue(renderableRows[rowIndex], col),
          newDisplayValue = newValue;

        if ( typeof(newValue) === 'undefined' || newValue === null ) {
          newDisplayValue = grid.options.groupingNullLabel;
        }

        function getKeyAsValueForCacheMap(key) {
          return angular.isObject(key) ? JSON.stringify(key) : key;
        }

        var cacheItem = grid.grouping.oldGroupingHeaderCache;

        for ( var i = 0; i < stateIndex; i++ ) {
          if ( cacheItem && cacheItem[getKeyAsValueForCacheMap(processingState[i].currentValue)] ) {
            cacheItem = cacheItem[getKeyAsValueForCacheMap(processingState[i].currentValue)].children;
          }
        }

        var headerRow;

        if ( cacheItem && cacheItem[getKeyAsValueForCacheMap(newValue)]) {
          headerRow = cacheItem[getKeyAsValueForCacheMap(newValue)].row;
          headerRow.entity = {};
        } else {
          headerRow = new GridRow( {}, null, grid );
          gridClassFactory.rowTemplateAssigner.call(grid, headerRow);
        }

        headerRow.entity['$$' + processingState[stateIndex].col.uid] = { groupVal: newDisplayValue };
        headerRow.treeLevel = stateIndex;
        headerRow.groupHeader = true;
        headerRow.internalRow = true;
        headerRow.enableCellEdit = false;
        headerRow.enableSelection = grid.options.enableGroupHeaderSelection;
        processingState[stateIndex].initialised = true;
        processingState[stateIndex].currentValue = newValue;
        processingState[stateIndex].currentRow = headerRow;

        // set all processing states below this one to not be initialised - change of this state
        // means all those need to start again
        service.finaliseProcessingState( processingState, stateIndex + 1);

        // insert our new header row
        renderableRows.splice(rowIndex, 0, headerRow);

        // add our new header row to the cache
        cacheItem = grid.grouping.groupingHeaderCache;
        for ( i = 0; i < stateIndex; i++ ) {
          cacheItem = cacheItem[getKeyAsValueForCacheMap(processingState[i].currentValue)].children;
        }
        cacheItem[getKeyAsValueForCacheMap(newValue)] = { row: headerRow, children: {} };
      },


      /**
       * @ngdoc function
       * @name finaliseProcessingState
       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
       * @description Set all processing states lower than the one that had a break in value to
       * no longer be initialised.  Render the counts into the entity ready for display.
       *
       * @param {array} processingState the current processing state
       * @param {number} stateIndex the processing state item that we were on when we triggered a new group header, all
       * processing states after this need to be finalised
       */
      finaliseProcessingState: function( processingState, stateIndex ) {
        for ( var i = stateIndex; i < processingState.length; i++) {
          processingState[i].initialised = false;
          processingState[i].currentRow = null;
          processingState[i].currentValue = null;
        }
      },


      /**
       * @ngdoc function
       * @name getRowExpandedStates
       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
       * @description Extract the groupHeaderCache hash, pulling out only the states.
       *
       * The example below shows a grid that is grouped by gender then age
       *
       * <pre>
       *   {
       *     male: {
       *       state: 'expanded',
       *       children: {
       *         22: { state: 'expanded' },
       *         30: { state: 'collapsed' }
       *       }
       *     },
       *     female: {
       *       state: 'expanded',
       *       children: {
       *         28: { state: 'expanded' },
       *         55: { state: 'collapsed' }
       *       }
       *     }
       *   }
       * </pre>
       *
       * @param {object} treeChildren The tree children elements object
       * @returns {object} the expanded states as an object
       */
      getRowExpandedStates: function(treeChildren) {
        if ( typeof(treeChildren) === 'undefined' ) {
          return {};
        }

        var newChildren = {};

        angular.forEach( treeChildren, function( value, key ) {
          newChildren[key] = { state: value.row.treeNode.state };
          if ( value.children ) {
            newChildren[key].children = service.getRowExpandedStates( value.children );
          } else {
            newChildren[key].children = {};
          }
        });

        return newChildren;
      },


      /**
       * @ngdoc function
       * @name applyRowExpandedStates
       * @methodOf  ui.grid.grouping.service:uiGridGroupingService
       * @description Take a hash in the format as created by getRowExpandedStates,
       * and apply it to the grid.grouping.groupHeaderCache.
       *
       * Takes a treeSubset, and applies to a treeSubset - so can be called
       * recursively.
       *
       * @param {object} currentNode can be grid.grouping.groupHeaderCache, or any of
       * the children of that hash
       * @param {object} expandedStates can be the full expanded states, or children
       * of that expanded states (which hopefully matches the subset of the groupHeaderCache)
       */
      applyRowExpandedStates: function( currentNode, expandedStates ) {
        if ( typeof(expandedStates) === 'undefined' ) {
          return;
        }

        angular.forEach(expandedStates, function( value, key ) {
          if ( currentNode[key] ) {
            currentNode[key].row.treeNode.state = value.state;

            if (value.children && currentNode[key].children) {
              service.applyRowExpandedStates( currentNode[key].children, value.children );
            }
          }
        });
      }


    };

    return service;

  }]);


  /**
   *  @ngdoc directive
   *  @name ui.grid.grouping.directive:uiGridGrouping
   *  @element div
   *  @restrict A
   *
   *  @description Adds grouping features to grid
   *
   *  @example
   <example module="app">
   <file name="app.js">
   var app = angular.module('app', ['ui.grid', 'ui.grid.grouping']);

   app.controller('MainCtrl', ['$scope', function ($scope) {
      $scope.data = [
        { name: 'Bob', title: 'CEO' },
            { name: 'Frank', title: 'Lowly Developer' }
      ];

      $scope.columnDefs = [
        {name: 'name', enableCellEdit: true},
        {name: 'title', enableCellEdit: true}
      ];

      $scope.gridOptions = { columnDefs: $scope.columnDefs, data: $scope.data };
    }]);
   </file>
   <file name="index.html">
   <div ng-controller="MainCtrl">
   <div ui-grid="gridOptions" ui-grid-grouping></div>
   </div>
   </file>
   </example>
   */
  module.directive('uiGridGrouping', ['uiGridGroupingConstants', 'uiGridGroupingService',
  function (uiGridGroupingConstants, uiGridGroupingService) {
    return {
      replace: true,
      priority: 0,
      require: '^uiGrid',
      scope: false,
      compile: function () {
        return {
          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
            if (uiGridCtrl.grid.options.enableGrouping !== false) {
              uiGridGroupingService.initializeGrid(uiGridCtrl.grid, $scope);
            }
          },
          post: function ($scope, $elm, $attrs, uiGridCtrl) {
          }
        };
      }
    };
  }]);

})();

(function() {
	angular.module('ui.grid').config(['$provide', function($provide) {
		$provide.decorator('i18nService', ['$delegate', function($delegate) {
			$delegate.add('ar', {
				"headerCell": {
					"aria": {
						"defaultFilterLabel": "التصفيه بالعمود",
						"removeFilter": "محو التصفيه",
						"columnMenuButtonLabel": "قاءمه الاعمده"
					},
					"priority": "أولويه : ",
					"filterLabel": "تصفيه بالاعمده :"
				},
				"aggregate": {
					"label": "العناصر"
				},
				"groupPanel": {
					"description": "اسحب رأس العمود هنا وأسقطه لإنشاء مجموعه"
				},
				"search": {
					"placeholder": "بحث  ...",
					"showingItems": "العناصر الظاهره :",
					"selectedItems": "العناصر المحدده :",
					"totalItems": "عدد العناصر :",
					"size": "حجم الصفحه :",
					"first": "اول صفحه",
					"next": "الصفحه التاليه",
					"previous": "الصفحه الصابقه",
					"last": "الصفحه الاخيره"
				},
				"menu": {
					"text": "اختيار العمود :"
				},
				"sort": {
					"ascending": "ترتيب تصاعدى",
					"descending": "ترتيب تنازلى",
					"none": "عدم التحديد",
					"remove": "حذف الترتيب"
				},
				"column": {
					"hide": "إخفاء عمود"
				},
				"aggregation": {
					"count": "عدد الصفوف: ",
					"sum": "جمع: ",
					"avg": "المتوسط الحسابى: ",
					"min": "الادنى: ",
					"max": "الاقصى: "
				},
				"pinning": {
					"pinLeft": "تثبيت لليسار",
					"pinRight": "تثبيت لليمين",
					"unpin": "فك التثبيت"
				},
				"columnMenu": {
					"close": "غلق"
				},
				"gridMenu": {
					"aria": {
						"buttonLabel": "قائمه الجدول"
					},
					"columns": "الاعمده:",
					"importerTitle": "إدخال ملف",
					"exporterAllAsCsv": "إخراج كل البيانات ك(csv)",
					"exporterVisibleAsCsv": "إخراج كل البيانات الواضحه ك (csv)",
					"exporterSelectedAsCsv": "إخراج كل البيانات المحدده ك (csv)",
					"exporterAllAsPdf": "إخراج كل البيانات ك(pdf)",
					"exporterVisibleAsPdf": "إخراج كل البيانات الواضحه ك (pdf)",
					"exporterSelectedAsPdf": "إخراج كل البيانات المحدده ك (pdf)",
					"clearAllFilters": "محو كل الترشيح"
				},
				"importer": {
					"noHeaders": "اسماء هؤلاء الاعمده غير واضحه، هل يوجد رأس للملف؟",
					"noObjects": "Objects were not able to be derived, was there data in the file other than headers?",
					"invalidCsv": "الملف غير قادر على الاتمام ، هل ال (CSV) صحيح؟",
					"invalidJson": "الملف غير قادر على الاتمام ، هل ال (JSON) صحيح؟",
					"jsonNotArray": "Imported json file must contain an array, aborting."
				},
				"pagination": {
					"aria": {
						"pageToFirst": "الصفحه الاولى",
						"pageBack": "الصفه السابقه",
						"pageSelected": "الصفحه المحدده",
						"pageForward": "الصفحه التاليه",
						"pageToLast": "الصفحه الاخيره"
					},
					"sizes": "عدد العناصر فى الصفحه",
					"totalItems": "عناصر",
					"through": "إلى",
					"of": "من"
				},
				"grouping": {
					"group": "جمع",
					"ungroup": "فك الجمع",
					"aggregate_count": "جمله : العدد",
					"aggregate_sum": "جمله : الحاصل",
					"aggregate_max": "جمله : الاقصى",
					"aggregate_min": "جمله : الاقل",
					"aggregate_avg": "جمله :المتوسط ",
					"aggregate_remove": "جمله : حذف"
				},
				"validate": {
					"error": "خطأ :",
					"minLength": "القيمه لابد ان لا تقل عن THRESHOLD حرف.",
					"maxLength": "القيمه لابد ان لا تزيد عن THRESHOLD حرف.",
					"required": "مطلوب قيمه"
				}
			});
			return $delegate;
		}]);
	}]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('bg', {
        headerCell: {
          aria: {
            defaultFilterLabel: 'Филттър за колоната',
            removeFilter: 'Премахни филтър',
            columnMenuButtonLabel: 'Меню на колоната'
          },
          priority: 'Приоритет:',
          filterLabel: "Филтър за колоната: "
        },
        aggregate: {
          label: 'обекти'
        },
        search: {
          placeholder: 'Търсене...',
          showingItems: 'Показани обекти:',
          selectedItems: 'избрани обекти:',
          totalItems: 'Общо:',
          size: 'Размер на страницата:',
          first: 'Първа страница',
          next: 'Следваща страница',
          previous: 'Предишна страница',
          last: 'Последна страница'
        },
        menu: {
          text: 'Избери колони:'
        },
        sort: {
          ascending: 'Сортиране по възходящ ред',
          descending: 'Сортиране по низходящ ред',
          none: 'Без сортиране',
          remove: 'Премахни сортирането'
        },
        column: {
          hide: 'Скрий колоната'
        },
        aggregation: {
          count: 'Общо редове: ',
          sum: 'общо: ',
          avg: 'средно: ',
          min: 'най-малко: ',
          max: 'най-много: '
        },
        pinning: {
          pinLeft: 'Прикрепи вляво',
          pinRight: 'Прикрепи вдясно',
          unpin: 'Премахване'
        },
        columnMenu: {
          close: 'Затвори'
        },
        gridMenu: {
          aria: {
            buttonLabel: 'Меню на таблицата'
          },
          columns: 'Колони:',
          importerTitle: 'Импортиране на файл',
          exporterAllAsCsv: 'Експортиране на данните като csv',
          exporterVisibleAsCsv: 'Експортиране на видимите данни като csv',
          exporterSelectedAsCsv: 'Експортиране на избраните данни като csv',
          exporterAllAsPdf: 'Експортиране на данните като pdf',
          exporterVisibleAsPdf: 'Експортиране на видимите данни като pdf',
          exporterSelectedAsPdf: 'Експортиране на избраните данни като pdf',
          clearAllFilters: 'Премахни всички филтри'
        },
        importer: {
          noHeaders: 'Имената на колоните не успяха да бъдат извлечени, файлът има ли хедър?',
          noObjects: 'Обектите не успяха да бъдат извлечени, файлът съдържа ли данни, различни от хедър?',
          invalidCsv: 'Файлът не може да бъде обработеб, уверете се, че е валиден CSV файл',
          invalidJson: 'Файлът не може да бъде обработеб, уверете се, че е валиден JSON файл',
          jsonNotArray: 'Импортираният JSON файл трябва да съдържа масив, прекратяване.'
        },
        pagination: {
          aria: {
            pageToFirst: 'Към първа страница',
            pageBack: 'Страница назад',
            pageSelected: 'Избрана страница',
            pageForward: 'Страница напред',
            pageToLast: 'Към последна страница'
          },
          sizes: 'обекта на страница',
          totalItems: 'обекта',
          through: 'до',
          of: 'от'
        },
        grouping: {
          group: 'Групиране',
          ungroup: 'Премахване на групирането',
          aggregate_count: 'Сбор: Брой',
          aggregate_sum: 'Сбор: Сума',
          aggregate_max: 'Сбор: Максимум',
          aggregate_min: 'Сбор: Минимум',
          aggregate_avg: 'Сбор: Средно',
          aggregate_remove: 'Сбор: Премахване'
        },
        validate: {
          error: 'Грешка:',
          minLength: 'Стойността трябва да съдържа поне THRESHOLD символа.',
          maxLength: 'Стойността не трябва да съдържа повече от THRESHOLD символа.',
          required: 'Необходима е стойност.'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      var lang = {
              aggregate: {
                  label: 'položky'
              },
              groupPanel: {
                  description: 'Přesuňte záhlaví zde pro vytvoření skupiny dle sloupce.'
              },
              search: {
                  placeholder: 'Hledat...',
                  showingItems: 'Zobrazuji položky:',
                  selectedItems: 'Vybrané položky:',
                  totalItems: 'Celkem položek:',
                  size: 'Velikost strany:',
                  first: 'První strana',
                  next: 'Další strana',
                  previous: 'Předchozí strana',
                  last: 'Poslední strana'
              },
              menu: {
                  text: 'Vyberte sloupec:'
              },
              sort: {
                  ascending: 'Seřadit od A-Z',
                  descending: 'Seřadit od Z-A',
                  remove: 'Odebrat seřazení'
              },
              column: {
                  hide: 'Schovat sloupec'
              },
              aggregation: {
                  count: 'celkem řádků: ',
                  sum: 'celkem: ',
                  avg: 'avg: ',
                  min: 'min.: ',
                  max: 'max.: '
              },
              pinning: {
                  pinLeft: 'Zamknout vlevo',
                  pinRight: 'Zamknout vpravo',
                  unpin: 'Odemknout'
              },
              gridMenu: {
                  columns: 'Sloupce:',
                  importerTitle: 'Importovat soubor',
                  exporterAllAsCsv: 'Exportovat všechna data do csv',
                  exporterVisibleAsCsv: 'Exportovat viditelná data do csv',
                  exporterSelectedAsCsv: 'Exportovat vybraná data do csv',
                  exporterAllAsPdf: 'Exportovat všechna data do pdf',
                  exporterVisibleAsPdf: 'Exportovat viditelná data do pdf',
                  exporterSelectedAsPdf: 'Exportovat vybraná data do pdf',
                  exporterAllAsExcel: 'Exportovat všechna data do excel',
                  exporterVisibleAsExcel: 'Exportovat viditelná data do excel',
                  exporterSelectedAsExcel: 'Exportovat vybraná data do excel',
                  clearAllFilters: 'Odstranit všechny filtry'
              },
              importer: {
                  noHeaders: 'Názvy sloupců se nepodařilo získat, obsahuje soubor záhlaví?',
                  noObjects: 'Data se nepodařilo zpracovat, obsahuje soubor řádky mimo záhlaví?',
                  invalidCsv: 'Soubor nelze zpracovat, jedná se o CSV?',
                  invalidJson: 'Soubor nelze zpracovat, je to JSON?',
                  jsonNotArray: 'Soubor musí obsahovat json. Ukončuji..'
              },
              pagination: {
                  sizes: 'položek na stránku',
                  totalItems: 'položek'
              },
              grouping: {
                  group: 'Seskupit',
                  ungroup: 'Odebrat seskupení',
                  aggregate_count: 'Agregace: Count',
                  aggregate_sum: 'Agregace: Sum',
                  aggregate_max: 'Agregace: Max',
                  aggregate_min: 'Agregace: Min',
                  aggregate_avg: 'Agregace: Avg',
                  aggregate_remove: 'Agregace: Odebrat'
              }
          };

          // support varianty of different czech keys.
          $delegate.add('cs', lang);
          $delegate.add('cz', lang);
          $delegate.add('cs-cz', lang);
          $delegate.add('cs-CZ', lang);
      return $delegate;
    }]);
  }]);
})();

(function() {
	angular.module('ui.grid').config(['$provide', function($provide) {
		$provide.decorator('i18nService', ['$delegate', function($delegate) {
			$delegate.add('da', {
				aggregate: {
					label: 'artikler'
				},
				groupPanel: {
					description: 'Grupér rækker udfra en kolonne ved at trække dens overskift hertil.'
				},
				search: {
					placeholder: 'Søg...',
					showingItems: 'Viste rækker:',
					selectedItems: 'Valgte rækker:',
					totalItems: 'Rækker totalt:',
					size: 'Side størrelse:',
					first: 'Første side',
					next: 'Næste side',
					previous: 'Forrige side',
					last: 'Sidste side'
				},
				menu: {
					text: 'Vælg kolonner:'
				},
				sort: {
					ascending: 'Sorter stigende',
					descending: 'Sorter faldende',
					none: 'Sorter ingen',
					remove: 'Fjern sortering'
				},
				column: {
					hide: 'Skjul kolonne'
				},
				aggregation: {
					count: 'antal rækker: ',
					sum: 'sum: ',
					avg: 'gns: ',
					min: 'min: ',
					max: 'max: '
				},
				pinning: {
					pinLeft: 'Fastgør til venstre',
					pinRight: 'Fastgør til højre',
					unpin: 'Frigør'
				},
				gridMenu: {
					columns: 'Kolonner:',
					importerTitle: 'Importer fil',
					exporterAllAsCsv: 'Eksporter alle data som csv',
					exporterVisibleAsCsv: 'Eksporter synlige data som csv',
					exporterSelectedAsCsv: 'Eksporter markerede data som csv',
					exporterAllAsPdf: 'Eksporter alle data som pdf',
					exporterVisibleAsPdf: 'Eksporter synlige data som pdf',
					exporterSelectedAsPdf: 'Eksporter markerede data som pdf',
					exporterAllAsExcel: 'Eksporter alle data som excel',
					exporterVisibleAsExcel: 'Eksporter synlige data som excel',
					exporterSelectedAsExcel: 'Eksporter markerede data som excel',
					clearAllFilters: 'Clear all filters'
				},
				importer: {
					noHeaders: 'Column names were unable to be derived, does the file have a header?',
					noObjects: 'Objects were not able to be derived, was there data in the file other than headers?',
					invalidCsv: 'File was unable to be processed, is it valid CSV?',
					invalidJson: 'File was unable to be processed, is it valid Json?',
					jsonNotArray: 'Imported json file must contain an array, aborting.'
				},
				pagination: {
					aria: {
						pageToFirst: 'Gå til første',
						pageBack: 'Gå tilbage',
						pageSelected: 'Valgte side',
						pageForward: 'Gå frem',
						pageToLast: 'Gå til sidste'
					},
					sizes: 'genstande per side',
					totalItems: 'genstande',
					through: 'gennem',
					of: 'af'
				}
			});
			return $delegate;
		}]);
	}]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function ($provide) {
    $provide.decorator('i18nService', ['$delegate', function ($delegate) {
      $delegate.add('de', {
        headerCell: {
          aria: {
            defaultFilterLabel: 'Filter für Spalte',
            removeFilter: 'Filter löschen',
            columnMenuButtonLabel: 'Spaltenmenü',
            column: 'Spalte'
          },
          priority: 'Priorität:',
          filterLabel: "Filter für Spalte: "
        },
        aggregate: {
          label: 'Eintrag'
        },
        groupPanel: {
          description: 'Ziehen Sie eine Spaltenüberschrift hierhin, um nach dieser Spalte zu gruppieren.'
        },
        search: {
          aria: {
            selected: 'Zeile markiert',
            notSelected: 'Zeile nicht markiert'
          },
          placeholder: 'Suche...',
          showingItems: 'Zeige Einträge:',
          selectedItems: 'Ausgewählte Einträge:',
          totalItems: 'Einträge gesamt:',
          size: 'Einträge pro Seite:',
          first: 'Erste Seite',
          next: 'Nächste Seite',
          previous: 'Vorherige Seite',
          last: 'Letzte Seite'
        },
        menu: {
          text: 'Spalten auswählen:'
        },
        sort: {
          ascending: 'aufsteigend sortieren',
          descending: 'absteigend sortieren',
          none: 'keine Sortierung',
          remove: 'Sortierung zurücksetzen'
        },
        column: {
          hide: 'Spalte ausblenden'
        },
        aggregation: {
          count: 'Zeilen insgesamt: ',
          sum: 'gesamt: ',
          avg: 'Durchschnitt: ',
          min: 'min: ',
          max: 'max: '
        },
        pinning: {
            pinLeft: 'Links anheften',
            pinRight: 'Rechts anheften',
            unpin: 'Lösen'
        },
        columnMenu: {
          close: 'Schließen'
        },
        gridMenu: {
          aria: {
            buttonLabel: 'Tabellenmenü'
          },
          columns: 'Spalten:',
          importerTitle: 'Datei importieren',
          exporterAllAsCsv: 'Alle Daten als CSV exportieren',
          exporterVisibleAsCsv: 'Sichtbare Daten als CSV exportieren',
          exporterSelectedAsCsv: 'Markierte Daten als CSV exportieren',
          exporterAllAsPdf: 'Alle Daten als PDF exportieren',
          exporterVisibleAsPdf: 'Sichtbare Daten als PDF exportieren',
          exporterSelectedAsPdf: 'Markierte Daten als PDF exportieren',
          exporterAllAsExcel: 'Alle Daten als Excel exportieren',
          exporterVisibleAsExcel: 'Sichtbare Daten als Excel exportieren',
          exporterSelectedAsExcel: 'Markierte Daten als Excel exportieren',
          clearAllFilters: 'Alle Filter zurücksetzen'
        },
        importer: {
          noHeaders: 'Es konnten keine Spaltennamen ermittelt werden. Sind in der Datei Spaltendefinitionen enthalten?',
          noObjects: 'Es konnten keine Zeileninformationen gelesen werden, Sind in der Datei außer den Spaltendefinitionen auch Daten enthalten?',
          invalidCsv: 'Die Datei konnte nicht eingelesen werden, ist es eine gültige CSV-Datei?',
          invalidJson: 'Die Datei konnte nicht eingelesen werden. Enthält sie gültiges JSON?',
          jsonNotArray: 'Die importierte JSON-Datei muß ein Array enthalten. Breche Import ab.'
        },
        pagination: {
          aria: {
            pageToFirst: 'Zum Anfang',
            pageBack: 'Seite zurück',
            pageSelected: 'Ausgewählte Seite',
            pageForward: 'Seite vor',
            pageToLast: 'Zum Ende'
          },
          sizes: 'Einträge pro Seite',
          totalItems: 'Einträgen',
          through: 'bis',
          of: 'von'
        },
        grouping: {
            group: 'Gruppieren',
            ungroup: 'Gruppierung aufheben',
            aggregate_count: 'Agg: Anzahl',
            aggregate_sum: 'Agg: Summe',
            aggregate_max: 'Agg: Maximum',
            aggregate_min: 'Agg: Minimum',
            aggregate_avg: 'Agg: Mittelwert',
            aggregate_remove: 'Aggregation entfernen'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('es-ct', {
        headerCell: {
          aria: {
            defaultFilterLabel: 'Filtre per columna',
            removeFilter: 'Elimina el filtre',
            columnMenuButtonLabel: 'Menú de Columna',
            column: 'Columna'
          },
          priority: 'Priority:',
          filterLabel: 'Filtre per columna: '
        },
        aggregate: {
          label: 'items'
        },
        groupPanel: {
          description: 'Arrossegueu una capçalera de columna aquí i deixeu-lo anar per agrupar per aquesta columna.'
        },
        search: {
          aria: {
            selected: 'Fila seleccionada',
            notSelected: 'Fila no seleccionada'
          },
          placeholder: 'Cerca...',
          showingItems: 'Ítems Mostrats:',
          selectedItems: 'Ítems Seleccionats:',
          totalItems: 'Ítems Totals:',
          size: 'Mida de la pàgina:',
          first: 'Primera Pàgina',
          next: 'Propera Pàgina',
          previous: 'Pàgina Anterior',
          last: 'Última Pàgina'
        },
        menu: {
          text: 'Triar Columnes:'
        },
        sort: {
          ascending: 'Ordena Ascendent',
          descending: 'Ordena Descendent',
          none: 'Sense Ordre',
          remove: 'Eliminar Ordre'
        },
        column: {
          hide: 'Amaga la Columna'
        },
        aggregation: {
          count: 'Files Totals: ',
          sum: 'total: ',
          avg: 'mitjà: ',
          min: 'mín: ',
          max: 'màx: '
        },
        pinning: {
          pinLeft: "Fixar a l'Esquerra",
          pinRight: 'Fixar a la Dreta',
          unpin: 'Treure Fixació'
        },
        columnMenu: {
          close: 'Tanca'
        },
        gridMenu: {
          aria: {
            buttonLabel: 'Menú de Quadrícula'
          },
          columns: 'Columnes:',
          importerTitle: 'Importa el fitxer',
          exporterAllAsCsv: 'Exporta tot com CSV',
          exporterVisibleAsCsv: 'Exporta les dades visibles com a CSV',
          exporterSelectedAsCsv: 'Exporta les dades seleccionades com a CSV',
          exporterAllAsPdf: 'Exporta tot com PDF',
          exporterVisibleAsPdf: 'Exporta les dades visibles com a PDF',
          exporterSelectedAsPdf: 'Exporta les dades seleccionades com a PDF',
          exporterAllAsExcel: 'Exporta tot com Excel',
          exporterVisibleAsExcel: 'Exporta les dades visibles com Excel',
          exporterSelectedAsExcel: 'Exporta les dades seleccionades com Excel',
          clearAllFilters: 'Netejar tots els filtres'
        },
        importer: {
          noHeaders: "No va ser possible derivar els noms de les columnes, té encapçalats l'arxiu?",
          noObjects: "No va ser possible obtenir registres, conté dades l'arxiu, a part de les capçaleres?",
          invalidCsv: "No va ser possible processar l'arxiu, ¿és un CSV vàlid?",
          invalidJson: "No va ser possible processar l'arxiu, ¿és un JSON vàlid?",
          jsonNotArray: 'El fitxer json importat ha de contenir una matriu, avortant.'
        },
        pagination: {
          aria: {
            pageToFirst: 'Page to first',
            pageBack: 'Page back',
            pageSelected: 'Selected page',
            pageForward: 'Page forward',
            pageToLast: 'Page to last'
          },
          sizes: 'ítems per pàgina',
          totalItems: 'ítems',
          through: 'a',
          of: 'de'
        },
        grouping: {
          group: 'Agrupar',
          ungroup: 'Desagrupar',
          aggregate_count: 'Agr: Compte',
          aggregate_sum: 'Agr: Sum',
          aggregate_max: 'Agr: Máx',
          aggregate_min: 'Agr: Mín',
          aggregate_avg: 'Agr: Mitjà',
          aggregate_remove: 'Agr: Treure'
        },
        validate: {
          error: 'Error:',
          minLength: 'El valor ha de tenir almenys caràcters THRESHOLD.',
          maxLength: 'El valor ha de tenir com a màxim caràcters THRESHOLD.',
          required: 'Un valor és necessari.'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('es', {
        aggregate: {
          label: 'Artículos'
        },
        groupPanel: {
          description: 'Arrastre un encabezado de columna aquí y suéltelo para agrupar por esa columna.'
        },
        search: {
          placeholder: 'Buscar...',
          showingItems: 'Artículos Mostrados:',
          selectedItems: 'Artículos Seleccionados:',
          totalItems: 'Artículos Totales:',
          size: 'Tamaño de Página:',
          first: 'Primera Página',
          next: 'Página Siguiente',
          previous: 'Página Anterior',
          last: 'Última Página'
        },
        menu: {
          text: 'Elegir columnas:'
        },
        sort: {
          ascending: 'Orden Ascendente',
          descending: 'Orden Descendente',
          remove: 'Sin Ordenar'
        },
        column: {
          hide: 'Ocultar la columna'
        },
        aggregation: {
          count: 'filas totales: ',
          sum: 'total: ',
          avg: 'media: ',
          min: 'min: ',
          max: 'max: '
        },
        pinning: {
          pinLeft: 'Fijar a la Izquierda',
          pinRight: 'Fijar a la Derecha',
          unpin: 'Quitar Fijación'
        },
        gridMenu: {
          columns: 'Columnas:',
          importerTitle: 'Importar archivo',
          exporterAllAsCsv: 'Exportar todo como csv',
          exporterVisibleAsCsv: 'Exportar vista como csv',
          exporterSelectedAsCsv: 'Exportar selección como csv',
          exporterAllAsPdf: 'Exportar todo como pdf',
          exporterVisibleAsPdf: 'Exportar vista como pdf',
          exporterSelectedAsPdf: 'Exportar selección como pdf',
          exporterAllAsExcel: 'Exportar todo como excel',
          exporterVisibleAsExcel: 'Exportar vista como excel',
          exporterSelectedAsExcel: 'Exportar selección como excel',
          clearAllFilters: 'Limpiar todos los filtros'
        },
        importer: {
          noHeaders: 'No fue posible derivar los nombres de las columnas, ¿tiene encabezados el archivo?',
          noObjects: 'No fue posible obtener registros, ¿contiene datos el archivo, aparte de los encabezados?',
          invalidCsv: 'No fue posible procesar el archivo, ¿es un CSV válido?',
          invalidJson: 'No fue posible procesar el archivo, ¿es un Json válido?',
          jsonNotArray: 'El archivo json importado debe contener un array, abortando.'
        },
        pagination: {
          aria: {
										pageToFirst: 'Página para primero',
										pageBack: 'Página atrás',
										pageSelected: 'Página seleccionada',
										pageForward: 'Avance de página',
										pageToLast: 'Página para durar'
									},
          through: 'mediante',
          sizes: 'registros por página',
          totalItems: 'registros',
          of: 'de'
        },
        grouping: {
          group: 'Agrupar',
          ungroup: 'Desagrupar',
          aggregate_count: 'Agr: Cont',
          aggregate_sum: 'Agr: Sum',
          aggregate_max: 'Agr: Máx',
          aggregate_min: 'Agr: Min',
          aggregate_avg: 'Agr: Prom',
          aggregate_remove: 'Agr: Quitar'
        }
      });
      return $delegate;
    }]);
}]);
})();

/**
 * Translated by: R. Salarmehr
 *                M. Hosseynzade
 *                Using Vajje.com online dictionary.
 */
(function () {
  angular.module('ui.grid').config(['$provide', function ($provide) {
    $provide.decorator('i18nService', ['$delegate', function ($delegate) {
      $delegate.add('fa', {
        aggregate: {
          label: 'قلم'
        },
        groupPanel: {
          description: 'عنوان یک ستون را بگیر و به گروهی از آن ستون رها کن.'
        },
        search: {
          placeholder: 'جستجو...',
          showingItems: 'نمایش اقلام:',
          selectedItems: 'قلم\u200cهای انتخاب شده:',
          totalItems: 'مجموع اقلام:',
          size: 'اندازه\u200cی صفحه:',
          first: 'اولین صفحه',
          next: 'صفحه\u200cی\u200cبعدی',
          previous: 'صفحه\u200cی\u200c قبلی',
          last: 'آخرین صفحه'
        },
        menu: {
          text: 'ستون\u200cهای انتخابی:'
        },
        sort: {
          ascending: 'ترتیب صعودی',
          descending: 'ترتیب نزولی',
          remove: 'حذف مرتب کردن'
        },
        column: {
          hide: 'پنهان\u200cکردن ستون'
        },
        aggregation: {
          count: 'تعداد: ',
          sum: 'مجموع: ',
          avg: 'میانگین: ',
          min: 'کمترین: ',
          max: 'بیشترین: '
        },
        pinning: {
          pinLeft: 'پین کردن سمت چپ',
          pinRight: 'پین کردن سمت راست',
          unpin: 'حذف پین'
        },
        gridMenu: {
          columns: 'ستون\u200cها:',
          importerTitle: 'وارد کردن فایل',
          exporterAllAsCsv: 'خروجی تمام داده\u200cها در فایل csv',
          exporterVisibleAsCsv: 'خروجی داده\u200cهای قابل مشاهده در فایل csv',
          exporterSelectedAsCsv: 'خروجی داده\u200cهای انتخاب\u200cشده در فایل csv',
          exporterAllAsPdf: 'خروجی تمام داده\u200cها در فایل pdf',
          exporterVisibleAsPdf: 'خروجی داده\u200cهای قابل مشاهده در فایل pdf',
          exporterSelectedAsPdf: 'خروجی داده\u200cهای انتخاب\u200cشده در فایل pdf',
          clearAllFilters: 'پاک کردن تمام فیلتر'
        },
        importer: {
          noHeaders: 'نام ستون قابل استخراج نیست. آیا فایل عنوان دارد؟',
          noObjects: 'اشیا قابل استخراج نیستند. آیا به جز عنوان\u200cها در فایل داده وجود دارد؟',
          invalidCsv: 'فایل قابل پردازش نیست. آیا فرمت  csv  معتبر است؟',
          invalidJson: 'فایل قابل پردازش نیست. آیا فرمت json   معتبر است؟',
          jsonNotArray: 'فایل json وارد شده باید حاوی آرایه باشد. عملیات ساقط شد.'
        },
        pagination: {
          sizes: 'اقلام در هر صفحه',
          totalItems: 'اقلام',
          of: 'از'
        },
        grouping: {
          group: 'گروه\u200cبندی',
          ungroup: 'حذف گروه\u200cبندی',
          aggregate_count: 'Agg: تعداد',
          aggregate_sum: 'Agg: جمع',
          aggregate_max: 'Agg: بیشینه',
          aggregate_min: 'Agg: کمینه',
          aggregate_avg: 'Agg: میانگین',
          aggregate_remove: 'Agg: حذف'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('fi', {
        aggregate: {
          label: 'rivit'
        },
        groupPanel: {
          description: 'Raahaa ja pudota otsikko tähän ryhmittääksesi sarakkeen mukaan.'
        },
        search: {
          placeholder: 'Hae...',
          showingItems: 'Näytetään rivejä:',
          selectedItems: 'Valitut rivit:',
          totalItems: 'Rivejä yht.:',
          size: 'Näytä:',
          first: 'Ensimmäinen sivu',
          next: 'Seuraava sivu',
          previous: 'Edellinen sivu',
          last: 'Viimeinen sivu'
        },
        menu: {
          text: 'Valitse sarakkeet:'
        },
        sort: {
          ascending: 'Järjestä nouseva',
          descending: 'Järjestä laskeva',
          remove: 'Poista järjestys'
        },
        column: {
          hide: 'Piilota sarake'
        },
        aggregation: {
          count: 'Rivejä yht.: ',
          sum: 'Summa: ',
          avg: 'K.a.: ',
          min: 'Min: ',
          max: 'Max: '
        },
        pinning: {
         pinLeft: 'Lukitse vasemmalle',
          pinRight: 'Lukitse oikealle',
          unpin: 'Poista lukitus'
        },
        gridMenu: {
          columns: 'Sarakkeet:',
          importerTitle: 'Tuo tiedosto',
          exporterAllAsCsv: 'Vie tiedot csv-muodossa',
          exporterVisibleAsCsv: 'Vie näkyvä tieto csv-muodossa',
          exporterSelectedAsCsv: 'Vie valittu tieto csv-muodossa',
          exporterAllAsPdf: 'Vie tiedot pdf-muodossa',
          exporterVisibleAsPdf: 'Vie näkyvä tieto pdf-muodossa',
          exporterSelectedAsPdf: 'Vie valittu tieto pdf-muodossa',
          exporterAllAsExcel: 'Vie tiedot excel-muodossa',
          exporterVisibleAsExcel: 'Vie näkyvä tieto excel-muodossa',
          exporterSelectedAsExcel: 'Vie valittu tieto excel-muodossa',
          clearAllFilters: 'Puhdista kaikki suodattimet'
        },
        importer: {
          noHeaders: 'Sarakkeen nimiä ei voitu päätellä, onko tiedostossa otsikkoriviä?',
          noObjects: 'Tietoja ei voitu lukea, onko tiedostossa muuta kuin otsikkot?',
          invalidCsv: 'Tiedostoa ei voitu käsitellä, oliko se CSV-muodossa?',
          invalidJson: 'Tiedostoa ei voitu käsitellä, oliko se JSON-muodossa?',
          jsonNotArray: 'Tiedosto ei sisältänyt taulukkoa, lopetetaan.'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('fr', {
        headerCell: {
          aria: {
            defaultFilterLabel: 'Filtre de la colonne',
            removeFilter: 'Supprimer le filtre',
            columnMenuButtonLabel: 'Menu de la colonne'
          },
          priority: 'Priorité:',
          filterLabel: "Filtre de la colonne: "
        },
        aggregate: {
          label: 'éléments'
        },
        groupPanel: {
          description: 'Faites glisser une en-tête de colonne ici pour créer un groupe de colonnes.'
        },
        search: {
          placeholder: 'Recherche...',
          showingItems: 'Affichage des éléments :',
          selectedItems: 'Éléments sélectionnés :',
          totalItems: 'Nombre total d\'éléments:',
          size: 'Taille de page:',
          first: 'Première page',
          next: 'Page Suivante',
          previous: 'Page précédente',
          last: 'Dernière page'
        },
        menu: {
          text: 'Choisir des colonnes :'
        },
        sort: {
          ascending: 'Trier par ordre croissant',
          descending: 'Trier par ordre décroissant',
          none: 'Aucun tri',
          remove: 'Enlever le tri'
        },
        column: {
          hide: 'Cacher la colonne'
        },
        aggregation: {
          count: 'lignes totales: ',
          sum: 'total: ',
          avg: 'moy: ',
          min: 'min: ',
          max: 'max: '
        },
        pinning: {
          pinLeft: 'Épingler à gauche',
          pinRight: 'Épingler à droite',
          unpin: 'Détacher'
        },
        columnMenu: {
          close: 'Fermer'
        },
        gridMenu: {
          aria: {
            buttonLabel: 'Menu du tableau'
          },
          columns: 'Colonnes:',
          importerTitle: 'Importer un fichier',
          exporterAllAsCsv: 'Exporter toutes les données en CSV',
          exporterVisibleAsCsv: 'Exporter les données visibles en CSV',
          exporterSelectedAsCsv: 'Exporter les données sélectionnées en CSV',
          exporterAllAsPdf: 'Exporter toutes les données en PDF',
          exporterVisibleAsPdf: 'Exporter les données visibles en PDF',
          exporterSelectedAsPdf: 'Exporter les données sélectionnées en PDF',
          exporterAllAsExcel: 'Exporter toutes les données en Excel',
          exporterVisibleAsExcel: 'Exporter les données visibles en Excel',
          exporterSelectedAsExcel: 'Exporter les données sélectionnées en Excel',
          clearAllFilters: 'Nettoyez tous les filtres'
        },
        importer: {
          noHeaders: 'Impossible de déterminer le nom des colonnes, le fichier possède-t-il une en-tête ?',
          noObjects: 'Aucun objet trouvé, le fichier possède-t-il des données autres que l\'en-tête ?',
          invalidCsv: 'Le fichier n\'a pas pu être traité, le CSV est-il valide ?',
          invalidJson: 'Le fichier n\'a pas pu être traité, le JSON est-il valide ?',
          jsonNotArray: 'Le fichier JSON importé doit contenir un tableau, abandon.'
        },
        pagination: {
          aria: {
            pageToFirst: 'Aller à la première page',
            pageBack: 'Page précédente',
            pageSelected: 'Page sélectionnée',
            pageForward: 'Page suivante',
            pageToLast: 'Aller à la dernière page'
          },
          sizes: 'éléments par page',
          totalItems: 'éléments',
          through: 'à',
          of: 'sur'
        },
        grouping: {
          group: 'Grouper',
          ungroup: 'Dégrouper',
          aggregate_count: 'Agg: Compter',
          aggregate_sum: 'Agg: Somme',
          aggregate_max: 'Agg: Max',
          aggregate_min: 'Agg: Min',
          aggregate_avg: 'Agg: Moy',
          aggregate_remove: 'Agg: Retirer'
        },
        validate: {
          error: 'Erreur:',
          minLength: 'La valeur doit être supérieure ou égale à THRESHOLD caractères.',
          maxLength: 'La valeur doit être inférieure ou égale à THRESHOLD caractères.',
          required: 'Une valeur est nécéssaire.'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function ($provide) {
    $provide.decorator('i18nService', ['$delegate', function ($delegate) {
      $delegate.add('he', {
        aggregate: {
          label: 'items'
        },
        groupPanel: {
          description: 'גרור עמודה לכאן ושחרר בכדי לקבץ עמודה זו.'
        },
        search: {
          placeholder: 'חפש...',
          showingItems: 'מציג:',
          selectedItems: 'סה"כ נבחרו:',
          totalItems: 'סה"כ רשומות:',
          size: 'תוצאות בדף:',
          first: 'דף ראשון',
          next: 'דף הבא',
          previous: 'דף קודם',
          last: 'דף אחרון'
        },
        menu: {
          text: 'בחר עמודות:'
        },
        sort: {
          ascending: 'סדר עולה',
          descending: 'סדר יורד',
          remove: 'בטל'
        },
        column: {
          hide: 'טור הסתר'
        },
        aggregation: {
          count: 'total rows: ',
          sum: 'total: ',
          avg: 'avg: ',
          min: 'min: ',
          max: 'max: '
        },
        gridMenu: {
          columns: 'Columns:',
          importerTitle: 'Import file',
          exporterAllAsCsv: 'Export all data as csv',
          exporterVisibleAsCsv: 'Export visible data as csv',
          exporterSelectedAsCsv: 'Export selected data as csv',
          exporterAllAsPdf: 'Export all data as pdf',
          exporterVisibleAsPdf: 'Export visible data as pdf',
          exporterSelectedAsPdf: 'Export selected data as pdf',
          exporterAllAsExcel: 'Export all data as excel',
          exporterVisibleAsExcel: 'Export visible data as excel',
          exporterSelectedAsExcel: 'Export selected data as excel',
          clearAllFilters: 'Clean all filters'
        },
        importer: {
          noHeaders: 'Column names were unable to be derived, does the file have a header?',
          noObjects: 'Objects were not able to be derived, was there data in the file other than headers?',
          invalidCsv: 'File was unable to be processed, is it valid CSV?',
          invalidJson: 'File was unable to be processed, is it valid Json?',
          jsonNotArray: 'Imported json file must contain an array, aborting.'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('hy', {
        aggregate: {
          label: 'տվյալներ'
        },
        groupPanel: {
          description: 'Ըստ սյան խմբավորելու համար քաշեք և գցեք վերնագիրն այստեղ։'
        },
        search: {
          placeholder: 'Փնտրում...',
          showingItems: 'Ցուցադրված տվյալներ՝',
          selectedItems: 'Ընտրված:',
          totalItems: 'Ընդամենը՝',
          size: 'Տողերի քանակը էջում՝',
          first: 'Առաջին էջ',
          next: 'Հաջորդ էջ',
          previous: 'Նախորդ էջ',
          last: 'Վերջին էջ'
        },
        menu: {
          text: 'Ընտրել սյուները:'
        },
        sort: {
          ascending: 'Աճման կարգով',
          descending: 'Նվազման կարգով',
          remove: 'Հանել '
        },
        column: {
          hide: 'Թաքցնել սյունը'
        },
        aggregation: {
          count: 'ընդամենը տող՝ ',
          sum: 'ընդամենը՝ ',
          avg: 'միջին՝ ',
          min: 'մին՝ ',
          max: 'մաքս՝ '
        },
        pinning: {
          pinLeft: 'Կպցնել ձախ կողմում',
          pinRight: 'Կպցնել աջ կողմում',
          unpin: 'Արձակել'
        },
        gridMenu: {
          columns: 'Սյուներ:',
          importerTitle: 'Ներմուծել ֆայլ',
          exporterAllAsCsv: 'Արտահանել ամբողջը CSV',
          exporterVisibleAsCsv: 'Արտահանել երևացող տվյալները CSV',
          exporterSelectedAsCsv: 'Արտահանել ընտրված տվյալները CSV',
          exporterAllAsPdf: 'Արտահանել PDF',
          exporterVisibleAsPdf: 'Արտահանել երևացող տվյալները PDF',
          exporterSelectedAsPdf: 'Արտահանել ընտրված տվյալները PDF',
          exporterAllAsExcel: 'Արտահանել excel',
          exporterVisibleAsExcel: 'Արտահանել երևացող տվյալները excel',
          exporterSelectedAsExcel: 'Արտահանել ընտրված տվյալները excel',
          clearAllFilters: 'Մաքրել բոլոր ֆիլտրերը'
        },
        importer: {
          noHeaders: 'Հնարավոր չեղավ որոշել սյան վերնագրերը։ Արդյո՞ք ֆայլը ունի վերնագրեր։',
          noObjects: 'Հնարավոր չեղավ կարդալ տվյալները։ Արդյո՞ք ֆայլում կան տվյալներ։',
          invalidCsv: 'Հնարավոր չեղավ մշակել ֆայլը։ Արդյո՞ք այն վավեր CSV է։',
          invalidJson: 'Հնարավոր չեղավ մշակել ֆայլը։ Արդյո՞ք այն վավեր Json է։',
          jsonNotArray: 'Ներմուծված json ֆայլը պետք է պարունակի զանգված, կասեցվում է։'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('is', {
        headerCell: {
          aria: {
            defaultFilterLabel: 'Sía fyrir dálk',
            removeFilter: 'Fjarlægja síu',
            columnMenuButtonLabel: 'Dálkavalmynd'
          },
          priority: 'Forgangsröðun:',
          filterLabel: "Sía fyrir dálka: "
        },
        aggregate: {
          label: 'hlutir'
        },
        groupPanel: {
          description: 'Dragðu dálkhaus hingað til að flokka saman eftir þeim dálki.'
        },
        search: {
          placeholder: 'Leita...',
          showingItems: 'Sýni hluti:',
          selectedItems: 'Valdir hlutir:',
          totalItems: 'Hlutir alls:',
          size: 'Stærð síðu:',
          first: 'Fyrsta síða',
          next: 'Næsta síða',
          previous: 'Fyrri síða',
          last: 'Síðasta síða'
        },
        menu: {
          text: 'Veldu dálka:'
        },
        sort: {
          ascending: 'Raða hækkandi',
          descending: 'Raða lækkandi',
          none: 'Engin röðun',
          remove: 'Fjarlægja röðun'
        },
        column: {
          hide: 'Fela dálk'
        },
        aggregation: {
          count: 'fjöldi raða: ',
          sum: 'summa: ',
          avg: 'meðaltal: ',
          min: 'lágmark: ',
          max: 'hámark: '
        },
        pinning: {
          pinLeft: 'Festa til vinstri',
          pinRight: 'Festa til hægri',
          unpin: 'Losa'
        },
        columnMenu: {
          close: 'Loka'
        },
        gridMenu: {
          aria: {
            buttonLabel: 'Töflu valmynd'
          },
          columns: 'Dálkar:',
          importerTitle: 'Flytja inn skjal',
          exporterAllAsCsv: 'Flytja út gögn sem csv',
          exporterVisibleAsCsv: 'Flytja út sýnileg gögn sem csv',
          exporterSelectedAsCsv: 'Flytja út valin gögn sem csv',
          exporterAllAsPdf: 'Flytja út öll gögn sem pdf',
          exporterVisibleAsPdf: 'Flytja út sýnileg gögn sem pdf',
          exporterSelectedAsPdf: 'Flytja út valin gögn sem pdf',
          clearAllFilters: 'Hreinsa allar síur'
        },
        importer: {
          noHeaders: 'Ekki hægt að vinna dálkanöfn úr skjalinu, er skjalið örugglega með haus?',
          noObjects: 'Ekki hægt að vinna hluti úr skjalinu, voru örugglega gögn í skjalinu önnur en hausinn?',
          invalidCsv: 'Tókst ekki að vinna skjal, er það örggulega gilt CSV?',
          invalidJson: 'Tókst ekki að vinna skjal, er það örugglega gilt Json?',
          jsonNotArray: 'Innflutt json skjal verður að innihalda fylki, hætti við.'
        },
        pagination: {
          aria: {
            pageToFirst: 'Fletta að fyrstu',
            pageBack: 'Fletta til baka',
            pageSelected: 'Valin síða',
            pageForward: 'Fletta áfram',
            pageToLast: 'Fletta að síðustu'
          },
          sizes: 'hlutir á síðu',
          totalItems: 'hlutir',
          through: 'gegnum',
          of: 'af'
        },
        grouping: {
          group: 'Flokka',
          ungroup: 'Sundurliða',
          aggregate_count: 'Fjöldi: ',
          aggregate_sum: 'Summa: ',
          aggregate_max: 'Hámark: ',
          aggregate_min: 'Lágmark: ',
          aggregate_avg: 'Meðaltal: ',
          aggregate_remove: 'Fjarlægja: '
        },
        validate: {
          error: 'Villa:',
          minLength: 'Gildi ætti að vera a.m.k. THRESHOLD stafa langt.',
          maxLength: 'Gildi ætti að vera í mesta lagi THRESHOLD stafa langt.',
          required: 'Þarf að hafa gildi.'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('it', {
        aggregate: {
          label: 'elementi'
        },
        groupPanel: {
          description: 'Trascina un\'intestazione all\'interno del gruppo della colonna.'
        },
        search: {
          placeholder: 'Ricerca...',
          showingItems: 'Mostra:',
          selectedItems: 'Selezionati:',
          totalItems: 'Totali:',
          size: 'Tot Pagine:',
          first: 'Prima',
          next: 'Prossima',
          previous: 'Precedente',
          last: 'Ultima'
        },
        menu: {
          text: 'Scegli le colonne:'
        },
        sort: {
          ascending: 'Asc.',
          descending: 'Desc.',
          remove: 'Annulla ordinamento'
        },
        column: {
          hide: 'Nascondi'
        },
        aggregation: {
          count: 'righe totali: ',
          sum: 'tot: ',
          avg: 'media: ',
          min: 'minimo: ',
          max: 'massimo: '
        },
        pinning: {
         pinLeft: 'Blocca a sx',
          pinRight: 'Blocca a dx',
          unpin: 'Blocca in alto'
        },
        gridMenu: {
          columns: 'Colonne:',
          importerTitle: 'Importa',
          exporterAllAsCsv: 'Esporta tutti i dati in CSV',
          exporterVisibleAsCsv: 'Esporta i dati visibili in CSV',
          exporterSelectedAsCsv: 'Esporta i dati selezionati in CSV',
          exporterAllAsPdf: 'Esporta tutti i dati in PDF',
          exporterVisibleAsPdf: 'Esporta i dati visibili in PDF',
          exporterSelectedAsPdf: 'Esporta i dati selezionati in PDF',
          exporterAllAsExcel: 'Esporta tutti i dati in excel',
          exporterVisibleAsExcel: 'Esporta i dati visibili in excel',
          exporterSelectedAsExcel: 'Esporta i dati selezionati in excel',
          clearAllFilters: 'Pulire tutti i filtri'
        },
        importer: {
          noHeaders: 'Impossibile reperire i nomi delle colonne, sicuro che siano indicati all\'interno del file?',
          noObjects: 'Impossibile reperire gli oggetti, sicuro che siano indicati all\'interno del file?',
          invalidCsv: 'Impossibile elaborare il file, sicuro che sia un CSV?',
          invalidJson: 'Impossibile elaborare il file, sicuro che sia un JSON valido?',
          jsonNotArray: 'Errore! Il file JSON da importare deve contenere un array.'
        },
        pagination: {
          aria: {
            pageToFirst: 'Prima',
            pageBack: 'Indietro',
            pageSelected: 'Pagina selezionata',
            pageForward: 'Avanti',
            pageToLast: 'Ultima'
          },
          sizes: 'elementi per pagina',
          totalItems: 'elementi',
          through: 'a',
          of: 'di'
        },
        grouping: {
          group: 'Raggruppa',
          ungroup: 'Separa',
          aggregate_count: 'Agg: N. Elem.',
          aggregate_sum: 'Agg: Somma',
          aggregate_max: 'Agg: Massimo',
          aggregate_min: 'Agg: Minimo',
          aggregate_avg: 'Agg: Media',
          aggregate_remove: 'Agg: Rimuovi'
        },
        validate: {
          error: 'Errore:',
          minLength: 'Lunghezza minima pari a THRESHOLD caratteri.',
          maxLength: 'Lunghezza massima pari a THRESHOLD caratteri.',
          required: 'Necessario inserire un valore.'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function() {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('ja', {
        headerCell: {
          aria: {
            defaultFilterLabel: '列のフィルター',
            removeFilter: 'フィルターの解除',
            columnMenuButtonLabel: '列のメニュー'
          },
          priority: '優先度:',
          filterLabel: "列フィルター: "
        },
        aggregate: {
          label: '項目'
        },
        groupPanel: {
          description: 'ここに列ヘッダをドラッグアンドドロップして、その列でグループ化します。'
        },
        search: {
          placeholder: '検索...',
          showingItems: '表示中の項目:',
          selectedItems: '選択した項目:',
          totalItems: '項目の総数:',
          size: 'ページサイズ:',
          first: '最初のページ',
          next: '次のページ',
          previous: '前のページ',
          last: '前のページ'
        },
        menu: {
          text: '列の選択:'
        },
        sort: {
          ascending: '昇順に並べ替え',
          descending: '降順に並べ替え',
          none: '並べ替え無し',
          remove: '並べ替えの解除'
        },
        column: {
          hide: '列の非表示'
        },
        aggregation: {
          count: '行数: ',
          sum: '合計: ',
          avg: '平均: ',
          min: '最小: ',
          max: '最大: '
        },
        pinning: {
          pinLeft: '左に固定',
          pinRight: '右に固定',
          unpin: '固定解除'
        },
        columnMenu: {
          close: '閉じる'
        },
        gridMenu: {
          aria: {
            buttonLabel: 'グリッドメニュー'
          },
          columns: '列の表示/非表示:',
          importerTitle: 'ファイルのインポート',
          exporterAllAsCsv: 'すべてのデータをCSV形式でエクスポート',
          exporterVisibleAsCsv: '表示中のデータをCSV形式でエクスポート',
          exporterSelectedAsCsv: '選択したデータをCSV形式でエクスポート',
          exporterAllAsPdf: 'すべてのデータをPDF形式でエクスポート',
          exporterVisibleAsPdf: '表示中のデータをPDF形式でエクスポート',
          exporterSelectedAsPdf: '選択したデータをPDF形式でエクスポート',
          clearAllFilters: 'すべてのフィルタをクリア'
        },
        importer: {
          noHeaders: '列名を取得できません。ファイルにヘッダが含まれていることを確認してください。',
          noObjects: 'オブジェクトを取得できません。ファイルにヘッダ以外のデータが含まれていることを確認してください。',
          invalidCsv: 'ファイルを処理できません。ファイルが有効なCSV形式であることを確認してください。',
          invalidJson: 'ファイルを処理できません。ファイルが有効なJSON形式であることを確認してください。',
          jsonNotArray: 'インポートしたJSONファイルには配列が含まれている必要があります。処理を中止します。'
        },
        pagination: {
          aria: {
            pageToFirst: '最初のページ',
            pageBack: '前のページ',
            pageSelected: '現在のページ',
            pageForward: '次のページ',
            pageToLast: '最後のページ'
          },
          sizes: '件/ページ',
          totalItems: '件',
          through: 'から',
          of: '件/全'
        },
        grouping: {
          group: 'グループ化',
          ungroup: 'グループ化の解除',
          aggregate_count: '集計表示: 行数',
          aggregate_sum: '集計表示: 合計',
          aggregate_max: '集計表示: 最大',
          aggregate_min: '集計表示: 最小',
          aggregate_avg: '集計表示: 平均',
          aggregate_remove: '集計表示: 解除'
        },
        validate: {
          error: 'Error:',
          minLength: 'THRESHOLD 文字以上で入力してください。',
          maxLength: 'THRESHOLD 文字以下で入力してください。',
          required: '値が必要です。'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('ko', {
        aggregate: {
          label: '아이템'
        },
        groupPanel: {
          description: '컬럼으로 그룹핑하기 위해서는 컬럼 헤더를 끌어 떨어뜨려 주세요.'
        },
        search: {
          placeholder: '검색...',
          showingItems: '항목 보여주기:',
          selectedItems: '선택 항목:',
          totalItems: '전체 항목:',
          size: '페이지 크기:',
          first: '첫번째 페이지',
          next: '다음 페이지',
          previous: '이전 페이지',
          last: '마지막 페이지'
        },
        menu: {
          text: '컬럼을 선택하세요:'
        },
        sort: {
          ascending: '오름차순 정렬',
          descending: '내림차순 정렬',
          remove: '소팅 제거'
        },
        column: {
          hide: '컬럼 제거'
        },
        aggregation: {
          count: '전체 갯수: ',
          sum: '전체: ',
          avg: '평균: ',
          min: '최소: ',
          max: '최대: '
        },
        pinning: {
         pinLeft: '왼쪽 핀',
          pinRight: '오른쪽 핀',
          unpin: '핀 제거'
        },
        gridMenu: {
          columns: '컬럼:',
          importerTitle: '파일 가져오기',
          exporterAllAsCsv: 'csv로 모든 데이터 내보내기',
          exporterVisibleAsCsv: 'csv로 보이는 데이터 내보내기',
          exporterSelectedAsCsv: 'csv로 선택된 데이터 내보내기',
          exporterAllAsPdf: 'pdf로 모든 데이터 내보내기',
          exporterVisibleAsPdf: 'pdf로 보이는 데이터 내보내기',
          exporterSelectedAsPdf: 'pdf로 선택 데이터 내보내기',
          clearAllFilters: '모든 필터를 청소'
        },
        importer: {
          noHeaders: '컬럼명이 지정되어 있지 않습니다. 파일에 헤더가 명시되어 있는지 확인해 주세요.',
          noObjects: '데이터가 지정되어 있지 않습니다. 데이터가 파일에 있는지 확인해 주세요.',
          invalidCsv: '파일을 처리할 수 없습니다. 올바른 csv인지 확인해 주세요.',
          invalidJson: '파일을 처리할 수 없습니다. 올바른 json인지 확인해 주세요.',
          jsonNotArray: 'json 파일은 배열을 포함해야 합니다.'
        },
        pagination: {
          sizes: '페이지당 항목',
          totalItems: '전체 항목'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('nl', {
        aggregate: {
          label: 'items'
        },
        groupPanel: {
          description: 'Sleep hier een kolomnaam heen om op te groeperen.'
        },
        search: {
          placeholder: 'Zoeken...',
          showingItems: 'Getoonde items:',
          selectedItems: 'Geselecteerde items:',
          totalItems: 'Totaal aantal items:',
          size: 'Items per pagina:',
          first: 'Eerste pagina',
          next: 'Volgende pagina',
          previous: 'Vorige pagina',
          last: 'Laatste pagina'
        },
        menu: {
          text: 'Kies kolommen:'
        },
        sort: {
          ascending: 'Sorteer oplopend',
          descending: 'Sorteer aflopend',
          remove: 'Verwijder sortering'
        },
        column: {
          hide: 'Verberg kolom'
        },
        aggregation: {
          count: 'Aantal rijen: ',
          sum: 'Som: ',
          avg: 'Gemiddelde: ',
          min: 'Min: ',
          max: 'Max: '
        },
        pinning: {
          pinLeft: 'Zet links vast',
          pinRight: 'Zet rechts vast',
          unpin: 'Maak los'
        },
        gridMenu: {
          columns: 'Kolommen:',
          importerTitle: 'Importeer bestand',
          exporterAllAsCsv: 'Exporteer alle data als csv',
          exporterVisibleAsCsv: 'Exporteer zichtbare data als csv',
          exporterSelectedAsCsv: 'Exporteer geselecteerde data als csv',
          exporterAllAsPdf: 'Exporteer alle data als pdf',
          exporterVisibleAsPdf: 'Exporteer zichtbare data als pdf',
          exporterSelectedAsPdf: 'Exporteer geselecteerde data als pdf',
          exporterAllAsExcel: 'Exporteer alle data als excel',
          exporterVisibleAsExcel: 'Exporteer zichtbare data als excel',
          exporterSelectedAsExcel: 'Exporteer alle data als excel',
          clearAllFilters: 'Alle filters wissen'
        },
        importer: {
          noHeaders: 'Kolomnamen kunnen niet worden afgeleid. Heeft het bestand een header?',
          noObjects: 'Objecten kunnen niet worden afgeleid. Bevat het bestand data naast de headers?',
          invalidCsv: 'Het bestand kan niet verwerkt worden. Is het een valide csv bestand?',
          invalidJson: 'Het bestand kan niet verwerkt worden. Is het valide json?',
          jsonNotArray: 'Het json bestand moet een array bevatten. De actie wordt geannuleerd.'
        },
        pagination: {
            sizes: 'items per pagina',
            totalItems: 'items',
            of: 'van de'
        },
        grouping: {
            group: 'Groepeer',
            ungroup: 'Groepering opheffen',
            aggregate_count: 'Agg: Aantal',
            aggregate_sum: 'Agg: Som',
            aggregate_max: 'Agg: Max',
            aggregate_min: 'Agg: Min',
            aggregate_avg: 'Agg: Gem',
            aggregate_remove: 'Agg: Verwijder'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('no', {
        headerCell: {
          aria: {
            defaultFilterLabel: 'Filter for kolonne',
            removeFilter: 'Fjern filter',
            columnMenuButtonLabel: 'Kolonnemeny'
          },
          priority: 'Prioritet:',
          filterLabel: "Filter for kolonne: "
        },
        aggregate: {
          label: 'elementer'
        },
        groupPanel: {
          description: 'Trekk en kolonneoverskrift hit og slipp den for å gruppere etter den kolonnen.'
        },
        search: {
          placeholder: 'Søk...',
          showingItems: 'Viste elementer:',
          selectedItems: 'Valgte elementer:',
          totalItems: 'Antall elementer:',
          size: 'Sidestørrelse:',
          first: 'Første side',
          next: 'Neste side',
          previous: 'Forrige side',
          last: 'Siste side'
        },
        menu: {
          text: 'Velg kolonner:'
        },
        sort: {
          ascending: 'Sortere stigende',
          descending: 'Sortere fallende',
          none: 'Ingen sortering',
          remove: 'Fjern sortering'
        },
        column: {
          hide: 'Skjul kolonne'
        },
        aggregation: {
          count: 'antall rader: ',
          sum: 'total: ',
          avg: 'gjennomsnitt: ',
          min: 'minimum: ',
          max: 'maksimum: '
        },
        pinning: {
          pinLeft: 'Fest til venstre',
          pinRight: 'Fest til høyre',
          unpin: 'Løsne'
        },
        columnMenu: {
          close: 'Lukk'
        },
        gridMenu: {
          aria: {
            buttonLabel: 'Grid Menu'
          },
          columns: 'Kolonner:',
          importerTitle: 'Importer fil',
          exporterAllAsCsv: 'Eksporter alle data som csv',
          exporterVisibleAsCsv: 'Eksporter synlige data som csv',
          exporterSelectedAsCsv: 'Eksporter utvalgte data som csv',
          exporterAllAsPdf: 'Eksporter alle data som pdf',
          exporterVisibleAsPdf: 'Eksporter synlige data som pdf',
          exporterSelectedAsPdf: 'Eksporter utvalgte data som pdf',
          exporterAllAsExcel: 'Eksporter alle data som excel',
          exporterVisibleAsExcel: 'Eksporter synlige data som excel',
          exporterSelectedAsExcel: 'Eksporter utvalgte data som excel',
          clearAllFilters: 'Clear all filters'
        },
        importer: {
          noHeaders: 'Kolonnenavn kunne ikke avledes. Har filen en overskrift?',
          noObjects: 'Objekter kunne ikke avledes. Er der andre data i filen enn overskriften?',
          invalidCsv: 'Filen kunne ikke behandles. Er den gyldig CSV?',
          invalidJson: 'Filen kunne ikke behandles. Er den gyldig JSON?',
          jsonNotArray: 'Importert JSON-fil må inneholde en liste. Avbryter.'
        },
        pagination: {
          aria: {
            pageToFirst: 'Gå til første side',
            pageBack: 'Gå til forrige side',
            pageSelected: 'Valgte side',
            pageForward: 'Gå til neste side',
            pageToLast: 'Gå til siste side'
          },
          sizes: 'elementer per side',
          totalItems: 'elementer',
          through: 'til',
          of: 'av'
        },
        grouping: {
          group: 'Gruppere',
          ungroup: 'Fjerne gruppering',
          aggregate_count: 'Agr: Antall',
          aggregate_sum: 'Agr: Sum',
          aggregate_max: 'Agr: Maksimum',
          aggregate_min: 'Agr: Minimum',
          aggregate_avg: 'Agr: Gjennomsnitt',
          aggregate_remove: 'Agr: Fjern'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('pl', {
        headerCell: {
          aria: {
            defaultFilterLabel: 'Filtr dla kolumny',
            removeFilter: 'Usuń filtr',
            columnMenuButtonLabel: 'Opcje kolumny',
            column: 'Kolumna'
          },
          priority: 'Priorytet:',
          filterLabel: "Filtr dla kolumny: "
        },
        aggregate: {
          label: 'pozycji'
        },
        groupPanel: {
          description: 'Przeciągnij nagłówek kolumny tutaj, aby pogrupować według niej.'
        },
        search: {
          aria: {
            selected: 'Wiersz zaznaczony',
            notSelected: 'Wiersz niezaznaczony'
          },
          placeholder: 'Szukaj...',
          showingItems: 'Widoczne pozycje:',
          selectedItems: 'Zaznaczone pozycje:',
          totalItems: 'Wszystkich pozycji:',
          size: 'Rozmiar strony:',
          first: 'Pierwsza strona',
          next: 'Następna strona',
          previous: 'Poprzednia strona',
          last: 'Ostatnia strona'
        },
        menu: {
          text: 'Wybierz kolumny:'
        },
        sort: {
          ascending: 'Sortuj rosnąco',
          descending: 'Sortuj malejąco',
          none: 'Brak sortowania',
          remove: 'Wyłącz sortowanie'
        },
        column: {
          hide: 'Ukryj kolumnę'
        },
        aggregation: {
          count: 'Razem pozycji: ',
            sum: 'Razem: ',
            avg: 'Średnia: ',
            min: 'Min: ',
            max: 'Max: '
        },
        pinning: {
          pinLeft: 'Przypnij do lewej',
          pinRight: 'Przypnij do prawej',
          unpin: 'Odepnij'
        },
        columnMenu: {
          close: 'Zamknij'
        },
        gridMenu: {
          aria: {
            buttonLabel: 'Opcje tabeli'
          },
          columns: 'Kolumny:',
          importerTitle: 'Importuj plik',
          exporterAllAsCsv: 'Eksportuj wszystkie dane do csv',
          exporterVisibleAsCsv: 'Eksportuj widoczne dane do csv',
          exporterSelectedAsCsv: 'Eksportuj zaznaczone dane do csv',
          exporterAllAsPdf: 'Eksportuj wszystkie dane do pdf',
          exporterVisibleAsPdf: 'Eksportuj widoczne dane do pdf',
          exporterSelectedAsPdf: 'Eksportuj zaznaczone dane do pdf',
          exporterAllAsExcel: 'Eksportuj wszystkie dane do excel',
          exporterVisibleAsExcel: 'Eksportuj widoczne dane do excel',
          exporterSelectedAsExcel: 'Eksportuj zaznaczone dane do excel',
          clearAllFilters: 'Wyczyść filtry'
        },
        importer: {
          noHeaders: 'Nie udało się wczytać nazw kolumn. Czy plik posiada nagłówek?',
          noObjects: 'Nie udalo się wczytać pozycji. Czy plik zawiera dane?',
          invalidCsv: 'Nie udało się przetworzyć pliku. Czy to prawidłowy plik CSV?',
          invalidJson: 'Nie udało się przetworzyć pliku. Czy to prawidłowy plik JSON?',
          jsonNotArray: 'Importowany plik JSON musi zawierać tablicę. Importowanie przerwane.'
        },
        pagination: {
          aria: {
            pageToFirst: 'Pierwsza strona',
            pageBack: 'Poprzednia strona',
            pageSelected: 'Wybrana strona',
            pageForward: 'Następna strona',
            pageToLast: 'Ostatnia strona'
          },
          sizes: 'pozycji na stronę',
          totalItems: 'pozycji',
          through: 'do',
          of: 'z'
        },
        grouping: {
          group: 'Grupuj',
          ungroup: 'Rozgrupuj',
          aggregate_count: 'Zbiorczo: Razem',
          aggregate_sum: 'Zbiorczo: Suma',
          aggregate_max: 'Zbiorczo: Max',
          aggregate_min: 'Zbiorczo: Min',
          aggregate_avg: 'Zbiorczo: Średnia',
          aggregate_remove: 'Zbiorczo: Usuń'
        },
        validate: {
          error: 'Błąd:',
          minLength: 'Wartość powinna składać się z co najmniej THRESHOLD znaków.',
          maxLength: 'Wartość powinna składać się z przynajmniej THRESHOLD znaków.',
          required: 'Wartość jest wymagana.'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('pt-br', {
        headerCell: {
          aria: {
            defaultFilterLabel: 'Filtro por coluna',
            removeFilter: 'Remover filtro',
            columnMenuButtonLabel: 'Menu coluna',
            column: 'Coluna'
          },
          priority: 'Prioridade:',
          filterLabel: "Filtro por coluna: "
        },
        aggregate: {
          label: 'itens'
        },
        groupPanel: {
          description: 'Arraste e solte uma coluna aqui para agrupar por essa coluna'
        },
        search: {
          aria: {
            selected: 'Linha selecionada',
            notSelected: 'Linha não está selecionada'
          },
          placeholder: 'Procurar...',
          showingItems: 'Mostrando os Itens:',
          selectedItems: 'Items Selecionados:',
          totalItems: 'Total de Itens:',
          size: 'Tamanho da Página:',
          first: 'Primeira Página',
          next: 'Próxima Página',
          previous: 'Página Anterior',
          last: 'Última Página'
        },
        menu: {
          text: 'Selecione as colunas:'
        },
        sort: {
          ascending: 'Ordenar Ascendente',
          descending: 'Ordenar Descendente',
          none: 'Nenhuma Ordem',
          remove: 'Remover Ordenação'
        },
        column: {
          hide: 'Esconder coluna'
        },
        aggregation: {
          count: 'total de linhas: ',
          sum: 'total: ',
          avg: 'med: ',
          min: 'min: ',
          max: 'max: '
        },
        pinning: {
          pinLeft: 'Fixar Esquerda',
          pinRight: 'Fixar Direita',
          unpin: 'Desprender'
        },
        columnMenu: {
          close: 'Fechar'
        },
        gridMenu: {
          aria: {
            buttonLabel: 'Menu Grid'
          },
          columns: 'Colunas:',
          importerTitle: 'Importar arquivo',
          exporterAllAsCsv: 'Exportar todos os dados como csv',
          exporterVisibleAsCsv: 'Exportar dados visíveis como csv',
          exporterSelectedAsCsv: 'Exportar dados selecionados como csv',
          exporterAllAsPdf: 'Exportar todos os dados como pdf',
          exporterVisibleAsPdf: 'Exportar dados visíveis como pdf',
          exporterSelectedAsPdf: 'Exportar dados selecionados como pdf',
          exporterAllAsExcel: 'Exportar todos os dados como excel',
          exporterVisibleAsExcel: 'Exportar dados visíveis como excel',
          exporterSelectedAsExcel: 'Exportar dados selecionados como excel',
          clearAllFilters: 'Limpar todos os filtros'
        },
        importer: {
          noHeaders: 'Nomes de colunas não puderam ser derivados. O arquivo tem um cabeçalho?',
          noObjects: 'Objetos não puderam ser derivados. Havia dados no arquivo, além dos cabeçalhos?',
          invalidCsv: 'Arquivo não pode ser processado. É um CSV válido?',
          invalidJson: 'Arquivo não pode ser processado. É um Json válido?',
          jsonNotArray: 'Arquivo json importado tem que conter um array. Abortando.'
        },
        pagination: {
          aria: {
            pageToFirst: 'Primeira página',
            pageBack: 'Página anterior',
            pageSelected: 'Página Selecionada',
            pageForward: 'Proxima',
            pageToLast: 'Anterior'
          },
          sizes: 'itens por página',
          totalItems: 'itens',
          through: 'através dos',
          of: 'de'
        },
        grouping: {
          group: 'Agrupar',
          ungroup: 'Desagrupar',
          aggregate_count: 'Agr: Contar',
          aggregate_sum: 'Agr: Soma',
          aggregate_max: 'Agr: Max',
          aggregate_min: 'Agr: Min',
          aggregate_avg: 'Agr: Med',
          aggregate_remove: 'Agr: Remover'
        },
        validate: {
          error: 'Erro:',
          minLength: 'O valor deve ter, no minimo, THRESHOLD caracteres.',
          maxLength: 'O valor deve ter, no máximo, THRESHOLD caracteres.',
          required: 'Um valor é necessário.'
        }
      });
      return $delegate;
    }]);
}]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('pt', {
        headerCell: {
          aria: {
            defaultFilterLabel: 'Filtro por coluna',
            removeFilter: 'Remover filtro',
            columnMenuButtonLabel: 'Menu coluna',
            column: 'Coluna'
          },
          priority: 'Prioridade:',
          filterLabel: "Filtro por coluna: "
        },
        aggregate: {
          label: 'itens'
        },
        groupPanel: {
          description: 'Arraste e solte uma coluna aqui para agrupar por essa coluna'
        },
        search: {
          aria: {
            selected: 'Linha selecionada',
            notSelected: 'Linha não está selecionada'
          },
          placeholder: 'Procurar...',
          showingItems: 'Mostrando os Itens:',
          selectedItems: 'Itens Selecionados:',
          totalItems: 'Total de Itens:',
          size: 'Tamanho da Página:',
          first: 'Primeira Página',
          next: 'Próxima Página',
          previous: 'Página Anterior',
          last: 'Última Página'
        },
        menu: {
          text: 'Selecione as colunas:'
        },
        sort: {
          ascending: 'Ordenar Ascendente',
          descending: 'Ordenar Descendente',
          none: 'Nenhuma Ordem',
          remove: 'Remover Ordenação'
        },
        column: {
          hide: 'Esconder coluna'
        },
        aggregation: {
          count: 'total de linhas: ',
          sum: 'total: ',
          avg: 'med: ',
          min: 'min: ',
          max: 'max: '
        },
        pinning: {
          pinLeft: 'Fixar Esquerda',
          pinRight: 'Fixar Direita',
          unpin: 'Desprender'
        },
        columnMenu: {
          close: 'Fechar'
        },
        gridMenu: {
          aria: {
            buttonLabel: 'Menu Grid'
          },
          columns: 'Colunas:',
          importerTitle: 'Importar ficheiro',
          exporterAllAsCsv: 'Exportar todos os dados como csv',
          exporterVisibleAsCsv: 'Exportar dados visíveis como csv',
          exporterSelectedAsCsv: 'Exportar dados selecionados como csv',
          exporterAllAsPdf: 'Exportar todos os dados como pdf',
          exporterVisibleAsPdf: 'Exportar dados visíveis como pdf',
          exporterSelectedAsPdf: 'Exportar dados selecionados como pdf',
          exporterAllAsExcel: 'Exportar todos os dados como excel',
          exporterVisibleAsExcel: 'Exportar dados visíveis como excel',
          exporterSelectedAsExcel: 'Exportar dados selecionados como excel',
          clearAllFilters: 'Limpar todos os filtros'
        },
        importer: {
          noHeaders: 'Nomes de colunas não puderam ser derivados. O ficheiro tem um cabeçalho?',
          noObjects: 'Objetos não puderam ser derivados. Havia dados no ficheiro, além dos cabeçalhos?',
          invalidCsv: 'Ficheiro não pode ser processado. É um CSV válido?',
          invalidJson: 'Ficheiro não pode ser processado. É um Json válido?',
          jsonNotArray: 'Ficheiro json importado tem que conter um array. Interrompendo.'
        },
        pagination: {
          aria: {
            pageToFirst: 'Primeira página',
            pageBack: 'Página anterior',
            pageSelected: 'Página Selecionada',
            pageForward: 'Próxima',
            pageToLast: 'Anterior'
          },
          sizes: 'itens por página',
          totalItems: 'itens',
          through: 'a',
          of: 'de'
        },
        grouping: {
          group: 'Agrupar',
          ungroup: 'Desagrupar',
          aggregate_count: 'Agr: Contar',
          aggregate_sum: 'Agr: Soma',
          aggregate_max: 'Agr: Max',
          aggregate_min: 'Agr: Min',
          aggregate_avg: 'Agr: Med',
          aggregate_remove: 'Agr: Remover'
        },
        validate: {
          error: 'Erro:',
          minLength: 'O valor deve ter, no minimo, THRESHOLD caracteres.',
          maxLength: 'O valor deve ter, no máximo, THRESHOLD caracteres.',
          required: 'Um valor é necessário.'
        }
      });
      return $delegate;
    }]);
}]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('ro', {
        headerCell: {
          aria: {
            defaultFilterLabel: 'Filtru pentru coloana',
            removeFilter: 'Sterge filtru',
            columnMenuButtonLabel: 'Column Menu'
          },
          priority: 'Prioritate:',
          filterLabel: "Filtru pentru coloana:"
        },
        aggregate: {
          label: 'Elemente'
        },
        groupPanel: {
          description: 'Trage un cap de coloana aici pentru a grupa elementele dupa coloana respectiva'
        },
        search: {
          placeholder: 'Cauta...',
          showingItems: 'Arata elementele:',
          selectedItems: 'Elementele selectate:',
          totalItems: 'Total elemente:',
          size: 'Marime pagina:',
          first: 'Prima pagina',
          next: 'Pagina urmatoare',
          previous: 'Pagina anterioara',
          last: 'Ultima pagina'
        },
        menu: {
          text: 'Alege coloane:'
        },
        sort: {
          ascending: 'Ordoneaza crescator',
          descending: 'Ordoneaza descrescator',
          none: 'Fara ordonare',
          remove: 'Sterge ordonarea'
        },
        column: {
          hide: 'Ascunde coloana'
        },
        aggregation: {
          count: 'total linii: ',
          sum: 'total: ',
          avg: 'medie: ',
          min: 'min: ',
          max: 'max: '
        },
        pinning: {
          pinLeft: 'Pin la stanga',
          pinRight: 'Pin la dreapta',
          unpin: 'Sterge pinul'
        },
        columnMenu: {
          close: 'Inchide'
        },
        gridMenu: {
          aria: {
            buttonLabel: 'Grid Menu'
          },
          columns: 'Coloane:',
          importerTitle: 'Incarca fisier',
          exporterAllAsCsv: 'Exporta toate datele ca csv',
          exporterVisibleAsCsv: 'Exporta datele vizibile ca csv',
          exporterSelectedAsCsv: 'Exporta datele selectate ca csv',
          exporterAllAsPdf: 'Exporta toate datele ca pdf',
          exporterVisibleAsPdf: 'Exporta datele vizibile ca pdf',
          exporterSelectedAsPdf: 'Exporta datele selectate ca csv pdf',
          clearAllFilters: 'Sterge toate filtrele'
        },
        importer: {
          noHeaders: 'Numele coloanelor nu a putut fi incarcat, acest fisier are un header?',
          noObjects: 'Datele nu au putut fi incarcate, exista date in fisier in afara numelor de coloane?',
          invalidCsv: 'Fisierul nu a putut fi procesat, ati incarcat un CSV valid ?',
          invalidJson: 'Fisierul nu a putut fi procesat, ati incarcat un Json valid?',
          jsonNotArray: 'Json-ul incarcat trebuie sa contina un array, inchidere.'
        },
        pagination: {
          aria: {
            pageToFirst: 'Prima pagina',
            pageBack: 'O pagina inapoi',
            pageSelected: 'Pagina selectata',
            pageForward: 'O pagina inainte',
            pageToLast: 'Ultima pagina'
          },
          sizes: 'Elemente per pagina',
          totalItems: 'elemente',
          through: 'prin',
          of: 'of'
        },
        grouping: {
          group: 'Grupeaza',
          ungroup: 'Opreste gruparea',
          aggregate_count: 'Agg: Count',
          aggregate_sum: 'Agg: Sum',
          aggregate_max: 'Agg: Max',
          aggregate_min: 'Agg: Min',
          aggregate_avg: 'Agg: Avg',
          aggregate_remove: 'Agg: Remove'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function() {
	angular.module('ui.grid').config(['$provide', function($provide) {
		$provide.decorator('i18nService', ['$delegate', function($delegate) {
			$delegate.add('rs-lat', {
				headerCell: {
					aria: {
						defaultFilterLabel: 'Filter za kolonu',
						removeFilter: 'Ukloni Filter',
						columnMenuButtonLabel: 'Meni Kolone',
						column: 'Kolona'
					},
					priority: 'Prioritet:',
					filterLabel: "Filter za kolonu: "
				},
				aggregate: {
					label: 'stavke'
				},
				groupPanel: {
					description: 'Ovde prevuci zaglavlje kolone i spusti do grupe pored te kolone.'
				},
				search: {
					aria: {
						selected: 'Red odabran',
						notSelected: 'Red nije odabran'
					},
					placeholder: 'Pretraga...',
					showingItems: 'Prikazane Stavke:',
					selectedItems: 'Odabrane Stavke:',
					totalItems: 'Ukupno Stavki:',
					size: 'Veličina Stranice:',
					first: 'Prva Stranica',
					next: 'Sledeća Stranica',
					previous: 'Prethodna Stranica',
					last: 'Poslednja Stranica'
				},
				menu: {
					text: 'Odaberite kolonu:'
				},
				sort: {
					ascending: 'Sortiraj po rastućem redosledu',
					descending: 'Sortiraj po opadajućem redosledu',
					none: 'Bez Sortiranja',
					remove: 'Ukloni Sortiranje'
				},
				column: {
					hide: 'Sakrij Kolonu'
				},
				aggregation: {
					count: 'ukupno redova: ',
					sum: 'ukupno: ',
					avg: 'prosecno: ',
					min: 'minimum: ',
					max: 'maksimum: '
				},
				pinning: {
					pinLeft: 'Zakači Levo',
					pinRight: 'Zakači Desno',
					unpin: 'Otkači'
				},
				columnMenu: {
					close: 'Zatvori'
				},
				gridMenu: {
					aria: {
						buttonLabel: 'Rešetkasti Meni'
					},
					columns: 'Kolone:',
					importerTitle: 'Importuj fajl',
					exporterAllAsCsv: 'Eksportuj sve podatke kao csv',
					exporterVisibleAsCsv: 'Eksportuj vidljive podatke kao csv',
					exporterSelectedAsCsv: 'Eksportuj obeležene podatke kao csv',
					exporterAllAsPdf: 'Eksportuj sve podatke kao pdf',
					exporterVisibleAsPdf: 'Eksportuj vidljive podake kao pdf',
					exporterSelectedAsPdf: 'Eksportuj odabrane podatke kao pdf',
					exporterAllAsExcel: 'Eksportuj sve podatke kao excel',
					exporterVisibleAsExcel: 'Eksportuj vidljive podatke kao excel',
					exporterSelectedAsExcel: 'Eksportuj odabrane podatke kao excel',
					clearAllFilters: 'Obriši sve filtere'
				},
				importer: {
					noHeaders: 'Kolone se nisu mogle podeliti, da li fajl poseduje heder?',
					noObjects: 'Objecti nisu mogli biti podeljeni, da li je bilo i drugih podataka sem hedera?',
					invalidCsv: 'Fajl nije bilo moguće procesirati, da li je ispravni CSV?',
					invalidJson: 'Fajl nije bilo moguće procesirati, da li je ispravni JSON',
					jsonNotArray: 'Importovani json fajl mora da sadrži niz, prekidam operaciju.'
				},
				pagination: {
					aria: {
						pageToFirst: 'Prva stranica',
						pageBack: 'Stranica pre',
						pageSelected: 'Odabrana stranica',
						pageForward: 'Sledeća stranica',
						pageToLast: 'Poslednja stranica'
					},
					sizes: 'stavki po stranici',
					totalItems: 'stavke',
					through: 'kroz',
					of: 'od'
				},
				grouping: {
					group: 'Grupiši',
					ungroup: 'Odrupiši',
					aggregate_count: 'Agg: Broj',
					aggregate_sum: 'Agg: Suma',
					aggregate_max: 'Agg: Maksimum',
					aggregate_min: 'Agg: Minimum',
					aggregate_avg: 'Agg: Prosečna',
					aggregate_remove: 'Agg: Ukloni'
				},
				validate: {
					error: 'Greška:',
					minLength: 'Vrednost bi trebala da bude duga bar THRESHOLD karaktera.',
					maxLength: 'Vrednost bi trebalo da bude najviše duga THRESHOLD karaktera.',
					required: 'Portreba je vrednost.'
				}
			});
			return $delegate;
		}]);
	}]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('ru', {
        headerCell: {
          aria: {
            defaultFilterLabel: 'Фильтр столбца',
            removeFilter: 'Удалить фильтр',
            columnMenuButtonLabel: 'Меню столбца'
          },
          priority: 'Приоритет:',
          filterLabel: "Фильтр столбца: "
        },
        aggregate: {
          label: 'элементы'
        },
        groupPanel: {
          description: 'Для группировки по столбцу перетащите сюда его название.'
        },
        search: {
          placeholder: 'Поиск...',
          showingItems: 'Показать элементы:',
          selectedItems: 'Выбранные элементы:',
          totalItems: 'Всего элементов:',
          size: 'Размер страницы:',
          first: 'Первая страница',
          next: 'Следующая страница',
          previous: 'Предыдущая страница',
          last: 'Последняя страница'
        },
        menu: {
          text: 'Выбрать столбцы:'
        },
        sort: {
          ascending: 'По возрастанию',
          descending: 'По убыванию',
          none: 'Без сортировки',
          remove: 'Убрать сортировку'
        },
        column: {
          hide: 'Спрятать столбец'
        },
        aggregation: {
          count: 'всего строк: ',
          sum: 'итого: ',
          avg: 'среднее: ',
          min: 'мин: ',
          max: 'макс: '
        },
				pinning: {
					pinLeft: 'Закрепить слева',
					pinRight: 'Закрепить справа',
					unpin: 'Открепить'
				},
        columnMenu: {
          close: 'Закрыть'
        },
        gridMenu: {
          aria: {
            buttonLabel: 'Меню'
          },
          columns: 'Столбцы:',
          importerTitle: 'Импортировать файл',
          exporterAllAsCsv: 'Экспортировать всё в CSV',
          exporterVisibleAsCsv: 'Экспортировать видимые данные в CSV',
          exporterSelectedAsCsv: 'Экспортировать выбранные данные в CSV',
          exporterAllAsPdf: 'Экспортировать всё в PDF',
          exporterVisibleAsPdf: 'Экспортировать видимые данные в PDF',
          exporterSelectedAsPdf: 'Экспортировать выбранные данные в PDF',
          exporterAllAsExcel: 'Экспортировать всё в Excel',
          exporterVisibleAsExcel: 'Экспортировать видимые данные в Excel',
          exporterSelectedAsExcel: 'Экспортировать выбранные данные в Excel',
          clearAllFilters: 'Очистить все фильтры'
        },
        importer: {
          noHeaders: 'Не удалось получить названия столбцов, есть ли в файле заголовок?',
          noObjects: 'Не удалось получить данные, есть ли в файле строки кроме заголовка?',
          invalidCsv: 'Не удалось обработать файл, это правильный CSV-файл?',
          invalidJson: 'Не удалось обработать файл, это правильный JSON?',
          jsonNotArray: 'Импортируемый JSON-файл должен содержать массив, операция отменена.'
        },
        pagination: {
          aria: {
            pageToFirst: 'Первая страница',
            pageBack: 'Предыдущая страница',
            pageSelected: 'Выбранная страница',
            pageForward: 'Следующая страница',
            pageToLast: 'Последняя страница'
          },
          sizes: 'строк на страницу',
          totalItems: 'строк',
          through: 'по',
          of: 'из'
        },
        grouping: {
          group: 'Группировать',
          ungroup: 'Разгруппировать',
          aggregate_count: 'Группировать: Count',
          aggregate_sum: 'Для группы: Сумма',
          aggregate_max: 'Для группы: Максимум',
          aggregate_min: 'Для группы: Минимум',
          aggregate_avg: 'Для группы: Среднее',
          aggregate_remove: 'Для группы: Пусто'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function() {
	angular.module('ui.grid').config(['$provide', function($provide) {
		$provide.decorator('i18nService', ['$delegate', function($delegate) {
			$delegate.add('sk', {
				headerCell: {
					aria: {
						defaultFilterLabel: 'Filter pre stĺpec',
						removeFilter: 'Odstrániť filter',
						columnMenuButtonLabel: 'Menu pre stĺpec',
						column: 'Stĺpec'
					},
					priority: 'Priorita:',
					filterLabel: "Filter pre stĺpec: "
				},
				aggregate: {
					label: 'položky'
				},
				groupPanel: {
					description: 'Pretiahni sem názov stĺpca pre zoskupenie podľa toho stĺpca.'
				},
				search: {
					aria: {
						selected: 'Označený riadok',
						notSelected: 'Neoznačený riadok'
					},
					placeholder: 'Hľadaj...',
					showingItems: 'Zobrazujem položky:',
					selectedItems: 'Vybraté položky:',
					totalItems: 'Počet položiek:',
					size: 'Počet:',
					first: 'Prvá strana',
					next: 'Ďalšia strana',
					previous: 'Predchádzajúca strana',
					last: 'Posledná strana'
				},
				menu: {
					text: 'Vyberte stĺpce:'
				},
				sort: {
					ascending: 'Zotriediť vzostupne',
					descending: 'Zotriediť zostupne',
					none: 'Nezotriediť',
					remove: 'Vymazať triedenie'
				},
				column: {
					hide: 'Skryť stĺpec'
				},
				aggregation: {
					count: 'počet riadkov: ',
					sum: 'spolu: ',
					avg: 'avg: ',
					min: 'min: ',
					max: 'max: '
				},
				pinning: {
					pinLeft: 'Pripnúť vľavo',
					pinRight: 'Pripnúť vpravo',
					unpin: 'Odopnúť'
				},
				columnMenu: {
					close: 'Zavrieť'
				},
				gridMenu: {
					aria: {
						buttonLabel: 'Grid Menu'
					},
					columns: 'Stĺpce:',
					importerTitle: 'Importovať súbor',
					exporterAllAsCsv: 'Exportovať všetky údaje ako CSV',
					exporterVisibleAsCsv: 'Exportovť viditeľné údaje ako CSV',
					exporterSelectedAsCsv: 'Exportovať označené údaje ako CSV',
					exporterAllAsPdf: 'Exportovať všetky údaje ako pdf',
					exporterVisibleAsPdf: 'Exportovať viditeľné údaje ako pdf',
					exporterSelectedAsPdf: 'Exportovať označené údaje ako pdf',
					exporterAllAsExcel: 'Exportovať všetky údaje ako excel',
					exporterVisibleAsExcel: 'Exportovať viditeľné údaje ako excel',
					exporterSelectedAsExcel: 'Exportovať označené údaje ako excel',
					clearAllFilters: 'Zrušiť všetky filtre'
				},
				importer: {
					noHeaders: 'Názvy stĺpcov sa nedali odvodiť, má súbor hlavičku?',
					noObjects: 'Objekty nebolo možné odvodiť, existovali iné údaje v súbore ako hlavičky?',
					invalidCsv: 'Súbor sa nepodarilo spracovať, je to platný súbor CSV?',
					invalidJson: 'Súbor nebolo možné spracovať, je to platný súbor typu Json?',
					jsonNotArray: 'Importovaný súbor json musí obsahovať pole, ukončujem.'
				},
				pagination: {
					aria: {
						pageToFirst: 'Strana na začiatok',
						pageBack: 'Strana dozadu',
						pageSelected: 'Označená strana',
						pageForward: 'Strana dopredu',
						pageToLast: 'Strana na koniec'
					},
					sizes: 'položky na stranu',
					totalItems: 'položky spolu',
					through: 'do konca',
					of: 'z'
				},
				grouping: {
					group: 'Zoskupiť',
					ungroup: 'Zrušiť zoskupenie',
					aggregate_count: 'Agg: Počet',

					aggregate_sum: 'Agg: Suma',
					aggregate_max: 'Agg: Max',
					aggregate_min: 'Agg: Min',
					aggregate_avg: 'Agg: Avg',
					aggregate_remove: 'Agg: Zrušiť'
				},
				validate: {
					error: 'Chyba:',
					minLength: 'Hodnota by mala mať aspoň THRESHOLD znakov dlhá.',
					maxLength: 'Hodnota by mala byť maximálne THRESHOLD znakov dlhá.',
					required: 'Vyžaduje sa hodnota.'
				}
			});
			return $delegate;
		}]);
	}]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('sv', {
        headerCell: {
          aria: {
            defaultFilterLabel: 'Kolumnfilter',
            removeFilter: 'Ta bort filter',
            columnMenuButtonLabel: 'Kolumnmeny',
            column: 'Kolumn'
          },
          priority: 'Prioritet:',
          filterLabel: "Filter för kolumn: "
        },
        aggregate: {
          label: 'Poster'
        },
        groupPanel: {
          description: 'Dra en kolumnrubrik hit och släpp den för att gruppera efter den kolumnen.'
        },
        search: {
          aria: {
            selected: 'Rad är vald',
            notSelected: 'Rad är inte vald'
          },
          placeholder: 'Sök...',
          showingItems: 'Visar:',
          selectedItems: 'Valda:',
          totalItems: 'Antal:',
          size: 'Sidstorlek:',
          first: 'Första sidan',
          next: 'Nästa sida',
          previous: 'Föregående sida',
          last: 'Sista sidan'
        },
        menu: {
          text: 'Välj kolumner:'
        },
        sort: {
          ascending: 'Sortera stigande',
          descending: 'Sortera fallande',
          none: 'Ingen sortering',
          remove: 'Inaktivera sortering'
        },
        column: {
          hide: 'Göm kolumn'
        },
        aggregation: {
          count: 'Antal rader: ',
          sum: 'Summa: ',
          avg: 'Genomsnitt: ',
          min: 'Min: ',
          max: 'Max: '
        },
        pinning: {
          pinLeft: 'Fäst vänster',
          pinRight: 'Fäst höger',
          unpin: 'Lösgör'
        },
        columnMenu: {
          close: 'Stäng'
        },
        gridMenu: {
          aria: {
              buttonLabel: 'Meny'
          },
          columns: 'Kolumner:',
          importerTitle: 'Importera fil',
          exporterAllAsCsv: 'Exportera all data som CSV',
          exporterVisibleAsCsv: 'Exportera synlig data som CSV',
          exporterSelectedAsCsv: 'Exportera markerad data som CSV',
          exporterAllAsPdf: 'Exportera all data som PDF',
          exporterVisibleAsPdf: 'Exportera synlig data som PDF',
          exporterSelectedAsPdf: 'Exportera markerad data som PDF',
          exporterAllAsExcel: 'Exportera all data till Excel',
          exporterVisibleAsExcel: 'Exportera synlig data till Excel',
          exporterSelectedAsExcel: 'Exportera markerad data till Excel',
          clearAllFilters: 'Nollställ alla filter'
        },
        importer: {
          noHeaders: 'Kolumnnamn kunde inte härledas. Har filen ett sidhuvud?',
          noObjects: 'Objekt kunde inte härledas. Har filen data undantaget sidhuvud?',
          invalidCsv: 'Filen kunde inte behandlas, är den en giltig CSV?',
          invalidJson: 'Filen kunde inte behandlas, är den en giltig JSON?',
          jsonNotArray: 'Importerad JSON-fil måste innehålla ett fält. Import avbruten.'
        },
        pagination: {
          aria: {
            pageToFirst: 'Gå till första sidan',
            pageBack: 'Gå en sida bakåt',
            pageSelected: 'Vald sida',
            pageForward: 'Gå en sida framåt',
            pageToLast: 'Gå till sista sidan'
          },
          sizes: 'Poster per sida',
          totalItems: 'Poster',
          through: 'genom',
          of: 'av'
        },
        grouping: {
          group: 'Gruppera',
          ungroup: 'Dela upp',
          aggregate_count: 'Agg: Antal',
          aggregate_sum: 'Agg: Summa',
          aggregate_max: 'Agg: Max',
          aggregate_min: 'Agg: Min',
          aggregate_avg: 'Agg: Genomsnitt',
          aggregate_remove: 'Agg: Ta bort'
        },
        validate: {
          error: 'Error:',
          minLength: 'Värdet borde vara minst THRESHOLD tecken långt.',
          maxLength: 'Värdet borde vara max THRESHOLD tecken långt.',
          required: 'Ett värde krävs.'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('ta', {
        aggregate: {
          label: 'உருப்படிகள்'
        },
        groupPanel: {
          description: 'ஒரு பத்தியை குழுவாக அமைக்க அப்பத்தியின் தலைப்பை இங்கே  இழுத்து வரவும் '
        },
        search: {
          placeholder: 'தேடல் ...',
          showingItems: 'உருப்படிகளை காண்பித்தல்:',
          selectedItems: 'தேர்ந்தெடுக்கப்பட்ட  உருப்படிகள்:',
          totalItems: 'மொத்த உருப்படிகள்:',
          size: 'பக்க அளவு: ',
          first: 'முதல் பக்கம்',
          next: 'அடுத்த பக்கம்',
          previous: 'முந்தைய பக்கம் ',
          last: 'இறுதி பக்கம்'
        },
        menu: {
          text: 'பத்திகளை தேர்ந்தெடு:'
        },
        sort: {
          ascending: 'மேலிருந்து கீழாக',
          descending: 'கீழிருந்து மேலாக',
          remove: 'வரிசையை நீக்கு'
        },
        column: {
          hide: 'பத்தியை மறைத்து வை '
        },
        aggregation: {
          count: 'மொத்த வரிகள்:',
          sum: 'மொத்தம்: ',
          avg: 'சராசரி: ',
          min: 'குறைந்தபட்ச: ',
          max: 'அதிகபட்ச: '
        },
        pinning: {
         pinLeft: 'இடதுபுறமாக தைக்க ',
          pinRight: 'வலதுபுறமாக தைக்க',
          unpin: 'பிரி'
        },
        gridMenu: {
          columns: 'பத்திகள்:',
          importerTitle: 'கோப்பு : படித்தல்',
          exporterAllAsCsv: 'எல்லா தரவுகளையும் கோப்பாக்கு: csv',
          exporterVisibleAsCsv: 'இருக்கும் தரவுகளை கோப்பாக்கு: csv',
          exporterSelectedAsCsv: 'தேர்ந்தெடுத்த தரவுகளை கோப்பாக்கு: csv',
          exporterAllAsPdf: 'எல்லா தரவுகளையும் கோப்பாக்கு: pdf',
          exporterVisibleAsPdf: 'இருக்கும் தரவுகளை கோப்பாக்கு: pdf',
          exporterSelectedAsPdf: 'தேர்ந்தெடுத்த தரவுகளை கோப்பாக்கு: pdf',
          clearAllFilters: 'Clear all filters'
        },
        importer: {
          noHeaders: 'பத்தியின் தலைப்புகளை பெற இயலவில்லை, கோப்பிற்கு தலைப்பு உள்ளதா?',
          noObjects: 'இலக்குகளை உருவாக்க முடியவில்லை, கோப்பில் தலைப்புகளை தவிர தரவு ஏதேனும் உள்ளதா? ',
          invalidCsv:	'சரிவர நடைமுறை படுத்த இயலவில்லை, கோப்பு சரிதானா? - csv',
          invalidJson: 'சரிவர நடைமுறை படுத்த இயலவில்லை, கோப்பு சரிதானா? - json',
          jsonNotArray: 'படித்த கோப்பில் வரிசைகள் உள்ளது, நடைமுறை ரத்து செய் : json'
        },
        pagination: {
          sizes		: 'உருப்படிகள் / பக்கம்',
          totalItems	: 'உருப்படிகள் '
        },
        grouping: {
          group	: 'குழு',
          ungroup : 'பிரி',
          aggregate_count	: 'மதிப்பீட்டு : எண்ணு',
          aggregate_sum : 'மதிப்பீட்டு : கூட்டல்',
          aggregate_max	: 'மதிப்பீட்டு : அதிகபட்சம்',
          aggregate_min	: 'மதிப்பீட்டு : குறைந்தபட்சம்',
          aggregate_avg	: 'மதிப்பீட்டு : சராசரி',
          aggregate_remove : 'மதிப்பீட்டு : நீக்கு'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function() {
	angular.module('ui.grid').config(['$provide', function($provide) {
		$provide.decorator('i18nService', ['$delegate', function($delegate) {
			$delegate.add('tr', {
				headerCell: {
					aria: {
						defaultFilterLabel: 'Sütun için filtre',
						removeFilter: 'Filtreyi Kaldır',
						columnMenuButtonLabel: 'Sütun Menüsü'
					},
					priority: 'Öncelik:',
					filterLabel: "Sütun için filtre: "
				},
				aggregate: {
					label: 'kayıtlar'
				},
				groupPanel: {
					description: 'Sütuna göre gruplamak için sütun başlığını buraya sürükleyin ve bırakın.'
				},
				search: {
					placeholder: 'Arama...',
					showingItems: 'Gösterilen Kayıt:',
					selectedItems: 'Seçili Kayıt:',
					totalItems: 'Toplam Kayıt:',
					size: 'Sayfa Boyutu:',
					first: 'İlk Sayfa',
					next: 'Sonraki Sayfa',
					previous: 'Önceki Sayfa',
					last: 'Son Sayfa'
				},
				menu: {
					text: 'Sütunları Seç:'
				},
				sort: {
					ascending: 'Artan Sırada Sırala',
					descending: 'Azalan Sırada Sırala',
					none: 'Sıralama Yapma',
					remove: 'Sıralamayı Kaldır'
				},
				column: {
					hide: 'Sütunu Gizle'
				},
				aggregation: {
					count: 'toplam satır: ',
					sum: 'toplam: ',
					avg: 'ort: ',
					min: 'min: ',
					max: 'maks: '
				},
				pinning: {
					pinLeft: 'Sola Sabitle',
					pinRight: 'Sağa Sabitle',
					unpin: 'Sabitlemeyi Kaldır'
				},
				columnMenu: {
					close: 'Kapat'
				},
				gridMenu: {
					aria: {
						buttonLabel: 'Tablo Menü'
					},
					columns: 'Sütunlar:',
					importerTitle: 'Dosya içeri aktar',
					exporterAllAsCsv: 'Bütün veriyi CSV olarak dışarı aktar',
					exporterVisibleAsCsv: 'Görünen veriyi CSV olarak dışarı aktar',
					exporterSelectedAsCsv: 'Seçili veriyi CSV olarak dışarı aktar',
					exporterAllAsPdf: 'Bütün veriyi PDF olarak dışarı aktar',
					exporterVisibleAsPdf: 'Görünen veriyi PDF olarak dışarı aktar',
					exporterSelectedAsPdf: 'Seçili veriyi PDF olarak dışarı aktar',
					clearAllFilters: 'Bütün filtreleri kaldır'
				},
				importer: {
					noHeaders: 'Sütun isimleri üretilemiyor, dosyanın bir başlığı var mı?',
					noObjects: 'Nesneler üretilemiyor, dosyada başlıktan başka bir veri var mı?',
					invalidCsv: 'Dosya işlenemedi, geçerli bir CSV dosyası mı?',
					invalidJson: 'Dosya işlenemedi, geçerli bir Json dosyası mı?',
					jsonNotArray: 'Alınan Json dosyasında bir dizi bulunmalıdır, işlem iptal ediliyor.'
				},
				pagination: {
					aria: {
						pageToFirst: 'İlk sayfaya',
						pageBack: 'Geri git',
						pageSelected: 'Seçili sayfa',
						pageForward: 'İleri git',
						pageToLast: 'Sona git'
					},
					sizes: 'Sayfadaki nesne sayısı',
					totalItems: 'kayıtlar',
					through: '', // note(fsw) : turkish dont have this preposition
					of: '' // note(fsw) : turkish dont have this preposition
				},
				grouping: {
					group: 'Grupla',
					ungroup: 'Gruplama',
					aggregate_count: 'Yekun: Sayı',
					aggregate_sum: 'Yekun: Toplam',
					aggregate_max: 'Yekun: Maks',
					aggregate_min: 'Yekun: Min',
					aggregate_avg: 'Yekun: Ort',
					aggregate_remove: 'Yekun: Sil'
				}
			});
			return $delegate;
		}]);
	}]);
})();

(function () {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('ua', {
        headerCell: {
          aria: {
            defaultFilterLabel: 'Фільтр стовпчика',
            removeFilter: 'Видалити фільтр',
            columnMenuButtonLabel: 'Меню ствпчика'
          },
          priority: 'Пріоритет:',
          filterLabel: "Фільтр стовпчика: "
        },
        aggregate: {
          label: 'елементи'
        },
        groupPanel: {
          description: 'Для групування за стовпчиком перетягніть сюди його назву.'
        },
        search: {
          placeholder: 'Пошук...',
          showingItems: 'Показати елементи:',
          selectedItems: 'Обрані елементи:',
          totalItems: 'Усього елементів:',
          size: 'Розмір сторінки:',
          first: 'Перша сторінка',
          next: 'Наступна сторінка',
          previous: 'Попередня сторінка',
          last: 'Остання сторінка'
        },
        menu: {
          text: 'Обрати ствпчики:'
        },
        sort: {
          ascending: 'За зростанням',
          descending: 'За спаданням',
          none: 'Без сортування',
          remove: 'Прибрати сортування'
        },
        column: {
          hide: 'Приховати стовпчик'
        },
        aggregation: {
          count: 'усього рядків: ',
          sum: 'ітого: ',
          avg: 'середнє: ',
          min: 'мін: ',
          max: 'макс: '
        },
				pinning: {
					pinLeft: 'Закріпити ліворуч',
					pinRight: 'Закріпити праворуч',
					unpin: 'Відкріпити'
				},
        columnMenu: {
          close: 'Закрити'
        },
        gridMenu: {
          aria: {
            buttonLabel: 'Меню'
          },
          columns: 'Стовпчики:',
          importerTitle: 'Імпортувати файл',
          exporterAllAsCsv: 'Експортувати все в CSV',
          exporterVisibleAsCsv: 'Експортувати видимі дані в CSV',
          exporterSelectedAsCsv: 'Експортувати обрані дані в CSV',
          exporterAllAsPdf: 'Експортувати все в PDF',
          exporterVisibleAsPdf: 'Експортувати видимі дані в PDF',
          exporterSelectedAsPdf: 'Експортувати обрані дані в PDF',
          clearAllFilters: 'Очистити всі фільтри'
        },
        importer: {
          noHeaders: 'Не вдалося отримати назви стовпчиків, чи є в файлі заголовок?',
          noObjects: 'Не вдалося отримати дані, чи є в файлі рядки окрім заголовка?',
          invalidCsv: 'Не вдалося обробити файл, чи це коректний CSV-файл?',
          invalidJson: 'Не вдалося обробити файл, чи це коректний JSON?',
          jsonNotArray: 'JSON-файл що імпортується повинен містити масив, операцію скасовано.'
        },
        pagination: {
          aria: {
            pageToFirst: 'Перша сторінка',
            pageBack: 'Попередня сторінка',
            pageSelected: 'Обрана сторінка',
            pageForward: 'Наступна сторінка',
            pageToLast: 'Остання сторінка'
          },
          sizes: 'рядків на сторінку',
          totalItems: 'рядків',
          through: 'по',
          of: 'з'
        },
        grouping: {
          group: 'Групувати',
          ungroup: 'Розгрупувати',
          aggregate_count: 'Групувати: Кількість',
          aggregate_sum: 'Для групи: Сума',
          aggregate_max: 'Для групи: Максимум',
          aggregate_min: 'Для групи: Мінімум',
          aggregate_avg: 'Для групи: Серднє',
          aggregate_remove: 'Для групи: Пусто'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function() {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('zh-cn', {
        headerCell: {
          aria: {
            defaultFilterLabel: '列过滤器',
            removeFilter: '移除过滤器',
            columnMenuButtonLabel: '列菜单'
          },
          priority: '优先级:',
          filterLabel: "列过滤器: "
        },
        aggregate: {
          label: '行'
        },
        groupPanel: {
          description: '拖曳表头到此处进行分组'
        },
        search: {
          placeholder: '查找',
          showingItems: '已显示行数：',
          selectedItems: '已选择行数：',
          totalItems: '总行数：',
          size: '每页显示行数：',
          first: '首页',
          next: '下一页',
          previous: '上一页',
          last: '末页'
        },
        menu: {
          text: '选择列：'
        },
        sort: {
          ascending: '升序',
          descending: '降序',
          none: '无序',
          remove: '取消排序'
        },
        column: {
          hide: '隐藏列'
        },
        aggregation: {
          count: '计数：',
          sum: '求和：',
          avg: '均值：',
          min: '最小值：',
          max: '最大值：'
        },
        pinning: {
          pinLeft: '左侧固定',
          pinRight: '右侧固定',
          unpin: '取消固定'
        },
        columnMenu: {
          close: '关闭'
        },
        gridMenu: {
          aria: {
            buttonLabel: '表格菜单'
          },
          columns: '列：',
          importerTitle: '导入文件',
          exporterAllAsCsv: '导出全部数据到CSV',
          exporterVisibleAsCsv: '导出可见数据到CSV',
          exporterSelectedAsCsv: '导出已选数据到CSV',
          exporterAllAsPdf: '导出全部数据到PDF',
          exporterVisibleAsPdf: '导出可见数据到PDF',
          exporterSelectedAsPdf: '导出已选数据到PDF',
          clearAllFilters: '清除所有过滤器'
        },
        importer: {
          noHeaders: '无法获取列名，确定文件包含表头？',
          noObjects: '无法获取数据，确定文件包含数据？',
          invalidCsv: '无法处理文件，确定是合法的CSV文件？',
          invalidJson: '无法处理文件，确定是合法的JSON文件？',
          jsonNotArray: '导入的文件不是JSON数组！'
        },
        pagination: {
          aria: {
            pageToFirst: '第一页',
            pageBack: '上一页',
            pageSelected: '当前页',
            pageForward: '下一页',
            pageToLast: '最后一页'
          },
          sizes: '行每页',
          totalItems: '行',
          through: '至',
          of: '共'
        },
        grouping: {
          group: '分组',
          ungroup: '取消分组',
          aggregate_count: '合计: 计数',
          aggregate_sum: '合计: 求和',
          aggregate_max: '合计: 最大',
          aggregate_min: '合计: 最小',
          aggregate_avg: '合计: 平均',
          aggregate_remove: '合计: 移除'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function() {
  angular.module('ui.grid').config(['$provide', function($provide) {
    $provide.decorator('i18nService', ['$delegate', function($delegate) {
      $delegate.add('zh-tw', {
        aggregate: {
          label: '行'
        },
        groupPanel: {
          description: '拖曳表頭到此處進行分組'
        },
        search: {
          placeholder: '查找',
          showingItems: '已顯示行數：',
          selectedItems: '已選擇行數：',
          totalItems: '總行數：',
          size: '每頁顯示行數：',
          first: '首頁',
          next: '下壹頁',
          previous: '上壹頁',
          last: '末頁'
        },
        menu: {
          text: '選擇列：'
        },
        sort: {
          ascending: '升序',
          descending: '降序',
          remove: '取消排序'
        },
        column: {
          hide: '隱藏列'
        },
        aggregation: {
          count: '計數：',
          sum: '求和：',
          avg: '均值：',
          min: '最小值：',
          max: '最大值：'
        },
        pinning: {
          pinLeft: '左側固定',
          pinRight: '右側固定',
          unpin: '取消固定'
        },
        gridMenu: {
          columns: '列：',
          importerTitle: '導入文件',
          exporterAllAsCsv: '導出全部數據到CSV',
          exporterVisibleAsCsv: '導出可見數據到CSV',
          exporterSelectedAsCsv: '導出已選數據到CSV',
          exporterAllAsPdf: '導出全部數據到PDF',
          exporterVisibleAsPdf: '導出可見數據到PDF',
          exporterSelectedAsPdf: '導出已選數據到PDF',
          clearAllFilters: '清除所有过滤器'
        },
        importer: {
          noHeaders: '無法獲取列名，確定文件包含表頭？',
          noObjects: '無法獲取數據，確定文件包含數據？',
          invalidCsv: '無法處理文件，確定是合法的CSV文件？',
          invalidJson: '無法處理文件，確定是合法的JSON文件？',
          jsonNotArray: '導入的文件不是JSON數組！'
        },
        pagination: {
          sizes: '行每頁',
          totalItems: '行'
        }
      });
      return $delegate;
    }]);
  }]);
})();

(function () {
  'use strict';

  /**
   * @ngdoc overview
   * @name ui.grid.importer
   * @description
   *
   * # ui.grid.importer
   *
   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
   *
   * This module provides the ability to import data into the grid. It
   * uses the column defs to work out which data belongs in which column,
   * and creates entities from a configured class (typically a $resource).
   *
   * If the rowEdit feature is enabled, it also calls save on those newly
   * created objects, and then displays any errors in the imported data.
   *
   * Currently the importer imports only CSV and json files, although provision has been
   * made to process other file formats, and these can be added over time.
   *
   * For json files, the properties within each object in the json must match the column names
   * (to put it another way, the importer doesn't process the json, it just copies the objects
   * within the json into a new instance of the specified object type)
   *
   * For CSV import, the default column identification relies on each column in the
   * header row matching a column.name or column.displayName. Optionally, a column identification
   * callback can be used.  This allows matching using other attributes, which is particularly
   * useful if your application has internationalised column headings (i.e. the headings that
   * the user sees don't match the column names).
   *
   * The importer makes use of the grid menu as the UI for requesting an
   * import.
   *
   * <div ui-grid-importer></div>
   */

  var module = angular.module('ui.grid.importer', ['ui.grid']);

  /**
   *  @ngdoc object
   *  @name ui.grid.importer.constant:uiGridImporterConstants
   *
   *  @description constants available in importer module
   */

  module.constant('uiGridImporterConstants', {
    featureName: 'importer'
  });

  /**
   *  @ngdoc service
   *  @name ui.grid.importer.service:uiGridImporterService
   *
   *  @description Services for importer feature
   */
  module.service('uiGridImporterService', ['$q', 'uiGridConstants', 'uiGridImporterConstants', 'gridUtil', '$compile', '$interval', 'i18nService', '$window',
    function ($q, uiGridConstants, uiGridImporterConstants, gridUtil, $compile, $interval, i18nService, $window) {

      var service = {

        initializeGrid: function ($scope, grid) {

          // add feature namespace and any properties to grid for needed state
          grid.importer = {
            $scope: $scope
          };

          this.defaultGridOptions(grid.options);

          /**
           *  @ngdoc object
           *  @name ui.grid.importer.api:PublicApi
           *
           *  @description Public Api for importer feature
           */
          var publicApi = {
            events: {
              importer: {
              }
            },
            methods: {
              importer: {
                /**
                 * @ngdoc function
                 * @name importFile
                 * @methodOf  ui.grid.importer.api:PublicApi
                 * @description Imports a file into the grid using the file object
                 * provided.  Bypasses the grid menu
                 * @param {File} fileObject the file we want to import, as a javascript
                 * File object
                 */
                importFile: function ( fileObject ) {
                  service.importThisFile( grid, fileObject );
                }
              }
            }
          };

          grid.api.registerEventsFromObject(publicApi.events);

          grid.api.registerMethodsFromObject(publicApi.methods);

          if ( grid.options.enableImporter && grid.options.importerShowMenu ) {
            if ( grid.api.core.addToGridMenu ) {
              service.addToMenu( grid );
            } else {
              // order of registration is not guaranteed, register in a little while
              $interval( function() {
                if (grid.api.core.addToGridMenu) {
                  service.addToMenu( grid );
                }
              }, 100, 1);
            }
          }
        },


        defaultGridOptions: function (gridOptions) {
          // default option to true unless it was explicitly set to false
          /**
           * @ngdoc object
           * @name ui.grid.importer.api:GridOptions
           *
           * @description GridOptions for importer feature, these are available to be
           * set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
           */

          /**
           * @ngdoc property
           * @propertyOf ui.grid.importer.api:GridOptions
           * @name enableImporter
           * @description Whether or not importer is enabled.  Automatically set
           * to false if the user's browser does not support the required fileApi.
           * Otherwise defaults to true.
           *
           */
          if (gridOptions.enableImporter  || gridOptions.enableImporter === undefined) {
            if ( !($window.hasOwnProperty('File') && $window.hasOwnProperty('FileReader') && $window.hasOwnProperty('FileList') && $window.hasOwnProperty('Blob')) ) {
              gridUtil.logError('The File APIs are not fully supported in this browser, grid importer cannot be used.');
              gridOptions.enableImporter = false;
            } else {
              gridOptions.enableImporter = true;
            }
          } else {
            gridOptions.enableImporter = false;
          }

          /**
           * @ngdoc method
           * @name importerProcessHeaders
           * @methodOf ui.grid.importer.api:GridOptions
           * @description A callback function that will process headers using custom
           * logic.  Set this callback function if the headers that your user will provide in their
           * import file don't necessarily match the grid header or field names.  This might commonly
           * occur where your application is internationalised, and therefore the field names
           * that the user recognises are in a different language than the field names that
           * ui-grid knows about.
           *
           * Defaults to the internal `processHeaders` method, which seeks to match using both
           * displayName and column.name.  Any non-matching columns are discarded.
           *
           * Your callback routine should respond by processing the header array, and returning an array
           * of matching column names.  A null value in any given position means "don't import this column"
           *
           * <pre>
           *      gridOptions.importerProcessHeaders: function( grid, headerArray ) {
           *        var myHeaderColumns = [];
           *        var thisCol;
           *        headerArray.forEach( function( value, index ) {
           *          thisCol = mySpecialLookupFunction( value );
           *          myHeaderColumns.push( thisCol.name );
           *        });
           *
           *        return myHeaderCols;
           *      })
           * </pre>
           * @param {Grid} grid the grid we're importing into
           * @param {array} headerArray an array of the text from the first row of the csv file,
           * which you need to match to column.names
           * @returns {array} array of matching column names, in the same order as the headerArray
           *
           */
          gridOptions.importerProcessHeaders = gridOptions.importerProcessHeaders || service.processHeaders;

          /**
           * @ngdoc method
           * @name importerHeaderFilter
           * @methodOf ui.grid.importer.api:GridOptions
           * @description A callback function that will filter (usually translate) a single
           * header.  Used when you want to match the passed in column names to the column
           * displayName after the header filter.
           *
           * Your callback routine needs to return the filtered header value.
           * <pre>
           *      gridOptions.importerHeaderFilter: function( displayName ) {
           *        return $translate.instant( displayName );
           *      })
           * </pre>
           *
           * or:
           * <pre>
           *      gridOptions.importerHeaderFilter: $translate.instant
           * </pre>
           * @param {string} displayName the displayName that we'd like to translate
           * @returns {string} the translated name
           *
           */
          gridOptions.importerHeaderFilter = gridOptions.importerHeaderFilter || function( displayName ) { return displayName; };

          /**
           * @ngdoc method
           * @name importerErrorCallback
           * @methodOf ui.grid.importer.api:GridOptions
           * @description A callback function that provides custom error handling, rather
           * than the standard grid behaviour of an alert box and a console message.  You
           * might use this to internationalise the console log messages, or to write to a
           * custom logging routine that returned errors to the server.
           *
           * <pre>
           *      gridOptions.importerErrorCallback: function( grid, errorKey, consoleMessage, context ) {
           *        myUserDisplayRoutine( errorKey );
           *        myLoggingRoutine( consoleMessage, context );
           *      })
           * </pre>
           * @param {Grid} grid the grid we're importing into, may be useful if you're positioning messages
           * in some way
           * @param {string} errorKey one of the i18n keys the importer can return - importer.noHeaders,
           * importer.noObjects, importer.invalidCsv, importer.invalidJson, importer.jsonNotArray
           * @param {string} consoleMessage the English console message that importer would have written
           * @param {object} context the context data that importer would have appended to that console message,
           * often the file content itself or the element that is in error
           *
           */
          if ( !gridOptions.importerErrorCallback ||  typeof(gridOptions.importerErrorCallback) !== 'function' ) {
            delete gridOptions.importerErrorCallback;
          }

          /**
           * @ngdoc method
           * @name importerDataAddCallback
           * @methodOf ui.grid.importer.api:GridOptions
           * @description A mandatory callback function that adds data to the source data array.  The grid
           * generally doesn't add rows to the source data array, it is tidier to handle this through a user
           * callback.
           *
           * <pre>
           *      gridOptions.importerDataAddCallback: function( grid, newObjects ) {
           *        $scope.myData = $scope.myData.concat( newObjects );
           *      })
           * </pre>
           * @param {Grid} grid the grid we're importing into, may be useful in some way
           * @param {array} newObjects an array of new objects that you should add to your data
           *
           */
          if ( gridOptions.enableImporter === true && !gridOptions.importerDataAddCallback ) {
            gridUtil.logError("You have not set an importerDataAddCallback, importer is disabled");
            gridOptions.enableImporter = false;
          }

          /**
           * @ngdoc object
           * @name importerNewObject
           * @propertyOf  ui.grid.importer.api:GridOptions
           * @description An object on which we call `new` to create each new row before inserting it into
           * the data array.  Typically this would be a $resource entity, which means that if you're using
           * the rowEdit feature, you can directly call save on this entity when the save event is triggered.
           *
           * Defaults to a vanilla javascript object
           *
           * @example
           * <pre>
           *   gridOptions.importerNewObject = MyRes;
           * </pre>
           *
           */

          /**
           * @ngdoc property
           * @propertyOf ui.grid.importer.api:GridOptions
           * @name importerShowMenu
           * @description Whether or not to show an item in the grid menu.  Defaults to true.
           *
           */
          gridOptions.importerShowMenu = gridOptions.importerShowMenu !== false;

          /**
           * @ngdoc method
           * @methodOf ui.grid.importer.api:GridOptions
           * @name importerObjectCallback
           * @description A callback that massages the data for each object.  For example,
           * you might have data stored as a code value, but display the decode.  This callback
           * can be used to change the decoded value back into a code.  Defaults to doing nothing.
           * @param {Grid} grid in case you need it
           * @param {object} newObject the new object as importer has created it, modify it
           * then return the modified version
           * @returns {object} the modified object
           * @example
           * <pre>
           *   gridOptions.importerObjectCallback = function ( grid, newObject ) {
           *     switch newObject.status {
           *       case 'Active':
           *         newObject.status = 1;
           *         break;
           *       case 'Inactive':
           *         newObject.status = 2;
           *         break;
           *     }
           *     return newObject;
           *   };
           * </pre>
           */
          gridOptions.importerObjectCallback = gridOptions.importerObjectCallback || function( grid, newObject ) { return newObject; };
        },


        /**
         * @ngdoc function
         * @name addToMenu
         * @methodOf  ui.grid.importer.service:uiGridImporterService
         * @description Adds import menu item to the grid menu,
         * allowing the user to request import of a file
         * @param {Grid} grid the grid into which data should be imported
         */
        addToMenu: function ( grid ) {
          grid.api.core.addToGridMenu( grid, [
            {
              title: i18nService.getSafeText('gridMenu.importerTitle'),
              order: 150
            },
            {
              templateUrl: 'ui-grid/importerMenuItemContainer',
              action: function () {
                this.grid.api.importer.importAFile( grid );
              },
              order: 151
            }
          ]);
        },


        /**
         * @ngdoc function
         * @name importThisFile
         * @methodOf ui.grid.importer.service:uiGridImporterService
         * @description Imports the provided file into the grid using the file object
         * provided.  Bypasses the grid menu
         * @param {Grid} grid the grid we're importing into
         * @param {File} fileObject the file we want to import, as returned from the File
         * javascript object
         */
        importThisFile: function ( grid, fileObject ) {
          if (!fileObject) {
            gridUtil.logError( 'No file object provided to importThisFile, should be impossible, aborting');
            return;
          }

          var reader = new FileReader();

          switch ( fileObject.type ) {
            case 'application/json':
              reader.onload = service.importJsonClosure( grid );
              break;
            default:
              reader.onload = service.importCsvClosure( grid );
              break;
          }

          reader.readAsText( fileObject );
        },


        /**
         * @ngdoc function
         * @name importJson
         * @methodOf ui.grid.importer.service:uiGridImporterService
         * @description Creates a function that imports a json file into the grid.
         * The json data is imported into new objects of type `gridOptions.importerNewObject`,
         * and if the rowEdit feature is enabled the rows are marked as dirty
         * @param {Grid} grid the grid we want to import into
         * @return {function} Function that receives the file that we want to import, as
         * a FileObject as an argument
         */
        importJsonClosure: function( grid ) {
          return function( importFile ) {
            var newObjects = [],
              newObject,
              importArray = service.parseJson( grid, importFile );

            if (importArray === null) {
              return;
            }
            importArray.forEach(  function( value ) {
              newObject = service.newObject( grid );
              angular.extend( newObject, value );
              newObject = grid.options.importerObjectCallback( grid, newObject );
              newObjects.push( newObject );
            });

            service.addObjects( grid, newObjects );
          };
        },


        /**
         * @ngdoc function
         * @name parseJson
         * @methodOf ui.grid.importer.service:uiGridImporterService
         * @description Parses a json file, returns the parsed data.
         * Displays an error if file doesn't parse
         * @param {Grid} grid the grid that we want to import into
         * @param {FileObject} importFile the file that we want to import, as
         * a FileObject
         * @returns {array} array of objects from the imported json
         */
        parseJson: function( grid, importFile ) {
          var loadedObjects;

          try {
            loadedObjects = JSON.parse( importFile.target.result );
          } catch (e) {
            service.alertError( grid, 'importer.invalidJson', 'File could not be processed, is it valid json? Content was: ', importFile.target.result );
            return;
          }

          if ( !Array.isArray( loadedObjects ) ) {
            service.alertError( grid, 'importer.jsonNotarray', 'Import failed, file is not an array, file was: ', importFile.target.result );
            return [];
          } else {
            return loadedObjects;
          }
        },



        /**
         * @ngdoc function
         * @name importCsvClosure
         * @methodOf ui.grid.importer.service:uiGridImporterService
         * @description Creates a function that imports a csv file into the grid
         * (allowing it to be used in the reader.onload event)
         * @param {Grid} grid the grid that we want to import into
         * @return {function} Function that receives the file that we want to import, as
         * a file object
         */
        importCsvClosure: function( grid ) {
          return function( importFile ) {
            var importArray = service.parseCsv( importFile );

            if ( !importArray || importArray.length < 1 ) {
              service.alertError( grid, 'importer.invalidCsv', 'File could not be processed, is it valid csv? Content was: ', importFile.target.result );
              return;
            }

            var newObjects = service.createCsvObjects( grid, importArray );

            if ( !newObjects || newObjects.length === 0 ) {
              service.alertError( grid, 'importer.noObjects', 'Objects were not able to be derived, content was: ', importFile.target.result );
              return;
            }

            service.addObjects( grid, newObjects );
          };
        },


        /**
         * @ngdoc function
         * @name parseCsv
         * @methodOf ui.grid.importer.service:uiGridImporterService
         * @description Parses a csv file into an array of arrays, with the first
         * array being the headers, and the remaining arrays being the data.
         * The logic for this comes from https://github.com/thetalecrafter/excel.js/blob/master/src/csv.js,
         * which is noted as being under the MIT license.  The code is modified to pass the jscs yoda condition
         * checker
         * @param {FileObject} importFile the file that we want to import, as a
         * file object
         */
        parseCsv: function( importFile ) {
          var csv = importFile.target.result;

          // use the CSV-JS library to parse
          return CSV.parse(csv);
        },


        /**
         * @ngdoc function
         * @name createCsvObjects
         * @methodOf ui.grid.importer.service:uiGridImporterService
         * @description Converts an array of arrays (representing the csv file)
         * into a set of objects.  Uses the provided `gridOptions.importerNewObject`
         * to create the objects, and maps the header row into the individual columns
         * using either `gridOptions.importerProcessHeaders`, or by using a native method
         * of matching to either the displayName, column name or column field of
         * the columns in the column defs.  The resulting objects will have attributes
         * that are named based on the column.field or column.name, in that order.
         * @param {Grid} grid the grid that we want to import into
         * @param {Array} importArray the data that we want to import, as an array
         */
        createCsvObjects: function( grid, importArray ) {
          // pull off header row and turn into headers
          var headerMapping = grid.options.importerProcessHeaders( grid, importArray.shift() );

          if ( !headerMapping || headerMapping.length === 0 ) {
            service.alertError( grid, 'importer.noHeaders', 'Column names could not be derived, content was: ', importArray );
            return [];
          }

          var newObjects = [],
            newObject;

          importArray.forEach( function( row ) {
            newObject = service.newObject( grid );
            if ( row !== null ) {
              row.forEach( function( field, index ) {
                if ( headerMapping[index] !== null ) {
                  newObject[ headerMapping[index] ] = field;
                }
              });
            }
            newObject = grid.options.importerObjectCallback( grid, newObject );
            newObjects.push( newObject );
          });

          return newObjects;
        },


        /**
         * @ngdoc function
         * @name processHeaders
         * @methodOf ui.grid.importer.service:uiGridImporterService
         * @description Determines the columns that the header row from
         * a csv (or other) file represents.
         * @param {Grid} grid the grid we're importing into
         * @param {array} headerRow the header row that we wish to match against
         * the column definitions
         * @returns {array} an array of the attribute names that should be used
         * for that column, based on matching the headers or creating the headers
         *
         */
        processHeaders: function( grid, headerRow ) {
          var headers = [];

          if ( !grid.options.columnDefs || grid.options.columnDefs.length === 0 ) {
            // we are going to create new columnDefs for all these columns, so just remove
            // spaces from the names to create fields
            headerRow.forEach( function( value ) {
              headers.push( value.replace( /[^0-9a-zA-Z\-_]/g, '_' ) );
            });
            return headers;
          }
          else {
            var lookupHash = service.flattenColumnDefs( grid, grid.options.columnDefs );
            headerRow.forEach(  function( value ) {
              if ( lookupHash[value] ) {
                headers.push( lookupHash[value] );
              }
              else if ( lookupHash[ value.toLowerCase() ] ) {
                headers.push( lookupHash[ value.toLowerCase() ] );
              }
              else {
                headers.push( null );
              }
            });
            return headers;
          }
        },


        /**
         * @name flattenColumnDefs
         * @methodOf ui.grid.importer.service:uiGridImporterService
         * @description Runs through the column defs and creates a hash of
         * the displayName, name and field, and of each of those values forced to lower case,
         * with each pointing to the field or name
         * (whichever is present).  Used to lookup column headers and decide what
         * attribute name to give to the resulting field.
         * @param {Grid} grid the grid we're importing into
         * @param {array} columnDefs the columnDefs that we should flatten
         * @returns {hash} the flattened version of the column def information, allowing
         * us to look up a value by `flattenedHash[ headerValue ]`
         */
        flattenColumnDefs: function( grid, columnDefs ) {
          var flattenedHash = {};

          columnDefs.forEach(  function( columnDef) {
            if ( columnDef.name ) {
              flattenedHash[ columnDef.name ] = columnDef.field || columnDef.name;
              flattenedHash[ columnDef.name.toLowerCase() ] = columnDef.field || columnDef.name;
            }

            if ( columnDef.field ) {
              flattenedHash[ columnDef.field ] = columnDef.field || columnDef.name;
              flattenedHash[ columnDef.field.toLowerCase() ] = columnDef.field || columnDef.name;
            }

            if ( columnDef.displayName ) {
              flattenedHash[ columnDef.displayName ] = columnDef.field || columnDef.name;
              flattenedHash[ columnDef.displayName.toLowerCase() ] = columnDef.field || columnDef.name;
            }

            if ( columnDef.displayName && grid.options.importerHeaderFilter ) {
              flattenedHash[ grid.options.importerHeaderFilter(columnDef.displayName) ] = columnDef.field || columnDef.name;
              flattenedHash[ grid.options.importerHeaderFilter(columnDef.displayName).toLowerCase() ] = columnDef.field || columnDef.name;
            }
          });

          return flattenedHash;
        },


        /**
         * @ngdoc function
         * @name addObjects
         * @methodOf ui.grid.importer.service:uiGridImporterService
         * @description Inserts our new objects into the grid data, and
         * sets the rows to dirty if the rowEdit feature is being used
         *
         * Does this by registering a watch on dataChanges, which essentially
         * is waiting on the result of the grid data watch, and downstream processing.
         *
         * When the callback is called, it deregisters itself - we don't want to run
         * again next time data is added.
         *
         * If we never get called, we deregister on destroy.
         *
         * @param {Grid} grid the grid we're importing into
         * @param {array} newObjects the objects we want to insert into the grid data
         * @returns {object} the new object
         */
        addObjects: function( grid, newObjects ) {
          if ( grid.api.rowEdit ) {
            var dataChangeDereg = grid.registerDataChangeCallback( function() {
              grid.api.rowEdit.setRowsDirty( newObjects );
              dataChangeDereg();
            }, [uiGridConstants.dataChange.ROW] );

            grid.importer.$scope.$on( '$destroy', dataChangeDereg );
          }

          grid.importer.$scope.$apply( grid.options.importerDataAddCallback( grid, newObjects ) );

        },


        /**
         * @ngdoc function
         * @name newObject
         * @methodOf ui.grid.importer.service:uiGridImporterService
         * @description Makes a new object based on `gridOptions.importerNewObject`,
         * or based on an empty object if not present
         * @param {Grid} grid the grid we're importing into
         * @returns {object} the new object
         */
        newObject: function( grid ) {
          if ( typeof(grid.options) !== "undefined" && typeof(grid.options.importerNewObject) !== "undefined" ) {
            return new grid.options.importerNewObject();
          }
          else {
            return {};
          }
        },


        /**
         * @ngdoc function
         * @name alertError
         * @methodOf ui.grid.importer.service:uiGridImporterService
         * @description Provides an internationalised user alert for the failure,
         * and logs a console message including diagnostic content.
         * Optionally, if the the `gridOptions.importerErrorCallback` routine
         * is defined, then calls that instead, allowing user specified error routines
         * @param {Grid} grid the grid we're importing into
         * @param {array} headerRow the header row that we wish to match against
         * the column definitions
         */
        alertError: function( grid, alertI18nToken, consoleMessage, context ) {
          if ( grid.options.importerErrorCallback ) {
            grid.options.importerErrorCallback( grid, alertI18nToken, consoleMessage, context );
          }
          else {
            $window.alert(i18nService.getSafeText( alertI18nToken ));
            gridUtil.logError(consoleMessage + context );
          }
        }
      };

      return service;

    }
  ]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.importer.directive:uiGridImporter
   *  @element div
   *  @restrict A
   *
   *  @description Adds importer features to grid
   *
   */
  module.directive('uiGridImporter', ['uiGridImporterConstants', 'uiGridImporterService', 'gridUtil', '$compile',
    function (uiGridImporterConstants, uiGridImporterService, gridUtil, $compile) {
      return {
        replace: true,
        priority: 0,
        require: '^uiGrid',
        scope: false,
        link: function ($scope, $elm, $attrs, uiGridCtrl) {
          uiGridImporterService.initializeGrid($scope, uiGridCtrl.grid);
        }
      };
    }
  ]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.importer.directive:uiGridImporterMenuItem
   *  @element div
   *  @restrict A
   *
   *  @description Handles the processing from the importer menu item - once a file is
   *  selected
   *
   */
  module.directive('uiGridImporterMenuItem', ['uiGridImporterConstants', 'uiGridImporterService', 'gridUtil', '$compile',
    function (uiGridImporterConstants, uiGridImporterService, gridUtil, $compile) {
      return {
        replace: true,
        priority: 0,
        require: '?^uiGrid',
        scope: false,
        templateUrl: 'ui-grid/importerMenuItem',
        link: function ($scope, $elm, $attrs, uiGridCtrl) {
          var grid;

          function handleFileSelect(event) {
            var target = event.srcElement || event.target;

            if (target && target.files && target.files.length === 1) {
              var fileObject = target.files[0];

              // Define grid if the uiGrid controller is present
              if (typeof(uiGridCtrl) !== 'undefined' && uiGridCtrl) {
                grid = uiGridCtrl.grid;

                uiGridImporterService.importThisFile( grid, fileObject );
                target.form.reset();
              }
              else {
                gridUtil.logError('Could not import file because UI Grid was not found.');
              }
            }
          }

          var fileChooser = $elm[0].querySelectorAll('.ui-grid-importer-file-chooser');

          if ( fileChooser.length !== 1 ) {
            gridUtil.logError('Found > 1 or < 1 file choosers within the menu item, error, cannot continue');
          }
          else {
            fileChooser[0].addEventListener('change', handleFileSelect, false);
          }
        }
      };
    }
  ]);
})();

(function() {
  'use strict';
  /**
   *  @ngdoc overview
   *  @name ui.grid.infiniteScroll
   *
   *  @description
   *
   * #ui.grid.infiniteScroll
   *
   * <div class="alert alert-warning" role="alert"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>
   *
   * This module provides infinite scroll functionality to ui-grid
   *
   */
  var module = angular.module('ui.grid.infiniteScroll', ['ui.grid']);
  /**
   *  @ngdoc service
   *  @name ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
   *
   *  @description Service for infinite scroll features
   */
  module.service('uiGridInfiniteScrollService', ['gridUtil', '$compile', '$rootScope', 'uiGridConstants', 'ScrollEvent', '$q', function (gridUtil, $compile, $rootScope, uiGridConstants, ScrollEvent, $q) {
    var service = {

      /**
       * @ngdoc function
       * @name initializeGrid
       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
       * @description This method register events and methods into grid public API
       */

      initializeGrid: function(grid, $scope) {
        service.defaultGridOptions(grid.options);

        if (!grid.options.enableInfiniteScroll) {
          return;
        }

        grid.infiniteScroll = { dataLoading: false };
        service.setScrollDirections( grid, grid.options.infiniteScrollUp, grid.options.infiniteScrollDown );
          grid.api.core.on.scrollEnd($scope, service.handleScroll);

        /**
         *  @ngdoc object
         *  @name ui.grid.infiniteScroll.api:PublicAPI
         *
         *  @description Public API for infinite scroll feature
         */
        var publicApi = {
          events: {
            infiniteScroll: {

              /**
               * @ngdoc event
               * @name needLoadMoreData
               * @eventOf ui.grid.infiniteScroll.api:PublicAPI
               * @description This event fires when scroll reaches bottom percentage of grid
               * and needs to load data
               */

              needLoadMoreData: function ($scope, fn) {
              },

              /**
               * @ngdoc event
               * @name needLoadMoreDataTop
               * @eventOf ui.grid.infiniteScroll.api:PublicAPI
               * @description This event fires when scroll reaches top percentage of grid
               * and needs to load data
               */

              needLoadMoreDataTop: function ($scope, fn) {
              }
            }
          },
          methods: {
            infiniteScroll: {

              /**
               * @ngdoc function
               * @name dataLoaded
               * @methodOf ui.grid.infiniteScroll.api:PublicAPI
               * @description Call this function when you have loaded the additional data
               * requested.  You should set scrollUp and scrollDown to indicate
               * whether there are still more pages in each direction.
               *
               * If you call dataLoaded without first calling `saveScrollPercentage` then we will
               * scroll the user to the start of the newly loaded data, which usually gives a smooth scroll
               * experience, but can give a jumpy experience with large `infiniteScrollRowsFromEnd` values, and
               * on variable speed internet connections.  Using `saveScrollPercentage` as demonstrated in the tutorial
               * should give a smoother scrolling experience for users.
               *
               * See infinite_scroll tutorial for example of usage
               * @param {boolean} scrollUp if set to false flags that there are no more pages upwards, so don't fire
               * any more infinite scroll events upward
               * @param {boolean} scrollDown if set to false flags that there are no more pages downwards, so don't
               * fire any more infinite scroll events downward
               * @returns {promise} a promise that is resolved when the grid scrolling is fully adjusted.  If you're
               * planning to remove pages, you should wait on this promise first, or you'll break the scroll positioning
               */
              dataLoaded: function( scrollUp, scrollDown ) {
                service.setScrollDirections(grid, scrollUp, scrollDown);

                return service.adjustScroll(grid).then(function() {
                  grid.infiniteScroll.dataLoading = false;
                });
              },

              /**
               * @ngdoc function
               * @name resetScroll
               * @methodOf ui.grid.infiniteScroll.api:PublicAPI
               * @description Call this function when you have taken some action that makes the current
               * scroll position invalid.  For example, if you're using external sorting and you've resorted
               * then you might reset the scroll, or if you've otherwise substantially changed the data, perhaps
               * you've reused an existing grid for a new data set
               *
               * You must tell us whether there is data upwards or downwards after the reset
               *
               * @param {boolean} scrollUp flag that there are pages upwards, fire
               * infinite scroll events upward
               * @param {boolean} scrollDown flag that there are pages downwards, so
               * fire infinite scroll events downward
               */
              resetScroll: function( scrollUp, scrollDown ) {
                service.setScrollDirections( grid, scrollUp, scrollDown);

                service.adjustInfiniteScrollPosition(grid, 0);
              },


              /**
               * @ngdoc function
               * @name saveScrollPercentage
               * @methodOf ui.grid.infiniteScroll.api:PublicAPI
               * @description Saves the scroll percentage and number of visible rows before you adjust the data,
               * used if you're subsequently going to call `dataRemovedTop` or `dataRemovedBottom`
               */
              saveScrollPercentage: function() {
                grid.infiniteScroll.prevScrollTop = grid.renderContainers.body.prevScrollTop;
                grid.infiniteScroll.previousVisibleRows = grid.getVisibleRowCount();
              },


              /**
               * @ngdoc function
               * @name dataRemovedTop
               * @methodOf ui.grid.infiniteScroll.api:PublicAPI
               * @description Adjusts the scroll position after you've removed data at the top
               * @param {boolean} scrollUp flag that there are pages upwards, fire
               * infinite scroll events upward
               * @param {boolean} scrollDown flag that there are pages downwards, so
               * fire infinite scroll events downward
               */
              dataRemovedTop: function( scrollUp, scrollDown ) {
                service.dataRemovedTop( grid, scrollUp, scrollDown );
              },

              /**
               * @ngdoc function
               * @name dataRemovedBottom
               * @methodOf ui.grid.infiniteScroll.api:PublicAPI
               * @description Adjusts the scroll position after you've removed data at the bottom
               * @param {boolean} scrollUp flag that there are pages upwards, fire
               * infinite scroll events upward
               * @param {boolean} scrollDown flag that there are pages downwards, so
               * fire infinite scroll events downward
               */
              dataRemovedBottom: function( scrollUp, scrollDown ) {
                service.dataRemovedBottom( grid, scrollUp, scrollDown );
              },

              /**
               * @ngdoc function
               * @name setScrollDirections
               * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
               * @description Sets the scrollUp and scrollDown flags, handling nulls and undefined,
               * and also sets the grid.suppressParentScroll
               * @param {boolean} scrollUp whether there are pages available up - defaults to false
               * @param {boolean} scrollDown whether there are pages available down - defaults to true
               */
              setScrollDirections:  function ( scrollUp, scrollDown ) {
                service.setScrollDirections( grid, scrollUp, scrollDown );
              }

            }
          }
        };
        grid.api.registerEventsFromObject(publicApi.events);
        grid.api.registerMethodsFromObject(publicApi.methods);
      },


      defaultGridOptions: function (gridOptions) {
        // default option to true unless it was explicitly set to false
        /**
         *  @ngdoc object
         *  @name ui.grid.infiniteScroll.api:GridOptions
         *
         *  @description GridOptions for infinite scroll feature, these are available to be
         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
         */

        /**
         *  @ngdoc object
         *  @name enableInfiniteScroll
         *  @propertyOf  ui.grid.infiniteScroll.api:GridOptions
         *  @description Enable infinite scrolling for this grid
         *  <br/>Defaults to true
         */
        gridOptions.enableInfiniteScroll = gridOptions.enableInfiniteScroll !== false;

        /**
         * @ngdoc property
         * @name infiniteScrollRowsFromEnd
         * @propertyOf ui.grid.class:GridOptions
         * @description This setting controls how close to the end of the dataset a user gets before
         * more data is requested by the infinite scroll, whether scrolling up or down.  This allows you to
         * 'prefetch' rows before the user actually runs out of scrolling.
         *
         * Note that if you set this value too high it may give jumpy scrolling behaviour, if you're getting
         * this behaviour you could use the `saveScrollPercentageMethod` right before loading your data, and we'll
         * preserve that scroll position
         *
         * <br> Defaults to 20
         */
        gridOptions.infiniteScrollRowsFromEnd = gridOptions.infiniteScrollRowsFromEnd || 20;

        /**
         * @ngdoc property
         * @name infiniteScrollUp
         * @propertyOf ui.grid.class:GridOptions
         * @description Whether you allow infinite scroll up, implying that the first page of data
         * you have displayed is in the middle of your data set.  If set to true then we trigger the
         * needMoreDataTop event when the user hits the top of the scrollbar.
         * <br> Defaults to false
         */
        gridOptions.infiniteScrollUp = gridOptions.infiniteScrollUp === true;

        /**
         * @ngdoc property
         * @name infiniteScrollDown
         * @propertyOf ui.grid.class:GridOptions
         * @description Whether you allow infinite scroll down, implying that the first page of data
         * you have displayed is in the middle of your data set.  If set to true then we trigger the
         * needMoreData event when the user hits the bottom of the scrollbar.
         * <br> Defaults to true
         */
        gridOptions.infiniteScrollDown = gridOptions.infiniteScrollDown !== false;
      },


      /**
       * @ngdoc function
       * @name setScrollDirections
       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
       * @description Sets the scrollUp and scrollDown flags, handling nulls and undefined,
       * and also sets the grid.suppressParentScroll
       * @param {grid} grid the grid we're operating on
       * @param {boolean} scrollUp whether there are pages available up - defaults to false
       * @param {boolean} scrollDown whether there are pages available down - defaults to true
       */
      setScrollDirections:  function ( grid, scrollUp, scrollDown ) {
        grid.infiniteScroll.scrollUp = ( scrollUp === true );
        grid.suppressParentScrollUp = ( scrollUp === true );

        grid.infiniteScroll.scrollDown = ( scrollDown !== false);
        grid.suppressParentScrollDown = ( scrollDown !== false);
      },


      /**
       * @ngdoc function
       * @name handleScroll
       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
       * @description Called whenever the grid scrolls, determines whether the scroll should
       * trigger an infinite scroll request for more data
       * @param {object} args the args from the event
       */
      handleScroll:  function (args) {
        // don't request data if already waiting for data, or if source is coming from ui.grid.adjustInfiniteScrollPosition() function
        if ( args.grid.infiniteScroll && args.grid.infiniteScroll.dataLoading || args.source === 'ui.grid.adjustInfiniteScrollPosition' ) {
          return;
        }

        if (args.y) {

          // If the user is scrolling very quickly all the way to the top/bottom, the scroll handler can get confused
          // about the direction. First we check if they've gone all the way, and data always is loaded in this case.
          if (args.y.percentage === 0) {
            args.grid.scrollDirection = uiGridConstants.scrollDirection.UP;
            service.loadData(args.grid);
          }
          else if (args.y.percentage === 1) {
            args.grid.scrollDirection = uiGridConstants.scrollDirection.DOWN;
            service.loadData(args.grid);
          }
          else { // Scroll position is somewhere in between top/bottom, so determine whether it's far enough to load more data.
            var percentage,
              targetPercentage = args.grid.options.infiniteScrollRowsFromEnd / args.grid.renderContainers.body.visibleRowCache.length;

            if (args.grid.scrollDirection === uiGridConstants.scrollDirection.UP ) {
              percentage = args.y.percentage;
              if (percentage <= targetPercentage) {
                service.loadData(args.grid);
              }
            }
            else if (args.grid.scrollDirection === uiGridConstants.scrollDirection.DOWN) {
              percentage = 1 - args.y.percentage;
              if (percentage <= targetPercentage) {
                service.loadData(args.grid);
              }
            }
          }
        }
      },


      /**
       * @ngdoc function
       * @name loadData
       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
       * @description This function fires 'needLoadMoreData' or 'needLoadMoreDataTop' event based on scrollDirection
       * and whether there are more pages upwards or downwards.  It also stores the number of rows that we had previously,
       * and clears out any saved scroll position so that we know whether or not the user calls `saveScrollPercentage`
       * @param {Grid} grid the grid we're working on
       */
      loadData: function (grid) {
        // save number of currently visible rows to calculate new scroll position later - we know that we want
        // to be at approximately the row we're currently at
        grid.infiniteScroll.previousVisibleRows = grid.renderContainers.body.visibleRowCache.length;
        grid.infiniteScroll.direction = grid.scrollDirection;
        delete grid.infiniteScroll.prevScrollTop;

        if (grid.scrollDirection === uiGridConstants.scrollDirection.UP && grid.infiniteScroll.scrollUp ) {
          grid.infiniteScroll.dataLoading = true;
          grid.api.infiniteScroll.raise.needLoadMoreDataTop();
        }
        else if (grid.scrollDirection === uiGridConstants.scrollDirection.DOWN && grid.infiniteScroll.scrollDown ) {
          grid.infiniteScroll.dataLoading = true;
          grid.api.infiniteScroll.raise.needLoadMoreData();
        }
      },


      /**
       * @ngdoc function
       * @name adjustScroll
       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
       * @description Once we are informed that data has been loaded, adjust the scroll position to account for that
       * addition and to make things look clean.
       *
       * If we're scrolling up we scroll to the first row of the old data set -
       * so we're assuming that you would have gotten to the top of the grid (from the 20% need more data trigger) by
       * the time the data comes back.  If we're scrolling down we scroll to the last row of the old data set - so we're
       * assuming that you would have gotten to the bottom of the grid (from the 80% need more data trigger) by the time
       * the data comes back.
       *
       * Neither of these are good assumptions, but making this a smoother experience really requires
       * that trigger to not be a percentage, and to be much closer to the end of the data (say, 5 rows off the end).  Even then
       * it'd be better still to actually run into the end.  But if the data takes a while to come back, they may have scrolled
       * somewhere else in the mean-time, in which case they'll get a jump back to the new data.  Anyway, this will do for
       * now, until someone wants to do better.
       * @param {Grid} grid the grid we're working on
       * @returns {promise} a promise that is resolved when scrolling has finished
       */
      adjustScroll: function(grid) {
        var promise = $q.defer();
        $rootScope.$applyAsync(function () {
          var viewportHeight, rowHeight, newVisibleRows, oldTop, newTop;

          viewportHeight = grid.getViewportHeight() + grid.headerHeight - grid.renderContainers.body.headerHeight - grid.scrollbarHeight;
          rowHeight = grid.options.rowHeight;

          if ( grid.infiniteScroll.direction === undefined ) {
            // called from initialize, tweak our scroll up a little
            service.adjustInfiniteScrollPosition(grid, 0);
          }

          newVisibleRows = grid.getVisibleRowCount();

          // in case not enough data is loaded to enable scroller - load more data
          var canvasHeight = rowHeight * newVisibleRows;
          if (grid.infiniteScroll.scrollDown && (viewportHeight > canvasHeight)) {
            grid.api.infiniteScroll.raise.needLoadMoreData();
          }

          if ( grid.infiniteScroll.direction === uiGridConstants.scrollDirection.UP ) {
            oldTop = grid.infiniteScroll.prevScrollTop || 0;
            newTop = oldTop + (newVisibleRows - grid.infiniteScroll.previousVisibleRows)*rowHeight;
            service.adjustInfiniteScrollPosition(grid, newTop);
            $rootScope.$applyAsync( function() {
              promise.resolve();
            });
          }

          if ( grid.infiniteScroll.direction === uiGridConstants.scrollDirection.DOWN ) {
            newTop = grid.infiniteScroll.prevScrollTop || (grid.infiniteScroll.previousVisibleRows*rowHeight - viewportHeight);
            service.adjustInfiniteScrollPosition(grid, newTop);
            $rootScope.$applyAsync( function() {
              promise.resolve();
            });
          }
        }, 0);

        return promise.promise;
      },


      /**
       * @ngdoc function
       * @name adjustInfiniteScrollPosition
       * @methodOf ui.grid.infiniteScroll.service:uiGridInfiniteScrollService
       * @description This function fires 'needLoadMoreData' or 'needLoadMoreDataTop' event based on scrollDirection
       * @param {Grid} grid the grid we're working on
       * @param {number} scrollTop the position through the grid that we want to scroll to
       */
      adjustInfiniteScrollPosition: function (grid, scrollTop) {
        var scrollEvent = new ScrollEvent(grid, null, null, 'ui.grid.adjustInfiniteScrollPosition'),
          visibleRows = grid.getVisibleRowCount(),
          viewportHeight = grid.getViewportHeight() + grid.headerHeight - grid.renderContainers.body.headerHeight - grid.scrollbarHeight,
          rowHeight = grid.options.rowHeight,
          scrollHeight = visibleRows*rowHeight-viewportHeight;

        // for infinite scroll, if there are pages upwards then never allow it to be at the zero position so the up button can be active
        if (scrollTop === 0 && grid.infiniteScroll.scrollUp) {
          // using pixels results in a relative scroll, hence we have to use percentage
          scrollEvent.y = {pixels: 1};
        }
        else {
          scrollEvent.y = {percentage: scrollTop/scrollHeight};
        }
        grid.scrollContainers('', scrollEvent);
      },


      /**
       * @ngdoc function
       * @name dataRemovedTop
       * @methodOf ui.grid.infiniteScroll.api:PublicAPI
       * @description Adjusts the scroll position after you've removed data at the top. You should
       * have called `saveScrollPercentage` before you remove the data, and if you're doing this in
       * response to a `needMoreData` you should wait until the promise from `loadData` has resolved
       * before you start removing data
       * @param {Grid} grid the grid we're working on
       * @param {boolean} scrollUp flag that there are pages upwards, fire
       * infinite scroll events upward
       * @param {boolean} scrollDown flag that there are pages downwards, so
       * fire infinite scroll events downward
       */
      dataRemovedTop: function( grid, scrollUp, scrollDown ) {
        var newVisibleRows, oldTop, newTop, rowHeight;
        service.setScrollDirections( grid, scrollUp, scrollDown );

        newVisibleRows = grid.renderContainers.body.visibleRowCache.length;
        oldTop = grid.infiniteScroll.prevScrollTop;
        rowHeight = grid.options.rowHeight;

        // since we removed from the top, our new scroll row will be the old scroll row less the number
        // of rows removed
        newTop = oldTop - ( grid.infiniteScroll.previousVisibleRows - newVisibleRows )*rowHeight;

        service.adjustInfiniteScrollPosition( grid, newTop );
      },

      /**
       * @ngdoc function
       * @name dataRemovedBottom
       * @methodOf ui.grid.infiniteScroll.api:PublicAPI
       * @description Adjusts the scroll position after you've removed data at the bottom.  You should
       * have called `saveScrollPercentage` before you remove the data, and if you're doing this in
       * response to a `needMoreData` you should wait until the promise from `loadData` has resolved
       * before you start removing data
       * @param {Grid} grid the grid we're working on
       * @param {boolean} scrollUp flag that there are pages upwards, fire
       * infinite scroll events upward
       * @param {boolean} scrollDown flag that there are pages downwards, so
       * fire infinite scroll events downward
       */
      dataRemovedBottom: function( grid, scrollUp, scrollDown ) {
        var newTop;

        service.setScrollDirections( grid, scrollUp, scrollDown );

        newTop = grid.infiniteScroll.prevScrollTop;

        service.adjustInfiniteScrollPosition( grid, newTop );
      }
    };
    return service;
  }]);
  /**
   *  @ngdoc directive
   *  @name ui.grid.infiniteScroll.directive:uiGridInfiniteScroll
   *  @element div
   *  @restrict A
   *
   *  @description Adds infinite scroll features to grid
   *
   *  @example
   <example module="app">
   <file name="app.js">
   var app = angular.module('app', ['ui.grid', 'ui.grid.infiniteScroll']);

   app.controller('MainCtrl', ['$scope', function ($scope) {
      $scope.data = [
        { name: 'Alex', car: 'Toyota' },
            { name: 'Sam', car: 'Lexus' }
      ];

      $scope.columnDefs = [
        {name: 'name'},
        {name: 'car'}
      ];
    }]);
   </file>
   <file name="index.html">
   <div ng-controller="MainCtrl">
   <div ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-infinite-scroll="20"></div>
   </div>
   </file>
   </example>
   */

  module.directive('uiGridInfiniteScroll', ['uiGridInfiniteScrollService',
    function (uiGridInfiniteScrollService) {
      return {
        priority: -200,
        scope: false,
        require: '^uiGrid',
        compile: function() {
          return {
            pre: function($scope, $elm, $attr, uiGridCtrl) {
              uiGridInfiniteScrollService.initializeGrid(uiGridCtrl.grid, $scope);
            },
            post: function($scope, $elm, $attr) {
            }
          };
        }
      };
    }]);
})();

(function () {
  'use strict';

  /**
   * @ngdoc overview
   * @name ui.grid.moveColumns
   * @description
   *
   * # ui.grid.moveColumns
   *
   * <div class="alert alert-warning" role="alert"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>
   *
   * This module provides column moving capability to ui.grid. It enables to change the position of columns.
   * <div doc-module-components="ui.grid.moveColumns"></div>
   */
  var module = angular.module('ui.grid.moveColumns', ['ui.grid']);

  /**
   *  @ngdoc service
   *  @name ui.grid.moveColumns.service:uiGridMoveColumnService
   *  @description Service for column moving feature.
   */
  module.service('uiGridMoveColumnService', ['$q', '$rootScope', '$log', 'ScrollEvent', 'uiGridConstants', 'gridUtil', function ($q, $rootScope, $log, ScrollEvent, uiGridConstants, gridUtil) {
    var service = {
      initializeGrid: function (grid) {
        var self = this;
        this.registerPublicApi(grid);
        this.defaultGridOptions(grid.options);
        grid.moveColumns = {orderCache: []}; // Used to cache the order before columns are rebuilt
        grid.registerColumnBuilder(self.movableColumnBuilder);
        grid.registerDataChangeCallback(self.verifyColumnOrder, [uiGridConstants.dataChange.COLUMN]);
      },
      registerPublicApi: function (grid) {
        var self = this;
        /**
         *  @ngdoc object
         *  @name ui.grid.moveColumns.api:PublicApi
         *  @description Public Api for column moving feature.
         */
        var publicApi = {
          events: {
            /**
             * @ngdoc event
             * @name columnPositionChanged
             * @eventOf  ui.grid.moveColumns.api:PublicApi
             * @description raised when column is moved
             * <pre>
             *      gridApi.colMovable.on.columnPositionChanged(scope,function(colDef, originalPosition, newPosition) {})
             * </pre>
             * @param {object} colDef the column that was moved
             * @param {integer} originalPosition of the column
             * @param {integer} finalPosition of the column
             */
            colMovable: {
              columnPositionChanged: function (colDef, originalPosition, newPosition) {
              }
            }
          },
          methods: {
            /**
             * @ngdoc method
             * @name moveColumn
             * @methodOf  ui.grid.moveColumns.api:PublicApi
             * @description Method can be used to change column position.
             * <pre>
             *      gridApi.colMovable.moveColumn(oldPosition, newPosition)
             * </pre>
             * @param {integer} originalPosition of the column
             * @param {integer} finalPosition of the column
             */
            colMovable: {
              moveColumn: function (originalPosition, finalPosition) {
                var columns = grid.columns;
                if (!angular.isNumber(originalPosition) || !angular.isNumber(finalPosition)) {
                  gridUtil.logError('MoveColumn: Please provide valid values for originalPosition and finalPosition');
                  return;
                }
                var nonMovableColumns = 0;
                for (var i = 0; i < columns.length; i++) {
                  if ((angular.isDefined(columns[i].colDef.visible) && columns[i].colDef.visible === false) || columns[i].isRowHeader === true) {
                    nonMovableColumns++;
                  }
                }
                if (originalPosition >= (columns.length - nonMovableColumns) || finalPosition >= (columns.length - nonMovableColumns)) {
                  gridUtil.logError('MoveColumn: Invalid values for originalPosition, finalPosition');
                  return;
                }
                var findPositionForRenderIndex = function (index) {
                  var position = index;
                  for (var i = 0; i <= position; i++) {
                    if (angular.isDefined(columns[i]) && ((angular.isDefined(columns[i].colDef.visible) && columns[i].colDef.visible === false) || columns[i].isRowHeader === true)) {
                      position++;
                    }
                  }
                  return position;
                };
                self.redrawColumnAtPosition(grid, findPositionForRenderIndex(originalPosition), findPositionForRenderIndex(finalPosition));
              }
            }
          }
        };
        grid.api.registerEventsFromObject(publicApi.events);
        grid.api.registerMethodsFromObject(publicApi.methods);
      },
      defaultGridOptions: function (gridOptions) {
        /**
         *  @ngdoc object
         *  @name ui.grid.moveColumns.api:GridOptions
         *
         *  @description Options for configuring the move column feature, these are available to be
         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
         */
        /**
         *  @ngdoc object
         *  @name enableColumnMoving
         *  @propertyOf  ui.grid.moveColumns.api:GridOptions
         *  @description If defined, sets the default value for the colMovable flag on each individual colDefs
         *  if their individual enableColumnMoving configuration is not defined. Defaults to true.
         */
        gridOptions.enableColumnMoving = gridOptions.enableColumnMoving !== false;
      },
      movableColumnBuilder: function (colDef, col, gridOptions) {
        var promises = [];
        /**
         *  @ngdoc object
         *  @name ui.grid.moveColumns.api:ColumnDef
         *
         *  @description Column Definition for move column feature, these are available to be
         *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
         */
        /**
         *  @ngdoc object
         *  @name enableColumnMoving
         *  @propertyOf  ui.grid.moveColumns.api:ColumnDef
         *  @description Enable column moving for the column.
         */
        colDef.enableColumnMoving = colDef.enableColumnMoving === undefined ? gridOptions.enableColumnMoving
          : colDef.enableColumnMoving;
        return $q.all(promises);
      },
      /**
       * @ngdoc method
       * @name updateColumnCache
       * @methodOf  ui.grid.moveColumns
       * @description Cache the current order of columns, so we can restore them after new columnDefs are defined
       */
      updateColumnCache: function(grid) {
        grid.moveColumns.orderCache = grid.getOnlyDataColumns();
      },
      /**
       * @ngdoc method
       * @name verifyColumnOrder
       * @methodOf  ui.grid.moveColumns
       * @description dataChangeCallback which uses the cached column order to restore the column order
       * when it is reset by altering the columnDefs array.
       */
      verifyColumnOrder: function(grid) {
        var headerRowOffset = grid.rowHeaderColumns.length;
        var newIndex;

        angular.forEach(grid.moveColumns.orderCache, function(cacheCol, cacheIndex) {
          newIndex = grid.columns.indexOf(cacheCol);
          if ( newIndex !== -1 && newIndex - headerRowOffset !== cacheIndex ) {
            var column = grid.columns.splice(newIndex, 1)[0];
            grid.columns.splice(cacheIndex + headerRowOffset, 0, column);
          }
        });
      },
      redrawColumnAtPosition: function (grid, originalPosition, newPosition) {
        var columns = grid.columns;

        if (originalPosition === newPosition) {
          return;
        }

        // check columns in between move-range to make sure they are visible columns
        var pos = (originalPosition < newPosition) ? originalPosition + 1 : originalPosition - 1;
        var i0 = Math.min(pos, newPosition);
        for (i0; i0 <= Math.max(pos, newPosition); i0++) {
          if (columns[i0].visible) {
            break;
          }
        }
        if (i0 > Math.max(pos, newPosition)) {
          // no visible column found, column did not visibly move
          return;
        }

        var originalColumn = columns[originalPosition];
        if (originalColumn.colDef.enableColumnMoving) {
          if (originalPosition > newPosition) {
            for (var i1 = originalPosition; i1 > newPosition; i1--) {
              columns[i1] = columns[i1 - 1];
            }
          }
          else if (newPosition > originalPosition) {
            for (var i2 = originalPosition; i2 < newPosition; i2++) {
              columns[i2] = columns[i2 + 1];
            }
          }
          columns[newPosition] = originalColumn;
          service.updateColumnCache(grid);
          grid.queueGridRefresh();
          $rootScope.$applyAsync(function () {
            grid.api.core.notifyDataChange( uiGridConstants.dataChange.COLUMN );
            grid.api.colMovable.raise.columnPositionChanged(originalColumn.colDef, originalPosition, newPosition);
          });
        }
      }
    };
    return service;
  }]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.moveColumns.directive:uiGridMoveColumns
   *  @element div
   *  @restrict A
   *  @description Adds column moving features to the ui-grid directive.
   *  @example
   <example module="app">
   <file name="app.js">
   var app = angular.module('app', ['ui.grid', 'ui.grid.moveColumns']);
   app.controller('MainCtrl', ['$scope', function ($scope) {
        $scope.data = [
          { name: 'Bob', title: 'CEO', age: 45 },
          { name: 'Frank', title: 'Lowly Developer', age: 25 },
          { name: 'Jenny', title: 'Highly Developer', age: 35 }
        ];
        $scope.columnDefs = [
          {name: 'name'},
          {name: 'title'},
          {name: 'age'}
        ];
      }]);
   </file>
   <file name="main.css">
   .grid {
      width: 100%;
      height: 150px;
    }
   </file>
   <file name="index.html">
   <div ng-controller="MainCtrl">
   <div class="grid" ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-move-columns></div>
   </div>
   </file>
   </example>
   */
  module.directive('uiGridMoveColumns', ['uiGridMoveColumnService', function (uiGridMoveColumnService) {
    return {
      replace: true,
      priority: 0,
      require: '^uiGrid',
      scope: false,
      compile: function () {
        return {
          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
            uiGridMoveColumnService.initializeGrid(uiGridCtrl.grid);
          },
          post: function ($scope, $elm, $attrs, uiGridCtrl) {
          }
        };
      }
    };
  }]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.moveColumns.directive:uiGridHeaderCell
   *  @element div
   *  @restrict A
   *
   *  @description Stacks on top of ui.grid.uiGridHeaderCell to provide capability to be able to move it to reposition column.
   *
   *  On receiving mouseDown event headerCell is cloned, now as the mouse moves the cloned header cell also moved in the grid.
   *  In case the moving cloned header cell reaches the left or right extreme of grid, grid scrolling is triggered (if horizontal scroll exists).
   *  On mouseUp event column is repositioned at position where mouse is released and cloned header cell is removed.
   *
   *  Events that invoke cloning of header cell:
   *    - mousedown
   *
   *  Events that invoke movement of cloned header cell:
   *    - mousemove
   *
   *  Events that invoke repositioning of column:
   *    - mouseup
   */
  module.directive('uiGridHeaderCell', ['$q', 'gridUtil', 'uiGridMoveColumnService', '$document', '$log', 'uiGridConstants', 'ScrollEvent',
    function ($q, gridUtil, uiGridMoveColumnService, $document, $log, uiGridConstants, ScrollEvent) {
      return {
        priority: -10,
        require: '^uiGrid',
        compile: function () {
          return {
            post: function ($scope, $elm, $attrs, uiGridCtrl) {

              if ($scope.col.colDef.enableColumnMoving) {

                /*
                 * Our general approach to column move is that we listen to a touchstart or mousedown
                 * event over the column header.  When we hear one, then we wait for a move of the same type
                 * - if we are a touchstart then we listen for a touchmove, if we are a mousedown we listen for
                 * a mousemove (i.e. a drag) before we decide that there's a move underway.  If there's never a move,
                 * and we instead get a mouseup or a touchend, then we just drop out again and do nothing.
                 *
                 */
                var $contentsElm = angular.element( $elm[0].querySelectorAll('.ui-grid-cell-contents') );

                var gridLeft;
                var previousMouseX;
                var totalMouseMovement;
                var rightMoveLimit;
                var elmCloned = false;
                var movingElm;
                var reducedWidth;
                var moveOccurred = false;

                var downFn = function( event ) {
                  // Setting some variables required for calculations.
                  gridLeft = $scope.grid.element[0].getBoundingClientRect().left;
                  if ( $scope.grid.hasLeftContainer() ) {
                    gridLeft += $scope.grid.renderContainers.left.header[0].getBoundingClientRect().width;
                  }

                  previousMouseX = event.pageX || (event.originalEvent ? event.originalEvent.pageX : 0);
                  totalMouseMovement = 0;
                  rightMoveLimit = gridLeft + $scope.grid.getViewportWidth();

                  if ( event.type === 'mousedown' ) {
                    $document.on('mousemove', moveFn);
                    $document.on('mouseup', upFn);
                  }
                  else if ( event.type === 'touchstart' ) {
                    $document.on('touchmove', moveFn);
                    $document.on('touchend', upFn);
                  }
                };

                var moveFn = function( event ) {
                  var pageX = event.pageX || (event.originalEvent ? event.originalEvent.pageX : 0);
                  var changeValue = pageX - previousMouseX;
                  if ( changeValue === 0 ) { return; }
                  // Disable text selection in Chrome during column move
                  document.onselectstart = function() { return false; };

                  moveOccurred = true;

                  if (!elmCloned) {
                    cloneElement();
                  }
                  else if (elmCloned) {
                    moveElement(changeValue);
                    previousMouseX = pageX;
                  }
                };

                var upFn = function( event ) {
                  // Re-enable text selection after column move
                  document.onselectstart = null;

                  // Remove the cloned element on mouse up.
                  if (movingElm) {
                    movingElm.remove();
                    elmCloned = false;
                  }

                  offAllEvents();
                  onDownEvents();

                  if (!moveOccurred) {
                    return;
                  }

                  var columns = $scope.grid.columns;
                  var columnIndex = 0;
                  for (var i = 0; i < columns.length; i++) {
                    if (columns[i].colDef.name !== $scope.col.colDef.name) {
                      columnIndex++;
                    }
                    else {
                      break;
                    }
                  }

                  var targetIndex;

                  // Case where column should be moved to a position on its left
                  if (totalMouseMovement < 0) {
                    var totalColumnsLeftWidth = 0;
                    var il;
                    if ( $scope.grid.isRTL() ) {
                      for (il = columnIndex + 1; il < columns.length; il++) {
                        if (angular.isUndefined(columns[il].colDef.visible) || columns[il].colDef.visible === true) {
                          totalColumnsLeftWidth += columns[il].drawnWidth || columns[il].width || columns[il].colDef.width;
                          if (totalColumnsLeftWidth > Math.abs(totalMouseMovement)) {
                            uiGridMoveColumnService.redrawColumnAtPosition
                            ($scope.grid, columnIndex, il - 1);
                            break;
                          }
                        }
                      }
                    }
                    else {
                      for (il = columnIndex - 1; il >= 0; il--) {
                        if (angular.isUndefined(columns[il].colDef.visible) || columns[il].colDef.visible === true) {
                          totalColumnsLeftWidth += columns[il].drawnWidth || columns[il].width || columns[il].colDef.width;
                          if (totalColumnsLeftWidth > Math.abs(totalMouseMovement)) {
                            uiGridMoveColumnService.redrawColumnAtPosition
                            ($scope.grid, columnIndex, il + 1);
                            break;
                          }
                        }
                      }
                    }

                    // Case where column should be moved to beginning (or end in RTL) of the grid.
                    if (totalColumnsLeftWidth < Math.abs(totalMouseMovement)) {
                      targetIndex = 0;
                      if ( $scope.grid.isRTL() ) {
                        targetIndex = columns.length - 1;
                      }
                      uiGridMoveColumnService.redrawColumnAtPosition
                      ($scope.grid, columnIndex, targetIndex);
                    }
                  }

                  // Case where column should be moved to a position on its right
                  else if (totalMouseMovement > 0) {
                    var totalColumnsRightWidth = 0;
                    var ir;
                    if ( $scope.grid.isRTL() ) {
                      for (ir = columnIndex - 1; ir > 0; ir--) {
                        if (angular.isUndefined(columns[ir].colDef.visible) || columns[ir].colDef.visible === true) {
                          totalColumnsRightWidth += columns[ir].drawnWidth || columns[ir].width || columns[ir].colDef.width;
                          if (totalColumnsRightWidth > totalMouseMovement) {
                            uiGridMoveColumnService.redrawColumnAtPosition
                            ($scope.grid, columnIndex, ir);
                            break;
                          }
                        }
                      }
                    }
                    else {
                      for (ir = columnIndex + 1; ir < columns.length; ir++) {
                        if (angular.isUndefined(columns[ir].colDef.visible) || columns[ir].colDef.visible === true) {
                          totalColumnsRightWidth += columns[ir].drawnWidth || columns[ir].width || columns[ir].colDef.width;
                          if (totalColumnsRightWidth > totalMouseMovement) {
                            uiGridMoveColumnService.redrawColumnAtPosition
                            ($scope.grid, columnIndex, ir - 1);
                            break;
                          }
                        }
                      }
                    }


                    // Case where column should be moved to end (or beginning in RTL) of the grid.
                    if (totalColumnsRightWidth < totalMouseMovement) {
                      targetIndex = columns.length - 1;
                      if ( $scope.grid.isRTL() ) {
                        targetIndex = 0;
                      }
                      uiGridMoveColumnService.redrawColumnAtPosition
                      ($scope.grid, columnIndex, targetIndex);
                    }
                  }



                };

                var onDownEvents = function() {
                  $contentsElm.on('touchstart', downFn);
                  $contentsElm.on('mousedown', downFn);
                };

                var offAllEvents = function() {
                  $contentsElm.off('touchstart', downFn);
                  $contentsElm.off('mousedown', downFn);

                  $document.off('mousemove', moveFn);
                  $document.off('touchmove', moveFn);

                  $document.off('mouseup', upFn);
                  $document.off('touchend', upFn);
                };

                onDownEvents();


                var cloneElement = function () {
                  elmCloned = true;

                  // Cloning header cell and appending to current header cell.
                  movingElm = $elm.clone();
                  $elm.parent().append(movingElm);

                  // Left of cloned element should be aligned to original header cell.
                  movingElm.addClass('movingColumn');
                  var movingElementStyles = {};
                  movingElementStyles.left = $elm[0].offsetLeft + 'px';
                  var gridRight = $scope.grid.element[0].getBoundingClientRect().right;
                  var elmRight = $elm[0].getBoundingClientRect().right;
                  if (elmRight > gridRight) {
                    reducedWidth = $scope.col.drawnWidth + (gridRight - elmRight);
                    movingElementStyles.width = reducedWidth + 'px';
                  }
                  movingElm.css(movingElementStyles);
                };

                var moveElement = function (changeValue) {
                  // Calculate total column width
                  var columns = $scope.grid.columns;
                  var totalColumnWidth = 0;
                  for (var i = 0; i < columns.length; i++) {
                    if (angular.isUndefined(columns[i].colDef.visible) || columns[i].colDef.visible === true) {
                      totalColumnWidth += columns[i].drawnWidth || columns[i].width || columns[i].colDef.width;
                    }
                  }

                  // Calculate new position of left of column
                  var currentElmLeft = movingElm[0].getBoundingClientRect().left - 1;
                  var currentElmRight = movingElm[0].getBoundingClientRect().right;
                  var newElementLeft;

                  newElementLeft = currentElmLeft - gridLeft + changeValue;
                  newElementLeft = newElementLeft < rightMoveLimit ? newElementLeft : rightMoveLimit;

                  // Update css of moving column to adjust to new left value or fire scroll in case column has reached edge of grid
                  if ((currentElmLeft >= gridLeft || changeValue > 0) && (currentElmRight <= rightMoveLimit || changeValue < 0)) {
                    movingElm.css({visibility: 'visible', 'left': (movingElm[0].offsetLeft +
                    (newElementLeft < rightMoveLimit ? changeValue : (rightMoveLimit - currentElmLeft))) + 'px'});
                  }
                  else if (totalColumnWidth > Math.ceil(uiGridCtrl.grid.gridWidth)) {
                    changeValue *= 8;
                    var scrollEvent = new ScrollEvent($scope.col.grid, null, null, 'uiGridHeaderCell.moveElement');
                    scrollEvent.x = {pixels: changeValue};
                    scrollEvent.grid.scrollContainers('',scrollEvent);
                  }

                  // Calculate total width of columns on the left of the moving column and the mouse movement
                  var totalColumnsLeftWidth = 0;
                  for (var il = 0; il < columns.length; il++) {
                    if (angular.isUndefined(columns[il].colDef.visible) || columns[il].colDef.visible === true) {
                      if (columns[il].colDef.name !== $scope.col.colDef.name) {
                        totalColumnsLeftWidth += columns[il].drawnWidth || columns[il].width || columns[il].colDef.width;
                      }
                      else {
                        break;
                      }
                    }
                  }
                  if ($scope.newScrollLeft === undefined) {
                    totalMouseMovement += changeValue;
                  }
                  else {
                    totalMouseMovement = $scope.newScrollLeft + newElementLeft - totalColumnsLeftWidth;
                  }

                  // Increase width of moving column, in case the rightmost column was moved and its width was
                  // decreased because of overflow
                  if (reducedWidth < $scope.col.drawnWidth) {
                    reducedWidth += Math.abs(changeValue);
                    movingElm.css({'width': reducedWidth + 'px'});
                  }
                };

                $scope.$on('$destroy', offAllEvents);
              }
            }
          };
        }
      };
    }]);
})();

(function() {
  'use strict';

  /**
   * @ngdoc overview
   * @name ui.grid.pagination
   *
   * @description
   *
   * # ui.grid.pagination
   *
   * <div class="alert alert-warning" role="alert"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>
   *
   * This module provides pagination support to ui-grid
   */
  var module = angular.module('ui.grid.pagination', ['ng', 'ui.grid']);

  /**
   * @ngdoc service
   * @name ui.grid.pagination.service:uiGridPaginationService
   *
   * @description Service for the pagination feature
   */
  module.service('uiGridPaginationService', ['gridUtil',
    function (gridUtil) {
      var service = {
        /**
         * @ngdoc method
         * @name initializeGrid
         * @methodOf ui.grid.pagination.service:uiGridPaginationService
         * @description Attaches the service to a certain grid
         * @param {Grid} grid The grid we want to work with
         */
        initializeGrid: function (grid) {
          service.defaultGridOptions(grid.options);

          /**
          * @ngdoc object
          * @name ui.grid.pagination.api:PublicAPI
          *
          * @description Public API for the pagination feature
          */
          var publicApi = {
            events: {
              pagination: {
              /**
               * @ngdoc event
               * @name paginationChanged
               * @eventOf ui.grid.pagination.api:PublicAPI
               * @description This event fires when the pageSize or currentPage changes
               * @param {int} currentPage requested page number
               * @param {int} pageSize requested page size
               */
                paginationChanged: function (currentPage, pageSize) { }
              }
            },
            methods: {
              pagination: {
                /**
                 * @ngdoc method
                 * @name getPage
                 * @methodOf ui.grid.pagination.api:PublicAPI
                 * @description Returns the number of the current page
                 */
                getPage: function () {
                  return grid.options.enablePagination ? grid.options.paginationCurrentPage : null;
                },
                /**
                 * @ngdoc method
                 * @name getFirstRowIndex
                 * @methodOf ui.grid.pagination.api:PublicAPI
                 * @description Returns the index of the first row of the current page.
                 */
                getFirstRowIndex: function () {
                  if (grid.options.useCustomPagination) {
                    return grid.options.paginationPageSizes.reduce(function(result, size, index) {
                      return index < grid.options.paginationCurrentPage - 1 ? result + size : result;
                    }, 0);
                  }
                  return ((grid.options.paginationCurrentPage - 1) * grid.options.paginationPageSize);
                },
                /**
                 * @ngdoc method
                 * @name getLastRowIndex
                 * @methodOf ui.grid.pagination.api:PublicAPI
                 * @description Returns the index of the last row of the current page.
                 */
                getLastRowIndex: function () {
                  if (grid.options.useCustomPagination) {
                    return publicApi.methods.pagination.getFirstRowIndex() + grid.options.paginationPageSizes[grid.options.paginationCurrentPage - 1] - 1;
                  }
                  return Math.min(grid.options.paginationCurrentPage * grid.options.paginationPageSize, grid.options.totalItems) - 1;
                },
                /**
                 * @ngdoc method
                 * @name getTotalPages
                 * @methodOf ui.grid.pagination.api:PublicAPI
                 * @description Returns the total number of pages
                 */
                getTotalPages: function () {
                  if (!grid.options.enablePagination) {
                    return null;
                  }

                  if (grid.options.useCustomPagination) {
                    return grid.options.paginationPageSizes.length;
                  }

                  return (grid.options.totalItems === 0) ? 1 : Math.ceil(grid.options.totalItems / grid.options.paginationPageSize);
                },
                /**
                 * @ngdoc method
                 * @name nextPage
                 * @methodOf ui.grid.pagination.api:PublicAPI
                 * @description Moves to the next page, if possible
                 */
                nextPage: function () {
                  if (!grid.options.enablePagination) {
                    return;
                  }

                  if (grid.options.totalItems > 0) {
                    grid.options.paginationCurrentPage = Math.min(
                      grid.options.paginationCurrentPage + 1,
                      publicApi.methods.pagination.getTotalPages()
                    );
                  }
                  else {
                    grid.options.paginationCurrentPage++;
                  }
                },
                /**
                 * @ngdoc method
                 * @name previousPage
                 * @methodOf ui.grid.pagination.api:PublicAPI
                 * @description Moves to the previous page, if we're not on the first page
                 */
                previousPage: function () {
                  if (!grid.options.enablePagination) {
                    return;
                  }

                  grid.options.paginationCurrentPage = Math.max(grid.options.paginationCurrentPage - 1, 1);
                },
                /**
                 * @ngdoc method
                 * @name seek
                 * @methodOf ui.grid.pagination.api:PublicAPI
                 * @description Moves to the requested page
                 * @param {int} page The number of the page that should be displayed
                 */
                seek: function (page) {
                  if (!grid.options.enablePagination) {
                    return;
                  }
                  if (!angular.isNumber(page) || page < 1) {
                    throw 'Invalid page number: ' + page;
                  }

                  grid.options.paginationCurrentPage = Math.min(page, publicApi.methods.pagination.getTotalPages());
                }
              }
            }
          };

          grid.api.registerEventsFromObject(publicApi.events);
          grid.api.registerMethodsFromObject(publicApi.methods);

          var processPagination = function( renderableRows ) {
            if (grid.options.useExternalPagination || !grid.options.enablePagination) {
              return renderableRows;
            }
            // client side pagination
            var pageSize = parseInt(grid.options.paginationPageSize, 10);
            var currentPage = parseInt(grid.options.paginationCurrentPage, 10);

            var visibleRows = renderableRows.filter(function (row) { return row.visible; });
            grid.options.totalItems = visibleRows.length;

            var firstRow = publicApi.methods.pagination.getFirstRowIndex();
            var lastRow  = publicApi.methods.pagination.getLastRowIndex();

            if (firstRow > visibleRows.length) {
              currentPage = grid.options.paginationCurrentPage = 1;
              firstRow = (currentPage - 1) * pageSize;
            }
            return visibleRows.slice(firstRow, lastRow + 1);
          };

          grid.registerRowsProcessor(processPagination, 900 );

        },
        defaultGridOptions: function (gridOptions) {
          /**
           * @ngdoc object
           * @name ui.grid.pagination.api:GridOptions
           *
           * @description GridOptions for the pagination feature, these are available to be
           * set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
           */

          /**
           * @ngdoc property
           * @name enablePagination
           * @propertyOf ui.grid.pagination.api:GridOptions
           * @description Enables pagination.  Defaults to true.
           */
          gridOptions.enablePagination = gridOptions.enablePagination !== false;
          /**
           * @ngdoc property
           * @name enablePaginationControls
           * @propertyOf ui.grid.pagination.api:GridOptions
           * @description Enables the paginator at the bottom of the grid. Turn this off if you want to implement your
           *              own controls outside the grid.
           */
          gridOptions.enablePaginationControls = gridOptions.enablePaginationControls !== false;
          /**
           * @ngdoc property
           * @name useExternalPagination
           * @propertyOf ui.grid.pagination.api:GridOptions
           * @description Disables client side pagination. When true, handle the paginationChanged event and set data
           *              and totalItems.  Defaults to `false`
           */
          gridOptions.useExternalPagination = gridOptions.useExternalPagination === true;

          /**
           * @ngdoc property
           * @name useCustomPagination
           * @propertyOf ui.grid.pagination.api:GridOptions
           * @description Disables client-side pagination. When true, handle the `paginationChanged` event and set `data`,
           *              `firstRowIndex`, `lastRowIndex`, and `totalItems`.  Defaults to `false`.
           */
          gridOptions.useCustomPagination = gridOptions.useCustomPagination === true;

          /**
           * @ngdoc property
           * @name totalItems
           * @propertyOf ui.grid.pagination.api:GridOptions
           * @description Total number of items, set automatically when using client side pagination, but needs set by user
           *              for server side pagination
           */
          if (gridUtil.isNullOrUndefined(gridOptions.totalItems)) {
            gridOptions.totalItems = 0;
          }
          /**
           * @ngdoc property
           * @name paginationPageSizes
           * @propertyOf ui.grid.pagination.api:GridOptions
           * @description Array of page sizes, defaults to `[250, 500, 1000]`
           */
          if (gridUtil.isNullOrUndefined(gridOptions.paginationPageSizes)) {
            gridOptions.paginationPageSizes = [250, 500, 1000];
          }
          /**
           * @ngdoc property
           * @name paginationPageSize
           * @propertyOf ui.grid.pagination.api:GridOptions
           * @description Page size, defaults to the first item in paginationPageSizes, or 0 if paginationPageSizes is empty
           */
          if (gridUtil.isNullOrUndefined(gridOptions.paginationPageSize)) {
            if (gridOptions.paginationPageSizes.length > 0) {
              gridOptions.paginationPageSize = gridOptions.paginationPageSizes[0];
            }
            else {
              gridOptions.paginationPageSize = 0;
            }
          }
          /**
           * @ngdoc property
           * @name paginationCurrentPage
           * @propertyOf ui.grid.pagination.api:GridOptions
           * @description Current page number, defaults to 1
           */
          if (gridUtil.isNullOrUndefined(gridOptions.paginationCurrentPage)) {
            gridOptions.paginationCurrentPage = 1;
          }

          /**
           * @ngdoc property
           * @name paginationTemplate
           * @propertyOf ui.grid.pagination.api:GridOptions
           * @description A custom template for the pager, defaults to `ui-grid/pagination`
           */
          if (gridUtil.isNullOrUndefined(gridOptions.paginationTemplate)) {
            gridOptions.paginationTemplate = 'ui-grid/pagination';
          }
        },
        /**
         * @ngdoc method
         * @methodOf ui.grid.pagination.service:uiGridPaginationService
         * @name uiGridPaginationService
         * @description  Raises paginationChanged and calls refresh for client side pagination
         * @param {Grid} grid the grid for which the pagination changed
         * @param {int} currentPage requested page number
         * @param {int} pageSize requested page size
         */
        onPaginationChanged: function (grid, currentPage, pageSize) {
          grid.api.pagination.raise.paginationChanged(currentPage, pageSize);
          if (!grid.options.useExternalPagination) {
            grid.queueGridRefresh(); // client side pagination
          }
        }
      };

      return service;
    }
  ]);
  /**
   *  @ngdoc directive
   *  @name ui.grid.pagination.directive:uiGridPagination
   *  @element div
   *  @restrict A
   *
   *  @description Adds pagination features to grid
   *  @example
   <example module="app">
   <file name="app.js">
   var app = angular.module('app', ['ui.grid', 'ui.grid.pagination']);

   app.controller('MainCtrl', ['$scope', function ($scope) {
      $scope.data = [
        { name: 'Alex', car: 'Toyota' },
        { name: 'Sam', car: 'Lexus' },
        { name: 'Joe', car: 'Dodge' },
        { name: 'Bob', car: 'Buick' },
        { name: 'Cindy', car: 'Ford' },
        { name: 'Brian', car: 'Audi' },
        { name: 'Malcom', car: 'Mercedes Benz' },
        { name: 'Dave', car: 'Ford' },
        { name: 'Stacey', car: 'Audi' },
        { name: 'Amy', car: 'Acura' },
        { name: 'Scott', car: 'Toyota' },
        { name: 'Ryan', car: 'BMW' },
      ];

      $scope.gridOptions = {
        data: 'data',
        paginationPageSizes: [5, 10, 25],
        paginationPageSize: 5,
        columnDefs: [
          {name: 'name'},
          {name: 'car'}
        ]
       }
    }]);
   </file>
   <file name="index.html">
   <div ng-controller="MainCtrl">
   <div ui-grid="gridOptions" ui-grid-pagination></div>
   </div>
   </file>
   </example>
   */
  module.directive('uiGridPagination', ['gridUtil', 'uiGridPaginationService',
    function (gridUtil, uiGridPaginationService) {
      return {
        priority: -200,
        scope: false,
        require: 'uiGrid',
        link: {
          pre: function ($scope, $elm, $attr, uiGridCtrl) {
            uiGridPaginationService.initializeGrid(uiGridCtrl.grid);

            gridUtil.getTemplate(uiGridCtrl.grid.options.paginationTemplate)
              .then(function (contents) {
                var template = angular.element(contents);

                $elm.append(template);
                uiGridCtrl.innerCompile(template);
              });
          }
        }
      };
    }
  ]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.pagination.directive:uiGridPager
   *  @element div
   *
   *  @description Panel for handling pagination
   */
  module.directive('uiGridPager', ['uiGridPaginationService', 'uiGridConstants', 'gridUtil', 'i18nService', 'i18nConstants',
    function (uiGridPaginationService, uiGridConstants, gridUtil, i18nService, i18nConstants) {
      return {
        priority: -200,
        scope: true,
        require: '^uiGrid',
        link: function ($scope, $elm, $attr, uiGridCtrl) {
          var defaultFocusElementSelector = '.ui-grid-pager-control-input';

          $scope.aria = i18nService.getSafeText('pagination.aria'); // Returns an object with all of the aria labels

          var updateLabels = function() {
            $scope.paginationApi = uiGridCtrl.grid.api.pagination;
            $scope.sizesLabel = i18nService.getSafeText('pagination.sizes');
            $scope.totalItemsLabel = i18nService.getSafeText('pagination.totalItems');
            $scope.paginationOf = i18nService.getSafeText('pagination.of');
            $scope.paginationThrough = i18nService.getSafeText('pagination.through');
          };

          updateLabels();

          $scope.$on(i18nConstants.UPDATE_EVENT, updateLabels);

          var options = uiGridCtrl.grid.options;

          uiGridCtrl.grid.renderContainers.body.registerViewportAdjuster(function (adjustment) {
            if (options.enablePaginationControls) {
              adjustment.height = adjustment.height - gridUtil.elementHeight($elm, "padding");
            }
            return adjustment;
          });

          var dataChangeDereg = uiGridCtrl.grid.registerDataChangeCallback(function (grid) {
            if (!grid.options.useExternalPagination) {
              grid.options.totalItems = grid.rows.length;
            }
          }, [uiGridConstants.dataChange.ROW]);

          $scope.$on('$destroy', dataChangeDereg);

          var deregP = $scope.$watch('grid.options.paginationCurrentPage + grid.options.paginationPageSize', function (newValues, oldValues) {
            if (newValues === oldValues || oldValues === undefined) {
              return;
            }

            if (!angular.isNumber(options.paginationCurrentPage) || options.paginationCurrentPage < 1) {
              options.paginationCurrentPage = 1;
              return;
            }

            if (options.totalItems > 0 && options.paginationCurrentPage > $scope.paginationApi.getTotalPages()) {
              options.paginationCurrentPage = $scope.paginationApi.getTotalPages();
              return;
            }

            uiGridPaginationService.onPaginationChanged($scope.grid, options.paginationCurrentPage, options.paginationPageSize);
          });

          $scope.$on('$destroy', function() {
            deregP();
          });

          $scope.cantPageForward = function () {
            if ($scope.paginationApi.getTotalPages()) {
              return $scope.cantPageToLast();
            }
            else {
              return options.data.length < 1;
            }
          };

          $scope.cantPageToLast = function () {
            var totalPages = $scope.paginationApi.getTotalPages();

            return !totalPages || options.paginationCurrentPage >= totalPages;
          };

          $scope.cantPageBackward = function () {
            return options.paginationCurrentPage <= 1;
          };

          var focusToInputIf = function(condition) {
            if (condition) {
              gridUtil.focus.bySelector($elm, defaultFocusElementSelector);
            }
          };

          // Takes care of setting focus to the middle element when focus is lost
          $scope.pageFirstPageClick = function () {
            $scope.paginationApi.seek(1);
            focusToInputIf($scope.cantPageBackward());
          };

          $scope.pagePreviousPageClick = function () {
            $scope.paginationApi.previousPage();
            focusToInputIf($scope.cantPageBackward());
          };

          $scope.pageNextPageClick = function () {
            $scope.paginationApi.nextPage();
            focusToInputIf($scope.cantPageForward());
          };

          $scope.pageLastPageClick = function () {
            $scope.paginationApi.seek($scope.paginationApi.getTotalPages());
            focusToInputIf($scope.cantPageToLast());
          };
        }
      };
    }
  ]);
})();

(function () {
  'use strict';

  /**
   * @ngdoc overview
   * @name ui.grid.pinning
   * @description
   *
   * # ui.grid.pinning
   *
   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
   *
   * This module provides column pinning to the end user via menu options in the column header
   *
   * <div doc-module-components="ui.grid.pinning"></div>
   */

  var module = angular.module('ui.grid.pinning', ['ui.grid']);

  module.constant('uiGridPinningConstants', {
    container: {
      LEFT: 'left',
      RIGHT: 'right',
      NONE: ''
    }
  });

  module.service('uiGridPinningService', ['gridUtil', 'GridRenderContainer', 'i18nService', 'uiGridPinningConstants', function (gridUtil, GridRenderContainer, i18nService, uiGridPinningConstants) {
    var service = {

      initializeGrid: function (grid) {
        service.defaultGridOptions(grid.options);

        // Register a column builder to add new menu items for pinning left and right
        grid.registerColumnBuilder(service.pinningColumnBuilder);

        /**
         *  @ngdoc object
         *  @name ui.grid.pinning.api:PublicApi
         *
         *  @description Public Api for pinning feature
         */
        var publicApi = {
          events: {
            pinning: {
              /**
               * @ngdoc event
               * @name columnPinned
               * @eventOf ui.grid.pinning.api:PublicApi
               * @description raised when column pin state has changed
               * <pre>
               *   gridApi.pinning.on.columnPinned(scope, function(colDef){})
               * </pre>
               * @param {object} colDef the column that was changed
               * @param {string} container the render container the column is in ('left', 'right', '')
               */
              columnPinned: function(colDef, container) {
              }
            }
          },
          methods: {
            pinning: {
              /**
               * @ngdoc function
               * @name pinColumn
               * @methodOf ui.grid.pinning.api:PublicApi
               * @description pin column left, right, or none
               * <pre>
               *   gridApi.pinning.pinColumn(col, uiGridPinningConstants.container.LEFT)
               * </pre>
               * @param {gridColumn} col the column being pinned
               * @param {string} container one of the recognised types
               * from uiGridPinningConstants
               */
              pinColumn: function(col, container) {
                service.pinColumn(grid, col, container);
              }
            }
          }
        };

        grid.api.registerEventsFromObject(publicApi.events);
        grid.api.registerMethodsFromObject(publicApi.methods);
      },

      defaultGridOptions: function (gridOptions) {
        // default option to true unless it was explicitly set to false
        /**
         *  @ngdoc object
         *  @name ui.grid.pinning.api:GridOptions
         *
         *  @description GridOptions for pinning feature, these are available to be
           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
         */

        /**
         *  @ngdoc object
         *  @name enablePinning
         *  @propertyOf  ui.grid.pinning.api:GridOptions
         *  @description Enable pinning for the entire grid.
         *  <br/>Defaults to true
         */
        gridOptions.enablePinning = gridOptions.enablePinning !== false;
        /**
         *  @ngdoc object
         *  @name hidePinLeft
         *  @propertyOf  ui.grid.pinning.api:GridOptions
         *  @description Hide Pin Left for the entire grid.
         *  <br/>Defaults to false
         */
        gridOptions.hidePinLeft = gridOptions.enablePinning && gridOptions.hidePinLeft;
        /**
         *  @ngdoc object
         *  @name hidePinRight
         *  @propertyOf  ui.grid.pinning.api:GridOptions
         *  @description Hide Pin Right pinning for the entire grid.
         *  <br/>Defaults to false
         */
        gridOptions.hidePinRight = gridOptions.enablePinning && gridOptions.hidePinRight;
      },

      pinningColumnBuilder: function (colDef, col, gridOptions) {
        // default to true unless gridOptions or colDef is explicitly false

        /**
         *  @ngdoc object
         *  @name ui.grid.pinning.api:ColumnDef
         *
         *  @description ColumnDef for pinning feature, these are available to be
         *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
         */

        /**
         *  @ngdoc object
         *  @name enablePinning
         *  @propertyOf  ui.grid.pinning.api:ColumnDef
         *  @description Enable pinning for the individual column.
         *  <br/>Defaults to true
         */
        colDef.enablePinning = colDef.enablePinning === undefined ? gridOptions.enablePinning : colDef.enablePinning;
        /**
         *  @ngdoc object
         *  @name hidePinLeft
         *  @propertyOf  ui.grid.pinning.api:ColumnDef
         *  @description Hide Pin Left for the individual column.
         *  <br/>Defaults to false
         */
        colDef.hidePinLeft = colDef.hidePinLeft === undefined ? gridOptions.hidePinLeft : colDef.hidePinLeft;
        /**
         *  @ngdoc object
         *  @name hidePinRight
         *  @propertyOf  ui.grid.pinning.api:ColumnDef
         *  @description Hide Pin Right for the individual column.
         *  <br/>Defaults to false
         */
        colDef.hidePinRight = colDef.hidePinRight === undefined ? gridOptions.hidePinRight : colDef.hidePinRight;

        /**
         *  @ngdoc object
         *  @name pinnedLeft
         *  @propertyOf  ui.grid.pinning.api:ColumnDef
         *  @description Column is pinned left when grid is rendered
         *  <br/>Defaults to false
         */

        /**
         *  @ngdoc object
         *  @name pinnedRight
         *  @propertyOf  ui.grid.pinning.api:ColumnDef
         *  @description Column is pinned right when grid is rendered
         *  <br/>Defaults to false
         */
        if (colDef.pinnedLeft) {
          col.renderContainer = 'left';
          col.grid.createLeftContainer();
        }
        else if (colDef.pinnedRight) {
          col.renderContainer = 'right';
          col.grid.createRightContainer();
        }

        if (!colDef.enablePinning) {
          return;
        }

        var pinColumnLeftAction = {
          name: 'ui.grid.pinning.pinLeft',
          title: i18nService.get().pinning.pinLeft,
          icon: 'ui-grid-icon-left-open',
          shown: function () {
            return typeof(this.context.col.renderContainer) === 'undefined' || !this.context.col.renderContainer || this.context.col.renderContainer !== 'left';
          },
          action: function () {
            service.pinColumn(this.context.col.grid, this.context.col, uiGridPinningConstants.container.LEFT);
          }
        };

        var pinColumnRightAction = {
          name: 'ui.grid.pinning.pinRight',
          title: i18nService.get().pinning.pinRight,
          icon: 'ui-grid-icon-right-open',
          shown: function () {
            return typeof(this.context.col.renderContainer) === 'undefined' || !this.context.col.renderContainer || this.context.col.renderContainer !== 'right';
          },
          action: function () {
            service.pinColumn(this.context.col.grid, this.context.col, uiGridPinningConstants.container.RIGHT);
          }
        };

        var removePinAction = {
          name: 'ui.grid.pinning.unpin',
          title: i18nService.get().pinning.unpin,
          icon: 'ui-grid-icon-cancel',
          shown: function () {
            return typeof(this.context.col.renderContainer) !== 'undefined' && this.context.col.renderContainer !== null && this.context.col.renderContainer !== 'body';
          },
          action: function () {
            service.pinColumn(this.context.col.grid, this.context.col, uiGridPinningConstants.container.NONE);
          }
        };

        // Skip from menu if hidePinLeft or hidePinRight is true
        if (!colDef.hidePinLeft && !gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.pinning.pinLeft')) {
          col.menuItems.push(pinColumnLeftAction);
        }
        if (!colDef.hidePinRight && !gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.pinning.pinRight')) {
          col.menuItems.push(pinColumnRightAction);
        }
        if (!gridUtil.arrayContainsObjectWithProperty(col.menuItems, 'name', 'ui.grid.pinning.unpin')) {
          col.menuItems.push(removePinAction);
        }
      },

      pinColumn: function(grid, col, container) {
        if (container === uiGridPinningConstants.container.NONE) {
          col.renderContainer = null;
          col.colDef.pinnedLeft = col.colDef.pinnedRight = false;
        }
        else {
          col.renderContainer = container;
          if (container === uiGridPinningConstants.container.LEFT) {
            grid.createLeftContainer();
          }
          else if (container === uiGridPinningConstants.container.RIGHT) {
            grid.createRightContainer();
          }
        }

        grid.refresh()
        .then(function() {
          grid.api.pinning.raise.columnPinned( col.colDef, container );
        });
      }
    };

    return service;
  }]);

  module.directive('uiGridPinning', ['gridUtil', 'uiGridPinningService',
    function (gridUtil, uiGridPinningService) {
      return {
        require: 'uiGrid',
        scope: false,
        compile: function () {
          return {
            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
              uiGridPinningService.initializeGrid(uiGridCtrl.grid);
            },
            post: function ($scope, $elm, $attrs, uiGridCtrl) {
            }
          };
        }
      };
    }]);
})();

(function() {
  'use strict';

  /**
   * @ngdoc overview
   * @name ui.grid.resizeColumns
   * @description
   *
   * # ui.grid.resizeColumns
   *
   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
   *
   * This module allows columns to be resized.
   */
  var module = angular.module('ui.grid.resizeColumns', ['ui.grid']);

  module.service('uiGridResizeColumnsService', ['gridUtil', '$q', '$rootScope',
    function (gridUtil, $q, $rootScope) {
      return {
        defaultGridOptions: function(gridOptions) {
          // default option to true unless it was explicitly set to false
          /**
           *  @ngdoc object
           *  @name ui.grid.resizeColumns.api:GridOptions
           *
           *  @description GridOptions for resizeColumns feature, these are available to be
           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
           */

          /**
           *  @ngdoc object
           *  @name enableColumnResizing
           *  @propertyOf  ui.grid.resizeColumns.api:GridOptions
           *  @description Enable column resizing on the entire grid
           *  <br/>Defaults to true
           */
          gridOptions.enableColumnResizing = gridOptions.enableColumnResizing !== false;

          // legacy support
          // use old name if it is explicitly false
          if (gridOptions.enableColumnResize === false) {
            gridOptions.enableColumnResizing = false;
          }
        },

        colResizerColumnBuilder: function (colDef, col, gridOptions) {
          var promises = [];

          /**
           *  @ngdoc object
           *  @name ui.grid.resizeColumns.api:ColumnDef
           *
           *  @description ColumnDef for resizeColumns feature, these are available to be
           *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
           */

          /**
           *  @ngdoc object
           *  @name enableColumnResizing
           *  @propertyOf  ui.grid.resizeColumns.api:ColumnDef
           *  @description Enable column resizing on an individual column
           *  <br/>Defaults to GridOptions.enableColumnResizing
           */
          // default to true unless gridOptions or colDef is explicitly false
          colDef.enableColumnResizing = colDef.enableColumnResizing === undefined ? gridOptions.enableColumnResizing : colDef.enableColumnResizing;


          // legacy support of old option name
          if (colDef.enableColumnResize === false) {
            colDef.enableColumnResizing = false;
          }

          return $q.all(promises);
        },

        registerPublicApi: function (grid) {
            /**
             *  @ngdoc object
             *  @name ui.grid.resizeColumns.api:PublicApi
             *  @description Public Api for column resize feature.
             */
            var publicApi = {
              events: {
                /**
                 * @ngdoc event
                 * @name columnSizeChanged
                 * @eventOf  ui.grid.resizeColumns.api:PublicApi
                 * @description raised when column is resized
                 * <pre>
                 *      gridApi.colResizable.on.columnSizeChanged(scope,function(colDef, deltaChange) {})
                 * </pre>
                 * @param {object} colDef the column that was resized
                 * @param {integer} delta of the column size change
                 */
                colResizable: {
                  columnSizeChanged: function (colDef, deltaChange) {
                  }
                }
              }
            };
            grid.api.registerEventsFromObject(publicApi.events);
        },

        fireColumnSizeChanged: function (grid, colDef, deltaChange) {
          $rootScope.$applyAsync(function () {
            if ( grid.api.colResizable ) {
              grid.api.colResizable.raise.columnSizeChanged(colDef, deltaChange);
            } else {
              gridUtil.logError("The resizeable api is not registered, this may indicate that you've included the module but not added the 'ui-grid-resize-columns' directive to your grid definition.  Cannot raise any events.");
            }
          });
        },

        // get either this column, or the column next to this column, to resize,
        // returns the column we're going to resize
        findTargetCol: function(col, position, rtlMultiplier) {
          var renderContainer = col.getRenderContainer();

          if (position === 'left') {
            // Get the column to the left of this one
            var colIndex = renderContainer.visibleColumnCache.indexOf(col);
            return renderContainer.visibleColumnCache[colIndex - 1 * rtlMultiplier];
          } else {
            return col;
          }
        }
      };
    }]);


  /**
   * @ngdoc directive
   * @name ui.grid.resizeColumns.directive:uiGridResizeColumns
   * @element div
   * @restrict A
   * @description
   * Enables resizing for all columns on the grid. If, for some reason, you want to use the ui-grid-resize-columns directive, but not allow column resizing, you can explicitly set the
   * option to false. This prevents resizing for the entire grid, regardless of individual columnDef options.
   *
   * @example
   <doc:example module="app">
   <doc:source>
   <script>
   var app = angular.module('app', ['ui.grid', 'ui.grid.resizeColumns']);

   app.controller('MainCtrl', ['$scope', function ($scope) {
          $scope.gridOpts = {
            data: [
              { "name": "Ethel Price", "gender": "female", "company": "Enersol" },
              { "name": "Claudine Neal", "gender": "female", "company": "Sealoud" },
              { "name": "Beryl Rice", "gender": "female", "company": "Velity" },
              { "name": "Wilder Gonzales", "gender": "male", "company": "Geekko" }
            ]
          };
        }]);
   </script>

   <div ng-controller="MainCtrl">
   <div class="testGrid" ui-grid="gridOpts" ui-grid-resize-columns ></div>
   </div>
   </doc:source>
   <doc:scenario>

   </doc:scenario>
   </doc:example>
   */
  module.directive('uiGridResizeColumns', ['gridUtil', 'uiGridResizeColumnsService', function (gridUtil, uiGridResizeColumnsService) {
    return {
      replace: true,
      priority: 0,
      require: '^uiGrid',
      scope: false,
      compile: function () {
        return {
          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
            uiGridResizeColumnsService.defaultGridOptions(uiGridCtrl.grid.options);
            uiGridCtrl.grid.registerColumnBuilder( uiGridResizeColumnsService.colResizerColumnBuilder);
            uiGridResizeColumnsService.registerPublicApi(uiGridCtrl.grid);
          },
          post: function ($scope, $elm, $attrs, uiGridCtrl) {
          }
        };
      }
    };
  }]);

  // Extend the uiGridHeaderCell directive
  module.directive('uiGridHeaderCell', ['gridUtil', '$templateCache', '$compile', '$q', 'uiGridResizeColumnsService', 'uiGridConstants', function (gridUtil, $templateCache, $compile, $q, uiGridResizeColumnsService, uiGridConstants) {
    return {
      // Run after the original uiGridHeaderCell
      priority: -10,
      require: '^uiGrid',
      // scope: false,
      compile: function() {
        return {
          post: function ($scope, $elm, $attrs, uiGridCtrl) {
            var grid = uiGridCtrl.grid;

            if (grid.options.enableColumnResizing) {
              var columnResizerElm = $templateCache.get('ui-grid/columnResizer');

              var rtlMultiplier = 1;
              // when in RTL mode reverse the direction using the rtlMultiplier and change the position to left
              if (grid.isRTL()) {
                $scope.position = 'left';
                rtlMultiplier = -1;
              }

              var displayResizers = function() {

                // remove any existing resizers.
                var resizers = $elm[0].getElementsByClassName('ui-grid-column-resizer');
                for ( var i = 0; i < resizers.length; i++ ) {
                  angular.element(resizers[i]).remove();
                }

                // get the target column for the left resizer
                var otherCol = uiGridResizeColumnsService.findTargetCol($scope.col, 'left', rtlMultiplier);
                var renderContainer = $scope.col.getRenderContainer();

                // Don't append the left resizer if this is the first column or the column to the left of this one has resizing disabled
                if (otherCol && renderContainer.visibleColumnCache.indexOf($scope.col) !== 0 && otherCol.colDef.enableColumnResizing !== false) {
                  var resizerLeft = angular.element(columnResizerElm).clone();
                  resizerLeft.attr('position', 'left');

                  $elm.prepend(resizerLeft);
                  $compile(resizerLeft)($scope);
                }

                // Don't append the right resizer if this column has resizing disabled
                if ($scope.col.colDef.enableColumnResizing !== false) {
                  var resizerRight = angular.element(columnResizerElm).clone();
                  resizerRight.attr('position', 'right');

                  $elm.append(resizerRight);
                  $compile(resizerRight)($scope);
                }
              };

              displayResizers();

              var waitDisplay = function() {
                $scope.$applyAsync(displayResizers);
              };

              var dataChangeDereg = grid.registerDataChangeCallback( waitDisplay, [uiGridConstants.dataChange.COLUMN] );

              $scope.$on( '$destroy', dataChangeDereg );
            }
          }
        };
      }
    };
  }]);



  /**
   * @ngdoc directive
   * @name ui.grid.resizeColumns.directive:uiGridColumnResizer
   * @element div
   * @restrict A
   *
   * @description
   * Draggable handle that controls column resizing.
   *
   * @example
   <doc:example module="app">
     <doc:source>
       <script>
        var app = angular.module('app', ['ui.grid', 'ui.grid.resizeColumns']);

        app.controller('MainCtrl', ['$scope', function ($scope) {
          $scope.gridOpts = {
            enableColumnResizing: true,
            data: [
              { "name": "Ethel Price", "gender": "female", "company": "Enersol" },
              { "name": "Claudine Neal", "gender": "female", "company": "Sealoud" },
              { "name": "Beryl Rice", "gender": "female", "company": "Velity" },
              { "name": "Wilder Gonzales", "gender": "male", "company": "Geekko" }
            ]
          };
        }]);
       </script>

       <div ng-controller="MainCtrl">
        <div class="testGrid" ui-grid="gridOpts"></div>
       </div>
     </doc:source>
     <doc:scenario>
      // TODO: e2e specs?

      // TODO: post-resize a horizontal scroll event should be fired
     </doc:scenario>
   </doc:example>
   */
  module.directive('uiGridColumnResizer', ['$document', 'gridUtil', 'uiGridConstants', 'uiGridResizeColumnsService', function ($document, gridUtil, uiGridConstants, uiGridResizeColumnsService) {
    var resizeOverlay = angular.element('<div class="ui-grid-resize-overlay"></div>');

    return {
      priority: 0,
      scope: {
        col: '=',
        position: '@',
        renderIndex: '='
      },
      require: '?^uiGrid',
      link: function ($scope, $elm, $attrs, uiGridCtrl) {
        var startX = 0,
            x = 0,
            gridLeft = 0,
            rtlMultiplier = 1;

        // when in RTL mode reverse the direction using the rtlMultiplier and change the position to left
        if (uiGridCtrl.grid.isRTL()) {
          $scope.position = 'left';
          rtlMultiplier = -1;
        }

        if ($scope.position === 'left') {
          $elm.addClass('left');
        }
        else if ($scope.position === 'right') {
          $elm.addClass('right');
        }

        // Refresh the grid canvas
        //   takes an argument representing the diff along the X-axis that the resize had
        function refreshCanvas(xDiff) {
          // Then refresh the grid canvas, rebuilding the styles so that the scrollbar updates its size
          uiGridCtrl.grid.refreshCanvas(true).then( function() {
            uiGridCtrl.grid.queueGridRefresh();
          });
        }

        // Check that the requested width isn't wider than the maxWidth, or narrower than the minWidth
        // Returns the new recommended with, after constraints applied
        function constrainWidth(col, width) {
          var newWidth = width;

          // If the new width would be less than the column's allowably minimum width, don't allow it
          if (col.minWidth && newWidth < col.minWidth) {
            newWidth = col.minWidth;
          }
          else if (col.maxWidth && newWidth > col.maxWidth) {
            newWidth = col.maxWidth;
          }

          return newWidth;
        }


        /*
         * Our approach to event handling aims to deal with both touch devices and mouse devices
         * We register down handlers on both touch and mouse.  When a touchstart or mousedown event
         * occurs, we register the corresponding touchmove/touchend, or mousemove/mouseend events.
         *
         * This way we can listen for both without worrying about the fact many touch devices also emulate
         * mouse events - basically whichever one we hear first is what we'll go with.
         */
        function moveFunction(event, args) {
          if (event.originalEvent) { event = event.originalEvent; }
          event.preventDefault();

          x = (event.targetTouches ? event.targetTouches[0] : event).clientX - gridLeft;

          if (x < 0) { x = 0; }
          else if (x > uiGridCtrl.grid.gridWidth) { x = uiGridCtrl.grid.gridWidth; }

          var col = uiGridResizeColumnsService.findTargetCol($scope.col, $scope.position, rtlMultiplier);

          // Don't resize if it's disabled on this column
          if (col.colDef.enableColumnResizing === false) {
            return;
          }

          if (!uiGridCtrl.grid.element.hasClass('column-resizing')) {
            uiGridCtrl.grid.element.addClass('column-resizing');
          }

          // Get the diff along the X axis
          var xDiff = x - startX;

          // Get the width that this mouse would give the column
          var newWidth = parseInt(col.drawnWidth + xDiff * rtlMultiplier, 10);

          // check we're not outside the allowable bounds for this column
          x = x + ( constrainWidth(col, newWidth) - newWidth ) * rtlMultiplier;

          resizeOverlay.css({ left: x + 'px' });

          uiGridCtrl.fireEvent(uiGridConstants.events.ITEM_DRAGGING);
        }


        function upFunction(event) {
          if (event.originalEvent) { event = event.originalEvent; }
          event.preventDefault();

          uiGridCtrl.grid.element.removeClass('column-resizing');

          resizeOverlay.remove();

          // Resize the column
          x = (event.changedTouches ? event.changedTouches[0] : event).clientX - gridLeft;
          var xDiff = x - startX;

          if (xDiff === 0) {
            // no movement, so just reset event handlers, including turning back on both
            // down events - we turned one off when this event started
            offAllEvents();
            onDownEvents();
            return;
          }

          var col = uiGridResizeColumnsService.findTargetCol($scope.col, $scope.position, rtlMultiplier);

          // Don't resize if it's disabled on this column
          if (col.colDef.enableColumnResizing === false) {
            return;
          }

          // Get the new width
          var newWidth = parseInt(col.drawnWidth + xDiff * rtlMultiplier, 10);

          // check we're not outside the allowable bounds for this column
          col.width = constrainWidth(col, newWidth);
          col.hasCustomWidth = true;

          refreshCanvas(xDiff);

          uiGridResizeColumnsService.fireColumnSizeChanged(uiGridCtrl.grid, col.colDef, xDiff);

          // stop listening of up and move events - wait for next down
          // reset the down events - we will have turned one off when this event started
          offAllEvents();
          onDownEvents();
        }


        var downFunction = function(event, args) {
          if (event.originalEvent) { event = event.originalEvent; }
          event.stopPropagation();

          // Get the left offset of the grid
          // gridLeft = uiGridCtrl.grid.element[0].offsetLeft;
          gridLeft = uiGridCtrl.grid.element[0].getBoundingClientRect().left;

          // Get the starting X position, which is the X coordinate of the click minus the grid's offset
          startX = (event.targetTouches ? event.targetTouches[0] : event).clientX - gridLeft;

          // Append the resizer overlay
          uiGridCtrl.grid.element.append(resizeOverlay);

          // Place the resizer overlay at the start position
          resizeOverlay.css({ left: startX });

          // Add handlers for move and up events - if we were mousedown then we listen for mousemove and mouseup, if
          // we were touchdown then we listen for touchmove and touchup.  Also remove the handler for the equivalent
          // down event - so if we're touchdown, then remove the mousedown handler until this event is over, if we're
          // mousedown then remove the touchdown handler until this event is over, this avoids processing duplicate events
          if ( event.type === 'touchstart' ) {
            $document.on('touchend', upFunction);
            $document.on('touchmove', moveFunction);
            $elm.off('mousedown', downFunction);
          }
          else {
            $document.on('mouseup', upFunction);
            $document.on('mousemove', moveFunction);
            $elm.off('touchstart', downFunction);
          }
        };

        var onDownEvents = function() {
          $elm.on('mousedown', downFunction);
          $elm.on('touchstart', downFunction);
        };

        var offAllEvents = function() {
          $document.off('mouseup', upFunction);
          $document.off('touchend', upFunction);
          $document.off('mousemove', moveFunction);
          $document.off('touchmove', moveFunction);
          $elm.off('mousedown', downFunction);
          $elm.off('touchstart', downFunction);
        };

        onDownEvents();


        // On doubleclick, resize to fit all rendered cells
        var dblClickFn = function(event, args) {
          event.stopPropagation();

          var col = uiGridResizeColumnsService.findTargetCol($scope.col, $scope.position, rtlMultiplier);

          // Don't resize if it's disabled on this column
          if (col.colDef.enableColumnResizing === false) {
            return;
          }

          // Go through the rendered rows and find out the max size for the data in this column
          var maxWidth = 0;

          // Get the parent render container element
          var renderContainerElm = gridUtil.closestElm($elm, '.ui-grid-render-container');

          // Get the cell contents so we measure correctly. For the header cell we have to account for the sort icon and the menu buttons, if present
          var cells = renderContainerElm.querySelectorAll('.' + uiGridConstants.COL_CLASS_PREFIX + col.uid + ' .ui-grid-cell-contents');
          Array.prototype.forEach.call(cells, function (cell) {
              // Get the cell width
              // gridUtil.logDebug('width', gridUtil.elementWidth(cell));

              // Account for the menu button if it exists
              var menuButton;
              if (angular.element(cell).parent().hasClass('ui-grid-header-cell')) {
                menuButton = angular.element(cell).parent()[0].querySelectorAll('.ui-grid-column-menu-button');
              }

              gridUtil.fakeElement(cell, {}, function(newElm) {
                // Make the element float since it's a div and can expand to fill its container
                var e = angular.element(newElm);
                e.attr('style', 'float: left');

                var width = gridUtil.elementWidth(e);

                if (menuButton) {
                  var menuButtonWidth = gridUtil.elementWidth(menuButton);
                  width = width + menuButtonWidth;
                }

                if (width > maxWidth) {
                  maxWidth = width;
                }
              });
            });

          // check we're not outside the allowable bounds for this column
          var newWidth = constrainWidth(col, maxWidth);
          var xDiff = newWidth - col.drawnWidth;
          col.width = newWidth;
          col.hasCustomWidth = true;

          refreshCanvas(xDiff);

          uiGridResizeColumnsService.fireColumnSizeChanged(uiGridCtrl.grid, col.colDef, xDiff);        };
        $elm.on('dblclick', dblClickFn);

        $elm.on('$destroy', function() {
          $elm.off('dblclick', dblClickFn);
          offAllEvents();
        });
      }
    };
  }]);
})();

(function () {
  'use strict';

  /**
   * @ngdoc overview
   * @name ui.grid.rowEdit
   * @description
   *
   * # ui.grid.rowEdit
   *
   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
   *
   * This module extends the edit feature to provide tracking and saving of rows
   * of data.  The tutorial provides more information on how this feature is best
   * used {@link tutorial/205_row_editable here}.
   * <br/>
   * This feature depends on usage of the ui-grid-edit feature, and also benefits
   * from use of ui-grid-cellNav to provide the full spreadsheet-like editing
   * experience
   *
   */

  var module = angular.module('ui.grid.rowEdit', ['ui.grid', 'ui.grid.edit', 'ui.grid.cellNav']);

  /**
   *  @ngdoc object
   *  @name ui.grid.rowEdit.constant:uiGridRowEditConstants
   *
   *  @description constants available in row edit module
   */
  module.constant('uiGridRowEditConstants', {
  });

  /**
   *  @ngdoc service
   *  @name ui.grid.rowEdit.service:uiGridRowEditService
   *
   *  @description Services for row editing features
   */
  module.service('uiGridRowEditService', ['$interval', '$q', 'uiGridConstants', 'uiGridRowEditConstants', 'gridUtil',
    function ($interval, $q, uiGridConstants, uiGridRowEditConstants, gridUtil) {

      var service = {

        initializeGrid: function (scope, grid) {
          /**
           *  @ngdoc object
           *  @name ui.grid.rowEdit.api:PublicApi
           *
           *  @description Public Api for rowEdit feature
           */

          grid.rowEdit = {};

          var publicApi = {
            events: {
              rowEdit: {
                /**
                 * @ngdoc event
                 * @eventOf ui.grid.rowEdit.api:PublicApi
                 * @name saveRow
                 * @description raised when a row is ready for saving.  Once your
                 * row has saved you may need to use angular.extend to update the
                 * data entity with any changed data from your save (for example,
                 * lock version information if you're using optimistic locking,
                 * or last update time/user information).
                 *
                 * Your method should call setSavePromise somewhere in the body before
                 * returning control.  The feature will then wait, with the gridRow greyed out
                 * whilst this promise is being resolved.
                 *
                 * <pre>
                 *      gridApi.rowEdit.on.saveRow(scope,function(rowEntity) {})
                 * </pre>
                 * and somewhere within the event handler:
                 * <pre>
                 *      gridApi.rowEdit.setSavePromise( rowEntity, savePromise)
                 * </pre>
                 * @param {object} rowEntity the options.data element that was edited
                 * @returns {promise} Your saveRow method should return a promise, the
                 * promise should either be resolved (implying successful save), or
                 * rejected (implying an error).
                 */
                saveRow: function (rowEntity) {
                }
              }
            },
            methods: {
              rowEdit: {
                /**
                 * @ngdoc method
                 * @methodOf ui.grid.rowEdit.api:PublicApi
                 * @name setSavePromise
                 * @description Sets the promise associated with the row save, mandatory that
                 * the saveRow event handler calls this method somewhere before returning.
                 * <pre>
                 *      gridApi.rowEdit.setSavePromise(rowEntity, savePromise)
                 * </pre>
                 * @param {object} rowEntity a data row from the grid for which a save has
                 * been initiated
                 * @param {promise} savePromise the promise that will be resolved when the
                 * save is successful, or rejected if the save fails
                 *
                 */
                setSavePromise: function ( rowEntity, savePromise) {
                  service.setSavePromise(grid, rowEntity, savePromise);
                },
                /**
                 * @ngdoc method
                 * @methodOf ui.grid.rowEdit.api:PublicApi
                 * @name getDirtyRows
                 * @description Returns all currently dirty rows
                 * <pre>
                 *      gridApi.rowEdit.getDirtyRows(grid)
                 * </pre>
                 * @returns {array} An array of gridRows that are currently dirty
                 *
                 */
                getDirtyRows: function () {
                  return grid.rowEdit.dirtyRows ? grid.rowEdit.dirtyRows : [];
                },
                /**
                 * @ngdoc method
                 * @methodOf ui.grid.rowEdit.api:PublicApi
                 * @name getErrorRows
                 * @description Returns all currently errored rows
                 * <pre>
                 *      gridApi.rowEdit.getErrorRows(grid)
                 * </pre>
                 * @returns {array} An array of gridRows that are currently in error
                 *
                 */
                getErrorRows: function () {
                  return grid.rowEdit.errorRows ? grid.rowEdit.errorRows : [];
                },
                /**
                 * @ngdoc method
                 * @methodOf ui.grid.rowEdit.api:PublicApi
                 * @name flushDirtyRows
                 * @description Triggers a save event for all currently dirty rows, could
                 * be used where user presses a save button or navigates away from the page
                 * <pre>
                 *      gridApi.rowEdit.flushDirtyRows(grid)
                 * </pre>
                 * @returns {promise} a promise that represents the aggregate of all
                 * of the individual save promises - i.e. it will be resolved when all
                 * the individual save promises have been resolved.
                 *
                 */
                flushDirtyRows: function () {
                  return service.flushDirtyRows(grid);
                },

                /**
                 * @ngdoc method
                 * @methodOf ui.grid.rowEdit.api:PublicApi
                 * @name setRowsDirty
                 * @description Sets each of the rows passed in dataRows
                 * to be dirty. Note that if you have only just inserted the
                 * rows into your data you will need to wait for a $digest cycle
                 * before the gridRows are present - so often you would wrap this
                 * call in a $interval or $timeout. Also, you must pass row.entity
                 * into this function rather than row objects themselves.
                 * <pre>
                 *      $interval( function() {
                 *        gridApi.rowEdit.setRowsDirty(myDataRows);
                 *      }, 0, 1);
                 * </pre>
                 * @param {array} dataRows the data entities for which the gridRows
                 * should be set dirty.
                 *
                 */
                setRowsDirty: function ( dataRows) {
                  service.setRowsDirty(grid, dataRows);
                },

                /**
                 * @ngdoc method
                 * @methodOf ui.grid.rowEdit.api:PublicApi
                 * @name setRowsClean
                 * @description Sets each of the rows passed in dataRows
                 * to be clean, removing them from the dirty cache and the error cache,
                 * and clearing the error flag and the dirty flag
                 * <pre>
                 *      var gridRows = $scope.gridApi.rowEdit.getDirtyRows();
                 *      var dataRows = gridRows.map( function( gridRow ) { return gridRow.entity; });
                 *      $scope.gridApi.rowEdit.setRowsClean( dataRows );
                 * </pre>
                 * @param {array} dataRows the data entities for which the gridRows
                 * should be set clean.
                 *
                 */
                setRowsClean: function ( dataRows) {
                  service.setRowsClean(grid, dataRows);
                }
              }
            }
          };

          grid.api.registerEventsFromObject(publicApi.events);
          grid.api.registerMethodsFromObject(publicApi.methods);

          grid.api.core.on.renderingComplete( scope, function ( gridApi ) {
            grid.api.edit.on.afterCellEdit( scope, service.endEditCell );
            grid.api.edit.on.beginCellEdit( scope, service.beginEditCell );
            grid.api.edit.on.cancelCellEdit( scope, service.cancelEditCell );

            if ( grid.api.cellNav ) {
              grid.api.cellNav.on.navigate( scope, service.navigate );
            }
          });

        },

        defaultGridOptions: function (gridOptions) {

          /**
           *  @ngdoc object
           *  @name ui.grid.rowEdit.api:GridOptions
           *
           *  @description Options for configuring the rowEdit feature, these are available to be
           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
           */

        },


        /**
         * @ngdoc method
         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
         * @name saveRow
         * @description  Returns a function that saves the specified row from the grid,
         * and returns a promise
         * @param {object} grid the grid for which dirty rows should be flushed
         * @param {GridRow} gridRow the row that should be saved
         * @returns {function} the saveRow function returns a function.  That function
         * in turn, when called, returns a promise relating to the save callback
         */
        saveRow: function ( grid, gridRow ) {
          var self = this;

          return function() {
            gridRow.isSaving = true;

            if ( gridRow.rowEditSavePromise ) {
              // don't save the row again if it's already saving - that causes stale object exceptions
              return gridRow.rowEditSavePromise;
            }

            var promise = grid.api.rowEdit.raise.saveRow( gridRow.entity );

            if ( gridRow.rowEditSavePromise ) {
              gridRow.rowEditSavePromise.then( self.processSuccessPromise( grid, gridRow ), self.processErrorPromise( grid, gridRow ));
            } else {
              gridUtil.logError( 'A promise was not returned when saveRow event was raised, either nobody is listening to event, or event handler did not return a promise' );
            }
            return promise;
          };
        },


        /**
         * @ngdoc method
         * @methodOf  ui.grid.rowEdit.service:uiGridRowEditService
         * @name setSavePromise
         * @description Sets the promise associated with the row save, mandatory that
         * the saveRow event handler calls this method somewhere before returning.
         * <pre>
         *      gridApi.rowEdit.setSavePromise(grid, rowEntity)
         * </pre>
         * @param {object} grid the grid for which dirty rows should be returned
         * @param {object} rowEntity a data row from the grid for which a save has
         * been initiated
         * @param {promise} savePromise the promise that will be resolved when the
         * save is successful, or rejected if the save fails
         *
         */
        setSavePromise: function (grid, rowEntity, savePromise) {
          var gridRow = grid.getRow( rowEntity );
          gridRow.rowEditSavePromise = savePromise;
        },


        /**
         * @ngdoc method
         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
         * @name processSuccessPromise
         * @description  Returns a function that processes the successful
         * resolution of a save promise
         * @param {object} grid the grid for which the promise should be processed
         * @param {GridRow} gridRow the row that has been saved
         * @returns {function} the success handling function
         */
        processSuccessPromise: function ( grid, gridRow ) {
          var self = this;

          return function() {
            delete gridRow.isSaving;
            delete gridRow.isDirty;
            delete gridRow.isError;
            delete gridRow.rowEditSaveTimer;
            delete gridRow.rowEditSavePromise;
            self.removeRow( grid.rowEdit.errorRows, gridRow );
            self.removeRow( grid.rowEdit.dirtyRows, gridRow );
          };
        },


        /**
         * @ngdoc method
         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
         * @name processErrorPromise
         * @description  Returns a function that processes the failed
         * resolution of a save promise
         * @param {object} grid the grid for which the promise should be processed
         * @param {GridRow} gridRow the row that is now in error
         * @returns {function} the error handling function
         */
        processErrorPromise: function ( grid, gridRow ) {
          return function() {
            delete gridRow.isSaving;
            delete gridRow.rowEditSaveTimer;
            delete gridRow.rowEditSavePromise;

            gridRow.isError = true;

            if (!grid.rowEdit.errorRows) {
              grid.rowEdit.errorRows = [];
            }
            if (!service.isRowPresent( grid.rowEdit.errorRows, gridRow ) ) {
              grid.rowEdit.errorRows.push( gridRow );
            }
          };
        },


        /**
         * @ngdoc method
         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
         * @name removeRow
         * @description  Removes a row from a cache of rows - either
         * grid.rowEdit.errorRows or grid.rowEdit.dirtyRows.  If the row
         * is not present silently does nothing.
         * @param {array} rowArray the array from which to remove the row
         * @param {GridRow} gridRow the row that should be removed
         */
        removeRow: function( rowArray, removeGridRow ) {
          if (typeof(rowArray) === 'undefined' || rowArray === null) {
            return;
          }

          rowArray.forEach( function( gridRow, index ) {
            if ( gridRow.uid === removeGridRow.uid ) {
              rowArray.splice( index, 1);
            }
          });
        },


        /**
         * @ngdoc method
         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
         * @name isRowPresent
         * @description  Checks whether a row is already present
         * in the given array
         * @param {array} rowArray the array in which to look for the row
         * @param {GridRow} gridRow the row that should be looked for
         */
        isRowPresent: function( rowArray, removeGridRow ) {
          var present = false;
          rowArray.forEach( function( gridRow, index ) {
            if ( gridRow.uid === removeGridRow.uid ) {
              present = true;
            }
          });
          return present;
        },


        /**
         * @ngdoc method
         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
         * @name flushDirtyRows
         * @description Triggers a save event for all currently dirty rows, could
         * be used where user presses a save button or navigates away from the page
         * <pre>
         *      gridApi.rowEdit.flushDirtyRows(grid)
         * </pre>
         * @param {object} grid the grid for which dirty rows should be flushed
         * @returns {promise} a promise that represents the aggregate of all
         * of the individual save promises - i.e. it will be resolved when all
         * the individual save promises have been resolved.
         *
         */
        flushDirtyRows: function(grid) {
          var promises = [];
          grid.api.rowEdit.getDirtyRows().forEach( function( gridRow ) {
            service.cancelTimer( grid, gridRow );
            service.saveRow( grid, gridRow )();
            promises.push( gridRow.rowEditSavePromise );
          });

          return $q.all( promises );
        },


        /**
         * @ngdoc method
         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
         * @name endEditCell
         * @description Receives an afterCellEdit event from the edit function,
         * and sets flags as appropriate.  Only the rowEntity parameter
         * is processed, although other params are available.  Grid
         * is automatically provided by the gridApi.
         * @param {object} rowEntity the data entity for which the cell
         * was edited
         */
        endEditCell: function( rowEntity, colDef, newValue, previousValue ) {
          var grid = this.grid;
          var gridRow = grid.getRow( rowEntity );
          if ( !gridRow ) { gridUtil.logError( 'Unable to find rowEntity in grid data, dirty flag cannot be set' ); return; }

          if ( newValue !== previousValue || gridRow.isDirty ) {
            if ( !grid.rowEdit.dirtyRows ) {
              grid.rowEdit.dirtyRows = [];
            }

            if ( !gridRow.isDirty ) {
              gridRow.isDirty = true;
              grid.rowEdit.dirtyRows.push( gridRow );
            }

            delete gridRow.isError;

            service.considerSetTimer( grid, gridRow );
          }
        },


        /**
         * @ngdoc method
         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
         * @name beginEditCell
         * @description Receives a beginCellEdit event from the edit function,
         * and cancels any rowEditSaveTimers if present, as the user is still editing
         * this row.  Only the rowEntity parameter
         * is processed, although other params are available.  Grid
         * is automatically provided by the gridApi.
         * @param {object} rowEntity the data entity for which the cell
         * editing has commenced
         */
        beginEditCell: function( rowEntity, colDef ) {
          var grid = this.grid;
          var gridRow = grid.getRow( rowEntity );
          if ( !gridRow ) { gridUtil.logError( 'Unable to find rowEntity in grid data, timer cannot be cancelled' ); return; }

          service.cancelTimer( grid, gridRow );
        },


        /**
         * @ngdoc method
         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
         * @name cancelEditCell
         * @description Receives a cancelCellEdit event from the edit function,
         * and if the row was already dirty, restarts the save timer.  If the row
         * was not already dirty, then it's not dirty now either and does nothing.
         *
         * Only the rowEntity parameter
         * is processed, although other params are available.  Grid
         * is automatically provided by the gridApi.
         *
         * @param {object} rowEntity the data entity for which the cell
         * editing was cancelled
         */
        cancelEditCell: function( rowEntity, colDef ) {
          var grid = this.grid;
          var gridRow = grid.getRow( rowEntity );
          if ( !gridRow ) { gridUtil.logError( 'Unable to find rowEntity in grid data, timer cannot be set' ); return; }

          service.considerSetTimer( grid, gridRow );
        },


        /**
         * @ngdoc method
         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
         * @name navigate
         * @description cellNav tells us that the selected cell has changed.  If
         * the new row had a timer running, then stop it similar to in a beginCellEdit
         * call.  If the old row is dirty and not the same as the new row, then
         * start a timer on it.
         * @param {object} newRowCol the row and column that were selected
         * @param {object} oldRowCol the row and column that was left
         *
         */
        navigate: function( newRowCol, oldRowCol ) {
          var grid = this.grid;
          if ( newRowCol.row.rowEditSaveTimer ) {
            service.cancelTimer( grid, newRowCol.row );
          }

          if ( oldRowCol && oldRowCol.row && oldRowCol.row !== newRowCol.row ) {
            service.considerSetTimer( grid, oldRowCol.row );
          }
        },


        /**
         * @ngdoc property
         * @propertyOf ui.grid.rowEdit.api:GridOptions
         * @name rowEditWaitInterval
         * @description How long the grid should wait for another change on this row
         * before triggering a save (in milliseconds).  If set to -1, then saves are
         * never triggered by timer (implying that the user will call flushDirtyRows()
         * manually)
         *
         * @example
         * Setting the wait interval to 4 seconds
         * <pre>
         *   $scope.gridOptions = { rowEditWaitInterval: 4000 }
         * </pre>
         *
         */
        /**
         * @ngdoc method
         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
         * @name considerSetTimer
         * @description Consider setting a timer on this row (if it is dirty).  if there is a timer running
         * on the row and the row isn't currently saving, cancel it, using cancelTimer, then if the row is
         * dirty and not currently saving then set a new timer
         * @param {object} grid the grid for which we are processing
         * @param {GridRow} gridRow the row for which the timer should be adjusted
         *
         */
        considerSetTimer: function( grid, gridRow ) {
          service.cancelTimer( grid, gridRow );

          if ( gridRow.isDirty && !gridRow.isSaving ) {
            if ( grid.options.rowEditWaitInterval !== -1 ) {
              var waitTime = grid.options.rowEditWaitInterval ? grid.options.rowEditWaitInterval : 2000;
              gridRow.rowEditSaveTimer = $interval( service.saveRow( grid, gridRow ), waitTime, 1);
            }
          }
        },


        /**
         * @ngdoc method
         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
         * @name cancelTimer
         * @description cancel the $interval for any timer running on this row
         * then delete the timer itself
         * @param {object} grid the grid for which we are processing
         * @param {GridRow} gridRow the row for which the timer should be adjusted
         *
         */
        cancelTimer: function( grid, gridRow ) {
          if ( gridRow.rowEditSaveTimer && !gridRow.isSaving ) {
            $interval.cancel(gridRow.rowEditSaveTimer);
            delete gridRow.rowEditSaveTimer;
          }
        },


        /**
         * @ngdoc method
         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
         * @name setRowsDirty
         * @description Sets each of the rows passed in dataRows
         * to be dirty.  note that if you have only just inserted the
         * rows into your data you will need to wait for a $digest cycle
         * before the gridRows are present - so often you would wrap this
         * call in a $interval or $timeout
         * <pre>
         *      $interval( function() {
         *        gridApi.rowEdit.setRowsDirty( myDataRows);
         *      }, 0, 1);
         * </pre>
         * @param {object} grid the grid for which rows should be set dirty
         * @param {array} dataRows the data entities for which the gridRows
         * should be set dirty.
         *
         */
        setRowsDirty: function( grid, myDataRows ) {
          var gridRow;
          myDataRows.forEach( function( value, index ) {
            gridRow = grid.getRow( value );
            if ( gridRow ) {
              if ( !grid.rowEdit.dirtyRows ) {
                grid.rowEdit.dirtyRows = [];
              }

              if ( !gridRow.isDirty ) {
                gridRow.isDirty = true;
                grid.rowEdit.dirtyRows.push( gridRow );
              }

              delete gridRow.isError;

              service.considerSetTimer( grid, gridRow );
            } else {
              gridUtil.logError( "requested row not found in rowEdit.setRowsDirty, row was: " + value );
            }
          });
        },


        /**
         * @ngdoc method
         * @methodOf ui.grid.rowEdit.service:uiGridRowEditService
         * @name setRowsClean
         * @description Sets each of the rows passed in dataRows
         * to be clean, clearing the dirty flag and the error flag, and removing
         * the rows from the dirty and error caches.
         * @param {object} grid the grid for which rows should be set clean
         * @param {array} dataRows the data entities for which the gridRows
         * should be set clean.
         *
         */
        setRowsClean: function( grid, myDataRows ) {
          var gridRow;

          myDataRows.forEach( function( value, index ) {
            gridRow = grid.getRow( value );
            if ( gridRow ) {
              delete gridRow.isDirty;
              service.removeRow( grid.rowEdit.dirtyRows, gridRow );
              service.cancelTimer( grid, gridRow );

              delete gridRow.isError;
              service.removeRow( grid.rowEdit.errorRows, gridRow );
            } else {
              gridUtil.logError( "requested row not found in rowEdit.setRowsClean, row was: " + value );
            }
          });
        }

      };

      return service;

    }]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.rowEdit.directive:uiGridEdit
   *  @element div
   *  @restrict A
   *
   *  @description Adds row editing features to the ui-grid-edit directive.
   *
   */
  module.directive('uiGridRowEdit', ['gridUtil', 'uiGridRowEditService', 'uiGridEditConstants',
  function (gridUtil, uiGridRowEditService, uiGridEditConstants) {
    return {
      replace: true,
      priority: 0,
      require: '^uiGrid',
      scope: false,
      compile: function () {
        return {
          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
            uiGridRowEditService.initializeGrid($scope, uiGridCtrl.grid);
          },
          post: function ($scope, $elm, $attrs, uiGridCtrl) {
          }
        };
      }
    };
  }]);


  /**
   *  @ngdoc directive
   *  @name ui.grid.rowEdit.directive:uiGridViewport
   *  @element div
   *
   *  @description Stacks on top of ui.grid.uiGridViewport to alter the attributes used
   *  for the grid row to allow coloring of saving and error rows
   */
  module.directive('uiGridViewport',
    ['$compile', 'uiGridConstants', 'gridUtil', '$parse',
      function ($compile, uiGridConstants, gridUtil, $parse) {
        return {
          priority: -200, // run after default  directive
          scope: false,
          compile: function ($elm, $attrs) {
            var rowRepeatDiv = angular.element($elm.children().children()[0]);

            var existingNgClass = rowRepeatDiv.attr("ng-class");
            var newNgClass = '';
            if ( existingNgClass ) {
              newNgClass = existingNgClass.slice(0, -1) + ", 'ui-grid-row-dirty': row.isDirty, 'ui-grid-row-saving': row.isSaving, 'ui-grid-row-error': row.isError}";
            } else {
              newNgClass = "{'ui-grid-row-dirty': row.isDirty, 'ui-grid-row-saving': row.isSaving, 'ui-grid-row-error': row.isError}";
            }
            rowRepeatDiv.attr("ng-class", newNgClass);

            return {
              pre: function ($scope, $elm, $attrs, controllers) {

              },
              post: function ($scope, $elm, $attrs, controllers) {
              }
            };
          }
        };
      }]);

})();

(function () {
  'use strict';

  /**
   * @ngdoc overview
   * @name ui.grid.saveState
   * @description
   *
   * # ui.grid.saveState
   *
   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
   *
   * This module provides the ability to save the grid state, and restore
   * it when the user returns to the page.
   *
   * No UI is provided, the caller should provide their own UI/buttons
   * as appropriate. Usually the navigate events would be used to save
   * the grid state and restore it.
   *
   * <br/>
   * <br/>
   *
   * <div doc-module-components="ui.grid.save-state"></div>
   */

  var module = angular.module('ui.grid.saveState', ['ui.grid', 'ui.grid.selection', 'ui.grid.cellNav', 'ui.grid.grouping', 'ui.grid.pinning', 'ui.grid.treeView']);

  /**
   *  @ngdoc object
   *  @name ui.grid.saveState.constant:uiGridSaveStateConstants
   *
   *  @description constants available in save state module
   */

  module.constant('uiGridSaveStateConstants', {
    featureName: 'saveState'
  });

  /**
   *  @ngdoc service
   *  @name ui.grid.saveState.service:uiGridSaveStateService
   *
   *  @description Services for saveState feature
   */
  module.service('uiGridSaveStateService',
    function () {
      var service = {

        initializeGrid: function (grid) {

          // add feature namespace and any properties to grid for needed state
          grid.saveState = {};
          this.defaultGridOptions(grid.options);

          /**
           *  @ngdoc object
           *  @name ui.grid.saveState.api:PublicApi
           *
           *  @description Public Api for saveState feature
           */
          var publicApi = {
            events: {
              saveState: {
              }
            },
            methods: {
              saveState: {
                /**
                 * @ngdoc function
                 * @name save
                 * @methodOf  ui.grid.saveState.api:PublicApi
                 * @description Packages the current state of the grid into
                 * an object, and provides it to the user for saving
                 * @returns {object} the state as a javascript object that can be saved
                 */
                save: function () {
                  return service.save(grid);
                },
                /**
                 * @ngdoc function
                 * @name restore
                 * @methodOf  ui.grid.saveState.api:PublicApi
                 * @description Restores the provided state into the grid
                 * @param {scope} $scope a scope that we can broadcast on
                 * @param {object} state the state that should be restored into the grid
                 * @returns {object} the promise created by refresh
                 */
                restore: function ( $scope, state) {
                  return service.restore(grid, $scope, state);
                }
              }
            }
          };

          grid.api.registerEventsFromObject(publicApi.events);

          grid.api.registerMethodsFromObject(publicApi.methods);
        },

        defaultGridOptions: function (gridOptions) {
          // default option to true unless it was explicitly set to false
          /**
           * @ngdoc object
           * @name ui.grid.saveState.api:GridOptions
           *
           * @description GridOptions for saveState feature, these are available to be
           * set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
           */
          /**
           * @ngdoc object
           * @name saveWidths
           * @propertyOf  ui.grid.saveState.api:GridOptions
           * @description Save the current column widths.  Note that unless
           * you've provided the user with some way to resize their columns (say
           * the resize columns feature), then this makes little sense.
           * <br/>Defaults to true
           */
          gridOptions.saveWidths = gridOptions.saveWidths !== false;
          /**
           * @ngdoc object
           * @name saveOrder
           * @propertyOf  ui.grid.saveState.api:GridOptions
           * @description Restore the current column order.  Note that unless
           * you've provided the user with some way to reorder their columns (for
           * example the move columns feature), this makes little sense.
           * <br/>Defaults to true
           */
          gridOptions.saveOrder = gridOptions.saveOrder !== false;
          /**
           * @ngdoc object
           * @name saveScroll
           * @propertyOf  ui.grid.saveState.api:GridOptions
           * @description Save the current scroll position.  Note that this
           * is saved as the percentage of the grid scrolled - so if your
           * user returns to a grid with a significantly different number of
           * rows (perhaps some data has been deleted) then the scroll won't
           * actually show the same rows as before.  If you want to scroll to
           * a specific row then you should instead use the saveFocus option, which
           * is the default.
           *
           * Note that this element will only be saved if the cellNav feature is
           * enabled
           * <br/>Defaults to false
           */
          gridOptions.saveScroll = gridOptions.saveScroll === true;
          /**
           * @ngdoc object
           * @name saveFocus
           * @propertyOf  ui.grid.saveState.api:GridOptions
           * @description Save the current focused cell.  On returning
           * to this focused cell we'll also scroll.  This option is
           * preferred to the saveScroll option, so is set to true by
           * default.  If saveScroll is set to true then this option will
           * be disabled.
           *
           * By default this option saves the current row number and column
           * number, and returns to that row and column.  However, if you define
           * a saveRowIdentity function, then it will return you to the currently
           * selected column within that row (in a business sense - so if some
           * rows have been deleted, it will still find the same data, presuming it
           * still exists in the list.  If it isn't in the list then it will instead
           * return to the same row number - i.e. scroll percentage)
           *
           * Note that this option will do nothing if the cellNav
           * feature is not enabled.
           *
           * <br/>Defaults to true (unless saveScroll is true)
           */
          gridOptions.saveFocus = gridOptions.saveScroll !== true && gridOptions.saveFocus !== false;
          /**
           * @ngdoc object
           * @name saveRowIdentity
           * @propertyOf  ui.grid.saveState.api:GridOptions
           * @description A function that can be called, passing in a rowEntity,
           * and that will return a unique id for that row.  This might simply
           * return the `id` field from that row (if you have one), or it might
           * concatenate some fields within the row to make a unique value.
           *
           * This value will be used to find the same row again and set the focus
           * to it, if it exists when we return.
           *
           * <br/>Defaults to undefined
           */
          /**
           * @ngdoc object
           * @name saveVisible
           * @propertyOf  ui.grid.saveState.api:GridOptions
           * @description Save whether or not columns are visible.
           *
           * <br/>Defaults to true
           */
          gridOptions.saveVisible = gridOptions.saveVisible !== false;
          /**
           * @ngdoc object
           * @name saveSort
           * @propertyOf  ui.grid.saveState.api:GridOptions
           * @description Save the current sort state for each column
           *
           * <br/>Defaults to true
           */
          gridOptions.saveSort = gridOptions.saveSort !== false;
          /**
           * @ngdoc object
           * @name saveFilter
           * @propertyOf  ui.grid.saveState.api:GridOptions
           * @description Save the current filter state for each column
           *
           * <br/>Defaults to true
           */
          gridOptions.saveFilter = gridOptions.saveFilter !== false;
          /**
           * @ngdoc object
           * @name saveSelection
           * @propertyOf  ui.grid.saveState.api:GridOptions
           * @description Save the currently selected rows.  If the `saveRowIdentity` callback
           * is defined, then it will save the id of the row and select that.  If not, then
           * it will attempt to select the rows by row number, which will give the wrong results
           * if the data set has changed in the mean-time.
           *
           * Note that this option only does anything
           * if the selection feature is enabled.
           *
           * <br/>Defaults to true
           */
          gridOptions.saveSelection = gridOptions.saveSelection !== false;
          /**
           * @ngdoc object
           * @name saveGrouping
           * @propertyOf  ui.grid.saveState.api:GridOptions
           * @description Save the grouping configuration.  If set to true and the
           * grouping feature is not enabled then does nothing.
           *
           * <br/>Defaults to true
           */
          gridOptions.saveGrouping = gridOptions.saveGrouping !== false;
          /**
           * @ngdoc object
           * @name saveGroupingExpandedStates
           * @propertyOf  ui.grid.saveState.api:GridOptions
           * @description Save the grouping row expanded states.  If set to true and the
           * grouping feature is not enabled then does nothing.
           *
           * This can be quite a bit of data, in many cases you wouldn't want to save this
           * information.
           *
           * <br/>Defaults to false
           */
          gridOptions.saveGroupingExpandedStates = gridOptions.saveGroupingExpandedStates === true;
          /**
           * @ngdoc object
           * @name savePinning
           * @propertyOf ui.grid.saveState.api:GridOptions
           * @description Save pinning state for columns.
           *
           * <br/>Defaults to true
           */
          gridOptions.savePinning = gridOptions.savePinning !== false;
          /**
           * @ngdoc object
           * @name saveTreeView
           * @propertyOf  ui.grid.saveState.api:GridOptions
           * @description Save the treeView configuration.  If set to true and the
           * treeView feature is not enabled then does nothing.
           *
           * <br/>Defaults to true
           */
          gridOptions.saveTreeView = gridOptions.saveTreeView !== false;
        },

        /**
         * @ngdoc function
         * @name save
         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
         * @description Saves the current grid state into an object, and
         * passes that object back to the caller
         * @param {Grid} grid the grid whose state we'd like to save
         * @returns {object} the state ready to be saved
         */
        save: function (grid) {
          var savedState = {};

          savedState.columns = service.saveColumns( grid );
          savedState.scrollFocus = service.saveScrollFocus( grid );
          savedState.selection = service.saveSelection( grid );
          savedState.grouping = service.saveGrouping( grid );
          savedState.treeView = service.saveTreeView( grid );
          savedState.pagination = service.savePagination( grid );

          return savedState;
        },


        /**
         * @ngdoc function
         * @name restore
         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
         * @description Applies the provided state to the grid
         *
         * @param {Grid} grid the grid whose state we'd like to restore
         * @param {scope} $scope a scope that we can broadcast on
         * @param {object} state the state we'd like to restore
         * @returns {object} the promise created by refresh
         */
        restore: function( grid, $scope, state ) {
          if ( state.columns ) {
            service.restoreColumns( grid, state.columns );
          }

          if ( state.scrollFocus ) {
            service.restoreScrollFocus( grid, $scope, state.scrollFocus );
          }

          if ( state.selection ) {
            service.restoreSelection( grid, state.selection );
          }

          if ( state.grouping ) {
            service.restoreGrouping( grid, state.grouping );
          }

          if ( state.treeView ) {
            service.restoreTreeView( grid, state.treeView );
          }

          if ( state.pagination ) {
            service.restorePagination( grid, state.pagination );
          }

          return grid.refresh();
        },


        /**
         * @ngdoc function
         * @name saveColumns
         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
         * @description Saves the column setup, including sort, filters, ordering,
         * pinning and column widths.
         *
         * Works through the current columns, storing them in order.  Stores the
         * column name, then the visible flag, width, sort and filters for each column.
         *
         * @param {Grid} grid the grid whose state we'd like to save
         * @returns {array} the columns state ready to be saved
         */
        saveColumns: function( grid ) {
          var columns = [];

          grid.getOnlyDataColumns().forEach( function( column ) {
            var savedColumn = {};
            savedColumn.name = column.name;

            if ( grid.options.saveVisible ) {
              savedColumn.visible = column.visible;
            }

            if ( grid.options.saveWidths ) {
              savedColumn.width = column.width;
            }

            // these two must be copied, not just pointed too - otherwise our saved state is pointing to the same object as current state
            if ( grid.options.saveSort ) {
              savedColumn.sort = angular.copy( column.sort );
            }

            if ( grid.options.saveFilter ) {
              savedColumn.filters = [];
              column.filters.forEach( function( filter ) {
                var copiedFilter = {};
                angular.forEach( filter, function( value, key) {
                  if ( key !== 'condition' && key !== '$$hashKey' && key !== 'placeholder') {
                    copiedFilter[key] = value;
                  }
                });
                savedColumn.filters.push(copiedFilter);
              });
            }

            if ( !!grid.api.pinning && grid.options.savePinning ) {
              savedColumn.pinned = column.renderContainer ? column.renderContainer : '';
            }

            columns.push( savedColumn );
          });

          return columns;
        },


        /**
         * @ngdoc function
         * @name saveScrollFocus
         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
         * @description Saves the currently scroll or focus.
         *
         * If cellNav isn't present then does nothing - we can't return
         * to the scroll position without cellNav anyway.
         *
         * If the cellNav module is present, and saveFocus is true, then
         * it saves the currently focused cell.  If rowIdentity is present
         * then saves using rowIdentity, otherwise saves visibleRowNum.
         *
         * If the cellNav module is not present, and saveScroll is true, then
         * it approximates the current scroll row and column, and saves that.
         *
         * @param {Grid} grid the grid whose state we'd like to save
         * @returns {object} the selection state ready to be saved
         */
        saveScrollFocus: function( grid ) {
          if ( !grid.api.cellNav ) {
            return {};
          }

          var scrollFocus = {};
          if ( grid.options.saveFocus ) {
            scrollFocus.focus = true;
            var rowCol = grid.api.cellNav.getFocusedCell();
            if ( rowCol !== null ) {
              if ( rowCol.col !== null ) {
                scrollFocus.colName = rowCol.col.colDef.name;
              }
              if ( rowCol.row !== null ) {
                scrollFocus.rowVal = service.getRowVal( grid, rowCol.row );
              }
            }
          }

          if ( grid.options.saveScroll || grid.options.saveFocus && !scrollFocus.colName && !scrollFocus.rowVal ) {
            scrollFocus.focus = false;
            if ( grid.renderContainers.body.prevRowScrollIndex ) {
              scrollFocus.rowVal = service.getRowVal( grid, grid.renderContainers.body.visibleRowCache[ grid.renderContainers.body.prevRowScrollIndex ]);
            }

            if ( grid.renderContainers.body.prevColScrollIndex ) {
              scrollFocus.colName = grid.renderContainers.body.visibleColumnCache[ grid.renderContainers.body.prevColScrollIndex ].name;
            }
          }

          return scrollFocus;
        },


        /**
         * @ngdoc function
         * @name saveSelection
         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
         * @description Saves the currently selected rows, if the selection feature is enabled
         * @param {Grid} grid the grid whose state we'd like to save
         * @returns {array} the selection state ready to be saved
         */
        saveSelection: function( grid ) {
          if ( !grid.api.selection || !grid.options.saveSelection ) {
            return [];
          }

          return grid.api.selection.getSelectedGridRows().map( function( gridRow ) {
            return service.getRowVal( grid, gridRow );
          });
        },


        /**
         * @ngdoc function
         * @name saveGrouping
         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
         * @description Saves the grouping state, if the grouping feature is enabled
         * @param {Grid} grid the grid whose state we'd like to save
         * @returns {object} the grouping state ready to be saved
         */
        saveGrouping: function( grid ) {
          if ( !grid.api.grouping || !grid.options.saveGrouping ) {
            return {};
          }

          return grid.api.grouping.getGrouping( grid.options.saveGroupingExpandedStates );
        },


        /**
         * @ngdoc function
         * @name savePagination
         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
         * @description Saves the pagination state, if the pagination feature is enabled
         * @param {Grid} grid the grid whose state we'd like to save
         * @returns {object} the pagination state ready to be saved
         */
        savePagination: function( grid ) {
          if ( !grid.api.pagination || !grid.options.paginationPageSize ) {
            return {};
          }

          return {
            paginationCurrentPage: grid.options.paginationCurrentPage,
            paginationPageSize: grid.options.paginationPageSize
          };
        },


        /**
         * @ngdoc function
         * @name saveTreeView
         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
         * @description Saves the tree view state, if the tree feature is enabled
         * @param {Grid} grid the grid whose state we'd like to save
         * @returns {object} the tree view state ready to be saved
         */
        saveTreeView: function( grid ) {
          if ( !grid.api.treeView || !grid.options.saveTreeView ) {
            return {};
          }

          return grid.api.treeView.getTreeView();
        },


        /**
         * @ngdoc function
         * @name getRowVal
         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
         * @description Helper function that gets either the rowNum or
         * the saveRowIdentity, given a gridRow
         * @param {Grid} grid the grid the row is in
         * @param {GridRow} gridRow the row we want the rowNum for
         * @returns {object} an object containing { identity: true/false, row: rowNumber/rowIdentity }
         *
         */
        getRowVal: function( grid, gridRow ) {
          if ( !gridRow ) {
            return null;
          }

          var rowVal = {};
          if ( grid.options.saveRowIdentity ) {
            rowVal.identity = true;
            rowVal.row = grid.options.saveRowIdentity( gridRow.entity );
          }
          else {
            rowVal.identity = false;
            rowVal.row = grid.renderContainers.body.visibleRowCache.indexOf( gridRow );
          }
          return rowVal;
        },


        /**
         * @ngdoc function
         * @name restoreColumns
         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
         * @description Restores the columns, including order, visible, width,
         * pinning, sort and filters.
         *
         * @param {Grid} grid the grid whose state we'd like to restore
         * @param {object} columnsState the list of columns we had before, with their state
         */
        restoreColumns: function( grid, columnsState ) {
          var isSortChanged = false;

          columnsState.forEach( function( columnState, index ) {
            var currentCol = grid.getColumn( columnState.name );

            if ( currentCol && !grid.isRowHeaderColumn(currentCol) ) {
              if ( grid.options.saveVisible &&
                   ( currentCol.visible !== columnState.visible ||
                     currentCol.colDef.visible !== columnState.visible ) ) {
                currentCol.visible = columnState.visible;
                currentCol.colDef.visible = columnState.visible;
                grid.api.core.raise.columnVisibilityChanged(currentCol);
              }

              if ( grid.options.saveWidths && currentCol.width !== columnState.width) {
                currentCol.width = columnState.width;
                currentCol.hasCustomWidth = true;
              }

              if ( grid.options.saveSort &&
                   !angular.equals(currentCol.sort, columnState.sort) &&
                   !( currentCol.sort === undefined && angular.isEmpty(columnState.sort) ) ) {
                currentCol.sort = angular.copy( columnState.sort );
                isSortChanged = true;
              }

              if ( grid.options.saveFilter &&
                   !angular.equals(currentCol.filters, columnState.filters ) ) {
                columnState.filters.forEach( function( filter, index ) {
                  angular.extend( currentCol.filters[index], filter );
                  if ( typeof(filter.term) === 'undefined' || filter.term === null ) {
                    delete currentCol.filters[index].term;
                  }
                });
                grid.api.core.raise.filterChanged( currentCol );
              }

              if ( !!grid.api.pinning && grid.options.savePinning && currentCol.renderContainer !== columnState.pinned ) {
                grid.api.pinning.pinColumn(currentCol, columnState.pinned);
              }

              var currentIndex = grid.getOnlyDataColumns().indexOf( currentCol );
              if (currentIndex !== -1) {
                if (grid.options.saveOrder && currentIndex !== index) {
                  var column = grid.columns.splice(currentIndex + grid.rowHeaderColumns.length, 1)[0];
                  grid.columns.splice(index + grid.rowHeaderColumns.length, 0, column);
                }
              }
            }
          });

          if ( isSortChanged ) {
            grid.api.core.raise.sortChanged( grid, grid.getColumnSorting() );
          }
        },


        /**
         * @ngdoc function
         * @name restoreScrollFocus
         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
         * @description Scrolls to the position that was saved.  If focus is true, then
         * sets focus to the specified row/col.  If focus is false, then scrolls to the
         * specified row/col.
         *
         * @param {Grid} grid the grid whose state we'd like to restore
         * @param {scope} $scope a scope that we can broadcast on
         * @param {object} scrollFocusState the scroll/focus state ready to be restored
         */
        restoreScrollFocus: function( grid, $scope, scrollFocusState ) {
          if ( !grid.api.cellNav ) {
            return;
          }

          var colDef, row;
          if ( scrollFocusState.colName ) {
            var colDefs = grid.options.columnDefs.filter( function( colDef ) { return colDef.name === scrollFocusState.colName; });
            if ( colDefs.length > 0 ) {
              colDef = colDefs[0];
            }
          }

          if ( scrollFocusState.rowVal && scrollFocusState.rowVal.row ) {
            if ( scrollFocusState.rowVal.identity ) {
              row = service.findRowByIdentity( grid, scrollFocusState.rowVal );
            }
            else {
              row = grid.renderContainers.body.visibleRowCache[ scrollFocusState.rowVal.row ];
            }
          }

          var entity = row && row.entity ? row.entity : null ;

          if ( colDef || entity ) {
            if (scrollFocusState.focus ) {
              grid.api.cellNav.scrollToFocus( entity, colDef );
            }
            else {
              grid.scrollTo( entity, colDef );
            }
          }
        },


        /**
         * @ngdoc function
         * @name restoreSelection
         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
         * @description Selects the rows that are provided in the selection
         * state.  If you are using `saveRowIdentity` and more than one row matches the identity
         * function then only the first is selected.
         * @param {Grid} grid the grid whose state we'd like to restore
         * @param {object} selectionState the selection state ready to be restored
         */
        restoreSelection: function( grid, selectionState ) {
          if ( !grid.api.selection ) {
            return;
          }

          grid.api.selection.clearSelectedRows();

          selectionState.forEach(function( rowVal ) {
            if ( rowVal.identity ) {
              var foundRow = service.findRowByIdentity( grid, rowVal );

              if ( foundRow ) {
                grid.api.selection.selectRow( foundRow.entity );
              }

            }
            else {
              grid.api.selection.selectRowByVisibleIndex( rowVal.row );
            }
          });
        },


        /**
         * @ngdoc function
         * @name restoreGrouping
         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
         * @description Restores the grouping configuration, if the grouping feature
         * is enabled.
         * @param {Grid} grid the grid whose state we'd like to restore
         * @param {object} groupingState the grouping state ready to be restored
         */
        restoreGrouping: function( grid, groupingState ) {
          if ( !grid.api.grouping || typeof(groupingState) === 'undefined' || groupingState === null || angular.equals(groupingState, {}) ) {
            return;
          }

          grid.api.grouping.setGrouping( groupingState );
        },

        /**
         * @ngdoc function
         * @name restoreTreeView
         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
         * @description Restores the tree view configuration, if the tree view feature
         * is enabled.
         * @param {Grid} grid the grid whose state we'd like to restore
         * @param {object} treeViewState the tree view state ready to be restored
         */
        restoreTreeView: function( grid, treeViewState ) {
          if ( !grid.api.treeView || typeof(treeViewState) === 'undefined' || treeViewState === null || angular.equals(treeViewState, {}) ) {
            return;
          }

          grid.api.treeView.setTreeView( treeViewState );
        },

        /**
         * @ngdoc function
         * @name restorePagination
         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
         * @description Restores the pagination information, if pagination is enabled.
         * @param {Grid} grid the grid whose state we'd like to restore
         * @param {object} pagination the pagination object to be restored
         * @param {number} pagination.paginationCurrentPage the page number to restore
         * @param {number} pagination.paginationPageSize the number of items displayed per page
         */
        restorePagination: function( grid, pagination ) {
          if ( !grid.api.pagination || !grid.options.paginationPageSize ) {
            return;
          }

          grid.options.paginationCurrentPage = pagination.paginationCurrentPage;
          grid.options.paginationPageSize = pagination.paginationPageSize;
        },

        /**
         * @ngdoc function
         * @name findRowByIdentity
         * @methodOf  ui.grid.saveState.service:uiGridSaveStateService
         * @description Finds a row given it's identity value, returns the first found row
         * if any are found, otherwise returns null if no rows are found.
         * @param {Grid} grid the grid whose state we'd like to restore
         * @param {object} rowVal the row we'd like to find
         * @returns {gridRow} the found row, or null if none found
         */
        findRowByIdentity: function( grid, rowVal ) {
          if ( !grid.options.saveRowIdentity ) {
            return null;
          }

          var filteredRows = grid.rows.filter( function( gridRow ) {
            return ( grid.options.saveRowIdentity( gridRow.entity ) === rowVal.row );
          });

          if ( filteredRows.length > 0 ) {
            return filteredRows[0];
          } else {
            return null;
          }
        }
      };

      return service;
    }
  );

  /**
   *  @ngdoc directive
   *  @name ui.grid.saveState.directive:uiGridSaveState
   *  @element div
   *  @restrict A
   *
   *  @description Adds saveState features to grid
   *
   *  @example
   <example module="app">
   <file name="app.js">
   var app = angular.module('app', ['ui.grid', 'ui.grid.saveState']);

   app.controller('MainCtrl', ['$scope', function ($scope) {
      $scope.data = [
        { name: 'Bob', title: 'CEO' },
        { name: 'Frank', title: 'Lowly Developer' }
      ];

      $scope.gridOptions = {
        columnDefs: [
          {name: 'name'},
          {name: 'title', enableCellEdit: true}
        ],
        data: $scope.data
      };
    }]);
   </file>
   <file name="index.html">
   <div ng-controller="MainCtrl">
   <div ui-grid="gridOptions" ui-grid-save-state></div>
   </div>
   </file>
   </example>
   */
  module.directive('uiGridSaveState', ['uiGridSaveStateConstants', 'uiGridSaveStateService', 'gridUtil', '$compile',
    function (uiGridSaveStateConstants, uiGridSaveStateService, gridUtil, $compile) {
      return {
        replace: true,
        priority: 0,
        require: '^uiGrid',
        scope: false,
        link: function ($scope, $elm, $attrs, uiGridCtrl) {
          uiGridSaveStateService.initializeGrid(uiGridCtrl.grid);
        }
      };
    }
  ]);
})();

(function () {
  'use strict';

  /**
   * @ngdoc overview
   * @name ui.grid.selection
   * @description
   *
   * # ui.grid.selection
   * This module provides row selection
   *
   * <div class="alert alert-success" role="alert"><strong>Stable</strong> This feature is stable. There should no longer be breaking api changes without a deprecation warning.</div>
   *
   * <div doc-module-components="ui.grid.selection"></div>
   */

  var module = angular.module('ui.grid.selection', ['ui.grid']);

  /**
   *  @ngdoc object
   *  @name ui.grid.selection.constant:uiGridSelectionConstants
   *
   *  @description constants available in selection module
   */
  module.constant('uiGridSelectionConstants', {
    featureName: 'selection',
    selectionRowHeaderColName: 'selectionRowHeaderCol'
  });

  // add methods to GridRow
  angular.module('ui.grid').config(['$provide', function ($provide) {
    $provide.decorator('GridRow', ['$delegate', function ($delegate) {

      /**
       *  @ngdoc object
       *  @name ui.grid.selection.api:GridRow
       *
       *  @description GridRow prototype functions added for selection
       */

      /**
       *  @ngdoc object
       *  @name enableSelection
       *  @propertyOf  ui.grid.selection.api:GridRow
       *  @description Enable row selection for this row, only settable by internal code.
       *
       *  The grouping feature, for example, might set group header rows to not be selectable.
       *  <br/>Defaults to true
       */

      /**
       *  @ngdoc object
       *  @name isSelected
       *  @propertyOf  ui.grid.selection.api:GridRow
       *  @description Selected state of row. Should be readonly. Make any changes to selected state using setSelected().
       *  <br/>Defaults to false
       */

      /**
       *  @ngdoc object
       *  @name isFocused
       *  @propertyOf  ui.grid.selection.api:GridRow
       *  @description Focused state of row. Should be readonly. Make any changes to focused state using setFocused().
       *  <br/>Defaults to false
       */

      /**
       * @ngdoc function
       * @name setSelected
       * @methodOf ui.grid.selection.api:GridRow
       * @description Sets the isSelected property and updates the selectedCount
       * Changes to isSelected state should only be made via this function
       * @param {Boolean} selected value to set
       */
      $delegate.prototype.setSelected = function (selected) {
        if (selected !== this.isSelected) {
          this.isSelected = selected;
          this.grid.selection.selectedCount += selected ? 1 : -1;
        }
      };

      /**
       * @ngdoc function
       * @name setFocused
       * @methodOf ui.grid.selection.api:GridRow
       * @description Sets the isFocused property
       * Changes to isFocused state should only be made via this function
       * @param {Boolean} val value to set
       */
      $delegate.prototype.setFocused = function(val) {
        if (val !== this.isFocused) {
          this.grid.selection.focusedRow && (this.grid.selection.focusedRow.isFocused = false);
          this.grid.selection.focusedRow = val ? this : null;
          this.isFocused = val;
        }
      };

      return $delegate;
    }]);
  }]);

  /**
   *  @ngdoc service
   *  @name ui.grid.selection.service:uiGridSelectionService
   *
   *  @description Services for selection features
   */
  module.service('uiGridSelectionService',
    function () {
      var service = {

        initializeGrid: function (grid) {

          // add feature namespace and any properties to grid for needed
          /**
           *  @ngdoc object
           *  @name ui.grid.selection.grid:selection
           *
           *  @description Grid properties and functions added for selection
           */
          grid.selection = {
            lastSelectedRow: null,
            /**
             *  @ngdoc object
             *  @name focusedRow
             *  @propertyOf  ui.grid.selection.grid:selection
             *  @description Focused row.
             */
            focusedRow: null,
            selectAll: false
          };


          /**
           *  @ngdoc object
           *  @name selectedCount
           *  @propertyOf  ui.grid.selection.grid:selection
           *  @description Current count of selected rows
           *  @example
           *  var count = grid.selection.selectedCount
           */
          grid.selection.selectedCount = 0;

          service.defaultGridOptions(grid.options);

          /**
           *  @ngdoc object
           *  @name ui.grid.selection.api:PublicApi
           *
           *  @description Public Api for selection feature
           */
          var publicApi = {
            events: {
              selection: {
                /**
                 * @ngdoc event
                 * @name rowFocusChanged
                 * @eventOf  ui.grid.selection.api:PublicApi
                 * @description  is raised after the row.isFocused state is changed
                 * @param {object} scope the scope associated with the grid
                 * @param {GridRow} row the row that was focused/unfocused
                 * @param {Event} evt object if raised from an event
                 */
                rowFocusChanged: function (scope, row, evt) {},
                /**
                 * @ngdoc event
                 * @name rowSelectionChanged
                 * @eventOf  ui.grid.selection.api:PublicApi
                 * @description  is raised after the row.isSelected state is changed
                 * @param {object} scope the scope associated with the grid
                 * @param {GridRow} row the row that was selected/deselected
                 * @param {Event} evt object if raised from an event
                 */
                rowSelectionChanged: function (scope, row, evt) {
                },
                /**
                 * @ngdoc event
                 * @name rowSelectionChangedBatch
                 * @eventOf  ui.grid.selection.api:PublicApi
                 * @description  is raised after the row.isSelected state is changed
                 * in bulk, if the `enableSelectionBatchEvent` option is set to true
                 * (which it is by default).  This allows more efficient processing
                 * of bulk events.
                 * @param {object} scope the scope associated with the grid
                 * @param {array} rows the rows that were selected/deselected
                 * @param {Event} evt object if raised from an event
                 */
                rowSelectionChangedBatch: function (scope, rows, evt) {
                }
              }
            },
            methods: {
              selection: {
                /**
                 * @ngdoc function
                 * @name toggleRowSelection
                 * @methodOf  ui.grid.selection.api:PublicApi
                 * @description Toggles data row as selected or unselected
                 * @param {object} rowEntity gridOptions.data[] array instance
                 * @param {Event} evt object if raised from an event
                 */
                toggleRowSelection: function (rowEntity, evt) {
                  var row = grid.getRow(rowEntity);
                  if (row !== null) {
                    service.toggleRowSelection(grid, row, evt, grid.options.multiSelect, grid.options.noUnselect);
                  }
                },
                /**
                 * @ngdoc function
                 * @name selectRow
                 * @methodOf  ui.grid.selection.api:PublicApi
                 * @description Select the data row
                 * @param {object} rowEntity gridOptions.data[] array instance
                 * @param {Event} evt object if raised from an event
                 */
                selectRow: function (rowEntity, evt) {
                  var row = grid.getRow(rowEntity);
                  if (row !== null && !row.isSelected) {
                    service.toggleRowSelection(grid, row, evt, grid.options.multiSelect, grid.options.noUnselect);
                  }
                },
                /**
                 * @ngdoc function
                 * @name selectRowByVisibleIndex
                 * @methodOf  ui.grid.selection.api:PublicApi
                 * @description Select the specified row by visible index (i.e. if you
                 * specify row 0 you'll get the first visible row selected).  In this context
                 * visible means of those rows that are theoretically visible (i.e. not filtered),
                 * rather than rows currently rendered on the screen.
                 * @param {number} rowNum index within the rowsVisible array
                 * @param {Event} evt object if raised from an event
                 */
                selectRowByVisibleIndex: function (rowNum, evt) {
                  var row = grid.renderContainers.body.visibleRowCache[rowNum];
                  if (row !== null && typeof (row) !== 'undefined' && !row.isSelected) {
                    service.toggleRowSelection(grid, row, evt, grid.options.multiSelect, grid.options.noUnselect);
                  }
                },
                /**
                 * @ngdoc function
                 * @name unSelectRow
                 * @methodOf  ui.grid.selection.api:PublicApi
                 * @description UnSelect the data row
                 * @param {object} rowEntity gridOptions.data[] array instance
                 * @param {Event} evt object if raised from an event
                 */
                unSelectRow: function (rowEntity, evt) {
                  var row = grid.getRow(rowEntity);
                  if (row !== null && row.isSelected) {
                    service.toggleRowSelection(grid, row, evt, grid.options.multiSelect, grid.options.noUnselect);
                  }
                },
                /**
                 * @ngdoc function
                 * @name unSelectRowByVisibleIndex
                 * @methodOf  ui.grid.selection.api:PublicApi
                 * @description Unselect the specified row by visible index (i.e. if you
                 * specify row 0 you'll get the first visible row unselected).  In this context
                 * visible means of those rows that are theoretically visible (i.e. not filtered),
                 * rather than rows currently rendered on the screen.
                 * @param {number} rowNum index within the rowsVisible array
                 * @param {Event} evt object if raised from an event
                 */
                unSelectRowByVisibleIndex: function (rowNum, evt) {
                  var row = grid.renderContainers.body.visibleRowCache[rowNum];
                  if (row !== null && typeof (row) !== 'undefined' && row.isSelected) {
                    service.toggleRowSelection(grid, row, evt, grid.options.multiSelect, grid.options.noUnselect);
                  }
                },
                /**
                 * @ngdoc function
                 * @name selectAllRows
                 * @methodOf  ui.grid.selection.api:PublicApi
                 * @description Selects all rows.  Does nothing if multiSelect = false
                 * @param {Event} evt object if raised from an event
                 */
                selectAllRows: function (evt) {
                  if (grid.options.multiSelect !== false) {
                    var changedRows = [];
                    grid.rows.forEach(function (row) {
                      if (!row.isSelected && row.enableSelection !== false && grid.options.isRowSelectable(row) !== false) {
                        row.setSelected(true);
                        service.decideRaiseSelectionEvent(grid, row, changedRows, evt);
                      }
                    });
                    grid.selection.selectAll = true;
                    service.decideRaiseSelectionBatchEvent(grid, changedRows, evt);
                  }
                },
                /**
                 * @ngdoc function
                 * @name selectAllVisibleRows
                 * @methodOf  ui.grid.selection.api:PublicApi
                 * @description Selects all visible rows.  Does nothing if multiSelect = false
                 * @param {Event} evt object if raised from an event
                 */
                selectAllVisibleRows: function (evt) {
                  if (grid.options.multiSelect !== false) {
                    var changedRows = [];
                    grid.rows.forEach(function(row) {
                      if (row.visible) {
                        if (!row.isSelected && row.enableSelection !== false && grid.options.isRowSelectable(row) !== false) {
                          row.setSelected(true);
                          service.decideRaiseSelectionEvent(grid, row, changedRows, evt);
                        }
                      } else if (row.isSelected) {
                        row.setSelected(false);
                        service.decideRaiseSelectionEvent(grid, row, changedRows, evt);
                      }
                    });
                    grid.selection.selectAll = true;
                    service.decideRaiseSelectionBatchEvent(grid, changedRows, evt);
                  }
                },
                /**
                 * @ngdoc function
                 * @name clearSelectedRows
                 * @methodOf  ui.grid.selection.api:PublicApi
                 * @description Unselects all rows
                 * @param {Event} evt object if raised from an event
                 */
                clearSelectedRows: function (evt) {
                  service.clearSelectedRows(grid, evt);
                },
                /**
                 * @ngdoc function
                 * @name getSelectedRows
                 * @methodOf  ui.grid.selection.api:PublicApi
                 * @description returns all selectedRow's entity references
                 */
                getSelectedRows: function () {
                  return service.getSelectedRows(grid).map(function (gridRow) {
                    return gridRow.entity;
                  }).filter(function (entity) {
                    return entity.hasOwnProperty('$$hashKey') || !angular.isObject(entity);
                  });
                },
                /**
                 * @ngdoc function
                 * @name getSelectedGridRows
                 * @methodOf  ui.grid.selection.api:PublicApi
                 * @description returns all selectedRow's as gridRows
                 */
                getSelectedGridRows: function () {
                  return service.getSelectedRows(grid);
                },
                /**
                 * @ngdoc function
                 * @name getSelectedCount
                 * @methodOf  ui.grid.selection.api:PublicApi
                 * @description returns the number of rows selected
                 */
                getSelectedCount: function () {
                  return grid.selection.selectedCount;
                },
                /**
                 * @ngdoc function
                 * @name setMultiSelect
                 * @methodOf  ui.grid.selection.api:PublicApi
                 * @description Sets the current gridOption.multiSelect to true or false
                 * @param {bool} multiSelect true to allow multiple rows
                 */
                setMultiSelect: function (multiSelect) {
                  grid.options.multiSelect = multiSelect;
                },
                /**
                 * @ngdoc function
                 * @name setModifierKeysToMultiSelect
                 * @methodOf  ui.grid.selection.api:PublicApi
                 * @description Sets the current gridOption.modifierKeysToMultiSelect to true or false
                 * @param {bool} modifierKeysToMultiSelect true to only allow multiple rows when using ctrlKey or shiftKey is used
                 */
                setModifierKeysToMultiSelect: function (modifierKeysToMultiSelect) {
                  grid.options.modifierKeysToMultiSelect = modifierKeysToMultiSelect;
                },
                /**
                 * @ngdoc function
                 * @name getSelectAllState
                 * @methodOf  ui.grid.selection.api:PublicApi
                 * @description Returns whether or not the selectAll checkbox is currently ticked.  The
                 * grid doesn't automatically select rows when you add extra data - so when you add data
                 * you need to explicitly check whether the selectAll is set, and then call setVisible rows
                 * if it is
                 */
                getSelectAllState: function () {
                  return grid.selection.selectAll;
                }

              }
            }
          };

          grid.api.registerEventsFromObject(publicApi.events);

          grid.api.registerMethodsFromObject(publicApi.methods);

        },

        defaultGridOptions: function (gridOptions) {
          // default option to true unless it was explicitly set to false
          /**
           *  @ngdoc object
           *  @name ui.grid.selection.api:GridOptions
           *
           *  @description GridOptions for selection feature, these are available to be
           *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
           */

          /**
           *  @ngdoc object
           *  @name enableRowSelection
           *  @propertyOf  ui.grid.selection.api:GridOptions
           *  @description Enable row selection for entire grid.
           *  <br/>Defaults to true
           */
          gridOptions.enableRowSelection = gridOptions.enableRowSelection !== false;
          /**
           *  @ngdoc object
           *  @name multiSelect
           *  @propertyOf  ui.grid.selection.api:GridOptions
           *  @description Enable multiple row selection for entire grid
           *  <br/>Defaults to true
           */
          gridOptions.multiSelect = gridOptions.multiSelect !== false;
          /**
           *  @ngdoc object
           *  @name noUnselect
           *  @propertyOf  ui.grid.selection.api:GridOptions
           *  @description Prevent a row from being unselected.  Works in conjunction
           *  with `multiselect = false` and `gridApi.selection.selectRow()` to allow
           *  you to create a single selection only grid - a row is always selected, you
           *  can only select different rows, you can't unselect the row.
           *  <br/>Defaults to false
           */
          gridOptions.noUnselect = gridOptions.noUnselect === true;
          /**
           *  @ngdoc object
           *  @name modifierKeysToMultiSelect
           *  @propertyOf  ui.grid.selection.api:GridOptions
           *  @description Enable multiple row selection only when using the ctrlKey or shiftKey. Requires multiSelect to be true.
           *  <br/>Defaults to false
           */
          gridOptions.modifierKeysToMultiSelect = gridOptions.modifierKeysToMultiSelect === true;
          /**
           *  @ngdoc object
           *  @name enableRowHeaderSelection
           *  @propertyOf  ui.grid.selection.api:GridOptions
           *  @description Enable a row header to be used for selection
           *  <br/>Defaults to true
           */
          gridOptions.enableRowHeaderSelection = gridOptions.enableRowHeaderSelection !== false;
          /**
           *  @ngdoc object
           *  @name enableFullRowSelection
           *  @propertyOf  ui.grid.selection.api:GridOptions
           *  @description Enable selection by clicking anywhere on the row.  Defaults to
           *  false if `enableRowHeaderSelection` is true, otherwise defaults to true.
           */
          if (typeof (gridOptions.enableFullRowSelection) === 'undefined') {
            gridOptions.enableFullRowSelection = !gridOptions.enableRowHeaderSelection;
          }
          /**
           *  @ngdoc object
           *  @name enableFocusRowOnRowHeaderClick
           *  @propertyOf  ui.grid.selection.api:GridOptions
           *  @description Enable focuse row by clicking on the row header.  Defaults to
           *  true if `enableRowHeaderSelection` is true, otherwise defaults to false.
           */
          gridOptions.enableFocusRowOnRowHeaderClick = (gridOptions.enableFocusRowOnRowHeaderClick !== false)
            || !gridOptions.enableRowHeaderSelection;
          /**
           *  @ngdoc object
           *  @name enableSelectRowOnFocus
           *  @propertyOf  ui.grid.selection.api:GridOptions
           *  @description Enable focuse row by clicking on the row anywhere.  Defaults true.
           */
          gridOptions.enableSelectRowOnFocus = (gridOptions.enableSelectRowOnFocus !== false);
          /**
           *  @ngdoc object
           *  @name enableSelectAll
           *  @propertyOf  ui.grid.selection.api:GridOptions
           *  @description Enable the select all checkbox at the top of the selectionRowHeader
           *  <br/>Defaults to true
           */
          gridOptions.enableSelectAll = gridOptions.enableSelectAll !== false;
          /**
           *  @ngdoc object
           *  @name enableSelectionBatchEvent
           *  @propertyOf  ui.grid.selection.api:GridOptions
           *  @description If selected rows are changed in bulk, either via the API or
           *  via the selectAll checkbox, then a separate event is fired.  Setting this
           *  option to false will cause the rowSelectionChanged event to be called multiple times
           *  instead
           *  <br/>Defaults to true
           */
          gridOptions.enableSelectionBatchEvent = gridOptions.enableSelectionBatchEvent !== false;
          /**
           *  @ngdoc object
           *  @name selectionRowHeaderWidth
           *  @propertyOf  ui.grid.selection.api:GridOptions
           *  @description can be used to set a custom width for the row header selection column
           *  <br/>Defaults to 30px
           */
          gridOptions.selectionRowHeaderWidth = angular.isDefined(gridOptions.selectionRowHeaderWidth) ? gridOptions.selectionRowHeaderWidth : 30;
          /**
           *  @ngdoc object
           *  @name enableFooterTotalSelected
           *  @propertyOf  ui.grid.selection.api:GridOptions
           *  @description Shows the total number of selected items in footer if true.
           *  <br/>Defaults to true.
           *  <br/>GridOptions.showGridFooter must also be set to true.
           */
          gridOptions.enableFooterTotalSelected = gridOptions.enableFooterTotalSelected !== false;

          /**
           *  @ngdoc object
           *  @name isRowSelectable
           *  @propertyOf  ui.grid.selection.api:GridOptions
           *  @description Makes it possible to specify a method that evaluates for each row and sets its "enableSelection" property.
           */
          gridOptions.isRowSelectable = angular.isDefined(gridOptions.isRowSelectable) ? gridOptions.isRowSelectable : angular.noop;
        },

        /**
         * @ngdoc function
         * @name toggleRowSelection
         * @methodOf  ui.grid.selection.service:uiGridSelectionService
         * @description Toggles row as selected or unselected
         * @param {Grid} grid grid object
         * @param {GridRow} row row to select or deselect
         * @param {Event} evt object if resulting from event
         * @param {bool} multiSelect if false, only one row at time can be selected
         * @param {bool} noUnselect if true then rows cannot be unselected
         */
        toggleRowSelection: function (grid, row, evt, multiSelect, noUnselect) {
          if ( row.enableSelection === false ) {
            return;
          }

          var selected = row.isSelected,
            selectedRows;

          if (!multiSelect) {
            if (!selected) {
              service.clearSelectedRows(grid, evt);
            }
            else {
              selectedRows = service.getSelectedRows(grid);
              if (selectedRows.length > 1) {
                selected = false; // Enable reselect of the row
                service.clearSelectedRows(grid, evt);
              }
            }
          }

          // only select row in this case
          if (!(selected && noUnselect)) {
            row.setSelected(!selected);
            if (row.isSelected === true) {
              grid.selection.lastSelectedRow = row;
            }

            selectedRows = service.getSelectedRows(grid);
            grid.selection.selectAll = grid.rows.length === selectedRows.length;

            grid.api.selection.raise.rowSelectionChanged(row, evt);
          }
        },
        /**
         * @ngdoc function
         * @name shiftSelect
         * @methodOf  ui.grid.selection.service:uiGridSelectionService
         * @description selects a group of rows from the last selected row using the shift key
         * @param {Grid} grid grid object
         * @param {GridRow} row clicked row
         * @param {Event} evt object if raised from an event
         * @param {bool} multiSelect if false, does nothing this is for multiSelect only
         */
        shiftSelect: function (grid, row, evt, multiSelect) {
          if (!multiSelect) {
            return;
          }
          var selectedRows = service.getSelectedRows(grid);
          var fromRow = selectedRows.length > 0 ? grid.renderContainers.body.visibleRowCache.indexOf(grid.selection.lastSelectedRow) : 0;
          var toRow = grid.renderContainers.body.visibleRowCache.indexOf(row);
          // reverse select direction
          if (fromRow > toRow) {
            var tmp = fromRow;
            fromRow = toRow;
            toRow = tmp;
          }

          var changedRows = [];
          for (var i = fromRow; i <= toRow; i++) {
            var rowToSelect = grid.renderContainers.body.visibleRowCache[i];
            if (rowToSelect) {
              if (!rowToSelect.isSelected && rowToSelect.enableSelection !== false) {
                rowToSelect.setSelected(true);
                grid.selection.lastSelectedRow = rowToSelect;
                service.decideRaiseSelectionEvent(grid, rowToSelect, changedRows, evt);
              }
            }
          }
          service.decideRaiseSelectionBatchEvent(grid, changedRows, evt);
        },
        /**
         * @ngdoc function
         * @name getSelectedRows
         * @methodOf  ui.grid.selection.service:uiGridSelectionService
         * @description Returns all the selected rows
         * @param {Grid} grid grid object
         */
        getSelectedRows: function (grid) {
          return grid.rows.filter(function (row) {
            return row.isSelected;
          });
        },

        /**
         * @ngdoc function
         * @name clearSelectedRows
         * @methodOf  ui.grid.selection.service:uiGridSelectionService
         * @description Clears all selected rows
         * @param {Grid} grid grid object
         * @param {Event} evt object if raised from an event
         */
        clearSelectedRows: function (grid, evt) {
          var changedRows = [];
          service.getSelectedRows(grid).forEach(function (row) {
            if (row.isSelected) {
              row.setSelected(false);
              service.decideRaiseSelectionEvent(grid, row, changedRows, evt);
            }
          });
          grid.selection.selectAll = false;
          grid.selection.selectedCount = 0;
          service.decideRaiseSelectionBatchEvent(grid, changedRows, evt);
        },

        /**
         * @ngdoc function
         * @name decideRaiseSelectionEvent
         * @methodOf  ui.grid.selection.service:uiGridSelectionService
         * @description Decides whether to raise a single event or a batch event
         * @param {Grid} grid grid object
         * @param {GridRow} row row that has changed
         * @param {array} changedRows an array to which we can append the changed
         * @param {Event} evt object if raised from an event
         * row if we're doing batch events
         */
        decideRaiseSelectionEvent: function (grid, row, changedRows, evt) {
          if (!grid.options.enableSelectionBatchEvent) {
            grid.api.selection.raise.rowSelectionChanged(row, evt);
          }
          else {
            changedRows.push(row);
          }
        },

        /**
         * @ngdoc function
         * @name raiseSelectionEvent
         * @methodOf  ui.grid.selection.service:uiGridSelectionService
         * @description Decides whether we need to raise a batch event, and
         * raises it if we do.
         * @param {Grid} grid grid object
         * @param {array} changedRows an array of changed rows, only populated
         * @param {Event} evt object if raised from an event
         * if we're doing batch events
         */
        decideRaiseSelectionBatchEvent: function (grid, changedRows, evt) {
          if (changedRows.length > 0) {
            grid.api.selection.raise.rowSelectionChangedBatch(changedRows, evt);
          }
        }
      };

      return service;
    });

  /**
   *  @ngdoc directive
   *  @name ui.grid.selection.directive:uiGridSelection
   *  @element div
   *  @restrict A
   *
   *  @description Adds selection features to grid
   *
   *  @example
   <example module="app">
   <file name="app.js">
   var app = angular.module('app', ['ui.grid', 'ui.grid.selection']);

   app.controller('MainCtrl', ['$scope', function ($scope) {
      $scope.data = [
        { name: 'Bob', title: 'CEO' },
            { name: 'Frank', title: 'Lowly Developer' }
      ];

      $scope.columnDefs = [
        {name: 'name', enableCellEdit: true},
        {name: 'title', enableCellEdit: true}
      ];
    }]);
   </file>
   <file name="index.html">
   <div ng-controller="MainCtrl">
   <div ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-selection></div>
   </div>
   </file>
   </example>
   */
  module.directive('uiGridSelection', ['uiGridSelectionConstants', 'uiGridSelectionService', 'uiGridConstants',
    function (uiGridSelectionConstants, uiGridSelectionService, uiGridConstants) {
      return {
        replace: true,
        priority: 0,
        require: '^uiGrid',
        scope: false,
        compile: function () {
          return {
            pre: function ($scope, $elm, $attrs, uiGridCtrl) {
              uiGridSelectionService.initializeGrid(uiGridCtrl.grid);
              if (uiGridCtrl.grid.options.enableRowHeaderSelection) {
                var selectionRowHeaderDef = {
                  name: uiGridSelectionConstants.selectionRowHeaderColName,
                  displayName: '',
                  width: uiGridCtrl.grid.options.selectionRowHeaderWidth,
                  minWidth: 10,
                  cellTemplate: 'ui-grid/selectionRowHeader',
                  headerCellTemplate: 'ui-grid/selectionHeaderCell',
                  enableColumnResizing: false,
                  enableColumnMenu: false,
                  exporterSuppressExport: true,
                  allowCellFocus: true
                };

                uiGridCtrl.grid.addRowHeaderColumn(selectionRowHeaderDef, 0);
              }

              var processorSet = false;

              var processSelectableRows = function (rows) {
                rows.forEach(function (row) {
                  row.enableSelection = uiGridCtrl.grid.options.isRowSelectable(row);
                });
                return rows;
              };

              var updateOptions = function () {
                if (uiGridCtrl.grid.options.isRowSelectable !== angular.noop && processorSet !== true) {
                  uiGridCtrl.grid.registerRowsProcessor(processSelectableRows, 500);
                  processorSet = true;
                }
              };

              updateOptions();

              var dataChangeDereg = uiGridCtrl.grid.registerDataChangeCallback(updateOptions, [uiGridConstants.dataChange.OPTIONS]);

              $scope.$on('$destroy', dataChangeDereg);
            },
            post: function ($scope, $elm, $attrs, uiGridCtrl) {

            }
          };
        }
      };
    }]);

  module.directive('uiGridSelectionRowHeaderButtons', ['$templateCache', 'uiGridSelectionService', 'gridUtil',
    function ($templateCache, uiGridSelectionService, gridUtil) {
      return {
        replace: true,
        restrict: 'E',
        template: $templateCache.get('ui-grid/selectionRowHeaderButtons'),
        scope: true,
        require: '^uiGrid',
        link: function ($scope, $elm, $attrs, uiGridCtrl) {
          var self = uiGridCtrl.grid;
          $scope.selectButtonClick = selectButtonClick;
          $scope.selectButtonKeyDown = selectButtonKeyDown;

          // On IE, prevent mousedowns on the select button from starting a selection.
          // If this is not done and you shift+click on another row, the browser will select a big chunk of text
          if (gridUtil.detectBrowser() === 'ie') {
            $elm.on('mousedown', selectButtonMouseDown);
          }

          function selectButtonKeyDown(row, evt) {
            if (evt.keyCode === 32 || evt.keyCode === 13) {
              evt.preventDefault();
              selectButtonClick(row, evt);
            }
          }

          function selectButtonClick(row, evt) {
            evt.stopPropagation();

            if (evt.shiftKey) {
              uiGridSelectionService.shiftSelect(self, row, evt, self.options.multiSelect);
            }
            else if (evt.ctrlKey || evt.metaKey) {
              uiGridSelectionService.toggleRowSelection(self, row, evt,
                self.options.multiSelect, self.options.noUnselect);
            }
            else if (row.groupHeader) {
              uiGridSelectionService.toggleRowSelection(self, row, evt, self.options.multiSelect, self.options.noUnselect);
              for (var i = 0; i < row.treeNode.children.length; i++) {
                uiGridSelectionService.toggleRowSelection(self, row.treeNode.children[i].row, evt, self.options.multiSelect, self.options.noUnselect);
              }
            }
            else {
              uiGridSelectionService.toggleRowSelection(self, row, evt,
                (self.options.multiSelect && !self.options.modifierKeysToMultiSelect), self.options.noUnselect);
            }
            self.options.enableFocusRowOnRowHeaderClick && row.setFocused(!row.isFocused) && self.api.selection.raise.rowFocusChanged(row, evt);
          }

          function selectButtonMouseDown(evt) {
            if (evt.ctrlKey || evt.shiftKey) {
              evt.target.onselectstart = function () { return false; };
              window.setTimeout(function () { evt.target.onselectstart = null; }, 0);
            }
          }

          $scope.$on('$destroy', function unbindEvents() {
            $elm.off();
          });
        }
      };
    }]);

  module.directive('uiGridSelectionSelectAllButtons', ['$templateCache', 'uiGridSelectionService',
    function ($templateCache, uiGridSelectionService) {
      return {
        replace: true,
        restrict: 'E',
        template: $templateCache.get('ui-grid/selectionSelectAllButtons'),
        scope: false,
        link: function ($scope) {
          var self = $scope.col.grid;

          $scope.headerButtonKeyDown = function (evt) {
            if (evt.keyCode === 32 || evt.keyCode === 13) {
              evt.preventDefault();
              $scope.headerButtonClick(evt);
            }
          };

          $scope.headerButtonClick = function (evt) {
            if (self.selection.selectAll) {
              uiGridSelectionService.clearSelectedRows(self, evt);
              if (self.options.noUnselect) {
                self.api.selection.selectRowByVisibleIndex(0, evt);
              }
              self.selection.selectAll = false;
            }
            else if (self.options.multiSelect) {
              self.api.selection.selectAllVisibleRows(evt);
              self.selection.selectAll = true;
            }
          };
        }
      };
    }]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.selection.directive:uiGridViewport
   *  @element div
   *
   *  @description Stacks on top of ui.grid.uiGridViewport to alter the attributes used
   *  for the grid row
   */
  module.directive('uiGridViewport',
      function () {
        return {
          priority: -200, // run after default  directive
          scope: false,
          compile: function ($elm) {
            var rowRepeatDiv = angular.element($elm[0].querySelector('.ui-grid-canvas:not(.ui-grid-empty-base-layer-container)').children[0]),
              newNgClass = "'ui-grid-row-selected': row.isSelected, 'ui-grid-row-focused': row.isFocused}",
              existingNgClass = rowRepeatDiv.attr('ng-class');

            if (existingNgClass) {
              newNgClass = existingNgClass.slice(0, -1) + ',' + newNgClass;
            } else {
              newNgClass = '{' + newNgClass;
            }
            rowRepeatDiv.attr('ng-class', newNgClass);

            return {
              pre: function ($scope, $elm, $attrs, controllers) {},
              post: function ($scope, $elm, $attrs, controllers) {}
            };
          }
        };
      });

  /**
   *  @ngdoc directive
   *  @name ui.grid.selection.directive:uiGridCell
   *  @element div
   *  @restrict A
   *
   *  @description Stacks on top of ui.grid.uiGridCell to provide selection feature
   */
  module.directive('uiGridCell',
    ['uiGridConstants', 'uiGridSelectionService',
      function (uiGridConstants, uiGridSelectionService) {
        return {
          priority: -200, // run after default uiGridCell directive
          restrict: 'A',
          require: '?^uiGrid',
          scope: false,
          link: function ($scope, $elm, $attrs, uiGridCtrl) {
            var touchStartTime = 0,
              touchStartPos = {},
              touchTimeout = 300,
              touchPosDiff = 100;

            // Bind to keydown events in the render container
            if (uiGridCtrl.grid.api.cellNav) {
              uiGridCtrl.grid.api.cellNav.on.viewPortKeyDown($scope, function (evt, rowCol) {
                if (rowCol === null ||
                  rowCol.row !== $scope.row ||
                  rowCol.col !== $scope.col) {
                  return;
                }

                if (evt.keyCode === uiGridConstants.keymap.SPACE && $scope.col.colDef.name === 'selectionRowHeaderCol') {
                  evt.preventDefault();
                  uiGridSelectionService.toggleRowSelection($scope.grid, $scope.row, evt,
                    ($scope.grid.options.multiSelect && !$scope.grid.options.modifierKeysToMultiSelect),
                    $scope.grid.options.noUnselect);
                  $scope.$apply();
                }
              });
            }

            var selectCells = function (evt) {
              // if you click on expandable icon doesn't trigger selection
              if (evt.target.className === "ui-grid-icon-minus-squared" || evt.target.className === "ui-grid-icon-plus-squared") {
                return;
              }

              // if we get a click, then stop listening for touchend
              $elm.off('touchend', touchEnd);

              if (evt.shiftKey) {
                uiGridSelectionService.shiftSelect($scope.grid, $scope.row, evt, $scope.grid.options.multiSelect);
              }
              else if (evt.ctrlKey || evt.metaKey) {
                uiGridSelectionService.toggleRowSelection($scope.grid, $scope.row, evt,
                  $scope.grid.options.multiSelect, $scope.grid.options.noUnselect);
              }
              else if ($scope.grid.options.enableSelectRowOnFocus) {
                uiGridSelectionService.toggleRowSelection($scope.grid, $scope.row, evt,
                  ($scope.grid.options.multiSelect && !$scope.grid.options.modifierKeysToMultiSelect),
                  $scope.grid.options.noUnselect);
              }
              $scope.row.setFocused(!$scope.row.isFocused);
              $scope.grid.api.selection.raise.rowFocusChanged($scope.row, evt);
              $scope.$apply();

              // don't re-enable the touchend handler for a little while - some devices generate both, and it will
              // take a little while to move your hand from the mouse to the screen if you have both modes of input
              window.setTimeout(function () {
                $elm.on('touchend', touchEnd);
              }, touchTimeout);
            };

            var touchStart = function (evt) {
              touchStartTime = (new Date()).getTime();
              touchStartPos = evt.changedTouches[0];

              // if we get a touch event, then stop listening for click
              $elm.off('click', selectCells);
            };

            var touchEnd = function (evt) {
              var touchEndTime = (new Date()).getTime();
              var touchEndPos = evt.changedTouches[0];
              var touchTime = touchEndTime - touchStartTime;
              var touchXDiff = Math.abs(touchStartPos.clientX - touchEndPos.clientX)
              var touchYDiff = Math.abs(touchStartPos.clientY - touchEndPos.clientY)


              if (touchXDiff < touchPosDiff && touchYDiff < touchPosDiff) {
                if (touchTime < touchTimeout) {
                // short touch
                  selectCells(evt);
                }
              }

              // don't re-enable the click handler for a little while - some devices generate both, and it will
              // take a little while to move your hand from the screen to the mouse if you have both modes of input
              window.setTimeout(function () {
                $elm.on('click', selectCells);
              }, touchTimeout);
            };

            function registerRowSelectionEvents() {
              if ($scope.grid.options.enableRowSelection && $scope.grid.options.enableFullRowSelection && $scope.col.colDef.name !== 'selectionRowHeaderCol') {
                $elm.addClass('ui-grid-disable-selection');
                $elm.on('touchstart', touchStart);
                $elm.on('touchend', touchEnd);
                $elm.on('click', selectCells);

                $scope.registered = true;
              }
            }

            function unregisterRowSelectionEvents() {
              if ($scope.registered) {
                $elm.removeClass('ui-grid-disable-selection');
                $elm.off('touchstart', touchStart);
                $elm.off('touchend', touchEnd);
                $elm.off('click', selectCells);

                $scope.registered = false;
              }
            }

            registerRowSelectionEvents();

            // register a dataChange callback so that we can change the selection configuration dynamically
            // if the user changes the options
            var dataChangeUnreg = $scope.grid.registerDataChangeCallback(function () {
              if ($scope.grid.options.enableRowSelection && $scope.grid.options.enableFullRowSelection &&
                !$scope.registered) {
                registerRowSelectionEvents();
              }
              else if ((!$scope.grid.options.enableRowSelection || !$scope.grid.options.enableFullRowSelection) &&
                $scope.registered) {
                unregisterRowSelectionEvents();
              }
            }, [uiGridConstants.dataChange.OPTIONS]);

            $elm.on('$destroy', dataChangeUnreg);
          }
        };
      }]);

  module.directive('uiGridGridFooter', ['$compile', 'gridUtil', function ($compile, gridUtil) {
    return {
      restrict: 'EA',
      replace: true,
      priority: -1000,
      require: '^uiGrid',
      scope: true,
      compile: function () {
        return {
          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
            if (!uiGridCtrl.grid.options.showGridFooter) {
              return;
            }

            gridUtil.getTemplate('ui-grid/gridFooterSelectedItems')
              .then(function (contents) {
                var template = angular.element(contents);

                var newElm = $compile(template)($scope);

                angular.element($elm[0].getElementsByClassName('ui-grid-grid-footer')[0]).append(newElm);
              });
          },
          post: function ($scope, $elm, $attrs, controllers) {

          }
        };
      }
    };
  }]);
})();

(function () {
  'use strict';

  /**
   * @ngdoc overview
   * @name ui.grid.treeBase
   * @description
   *
   * # ui.grid.treeBase
   *
   * <div class="alert alert-warning" role="alert"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>
   *
   * This module provides base tree handling functions that are shared by other features, notably grouping
   * and treeView.  It provides a tree view of the data, with nodes in that
   * tree and leaves.
   *
   * Design information:
   * -------------------
   *
   * The raw data that is provided must come with a $$treeLevel on any non-leaf node.  Grouping will create
   * these on all the group header rows, treeView will expect these to be set in the raw data by the user.
   * TreeBase will run a rowsProcessor that:
   *  - builds `treeBase.tree` out of the provided rows
   *  - permits a recursive sort of the tree
   *  - maintains the expand/collapse state of each node
   *  - provides the expand/collapse all button and the expand/collapse buttons
   *  - maintains the count of children for each node
   *
   * Each row is updated with a link to the tree node that represents it.  Refer {@link ui.grid.treeBase.grid:treeBase.tree tree documentation}
   * for information.
   *
   *  TreeBase adds information to the rows
   *  - treeLevel: if present and > -1 tells us the level (level 0 is the top level)
   *  - treeNode: pointer to the node in the grid.treeBase.tree that refers
   *    to this row, allowing us to manipulate the state
   *
   * Since the logic is baked into the rowsProcessors, it should get triggered whenever
   * row order or filtering or anything like that is changed.  We recall the expanded state
   * across invocations of the rowsProcessors by the reference to the treeNode on the individual
   * rows.  We rebuild the tree itself quite frequently, when we do this we use the saved treeNodes to
   * get the state, but we overwrite the other data in that treeNode.
   *
   * By default rows are collapsed, which means all data rows have their visible property
   * set to false, and only level 0 group rows are set to visible.
   *
   * We rely on the rowsProcessors to do the actual expanding and collapsing, so we set the flags we want into
   * grid.treeBase.tree, then call refresh.  This is because we can't easily change the visible
   * row cache without calling the processors, and once we've built the logic into the rowProcessors we may as
   * well use it all the time.
   *
   * Tree base provides sorting (on non-grouped columns).
   *
   * Sorting works in two passes.  The standard sorting is performed for any columns that are important to building
   * the tree (for example, any grouped columns).  Then after the tree is built, a recursive tree sort is performed
   * for the remaining sort columns (including the original sort) - these columns are sorted within each tree level
   * (so all the level 1 nodes are sorted, then all the level 2 nodes within each level 1 node etc).
   *
   * To achieve this we make use of the `ignoreSort` property on the sort configuration.  The parent feature (treeView or grouping)
   * must provide a rowsProcessor that runs with very low priority (typically in the 60-65 range), and that sets
   * the `ignoreSort`on any sort that it wants to run on the tree.  TreeBase will clear the ignoreSort on all sorts - so it
   * will turn on any sorts that haven't run.  It will then call a recursive sort on the tree.
   *
   * Tree base provides treeAggregation.  It checks the treeAggregation configuration on each column, and aggregates based on
   * the logic provided as it builds the tree. Footer aggregation from the uiGrid core should not be used with treeBase aggregation,
   * since it operates on all visible rows, as opposed to to leaf nodes only. Setting `showColumnFooter: true` will show the
   * treeAggregations in the column footer.  Aggregation information will be collected in the format:
   *
   * ```
   *   {
   *     type: 'count',
   *     value: 4,
   *     label: 'count: ',
   *     rendered: 'count: 4'
   *   }
   * ```
   *
   * A callback is provided to format the value once it is finalised (aka a valueFilter).
   *
   * <br/>
   * <br/>
   *
   * <div doc-module-components="ui.grid.treeBase"></div>
   */

  var module = angular.module('ui.grid.treeBase', ['ui.grid']);

  /**
   *  @ngdoc object
   *  @name ui.grid.treeBase.constant:uiGridTreeBaseConstants
   *
   *  @description constants available in treeBase module.
   *
   *  These constants are manually copied into grouping and treeView,
   *  as I haven't found a way to simply include them, and it's not worth
   *  investing time in for something that changes very infrequently.
   *
   */
  module.constant('uiGridTreeBaseConstants', {
    featureName: "treeBase",
    rowHeaderColName: 'treeBaseRowHeaderCol',
    EXPANDED: 'expanded',
    COLLAPSED: 'collapsed',
    aggregation: {
      COUNT: 'count',
      SUM: 'sum',
      MAX: 'max',
      MIN: 'min',
      AVG: 'avg'
    }
  });

  /**
   *  @ngdoc service
   *  @name ui.grid.treeBase.service:uiGridTreeBaseService
   *
   *  @description Services for treeBase feature
   */
  /**
   *  @ngdoc object
   *  @name ui.grid.treeBase.api:ColumnDef
   *
   *  @description ColumnDef for tree feature, these are available to be
   *  set using the ui-grid {@link ui.grid.class:GridOptions.columnDef gridOptions.columnDefs}
   */

  module.service('uiGridTreeBaseService', ['$q', 'uiGridTreeBaseConstants', 'gridUtil', 'GridRow', 'gridClassFactory', 'i18nService', 'uiGridConstants', 'rowSorter',
  function ($q, uiGridTreeBaseConstants, gridUtil, GridRow, gridClassFactory, i18nService, uiGridConstants, rowSorter) {

    var service = {

      initializeGrid: function (grid) {

        // add feature namespace and any properties to grid for needed
        /**
         *  @ngdoc object
         *  @name ui.grid.treeBase.grid:treeBase
         *
         *  @description Grid properties and functions added for treeBase
         */
        grid.treeBase = {};

        /**
         *  @ngdoc property
         *  @propertyOf ui.grid.treeBase.grid:treeBase
         *  @name numberLevels
         *
         *  @description Total number of tree levels currently used, calculated by the rowsProcessor by
         *  retaining the highest tree level it sees
         */
        grid.treeBase.numberLevels = 0;

        /**
         *  @ngdoc property
         *  @propertyOf ui.grid.treeBase.grid:treeBase
         *  @name expandAll
         *
         *  @description Whether or not the expandAll box is selected
         */
        grid.treeBase.expandAll = false;

        /**
         *  @ngdoc property
         *  @propertyOf ui.grid.treeBase.grid:treeBase
         *  @name tree
         *
         *  @description Tree represented as a nested array that holds the state of each node, along with a
         *  pointer to the row.  The array order is material - we will display the children in the order
         *  they are stored in the array
         *
         *  Each node stores:
         *
         *    - the state of this node
         *    - an array of children of this node
         *    - a pointer to the parent of this node (reverse pointer, allowing us to walk up the tree)
         *    - the number of children of this node
         *    - aggregation information calculated from the nodes
         *
         *  ```
         *    [{
         *      state: 'expanded',
         *      row: <reference to row>,
         *      parentRow: null,
         *      aggregations: [{
         *        type: 'count',
         *        col: <gridCol>,
         *        value: 2,
         *        label: 'count: ',
         *        rendered: 'count: 2'
         *      }],
         *      children: [
         *        {
         *          state: 'expanded',
         *          row: <reference to row>,
         *          parentRow: <reference to row>,
         *          aggregations: [{
         *            type: 'count',
         *            col: '<gridCol>,
         *            value: 4,
         *            label: 'count: ',
         *            rendered: 'count: 4'
         *          }],
         *          children: [
         *            { state: 'expanded', row: <reference to row>, parentRow: <reference to row> },
         *            { state: 'collapsed', row: <reference to row>, parentRow: <reference to row> },
         *            { state: 'expanded', row: <reference to row>, parentRow: <reference to row> },
         *            { state: 'collapsed', row: <reference to row>, parentRow: <reference to row> }
         *          ]
         *        },
         *        {
         *          state: 'collapsed',
         *          row: <reference to row>,
         *          parentRow: <reference to row>,
         *          aggregations: [{
         *            type: 'count',
         *            col: <gridCol>,
         *            value: 3,
         *            label: 'count: ',
         *            rendered: 'count: 3'
         *          }],
         *          children: [
         *            { state: 'expanded', row: <reference to row>, parentRow: <reference to row> },
         *            { state: 'collapsed', row: <reference to row>, parentRow: <reference to row> },
         *            { state: 'expanded', row: <reference to row>, parentRow: <reference to row> }
         *          ]
         *        }
         *      ]
         *    }, {<another level 0 node maybe>} ]
         *  ```
         *  Missing state values are false - meaning they aren't expanded.
         *
         *  This is used because the rowProcessors run every time the grid is refreshed, so
         *  we'd lose the expanded state every time the grid was refreshed.  This instead gives
         *  us a reliable lookup that persists across rowProcessors.
         *
         *  This tree is rebuilt every time we run the rowsProcessors.  Since each row holds a pointer
         *  to it's tree node we can persist expand/collapse state across calls to rowsProcessor, we discard
         *  all transient information on the tree (children, childCount) and recalculate it
         *
         */
        grid.treeBase.tree = [];

        service.defaultGridOptions(grid.options);

        grid.registerRowsProcessor(service.treeRows, 410);

        grid.registerColumnBuilder( service.treeBaseColumnBuilder );

        service.createRowHeader( grid );

        /**
         *  @ngdoc object
         *  @name ui.grid.treeBase.api:PublicApi
         *
         *  @description Public Api for treeBase feature
         */
        var publicApi = {
          events: {
            treeBase: {
              /**
               * @ngdoc event
               * @eventOf ui.grid.treeBase.api:PublicApi
               * @name rowExpanded
               * @description raised whenever a row is expanded.  If you are dynamically
               * rendering your tree you can listen to this event, and then retrieve
               * the children of this row and load them into the grid data.
               *
               * When the data is loaded the grid will automatically refresh to show these new rows
               *
               * <pre>
               *      gridApi.treeBase.on.rowExpanded(scope,function(row) {})
               * </pre>
               * @param {gridRow} row the row that was expanded.  You can also
               * retrieve the grid from this row with row.grid
               */
              rowExpanded: {},

              /**
               * @ngdoc event
               * @eventOf ui.grid.treeBase.api:PublicApi
               * @name rowCollapsed
               * @description raised whenever a row is collapsed.  Doesn't really have
               * a purpose at the moment, included for symmetry
               *
               * <pre>
               *      gridApi.treeBase.on.rowCollapsed(scope,function(row) {})
               * </pre>
               * @param {gridRow} row the row that was collapsed.  You can also
               * retrieve the grid from this row with row.grid
               */
              rowCollapsed: {}
            }
          },

          methods: {
            treeBase: {
              /**
               * @ngdoc function
               * @name expandAllRows
               * @methodOf  ui.grid.treeBase.api:PublicApi
               * @description Expands all tree rows
               */
              expandAllRows: function () {
                service.expandAllRows(grid);
              },

              /**
               * @ngdoc function
               * @name collapseAllRows
               * @methodOf  ui.grid.treeBase.api:PublicApi
               * @description collapse all tree rows
               */
              collapseAllRows: function () {
                service.collapseAllRows(grid);
              },

              /**
               * @ngdoc function
               * @name toggleRowTreeState
               * @methodOf  ui.grid.treeBase.api:PublicApi
               * @description  call expand if the row is collapsed, collapse if it is expanded
               * @param {gridRow} row the row you wish to toggle
               */
              toggleRowTreeState: function (row) {
                service.toggleRowTreeState(grid, row);
              },

              /**
               * @ngdoc function
               * @name expandRow
               * @methodOf  ui.grid.treeBase.api:PublicApi
               * @description expand the immediate children of the specified row
               * @param {gridRow} row the row you wish to expand
               * @param {boolean} recursive true if you wish to expand the row's ancients
               */
              expandRow: function (row, recursive) {
                service.expandRow(grid, row, recursive);
              },

              /**
               * @ngdoc function
               * @name expandRowChildren
               * @methodOf  ui.grid.treeBase.api:PublicApi
               * @description expand all children of the specified row
               * @param {gridRow} row the row you wish to expand
               */
              expandRowChildren: function (row) {
                service.expandRowChildren(grid, row);
              },

              /**
               * @ngdoc function
               * @name collapseRow
               * @methodOf  ui.grid.treeBase.api:PublicApi
               * @description collapse  the specified row.  When
               * you expand the row again, all grandchildren will retain their state
               * @param {gridRow} row the row you wish to collapse
               */
              collapseRow: function ( row ) {
                service.collapseRow(grid, row);
              },

              /**
               * @ngdoc function
               * @name collapseRowChildren
               * @methodOf  ui.grid.treeBase.api:PublicApi
               * @description collapse all children of the specified row.  When
               * you expand the row again, all grandchildren will be collapsed
               * @param {gridRow} row the row you wish to collapse children for
               */
              collapseRowChildren: function ( row ) {
                service.collapseRowChildren(grid, row);
              },

              /**
               * @ngdoc function
               * @name getTreeState
               * @methodOf  ui.grid.treeBase.api:PublicApi
               * @description Get the tree state for this grid,
               * used by the saveState feature
               * Returned treeState as an object
               *   `{ expandedState: { uid: 'expanded', uid: 'collapsed' } }`
               * where expandedState is a hash of row uid and the current expanded state
               *
               * @returns {object} tree state
               *
               * TODO - this needs work - we need an identifier that persists across instantiations,
               * not uid.  This really means we need a row identity defined, but that won't work for
               * grouping.  Perhaps this needs to be moved up to treeView and grouping, rather than
               * being in base.
               */
              getTreeExpandedState: function () {
                return { expandedState: service.getTreeState(grid) };
              },

              /**
               * @ngdoc function
               * @name setTreeState
               * @methodOf  ui.grid.treeBase.api:PublicApi
               * @description Set the expanded states of the tree
               * @param {object} config the config you want to apply, in the format
               * provided by getTreeState
               */
              setTreeState: function ( config ) {
                service.setTreeState( grid, config );
              },

              /**
               * @ngdoc function
               * @name getRowChildren
               * @methodOf  ui.grid.treeBase.api:PublicApi
               * @description Get the children of the specified row
               * @param {GridRow} row the row you want the children of
               * @returns {Array} array of children of this row, the children
               * are all gridRows
               */
              getRowChildren: function ( row ) {
                return row.treeNode.children.map( function( childNode ) {
                  return childNode.row;
                });
              }
            }
          }
        };

        grid.api.registerEventsFromObject(publicApi.events);

        grid.api.registerMethodsFromObject(publicApi.methods);
      },


      defaultGridOptions: function (gridOptions) {
        // default option to true unless it was explicitly set to false
        /**
         *  @ngdoc object
         *  @name ui.grid.treeBase.api:GridOptions
         *
         *  @description GridOptions for treeBase feature, these are available to be
         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
         */

        /**
         *  @ngdoc object
         *  @name treeRowHeaderBaseWidth
         *  @propertyOf  ui.grid.treeBase.api:GridOptions
         *  @description Base width of the tree header, provides for a single level of tree.  This
         *  is incremented by `treeIndent` for each extra level
         *  <br/>Defaults to 30
         */
        gridOptions.treeRowHeaderBaseWidth = gridOptions.treeRowHeaderBaseWidth || 30;

        /**
         *  @ngdoc object
         *  @name treeIndent
         *  @propertyOf  ui.grid.treeBase.api:GridOptions
         *  @description Number of pixels of indent for the icon at each tree level, wider indents are visually more pleasing,
         *  but will make the tree row header wider
         *  <br/>Defaults to 10
         */
        gridOptions.treeIndent = (gridOptions.treeIndent != null) ? gridOptions.treeIndent : 10;

        /**
         *  @ngdoc object
         *  @name showTreeRowHeader
         *  @propertyOf  ui.grid.treeBase.api:GridOptions
         *  @description If set to false, don't create the row header.  You'll need to programmatically control the expand
         *  states
         *  <br/>Defaults to true
         */
        gridOptions.showTreeRowHeader = gridOptions.showTreeRowHeader !== false;

        /**
         *  @ngdoc object
         *  @name showTreeExpandNoChildren
         *  @propertyOf  ui.grid.treeBase.api:GridOptions
         *  @description If set to true, show the expand/collapse button even if there are no
         *  children of a node.  You'd use this if you're planning to dynamically load the children
         *
         *  <br/>Defaults to true, grouping overrides to false
         */
        gridOptions.showTreeExpandNoChildren = gridOptions.showTreeExpandNoChildren !== false;

        /**
         *  @ngdoc object
         *  @name treeRowHeaderAlwaysVisible
         *  @propertyOf  ui.grid.treeBase.api:GridOptions
         *  @description If set to true, row header even if there are no tree nodes
         *
         *  <br/>Defaults to true
         */
        gridOptions.treeRowHeaderAlwaysVisible = gridOptions.treeRowHeaderAlwaysVisible !== false;

        /**
         *  @ngdoc object
         *  @name treeCustomAggregations
         *  @propertyOf  ui.grid.treeBase.api:GridOptions
         *  @description Define custom aggregation functions. The properties of this object will be
         *  aggregation types available for use on columnDef with {@link ui.grid.treeBase.api:ColumnDef treeAggregationType} or through the column menu.
         *  If a function defined here uses the same name as one of the native aggregations, this one will take precedence.
         *  The object format is:
         *
         *  <pre>
         *    {
         *      aggregationName: {
         *        label: (optional) string,
         *        aggregationFn: function( aggregation, fieldValue, numValue, row ) {...},
         *        finalizerFn: (optional) function( aggregation ) {...}
         *      },
         *      mean: {
         *        label: 'mean',
         *        aggregationFn: function( aggregation, fieldValue, numValue ) {
         *          aggregation.count = (aggregation.count || 1) + 1;
         *          aggregation.sum = (aggregation.sum || 0) + numValue;
         *        },
         *        finalizerFn: function( aggregation ) {
         *          aggregation.value = aggregation.sum / aggregation.count
         *        }
         *      }
         *    }
         *  </pre>
         *
         *  <br/>The `finalizerFn` may be used to manipulate the value before rendering, or to
         *  apply a custom rendered value. If `aggregation.rendered` is left undefined, the value will be
         *  rendered. Note that the native aggregation functions use an `finalizerFn` to concatenate
         *  the label and the value.
         *
         *  <br/>Defaults to {}
         */
        gridOptions.treeCustomAggregations = gridOptions.treeCustomAggregations || {};

        /**
         *  @ngdoc object
         *  @name enableExpandAll
         *  @propertyOf  ui.grid.treeBase.api:GridOptions
         *  @description Enable the expand all button at the top of the row header
         *
         *  <br/>Defaults to true
         */
        gridOptions.enableExpandAll = gridOptions.enableExpandAll !== false;
      },


      /**
       * @ngdoc function
       * @name treeBaseColumnBuilder
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Sets the tree defaults based on the columnDefs
       *
       * @param {object} colDef columnDef we're basing on
       * @param {GridColumn} col the column we're to update
       * @param {object} gridOptions the options we should use
       * @returns {promise} promise for the builder - actually we do it all inline so it's immediately resolved
       */
      treeBaseColumnBuilder: function (colDef, col, gridOptions) {


        /**
         *  @ngdoc object
         *  @name customTreeAggregationFn
         *  @propertyOf  ui.grid.treeBase.api:ColumnDef
         *  @description A custom function that aggregates rows into some form of
         *  total.  Aggregations run row-by-row, the function needs to be capable of
         *  creating a running total.
         *
         *  The function will be provided the aggregation item (in which you can store running
         *  totals), the row value that is to be aggregated, and that same row value converted to
         *  a number (most aggregations work on numbers)
         *  @example
         *  <pre>
         *    customTreeAggregationFn = function ( aggregation, fieldValue, numValue, row ) {
         *      // calculates the average of the squares of the values
         *      if ( typeof(aggregation.count) === 'undefined' ) {
         *        aggregation.count = 0;
         *      }
         *      aggregation.count++;
         *
         *      if ( !isNaN(numValue) ) {
         *        if ( typeof(aggregation.total) === 'undefined' ) {
         *          aggregation.total = 0;
         *        }
         *        aggregation.total = aggregation.total + numValue * numValue;
         *      }
         *
         *      aggregation.value = aggregation.total / aggregation.count;
         *    }
         *  </pre>
         *  <br/>Defaults to undefined. May be overwritten by treeAggregationType, the two options should not be used together.
         */
        if ( typeof(colDef.customTreeAggregationFn) !== 'undefined' ) {
          col.treeAggregationFn = colDef.customTreeAggregationFn;
        }

        /**
         *  @ngdoc object
         *  @name treeAggregationType
         *  @propertyOf  ui.grid.treeBase.api:ColumnDef
         *  @description Use one of the native or grid-level aggregation methods for calculating aggregations on this column.
         *  Native method are in the constants file and include: SUM, COUNT, MIN, MAX, AVG. This may also be the property the
         *  name of an aggregation function defined with {@link ui.grid.treeBase.api:GridOptions treeCustomAggregations}.
         *
         *  <pre>
         *      treeAggregationType = uiGridTreeBaseConstants.aggregation.SUM,
         *    }
         *  </pre>
         *
         *  If you are using aggregations you should either:
         *
         *   - also use grouping, in which case the aggregations are displayed in the group header, OR
         *   - use treeView, in which case you can set `treeAggregationUpdateEntity: true` in the colDef, and
         *     treeBase will store the aggregation information in the entity, or you can set `treeAggregationUpdateEntity: false`
         *     in the colDef, and you need to manual retrieve the calculated aggregations from the row.treeNode.aggregations
         *
         *  <br/>Takes precendence over a treeAggregationFn, the two options should not be used together.
         *  <br/>Defaults to undefined.
         */
        if ( typeof(colDef.treeAggregationType) !== 'undefined' ) {
          col.treeAggregation = { type: colDef.treeAggregationType };
          if ( typeof(gridOptions.treeCustomAggregations[colDef.treeAggregationType]) !== 'undefined' ) {
            col.treeAggregationFn = gridOptions.treeCustomAggregations[colDef.treeAggregationType].aggregationFn;
            col.treeAggregationFinalizerFn = gridOptions.treeCustomAggregations[colDef.treeAggregationType].finalizerFn;
            col.treeAggregation.label = gridOptions.treeCustomAggregations[colDef.treeAggregationType].label;
          }
          else if ( typeof(service.nativeAggregations()[colDef.treeAggregationType]) !== 'undefined' ) {
            col.treeAggregationFn = service.nativeAggregations()[colDef.treeAggregationType].aggregationFn;
            col.treeAggregation.label = service.nativeAggregations()[colDef.treeAggregationType].label;
          }
        }

         /**
         *  @ngdoc object
         *  @name treeAggregationLabel
         *  @propertyOf  ui.grid.treeBase.api:ColumnDef
         *  @description A custom label to use for this aggregation. If provided we don't use native i18n.
         */
        if ( typeof(colDef.treeAggregationLabel) !== 'undefined' ) {
          if (typeof(col.treeAggregation) === 'undefined' ) {
            col.treeAggregation = {};
          }
          col.treeAggregation.label = colDef.treeAggregationLabel;
        }

        /**
         *  @ngdoc object
         *  @name treeAggregationUpdateEntity
         *  @propertyOf  ui.grid.treeBase.api:ColumnDef
         *  @description Store calculated aggregations into the entity, allowing them
         *  to be displayed in the grid using a standard cellTemplate.  This defaults to true,
         *  if you are using grouping then you shouldn't set it to false, as then the aggregations won't
         *  display.
         *
         *  If you are using treeView in most cases you'll want to set this to true.  This will result in
         *  getCellValue returning the aggregation rather than whatever was stored in the cell attribute on
         *  the entity.  If you want to render the underlying entity value (and do something else with the aggregation)
         *  then you could use a custom cellTemplate to display `row.entity.myAttribute`, rather than using getCellValue.
         *
         *  <br/>Defaults to true
         *
         *  @example
         *  <pre>
         *    gridOptions.columns = [{
         *      name: 'myCol',
         *      treeAggregation: { type: uiGridTreeBaseConstants.aggregation.SUM },
         *      treeAggregationUpdateEntity: true
         *      cellTemplate: '<div>{{row.entity.myCol + " " + row.treeNode.aggregations[0].rendered}}</div>'
         *    }];
         * </pre>
         */
        col.treeAggregationUpdateEntity = colDef.treeAggregationUpdateEntity !== false;

        /**
         *  @ngdoc object
         *  @name customTreeAggregationFinalizerFn
         *  @propertyOf  ui.grid.treeBase.api:ColumnDef
         *  @description A custom function that populates aggregation.rendered, this is called when
         *  a particular aggregation has been fully calculated, and we want to render the value.
         *
         *  With the native aggregation options we just concatenate `aggregation.label` and
         *  `aggregation.value`, but if you wanted to apply a filter or otherwise manipulate the label
         *  or the value, you can do so with this function. This function will be called after the
         *  the default `finalizerFn`.
         *
         *  @example
         *  <pre>
         *    customTreeAggregationFinalizerFn = function ( aggregation ) {
         *      aggregation.rendered = aggregation.label + aggregation.value / 100 + '%';
         *    }
         *  </pre>
         *  <br/>Defaults to undefined.
         */
        if ( typeof(col.customTreeAggregationFinalizerFn) === 'undefined' ) {
          col.customTreeAggregationFinalizerFn = colDef.customTreeAggregationFinalizerFn;
        }

      },


      /**
       * @ngdoc function
       * @name createRowHeader
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Create the rowHeader.  If treeRowHeaderAlwaysVisible then
       * set it to visible, otherwise set it to invisible
       *
       * @param {Grid} grid grid object
       */
      createRowHeader: function( grid ) {
        var rowHeaderColumnDef = {
          name: uiGridTreeBaseConstants.rowHeaderColName,
          displayName: '',
          width:  grid.options.treeRowHeaderBaseWidth,
          minWidth: 10,
          cellTemplate: 'ui-grid/treeBaseRowHeader',
          headerCellTemplate: 'ui-grid/treeBaseHeaderCell',
          enableColumnResizing: false,
          enableColumnMenu: false,
          exporterSuppressExport: true,
          allowCellFocus: true
        };

        rowHeaderColumnDef.visible = grid.options.treeRowHeaderAlwaysVisible;
        grid.addRowHeaderColumn(rowHeaderColumnDef, -100);
      },


      /**
       * @ngdoc function
       * @name expandAllRows
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Expands all nodes in the tree
       *
       * @param {Grid} grid grid object
       */
      expandAllRows: function (grid) {
        grid.treeBase.tree.forEach( function( node ) {
          service.setAllNodes( grid, node, uiGridTreeBaseConstants.EXPANDED);
        });
        grid.treeBase.expandAll = true;
        grid.queueGridRefresh();
      },


      /**
       * @ngdoc function
       * @name collapseAllRows
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Collapses all nodes in the tree
       *
       * @param {Grid} grid grid object
       */
      collapseAllRows: function (grid) {
        grid.treeBase.tree.forEach( function( node ) {
          service.setAllNodes( grid, node, uiGridTreeBaseConstants.COLLAPSED);
        });
        grid.treeBase.expandAll = false;
        grid.queueGridRefresh();
      },


      /**
       * @ngdoc function
       * @name setAllNodes
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Works through a subset of grid.treeBase.rowExpandedStates, setting
       * all child nodes (and their descendents) of the provided node to the given state.
       *
       * Calls itself recursively on all nodes so as to achieve this.
       *
       * @param {Grid} grid the grid we're operating on (so we can raise events)
       * @param {object} treeNode a node in the tree that we want to update
       * @param {string} targetState the state we want to set it to
       */
      setAllNodes: function (grid, treeNode, targetState) {
        if ( typeof(treeNode.state) !== 'undefined' && treeNode.state !== targetState ) {
          treeNode.state = targetState;

          if ( targetState === uiGridTreeBaseConstants.EXPANDED ) {
            grid.api.treeBase.raise.rowExpanded(treeNode.row);
          }
          else {
            grid.api.treeBase.raise.rowCollapsed(treeNode.row);
          }
        }

        // set all child nodes
        if ( treeNode.children ) {
          treeNode.children.forEach(function( childNode ) {
            service.setAllNodes(grid, childNode, targetState);
          });
        }
      },


      /**
       * @ngdoc function
       * @name toggleRowTreeState
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Toggles the expand or collapse state of this grouped row, if
       * it's a parent row
       *
       * @param {Grid} grid grid object
       * @param {GridRow} row the row we want to toggle
       */
      toggleRowTreeState: function ( grid, row ) {
        if ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ) {
          return;
        }

        if (row.treeNode.state === uiGridTreeBaseConstants.EXPANDED) {
          service.collapseRow(grid, row);
        }
        else {
          service.expandRow(grid, row, false);
        }

        grid.queueGridRefresh();
      },


      /**
       * @ngdoc function
       * @name expandRow
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Expands this specific row, showing only immediate children.
       *
       * @param {Grid} grid grid object
       * @param {GridRow} row the row we want to expand
       * @param {boolean} recursive true if you wish to expand the row's ancients
       */
      expandRow: function ( grid, row, recursive ) {
        if ( recursive ) {
          var parents = [];
          while ( row && typeof(row.treeLevel) !== 'undefined' && row.treeLevel !== null && row.treeLevel >= 0 && row.treeNode.state !== uiGridTreeBaseConstants.EXPANDED ) {
            parents.push(row);
            row = row.treeNode.parentRow;
          }

          if ( parents.length > 0 ) {
            row = parents.pop();
            while ( row ) {
                row.treeNode.state = uiGridTreeBaseConstants.EXPANDED;
                grid.api.treeBase.raise.rowExpanded(row);
                row = parents.pop();
            }

            grid.treeBase.expandAll = service.allExpanded(grid.treeBase.tree);
            grid.queueGridRefresh();
          }
        }
        else {
          if ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ) {
            return;
          }

          if ( row.treeNode.state !== uiGridTreeBaseConstants.EXPANDED ) {
            row.treeNode.state = uiGridTreeBaseConstants.EXPANDED;
            grid.api.treeBase.raise.rowExpanded(row);
            grid.treeBase.expandAll = service.allExpanded(grid.treeBase.tree);
            grid.queueGridRefresh();
          }
        }
      },


      /**
       * @ngdoc function
       * @name expandRowChildren
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Expands this specific row, showing all children.
       *
       * @param {Grid} grid grid object
       * @param {GridRow} row the row we want to expand
       */
      expandRowChildren: function ( grid, row ) {
        if ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ) {
          return;
        }

        service.setAllNodes(grid, row.treeNode, uiGridTreeBaseConstants.EXPANDED);
        grid.treeBase.expandAll = service.allExpanded(grid.treeBase.tree);
        grid.queueGridRefresh();
      },


      /**
       * @ngdoc function
       * @name collapseRow
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Collapses this specific row
       *
       * @param {Grid} grid grid object
       * @param {GridRow} row the row we want to collapse
       */
      collapseRow: function( grid, row ) {
        if ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ) {
          return;
        }

        if ( row.treeNode.state !== uiGridTreeBaseConstants.COLLAPSED ) {
          row.treeNode.state = uiGridTreeBaseConstants.COLLAPSED;
          grid.treeBase.expandAll = false;
          grid.api.treeBase.raise.rowCollapsed(row);
          grid.queueGridRefresh();
        }
      },


      /**
       * @ngdoc function
       * @name collapseRowChildren
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Collapses this specific row and all children
       *
       * @param {Grid} grid grid object
       * @param {GridRow} row the row we want to collapse
       */
      collapseRowChildren: function( grid, row ) {
        if ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ) {
          return;
        }

        service.setAllNodes(grid, row.treeNode, uiGridTreeBaseConstants.COLLAPSED);
        grid.treeBase.expandAll = false;
        grid.queueGridRefresh();
      },


      /**
       * @ngdoc function
       * @name allExpanded
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Returns true if all rows are expanded, false
       * if they're not.  Walks the tree to determine this.  Used
       * to set the expandAll state.
       *
       * If the node has no children, then return true (it's immaterial
       * whether it is expanded).  If the node has children, then return
       * false if this node is collapsed, or if any child node is not all expanded
       *
       * @param {object} tree the grid to check
       * @returns {boolean} whether or not the tree is all expanded
       */
      allExpanded: function( tree ) {
        var allExpanded = true;

        tree.forEach(function( node ) {
          if ( !service.allExpandedInternal( node ) ) {
            allExpanded = false;
          }
        });
        return allExpanded;
      },

      allExpandedInternal: function( treeNode ) {
        if ( treeNode.children && treeNode.children.length > 0 ) {
          if ( treeNode.state === uiGridTreeBaseConstants.COLLAPSED ) {
            return false;
          }
          var allExpanded = true;
          treeNode.children.forEach( function( node ) {
            if ( !service.allExpandedInternal( node ) ) {
              allExpanded = false;
            }
          });
          return allExpanded;
        }
        else {
          return true;
        }
      },


      /**
       * @ngdoc function
       * @name treeRows
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description The rowProcessor that adds the nodes to the tree, and sets the visible
       * state of each row based on it's parent state
       *
       * Assumes it is always called after the sorting processor, and the grouping processor if there is one.
       * Performs any tree sorts itself after having built the tree
       *
       * Processes all the rows in order, setting the group level based on the $$treeLevel in the associated
       * entity, and setting the visible state based on the parent's state.
       *
       * Calculates the deepest level of tree whilst it goes, and updates that so that the header column can be correctly
       * sized.
       *
       * Aggregates if necessary along the way.
       *
       * @param {array} renderableRows the rows we want to process, usually the output from the previous rowProcessor
       * @returns {array} the updated rows
       */
      treeRows: function( renderableRows ) {
        var grid = this;

        if (renderableRows.length === 0) {
          service.updateRowHeaderWidth( grid );
          return renderableRows;
        }

        grid.treeBase.tree = service.createTree( grid, renderableRows );
        service.updateRowHeaderWidth( grid );

        service.sortTree( grid );
        service.fixFilter( grid );

        return service.renderTree( grid.treeBase.tree );
      },


      /**
       * @ngdoc function
       * @name createOrUpdateRowHeaderWidth
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Calculates the rowHeader width.
       *
       * If rowHeader is always present, updates the width.
       *
       * If rowHeader is only sometimes present (`treeRowHeaderAlwaysVisible: false`), determines whether there
       * should be one, then creates or removes it as appropriate, with the created rowHeader having the
       * right width.
       *
       * If there's never a rowHeader then never creates one: `showTreeRowHeader: false`
       *
       * @param {Grid} grid the grid we want to set the row header on
       */
      updateRowHeaderWidth: function( grid ) {
        var rowHeader = grid.getColumn(uiGridTreeBaseConstants.rowHeaderColName),
          newWidth = grid.options.treeRowHeaderBaseWidth + grid.options.treeIndent * Math.max(grid.treeBase.numberLevels - 1, 0);

        if ( rowHeader && newWidth !== rowHeader.width ) {
          rowHeader.width = newWidth;
          grid.queueRefresh();
        }

        var newVisibility = true;

        if ( grid.options.showTreeRowHeader === false ) {
          newVisibility = false;
        }
        if ( grid.options.treeRowHeaderAlwaysVisible === false && grid.treeBase.numberLevels <= 0 ) {
          newVisibility = false;
        }
        if ( rowHeader  && rowHeader.visible !== newVisibility ) {
          rowHeader.visible = newVisibility;
          rowHeader.colDef.visible = newVisibility;
          grid.queueGridRefresh();
        }
      },


      /**
       * @ngdoc function
       * @name renderTree
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Creates an array of rows based on the tree, exporting only
       * the visible nodes and leaves
       *
       * @param {array} nodeList The list of nodes - can be grid.treeBase.tree, or can be node.children when
       * we're calling recursively
       * @returns {array} renderable rows
       */
      renderTree: function( nodeList ) {
        var renderableRows = [];

        nodeList.forEach( function ( node ) {
          if ( node.row.visible ) {
            renderableRows.push( node.row );
          }
          if ( node.state === uiGridTreeBaseConstants.EXPANDED && node.children && node.children.length > 0 ) {
            renderableRows = renderableRows.concat( service.renderTree( node.children ) );
          }
        });
        return renderableRows;
      },


      /**
       * @ngdoc function
       * @name createTree
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Creates a tree from the renderableRows
       *
       * @param {Grid} grid The grid
       * @param {array} renderableRows The rows we want to create a tree from
       * @returns {object} The tree we've build
       */
      createTree: function( grid, renderableRows ) {
        var currentLevel = -1,
          parents = [],
          currentState;

        grid.treeBase.tree = [];
        grid.treeBase.numberLevels = 0;

        var aggregations = service.getAggregations( grid );

        function createNode( row ) {
          if ( !row.internalRow && row.treeLevel !== row.entity.$$treeLevel ) {
            row.treeLevel = row.entity.$$treeLevel;
          }

          if ( row.treeLevel <= currentLevel ) {
            // pop any levels that aren't parents of this level, formatting the aggregation at the same time
            while ( row.treeLevel <= currentLevel ) {
              var lastParent = parents.pop();
              service.finaliseAggregations( lastParent );
              currentLevel--;
            }

            // reset our current state based on the new parent, set to expanded if this is a level 0 node
            if ( parents.length > 0 ) {
              currentState = service.setCurrentState(parents);
            }
            else {
              currentState = uiGridTreeBaseConstants.EXPANDED;
            }
          }

          // aggregate if this is a leaf node
          if ( ( typeof(row.treeLevel) === 'undefined' || row.treeLevel === null || row.treeLevel < 0 ) && row.visible  ) {
            service.aggregate( grid, row, parents );
          }

          // add this node to the tree
          service.addOrUseNode(grid, row, parents, aggregations);

          if ( typeof(row.treeLevel) !== 'undefined' && row.treeLevel !== null && row.treeLevel >= 0 ) {
            parents.push(row);
            currentLevel++;
            currentState = service.setCurrentState(parents);
          }

          // update the tree number of levels, so we can set header width if we need to
          if ( grid.treeBase.numberLevels < row.treeLevel + 1) {
            grid.treeBase.numberLevels = row.treeLevel + 1;
          }
        }

        renderableRows.forEach( createNode );

        // finalize remaining aggregations
        while ( parents.length > 0 ) {
          var lastParent = parents.pop();
          service.finaliseAggregations( lastParent );
        }

        return grid.treeBase.tree;
      },


      /**
       * @ngdoc function
       * @name addOrUseNode
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Creates a tree node for this row.  If this row already has a treeNode
       * recorded against it, preserves the state, but otherwise overwrites the data.
       *
       * @param {grid} grid The grid we're operating on
       * @param {gridRow} row The row we want to set
       * @param {array} parents An array of the parents this row should have
       * @param {array} aggregationBase Empty aggregation information
       * @returns {undefined} Updates the parents array, updates the row to have a treeNode, and updates the
       * grid.treeBase.tree
       */
      addOrUseNode: function( grid, row, parents, aggregationBase ) {
        var newAggregations = [];
        aggregationBase.forEach( function(aggregation) {
          newAggregations.push(service.buildAggregationObject(aggregation.col));
        });

        var newNode = { state: uiGridTreeBaseConstants.COLLAPSED, row: row, parentRow: null, aggregations: newAggregations, children: [] };
        if ( row.treeNode ) {
          newNode.state = row.treeNode.state;
        }
        if ( parents.length > 0 ) {
          newNode.parentRow = parents[parents.length - 1];
        }
        row.treeNode = newNode;

        if ( parents.length === 0 ) {
          grid.treeBase.tree.push( newNode );
        } else {
          parents[parents.length - 1].treeNode.children.push( newNode );
        }
      },


      /**
       * @ngdoc function
       * @name setCurrentState
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Looks at the parents array to determine our current state.
       * If any node in the hierarchy is collapsed, then return collapsed, otherwise return
       * expanded.
       *
       * @param {array} parents An array of the parents this row should have
       * @returns {string} The state we should be setting to any nodes we see
       */
      setCurrentState: function( parents ) {
        var currentState = uiGridTreeBaseConstants.EXPANDED;

        parents.forEach( function(parent) {
          if ( parent.treeNode.state === uiGridTreeBaseConstants.COLLAPSED ) {
            currentState = uiGridTreeBaseConstants.COLLAPSED;
          }
        });
        return currentState;
      },


      /**
       * @ngdoc function
       * @name sortTree
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Performs a recursive sort on the tree nodes, sorting the
       * children of each node and putting them back into the children array.
       *
       * Before doing this it turns back on all the sortIgnore - things that were previously
       * ignored we process now.  Since we're sorting within the nodes, presumably anything
       * that was already sorted is how we derived the nodes, we can keep those sorts too.
       *
       * We only sort tree nodes that are expanded - no point in wasting effort sorting collapsed
       * nodes
       *
       * @param {Grid} grid The grid to get the aggregation information from
       * @returns {array} The aggregation information
       */
      sortTree: function( grid ) {
        grid.columns.forEach( function( column ) {
          if ( column.sort && column.sort.ignoreSort ) {
            delete column.sort.ignoreSort;
          }
        });

        grid.treeBase.tree = service.sortInternal( grid, grid.treeBase.tree );
      },

      sortInternal: function( grid, treeList ) {
        var rows = treeList.map( function( node ) {
          return node.row;
        });

        rows = rowSorter.sort( grid, rows, grid.columns );

        var treeNodes = rows.map( function( row ) {
          return row.treeNode;
        });

        treeNodes.forEach( function( node ) {
          if ( node.state === uiGridTreeBaseConstants.EXPANDED && node.children && node.children.length > 0 ) {
            node.children = service.sortInternal( grid, node.children );
          }
        });

        return treeNodes;
      },

      /**
       * @ngdoc function
       * @name fixFilter
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description After filtering has run, we need to go back through the tree
       * and make sure the parent rows are always visible if any of the child rows
       * are visible (filtering may make a child visible, but the parent may not
       * match the filter criteria)
       *
       * This has a risk of being computationally expensive, we do it by walking
       * the tree and remembering whether there are any invisible nodes on the
       * way down.
       *
       * @param {Grid} grid the grid to fix filters on
       */
      fixFilter: function( grid ) {
        var parentsVisible;

        grid.treeBase.tree.forEach( function( node ) {
          if ( node.children && node.children.length > 0 ) {
            parentsVisible = node.row.visible;
            service.fixFilterInternal( node.children, parentsVisible );
          }
        });
      },

      fixFilterInternal: function( nodes, parentsVisible) {
        nodes.forEach(function( node ) {
          if ( node.row.visible && !parentsVisible ) {
            service.setParentsVisible( node );
            parentsVisible = true;
          }

          if ( node.children && node.children.length > 0 ) {
            if ( service.fixFilterInternal( node.children, ( parentsVisible && node.row.visible ) ) ) {
              parentsVisible = true;
            }
          }
        });

        return parentsVisible;
      },

      setParentsVisible: function( node ) {
        while ( node.parentRow ) {
          node.parentRow.visible = true;
          node = node.parentRow.treeNode;
        }
      },

      /**
       * @ngdoc function
       * @name buildAggregationObject
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Build the object which is stored on the column for holding meta-data about the aggregation.
       * This method should only be called with columns which have an aggregation.
       *
       * @param {GridColumn} column The column which this object relates to
       * @returns {object} {col: GridColumn object, label: string, type: string (optional)}
       */
      buildAggregationObject: function( column ) {
        var newAggregation = { col: column };

        if ( column.treeAggregation && column.treeAggregation.type ) {
          newAggregation.type = column.treeAggregation.type;
        }

        if ( column.treeAggregation && column.treeAggregation.label ) {
          newAggregation.label = column.treeAggregation.label;
        }

        return newAggregation;
      },

      /**
       * @ngdoc function
       * @name getAggregations
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Looks through the grid columns to find those with aggregations,
       * and collates the aggregation information into an array, returns that array
       *
       * @param {Grid} grid the grid to get the aggregation information from
       * @returns {array} the aggregation information
       */
      getAggregations: function( grid ) {
        var aggregateArray = [];

        grid.columns.forEach( function(column) {
          if ( typeof(column.treeAggregationFn) !== 'undefined' ) {
            aggregateArray.push( service.buildAggregationObject(column) );

            if ( grid.options.showColumnFooter && typeof(column.colDef.aggregationType) === 'undefined' && column.treeAggregation ) {
              // Add aggregation object for footer
              column.treeFooterAggregation = service.buildAggregationObject(column);
              column.aggregationType = service.treeFooterAggregationType;
            }
          }
        });
        return aggregateArray;
      },


      /**
       * @ngdoc function
       * @name aggregate
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Accumulate the data from this row onto the aggregations for each parent
       *
       * Iterate over the parents, then iterate over the aggregations for each of those parents,
       * and perform the aggregation for each individual aggregation
       *
       * @param {Grid} grid grid object
       * @param {GridRow} row the row we want to set grouping visibility on
       * @param {array} parents the parents that we would want to aggregate onto
       */
      aggregate: function( grid, row, parents ) {
        if (parents.length === 0 && row.treeNode && row.treeNode.aggregations) {
          row.treeNode.aggregations.forEach(function(aggregation) {
            // Calculate aggregations for footer even if there are no grouped rows
            if (typeof(aggregation.col.treeFooterAggregation) !== 'undefined') {
              var fieldValue = grid.getCellValue(row, aggregation.col);
              var numValue = Number(fieldValue);
              if (aggregation.col.treeAggregationFn) {
                aggregation.col.treeAggregationFn(aggregation.col.treeFooterAggregation, fieldValue, numValue, row);
              } else {
                aggregation.col.treeFooterAggregation.value = undefined;
              }
            }
          });
        }

        parents.forEach( function( parent, index ) {
          if (parent.treeNode.aggregations) {
            parent.treeNode.aggregations.forEach( function( aggregation ) {
              var fieldValue = grid.getCellValue(row, aggregation.col);
              var numValue = Number(fieldValue);
              aggregation.col.treeAggregationFn(aggregation, fieldValue, numValue, row);

              if (index === 0 && typeof(aggregation.col.treeFooterAggregation) !== 'undefined') {
                if (aggregation.col.treeAggregationFn) {
                  aggregation.col.treeAggregationFn(aggregation.col.treeFooterAggregation, fieldValue, numValue, row);
                } else {
                  aggregation.col.treeFooterAggregation.value = undefined;
                }
              }
            });
          }
        });
      },


      // Aggregation routines - no doco needed as self evident
      nativeAggregations: function() {
        return {
          count: {
            label: i18nService.get().aggregation.count,
            menuTitle: i18nService.get().grouping.aggregate_count,
            aggregationFn: function (aggregation, fieldValue, numValue) {
              if (typeof(aggregation.value) === 'undefined') {
                aggregation.value = 1;
              } else {
                aggregation.value++;
              }
            }
          },

          sum: {
            label: i18nService.get().aggregation.sum,
            menuTitle: i18nService.get().grouping.aggregate_sum,
            aggregationFn: function( aggregation, fieldValue, numValue ) {
              if (!isNaN(numValue)) {
                if (typeof(aggregation.value) === 'undefined') {
                  aggregation.value = numValue;
                } else {
                  aggregation.value += numValue;
                }
              }
            }
          },

          min: {
            label: i18nService.get().aggregation.min,
            menuTitle: i18nService.get().grouping.aggregate_min,
            aggregationFn: function( aggregation, fieldValue, numValue ) {
              if (typeof(aggregation.value) === 'undefined') {
                aggregation.value = fieldValue;
              } else {
                if (typeof(fieldValue) !== 'undefined' && fieldValue !== null && (fieldValue < aggregation.value || aggregation.value === null)) {
                  aggregation.value = fieldValue;
                }
              }
            }
          },

          max: {
            label: i18nService.get().aggregation.max,
            menuTitle: i18nService.get().grouping.aggregate_max,
            aggregationFn: function( aggregation, fieldValue, numValue ) {
              if ( typeof(aggregation.value) === 'undefined' ) {
                aggregation.value = fieldValue;
              } else {
                if ( typeof(fieldValue) !== 'undefined' && fieldValue !== null && (fieldValue > aggregation.value || aggregation.value === null)) {
                  aggregation.value = fieldValue;
                }
              }
            }
          },

          avg: {
            label: i18nService.get().aggregation.avg,
            menuTitle: i18nService.get().grouping.aggregate_avg,
            aggregationFn: function( aggregation, fieldValue, numValue ) {
              if ( typeof(aggregation.count) === 'undefined' ) {
                aggregation.count = 1;
              } else {
                aggregation.count++;
              }

              if ( isNaN(numValue) ) {
                return;
              }

              if ( typeof(aggregation.value) === 'undefined' || typeof(aggregation.sum) === 'undefined' ) {
                aggregation.value = numValue;
                aggregation.sum = numValue;
              } else {
                aggregation.sum += numValue;
                aggregation.value = aggregation.sum / aggregation.count;
              }
            }
          }
        };
      },

      /**
       * @ngdoc function
       * @name finaliseAggregation
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Helper function used to finalize aggregation nodes and footer cells
       *
       * @param {gridRow} row The parent we're finalising
       * @param {aggregation} aggregation The aggregation object manipulated by the aggregationFn
       */
      finaliseAggregation: function(row, aggregation) {
        if ( aggregation.col.treeAggregationUpdateEntity && typeof(row) !== 'undefined' && typeof(row.entity[ '$$' + aggregation.col.uid ]) !== 'undefined' ) {
          angular.extend( aggregation, row.entity[ '$$' + aggregation.col.uid ]);
        }

        if ( typeof(aggregation.col.treeAggregationFinalizerFn) === 'function' ) {
          aggregation.col.treeAggregationFinalizerFn( aggregation );
        }
        if ( typeof(aggregation.col.customTreeAggregationFinalizerFn) === 'function' ) {
          aggregation.col.customTreeAggregationFinalizerFn( aggregation );
        }
        if ( typeof(aggregation.rendered) === 'undefined' ) {
          aggregation.rendered = aggregation.label ? aggregation.label + aggregation.value : aggregation.value;
        }
      },

      /**
       * @ngdoc function
       * @name finaliseAggregations
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Format the data from the aggregation into the rendered text
       * e.g. if we had label: 'sum: ' and value: 25, we'd create 'sum: 25'.
       *
       * As part of this we call any formatting callback routines we've been provided.
       *
       * We write our aggregation out to the row.entity if treeAggregationUpdateEntity is
       * set on the column - we don't overwrite any information that's already there, we append
       * to it so that grouping can have set the groupVal beforehand without us overwriting it.
       *
       * We need to copy the data from the row.entity first before we finalise the aggregation,
       * we need that information for the finaliserFn
       *
       * @param {gridRow} row the parent we're finalising
       */
      finaliseAggregations: function( row ) {
        if ( row == null || typeof(row.treeNode.aggregations) === 'undefined' ) {
          return;
        }

        row.treeNode.aggregations.forEach( function( aggregation ) {
          service.finaliseAggregation(row, aggregation);

          if ( aggregation.col.treeAggregationUpdateEntity ) {
            var aggregationCopy = {};

            angular.forEach( aggregation, function( value, key ) {
              if ( aggregation.hasOwnProperty(key) && key !== 'col' ) {
                aggregationCopy[key] = value;
              }
            });

            row.entity[ '$$' + aggregation.col.uid ] = aggregationCopy;
          }
        });
      },

      /**
       * @ngdoc function
       * @name treeFooterAggregationType
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Uses the tree aggregation functions and finalizers to set the
       * column footer aggregations.
       *
       * @param {rows} rows The visible rows. not used, but accepted to match signature of GridColumn.aggregationType
       * @param {GridColumn} column The column we are finalizing
       */
      treeFooterAggregationType: function( rows, column ) {
        service.finaliseAggregation(undefined, column.treeFooterAggregation);
        if ( typeof(column.treeFooterAggregation.value) === 'undefined' || column.treeFooterAggregation.rendered === null ) {
          // The was apparently no aggregation performed (perhaps this is a grouped column
          return '';
        }
        return column.treeFooterAggregation.rendered;
      }
    };

    return service;
  }]);


  /**
   *  @ngdoc directive
   *  @name ui.grid.treeBase.directive:uiGridTreeRowHeaderButtons
   *  @element div
   *
   *  @description Provides the expand/collapse button on rows
   */
  module.directive('uiGridTreeBaseRowHeaderButtons', ['$templateCache', 'uiGridTreeBaseService',
  function ($templateCache, uiGridTreeBaseService) {
    return {
      replace: true,
      restrict: 'E',
      template: $templateCache.get('ui-grid/treeBaseRowHeaderButtons'),
      scope: true,
      require: '^uiGrid',
      link: function($scope, $elm, $attrs, uiGridCtrl) {
        var self = uiGridCtrl.grid;
        $scope.treeButtonClass = function(row) {
          if ( ( self.options.showTreeExpandNoChildren && row.treeLevel > -1 ) || ( row.treeNode.children && row.treeNode.children.length > 0 ) ) {
            if (row.treeNode.state === 'expanded' ) {
              return 'ui-grid-icon-minus-squared';
            }
            if (row.treeNode.state === 'collapsed' ) {
              return 'ui-grid-icon-plus-squared';
            }
          }
        };
        $scope.treeButtonClick = function(row, evt) {
          evt.stopPropagation();
          uiGridTreeBaseService.toggleRowTreeState(self, row, evt);
        };
        $scope.treeButtonKeyDown = function (row, evt) {
          if (evt.keyCode === 32 || evt.keyCode === 13) {
            $scope.treeButtonClick(row, evt);
          }
        };
      }
    };
  }]);


  /**
   *  @ngdoc directive
   *  @name ui.grid.treeBase.directive:uiGridTreeBaseExpandAllButtons
   *  @element div
   *
   *  @description Provides the expand/collapse all button
   */
  module.directive('uiGridTreeBaseExpandAllButtons', ['$templateCache', 'uiGridTreeBaseService',
  function ($templateCache, uiGridTreeBaseService) {
    return {
      replace: true,
      restrict: 'E',
      template: $templateCache.get('ui-grid/treeBaseExpandAllButtons'),
      scope: false,
      link: function($scope) {
        var self = $scope.col.grid;
        $scope.headerButtonClass = function() {
          if (self.treeBase.numberLevels > 0 && self.treeBase.expandAll) {
            return 'ui-grid-icon-minus-squared';
          }
          if (self.treeBase.numberLevels > 0 && !self.treeBase.expandAll) {
            return 'ui-grid-icon-plus-squared';
          }
        };
        $scope.headerButtonClick = function(row, evt) {
          if ( self.treeBase.expandAll ) {
            uiGridTreeBaseService.collapseAllRows(self, evt);
          } else {
            uiGridTreeBaseService.expandAllRows(self, evt);
          }
        };
        $scope.headerButtonKeyDown = function (evt) {
          if (evt.keyCode === 32 || evt.keyCode === 13) {
            $scope.headerButtonClick(self, evt);
          }
        };
      }
    };
  }]);


  /**
   *  @ngdoc directive
   *  @name ui.grid.treeBase.directive:uiGridViewport
   *  @element div
   *
   *  @description Stacks on top of ui.grid.uiGridViewport to set formatting on a tree header row
   */
  module.directive('uiGridViewport',
    function () {
      return {
        priority: -200, // run after default  directive
        scope: false,
        compile: function ($elm) {
          var rowRepeatDiv = angular.element($elm.children().children()[0]);

          var existingNgClass = rowRepeatDiv.attr("ng-class");
          var newNgClass = '';
          if ( existingNgClass ) {
            newNgClass = existingNgClass.slice(0, -1) + ",'ui-grid-tree-header-row': row.treeLevel > -1}";
          } else {
            newNgClass = "{'ui-grid-tree-header-row': row.treeLevel > -1}";
          }
          rowRepeatDiv.attr("ng-class", newNgClass);

          return {
            pre: function ($scope, $elm, $attrs, controllers) {

            },
            post: function ($scope, $elm, $attrs, controllers) {
            }
          };
        }
      };
    });
})();

(function () {
  'use strict';

  /**
   * @ngdoc overview
   * @name ui.grid.treeView
   * @description
   *
   * # ui.grid.treeView
   *
   * <div class="alert alert-warning" role="alert"><strong>Beta</strong> This feature is ready for testing, but it either hasn't seen a lot of use or has some known bugs.</div>
   *
   * This module provides a tree view of the data that it is provided, with nodes in that
   * tree and leaves.  Unlike grouping, the tree is an inherent property of the data and must
   * be provided with your data array.
   *
   * Design information:
   * -------------------
   *
   * TreeView uses treeBase for the underlying functionality, and is a very thin wrapper around
   * that logic.  Most of the design information has now moved to treebase.
   * <br/>
   * <br/>
   *
   * <div doc-module-components="ui.grid.treeView"></div>
   */

  var module = angular.module('ui.grid.treeView', ['ui.grid', 'ui.grid.treeBase']);

  /**
   *  @ngdoc object
   *  @name ui.grid.treeView.constant:uiGridTreeViewConstants
   *
   *  @description constants available in treeView module, this includes
   *  all the constants declared in the treeBase module (these are manually copied
   *  as there isn't an easy way to include constants in another constants file, and
   *  we don't want to make users include treeBase)
   *
   */
  module.constant('uiGridTreeViewConstants', {
    featureName: "treeView",
    rowHeaderColName: 'treeBaseRowHeaderCol',
    EXPANDED: 'expanded',
    COLLAPSED: 'collapsed',
    aggregation: {
      COUNT: 'count',
      SUM: 'sum',
      MAX: 'max',
      MIN: 'min',
      AVG: 'avg'
    }
  });

  /**
   *  @ngdoc service
   *  @name ui.grid.treeView.service:uiGridTreeViewService
   *
   *  @description Services for treeView features
   */
  module.service('uiGridTreeViewService', ['$q', 'uiGridTreeViewConstants', 'uiGridTreeBaseConstants', 'uiGridTreeBaseService', 'gridUtil', 'GridRow', 'gridClassFactory', 'i18nService', 'uiGridConstants',
  function ($q, uiGridTreeViewConstants, uiGridTreeBaseConstants, uiGridTreeBaseService, gridUtil, GridRow, gridClassFactory, i18nService, uiGridConstants) {

    var service = {

      initializeGrid: function (grid, $scope) {
        uiGridTreeBaseService.initializeGrid( grid, $scope );

        /**
         *  @ngdoc object
         *  @name ui.grid.treeView.grid:treeView
         *
         *  @description Grid properties and functions added for treeView
         */
        grid.treeView = {};

        grid.registerRowsProcessor(service.adjustSorting, 60);

        /**
         *  @ngdoc object
         *  @name ui.grid.treeView.api:PublicApi
         *
         *  @description Public Api for treeView feature
         */
        var publicApi = {
          events: {
            treeView: {
            }
          },
          methods: {
            treeView: {
            }
          }
        };

        grid.api.registerEventsFromObject(publicApi.events);

        grid.api.registerMethodsFromObject(publicApi.methods);

      },

      defaultGridOptions: function (gridOptions) {
        // default option to true unless it was explicitly set to false
        /**
         *  @ngdoc object
         *  @name ui.grid.treeView.api:GridOptions
         *
         *  @description GridOptions for treeView feature, these are available to be
         *  set using the ui-grid {@link ui.grid.class:GridOptions gridOptions}
         *
         *  Many tree options are set on treeBase, make sure to look at that feature in
         *  conjunction with these options.
         */

        /**
         *  @ngdoc object
         *  @name enableTreeView
         *  @propertyOf  ui.grid.treeView.api:GridOptions
         *  @description Enable row tree view for entire grid.
         *  <br/>Defaults to true
         */
        gridOptions.enableTreeView = gridOptions.enableTreeView !== false;

      },


      /**
       * @ngdoc function
       * @name adjustSorting
       * @methodOf  ui.grid.treeBase.service:uiGridTreeBaseService
       * @description Trees cannot be sorted the same as flat lists of rows -
       * trees are sorted recursively within each level - so the children of each
       * node are sorted, but not the full set of rows.
       *
       * To achieve this, we suppress the normal sorting by setting ignoreSort on
       * each of the sort columns.  When the treeBase rowsProcessor runs it will then
       * unignore these, and will perform a recursive sort against the tree that it builds.
       *
       * @param {array} renderableRows the rows that we need to pass on through
       * @returns {array} renderableRows that we passed on through
       */
      adjustSorting: function( renderableRows ) {
        var grid = this;

        grid.columns.forEach( function( column ) {
          if ( column.sort ) {
            column.sort.ignoreSort = true;
          }
        });

        return renderableRows;
      }
    };

    return service;
  }]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.treeView.directive:uiGridTreeView
   *  @element div
   *  @restrict A
   *
   *  @description Adds treeView features to grid
   *
   *  @example
   <example module="app">
   <file name="app.js">
   var app = angular.module('app', ['ui.grid', 'ui.grid.treeView']);

   app.controller('MainCtrl', ['$scope', function ($scope) {
      $scope.data = [
        { name: 'Bob', title: 'CEO' },
            { name: 'Frank', title: 'Lowly Developer' }
      ];

      $scope.columnDefs = [
        {name: 'name', enableCellEdit: true},
        {name: 'title', enableCellEdit: true}
      ];

      $scope.gridOptions = { columnDefs: $scope.columnDefs, data: $scope.data };
    }]);
   </file>
   <file name="index.html">
   <div ng-controller="MainCtrl">
   <div ui-grid="gridOptions" ui-grid-tree-view></div>
   </div>
   </file>
   </example>
   */
  module.directive('uiGridTreeView', ['uiGridTreeViewConstants', 'uiGridTreeViewService', '$templateCache',
  function (uiGridTreeViewConstants, uiGridTreeViewService, $templateCache) {
    return {
      replace: true,
      priority: 0,
      require: '^uiGrid',
      scope: false,
      compile: function () {
        return {
          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
            if (uiGridCtrl.grid.options.enableTreeView !== false) {
              uiGridTreeViewService.initializeGrid(uiGridCtrl.grid, $scope);
            }
          },
          post: function ($scope, $elm, $attrs, uiGridCtrl) {

          }
        };
      }
    };
  }]);
})();

(function () {
  'use strict';

  /**
   * @ngdoc overview
   * @name ui.grid.validate
   * @description
   *
   * # ui.grid.validate
   *
   * <div class="alert alert-warning" role="alert"><strong>Alpha</strong> This feature is in development. There will almost certainly be breaking api changes, or there are major outstanding bugs.</div>
   *
   * This module provides the ability to validate cells upon change.
   *
   * Design information:
   * -------------------
   *
   * Validation is not based on angularjs validation, since it would work only when editing the field.
   *
   * Instead it adds custom properties to any field considered as invalid.
   *
   * <br/>
   * <br/>
   *
   * <div doc-module-components="ui.grid.expandable"></div>
   */
  var module = angular.module('ui.grid.validate', ['ui.grid']);

  /**
   *  @ngdoc service
   *  @name ui.grid.validate.service:uiGridValidateService
   *
   *  @description Services for validation features
   */
  module.service('uiGridValidateService', ['$sce', '$q', '$http', 'i18nService', 'uiGridConstants', function ($sce, $q, $http, i18nService, uiGridConstants) {

    var service = {

      /**
       *  @ngdoc object
       *  @name validatorFactories
       *  @propertyOf ui.grid.validate.service:uiGridValidateService
       *  @description object containing all the factories used to validate data.<br/>
       *  These factories will be in the form <br/>
       *  ```
       *  {
       *    validatorFactory: function(argument) {
       *                        return function(newValue, oldValue, rowEntity, colDef) {
       *                          return true || false || promise
       *                        }
       *                      },
       *    messageFunction: function(argument) {
       *                       return string
       *                     }
       *  }
       *  ```
       *
       * Promises should return true or false as result according to the result of validation.
       */
      validatorFactories: {},

      /**
       * @ngdoc service
       * @name setExternalFactoryFunction
       * @methodOf ui.grid.validate.service:uiGridValidateService
       * @description Adds a way to retrieve validators from an external service
       * <p>Validators from this external service have a higher priority than default
       * ones
       * @param {function} externalFactoryFunction a function that accepts name and argument to pass to a
       * validator factory and that returns an object with the same properties as
       * you can see in {@link ui.grid.validate.service:uiGridValidateService#properties_validatorFactories validatorFactories}
       */
      setExternalFactoryFunction: function(externalFactoryFunction) {
        service.externalFactoryFunction = externalFactoryFunction;
      },

      /**
       * @ngdoc service
       * @name clearExternalFactory
       * @methodOf ui.grid.validate.service:uiGridValidateService
       * @description Removes any link to external factory from this service
       */
      clearExternalFactory: function() {
        delete service.externalFactoryFunction;
      },

      /**
       * @ngdoc service
       * @name getValidatorFromExternalFactory
       * @methodOf ui.grid.validate.service:uiGridValidateService
       * @description Retrieves a validator by executing a validatorFactory
       * stored in an external service.
       * @param {string} name the name of the validator to retrieve
       * @param {object} argument an argument to pass to the validator factory
       */
      getValidatorFromExternalFactory: function(name, argument) {
        return service.externalFactoryFunction(name, argument).validatorFactory(argument);
      },

      /**
       * @ngdoc service
       * @name getMessageFromExternalFactory
       * @methodOf ui.grid.validate.service:uiGridValidateService
       * @description Retrieves a message stored in an external service.
       * @param {string} name the name of the validator
       * @param {object} argument an argument to pass to the message function
       */
      getMessageFromExternalFactory: function(name, argument) {
        return service.externalFactoryFunction(name, argument).messageFunction(argument);
      },

      /**
       * @ngdoc service
       * @name setValidator
       * @methodOf ui.grid.validate.service:uiGridValidateService
       * @description  Adds a new validator to the service
       * @param {string} name the name of the validator, must be unique
       * @param {function} validatorFactory a factory that return a validatorFunction
       * @param {function} messageFunction a function that return the error message
       */
      setValidator: function(name, validatorFactory, messageFunction) {
        service.validatorFactories[name] = {
          validatorFactory: validatorFactory,
          messageFunction: messageFunction
        };
      },

      /**
       * @ngdoc service
       * @name getValidator
       * @methodOf ui.grid.validate.service:uiGridValidateService
       * @description Returns a validator registered to the service
       * or retrieved from the external factory
       * @param {string} name the name of the validator to retrieve
       * @param {object} argument an argument to pass to the validator factory
       * @returns {object} the validator function
       */
      getValidator: function(name, argument) {
        if (service.externalFactoryFunction) {
          var validator = service.getValidatorFromExternalFactory(name, argument);
          if (validator) {
            return validator;
          }
        }
        if (!service.validatorFactories[name]) {
          throw ("Invalid validator name: " + name);
        }
        return service.validatorFactories[name].validatorFactory(argument);
      },

      /**
       * @ngdoc service
       * @name getMessage
       * @methodOf ui.grid.validate.service:uiGridValidateService
       * @description Returns the error message related to the validator
       * @param {string} name the name of the validator
       * @param {object} argument an argument to pass to the message function
       * @returns {string} the error message related to the validator
       */
      getMessage: function(name, argument) {
        if (service.externalFactoryFunction) {
          var message = service.getMessageFromExternalFactory(name, argument);
          if (message) {
            return message;
          }
        }
        return service.validatorFactories[name].messageFunction(argument);
      },

      /**
       * @ngdoc service
       * @name isInvalid
       * @methodOf ui.grid.validate.service:uiGridValidateService
       * @description Returns true if the cell (identified by rowEntity, colDef) is invalid
       * @param {object} rowEntity the row entity of the cell
       * @param {object} colDef the colDef of the cell
       * @returns {boolean} true if the cell is invalid
       */
      isInvalid: function (rowEntity, colDef) {
        return rowEntity['$$invalid'+colDef.name];
      },

      /**
       * @ngdoc service
       * @name setInvalid
       * @methodOf ui.grid.validate.service:uiGridValidateService
       * @description Makes the cell invalid by adding the proper field to the entity
       * @param {object} rowEntity the row entity of the cell
       * @param {object} colDef the colDef of the cell
       */
      setInvalid: function (rowEntity, colDef) {
        rowEntity['$$invalid'+colDef.name] = true;
      },

      /**
       * @ngdoc service
       * @name setValid
       * @methodOf ui.grid.validate.service:uiGridValidateService
       * @description Makes the cell valid by removing the proper error field from the entity
       * @param {object} rowEntity the row entity of the cell
       * @param {object} colDef the colDef of the cell
       */
      setValid: function (rowEntity, colDef) {
        delete rowEntity['$$invalid'+colDef.name];
      },

      /**
       * @ngdoc service
       * @name setError
       * @methodOf ui.grid.validate.service:uiGridValidateService
       * @description Adds the proper error to the entity errors field
       * @param {object} rowEntity the row entity of the cell
       * @param {object} colDef the colDef of the cell
       * @param {string} validatorName the name of the validator that is failing
       */
      setError: function(rowEntity, colDef, validatorName) {
        if (!rowEntity['$$errors'+colDef.name]) {
          rowEntity['$$errors'+colDef.name] = {};
        }
        rowEntity['$$errors'+colDef.name][validatorName] = true;
      },

      /**
       * @ngdoc service
       * @name clearError
       * @methodOf ui.grid.validate.service:uiGridValidateService
       * @description Removes the proper error from the entity errors field
       * @param {object} rowEntity the row entity of the cell
       * @param {object} colDef the colDef of the cell
       * @param {string} validatorName the name of the validator that is failing
       */
      clearError: function(rowEntity, colDef, validatorName) {
        if (!rowEntity['$$errors'+colDef.name]) {
          return;
        }
        if (validatorName in rowEntity['$$errors'+colDef.name]) {
            delete rowEntity['$$errors'+colDef.name][validatorName];
        }
      },

      /**
       * @ngdoc function
       * @name getErrorMessages
       * @methodOf ui.grid.validate.service:uiGridValidateService
       * @description returns an array of i18n-ed error messages.
       * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
       * @param {object} colDef the column whose errors we are looking for
       * @returns {array} An array of strings containing all the error messages for the cell
       */
      getErrorMessages: function(rowEntity, colDef) {
        var errors = [];

        if (!rowEntity['$$errors'+colDef.name] || Object.keys(rowEntity['$$errors'+colDef.name]).length === 0) {
          return errors;
        }

        Object.keys(rowEntity['$$errors'+colDef.name]).sort().forEach(function(validatorName) {
          errors.push(service.getMessage(validatorName, colDef.validators[validatorName]));
        });

        return errors;
      },

      /**
       * @ngdoc function
       * @name getFormattedErrors
       * @methodOf  ui.grid.validate.service:uiGridValidateService
       * @description returns the error i18n-ed and formatted in html to be shown inside the page.
       * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
       * @param {object} colDef the column whose errors we are looking for
       * @returns {object} An object that can be used in a template (like a cellTemplate) to display the
       * message inside the page (i.e. inside a div)
       */
      getFormattedErrors: function(rowEntity, colDef) {
        var msgString = "",
          errors = service.getErrorMessages(rowEntity, colDef);

        if (!errors.length) {
          return;
        }

        errors.forEach(function(errorMsg) {
          msgString += errorMsg + "<br/>";
        });

        return $sce.trustAsHtml('<p><b>' + i18nService.getSafeText('validate.error') + '</b></p>' + msgString );
      },

      /**
       * @ngdoc function
       * @name getTitleFormattedErrors
       * @methodOf ui.grid.validate.service:uiGridValidateService
       * @description returns the error i18n-ed and formatted in javaScript to be shown inside an html
       * title attribute.
       * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
       * @param {object} colDef the column whose errors we are looking for
       * @returns {object} An object that can be used in a template (like a cellTemplate) to display the
       * message inside an html title attribute
       */
      getTitleFormattedErrors: function(rowEntity, colDef) {
        var newLine = "\n",
          msgString = "",
          errors = service.getErrorMessages(rowEntity, colDef);

        if (!errors.length) {
          return;
        }

        errors.forEach(function(errorMsg) {
          msgString += errorMsg + newLine;
        });

        return $sce.trustAsHtml(i18nService.getSafeText('validate.error') + newLine + msgString);
      },

      /**
       * @ngdoc function
       * @name getTitleFormattedErrors
       * @methodOf ui.grid.validate.service:uiGridValidateService
       * @description Executes all validators on a cell (identified by row entity and column definition) and sets or clears errors
       * @param {object} rowEntity the row entity of the cell we want to run the validators on
       * @param {object} colDef the column definition of the cell we want to run the validators on
       * @param {object} newValue the value the user just entered
       * @param {object} oldValue the value the field had before
       */
      runValidators: function(rowEntity, colDef, newValue, oldValue, grid) {
        if (newValue === oldValue) {
          // If the value has not changed we perform no validation
          return;
        }

        if (typeof(colDef.name) === 'undefined' || !colDef.name) {
          throw new Error('colDef.name is required to perform validation');
        }

        service.setValid(rowEntity, colDef);

        var validateClosureFactory = function(rowEntity, colDef, validatorName) {
          return function(value) {
            if (!value) {
              service.setInvalid(rowEntity, colDef);
              service.setError(rowEntity, colDef, validatorName);
              if (grid) {
                grid.api.validate.raise.validationFailed(rowEntity, colDef, newValue, oldValue);
              }
            }
          };
        };

        var promises = [];

        for (var validatorName in colDef.validators) {
          service.clearError(rowEntity, colDef, validatorName);
          var validatorFunction = service.getValidator(validatorName, colDef.validators[validatorName]);

          // We pass the arguments as oldValue, newValue so they are in the same order
          // as ng-model validators (modelValue, viewValue)
          var promise = $q.when(validatorFunction(oldValue, newValue, rowEntity, colDef))
            .then(validateClosureFactory(rowEntity, colDef, validatorName));

          promises.push(promise);
        }

        return $q.all(promises);
      },

      /**
       * @ngdoc function
       * @name createDefaultValidators
       * @methodOf ui.grid.validate.service:uiGridValidateService
       * @description adds the basic validators to the list of service validators
       */
      createDefaultValidators: function() {
        service.setValidator('minLength', function (argument) {
          return function (oldValue, newValue) {
            if (newValue === undefined || newValue === null || newValue === '') {
              return true;
            }
            return newValue.length >= argument;
          };
        }, function(argument) {
          return i18nService.getSafeText('validate.minLength').replace('THRESHOLD', argument);
        });

        service.setValidator('maxLength', function (argument) {
          return function (oldValue, newValue) {
            if (newValue === undefined || newValue === null || newValue === '') {
              return true;
            }
            return newValue.length <= argument;
          };
        }, function(threshold) {
          return i18nService.getSafeText('validate.maxLength').replace('THRESHOLD', threshold);
        });

        service.setValidator('required', function (argument) {
          return function (oldValue, newValue) {
            if (argument) {
              return !(newValue === undefined || newValue === null || newValue === '');
            }
            return true;
          };
        }, function() {
          return i18nService.getSafeText('validate.required');
        });
      },

      initializeGrid: function (scope, grid) {
        grid.validate = {

          isInvalid: service.isInvalid,

          getErrorMessages: service.getErrorMessages,

          getFormattedErrors: service.getFormattedErrors,

          getTitleFormattedErrors: service.getTitleFormattedErrors,

          runValidators: service.runValidators
        };

        /**
         *  @ngdoc object
         *  @name ui.grid.validate.api:PublicApi
         *
         *  @description Public Api for validation feature
         */
        var publicApi = {
          events: {
            validate: {
              /**
               * @ngdoc event
               * @name validationFailed
               * @eventOf ui.grid.validate.api:PublicApi
               * @description raised when one or more failure happened during validation
               * <pre>
               *      gridApi.validate.on.validationFailed(scope, function(rowEntity, colDef, newValue, oldValue){...})
               * </pre>
               * @param {object} rowEntity the options.data element whose validation failed
               * @param {object} colDef the column whose validation failed
               * @param {object} newValue new value
               * @param {object} oldValue old value
               */
              validationFailed: function (rowEntity, colDef, newValue, oldValue) {
              }
            }
          },
          methods: {
            validate: {
              /**
               * @ngdoc function
               * @name isInvalid
               * @methodOf ui.grid.validate.api:PublicApi
               * @description checks if a cell (identified by rowEntity, colDef) is invalid
               * @param {object} rowEntity gridOptions.data[] array instance we want to check
               * @param {object} colDef the column whose errors we want to check
               * @returns {boolean} true if the cell value is not valid
               */
              isInvalid: function(rowEntity, colDef) {
                return grid.validate.isInvalid(rowEntity, colDef);
              },
              /**
               * @ngdoc function
               * @name getErrorMessages
               * @methodOf ui.grid.validate.api:PublicApi
               * @description returns an array of i18n-ed error messages.
               * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
               * @param {object} colDef the column whose errors we are looking for
               * @returns {array} An array of strings containing all the error messages for the cell
               */
              getErrorMessages: function (rowEntity, colDef) {
                return grid.validate.getErrorMessages(rowEntity, colDef);
              },
              /**
               * @ngdoc function
               * @name getFormattedErrors
               * @methodOf ui.grid.validate.api:PublicApi
               * @description returns the error i18n-ed and formatted in html to be shown inside the page.
               * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
               * @param {object} colDef the column whose errors we are looking for
               * @returns {object} An object that can be used in a template (like a cellTemplate) to display the
               * message inside the page (i.e. inside a div)
               */
              getFormattedErrors: function (rowEntity, colDef) {
                return grid.validate.getFormattedErrors(rowEntity, colDef);
              },
              /**
               * @ngdoc function
               * @name getTitleFormattedErrors
               * @methodOf ui.grid.validate.api:PublicApi
               * @description returns the error i18n-ed and formatted in javaScript to be shown inside an html
               * title attribute.
               * @param {object} rowEntity gridOptions.data[] array instance whose errors we are looking for
               * @param {object} colDef the column whose errors we are looking for
               * @returns {object} An object that can be used in a template (like a cellTemplate) to display the
               * message inside an html title attribute
               */
              getTitleFormattedErrors: function (rowEntity, colDef) {
                return grid.validate.getTitleFormattedErrors(rowEntity, colDef);
              }
            }
          }
        };

        grid.api.registerEventsFromObject(publicApi.events);
        grid.api.registerMethodsFromObject(publicApi.methods);

        if (grid.edit) {
          grid.api.edit.on.afterCellEdit(scope, function(rowEntity, colDef, newValue, oldValue) {
            grid.validate.runValidators(rowEntity, colDef, newValue, oldValue, grid);
          });
        }

        service.createDefaultValidators();
      }
    };

    return service;
  }]);

  /**
   *  @ngdoc directive
   *  @name ui.grid.validate.directive:uiGridValidate
   *  @element div
   *  @restrict A
   *  @description Adds validating features to the ui-grid directive.
   *  @example
   <example module="app">
   <file name="app.js">
   var app = angular.module('app', ['ui.grid', 'ui.grid.edit', 'ui.grid.validate']);

   app.controller('MainCtrl', ['$scope', function ($scope) {
      $scope.data = [
        { name: 'Bob', title: 'CEO' },
            { name: 'Frank', title: 'Lowly Developer' }
      ];

      $scope.columnDefs = [
        {name: 'name', enableCellEdit: true, validators: {minLength: 3, maxLength: 9}, cellTemplate: 'ui-grid/cellTitleValidator'},
        {name: 'title', enableCellEdit: true, validators: {required: true}, cellTemplate: 'ui-grid/cellTitleValidator'}
      ];
    }]);
   </file>
   <file name="index.html">
   <div ng-controller="MainCtrl">
   <div ui-grid="{ data: data, columnDefs: columnDefs }" ui-grid-edit ui-grid-validate></div>
   </div>
   </file>
   </example>
   */

  module.directive('uiGridValidate', ['gridUtil', 'uiGridValidateService', function (gridUtil, uiGridValidateService) {
    return {
      priority: 0,
      replace: true,
      require: '^uiGrid',
      scope: false,
      compile: function () {
        return {
          pre: function ($scope, $elm, $attrs, uiGridCtrl) {
            uiGridValidateService.initializeGrid($scope, uiGridCtrl.grid);
          },
          post: function ($scope, $elm, $attrs, uiGridCtrl) {
          }
        };
      }
    };
  }]);
})();

angular.module('ui.grid').run(['$templateCache', function($templateCache) {
  'use strict';

  $templateCache.put('ui-grid/ui-grid-filter',
    "<div class=\"ui-grid-filter-container\" ng-style=\"col.extraStyle\" ng-repeat=\"colFilter in col.filters\" ng-class=\"{'ui-grid-filter-cancel-button-hidden' : colFilter.disableCancelFilterButton === true }\"><div ng-if=\"colFilter.type !== 'select'\"><input type=\"text\" class=\"ui-grid-filter-input ui-grid-filter-input-{{$index}}\" ng-model=\"colFilter.term\" ng-attr-placeholder=\"{{colFilter.placeholder || ''}}\" aria-label=\"{{colFilter.ariaLabel || aria.defaultFilterLabel}}\"><div role=\"button\" class=\"ui-grid-filter-button\" ng-click=\"removeFilter(colFilter, $index)\" ng-if=\"!colFilter.disableCancelFilterButton\" ng-disabled=\"colFilter.term === undefined || colFilter.term === null || colFilter.term === ''\" ng-show=\"colFilter.term !== undefined && colFilter.term !== null && colFilter.term !== ''\"><i class=\"ui-grid-icon-cancel\" ui-grid-one-bind-aria-label=\"aria.removeFilter\">&nbsp;</i></div></div><div ng-if=\"colFilter.type === 'select'\"><select class=\"ui-grid-filter-select ui-grid-filter-input-{{$index}}\" ng-model=\"colFilter.term\" ng-show=\"colFilter.selectOptions.length > 0\" ng-attr-placeholder=\"{{colFilter.placeholder || aria.defaultFilterLabel}}\" aria-label=\"{{colFilter.ariaLabel || ''}}\" ng-options=\"option.value as option.label for option in colFilter.selectOptions\"><option value=\"\"></option></select><div role=\"button\" class=\"ui-grid-filter-button-select\" ng-click=\"removeFilter(colFilter, $index)\" ng-if=\"!colFilter.disableCancelFilterButton\" ng-disabled=\"colFilter.term === undefined || colFilter.term === null || colFilter.term === ''\" ng-show=\"colFilter.term !== undefined && colFilter.term != null\"><i class=\"ui-grid-icon-cancel\" ui-grid-one-bind-aria-label=\"aria.removeFilter\">&nbsp;</i></div></div></div>"
  );


  $templateCache.put('ui-grid/ui-grid-footer',
    "<div class=\"ui-grid-footer-panel ui-grid-footer-aggregates-row\"><!-- tfooter --><div class=\"ui-grid-footer ui-grid-footer-viewport\"><div class=\"ui-grid-footer-canvas\"><div class=\"ui-grid-footer-cell-wrapper\" ng-style=\"colContainer.headerCellWrapperStyle()\"><div role=\"row\" class=\"ui-grid-footer-cell-row\"><div ui-grid-footer-cell role=\"gridcell\" ng-repeat=\"col in colContainer.renderedColumns track by col.uid\" col=\"col\" render-index=\"$index\" class=\"ui-grid-footer-cell ui-grid-clearfix\"></div></div></div></div></div></div>"
  );


  $templateCache.put('ui-grid/ui-grid-grid-footer',
    "<div class=\"ui-grid-footer-info ui-grid-grid-footer\"><span>{{'search.totalItems' | t}} {{grid.rows.length}}</span> <span ng-if=\"grid.renderContainers.body.visibleRowCache.length !== grid.rows.length\" class=\"ngLabel\">({{\"search.showingItems\" | t}} {{grid.renderContainers.body.visibleRowCache.length}})</span></div>"
  );


  $templateCache.put('ui-grid/ui-grid-header',
    "<div role=\"rowgroup\" class=\"ui-grid-header\"><!-- theader --><div class=\"ui-grid-top-panel\"><div class=\"ui-grid-header-viewport\"><div class=\"ui-grid-header-canvas\"><div class=\"ui-grid-header-cell-wrapper\" ng-style=\"colContainer.headerCellWrapperStyle()\"><div role=\"row\" class=\"ui-grid-header-cell-row\"><div role=\"columnheader\" class=\"ui-grid-header-cell ui-grid-clearfix\" ng-repeat=\"col in colContainer.renderedColumns track by col.uid\" ui-grid-header-cell col=\"col\" render-index=\"$index\"></div></div></div></div></div></div></div>"
  );


  $templateCache.put('ui-grid/ui-grid-menu-button',
    "<div class=\"ui-grid-menu-button\"><div role=\"button\" ui-grid-one-bind-id-grid=\"'grid-menu'\" class=\"ui-grid-icon-container\" ng-click=\"toggleMenu()\" aria-haspopup=\"true\"><i class=\"ui-grid-icon-menu\" ui-grid-one-bind-aria-label=\"i18n.aria.buttonLabel\">&nbsp;</i></div><div ui-grid-menu menu-items=\"menuItems\"></div></div>"
  );


  $templateCache.put('ui-grid/ui-grid-menu-header-item',
    "<li role=\"menuitem\"><div class=\"ui-grid-menu-item\" role=\"heading\" aria-level=\"2\" ng-show=\"itemShown()\"><i aria-hidden=\"true\">&nbsp; </i><span ng-bind=\"label()\"></span></div></li>"
  );


  $templateCache.put('ui-grid/ui-grid-no-header',
    "<div class=\"ui-grid-top-panel\"></div>"
  );


  $templateCache.put('ui-grid/ui-grid-row',
    "<div ng-repeat=\"(colRenderIndex, col) in colContainer.renderedColumns track by col.uid\" ui-grid-one-bind-id-grid=\"rowRenderIndex + '-' + col.uid + '-cell'\" class=\"ui-grid-cell\" ng-class=\"{ 'ui-grid-row-header-cell': col.isRowHeader }\" role=\"{{col.isRowHeader ? 'rowheader' : 'gridcell'}}\" ui-grid-cell></div>"
  );


  $templateCache.put('ui-grid/ui-grid',
    "<div ui-i18n=\"en\" class=\"ui-grid\"><!-- TODO (c0bra): add \"scoped\" attr here, eventually? --><style ui-grid-style>.grid{{ grid.id }} {\n" +
    "      /* Styles for the grid */\n" +
    "    }\n" +
    "\n" +
    "    .grid{{ grid.id }} .ui-grid-row, .grid{{ grid.id }} .ui-grid-cell, .grid{{ grid.id }} .ui-grid-cell .ui-grid-vertical-bar {\n" +
    "      height: {{ grid.options.rowHeight }}px;\n" +
    "    }\n" +
    "\n" +
    "    .grid{{ grid.id }} .ui-grid-row:last-child .ui-grid-cell {\n" +
    "      border-bottom-width: {{ (((grid.getVisibleRowCount() * grid.options.rowHeight) < grid.getViewportHeight()) && '1') || '0' }}px;\n" +
    "    }\n" +
    "\n" +
    "    {{ grid.verticalScrollbarStyles }}\n" +
    "    {{ grid.horizontalScrollbarStyles }}\n" +
    "\n" +
    "    /*\n" +
    "    .ui-grid[dir=rtl] .ui-grid-viewport {\n" +
    "      padding-left: {{ grid.verticalScrollbarWidth }}px;\n" +
    "    }\n" +
    "    */\n" +
    "\n" +
    "    {{ grid.customStyles }}</style><div class=\"ui-grid-contents-wrapper\" role=\"grid\"><div ui-grid-menu-button ng-if=\"grid.options.enableGridMenu\"></div><div ng-if=\"grid.hasLeftContainer()\" style=\"width: 0\" ui-grid-pinned-container=\"'left'\"></div><div ui-grid-render-container container-id=\"'body'\" col-container-name=\"'body'\" row-container-name=\"'body'\" bind-scroll-horizontal=\"true\" bind-scroll-vertical=\"true\" enable-horizontal-scrollbar=\"grid.options.enableHorizontalScrollbar\" enable-vertical-scrollbar=\"grid.options.enableVerticalScrollbar\"></div><div ng-if=\"grid.hasRightContainer()\" style=\"width: 0\" ui-grid-pinned-container=\"'right'\"></div><div ui-grid-grid-footer ng-if=\"grid.options.showGridFooter\"></div><div ui-grid-column-menu ng-if=\"grid.options.enableColumnMenus\"></div><div ng-transclude></div></div></div>"
  );


  $templateCache.put('ui-grid/uiGridCell',
    "<div class=\"ui-grid-cell-contents\" title=\"TOOLTIP\">{{COL_FIELD CUSTOM_FILTERS}}</div>"
  );


  $templateCache.put('ui-grid/uiGridColumnMenu',
    "<div class=\"ui-grid-column-menu\"><div ui-grid-menu menu-items=\"menuItems\" col=\"col\"><!-- <div class=\"ui-grid-column-menu\">\n" +
    "    <div class=\"inner\" ng-show=\"menuShown\">\n" +
    "      <ul>\n" +
    "        <div ng-show=\"grid.options.enableSorting\">\n" +
    "          <li ng-click=\"sortColumn($event, asc)\" ng-class=\"{ 'selected' : col.sort.direction == asc }\"><i class=\"ui-grid-icon-sort-alt-up\"></i> Sort Ascending</li>\n" +
    "          <li ng-click=\"sortColumn($event, desc)\" ng-class=\"{ 'selected' : col.sort.direction == desc }\"><i class=\"ui-grid-icon-sort-alt-down\"></i> Sort Descending</li>\n" +
    "          <li ng-show=\"col.sort.direction\" ng-click=\"unsortColumn()\"><i class=\"ui-grid-icon-cancel\"></i> Remove Sort</li>\n" +
    "        </div>\n" +
    "      </ul>\n" +
    "    </div>\n" +
    "  </div> --></div></div>"
  );


  $templateCache.put('ui-grid/uiGridFooterCell',
    "<div class=\"ui-grid-cell-contents\" col-index=\"renderIndex\"><div>{{ col.getAggregationText() + ( col.getAggregationValue() CUSTOM_FILTERS ) }}</div></div>"
  );


  $templateCache.put('ui-grid/uiGridHeaderCell',
    "<div role=\"columnheader\" ng-class=\"{ 'sortable': sortable, 'ui-grid-header-cell-last-col': isLastCol }\" ui-grid-one-bind-aria-labelledby-grid=\"col.uid + '-header-text ' + col.uid + '-sortdir-text'\" aria-sort=\"{{col.sort.direction == asc ? 'ascending' : ( col.sort.direction == desc ? 'descending' : (!col.sort.direction ? 'none' : 'other'))}}\"><div role=\"button\" tabindex=\"0\" ng-keydown=\"handleKeyDown($event)\" class=\"ui-grid-cell-contents ui-grid-header-cell-primary-focus\" col-index=\"renderIndex\" title=\"TOOLTIP\"><span class=\"ui-grid-header-cell-label\" ui-grid-one-bind-id-grid=\"col.uid + '-header-text'\">{{ col.displayName CUSTOM_FILTERS }}</span> <span ui-grid-one-bind-id-grid=\"col.uid + '-sortdir-text'\" ui-grid-visible=\"col.sort.direction\" aria-label=\"{{getSortDirectionAriaLabel()}}\"><i ng-class=\"{ 'ui-grid-icon-up-dir': col.sort.direction == asc, 'ui-grid-icon-down-dir': col.sort.direction == desc, 'ui-grid-icon-blank': !col.sort.direction }\" title=\"{{isSortPriorityVisible() ? i18n.headerCell.priority + ' ' + ( col.sort.priority + 1 )  : null}}\" aria-hidden=\"true\"></i> <sub ui-grid-visible=\"isSortPriorityVisible()\" class=\"ui-grid-sort-priority-number\">{{col.sort.priority + 1}}</sub></span></div><div role=\"button\" tabindex=\"0\" ui-grid-one-bind-id-grid=\"col.uid + '-menu-button'\" class=\"ui-grid-column-menu-button\" ng-if=\"grid.options.enableColumnMenus && !col.isRowHeader  && col.colDef.enableColumnMenu !== false\" ng-click=\"toggleMenu($event)\" ng-keydown=\"headerCellArrowKeyDown($event)\" ui-grid-one-bind-aria-label=\"i18n.headerCell.aria.columnMenuButtonLabel\" aria-haspopup=\"true\"><i class=\"ui-grid-icon-angle-down\" aria-hidden=\"true\">&nbsp;</i></div><div ui-grid-filter ng-if=\"col.filterContainer === 'headerCell'\"></div></div>"
  );


  $templateCache.put('ui-grid/uiGridMenu',
    "<div class=\"ui-grid-menu\" ng-show=\"shown\"><style ui-grid-style>{{dynamicStyles}}</style><div class=\"ui-grid-menu-mid\" ng-show=\"shownMid\"><div class=\"ui-grid-menu-inner\" ng-if=\"shown\"><ul role=\"menu\" class=\"ui-grid-menu-items\"><li ng-repeat=\"item in menuItems\" role=\"menuitem\" ui-grid-menu-item ui-grid-one-bind-id=\"'menuitem-'+$index\" action=\"item.action\" name=\"item.title\" active=\"item.active\" icon=\"item.icon\" shown=\"item.shown\" context=\"item.context\" template-url=\"item.templateUrl\" leave-open=\"item.leaveOpen\" screen-reader-only=\"item.screenReaderOnly\"></li><li ng-if=\"col.filterable && col.filterContainer === 'columnMenu'\"><div ui-grid-filter></div></li></ul></div></div></div>"
  );


  $templateCache.put('ui-grid/uiGridMenuItem',
    "<button type=\"button\" class=\"ui-grid-menu-item\" ng-click=\"itemAction($event, title)\" ng-show=\"itemShown()\" ng-class=\"{ 'ui-grid-menu-item-active': active(), 'ui-grid-sr-only': (!focus && screenReaderOnly) }\" aria-pressed=\"{{active()}}\" tabindex=\"0\" ng-focus=\"focus=true\" ng-blur=\"focus=false\"><i ng-class=\"icon\" aria-hidden=\"true\">&nbsp; </i>{{ label() }}</button>"
  );


  $templateCache.put('ui-grid/uiGridRenderContainer',
    "<div role=\"presentation\" ui-grid-one-bind-id-grid=\"containerId + '-grid-container'\" class=\"ui-grid-render-container\" ng-style=\"{ 'margin-left': colContainer.getMargin('left') + 'px', 'margin-right': colContainer.getMargin('right') + 'px' }\"><!-- All of these dom elements are replaced in place --><div ui-grid-header></div><div ui-grid-viewport></div><div ng-if=\"colContainer.needsHScrollbarPlaceholder()\" class=\"ui-grid-scrollbar-placeholder\" ng-style=\"{height: colContainer.grid.scrollbarHeight + 'px'}\"></div><ui-grid-footer ng-if=\"grid.options.showColumnFooter\"></ui-grid-footer></div>"
  );


  $templateCache.put('ui-grid/uiGridViewport',
    "<div role=\"rowgroup\" class=\"ui-grid-viewport\" ng-style=\"colContainer.getViewportStyle()\"><!-- tbody --><div class=\"ui-grid-canvas\"><div ng-repeat=\"(rowRenderIndex, row) in rowContainer.renderedRows track by $index\" class=\"ui-grid-row\" ng-style=\"Viewport.rowStyle(rowRenderIndex)\"><div role=\"row\" ui-grid-row=\"row\" row-render-index=\"rowRenderIndex\"></div></div></div></div>"
  );


  $templateCache.put('ui-grid/cellEditor',
    "<div><form name=\"inputForm\"><input type=\"INPUT_TYPE\" ng-class=\"'colt' + col.uid\" ui-grid-editor ng-model=\"MODEL_COL_FIELD\"></form></div>"
  );


  $templateCache.put('ui-grid/dropdownEditor',
    "<div><form name=\"inputForm\"><select ng-class=\"'colt' + col.uid\" ui-grid-edit-dropdown ng-model=\"MODEL_COL_FIELD\" ng-options=\"field[editDropdownIdLabel] as field[editDropdownValueLabel] CUSTOM_FILTERS for field in editDropdownOptionsArray\"></select></form></div>"
  );


  $templateCache.put('ui-grid/fileChooserEditor',
    "<div><form name=\"inputForm\"><input ng-class=\"'colt' + col.uid\" ui-grid-edit-file-chooser type=\"file\" id=\"files\" name=\"files[]\" ng-model=\"MODEL_COL_FIELD\"></form></div>"
  );


  $templateCache.put('ui-grid/emptyBaseLayerContainer',
    "<div class=\"ui-grid-empty-base-layer-container ui-grid-canvas\"><div class=\"ui-grid-row\" ng-repeat=\"(rowRenderIndex, row) in grid.baseLayer.emptyRows track by $index\" ng-style=\"Viewport.rowStyle(rowRenderIndex)\"><div><div><div ng-repeat=\"(colRenderIndex, col) in colContainer.renderedColumns track by col.colDef.name\" class=\"ui-grid-cell {{ col.getColClass(false) }}\"></div></div></div></div></div>"
  );


  $templateCache.put('ui-grid/expandableRow',
    "<div ui-grid-expandable-row ng-if=\"expandableRow.shouldRenderExpand()\" class=\"expandableRow\" style=\"float:left; margin-top: 1px; margin-bottom: 1px\" ng-style=\"{width: (grid.renderContainers.body.getCanvasWidth()) + 'px', height: row.expandedRowHeight + 'px'}\"></div>"
  );


  $templateCache.put('ui-grid/expandableRowHeader',
    "<div class=\"ui-grid-row-header-cell ui-grid-expandable-buttons-cell\"><div class=\"ui-grid-cell-contents\"><i class=\"clickable\" ng-if=\"!(row.groupHeader==true || row.entity.subGridOptions.disableRowExpandable)\" ng-class=\"{ 'ui-grid-icon-plus-squared' : !row.isExpanded, 'ui-grid-icon-minus-squared' : row.isExpanded }\" ng-click=\"grid.api.expandable.toggleRowExpansion(row.entity, $event)\"></i></div></div>"
  );


  $templateCache.put('ui-grid/expandableScrollFiller',
    "<div ng-if=\"expandableRow.shouldRenderFiller()\" ng-class=\"{scrollFiller: true, scrollFillerClass:(colContainer.name === 'body')}\" ng-style=\"{ width: (grid.getViewportWidth()) + 'px', height: row.expandedRowHeight + 2 + 'px', 'margin-left': grid.options.rowHeader.rowHeaderWidth + 'px' }\">&nbsp;</div>"
  );


  $templateCache.put('ui-grid/expandableTopRowHeader',
    "<div class=\"ui-grid-row-header-cell ui-grid-expandable-buttons-cell\"><div class=\"ui-grid-cell-contents\"><span class=\"ui-grid-cell-empty\" ng-if=\"!grid.options.showExpandAllButton\"></span> <button type=\"button\" class=\"ui-grid-icon-button clickable\" ng-if=\"grid.options.showExpandAllButton\" ng-class=\"{ 'ui-grid-icon-plus-squared' : !grid.expandable.expandedAll, 'ui-grid-icon-minus-squared' : grid.expandable.expandedAll }\" ng-click=\"grid.api.expandable.toggleAllRows()\"></button></div></div>"
  );


  $templateCache.put('ui-grid/csvLink',
    "<span class=\"ui-grid-exporter-csv-link-span\"><a href=\"data:text/csv;charset=UTF-8,CSV_CONTENT\" download=\"FILE_NAME\">LINK_LABEL</a></span>"
  );


  $templateCache.put('ui-grid/importerMenuItem',
    "<li class=\"ui-grid-menu-item\"><form><input class=\"ui-grid-importer-file-chooser\" type=\"file\" id=\"files\" name=\"files[]\"></form></li>"
  );


  $templateCache.put('ui-grid/importerMenuItemContainer',
    "<div ui-grid-importer-menu-item></div>"
  );


  $templateCache.put('ui-grid/pagination',
    "<div class=\"ui-grid-pager-panel\" ui-grid-pager ng-show=\"grid.options.enablePaginationControls\"><div role=\"navigation\" class=\"ui-grid-pager-container\"><div class=\"ui-grid-pager-control\"><button type=\"button\" class=\"ui-grid-pager-first\" ui-grid-one-bind-title=\"aria.pageToFirst\" ui-grid-one-bind-aria-label=\"aria.pageToFirst\" ng-click=\"pageFirstPageClick()\" ng-disabled=\"cantPageBackward()\"><div ng-class=\"grid.isRTL() ? 'last-triangle' : 'first-triangle'\"><div ng-class=\"grid.isRTL() ? 'last-bar-rtl' : 'first-bar'\"></div></div></button> <button type=\"button\" class=\"ui-grid-pager-previous\" ui-grid-one-bind-title=\"aria.pageBack\" ui-grid-one-bind-aria-label=\"aria.pageBack\" ng-click=\"pagePreviousPageClick()\" ng-disabled=\"cantPageBackward()\"><div ng-class=\"grid.isRTL() ? 'last-triangle prev-triangle' : 'first-triangle prev-triangle'\"></div></button> <input type=\"number\" ui-grid-one-bind-title=\"aria.pageSelected\" ui-grid-one-bind-aria-label=\"aria.pageSelected\" class=\"ui-grid-pager-control-input\" ng-model=\"grid.options.paginationCurrentPage\" min=\"1\" max=\"{{ paginationApi.getTotalPages() }}\" step=\"1\" required> <span class=\"ui-grid-pager-max-pages-number\" ng-show=\"paginationApi.getTotalPages() > 0\"><abbr ui-grid-one-bind-title=\"paginationOf\">/ </abbr>{{ paginationApi.getTotalPages() }} </span><button type=\"button\" class=\"ui-grid-pager-next\" ui-grid-one-bind-title=\"aria.pageForward\" ui-grid-one-bind-aria-label=\"aria.pageForward\" ng-click=\"pageNextPageClick()\" ng-disabled=\"cantPageForward()\"><div ng-class=\"grid.isRTL() ? 'first-triangle next-triangle' : 'last-triangle next-triangle'\"></div></button> <button type=\"button\" class=\"ui-grid-pager-last\" ui-grid-one-bind-title=\"aria.pageToLast\" ui-grid-one-bind-aria-label=\"aria.pageToLast\" ng-click=\"pageLastPageClick()\" ng-disabled=\"cantPageToLast()\"><div ng-class=\"grid.isRTL() ? 'first-triangle' : 'last-triangle'\"><div ng-class=\"grid.isRTL() ? 'first-bar-rtl' : 'last-bar'\"></div></div></button></div><div class=\"ui-grid-pager-row-count-picker\" ng-if=\"grid.options.paginationPageSizes.length > 1 && !grid.options.useCustomPagination\"><select ui-grid-one-bind-aria-labelledby-grid=\"'items-per-page-label'\" ng-model=\"grid.options.paginationPageSize\" ng-options=\"o as o for o in grid.options.paginationPageSizes\"></select> <span ui-grid-one-bind-id-grid=\"'items-per-page-label'\" class=\"ui-grid-pager-row-count-label\">&nbsp;{{sizesLabel}}</span></div><span ng-if=\"grid.options.paginationPageSizes.length <= 1\" class=\"ui-grid-pager-row-count-label\">{{grid.options.paginationPageSize}}&nbsp;{{sizesLabel}}</span></div><div class=\"ui-grid-pager-count-container\"><div class=\"ui-grid-pager-count\"><span ng-show=\"grid.options.totalItems > 0\">{{ 1 + paginationApi.getFirstRowIndex() }} <abbr ui-grid-one-bind-title=\"paginationThrough\">- </abbr>{{ 1 + paginationApi.getLastRowIndex() }} {{paginationOf}} {{grid.options.totalItems}} {{totalItemsLabel}}</span></div></div></div>"
  );


  $templateCache.put('ui-grid/columnResizer',
    "<div ui-grid-column-resizer ng-if=\"grid.options.enableColumnResizing\" class=\"ui-grid-column-resizer\" col=\"col\" position=\"right\" render-index=\"renderIndex\" unselectable=\"on\"></div>"
  );


  $templateCache.put('ui-grid/gridFooterSelectedItems',
    "<span ng-if=\"grid.selection.selectedCount !== 0 && grid.options.enableFooterTotalSelected\">({{\"search.selectedItems\" | t}} {{grid.selection.selectedCount}})</span>"
  );


  $templateCache.put('ui-grid/selectionHeaderCell',
    "<div><!-- <div class=\"ui-grid-vertical-bar\">&nbsp;</div> --><div class=\"ui-grid-cell-contents\" col-index=\"renderIndex\"><ui-grid-selection-select-all-buttons ng-if=\"grid.options.enableSelectAll\" role=\"checkbox\" ng-model=\"grid.selection.selectAll\"></ui-grid-selection-select-all-buttons></div></div>"
  );


  $templateCache.put('ui-grid/selectionRowHeader',
    "<div class=\"ui-grid-cell-contents ui-grid-disable-selection clickable\"><ui-grid-selection-row-header-buttons></ui-grid-selection-row-header-buttons></div>"
  );


  $templateCache.put('ui-grid/selectionRowHeaderButtons',
    "<div class=\"ui-grid-selection-row-header-buttons ui-grid-icon-ok clickable\" ng-class=\"{'ui-grid-row-selected': row.isSelected}\" tabindex=\"0\" ng-click=\"selectButtonClick(row, $event)\" ng-keydown=\"selectButtonKeyDown(row, $event)\" role=\"checkbox\" ng-model=\"row.isSelected\">&nbsp;</div>"
  );


  $templateCache.put('ui-grid/selectionSelectAllButtons',
    "<div role=\"button\" tabindex=\"0\" class=\"ui-grid-selection-row-header-buttons ui-grid-icon-ok\" ng-class=\"{'ui-grid-all-selected': grid.selection.selectAll}\" ng-click=\"headerButtonClick($event)\" ng-keydown=\"headerButtonKeyDown($event)\"></div>"
  );


  $templateCache.put('ui-grid/treeBaseExpandAllButtons',
    "<div class=\"ui-grid-tree-base-row-header-buttons\" tabindex=\"0\" ng-class=\"headerButtonClass()\" ng-click=\"headerButtonClick($event)\" ng-keydown=\"headerButtonKeyDown($event)\"></div>"
  );


  $templateCache.put('ui-grid/treeBaseHeaderCell',
    "<div><div class=\"ui-grid-cell-contents\" col-index=\"renderIndex\"><ui-grid-tree-base-expand-all-buttons ng-if=\"grid.options.enableExpandAll\"></ui-grid-tree-base-expand-all-buttons></div></div>"
  );


  $templateCache.put('ui-grid/treeBaseRowHeader',
    "<div class=\"ui-grid-cell-contents\"><ui-grid-tree-base-row-header-buttons></ui-grid-tree-base-row-header-buttons></div>"
  );


  $templateCache.put('ui-grid/treeBaseRowHeaderButtons',
    "<div class=\"ui-grid-tree-base-row-header-buttons\" ng-class=\"{'ui-grid-tree-base-header': row.treeLevel > -1 }\" tabindex=\"0\" ng-keydown=\"treeButtonKeyDown(row, $event)\" ng-click=\"treeButtonClick(row, $event)\"><i ng-class=\"treeButtonClass(row)\" ng-style=\"{'padding-left': grid.options.treeIndent * row.treeLevel + 'px'}\"></i> &nbsp;</div>"
  );


  $templateCache.put('ui-grid/cellTitleValidator',
    "<div class=\"ui-grid-cell-contents\" ng-class=\"{invalid:grid.validate.isInvalid(row.entity,col.colDef)}\" title=\"{{grid.validate.getTitleFormattedErrors(row.entity,col.colDef)}}\">{{COL_FIELD CUSTOM_FILTERS}}</div>"
  );


  $templateCache.put('ui-grid/cellTooltipValidator',
    "<div class=\"ui-grid-cell-contents\" ng-class=\"{invalid:grid.validate.isInvalid(row.entity,col.colDef)}\" tooltip-html-unsafe=\"{{grid.validate.getFormattedErrors(row.entity,col.colDef)}}\" tooltip-enable=\"grid.validate.isInvalid(row.entity,col.colDef)\" tooltip-append-to-body=\"true\" tooltip-placement=\"top\" title=\"TOOLTIP\">{{COL_FIELD CUSTOM_FILTERS}}</div>"
  );

}]);

var process = process || {env: {NODE_ENV: "development"}};
/**
 * AngularUI - The companion suite for AngularJS
 * @version v0.2.0 - 2012-08-06
 * @link http://angular-ui.github.com
 * @license MIT License, http://www.opensource.org/licenses/MIT
 */


angular.module('ui.config', []).value('ui.config', {});
angular.module('ui.filters', ['ui.config']);
angular.module('ui.directives', ['ui.config']);
angular.module('ui', ['ui.filters', 'ui.directives', 'ui.config']);


/**
 * Animates the injection of new DOM elements by simply creating the DOM with a class and then immediately removing it
 * Animations must be done using CSS3 transitions, but provide excellent flexibility
 *
 * @todo Add proper support for animating out
 * @param [options] {mixed} Can be an object with multiple options, or a string with the animation class
 *    class {string} the CSS class(es) to use. For example, 'ui-hide' might be an excellent alternative class.
 * @example <li ng-repeat="item in items" ui-animate=" 'ui-hide' ">{{item}}</li>
 */
angular.module('ui.directives').directive('uiAnimate', ['ui.config', '$timeout', function(uiConfig, $timeout) {
  var options = {};
  if (angular.isString(uiConfig.animate)) {
    options['class'] = uiConfig.animate;
  } else if (uiConfig.animate) {
    options = uiConfig.animate;
  }
  return {
    restrict: 'A', // supports using directive as element, attribute and class
    link: function($scope, element, attrs) {
      var opts = {};
      if (attrs.uiAnimate) {
        opts = $scope.$eval(attrs.uiAnimate);
        if (angular.isString(opts)) {
          opts = {'class':  opts};
        }
      }
      opts = angular.extend({'class': 'ui-animate'}, options, opts);

      element.addClass(opts['class']);
      $timeout(function(){
        element.removeClass(opts['class']);
      }, false);
    }
  };
}]);


/*global angular, CodeMirror, Error*/
/**
 * Binds a CodeMirror widget to a <textarea> element.
 */
angular.module('ui.directives').directive('uiCodemirror', ['ui.config', '$parse', function (uiConfig, $parse) {
    'use strict';

    uiConfig.codemirror = uiConfig.codemirror || {};
    return {
        require: 'ngModel',
        link: function (scope, elm, attrs, ngModel) {
            // Only works on textareas
            if ( !elm.is('textarea') ) {
                throw new Error('ui-codemirror can only be applied to a textarea element');
            }

            var codemirror;
            // This is the method that we use to get the value of the ui-codemirror attribute expression.
            var uiCodemirrorGet = $parse(attrs.uiCodemirror);
            // This method will be called whenever the code mirror widget content changes
            var onChangeHandler =  function (ed) {
                // We only update the model if the value has changed - this helps get around a little problem where $render triggers a change despite already being inside a $apply loop.
                var newValue = ed.getValue();
                if ( newValue !== ngModel.$viewValue ) {
                    ngModel.$setViewValue(newValue);
                    scope.$apply();
                }
            };
            // Create and wire up a new code mirror widget (unwiring a previous one if necessary)
            var updateCodeMirror = function(options) {
                // Merge together the options from the uiConfig and the attribute itself with the onChange event above.
                options = angular.extend({}, options, uiConfig.codemirror);

                // We actually want to run both handlers if the user has provided their own onChange handler.
                var userOnChange = options.onChange;
                if ( userOnChange ) {
                    options.onChange = function(ed) {
                        onChangeHandler(ed);
                        userOnChange(ed);
                    };
                } else {
                    options.onChange = onChangeHandler;
                }

                // If there is a codemirror widget for this element already then we need to unwire if first
                if ( codemirror ) {
                    codemirror.toTextArea();
                }
                // Create the new codemirror widget
                codemirror = CodeMirror.fromTextArea(elm[0], options);
            };

            // Initialize the code mirror widget
            updateCodeMirror(uiCodemirrorGet());

            // Now watch to see if the codemirror attribute gets updated
            scope.$watch(uiCodemirrorGet, updateCodeMirror, true);

            // CodeMirror expects a string, so make sure it gets one.
            // This does not change the model.
            ngModel.$formatters.push(function(value) {
                if(angular.isUndefined(value) || value === null) {
                    return '';
                }
                else if (angular.isObject(value) || angular.isArray(value)) {
                    throw new Error('ui-codemirror cannot use an object or an array as a model');
                }
                return value;
            });

            // Override the ngModelController $render method, which is what gets called when the model is updated.
            // This takes care of the synchronizing the codeMirror element with the underlying model, in the case that it is changed by something else.
            ngModel.$render = function() {
                codemirror.setValue(ngModel.$viewValue);
            };
       }
    };
}]);

/*
 Gives the ability to style currency based on its sign.
*/
  angular.module('ui.directives').directive('uiCurrency', ['ui.config','currencyFilter' , function(uiConfig, currencyFilter) {
	  var options = {
	      pos: 'ui-currency-pos',
	      neg: 'ui-currency-neg',
	      zero: 'ui-currency-zero'
	};
	if (uiConfig.currency) {
		angular.extend(options, uiConfig.currency);
	}
    return {
      restrict: 'EAC',
      require: 'ngModel',
      link: function(scope, element, attrs, controller) {
        var opts, // instance-specific options
          renderview,
          value;

        opts = angular.extend({}, options, scope.$eval(attrs.uiCurrency));

        renderview = function(viewvalue) {
          var num;
          num = viewvalue * 1;
          if (num > 0) {
            element.addClass(opts.pos);
          } else {
            element.removeClass(opts.pos);
          }
          if (num < 0) {
            element.addClass(opts.neg);
          } else {
            element.removeClass(opts.neg);
          }
          if (num === 0) {
            element.addClass(opts.zero);
          } else {
            element.removeClass(opts.zero);
          }
          if (viewvalue === '') {
            element.text('');
          } else {
            element.text(currencyFilter(num, opts.symbol));
          }
          return true;
        };

        controller.$render = function() {
          value = controller.$viewValue;
          element.val(value);
          renderview(value);
        };

      }
    };
  }]);

/*
 jQuery UI Datepicker plugin wrapper

 @param [ui-date] {object} Options to pass to $.fn.datepicker() merged onto ui.config
*/

angular.module('ui.directives').directive('uiDate', [
  'ui.config', '$timeout', function(uiConfig, $timeout) {
    var options;
    options = {};
    if (uiConfig.date != null) {
      angular.extend(options, uiConfig.date);
    }
    return {
      require: '?ngModel',
      link: function(scope, element, attrs, controller) {
        var opts, updateModel, usersOnSelectHandler;
        opts = angular.extend({}, options, scope.$eval(attrs.uiDate));
        /* If we have a controller (i.e. ngModelController) then wire it up
        */

        // If we have a controller (i.e. ngModelController) then wire it up
        if (controller) {
          // Override ngModelController's $setViewValue
          // so that we can ensure that a Date object is being pass down the $parsers
          // This is to handle the case where the user types directly into the input box
          var _$setViewValue = controller.$setViewValue;
          var settingValue = false;
          controller.$setViewValue = function () {
            if ( !settingValue ) {
              settingValue = true;
              element.datepicker("setDate", element.datepicker("getDate"));
              _$setViewValue.call(controller, element.datepicker("getDate"));
              $timeout(function() {settingValue = false;});
            }
          };
          if (opts.onSelect != null) {
            /* Caller has specified onSelect to call this as well as updating the model
            */

            usersOnSelectHandler = opts.onSelect;
            opts.onSelect = function(value, picker) {
              updateModel(value);
              return usersOnSelectHandler(value, picker);
            };
          } else {
            /* No onSelect already specified so just update the model
            */

            opts.onSelect = updateModel;
          }
          /* Update the date picker when the model changes
          */

          controller.$render = function() {
            var date;
            date = controller.$viewValue;
            if (!(date instanceof Date)) {
			  if (date != null) //HvT we want to allow null dates
				date = new Date(date);
            }
            return element.datepicker("setDate", date);
          };
        }
        /* Create the datepicker widget
        */

        return element.datepicker(opts); //Fix for issues post angular 1.7 upgrade
      }
    };
  }
]);


/**
 * General-purpose Event binding. Bind any event not natively supported by Angular
 * Pass an object with keynames for events to ui-event
 * Allows $event object and $params object to be passed
 *
 * @example <input ui-event="{ focus : 'counter++', blur : 'someCallback()' }">
 * @example <input ui-event="{ myCustomEvent : 'myEventHandler($event, $params)'}">
 *
 * @param ui-event {string|object literal} The event to bind to as a string or a hash of events with their callbacks
 */
angular.module('ui.directives').directive('uiEvent', ['$parse',
function($parse) {
	return function(scope, elm, attrs) {
		var events = scope.$eval(attrs.uiEvent);
		angular.forEach(events, function(uiEvent, eventName){
      var fn = $parse(uiEvent);
			elm.bind(eventName, function(evt) {
        var params = Array.prototype.slice.call(arguments);
        //Take out first paramater (event object);
        params = params.splice(1);
				scope.$apply(function() {
          fn(scope, {$event: evt, $params: params})
        });
			});
		});
	};
}]);

/*
 * Defines the ui-if tag. This removes/adds an element from the dom depending on a condition
 * Originally created by @tigbro, for the @jquery-mobile-angular-adapter
 * https://github.com/tigbro/jquery-mobile-angular-adapter
 */
angular.module('ui.directives').directive('uiIf', [function() {
  return {
    transclude: 'element',
    priority: 1000,
    terminal: true,
    restrict: 'A',
    compile: function(element, attr, linker) {
      return function(scope, iterStartElement, attr) {
        iterStartElement[0].doNotMove = true;
        var expression = attr.uiIf;
        var lastElement;
        var lastScope;
        scope.$watch(expression, function(newValue) {
          if (lastElement) {
            lastElement.remove();
            lastElement = null;
          }
          lastScope && lastScope.$destroy();
          if (newValue) {
            lastScope = scope.$new();
            linker(lastScope, function(clone) {
              lastElement = clone;
              iterStartElement.after(clone);
            });
          }
          // Note: need to be parent() as jquery cannot trigger events on comments
          // (angular creates a comment node when using transclusion, as ng-repeat does).
          iterStartElement.parent().trigger("$childrenChanged");
        });
      };
    }
  };
}]);

/**
 * General-purpose jQuery wrapper. Simply pass the plugin name as the expression.
 *
 * It is possible to specify a default set of parameters for each jQuery plugin.
 * Under the jq key, namespace each plugin by that which will be passed to ui-jq.
 * Unfortunately, at this time you can only pre-define the first parameter.
 * @example { jq : { datepicker : { showOn:'click' } } }
 *
 * @param ui-jq {string} The $elm.[pluginName]() to call.
 * @param [ui-options] {mixed} Expression to be evaluated and passed as options to the function
 *   	Multiple parameters can be separated by commas
 *    Set {ngChange:false} to disable passthrough support for change events ( since angular watches 'input' events, not 'change' events )
 *
 * @example <input ui-jq="datepicker" ui-options="{showOn:'click'},secondParameter,thirdParameter">
 */
angular.module('ui.directives').directive('uiJq', ['ui.config', function(uiConfig) {
	return {
		restrict: 'A',
		compile: function(tElm, tAttrs) {
			if (!angular.isFunction(tElm[tAttrs.uiJq])) {
				throw new Error('ui-jq: The "'+tAttrs.uiJq+'" function does not exist');
				return;
			}
			var options = uiConfig['jq'] && uiConfig['jq'][tAttrs.uiJq];
			return function (scope, elm, attrs) {
				var linkOptions = [], ngChange = 'change';

				if (attrs.uiOptions) {
					linkOptions = scope.$eval('['+attrs.uiOptions+']');
					if (angular.isObject(options) && angular.isObject(linkOptions[0])) {
						linkOptions[0] = angular.extend(options, linkOptions[0]);
					}
				} else if (options) {
					linkOptions = [options];
				}
				if (attrs.ngModel && elm.is('select,input,textarea')) {
					if (linkOptions && angular.isObject(linkOptions[0]) && linkOptions[0].ngChange !== undefined) {
						ngChange = linkOptions[0].ngChange;
					}
					ngChange && elm.on(ngChange, function(){
						elm.trigger('input');
					});
				}
				elm[attrs.uiJq].apply(elm, linkOptions);
			};
		}
	};
}]);


/**
 * Bind one or more handlers to particular keys or their combination
 * @param hash {mixed} keyBindings Can be an object or string where keybinding expression of keys or keys combinations and AngularJS Exspressions are set. Object syntax: "{ keys1: expression1 [, keys2: expression2 [ , ... ]]}". String syntax: ""expression1 on keys1 [ and expression2 on keys2 [ and ... ]]"". Expression is an AngularJS Expression, and key(s) are dash-separated combinations of keys and modifiers (one or many, if any. Order does not matter). Supported modifiers are 'ctrl', 'shift', 'alt' and key can be used either via its keyCode (13 for Return) or name. Named keys are 'backspace', 'tab', 'enter', 'esc', 'space', 'pageup', 'pagedown', 'end', 'home', 'left', 'up', 'right', 'down', 'insert', 'delete'.
 * @example <input ui-keypress="{enter:'x = 1', 'ctrl-shift-space':'foo()', 'shift-13':'bar()'}" /> <input ui-keypress="foo = 2 on ctrl-13 and bar('hello') on shift-esc" />
 **/
angular.module('ui.directives').directive('uiKeypress', ['$parse', function($parse){
  return {
    link: function(scope, elm, attrs) {
      var keysByCode = {
        8:  'backspace',
        9:  'tab',
        13: 'enter',
        27: 'esc',
        32: 'space',
        33: 'pageup',
        34: 'pagedown',
        35: 'end',
        36: 'home',
        37: 'left',
        38: 'up',
        39: 'right',
        40: 'down',
        45: 'insert',
        46: 'delete'
      };

      var params, paramsParsed, expression, keys, combinations = [];
      try {
        params = scope.$eval(attrs.uiKeypress);
        paramsParsed = true;
      } catch (error) {
        params = attrs.uiKeypress.split(/\s+and\s+/i);
        paramsParsed = false;
      }

      // Prepare combinations for simple checking
      angular.forEach(params, function(v, k) {
        var combination = {};
        if(paramsParsed) {
          // An object passed
          combination.expression = $parse(v);
          combination.keys = k;
        } else {
          // A string passed
          v = v.split(/\s+on\s+/i);
          combination.expression = $parse(v[0]);
          combination.keys = v[1];
        }

        keys = {};
        angular.forEach(combination.keys.split('-'), function(value) {
          keys[value] = true;
        });
        combination.keys = keys;
        combinations.push(combination);
      });

      // Check only mathcing of pressed keys one of the conditions
      elm.bind('keydown', function(event) {
        // No need to do that inside the cycle
        var altPressed   = event.metaKey || event.altKey;
        var ctrlPressed  = event.ctrlKey;
        var shiftPressed = event.shiftKey;

        // Iterate over prepared combinations
        angular.forEach(combinations, function(combination) {

          var mainKeyPressed = (combination.keys[keysByCode[event.keyCode]] || combination.keys[event.keyCode.toString()]) || false;

          var altRequired   =  combination.keys.alt || false;
          var ctrlRequired  =  combination.keys.ctrl || false;
          var shiftRequired =  combination.keys.shift || false;

          if( mainKeyPressed &&
              ( altRequired   == altPressed   ) &&
              ( ctrlRequired  == ctrlPressed  ) &&
              ( shiftRequired == shiftPressed )
            ) {
            // Run the function
            scope.$apply(function(){
              combination.expression(scope, { '$event' : event });
            });
          }
        });
      });
    }
  };
}]);

(function() {
  var app = angular.module('ui.directives');

  //Setup map events from a google map object to trigger on a given element too,
  //then we just use ui-event to catch events from an element
  function bindMapEvents(scope, eventsStr, googleObject, element) {
    angular.forEach(eventsStr.split(' '), function(eventName) {
      var $event = { type: 'map-'+eventName };
      google.maps.event.addListener(googleObject, eventName, function(evt) {
        element.trigger(angular.extend({}, $event, evt));
        //We create an $apply if it isn't happening. we need better support for this
        //We don't want to use timeout because tons of these events fire at once,
        //and we only need one $apply
        if (!scope.$$phase) scope.$apply();
      });
    });
  }

  app.directive('uiMap',
  ['ui.config', '$parse', function(uiConfig, $parse) {

    var mapEvents = 'bounds_changed center_changed click dblclick drag dragend '+
    'dragstart heading_changed idle maptypeid_changed mousemove mouseout '+
    'mouseover projection_changed resize rightclick tilesloaded tilt_changed '+
    'zoom_changed';
    var options = uiConfig.map || {};

    return {
      restrict: 'A',
      //doesn't work as E for unknown reason
      link: function(scope, elm, attrs) {
        var opts = angular.extend({}, options, scope.$eval(attrs.uiOptions));
        var map = new google.maps.Map(elm[0], opts);
        var model = $parse(attrs.uiMap);

        //Set scope variable for the map
        model.assign(scope, map);

        bindMapEvents(scope, mapEvents, map, elm);
      }
    };
  }]);

  app.directive('uiMapInfoWindow',
  ['ui.config', '$parse', '$compile', function(uiConfig, $parse, $compile) {

    var infoWindowEvents = 'closeclick content_change domready '+
    'position_changed zindex_changed';
    var options = uiConfig.mapInfoWindow || {};

    return {
      link: function(scope, elm, attrs) {
        var opts = angular.extend({}, options, scope.$eval(attrs.uiOptions));
        opts.content = elm[0];
        var model = $parse(attrs.uiMapInfoWindow);
        var infoWindow = model(scope);

        if (!infoWindow) {
          infoWindow = new google.maps.InfoWindow(opts);
          model.assign(scope, infoWindow);
        }

        bindMapEvents(scope, infoWindowEvents, infoWindow, elm);

        /* The info window's contents dont' need to be on the dom anymore,
         google maps has them stored.  So we just replace the infowindow element
         with an empty div. (we don't just straight remove it from the dom because
         straight removing things from the dom can mess up angular) */
        elm.replaceWith('<div></div>');

        //Decorate infoWindow.open to $compile contents before opening
        var _open = infoWindow.open;
        infoWindow.open = function open(a1,a2,a3,a4,a5,a6) {
          $compile(elm.contents())(scope);
          _open.call(infoWindow, a1,a2,a3,a4,a5,a6);
        };
      }
    };
  }]);

  /*
  * Map overlay directives all work the same. Take map marker for example
  * <ui-map-marker="myMarker"> will $watch 'myMarker' and each time it changes,
  * it will hook up myMarker's events to the directive dom element.  Then
  * ui-event will be able to catch all of myMarker's events. Super simple.
  */
  function mapOverlayDirective(directiveName, events) {
    app.directive(directiveName, [function() {
      return {
        restrict: 'A',
        link: function(scope, elm, attrs) {
          scope.$watch(attrs[directiveName], function(newObject) {
            bindMapEvents(scope, events, newObject, elm);
          });
        }
      };
    }]);
  };

  mapOverlayDirective('uiMapMarker',
    'animation_changed click clickable_changed cursor_changed '+
    'dblclick drag dragend draggable_changed dragstart flat_changed icon_changed '+
    'mousedown mouseout mouseover mouseup position_changed rightclick '+
    'shadow_changed shape_changed title_changed visible_changed zindex_changed');

  mapOverlayDirective('uiMapPolyline',
    'click dblclick mousedown mousemove mouseout mouseover mouseup rightclick');

  mapOverlayDirective('uiMapPolygon',
    'click dblclick mousedown mousemove mouseout mouseover mouseup rightclick');

  mapOverlayDirective('uiMapRectangle',
    'bounds_changed click dblclick mousedown mousemove mouseout mouseover '+
    'mouseup rightclick');

  mapOverlayDirective('uiMapCircle',
    'center_changed click dblclick mousedown mousemove '+
    'mouseout mouseover mouseup radius_changed rightclick');

  mapOverlayDirective('uiMapGroundOverlay',
    'click dblclick');

})();
/*
 Attaches jquery-ui input mask onto input element
*/

angular.module('ui.directives').directive('uiMask', [
  function() {
    return {
      require: 'ngModel',
      scope: {
        uiMask: '='
      },
      link: function($scope, element, attrs, controller) {
        /* We override the render method to run the jQuery mask plugin
        */
        controller.$render = function() {
          var value;
          value = controller.$viewValue || '';
          element.val(value);
          return element.mask($scope.uiMask);
        };
        /* Add a parser that extracts the masked value into the model but only if the mask is valid
        */

        controller.$parsers.push(function(value) {
          var isValid;
          isValid = element.data('mask-isvalid');
          controller.$setValidity('mask', isValid);
          return element.mask();
        });
        /* When keyup, update the viewvalue
        */

        return element.bind('keyup', function() {
          return $scope.$apply(function() {
            return controller.$setViewValue(element.mask());
          });
        });
      }
    };
  }
]);

angular.module('ui.directives')
.directive('uiModal', ['$timeout', function($timeout) {
  return {
    restrict: 'EAC',
    require: 'ngModel',
    link: function(scope, elm, attrs, model) {
      //helper so you don't have to type class="modal hide"
      elm.addClass('modal hide');
      scope.$watch(attrs.ngModel, function(value) {
        elm.modal(value && 'show' || 'hide');
      });
      elm.on('show.ui', function() {
        $timeout(function() {
          model.$setViewValue(true);
        });
      });
      elm.on('hide.ui', function() {
        $timeout(function() {
          model.$setViewValue(false);
        });
      });
    }
  };
}]);

/**
 * Add a clear button to form inputs to reset their value
 */
angular.module('ui.directives').directive('uiReset', ['$parse', function($parse) {
  return {
    require:'ngModel',
    link: function(scope, elm, attrs, ctrl) {
  		elm.wrap('<span class="ui-resetwrap" />').after('<a class="ui-reset" />').next().click(function(e){
  			e.preventDefault();
  			scope.$apply(function(){
    			// This lets you SET the value of the 'parsed' model
    			ctrl.$setViewValue(null);
  			});
  		});
  	}
  };
}]);

/*global angular, $*/
/**
 * Adds a 'ui-scrollfix' class to the element when the page scrolls past it's position.
 * @param [offset] {int} optional Y-offset to override the detected offset.
 *   Takes 300 (absolute) or -300 or +300 (relative to detected)
 */
angular.module('ui.directives').directive('uiScrollfix', ['$window', function ($window) {
    'use strict';
    return {
        link: function (scope, elm, attrs) {
            var top = elm.offset().top;
            if (!attrs.uiScrollfix) {
                attrs.uiScrollfix = top;
            } else {
                // chartAt is generally faster than indexOf: http://jsperf.com/indexof-vs-chartat
                if (attrs.uiScrollfix.charAt(0) === '-') {
                    attrs.uiScrollfix = top - attrs.uiScrollfix.substr(1);
                } else if (attrs.uiScrollfix.charAt(0) === '+') {
                    attrs.uiScrollfix = top + parseFloat(attrs.uiScrollfix.substr(1));
                }
            }
            angular.element($window).on('scroll.ui-scrollfix', function () {
                // if pageYOffset is defined use it, otherwise use other crap for IE
                var offset;
                if (angular.isDefined($window.pageYOffset)) {
                    offset = $window.pageYOffset;
                } else {
                    var iebody = (document.compatMode && document.compatMode !== "BackCompat") ? document.documentElement : document.body;
                    offset = iebody.scrollTop;
                }
                if (!elm.hasClass('ui-scrollfix') && offset > attrs.uiScrollfix) {
                    elm.addClass('ui-scrollfix');
                } else if (elm.hasClass('ui-scrollfix') && offset < attrs.uiScrollfix) {
                    elm.removeClass('ui-scrollfix');
                }
            });
        }
    };
}]);


/**
 * Enhanced Select2 Dropmenus
 *
 * @AJAX Mode - When in this mode, your value will be an object (or array of objects) of the data used by Select2
 *   	This change is so that you do not have to do an additional query yourself on top of Select2's own query
 * @params [options] {object} The configuration options passed to $.fn.select2(). Refer to the documentation
 */
angular.module('ui.directives').directive('uiSelect2', ['ui.config', '$http', function(uiConfig, $http){
	var options = {};
	if (uiConfig.select2) {
		angular.extend(options, uiConfig.select2);
	}
	return {
		require: '?ngModel',
		compile: function(tElm, tAttrs) {
			var watch,
			repeatOption,
			isSelect = tElm.is('select'),
			isMultiple = (tAttrs.multiple !== undefined);

			// Enable watching of the options dataset if in use
			if (tElm.is('select')) {
				repeatOption = tElm.find('option[ng-repeat]');
				if (repeatOption.length) {
					watch = repeatOption.attr('ng-repeat').split(' ').pop();
				}
			}

			return function(scope, elm, attrs, controller) {
				// instance-specific options
				var opts = angular.extend({}, options, scope.$eval(attrs.uiSelect2));

				if (isSelect) {
					// Use <select multiple> instead
					delete opts.multiple;
					delete opts.initSelection;
				} else if (isMultiple) {
					opts.multiple = true;
				}

				if (controller) {
					// Watch the model for programmatic changes
					controller.$render = function() {
						if (isSelect) {
							elm.select2('val', controller.$modelValue);
						} else {
							if (isMultiple && !controller.$modelValue) {
								elm.select2('data', []);
							} else {
								elm.select2('data', controller.$modelValue);
							}
						}
					};


					// Watch the options dataset for changes
					if (watch) {
						scope.$watch(watch, function(newVal, oldVal, scope){
							if (!newVal) return;
							// Delayed so that the options have time to be rendered
							setTimeout(function(){
								elm.select2('val', controller.$viewValue);
								// Refresh angular to remove the superfluous option
								elm.trigger('change');
							});
						});
					}

					if (!isSelect) {
						// Set the view and model value and update the angular template manually for the ajax/multiple select2.
						elm.bind("change", function(){
							scope.$apply(function(){
								controller.$setViewValue(elm.select2('data'));
							});
						});

						if (opts.initSelection) {
							var initSelection = opts.initSelection;
							opts.initSelection = function(element, callback) {
								initSelection(element, function(value){
									controller.$setViewValue(value);
									callback(value);
								});
							}
						}
					}
				}

				attrs.$observe('disabled', function(value){
					elm.select2(value && 'disable' || 'enable');
				});

				// Set initial value since Angular doesn't
				elm.val(scope.$eval(attrs.ngModel));

				// Initialize the plugin late so that the injected DOM does not disrupt the template compiler
				setTimeout(function(){
					elm.select2(opts);
				});
			}
		}
	};
}]);


/**
 * uiShow Directive
 *
 * Adds a 'ui-show' class to the element instead of display:block
 * Created to allow tighter control  of CSS without bulkier directives
 *
 * @param expression {boolean} evaluated expression to determine if the class should be added
 */
angular.module('ui.directives').directive('uiShow', [function() {
	return function(scope, elm, attrs) {
		scope.$watch(attrs.uiShow, function(newVal, oldVal){
			if (newVal) {
				elm.addClass('ui-show');
			} else {
				elm.removeClass('ui-show');
			}
		});
	};
}])

/**
 * uiHide Directive
 *
 * Adds a 'ui-hide' class to the element instead of display:block
 * Created to allow tighter control  of CSS without bulkier directives
 *
 * @param expression {boolean} evaluated expression to determine if the class should be added
 */
.directive('uiHide', [function() {
	return function(scope, elm, attrs) {
		scope.$watch(attrs.uiHide, function(newVal, oldVal){
			if (newVal) {
				elm.addClass('ui-hide');
			} else {
				elm.removeClass('ui-hide');
			}
		});
	};
}])

/**
 * uiToggle Directive
 *
 * Adds a class 'ui-show' if true, and a 'ui-hide' if false to the element instead of display:block/display:none
 * Created to allow tighter control  of CSS without bulkier directives. This also allows you to override the
 * default visibility of the element using either class.
 *
 * @param expression {boolean} evaluated expression to determine if the class should be added
 */
.directive('uiToggle', [function() {
	return function(scope, elm, attrs) {
		scope.$watch(attrs.uiToggle, function(newVal, oldVal){
			if (newVal) {
				elm.removeClass('ui-hide').addClass('ui-show');
			} else {
				elm.removeClass('ui-show').addClass('ui-hide');
			}
		});
	};
}]);

/*
 jQuery UI Sortable plugin wrapper

 @param [ui-sortable] {object} Options to pass to $.fn.sortable() merged onto ui.config
*/

angular.module('ui.directives').directive('uiSortable', [
  'ui.config', function(uiConfig) {
    var options;
    options = {};
    if (uiConfig.sortable != null) {
      angular.extend(options, uiConfig.sortable);
    }
    return {
      require: '?ngModel',
      link: function(scope, element, attrs, ngModel) {
        var onStart, onUpdate, opts, _start, _update;
        opts = angular.extend({}, options, scope.$eval(attrs.uiOptions));
        if (ngModel != null) {
          onStart = function(e, ui) {
            return ui.item.data('ui-sortable-start', ui.item.index());
          };
          onUpdate = function(e, ui) {
            var end, start;
            start = ui.item.data('ui-sortable-start');
            end = ui.item.index();
            ngModel.$modelValue.splice(end, 0, ngModel.$modelValue.splice(start, 1)[0]);
            return scope.$apply();
          };
          _start = opts.start;
          opts.start = function(e, ui) {
            onStart(e, ui);
            if (typeof _start === "function") {
              _start(e, ui);
            }
            return scope.$apply();
          };
          _update = opts.update;
          opts.update = function(e, ui) {
            onUpdate(e, ui);
            if (typeof _update === "function") {
              _update(e, ui);
            }
            return scope.$apply();
          };
        }
        return element.sortable(opts);
      }
    };
  }
]);


/**
 * Binds a TinyMCE widget to <textarea> elements.
 */
angular.module('ui.directives').directive('uiTinymce', ['ui.config', function(uiConfig){
	uiConfig.tinymce = uiConfig.tinymce || {};
	return {
		require: 'ngModel',
		link: function(scope, elm, attrs, ngModel) {
			var expression,
			  options = {
				// Update model on button click
				onchange_callback: function(inst) {
					if (inst.isDirty()) {
						inst.save();
						ngModel.$setViewValue(elm.val());
                           scope.$apply();
					}
				},
				// Update model on keypress
				handle_event_callback: function(e) {
					if (this.isDirty()) {
						this.save();
						ngModel.$setViewValue(elm.val());
                           scope.$apply();
					}
					return true; // Continue handling
				},
				// Update model when calling setContent (such as from the source editor popup)
				setup : function(ed) {
					ed.onSetContent.add(function(ed, o) {
						if (ed.isDirty()) {
							ed.save();
							ngModel.$setViewValue(elm.val());
							scope.$apply();
						}
					});
				}
			};
			if (attrs.uiTinymce) {
				expression = scope.$eval(attrs.uiTinymce);
			} else {
				expression = {};
			}
			angular.extend(options, uiConfig.tinymce, expression);
			setTimeout(function(){
				elm.tinymce(options);
			});
		}
	};
}]);

/**
 * General-purpose validator for ngModel.
 * angular.js comes with several built-in validation mechanism for input fields (ngRequired, ngPattern etc.) but using
 * an arbitrary validation function requires creation of a custom formatters and / or parsers.
 * The ui-validate directive makes it easy to use any function(s) defined in scope as a validator function(s).
 * A validator function will trigger validation on both model and input changes.
 *
 * @example <input ui-validate="myValidatorFunction">
 * @example <input ui-validate="{foo : validateFoo, bar : validateBar}">
 *
 * @param ui-validate {string|object literal} If strings is passed it should be a scope's function to be used as a validator.
 * If an object literal is passed a key denotes a validation error key while a value should be a validator function.
 * In both cases validator function should take a value to validate as its argument and should return true/false indicating a validation result.
 */
angular.module('ui.directives').directive('uiValidate', function () {

  return {
    restrict:'A',
    require:'ngModel',
    link:function (scope, elm, attrs, ctrl) {

      var validateFn, validateExpr = attrs.uiValidate;

      validateExpr = scope.$eval(validateExpr);
      if (!validateExpr) {
        return;
      }

      if (angular.isFunction(validateExpr)) {
        validateExpr = { validator: validateExpr };
      }

      angular.forEach(validateExpr, function(validatorFn, key){
        validateFn = function (valueToValidate) {
          if (validatorFn(valueToValidate)) {
            ctrl.$setValidity(key, true);
            return valueToValidate;
          } else {
            ctrl.$setValidity(key, false);
            return undefined;
          }
        };
        ctrl.$formatters.push(validateFn);
        ctrl.$parsers.push(validateFn);
      });
    }
  };
});

/**
 * Wraps the
 * @param text {string} haystack to search through
 * @param search {string} needle to search for
 * @param [caseSensitive] {boolean} optional boolean to use case-sensitive searching
 */
angular.module('ui.filters').filter('highlight', function() {
	return function(text, search, caseSensitive) {
		if (search || angular.isNumber(search)) {
			text = text.toString();
			search = search.toString();
			if (caseSensitive) {
				return text.split(search).join('<span class="ui-match">'+search+'</span>');
			} else {
				return text.replace(new RegExp(search, 'gi'), '<span class="ui-match">$&</span>');
			}
		} else {
			return text;
		}
	};
});


/**
 * Converts variable-esque naming conventions to something presentational, capitalized words separated by space.
 * @param {String} value The value to be parsed and prettified.
 * @param {String} [inflector] The inflector to use. Default: humanize.
 * @return {String}
 * @example {{ 'Here Is my_phoneNumber' | inflector:'humanize' }} => Here Is My Phone Number
 *          {{ 'Here Is my_phoneNumber' | inflector:'underscore' }} => here_is_my_phone_number
 *          {{ 'Here Is my_phoneNumber' | inflector:'variable' }} => hereIsMyPhoneNumber
 */
angular.module('ui.filters').filter('inflector', function () {
	function ucwords(text) {
		return text.replace(/^([a-z])|\s+([a-z])/g, function ($1) {
			return $1.toUpperCase();
		});
	}
	function breakup(text, separator) {
		return text.replace(/[A-Z]/g, function(match){
			return separator + match;
		});
	}
	var inflectors = {
		humanize: function(value) {
			return ucwords(breakup(value, ' ').split('_').join(' '));
		},
		underscore: function(value) {
			return value.substr(0,1).toLowerCase() + breakup(value.substr(1), '_').toLowerCase().split(' ').join('_');
		},
		variable: function(value) {
			value = value.substr(0,1).toLowerCase() + ucwords(value.split('_').join(' ')).substr(1).split(' ').join('');
			return value;
		}
	};

	return function (text, inflector, separator) {
		if (inflector !== false && angular.isString(text)) {
			inflector = inflector || 'humanize';
			return inflectors[inflector](text);
		} else {
			return text;
		}
	};
});


/**
 * Filters out all duplicate items from an array by checking the specified key
 * @param [key] {string} the name of the attribute of each object to compare for uniqueness
	if the key is empty, the entire object will be compared
	if the key === false then no filtering will be performed
 * @return {array}
 */
angular.module('ui.filters').filter('unique', function() {

	return function(items, filterOn) {

    if (filterOn===false){
      return items;
    }

		if ((filterOn || angular.isUndefined(filterOn))&& angular.isArray(items)) {
			var hashCheck = {}, newItems = [];

      var extractValueToCompare = function(item) {
        if (angular.isObject(item) && angular.isString(filterOn)) {
          return item[filterOn];
        } else {
          return item;
        }
      };

      angular.forEach(items, function (item) {
        var valueToCheck, isDuplicate = false;

        for (var i = 0; i < newItems.length; i++) {
          if (angular.equals(extractValueToCompare(newItems[i]), extractValueToCompare(item))) {
            isDuplicate = true;
            break;
          }
        }
        if (!isDuplicate){
          newItems.push(item);
        }

      });
      items = newItems;
		}
		return items;
	};
});

var process = process || {env: {NODE_ENV: "development"}};
/******************************************************************************
 *  Copyright 2013-2020 Ellucian Company L.P. and its affiliates.             *
 ******************************************************************************/
'use strict';

/* Directives */
/* added for page builder runtime */
var pbRunModule = angular.module('pbrun.directives', []);


//Better number directive
//With minor modifications from:
//http://www.anicehumble.com/2013/07/seamless-numeric-localization-with-angularjs.html
pbRunModule.directive('pbNumber', ['$filter', '$locale', function($filter, $locale) {
    return {
        require: '^?ngModel',
        //scope: { ngModel: '=' },
        link: function(scope, element, attr, ngModel) {
            var decN = scope.$eval(attr.fractionDigits); // this is the fraction-digits attribute
            // http://stackoverflow.com/questions/10454518/javascript-how-to-retrieve-the-number-of-decimals-of-a-string-number
            //noinspection JSUnusedLocalSymbols
            function theDecimalPlaces(num) {
                var match = (''+num).match(/(?:\.(\d+))?(?:[eE]([+-]?\d+))?$/);
                if (!match) { return 0; }
                return Math.max(
                    0,
                    // Number of digits right of decimal point.
                    (match[1] ? match[1].length : 0)
                        // Adjust for scientific notation.
                        - (match[2] ? +match[2] : 0));
            }

            function fromUser(text) {
                var GROUP_REGEXP = new RegExp("\\"+$locale.NUMBER_FORMATS.GROUP_SEP,"g");
                var x = text.replace(GROUP_REGEXP, '');
                x = x.replace($locale.NUMBER_FORMATS.DECIMAL_SEP, '.');
                x=Number(x);
                if ( isNaN(x) ) {
                    ngModel.$setValidity('float', false);
                    x=undefined;
                }  else {
                    ngModel.$setValidity('float', true);
                }
                if (x>Number(attr.max) )  {
                    ngModel.$setValidity('max', false);
                    x=undefined
                } else {
                    ngModel.$setValidity('max', true);
                }
                if (x<Number(attr.min) ) {
                    ngModel.$setValidity('min', false);
                    x=undefined
                } else {
                    ngModel.$setValidity('min', true);
                }
                return x;
                // return a model-centric value from user input
            }

            function toUser(n) {
                return $filter('number')(n, decN); // locale-aware formatting
            }

            if(ngModel){
                ngModel.$parsers.unshift(fromUser);
                ngModel.$formatters.unshift(toUser);
            }


            element.bind('blur', function() {
                var v=ngModel.$modelValue;
                if (!isNaN(v)) {
                    element.val(toUser(ngModel.$modelValue));
                }
            });
            /*
            element.bind('focus', function() {
                var n = ngModel.$modelValue;
                var formattedN = $filter('number')(n, theDecimalPlaces(n));
                element.val(formattedN);
            });
            */
        } // link
    }; // return
}]); // module


pbRunModule.directive('numberToString', function () {
    return {
        require: 'ngModel',
        link: function (scope, element, attrs, ngModel) {
            ngModel.$parsers.push(function (value) {
                return value === undefined || value === null ? value : value + '';
            });
            ngModel.$formatters.push(function (value) {
                return value === undefined || value === null ? value : value + '';
            });
        }
    }
});

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2019-2024 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

(function () {
    'use strict';

    angular.module('modalPopup',['xe-ui-components'])
        .directive('dataGridModalPopup', function () {
            return {
                restrict: 'C',
                link: function (scope, ele) {
                    ele.on('keydown', function (event) {
                        var currentPagescope = angular.element(document.getElementById('popupContainerDiv')).scope();
                        if((event.keyCode === 27 ||  (document.activeElement.className === "xe-popup-close" && event.keyCode === 13) ) && currentPagescope) {
                            angular.element("#" + currentPagescope.inputTypeFieldID).trigger('focus');
                        }
                        if(event.keyCode === 13 && document.activeElement.className === 'width-animate ng-scope sortable focus-ring'){
                            angular.element('#goToPageButton').trigger('click');
                            event.preventDefault();
                            event.stopPropagation();
                        }

                    });
                }
            }
        })
        .controller("nameModalPopupCtrl", ["$scope","$timeout","$http", "$q", "$filter",  function($scope, $timeout,$http, $q, $filter) {
            $scope.rtl = "xe-ui-components.min";
            $scope.rtlText = "Switch to RTL";
            $scope.urlTest = getContextPath()+/internalPb/;
            $scope.content = {};
            $scope.resultsFound = 0;
            $scope.params = {};
            $scope.serviceNameType = "";
            $scope.nameHeader = "";
            $scope.excludePage =" ";
            $scope.inputTypeFieldID="";
            $scope.isPbPage = "";


            function getContextPath() {
                return window.location.pathname.substring(0, window.location.pathname.indexOf("/",2));
            };

            $scope.nameToggleModal = function(dataFetch) {
                if(dataFetch){
                    $scope.pageSearchConfig.searchString = '';
                    $scope.virtualDomainSearchConfig.searchString = '';
                    $scope.cssSearchConfig.searchString = '';
                    $scope.getData({excludePage:$scope.excludePage,pageSize:5,offset:0,searchString:''});
                }
                $scope.modalShown = true;
            };

            $scope.draggableColumnNames = [$scope.nameHeader, 'dateCreated', 'lastUpdated'];

           /* $scope.mobileConfig = {
                constantName : 2,
                dateCreated: 2,
                lastUpdated: 2
            };*/

            $scope.paginationConfig = {
                pageLengths : [10, 25, 50, 100],
                offset : 5,
                recordsFoundLabel : $.i18n.prop("nameDataTable.column.common.pagination.recordsFoundLabel"),
                pageTitle: "Go To Page (End)",
                pageLabel: $.i18n.prop("nameDataTable.column.common.pagination.pageLabel"),
                pageAriaLabel: "Go To Page. Short cut is End",
                ofLabel: $.i18n.prop("nameDataTable.column.common.pagination.ofLabel"),
                perPageLabel: $.i18n.prop("nameDataTable.column.common.pagination.perPageLabel")
            };

            $scope.pageSearchConfig = {
                id: 'nameDataTableSearch',
                title: 'Search (Alt+Y)',
                ariaLabel: 'Search for any Name',
                delay: 300,
                searchString : '',
                placeholder : $.i18n.prop("nameDataTable.popup.page.search.placeholder"),
                maxlength: 250,
                minimumCharacters : 1
            };

            $scope.virtualDomainSearchConfig = {
                id: 'nameDataTableSearch',
                title: 'Search (Alt+Y)',
                ariaLabel: 'Search for any Name',
                delay: 300,
                searchString : '',
                placeholder : $.i18n.prop("nameDataTable.popup.virtualDomain.search.placeholder"),
                maxlength: 250,
                minimumCharacters : 1
            };

            $scope.cssSearchConfig = {
                id: 'nameDataTableSearch',
                title: 'Search (Alt+Y)',
                ariaLabel: 'Search for any Name',
                delay: 300,
                searchString : '',
                placeholder : $.i18n.prop("nameDataTable.popup.stylesheet.search.placeholder"),
                maxlength: 250,
                minimumCharacters : 1
            };

            $scope.getData = function(query) {
                var deferred = $q.defer(),
                    url = "";
                    query.max = query.pageSize ? query.pageSize : 5;
                url = getContextPath()+/internalPb/+$scope.serviceNameType+"/getGridData"
                    + "?getGridData=true&"
                    + "excludePage="+$scope.excludePage+"&"
                    + "searchString=" + (query.searchString ? query.searchString : "")
                    + "&sortColumnName=" + (query.sortColumnName ? query.sortColumnName : "")
                    + "&ascending=" + query.ascending
                    + "&offset=" + (query.offset ? query.offset : "")
                    + "&max=" + (query.max ? query.max : "");

                $http.get(url)
                    .then(function(response) {
                        deferred.resolve(response.data);
                        $scope.postFetch({response: response.data, oldResult: $scope.content});
                        $scope.content = response.data.result;
                        $scope.resultsFound = response.data.length;
                        $timeout(function () {
                            $scope.setFocusOnLoad();
                            angular.element('#nameDataTableSearch').attr('aria-label','Search for any Name');
                            angular.element('#nameDataTableSearch').trigger('focus');
                        },0);
                    })
                    .catch(function(response) {
                        deferred.reject(response.data);
                    });

                return deferred.promise;
            };
            // Data to populate as part of data table header
            $scope.pageColumns = [
                {position: {desktop: 1, mobile: 1}, name: 'constantName', title: $.i18n.prop("nameDataTable.column.page.name.heading"), options: {visible: true, sortable:true}},
                {position: {desktop: 2, mobile: 2}, name: 'dateCreated', title: $.i18n.prop("nameDataTable.column.common.createDate.heading"), options: {visible: true, sortable: true}},
                {position: {desktop: 3, mobile: 3}, name: 'lastUpdated', title: $.i18n.prop("nameDataTable.column.common.modifiedDate.heading"), options: {visible: true, sortable:true}}
            ];

            $scope.virtualDomainColumns = [
                {position: {desktop: 1, mobile: 1}, name: 'serviceName', title: $.i18n.prop("nameDataTable.column.virtualDomain.name.heading"), options: {visible: true, sortable:true}},
                {position: {desktop: 2, mobile: 2}, name: 'dateCreated', title: $.i18n.prop("nameDataTable.column.common.createDate.heading"), options: {visible: true, sortable: true}},
                {position: {desktop: 3, mobile: 3}, name: 'lastUpdated', title: $.i18n.prop("nameDataTable.column.common.modifiedDate.heading"), options: {visible: true, sortable:true}}
            ];

            $scope.cssColumns = [
                {position: {desktop: 1, mobile: 1}, name: 'constantName', title: $.i18n.prop("nameDataTable.column.stylesheet.name.heading"), options: {visible: true, sortable:true}},
                {position: {desktop: 2, mobile: 2}, name: 'dateCreated', title: $.i18n.prop("nameDataTable.column.common.createDate.heading"), options: {visible: true, sortable: true}},
                {position: {desktop: 3, mobile: 3}, name: 'lastUpdated', title: $.i18n.prop("nameDataTable.column.common.modifiedDate.heading"), options: {visible: true, sortable:true}}
            ];

            $scope.toggleRTL = function() {
                if($scope.rtl === "xe-ui-components.min") {
                    $scope.rtl = "xe-ui-components-rtl";
                    $scope.rtlText = "Switch to LTR";
                } else {
                    $scope.rtl = "xe-ui-components.min";
                    $scope.rtlText = "Switch to RTL";
                }
            };

            $scope.refreshData = function() {
                $scope.refreshGrid(true);
            };

            $scope.model = {allRowsSelected: false};

            $scope.postFetch = function(response, oldResult) {
               // rows = response.result;
            };

            $scope.isResponseEmpty = function(){
                return $scope.resultsFound == 0;
            }
            $scope.goToPage = function () {
                var name = "";
                var value= "";
                $scope.modalShown = false;
                var element =  angular.element('tr.active-row');
                var nameIndex = element.index();
                if(nameIndex == -1){
                    nameIndex = 0;
                }

                if(nameIndex != -1 && !$scope.isResponseEmpty()) {
                    name = $scope.content[nameIndex][$scope.nameHeader]
                    value = name;
                    window.localStorage['allowModify'] = $scope.content[nameIndex]['allowModify'];
                }
                element.removeClass('active-row');

                if($scope.inputTypeFieldID == 'constantName'){
                    $("#pageRoleId").val($scope.content[nameIndex]['id'])
                }

                if($scope.isPbPage== 'true'){
                    value =$scope.content[nameIndex]['id']
                    $scope.inputTypeFieldID = 'pbid-'+$scope.inputTypeFieldID;
                }

                if($scope.inputTypeFieldID == 'constantName'){
                    $("#extendsPage  option:selected").remove();
                }
                if($scope.inputTypeFieldID == 'constantName' && $scope.content[nameIndex]['extendsPage']) {
                    $("#extendsPage").append("<option label='"+$scope.content[nameIndex]['extendsPage']+"' selected='selected' value="+$scope.content[nameIndex]['extendsPage']+">"+$scope.content[nameIndex]['extendsPage']+"</option>");
                    var input = angular.element(document.getElementById('extendsPage'))
                    input.trigger('change');
                }

                $("#"+$scope.inputTypeFieldID+" option:selected").remove();
                $("#"+$scope.inputTypeFieldID).append("<option label='"+name+"' selected='selected' value="+value+">"+name+"</option>");

                var selectInput = angular.element(document.getElementById($scope.inputTypeFieldID))
                selectInput.trigger('focus');
                selectInput.trigger('change');

            };

            $scope.setFocusOnLoad = function () {
                var FOCUSRING = 'focus-ring';
                var ACTIVEROW = 'active-row';
                var gridFirstRow = $("#nameDataTable").closest('.table-container').find('.tbody tbody tr:first');
                var gridFirstRowFirstCell = $("#nameDataTable").closest('.table-container').find('.tbody tbody tr:first td:first');
                $('tr.active-row').removeClass(ACTIVEROW);
                $(gridFirstRow).addClass(ACTIVEROW);
                //$(gridFirstRowFirstCell).focus();
                $(gridFirstRowFirstCell).addClass(FOCUSRING);
            }

        }]);
})();

var process = process || {env: {NODE_ENV: "development"}};
/******************************************************************************
 *  Copyright 2013-2024 Ellucian Company L.P. and its affiliates.             *
 ******************************************************************************/

/*
Common Javascript functions used by pagebuilder applications
*/

// notification centre functionality to be invoked by pages created in page builder
alert = function(message, params ){ //message,promptMessage,type,flash,prompts) {
    //give default values
    var noteSpec = {
        message: message,
        type: params&&params.type?params.type:"success",
        promptMessage: params&&params.promptMessage?params.promptMessage:"",
        flash: params&&params.flash?params.flash:false
    };
    if(noteSpec.type=='error'){
        noteSpec.id = params&&params.id?params.id:'content';
        noteSpec.component = params&&params.component?params.component:'PbComponent';
    }
    var prompts = params&&params.prompts?params.prompts:[{label: $.i18n.prop("sspb.custom.page.default.affirm"), action:function(){}}];

    if (params && params.elementToFocus) {
        noteSpec.elementToFocus = params.elementToFocus;
    }
    var note = new Notification(noteSpec);
    if (prompts && !noteSpec.flash) {
        prompts.forEach( function(prompt) {
            note.addPromptAction( prompt.label, function() {
                prompt.action();
                notifications.remove( note );
            });
        })
    }
    notifications.addNotification(note);
};

//Temporary fix for framework issue. ToDo remove when not needed any more.
$(function() {
    _.defer( ContentManager.setContentPosition );
});

//remove by value for arrays. Return if value was remove
Array.prototype.remove=function(value){
    var i =  this.indexOf(value);
    if (i==-1)
        return false;
    else
        this.splice(i,1);
    return true;
};

Array.prototype.removeAll=function(){
    this.splice(0,this.length);
};

// IE 8 missing Array methods
if (!('forEach' in Array.prototype)) {
    Array.prototype.forEach= function(action, that /*opt*/) {
        for (var i= 0, n= this.length; i<n; i++)
            if (i in this)
                action.call(that, this[i], i, this);
    };
}

//Polyfill startsWith
if (!String.prototype.startsWith) {
    String.prototype.startsWith = function(searchString, position){
        position = position || 0;
        return this.substr(position, searchString.length) === searchString;
    };
}

//function to avoid undefined
function nvl(val,def){
    if ( (val == undefined) || (val == null ) ) {
        return def;
    }
    return val;
}

function getControllerScopeById(id) {
    var rootScope = angular.element(document.querySelector('[ng-app]')).injector().get('$rootScope');
    var scope = rootScope.$$childHead;
    //traverse children of root scope to find the id matching _controllerId
    for (; scope && scope._controllerId !== id; scope = scope.$$nextSibling){}
    return scope;
}

$(document).on('click',function (event) {
    inactivityTimer.reset();
});

$(document).on('keydown',function (event) {
    inactivityTimer.reset();
});

function clickEvent(id,element){
    var keycode = (event.keyCode ? event.keyCode : event.which);
    if($(element).attr("ng-true-value")) {
        var isChecked = $(element).attr("aria-checked") == 'true';
        $(element).attr("aria-checked", !isChecked);
    }
    if(keycode==13 || keycode==32){
        $("#"+id).click();
        event.preventDefault();
    }else if(event.originalEvent != undefined){
        $("#"+id).click();
        event.preventDefault();
    }
}
function clickEventRadio(spanElement){
    var keycode = (event.keyCode ? event.keyCode : event.which);
    var element = spanElement.previousElementSibling;
    if($(element).attr("ng-true-value")) {
        var isChecked = $(element).attr("aria-checked") == 'true';
        $(element).attr("aria-checked", !isChecked);
    }
    if(keycode==13 || keycode==32){
        element.click();
        event.preventDefault();
    }else if(element){
        element.click();
        event.preventDefault();
    }
}

function checkboxClick(element){
    $(element).next().click();
}


/* App Module */

if (undefined == myCustomServices) {
    var myCustomServices = [];
}

myCustomServices.push('modalPopup');
myCustomServices.push('ngAria');

//noinspection JSUnusedAssignment
var appModule = appModule||angular.module('BannerOnAngular', myCustomServices);

/* disable debug: */
appModule.config(['$compileProvider', function ($compileProvider) {
    $compileProvider.debugInfoEnabled(false);
}]);

if (pageControllers) {
    if (window["CustomPageController"]) { // backwards compatibel with alpha release
        pageControllers["CustomPageController"] = window["CustomPageController"];
    }
    for (var pc in pageControllers) {
        if (pageControllers.hasOwnProperty(pc)) {
            appModule.controller(pc, pageControllers[pc]);
        }
    }
}
appModule.controller('homePageUrlCtr', ['$scope', '$window', '$http', function($scope, $window, $http) {
    $window.onload = function() {
        var url = $('#homeURL').val();
        if(url && url.indexOf('applicationNavigator')!=-1){
            $('#branding').attr('target','_top')
        }
        $('#branding').attr('href', url);

    };

}]);
// below filter is used for pagination
appModule.filter('startFrom', function() {
    return function(input, start) {
        start = +start; //parse to int
        return input.slice(start);
    }
});

appModule.filter('to_trusted', ['$sce', function($sce){
    return function(text) {
        return $sce.trustAsHtml(text);
    };
}]);


appModule.run(['$templateCache', function($templateCache )  {
    console.log("App module.run started" );
    $templateCache.put('gridFooter.html',
        "<div class=\"ngFooterPanel  pagination-container\" ng-class=\"{'ui-widget-content': jqueryUITheme, 'ui-corner-bottom': jqueryUITheme}\" ng-style=\"getFooterStyles()\" style='font-size: 0.65em'>" +
        "    <div id=\"paging-container-#gridName#\" class=\"pagination-controls align-left\"  role=\"navigation\">" +
        "           {{grid.appScope.#gridName#DS.enableDisablePagination()}}"+
        /*"        <div class=\"paging-control first {{!cantPageBackward() && 'enabled'||''}}\" ng-click=\"pageToFirst()\"></div>"+
        "        <div class=\"paging-control previous {{!cantPageBackward() && 'enabled'||''}}\" ng-click=\"pageBackward()\"></div>"+*/
        "        <xe-button xe-type=\"secondary\" xe-btn-class=\"first\" xe-aria-label=\"{{::'pagination.first.label' | xei18n}}\" xe-btn-click=\"grid.appScope.#gridName#DS.pageToFirst()\" title=\"{{grid.appScope.geti18n('first')}}\" xe-disabled=\"grid.appScope.#gridName#DS.firstPrev\" ng-cloak></xe-button>\n" +
        "        <xe-button xe-type=\"secondary\" xe-btn-class=\"previous\" xe-aria-label=\"{{::'pagination.previous.label' | xei18n}}\" xe-btn-click=\"grid.appScope.#gridName#DS.pageBackward()\" title=\"{{grid.appScope.geti18n('previous')}}\" xe-disabled=\"grid.appScope.#gridName#DS.firstPrev\" ng-cloak></xe-button>\n"+
        "        <span class=\"paging-text page\" for=\"pbid-#gridName#-Page\"> {{grid.appScope.geti18n('pageLabel')}}</span>"+
        "        <span title=\"{{::'pagination.page.shortcut.label' | xei18n}}\" role=\"presentation\" >" +
        "        <input id=\"pbid-#gridName#-PageInput\" class=\"page-number\" ng-disabled=\"grid.appScope.#gridName#DS.maxPages() == 1 || grid.appScope.#gridName#DS.maxPages() == 0\" min=\"{{!grid.appScope.#gridName#DS.maxPages() ? 0 : 1}}\" max=\"{{grid.appScope.#gridName#DS.maxPages()}}\" " +
        "               type=\"number\" ng-model=\"grid.appScope.#gridName#DS.pagingOptions.currentPage\" " +
        "               aria-valuenow=\"{{grid.appScope.#gridName#DS.pagingOptions.currentPage?grid.appScope.#gridName#DS.pagingOptions.currentPage:0}}\" aria-valuemax=\"{{grid.appScope.#gridName#DS.maxPages()}}\" " +
        "               aria-valuemin=\"{{!grid.appScope.#gridName#DS.maxPages() ? 0 : 1}}\"  " +
        "               aria-label=\"{{::'pagination.page.aria.label' | xei18n}}.{{::'pagination.page.label' | xei18n}} {{grid.appScope.#gridName#DS.pagingOptions.currentPage}} {{::'pagination.page.of.label' | xei18n}} {{grid.appScope.#gridName#DS.maxPages()}}\" "+
        "               tabindex='0' style=\"width: 50px; display: inline; height: 3.5em;\" />" +
        "       </span> "+
        "        <span class=\"paging-text page-of\"> {{grid.appScope.geti18n('maxPageLabel')}} </span> <span class=\"paging-text total-pages\"> {{grid.appScope.#gridName#DS.maxPages()}}  </span>"+
      /*  "        <div class=\"paging-control next {{!cantPageForward() && 'enabled'||''}}\" ng-click=\"pageForward()\"></div>" +
        "        <div class=\"paging-control last {{!cantPageToLast()  && 'enabled'||''}}\" ng-click=\"pageToLast()\" ></div>"+*/
        "        <xe-button xe-type=\"secondary\" xe-btn-class=\"next\" xe-aria-label=\"{{::'pagination.next.label' | xei18n}}\" xe-btn-click=\"grid.appScope.#gridName#DS.pageForward()\" title=\"{{grid.appScope.geti18n('next')}}\"  xe-disabled=\"grid.appScope.#gridName#DS.nextLast\"  ng-cloak></xe-button>\n" +
        "        <xe-button xe-type=\"secondary\" xe-btn-class=\"last\" xe-aria-label=\"{{::'pagination.last.label' | xei18n}}\" xe-btn-click=\"grid.appScope.#gridName#DS.pageToLast()\" title=\"{{grid.appScope.geti18n('last')}}\" xe-disabled=\"grid.appScope.#gridName#DS.nextLast\" ng-cloak></xe-button>\n"+
        "        <div class=\"divider dispInline\"></div>" +
        "        <span class=\"paging-text page-per\" id=\"pbid-#gridName#-RecordsPerPage\"> {{grid.appScope.geti18n('ngPageSizeLabel')}} </span>" +
        "        <div  role=\"application\" class=\"page-size-select-wrapper dispInline\" alt='{{grid.appScope.geti18n('ngPageSizeLabel')}}'>" +
        "            <select page-size-select role=\"listbox\" aria-label=\"{{grid.appScope.geti18n('ngPageSizeLabel')}}\" class=\"per-page-select\" ng-model=\"grid.appScope.#gridName#DS.pagingOptions.pageSize\" ng-options=\"s as s for s in grid.appScope.#gridName#DS.pagingOptions.pageSizes\" tabindex='0' aria-labelledby=\"pbid-#gridName#-RecordsPerPage\"> "+
        "             </select>" +
        "        </div>"+
        "       <span class=\"ngLabel\">{{grid.appScope.geti18n('ngTotalItemsLabel')}} {{grid.appScope.#gridName#DS.maxRows()}}</span>" +
        "       <span ng-show=\"filterText.length > 0\" class=\"ngLabel\">({{grid.appScope.geti18n('ngShowingItemsLabel')}} {{grid.appScope.#gridName#DS.totalFilteredItemsLength()}})</span>" +
        "    </div>" +
        "    <div class='customPaginationRightCenter' > #gridControlPanel# </div>" +
        "</div>");

}]);

//Add some functions to the scope
appModule.factory('pbAddCommon', function() {
    function factory(scopeIn) {
        scopeIn.setDefault = function(parent,model,def)   {
            var val;
            if (parent) {
                val=parent[model];
                if ( (val === undefined) || (val === null ) ) {
                    parent[model]=def;
                }
                console.log("***setDefault - parent="+parent +" model="+model);
            } else {
                console.log ("***setDefault - unhandled case. parent="+parent +" model="+model);
            }
        };
        scopeIn.log = function(txt) {
            console.log(txt);
        };
        scopeIn.alert = function(txt) {
            alert(txt);
        };

        //function to avoid undefined
        scopeIn.nvl = function (val,def){
            if ( (val == undefined) || (val == null ) ) {
                return def;
            }
            return val;
        };
    }
    return factory;
});

//Factory for resources
appModule.factory('pbResource', ['$resource', function($resource ) {
    function PBResource(resourceName )  {
        //Expecting a resource name exposed at resourceBase+resourceName
        //For backwards compatibility, replace the location used in the alpha release with resourceBase
        this.resourceURL=resourceName.startsWith("$$contextRoot/")?
            resourceName.replace("$$contextRoot/",rootWebApp):
            resourceName.startsWith("/")?
                resourceName.replace(rootWebApp+'internal/', resourceBase):resourceBase+resourceName;
        this.Resource=null;

        //get a new resource from the factory
        this.getResource = function(cache) {
            return $resource(this.resourceURL+'/:id',
                {id:'@id'}, //parameters
                {//custom methods
                    update: {method:'PUT', params: {id:'@id'}},
                    list: {method:'GET',cache: cache, isArray:true}
                }
            );
        };

        //post (create) a new record immediately
        this.post = function (item, params, success, error) {
            if (this.Resource == null) {
                this.Resource = this.getResource();
            }
            var newItem = new this.Resource(item);
            newItem.$save(params, success, error);
        };

        //put (update) a record immediately
        this.put = function (item, params, success, error) {
            if (this.Resource == null) {
                this.Resource = this.getResource();
            }
            var newItem = new this.Resource(item);
            newItem.$update(params, success, error);
        }
    }

    function PBResourceFactory(resourceURL) {
        return new PBResource(resourceURL);
    }

    return PBResourceFactory;
}]);


//Factory for data sets
appModule.factory('pbDataSet', ['$cacheFactory', '$parse', function( $cacheFactory, $parse ) {
    // Use function to create a post query function associated with
    // a DataSet instance
    console.log("========After Page load =========")
    eval("var $scope"+";");
    function CreatePostEventHandlers(instanceIn, userPostQuery, userOnError) {
        console.log("Post Query Constructor for DataSet " + instanceIn.componentId);
        this.go = function(it, response) {
            var instance=instanceIn;
            var uf=userPostQuery;
            var size = Array.isArray(it)?it.length:1;
            console.log("Executing Post Load for DataSet="+instance.componentId+" size="+size);
            if (instance) {
                if(instance.added.length > 0){
                    instance.tempAdded = JSON.parse(JSON.stringify( instance.added ));
                    instance.added.removeAll();
                }
                instance.tempAdded.forEach(function(item) {
                    instance.add(item);
                }, instance);
                instance.tempAdded.removeAll();
            }

            instance.currentRecord=instance.data[0];  //set the current record
            instance.setInitialRecord();
            instance.totalCount=parseInt(response("X-hedtech-totalCount")) ;
            if (instance.pagingOptions) {
                if (instance.pagingOptions.currentPage>instance.numberOfPages() ) {
                    //causes requery
                    instance.pagingOptions.currentPage=instance.numberOfPages();
                } else if (!instance.pagingOptions.currentPage) {
                    instance.pagingOptions.currentPage=1;
                    console.log('Set currentPage to ',instance.pagingOptions.currentPage);
                }
            }
            if (uf) { uf(it, response); }
        };
        this.error = function (response ) {
            var uf=userOnError;
            if (uf) {uf(response);}
            //alert("Error: "+response.data.errors[0].errorMessage);
        };
        return this;
    }

    // Common function to create a new DataSet
    // The DataSet should encapsulate all the model functions query, create, update, delete
    function PBDataSet(params)  {

        this.setResource = function(resource){
            if (resource) {
                if (!this.cache) {
                    this.cache = $cacheFactory(this.componentId);
                }
                this.Resource = resource.getResource(this.cache);
            }
        };
        this.componentId=params.componentId;
        this.data=params.data;

        this.setResource(params.resource);
        this.queryParams=params.queryParams;
        var onSaveSuccess;
        if(params.onSaveSuccess) {
            onSaveSuccess = params.onSaveSuccess
        }
        var onSave;
        if(params.onSave) {
            onSave = params.onSave
        }

        this.selectValueKey=params.selectValueKey;
        this.selectInitialValue=params.selectInitialValue;
        this.currentRecord=null;
        this.selectedRecords=[];
        this.sortInfo={fields:[], directions:[], columns:[]};
        this.modified = [];
        this.added = [];
        this.deleted = [];
        this.tempAdded = [];
        if (this.data === undefined)  {
            this.data = [];
        }
        this.pageSize=params.pageSize;
        if (this.pageSize>0){
            this.pagingOptions = {  pageSizes: [this.pageSize, this.pageSize*2, this.pageSize*4],
                pageSize: this.pageSize, //.toString(), //With number, the select shows empty initially
                currentPage: null
            };
        }
        this.numberOfPages = function () {
            return this.pageSize === 0? 1 : Math.max(1,Math.ceil(this.totalCount/this.pagingOptions.pageSize));
        };

        $scope.iqueryParams =[];

        this.init = function() {
            this.currentRecord=null;
            this.selectedRecords.removeAll();
            this.modified.removeAll();
            this.added.removeAll();
            this.deleted.removeAll();
            this.totalCount=null;
            if (this.pageSize>0) {
                this.pagingOptions.currentPage = 1;
            }
        };

        var post = new CreatePostEventHandlers(this,params.postQuery, params.onError);

        this.get = function() {
            this.init();
            eval("var params="+this.queryParams+";");
            /*fix for minification issue , params will be replaced with variable b after minification*/
            eval("typeof b !=='undefined'") ? eval("b = params"):null;
            console.log("Query Parameters:", params) ;
            this.data=[];
            this.data[0] = this.Resource.get(params, post.go, post.error);
        };

        this.confirmPageActionMain =  function(success,cancelAction) {
            var msg = $.i18n.prop("sspb.page.visualbuilder.loadpage.unsaved.changes.message");
            var note = {type: 'warning', message: msg};
            note.message = note.message.replace(/\n/g, "<br />");
            note.flash = false;
            var n = new Notification( note );

            n.addPromptAction( $.i18n.prop("sspb.page.visualbuilder.page.cancel.message"), function() {
                notifications.remove( n );
                if (cancelAction) {
                    cancelAction();
                }
            });
            $scope.parent = this;
            n.addPromptAction( $.i18n.prop("sspb.page.visualbuilder.page.continue.message"), function() {
                notifications.remove( n );
                success();

            });

            notifications.addNotification( n );
        };

        this.load = function(p,confirmed) {
            var iload = confirmed || !$scope.changed;
            if (!iload  && this.dirty()) {
                var currentInstance = this;
                this.confirmPageActionMain(function(){
                    currentInstance.load(p,true);
                    $scope.changed = false;
                    currentInstance.init();
                });
            }
            if (iload) {
                if (p && p.clearCache)
                    this.cache.removeAll();
                if (p && p.paging) {
                    if (this.pagingOptions.currentPage && this.pagingOptions.pageSize) {
                        this.currentRecord = null;
                        this.selectedRecords.removeAll();
                    } else {
                        return; //abort load, watch fired for undefined currentPage or pageSize
                    }
                } else {
                    this.init();
                }
                eval("var params;");
                /* Fixing issue for minification , assigning params to variable a*/
                if (!(p && p.all)) {
                    params = eval("params=" + this.queryParams + ";");
                    eval("typeof b !=='undefined'") ? eval("b = params") : null;
                } else {
                    params = {};
                }
                if (this.pageSize > 0) {
                    params.offset = (nvl(this.pagingOptions.currentPage, 1) - 1) * this.pagingOptions.pageSize;
                    params.max = this.pagingOptions.pageSize;
                }
                if (this.sortInfo.fields.length > 0) {
                    params.sortby = [];
                    for (var ix = 0; ix < this.sortInfo.fields.length; ix++) {
                        params.sortby[ix] = this.sortInfo.fields[ix] + ' ' + this.sortInfo.directions[ix];
                    }
                }
                var parameter = {};
                Object.keys(params).forEach(function (key) {
                    var bkey = Base64.encode(getRandomArbitrary(0, 99));
                    var bval = Base64.encode(getRandomArbitrary(0, 99));
                    parameter[bkey + Base64.encode(key)] = (params[key] != null && params[key] != undefined) ? bval + Base64.encode(params[key]) : bval + params[key];
                });
                parameter["encoded"] = true;
                params = parameter;
                console.log("Query Parameters:", params);
                //If an id parameter exists use get
                var res = (params.id === undefined) ? this.Resource.list(params, post.go, post.error) : this.Resource.get(params, post.go, post.error);
                this.data = (Array.isArray(res)) ? res : [res];
            }

        };

        this.loadAll = function() {
            this.load({all:true});
        };

        this.setInitialRecord = function () {
            var model = $parse(this.componentId);
            //a grid has model.name noop and cannot be assigned a value
            if (model.name != "noop")  {
                if (this.selectValueKey) {  //we have a select
                    var iVal=this.selectInitialValue;
                    //it doesn't seem always desired to pick the current record of a select
                    //if (iVal == null || iVal == undefined){
                    //    iVal = this.currentRecord[this.selectValueKey];
                    //}
                    model.assign($scope, iVal);
                    this.setCurrentRecord(iVal); //Adding this experimentally for xe-dropdown
                }  else {
                    model.assign($scope, this.currentRecord);
                }
                console.log("Set initial record ");
            }
        };
        this.gridKeyPress= function($event, item)
        {
            var focus = "moveFocus";
            var rowIndex ;
            var ridx=encodeHTML($(event.target).attr('rowid'));
            var pageSize = this.pagingOptions.pageSize?this.pagingOptions.pageSize:5;
            if(!ridx) {
                rowIndex=item.row.entity.ROW_NUMBER ? item.row.entity.ROW_NUMBER - 1 : 0;
                rowIndex=rowIndex%pageSize;
            }else{
                rowIndex=ridx;
            }

            var t = $event.target;
            var clickedClass = $(t).attr("class");
            var keyCode = $event.keyCode ? $event.keyCode : $event.which;
            if($event.key === "Escape"){
                keyCode=27;
            }
            $event.stopPropagation();
            if([37,38,39,40,9,27,13].includes(keyCode) ) {
                var prevElement = $(t);
                var gridID = item.grid.element[0].id;
                var attr = $("#"+gridID+" "+ ".moveFocus0").first().attr('firstCell');
                if(!attr) {
                    $("#" + gridID + " " + ".moveFocus0").not(":eq(0)").removeAttr('tabindex');
                    $("#" + gridID + " " + ".moveFocus0").first().attr('firstCell', true);
                }
                if (clickedClass.includes(focus)) {
                    switch (keyCode) {
                        case 39:
                            if (item.colRenderIndex !== undefined && item.colRenderIndex >= 0)
                                focus += item.colRenderIndex + 1;
                            this.setFocus($("#"+gridID+" "+ "."+focus).eq(rowIndex), prevElement);
                            break;
                        case 37:
                            if (item.colRenderIndex !== undefined && item.colRenderIndex >= 0)
                                focus += item.colRenderIndex - 1
                            this.setFocus($("#"+gridID+" "+ "."+focus).eq(rowIndex), prevElement);
                            break;
                        case 38:
                            if (item.colRenderIndex !== undefined && item.colRenderIndex >= 0)
                                focus += item.colRenderIndex
                            rowIndex > 0 ? rowIndex-- : rowIndex;
                            this.setFocus($("#"+gridID+" "+ "."+focus).eq(rowIndex),prevElement);
                            break;
                        case 40:
                            rowIndex++;
                            if (item.colRenderIndex !== undefined && item.colRenderIndex >= 0)
                                focus += item.colRenderIndex
                            this.setFocus($("#"+gridID+" "+ "."+focus).eq(rowIndex), prevElement);
                            break;
                        case 13:
                            this.setFocus($(t).children().first(), prevElement);
                            $scope.$$postDigest(function () {
                                var firstChild = $(t).children().first();
                                firstChild.click();
                                event.preventDefault();
                                firstChild.not('.bound').addClass('bound').on('keypress', function (e) {
                                    var keyinternalCode =  e.keyCode ? e.keyCode : e.which;
                                    if(keyinternalCode==13){
                                        $(this).click()
                                        e.preventDefault();
                                    }
                                })
                            })
                            break;
                        case 9:
                            $('.ngFooterPanel').focus();
                            break;
                        default:
                            return;
                    }
                } else {
                    switch (keyCode) {
                        case 27:
                            this.setFocus($(t).parent(), prevElement);
                            break;
                        case 13:
                            this.setFocus($(t), prevElement);
                            break;
                        default:
                            return;
                    }
                }
            }
            return;
        }
        this.setFocus=function(ele, prevElement){
            if($(ele).length>0){
                var attr = $(prevElement).attr('firstCell');
                if (!attr) {
                    $(prevElement).attr('tabindex',-1);
                }
                $scope.$$postDigest(function () {
                    $(ele).attr('tabindex', 0);
                    $(ele).focus();
                })
            }
        }
        this.setCurrentRecord = function ( item )   {
            var model = $parse(this.componentId);
            //a grid has model.name noop and cannot be assigned a value
            if (model.name != "noop")  {
                if (this.currentRecord === item) {
                    return; // This has already fired
                }
                this.currentRecord = null;
                if (item === undefined )   {
                    //do nothing
                } else {
                    if ( (typeof(item) == "string" || typeof(item) == "number" || item === null) && this.selectValueKey ) {
                        // assume item is a selected string and we are in the DataSet for a select item
                        // Do we have to do a linear search like done below?
                        var len = this.data.length, found=false;
                        for (var i = 0; i < len && !found; i++ ){
                            if (item == this.data[i][this.selectValueKey]) {
                                found=true;
                                this.currentRecord=this.data[i];
                            }
                        }
                    } else {
                        //assume item is of the right type
                        this.currentRecord=item;
                        }
                }
                if (this.selectValueKey) {  //we have a select -- Next assignment may not be needed as item is already the model
                    if (this.currentRecord && this.currentRecord.hasOwnProperty(this.selectValueKey))
                        model.assign($scope, this.currentRecord[this.selectValueKey]);
                }  else {
                    model.assign($scope, this.currentRecord);
                }
                console.log("Set current record:", this.currentRecord);
            }
        };

        this.setModified = function(item) {
            if (this.modified.indexOf(item) == -1 && this.added.indexOf(item) == -1) {
                this.modified.push(item);
                $scope.changed = true;
            }
        };

        this.setDateCompFocus = function (colIndexId, colClass) {
            var keyType = event.type
            if(keyType!='input') {
                if ($("[id$=" + colIndexId + "]  span").length > 0 && colClass) {
                    $("[id$=" + colIndexId + "]  span").attr('tabindex', 0);
                    $("[id$=" + colIndexId + "]  span." + colClass).focus();

                } else {
                    $("#" + colIndexId).focus();
                }
            }
        };

        this.add = function(item) {
            var newItem = new this.Resource(item);
            this.added.push(newItem);
            // add the new item to the beginning of the array so they show up on the top of the table
            this.data.unshift(newItem);
            $scope.changed = true;
            // TODO - clear the add control content
        };

        //delete selected record(s)
        this.deleteRecords = function(items) {
            /*if($scope.gridApi) {
                items = $scope.gridApi.selection.getSelectedRows();
            }*/
            $scope.changed = true;
            if (this.data.remove(items) ) {
                // we got a single record
                if (this.deleted.indexOf(items) == -1) {
                    this.deleted.push(items);
                }
                if (this.selectedRecords) {
                    this.selectedRecords.remove(items);
                }
                if(this.added){
                    this.added.remove(items);
                }
            } else {
                // we got an array of records to delete
                var tempArry = items.slice()
                tempArry.forEach(function(item, index) {
                    if (this.data.remove(item) )  {
                        if (this.deleted.indexOf(item) == -1) {
                            this.deleted.push(item);
                        }
                        this.selectedRecords.remove(item);
                        this.added.remove(item);
                    }
                }, this);
            }
        };

        // Create Base64 Object
        var Base64={_keyStr:"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
            encode:function(e){var t="";var n,r,i,s,o,u,a;var f=0;e=Base64._utf8_encode(e);while(f<e.length)
            {n=e.charCodeAt(f++);r=e.charCodeAt(f++);i=e.charCodeAt(f++);s=n>>2;o=(n&3)<<4|r>>4;u=(r&15)<<2|i>>6;a=i&63;
                if(isNaN(r)){u=a=64}else if(isNaN(i)){a=64}t=t+this._keyStr.charAt(s)+this._keyStr.charAt(o)
                +this._keyStr.charAt(u)+this._keyStr.charAt(a)}return t},decode:function(e){var t="";var n,r,i;
                var s,o,u,a;var f=0;e=e.toString().replace(/[^A-Za-z0-9+/=]/g,"");while(f<e.length)
                {s=this._keyStr.indexOf(e.charAt(f++));o=this._keyStr.indexOf(e.charAt(f++));
                    u=this._keyStr.indexOf(e.charAt(f++));
                    a=this._keyStr.indexOf(e.charAt(f++));n=s<<2|o>>4;r=(o&15)<<4|u>>2;i=(u&3)<<6|a;t=t+String.fromCharCode(n);
                    if(u!=64){t=t+String.fromCharCode(r)}if(a!=64){t=t+String.fromCharCode(i)}}t=Base64._utf8_decode(t);
                return t},_utf8_encode:function(e){e=e.toString().replace(/\r\n/g,"n");var t="";for(var n=0;n<e.length;n++)
            {var r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r)}else if(r>127&&r<2048)
            {t+=String.fromCharCode(r>>6|192);t+=String.fromCharCode(r&63|128)}else
            {t+=String.fromCharCode(r>>12|224);t+=String.fromCharCode(r>>6&63|128);
                t+=String.fromCharCode(r&63|128)}}return t},_utf8_decode:function(e)
            {var t="";var n=0;var r=c1=c2=0;while(n<e.length){r=e.charCodeAt(n);if(r<128){t+=String.fromCharCode(r);n++}
            else if(r>191&&r<224){c2=e.charCodeAt(n+1);t+=String.fromCharCode((r&31)<<6|c2&63);n+=2}else
            {c2=e.charCodeAt(n+1);c3=e.charCodeAt(n+2);t+=String.fromCharCode((r&15)<<12|(c2&63)<<6|c3&63);n+=3}}
                return t}}

        function getRandomArbitrary(min, max) {
            return Math.round(Math.random() * (max - min) + min);
        }

        this.save = function() {

            function successHandler(action) {
                return function (response) {
                    if(!params.onSaveSuccess && onSaveSuccess){params.onSaveSuccess=onSaveSuccess}
                    if (params.onSaveSuccess) {
                        params.onSaveSuccess(response, action);
                    }
                };
            }

            var replaces = false;
            if(!params.onSave && onSave) {params.onSave=onSave}
            if (params.onSave) {
                replaces = params.onSave();
                if (replaces) {
                    $scope.changed = false;
                    return;
                }
            }
            $scope.changed=false;
            var addedCount = JSON.parse(JSON.stringify( this.added )).length;
            var currentObject = this;
            this.added.forEach( function(item)  {
                item.$save({},successHandler('C')).then(function (response) {
                    currentObject.added.remove(response);
                    addedCount--;
                    if(addedCount === 0){
                        currentObject.tempAdded = JSON.parse(JSON.stringify( currentObject.added ));
                        currentObject.load();
                        currentObject.added.removeAll();
                    }
                }).catch(function (errorResponse) {
                    addedCount--;
                    post.error(errorResponse);
                    if(addedCount === 0){
                        currentObject.tempAdded = JSON.parse(JSON.stringify( currentObject.added ));
                        currentObject.load();
                        currentObject.added.removeAll();
                    }
                });
            });
          //  this.added = [];
            this.modified.forEach( function(item)  {
                if(item.id) {
                    item.$update({}, successHandler('U'), post.error);
                }else {
                    //item.$save({},successHandler('C'), post.error);
                    console.error("item cannot update without id" + item);
                }
            });
            this.modified = [];
            var deletedCount = JSON.parse(JSON.stringify( this.deleted )).length;
            this.deleted.forEach( function(item)  {
                if(item.id) {
                    item.$delete({id: item.id}, successHandler('D')).then(function (response) {
                        console.log("Item has been deleted successfully "+ response.id)
                        deletedCount--;
                        if(deletedCount === 0 && currentObject.added.length === 0){
                            currentObject.load();
                        }
                    }).catch(function (errorResponse) {
                        deletedCount--;
                        post.error(errorResponse);
                        if(addedCount === 0 && currentObject.added.length === 0){
                            currentObject.load();
                        }
                    });
                }else {
                    deletedCount--;
                    console.error("item cannot delete without id" + item);
                }
            });

            this.deleted = [];
            this.cache.removeAll();
        };

        this.openDropDown = function(item, event) {
            var id = "#"+item;
            var keycode = (event.keyCode ? event.keyCode : event.which);
            if(keycode == '13'){
                $(id).show();
            }
        };
        this.dirty = function() {
            return this.added.length + this.modified.length + this.deleted.length>0;
        };

        this.onUpdate=params.onUpdate;

        if (params.autoPopulate) {
            this.load();
        }

        if (!params.resource && params.data) {
            this.setInitialRecord();
        }

        this.maxRows = function () {
            var tot = this.totalCount?this.totalCount:0
            var ret = Math.max(tot, this.data?this.data.length:0);
            return ret;
        };
        this.multiSelect = false;// ($scope.gridApi.config.enableRowSelection && $scope.gridApi.config.multiSelect);
        this.selectedItemCount = $scope.gridApi?$scope.gridApi.selectedItemCount:0;
        this.maxPages = function () {
            return Math.ceil(this.maxRows() / this.pagingOptions.pageSize);
        };

        this.pageForward = function() {
            var page = this.pagingOptions.currentPage;
            if (this.totalServerItems > 0) {
                this.pagingOptions.currentPage = Math.min(page + 1, this.maxPages());
            } else {
                this.pagingOptions.currentPage++;
            }
            /*this.enableDisablePagination();*/
        };

        this.pageBackward = function() {
            var page = this.pagingOptions.currentPage;
            this.pagingOptions.currentPage = Math.max(page - 1, 1);
            /*this.enableDisablePagination();*/
        };

        this.pageToFirst = function() {
            this.pagingOptions.currentPage = 1;
            /*this.enableDisablePagination();*/
        };

        this.pageToLast = function() {
            var maxPages = this.maxPages();
            this.pagingOptions.currentPage = maxPages;
            /*this.enableDisablePagination();*/
        };

        this.cantPageForward = function() {
            var curPage = this.pagingOptions.currentPage;
            var maxPages = this.maxPages();
            if (this.totalCount > 0) {
                this.nextLast = curPage >= maxPages;
            } else {
                this.nextLast = this.data?this.data.length < 1:true;
            }
            return this.nextLast;

        };
        this.cantPageToLast = function() {
            if (this.totalCount > 0) {
                return this.cantPageForward();
            } else {
                this.nextLast=true;
                return true;
            }

        };
        this.cantPageBackward = function() {
            var curPage = this.pagingOptions.currentPage;
            this.firstPrev=(curPage? curPage<= 1:true);
            return this.firstPrev;
        };

        this.enableDisablePagination = function(){
            this.cantPageForward();
            this.cantPageBackward();
            this.cantPageToLast();
        }

        return this;
    }

    function PBDataSetFactory(scopeIn, params) {
        $scope = scopeIn;
        /* Fixing issue during minification setting the scope value in minfication, c will
        * hold value of scope*/
        eval("typeof c !=='undefined'") ? eval("$scope = c"):null;
        return new PBDataSet(params);
    }

    return PBDataSetFactory;
}]);

function initlizePopUp(params){
    try {
        if (angular.module("modalPopup") && angular.module("xe-ui-components")) {
            var popupContainerDiv = document.getElementById('popupContainerDiv');
            if (null != popupContainerDiv && undefined != popupContainerDiv) {
                dialogPopUp(params);
            }
        }
    } catch (e) {
        console.log(e)
        document.getElementById('popupContainerDiv').style.display = 'none';
    }
};

function dialogPopUp(params) {
    var dataFetch = false;
    var dialogDiv = document.getElementById('popupContainerDiv');
    dialogDiv.setAttribute("ng-app","modalPopup");
    dialogDiv.setAttribute("ng-controller","nameModalPopupCtrl");

    var titleHeader = '';
    var no_result_found = $.i18n.prop("nameDataTable.column.common.nodata");
    var go_button_label = $.i18n.prop("nameDataTable.column.common.button.label");
    var columnRefName = '';
    var nameHeader = '';
    var searchConfig = '';
    if(params.serviceNameType == 'virtualdomains'){
        searchConfig = 'virtualDomainSearchConfig';
        nameHeader = 'serviceName';
        titleHeader = $.i18n.prop("nameDataTable.popup.virtualDomain.pageheader");
        columnRefName = 'virtualDomainColumns';
    }else if(params.serviceNameType == 'pages'){
        searchConfig = 'pageSearchConfig';
        nameHeader = 'constantName';
        titleHeader = $.i18n.prop("nameDataTable.column.page.name.heading");
        columnRefName = 'pageColumns';
    }else if(params.serviceNameType == 'csses'){
        searchConfig = 'cssSearchConfig';
        nameHeader = 'constantName';
        titleHeader = $.i18n.prop("nameDataTable.popup.stylesheet.pageheader");
        columnRefName = 'cssColumns';
    }
    params.excludePage = params.excludePage ? params.excludePage : "";
    dialogDiv.setAttribute("ng-init","nameHeader='"+nameHeader+"';serviceNameType='"+params.serviceNameType+"';excludePage='"+ params.excludePage+"'");

    var scope = angular.element(document.getElementById('popupContainerDiv')).scope();
    if(!scope){
        dialogDiv.innerHTML =
            '<xe-popup-modal show="modalShown" focusbackelement="'+params.id+'" ' +
            'pageheader="'+ encodeHTML(titleHeader) +'" class="custom-popup-landpage dataGridModalPopup" > '+
            '<popup-content>' +
            '<div id="namePopupGrid" class="demo-container"> \n' +
            '    <xe-table-grid table-id="nameDataTable" \n'+
            '                   header="'+columnRefName+'"  \n'+
            '                   end-point="urlTest" \n' +
            '                   fetch="getData(query)" on-row-click="onRowClick(data,index)"\n' +
            '                   post-fetch="postFetch(response, oldResult)" \n' +
            '                   content="content"  results-found="resultsFound" toolbar="true"\n' +
            '                   paginate="true" \n' +
            '                   continuous-scrolling="false" \n' +
            '                   on-row-double-click="onDoubleClick(data,index)" \n' +
            '                   no-data-msg="'+ encodeHTML(no_result_found) +'"\n' +
            '                   empty-table-msg="emptyTableMsg" \n' +
            '                   search-config="'+searchConfig+'" \n' +
            '                   pagination-config="paginationConfig"\n' +
            '                   draggable-column-names="draggableColumnNames" \n' +
            '                   mobile-layout="mobileConfig"\n' +
            '                   height="12em" \n' +
            '                   refresh-grid="refreshGrid" >\n' +
            '    </xe-table-grid>\n' +
            '</div> ' +
            '</popup-content>  <popup-buttons>\n' +
            '            <xe-button ng-click="goToPage()" id="goToPageButton" xe-disabled="isResponseEmpty()" xe-type="primary" xe-label="'+encodeHTML(go_button_label)+'" ></xe-button>\n' +
            '        </popup-buttons>' +
            '</xe-popup-modal>';
        angular.element(document.getElementById('popupContainerDiv')).ready(function() {
            angular.bootstrap(document.getElementById('popupContainerDiv'), ['modalPopup']);
            angular.element(document.getElementsByClassName('column-filter-container ng-scope')).remove();
        });
    }else{
        $("th.constantName").removeClass("focus-ring ascending decending");
        $("th.dateCreated").removeClass("focus-ring ascending decending");
        $("th.lastUpdated").removeClass("focus-ring ascending decending");
        $("th.serviceName").removeClass("focus-ring ascending decending");
        angular.element(document.getElementsByClassName('secondary first')).click();
        var perPageEle = angular.element(document.getElementsByClassName('per-page-select'));
        if($($(perPageEle)[0]).attr("value") != 'number:5'){
            $($(perPageEle)[0]).val("number:5");
            perPageEle.trigger('change');
        }
        dataFetch = true;
    }
    setTimeout(function() {
        if(!scope)
        {
            scope = angular.element(document.getElementById('popupContainerDiv')).scope();
        }
        scope.$apply(function(){
            scope.excludePage = params.excludePage;
            scope.inputTypeFieldID = params.id;
            scope.isPbPage = params.isPbPage;
            scope.nameToggleModal(dataFetch);
        });
    }, 0)
};

function encodeHTML(data) {
    return data.replace(/&/g, '&amp;')
        .replace(/</g, '&lt;')
        .replace(/>/g, '&gt;')
        .replace(/\"/g, '&quot;')
        .replace(/\'/g, '&#39;')
        .replace(/\//g, '&#x2F;');

}

function updateLocalStorage(name,id) {
    window.localStorage['pageName'] = name;
    window.localStorage['pageId'] = id;
}

appModule.directive('pbPopupDataGrid', ['$parse', function($parse)  {
    return {
        require: '?ngModel',
        restrict: 'C',
        scope: false,
        controller: ['$scope', function ($scope) {
            $scope.loadPopup = function (options) {
                initlizePopUp(options);
            };
        }],

        link : function (scope,element,attrs) {
            onLoadEventData();
            scope.onClickData = function (event, cusomAttr) {
                //scope.pageName = null;
                if(cusomAttr){
                    scope.options =$parse(cusomAttr.pbPopupDataGrid)() || {};
                }else {
                    scope.options = $parse(attrs.pbPopupDataGrid)() || {};
                }
                if (scope.options.id == 'extendsPage') {
                    scope.options.excludePage = scope.pageName;
                }
                var keycode = (event.keyCode ? event.keyCode : event.which);
                if (event.type == 'click' || event.type == 'enter' || event.type == 'mousedown')
                    scope.loadPopup(scope.options);
                else {
                    if (keycode == '13' && event.type != 'keyup')
                        scope.loadPopup(scope.options);
                    else if (event.type == 'keydown') {
                        document.getElementById(attrs.id).blur();
                    }
                }
                if (keycode != '9') {
                    event.preventDefault();
                    event.stopPropagation();
                }else{
                    return;
                }

            }

            scope.changeData = function(event){
                if(scope.options.isPbPage== 'true'){
                    var selectedValue = document.getElementById(attrs.id).value;
                    var selectedText = $("#"+attrs.id+" option:selected").text();
                    pbPagesChangeEvent(scope.options.id,selectedText,selectedValue);
                }
                event.preventDefault();
                event.stopPropagation();
            }

            function pbPagesChangeEvent(id,name,value) {
                if(id == 'selectVirtualDomain'){
                    scope.selectVirtualDomainDS = {};
                    scope.selectVirtualDomainDS.data = [{'VID':value,'SERVICE_NAME':name}]
                    scope.selectVirtualDomain = value;
                    scope.CONSTANT_NAME = name;
                    scope.selectVirtualDomain_onUpdate();
                }
                if(id == 'selectPage'){
                    scope.selectPageDS = {};
                    scope.selectPageDS.data = [{'PID':value,'CONSTANT_NAME':name}];
                    scope.selectPage = value;
                    scope.CONSTANT_NAME = name;
                    scope.selectPage_onUpdate();
                }

            }
            function onLoadEventData(){
                var pageName = window.localStorage['pageName'];
                if(pageName){
                    pageName=pageName.replace(/(\%20|javascript:|#|script).*$/g, "");
                }
                var pageId = window.localStorage['pageId'];
                var pbDataOptions = $parse(attrs.pbPopupDataGrid)() || {};

                if(pageName && pbDataOptions.isPbPage== 'true'){
                    pbPagesChangeEvent(pbDataOptions.id,pageName,pageId)
                }

                if(pageName && pbDataOptions.isPbPage != 'true' && pbDataOptions.id == 'vdServiceName'){
                    $("#"+pbDataOptions.id+" option:selected").remove();
                    $("#"+pbDataOptions.id).append("<option label='"+pageName+"' selected='selected' value="+pageName+">"+pageName+"</option>");
                    $("#LoadVDForm").submit();
                }

                if(pageName && pbDataOptions.isPbPage != 'true' && pbDataOptions.id == 'constantName'){
                    scope.pageName = pageName;
                    scope.getPageSource();
                }

                updateLocalStorage("","");
            }

            element.on('enter',scope.onClickData);
          //  element.on('keyup', scope.onClickData);
            //element.on('keydown', scope.onClickData);
            element.keypress(function (e) {
                if (e.key === 'Enter' || e.keyCode === 13 ||  e.which === 13) {
                    scope.onClickData(e, attrs);
                }else if ((e.keyCode === 32 ||  e.which === 32)){
                    e.target.click();
                }
            })
            element.on('change', scope.changeData);
            element.on('click', scope.onClickData);
            element.on('mousedown',scope.onClickData);
        }
    };
}]);

$(document).ready(function () {
    $('table').on('keydown',function (e) {
        e = e || window.event;
        if (e && ($(this).attr('id') === "visualComposer-table" || $(this).attr('id') === "virtualDomain-table1" || $(this).attr('id') === "virtualDomain-table2")) {
            return;
        }
        var firstCell = $(this).children('tbody').find('tr:first').find('td:first');
        if($(e.target).attr("role")!=="columnheader" && !$(e.target).attr('firstCell')){
            $(e.target).attr('tabindex','-1');
        }
        if(!$(firstCell).attr('firstCell')){
            $(firstCell).attr('firstCell', true);
            $(firstCell).attr('tabindex','0')
        }
        var keyCode = e.keyCode ? e.keyCode : e.which;
        var start = e.target;
        switch(keyCode) {
            case 38:
                var idx = start.cellIndex;
                var nextrow = start.parentElement.previousElementSibling;
                if (nextrow && idx != null) {
                    var sibling = nextrow.cells[idx];
                    $(sibling).attr('tabindex', '0');
                    sibling.focus();
                }
                break;
            case 40:
                var idx = start.cellIndex;
                var nextrow = start.parentElement.nextElementSibling;
                if (nextrow && idx != null) {
                    var sibling = nextrow.cells[idx];
                    $(sibling).attr('tabindex', '0');
                    sibling.focus();
                }
                break;
            case 37:
                var sibling = isPreviousSiblingPresent(start.previousElementSibling);
                $(sibling).attr('tabindex', '0');
                sibling ? sibling.focus() : '';
                break;
            case 39:
                var sibling= isNextSiblingPresent(start.nextElementSibling);
                $(sibling).attr('tabindex', '0');
                sibling ? sibling.focus() : '';
                break;
            case 13:
                var editablElement = $(start).find('input, select, span, a, textarea').first();
                editablElement.attr('tabindex','0').click();
                editablElement.focus();
                editablElement.bind("keydown",function (e) {
                    var keyinternalCode =  e.keyCode ? e.keyCode : e.which;
                    if(keyinternalCode==27){
                        $(this).attr('tabindex','-1');
                        $(this).closest('td').focus();
                    }
                })
                break;
            case 27:
                var current = e.target
                $(current).attr('tabindex','-1');
                $(current).closest('td').attr('tabindex',0);
                $(current).closest('td').focus();
                break;
            default:
                return;
        }
    });
});

function isNextSiblingPresent(sib){
    if($(sib).is(':visible')) {
        return sib;
    }else{
        var nextSib = sib?sib.nextElementSibling:null;
        if(nextSib)
            sib= isNextSiblingPresent(nextSib)
    }
    return sib;
}

function isPreviousSiblingPresent(sib){
    if($(sib).is(':visible')) {
        return sib;
    }else{
        var prevSib = sib?sib.previousElementSibling:null;
        if(prevSib)
            sib= isNextSiblingPresent(prevSib)
    }
    return sib;
}

function validateName(valObj) {
    let pageNameRegExpr = /^[a-zA-Z]+[a-zA-Z0-9\._-]*$/;
    let params = {type: "error", id: valObj.id, flash: true, component: $("#"+valObj.id)}
    if (!valObj.value) {
        alert($.i18n.prop("sspb.page.visualbuilder.name.required.message"), params);
        return;
    } else if (!pageNameRegExpr.test(valObj.value)) {
        alert($.i18n.prop("sspb.page.visualbuilder.name.invalid.pattern.message"), params);
        return;
    }
};

var process = process || {env: {NODE_ENV: "development"}};
/*********************************************************************************
 Copyright 2016-2024 Ellucian Company L.P. and its affiliates.
 **********************************************************************************/
(function(){
    'use strict';
    angular.module('dialogApp', ['xe-ui-components'])
        .config(['aboutServiceProvider',function(aboutServiceProvider) {
            aboutServiceProvider.setMethod('GET');
            var menuBaseURL = $('meta[name=menuBaseURL]').attr("content");
            var aboutUrl = $('meta[name=aboutUrl]').attr("content");
            var aboutUrlContextPath = $('meta[name=aboutUrlContextPath]').attr("content");
            if(aboutUrl == ""){
                aboutUrl = aboutUrlContextPath + "/about/data?callback=JSON_CALLBACK";
            }
            aboutServiceProvider.setBackendUrl(aboutUrl);
        }])
        .controller('ModalCtrl',['$scope','$timeout', function($scope, $timeout){
            $scope.modalShown = false;
            $scope.toggleModal = function() {
                $scope.modalShown = !$scope.modalShown;
                $timeout(function () {
                    if(CommonContext.integratedWithExperience){
                        angular.element('#xeModalPrivacyLink').remove();
                    } else {
                        angular.element('#xeModalPrivacyLink')[0].focus();
                    }
                });
            };
            var switchTojqueryLegacy = $('meta[name=switchTojqueryLegacy]').attr("content");
            if(switchTojqueryLegacy=='' || switchTojqueryLegacy === 'false')
            $scope.toggleModal();
            $scope.aboutApi = {
                title: 'api.title',
                name: 'about.banner.application.name',
                version: 'about.banner.application.version',
                platformVersion: 'about.banner.platform.version',
                general: 'about.banner.tab.general',
                plugin: 'about.banner.plugins',
                otherPlugin: 'about.banner.other.plugins',
                copyright: 'about.banner.copyright',
                close : 'api.close',
                copyrightLegalNotice: 'about.banner.copyrightLegalNotice',
                ellucianPrivacyNotice: 'about.banner.ellucianPrivacyNotice',
                ellucianPrivacyNoticeLink: 'about.banner.ellucianPrivacyNoticeLink'
            };
            if(CommonContext.integratedWithExperience){
                delete $scope.aboutApi['ellucianPrivacyNotice'];
                delete $scope.aboutApi['ellucianPrivacyNoticeLink'];
            }
        }]);
})();
var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2017-2024 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

(function () {
    'use strict';
    angular.module('userPreference', ['xe-ui-components'])
        .config(['$httpProvider', function ($httpProvider) {
            $httpProvider.defaults.headers.common['Cache-Control'] = 'no-cache';
            $httpProvider.defaults.cache = false;
            if (!$httpProvider.defaults.headers.get) {
                $httpProvider.defaults.headers.get = {};
            }
            $httpProvider.defaults.headers.get['If-Modified-Since'] = '0';
        }])
        .controller('PopupCtrl', ['$scope', '$timeout', '$http', function ($scope, $timeout, $http) {
            $scope.modaluserPreferencShown = false;
            $scope.modalcloseButtonShownEnhanceUserExp = true;
            $scope.disableButton = true;
            $scope.disableNoThanksButton = false;
            $scope.disableAcceptButton = false;

            if ($('meta[name=menuBaseURL]').attr("content")) {
                var baseURL = $('meta[name=menuBaseURL]').attr("content");
            }
            $scope.prevSelected = {};
            $scope.toggleLanguageSettingsPopup = function () {
                $scope.closeButtonRequired = true;
                setDefaultValuesForAttributes();
                getLocaleListForLanguageSettings();
            };

            $scope.closePopup = function () {
                $scope.modaluserPreferencShown = !$scope.modaluserPreferencShown;
            };

            $scope.popupTitle = $.i18n.prop('userpreference.popup.language.heading');
            $scope.localeList = [];

            $scope.$watch("language.selected", function (newVal, oldVal) {
                if (undefined != $scope.prevSelected && undefined != $scope.language.selected && $scope.language.selected.locale === $scope.prevSelected.locale) {
                    $scope.disableButton = true;
                } else if (newVal != oldVal) {
                    $scope.disableButton = false;
                }
            });

            // To pass the selected Locale to backend and set in DB
            $scope.saveLocale = function () {
                if ($scope.disableButton) {
                    return false;
                }
                $scope.closePopup();
                $http({
                    method: 'POST',
                    url: baseURL + "/userPreference/saveLocale",
                    data: $scope.language.selected,
                    cache: false
                }).then(function onSuccess(response, status) {
                    if (response.data && response.data.status === 'success') {
                        successNotification();
                    } else {
                        errorNotification();
                    }
                }).catch(function onError(data) {
                    // Handle error
                    errorNotification();
                });

            };

            $scope.saveUsageTracking = function (usageTrackingOption) {
                $scope.toggleEnhanceUserExpPopup();
                $http({
                    method: 'POST',
                    url: baseURL + "/userPreference/saveUsageTracking",
                    data: {'usageTrackingOption': usageTrackingOption},
                    cache: false
                }).then(function onSuccess(response, status) {
                    if (response.data && response.data.status === 'success' && response.status == 200) {
                        $("meta[name='isUsageTrackingEnabled']").attr( "content", response.data.responseMap.isUsageTrackingEnabled );
                    }
                })
            };

            $scope.toggleEnhanceUserExpPopup = function () {
                if (!$("meta[name='isUsageTrackingEnabled']").attr("content")) {
                    $scope.modalcloseButtonShownEnhanceUserExp = false;
                }
                else
                {
                    $scope.modalcloseButtonShownEnhanceUserExp = true;
                }
                $scope.modalEnhanceUserExpShown = !$scope.modalEnhanceUserExpShown;
                angular.element('.xe-popup-mask').attr('tabindex', 0).focus();
                $timeout(function () {
                    if($('#noThanksBtn')[0].disabled){
                        angular.element('#acceptBtn').focus();
                    }
                    else {
                        angular.element('#noThanksBtn').focus();
                    }
                });
            };

            $scope.language = {};

            function successNotification() {
                notifications.clearNotifications();
                var element1 = angular.element("#ariaNotificationCountText");
                var successmessage = $.i18n.prop('userpreference.notification.success.message');
                var successNotification = new Notification({
                    message: successmessage,
                    type: "success",
                    flash: "true",
                    elementToFocus: element1
                });
                notifications.addNotification(successNotification);
            }

            function errorNotification() {
                notifications.clearNotifications();
                var errorMessage = $.i18n.prop('userpreference.notification.failure.message');
                var errorNotification = new Notification({
                    message: errorMessage,
                    type: "error",
                    flash: "true"
                });
                notifications.addNotification(errorNotification);
                angular.element("div.notification-item-message").find('span:first').attr('tabindex', 0);
                angular.element("div.notification-item-message").find('span:first').addClass('notification-flyout-item');
                angular.element("div.notification-item-message").find('span:first').focus();
            }

            function setDefaultValuesForAttributes() {
                notifications.clearNotifications();
                $scope.modaluserPreferencShown = !$scope.modaluserPreferencShown;
                delete $scope.language.selected;
                var liveChoicestStusRegion = $('.uiselect-choice-status-hidden-accessible');
                if (liveChoicestStusRegion.length == 0) {
                    var regionSpan = angular.element('<span></span>');
                    regionSpan.attr('role', 'status');
                    regionSpan.attr('aria-live', 'assertive');
                    regionSpan.attr('aria-atomic', 'true');
                    regionSpan.attr('class', 'uiselect-choice-status-hidden-accessible');
                    angular.element(document.body).append(regionSpan);
                }
            }

            function getLocaleListForLanguageSettings() {
                $timeout(function () {
                    if(angular.element('#xeModalMask').attr('tabindex', 0))
                    angular.element('#xeModalMask').attr('tabindex', 0).focus();
                    if(angular.element('#preference').find('input')[1])
                    angular.element('#preference').find('input')[1].focus();
                    // To Fetch all Locales from DB
                    $http({
                        method: 'GET',
                        url: baseURL + "/userPreference/locales",
                        data: $scope.language.selected
                    }).then(function onSuccess(response) {
                        var localesFromDB = response.data["locales"];
                        if (undefined != response.data["selectedLocale"]) {
                            $scope.language.selected = response.data["selectedLocale"];
                            $scope.prevSelected = response.data["selectedLocale"];
                            $('.uiselect-choice-status-hidden-accessible').text("");
                            $('.uiselect-choice-status-hidden-accessible').text($scope.prevSelected.description);
                            $('.uiselect-choice-status-hidden-accessible').innerText = $scope.prevSelected.description;
                        }
                        $scope.disableButton = true;
                        $scope.localeList = localesFromDB;
                    }).catch(function onError(data) {
                        // Handle error
                        errorNotification();
                    });
                });
            }
            var switchTojqueryLegacy = $('meta[name=switchTojqueryLegacy]').attr("content");
            if(switchTojqueryLegacy=='' || switchTojqueryLegacy === 'false')
            {
                $scope.showuserPreferencDiv = true;
                $scope.toggleLanguageSettingsPopup();
            }
        }]);
})();

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2017-2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/* global notifications */
$(function(){
    'use strict';
    if (window.extensibilityInfo.admin) {
        try {
            var extensibilityMenu = $($('#extensibility_title'), $('#toolsList'));
            var requestContext = $('meta[name=requestContext]').attr("content");
            var url;
            if (extensibilityMenu.length === 0) {
                ToolsMenu.addSection("extensibility", $.i18n.prop("xe.menu.section.extensibility"));
            }
            ToolsMenu.addItem("uploadProperties", $.i18n.prop("xe.menu.extensibility.uploadProperties"), "extensibility",
                function () {
                    if(location.href.indexOf('/ssb/') > -1) {
                        url =  requestContext + '/ssb/uploadProperties';
                    } else {
                        url =  requestContext + '/uploadProperties';
                    }
                    return location.href = url;
                }
            );
            ToolsMenu.addItem("themeEditor", $.i18n.prop("xe.menu.extensibility.themeEditor"), "extensibility",
                function () {
                    if(location.href.indexOf('/ssb/') > -1) {
                        url =  requestContext + '/ssb/themeEditor';
                    } else {
                        url =  requestContext + '/themeEditor';
                    }
                    return location.href = url;
                }
            );
        } catch (e) {
            log.error('Failed to initiate Upload Properties and Theme Editor Tools menu. Exception: ' + e);
        }
    }
});

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2019-2021 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

/* global notifications */
$(function(){
    'use strict';
    if (user && user.isSuperUser) {
        try {
            var extensibilityMenu = $($('#extensibility_title'), $('#toolsList'));
            var url;
            if (extensibilityMenu.length === 0) {
                ToolsMenu.addSection("extensibility", $.i18n.prop("xe.menu.section.extensibility"));
            }

            ToolsMenu.addItem("securityConfiguration", $.i18n.prop("xe.menu.extensibility.SecurityConfiguration"), "extensibility",
                function () {
                    url =  $('meta[name=requestContext]').attr("content") + '/customPage/page/pbadm.AdminSecurity';
                    return location.href = url;
                }
            );
        } catch (e) {
            log.error('Failed to add Admin Security Configuration option into Tools menu: ' + e);
        }
    }
});

var process = process || {env: {NODE_ENV: "development"}};
/*******************************************************************************
 Copyright 2024 Ellucian Company L.P. and its affiliates.
 *******************************************************************************/

(function (popUp) {
    'use strict';
    angular.module('dataSharing', ['xe-ui-components'])
        .config(['$httpProvider', function ($httpProvider) {
            $httpProvider.defaults.headers.common['Cache-Control'] = 'no-cache';
            $httpProvider.defaults.cache = false;
            if (!$httpProvider.defaults.headers.get) {
                $httpProvider.defaults.headers.get = {};
            }
            $httpProvider.defaults.headers.get['If-Modified-Since'] = '0';
        }])
        .controller('dataSharingModal', ['$scope', '$timeout', '$http', function ($scope, $timeout, $http) {
            $scope.modalcloseButtonShownEnhanceUserExp = true;
            $scope.disableNoThanksButton = false;
            $scope.disableAcceptButton = false;

            if ($('meta[name=menuBaseURL]').attr("content")) {
                var baseURL = $('meta[name=menuBaseURL]').attr("content");
            }
            $scope.popupTitle = $.i18n.prop('userpreference.popup.enhanceExp.heading');

            $scope.closePopup = function () {
                $scope.modaluserPreferencShown = !$scope.modaluserPreferencShown;
            };

            $scope.saveUsageTracking = function (usageTrackingOption) {
                $scope.toggleEnhanceUserExpPopup();
                $http({
                    method: 'POST',
                    url: baseURL + "/userPreference/saveUsageTracking",
                    data: {'usageTrackingOption': usageTrackingOption},
                    cache: false
                }).then(function onSuccess(response, status) {
                    if (response.data && response.data.status === 'success' && response.status == 200) {
                        $("meta[name='isUsageTrackingEnabled']").attr( "content", response.data.responseMap.isUsageTrackingEnabled );
                    }
                });
            };

            $scope.toggleEnhanceUserExpPopup = function () {
                if (!$("meta[name='isUsageTrackingEnabled']").attr("content")) {
                    $scope.modalcloseButtonShownEnhanceUserExp = false;
                }
                else
                {
                    $scope.modalcloseButtonShownEnhanceUserExp = true;
                }
                $scope.modalEnhanceUserExpShown = !$scope.modalEnhanceUserExpShown;
                angular.element('.xe-popup-mask').attr('tabindex', 0).focus();
                $timeout(function () {
                    if($('#noThanksBtn')[0].disabled){
                        angular.element('#acceptBtn').focus();
                    }
                    else {
                        angular.element('#noThanksBtn').focus();
                    }
                });
            };
            var switchTojqueryLegacy = $('meta[name=switchTojqueryLegacy]').attr("content");
            if(switchTojqueryLegacy=='' || switchTojqueryLegacy === 'false')
            {
                $timeout( function () {
                    popUp();
                });
            }
        }]);
})(window.enhanceUserExperiencePopup);
var process = process || {env: {NODE_ENV: "development"}};
//= require modules/angularApp-mf.js
//= require angular/angular-aria.min.js
//= require modules/min-bannerWeb-mf.js
//= require lib/angular-ui-grid/ui-grid.js
//= require lib/angular-ui/angular-ui.js
//= require pbRunDirectives.js
//= require xe-components/xe-ui-components.js
//= require bootstrap/bootstrap.js
//= require modalPoppup.js
//= require pbRunApp.js
//= require about/about.js
//= require preference/userpreference.js
//= require menu/tools-menu.js
//= require pb-tools-menu.js
//= require userSessionValidationCheck.js
//= require dataSharing/dataSharing.js

